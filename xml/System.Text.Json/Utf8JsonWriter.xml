<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="070dbf1cdd5368596425e792b2b0e0f6f5ea89f9" /><Meta Name="ms.sourcegitcommit" Value="cb4d218ffd5a459a5f921fe1d945c682d1e09aca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/16/2019" /><Meta Name="ms.locfileid" Value="69540523" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d3140-101">Bietet eine leistungsstarke API für das Schreiben von UTF-8-codiertem JSON-Text in Vorwärtsrichtung ohne Zwischenspeicherung.</span><span class="sxs-lookup"><span data-stu-id="d3140-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-102">`Utf8JsonWriter`schreibt den Text sequenziell ohne Zwischenspeichern und entspricht standardmäßig der [JSON-RFC](https://tools.ietf.org/html/rfc8259), mit Ausnahme von Kommentaren.</span><span class="sxs-lookup"><span data-stu-id="d3140-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="d3140-103">Eine Methode, die versucht, bei aktivierter Validierung ungültigen JSON- <xref:System.InvalidOperationException> Code zu schreiben, löst eine mit einer kontextspezifischen Fehlermeldung aus.</span><span class="sxs-lookup"><span data-stu-id="d3140-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="d3140-104">Um die Ausgabe mit Einzügen und Leerraum zu formatieren oder die Validierung zu überspringen, erstellen Sie eine <xref:System.Text.Json.JsonWriterOptions> Instanz von, und übergeben Sie Sie an den Writer.</span><span class="sxs-lookup"><span data-stu-id="d3140-104">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="d3140-105">Das Ziel für das Schreiben von JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="d3140-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="d3140-106">Definiert das benutzerdefinierte Verhalten von <see cref="T:System.Text.Json.Utf8JsonWriter" /> Standardmäßig wird minimierter JSON-Text (ohne zusätzliche Leerzeichen) geschrieben und überprüft, ob der geschriebene JSON-Code gemäß JSON RFC strukturell gültig ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="d3140-107">Erstellt eine neue <see cref="T:System.Text.Json.Utf8JsonWriter" />-Instanz mit dem angegebenen <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-107">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-108"><paramref name="bufferWriter" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-108"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="d3140-109">Das Ziel für das Schreiben von JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="d3140-109">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="d3140-110">Definiert das benutzerdefinierte Verhalten von <see cref="T:System.Text.Json.Utf8JsonWriter" /> Standardmäßig wird minimierter JSON-Text (ohne zusätzliche Leerzeichen) geschrieben und überprüft, ob der geschriebene JSON-Code gemäß JSON RFC strukturell gültig ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-110">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="d3140-111">Erstellt eine neue <see cref="T:System.Text.Json.Utf8JsonWriter" />-Instanz mit einem angegebenen <paramref name="utf8Json" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-111">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-112"><paramref name="utf8Json" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-112"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3140-113">Ruft die Gesamtzahl der Bytes ab, die bisher durch die aktuelle Instanz an die Ausgabe committet wurden.</span><span class="sxs-lookup"><span data-stu-id="d3140-113">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="d3140-114">Die Gesamtanzahl der Bytes, die von <see cref="T:System.Text.Json.Utf8JsonWriter" /> bis zu an die Ausgabe committet wurden.</span><span class="sxs-lookup"><span data-stu-id="d3140-114">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-115">Im Fall von <xref:System.Buffers.IBufferWriter%601>gibt diese Eigenschaft an, wie viel ibufferwriter erweitert hat.</span><span class="sxs-lookup"><span data-stu-id="d3140-115">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="d3140-116">Im Fall von <xref:System.IO.Stream>gibt diese Eigenschaft an, wie viele Daten in den Stream geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="d3140-116">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3140-117">Ruft die Anzahl der bisher vom <see cref="T:System.Text.Json.Utf8JsonWriter" /> geschriebenen Bytes ab, die noch nicht in die Ausgabe geleert und committet wurden.</span><span class="sxs-lookup"><span data-stu-id="d3140-117">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="d3140-118">Die Anzahl von Bytes, die bisher von der <see cref="T:System.Text.Json.Utf8JsonWriter" /> geschrieben wurden, die noch nicht in die Ausgabe geleert wurden und für die ein Commit ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-118">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3140-119">Ruft die Tiefe des aktuellen Tokens ab.</span><span class="sxs-lookup"><span data-stu-id="d3140-119">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="d3140-120">Die Tiefe des aktuellen Tokens.</span><span class="sxs-lookup"><span data-stu-id="d3140-120">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-121">Die `CurrentDepth` -Eigenschaft verfolgt die rekursive Tiefe der geschachtelten Objekte/Arrays im bisher geschriebenen JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="d3140-121">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-122">Committet übrig gebliebenen JSON-Text, der noch nicht geleert wurde, und gibt alle Ressourcen frei, die von der aktuellen Instanz verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="d3140-122">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-123">Im Fall von ibufferwriter wird dadurch der zugrunde liegende <xref:System.Buffers.IBufferWriter`1> basierend auf den bisher geschriebenen Schritten erweitert.</span><span class="sxs-lookup"><span data-stu-id="d3140-123">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="d3140-124">Im Fall von Stream schreibt die Daten in den Stream und leert Sie.</span><span class="sxs-lookup"><span data-stu-id="d3140-124">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="d3140-125">Die <xref:System.Text.Json.Utf8JsonWriter> Instanz kann nicht wieder verwendet werden, nachdem Sie verworfen wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-125">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-126">Committet asynchron übrig gebliebenen JSON-Text, der noch nicht geleert wurde, und gibt alle Ressourcen frei, die von der aktuellen Instanz verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="d3140-126">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="d3140-127">Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="d3140-127">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-128">Im Fall von ibufferwriter wird dadurch der zugrunde liegende <xref:System.Buffers.IBufferWriter`1> basierend auf den bisher geschriebenen Schritten erweitert.</span><span class="sxs-lookup"><span data-stu-id="d3140-128">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="d3140-129">Im Fall von Stream schreibt die Daten in den Stream und leert Sie.</span><span class="sxs-lookup"><span data-stu-id="d3140-129">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="d3140-130">Die <xref:System.Text.Json.Utf8JsonWriter> Instanz kann nicht wieder verwendet werden, nachdem Sie verworfen wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-130">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-131">Committet den bisher geschriebenen JSON-Text, sodass er für das Ausgabeziel sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-131">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-132">Im Fall von ibufferwriter wird dadurch der zugrunde liegende <xref:System.Buffers.IBufferWriter`1> basierend auf den bisher geschriebenen Schritten erweitert.</span><span class="sxs-lookup"><span data-stu-id="d3140-132">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="d3140-133">Im Fall von <xref:System.IO.Stream>werden die Daten in den Stream geschrieben und geleert.</span><span class="sxs-lookup"><span data-stu-id="d3140-133">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d3140-134">Die Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="d3140-134">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="d3140-135">Das Token zum Überwachen von Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="d3140-135">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="d3140-136">Der Standardwert ist <see cref="T:System.Threading.CancellationToken.None" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-136">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="d3140-137">Committet asynchron den bisher geschriebenen JSON-Text, sodass er für das Ausgabeziel sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-137">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="d3140-138">Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="d3140-138">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-139">Im Fall von ibufferwriter wird dadurch der zugrunde liegende <xref:System.Buffers.IBufferWriter`1> basierend auf den bisher geschriebenen Schritten erweitert.</span><span class="sxs-lookup"><span data-stu-id="d3140-139">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="d3140-140">Im Fall von <xref:System.IO.Stream>schreibt dies die Daten in den Stream und leert Sie asynchron, während Abbruch Anforderungen überwacht werden.</span><span class="sxs-lookup"><span data-stu-id="d3140-140">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d3140-141">Die Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="d3140-141">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3140-142">Ruft das benutzerdefinierte Verhalten auf, wenn JSON-Daten mithilfe dieser Instanz geschrieben werden, die angibt, ob die Ausgabe beim Schreiben formatiert und die strukturelle JSON-Überprüfung übersprungen werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-142">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value><span data-ttu-id="d3140-143">Ein-Objekt, das das Verhalten dieser-Instanz für die Formatierung und Validierung definiert.</span><span class="sxs-lookup"><span data-stu-id="d3140-143">An object that defines the behavior of this instance for formatting and validation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-144">Setzt den internen Zustand dieser Instanz zurück, sodass sie wiederverwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="d3140-144">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-145">Der <xref:System.Text.Json.Utf8JsonWriter> verwendet weiterhin die ursprünglichen Writer-Optionen und die ursprüngliche Ausgabe (entweder <xref:System.Buffers.IBufferWriter`1> oder <xref:System.IO.Stream>) als Ziel.</span><span class="sxs-lookup"><span data-stu-id="d3140-145">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d3140-146">Die Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="d3140-146">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="d3140-147">Das Ziel für das Schreiben von JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="d3140-147">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="d3140-148">Setzt den internen Zustand dieser Instanz zurück, sodass sie mit einer neuen Instanz von <see cref="T:System.Buffers.IBufferWriter`1" /> wiederverwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="d3140-148">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-149">Der <xref:System.Text.Json.Utf8JsonWriter> verwendet weiterhin die ursprünglichen Writer-Optionen, schreibt jedoch nun in `bufferWriter` als neues Ziel.</span><span class="sxs-lookup"><span data-stu-id="d3140-149">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-150"><paramref name="bufferWriter" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-150"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d3140-151">Die Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="d3140-151">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="d3140-152">Das Ziel für das Schreiben von JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="d3140-152">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="d3140-153">Setzt den internen Zustand dieser Instanz zurück, sodass sie mit einer neuen Instanz von <see cref="T:System.IO.Stream" /> wiederverwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="d3140-153">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-154">Der <xref:System.Text.Json.Utf8JsonWriter> verwendet weiterhin die ursprünglichen Writer-Optionen, aber jetzt in `utf8Json` als neues Ziel schreiben.</span><span class="sxs-lookup"><span data-stu-id="d3140-154">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-155"><paramref name="utf8Json" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-155"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d3140-156">Die Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="d3140-156">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-157">Der UTF-8-codierte Name der zu schreibenden Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="d3140-157">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="d3140-158">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d3140-158">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="d3140-159">Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-159">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-160">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-160">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-161">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-161">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-162">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-162">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-163">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-163">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="d3140-164">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d3140-164">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="d3140-165">Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-165">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-166">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-166">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-167">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-167">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-168">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-168">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-169">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-169">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="d3140-170">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d3140-170">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="d3140-171">Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-171">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-172">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-172">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-173">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-173">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-174">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-174">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-175">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-175">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-176">Der JSON-codierte Name der zu schreibenden Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="d3140-176">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="d3140-177">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d3140-177">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="d3140-178">Schreibt den vorcodierten Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-178">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-179">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-179">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-180">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-180">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="d3140-181">Die Binärdaten, die als Base64-codiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d3140-181">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-182">Schreibt den unformatierten Bytewert als Base64-codierte JSON-Zeichenfolge als Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-182">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-183">Die Bytes werden vor dem Schreiben codiert.</span><span class="sxs-lookup"><span data-stu-id="d3140-183">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-184">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-184">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-185">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-185">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-186">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-186">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-187">Der Wert, der als JSON-Literal <b>true</b> oder <b>false</b> als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-187">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-188">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal <b>true</b> oder <b>false</b>) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-188">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-189">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-189">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-190">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-190">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-191">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-191">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-192">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-192">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-193">Der Wert, der als JSON-Literal <b>true</b> oder <b>false</b> als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-193">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-194">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal <b>true</b> oder <b>false</b>) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-194">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-195">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-195">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-196">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-196">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-197">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-197">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-198">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-198">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-199">Der Wert, der als JSON-Literal <b>true</b> oder <b>false</b> als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-199">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-200">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal <b>true</b> oder <b>false</b>) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-200">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-201">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-201">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-202">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-202">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-203">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-203">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-204">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-204">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-205">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-205">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-206">Der Wert, der als JSON-Literal <b>true</b> oder <b>false</b> als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-206">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-207">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Boolean" />-Wert (als JSON-Literal <b>true</b> oder <b>false</b>) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-207">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-208">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-208">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-209">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-209">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-210">Der Wert, der als JSON-Literal <b>true</b> oder <b>false</b> als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-210">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-211">Schreibt einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal <b>true</b> oder <b>false</b>) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-211">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-212">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-212">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="d3140-213">Der UTF-8-codierte Wert, der als JSON-Kommentar in /*..*/ geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-213">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="d3140-214">Schreibt einen UTF-8-Textwert als JSON-Kommentar.</span><span class="sxs-lookup"><span data-stu-id="d3140-214">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-215">Der Kommentar Wert wird vor dem Schreiben nicht mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-215">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-216">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-216">The specified value is too large.</span></span>
        
<span data-ttu-id="d3140-217">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-217">-or-</span></span>

<span data-ttu-id="d3140-218"><paramref name="utf8Value" /> enthält ein Kommentartrennzeichen (d.h. \*/).</span><span class="sxs-lookup"><span data-stu-id="d3140-218"><paramref name="utf8Value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-219">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar in /*..*/ geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-219">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="d3140-220">Schreibt einen UTF-16-Textwert als JSON-Kommentar.</span><span class="sxs-lookup"><span data-stu-id="d3140-220">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-221">Der Kommentar Wert wird vor dem Schreiben nicht mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-221">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-222">Der angegebene Wert ist zu groß</span><span class="sxs-lookup"><span data-stu-id="d3140-222">The specified value is too large OR.</span></span>
        
<span data-ttu-id="d3140-223">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-223">-or-</span></span>

<span data-ttu-id="d3140-224"><paramref name="value" /> enthält ein Kommentartrennzeichen (d.h. \*/).</span><span class="sxs-lookup"><span data-stu-id="d3140-224"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-225">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar in /*..*/ geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-225">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="d3140-226">Schreibt einen Zeichenfolgentextwert als JSON-Kommentar.</span><span class="sxs-lookup"><span data-stu-id="d3140-226">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-227">Der Kommentar Wert wird vor dem Schreiben nicht mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-227">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-228">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-228">The specified value is too large.</span></span>
        
<span data-ttu-id="d3140-229">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-229">-or-</span></span>

<span data-ttu-id="d3140-230"><paramref name="value" /> enthält ein Kommentartrennzeichen (d.h. \*/).</span><span class="sxs-lookup"><span data-stu-id="d3140-230"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-231">Der <paramref name="value" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-231">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-232">Schreibt das Ende eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-232">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-233">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-233">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-234">Schreibt das Ende eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-234">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-235">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-235">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-236">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-236">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="d3140-237">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und das JSON-Literal <b>NULL</b> als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-237">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-238">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-238">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-239">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-239">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-240">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-240">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-241">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-241">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-242">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und das JSON-Literal <b>NULL</b> als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-242">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-243">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-243">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-244">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-244">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-245">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-245">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-246">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-246">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-247">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und das JSON-Literal <b>NULL</b> als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-247">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-248">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-248">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-249">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-249">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-250">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-250">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-251">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-251">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-252">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-252">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-253">Schreibt den Eigenschaftennamen und das JSON-Literal <b>null</b> als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-253">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-254">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-254">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-255">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-255">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-256">Schreibt das JSON-Literal <b>NULL</b> als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-256">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-257">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-257">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-258">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-258">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-259">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-259">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-260">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-260">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="d3140-261">Schreibt den <xref:System.Decimal> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-261">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-262">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-262">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-263">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-264">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-265">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-265">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-266">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-267">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-267">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-268">Schreibt den <xref:System.Double> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-268">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-269">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-269">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-270">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-270">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-271">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-271">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-272">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-272">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-273">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-273">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-274">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-274">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-275">Schreibt den <xref:System.Int32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-275">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-276">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-276">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-277">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-277">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-278">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-278">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-279">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-279">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-280">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-280">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-281">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-281">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-282">Schreibt den <xref:System.Int64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-282">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-283">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-283">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-284">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-284">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-285">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-285">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-286">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-286">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-287">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-287">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-288">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-288">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-289">Schreibt den <xref:System.Single> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-289">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-290">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-290">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-291">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-291">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-292">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-292">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-293">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-293">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-294">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-294">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-295">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-295">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-296">Schreibt den <xref:System.UInt32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-296">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-297">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-297">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-298">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-298">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-299">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-299">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-300">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-300">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-301">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-301">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-302">Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-302">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-303">Schreibt den <xref:System.UInt64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-303">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-304">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-304">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-305">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-305">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-306">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-306">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-307">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-307">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-308">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-308">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-309">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-309">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-310">Schreibt den <xref:System.Decimal> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-310">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-311">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-311">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-312">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-312">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-313">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-313">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-314">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-314">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-315">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-315">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-316">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-316">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-317">Schreibt den <xref:System.Double> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-317">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-318">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-318">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-319">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-319">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-320">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-320">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-321">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-321">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-322">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-322">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-323">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-323">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-324">Schreibt den <xref:System.Int32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-324">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-325">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-325">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-326">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-326">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-327">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-327">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-328">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-328">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-329">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-329">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-330">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-330">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-331">Schreibt den <xref:System.Int64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-331">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-332">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-332">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-333">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-333">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-334">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-334">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-335">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-335">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-336">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-336">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-337">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-337">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-338">Schreibt den <xref:System.Single> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-338">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-339">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-339">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-340">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-340">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-341">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-341">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-342">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-343">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-344">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-344">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-345">Schreibt den <xref:System.UInt32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-345">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-346">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-346">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-347">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-347">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-348">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-348">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-349">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-349">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-350">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-350">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-351">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-351">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-352">Schreibt den <xref:System.UInt64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-352">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-353">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-353">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-354">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-354">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-355">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-355">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-356">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-356">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-357">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-357">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-358">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-358">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-359">Schreibt den <xref:System.Decimal> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-359">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-360">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-360">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-361">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-361">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-362">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-362">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-363">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-363">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-364">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-364">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-365">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-365">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-366">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-366">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-367">Schreibt den <xref:System.Double> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-367">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-368">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-368">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-369">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-369">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-370">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-370">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-371">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-371">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-372">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-372">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-373">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-373">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-374">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-374">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-375">Schreibt den <xref:System.Int32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-375">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-376">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-376">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-377">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-377">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-378">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-378">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-379">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-379">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-380">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-380">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-381">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-381">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-382">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-382">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-383">Schreibt den <xref:System.Int64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-383">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-384">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-384">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-385">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-385">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-386">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-386">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-387">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-387">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-388">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-388">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-389">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-389">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-390">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-390">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-391">Schreibt den <xref:System.Single> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-391">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-392">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-392">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-393">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-393">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-394">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-394">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-395">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-395">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-396">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-396">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-397">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-397">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-398">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-398">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-399">Schreibt den <xref:System.UInt32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-399">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-400">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-400">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-401">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-401">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-402">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-402">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-403">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-403">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-404">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-404">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-405">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-405">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-406">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-406">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-407">Schreibt den <xref:System.UInt64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-407">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-408">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-408">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-409">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-409">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-410">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-410">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-411">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-411">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-412">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-412">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-413">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-413">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-414">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-414">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-415">Schreibt den <xref:System.Decimal> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-415">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-416">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-416">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-417">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-417">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-418">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-418">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-419">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-419">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-420">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-420">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-421">Schreibt den <xref:System.Double> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-421">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-422">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-422">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-423">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-423">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-424">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-424">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-425">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-425">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-426">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-426">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-427">Schreibt den <xref:System.Int32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-427">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-428">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-428">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-429">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-429">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-430">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-430">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-431">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-431">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-432">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-432">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-433">Schreibt den <xref:System.Int64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (This is, ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-433">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-434">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-434">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-435">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-435">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-436">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-436">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-437">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-437">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-438">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-438">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-439">Schreibt den <xref:System.Single> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G ').</span><span class="sxs-lookup"><span data-stu-id="d3140-439">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="d3140-440">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-440">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-441">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-441">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-442">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-442">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-443">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-443">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-444">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-444">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-445">Schreibt den <xref:System.UInt32> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-445">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-446">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-446">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-447">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-447">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-448">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-448">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-449">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-449">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-450">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-450">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-451">Schreibt den <xref:System.UInt64> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. ' G '), z. b. 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-451">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="d3140-452">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-452">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-453">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-453">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-454">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-454">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-455">Schreibt einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-455">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-456">Diese Methode schreibt den <xref:System.Decimal> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-456">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-457">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-457">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-458">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-458">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-459">Schreibt einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-459">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-460">Diese Methode schreibt den <xref:System.Double> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-460">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-461">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-461">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-462">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-462">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-463">Schreibt einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-463">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-464">Diese Methode schreibt den <xref:System.Int32> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-464">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="d3140-465">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-465">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-466">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-466">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-467">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-467">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-468">Schreibt einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-468">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-469">Diese Methode schreibt den <xref:System.Int64> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-469">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="d3140-470">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-470">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-471">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-471">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-472">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-472">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-473">Schreibt einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-473">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-474">Diese Methode schreibt den <xref:System.Single> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-474">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-475">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-475">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-476">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-476">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-477">Schreibt einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-477">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-478">Diese Methode schreibt den <xref:System.UInt32> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-478">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="d3140-479">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-479">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-480">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-480">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-481">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-481">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-482">Schreibt einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-482">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-483">Diese Methode schreibt den <xref:System.UInt64> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "G").</span><span class="sxs-lookup"><span data-stu-id="d3140-483">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="d3140-484">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="d3140-484">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-485">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-485">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-486">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-486">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="d3140-487">Schreibt den UTF-8-Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-487">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-488">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-488">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-489">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-489">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-490">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-490">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-491">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-491">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-492">Schreibt den Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-492">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-493">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-493">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-494">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-494">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-495">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-495">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-496">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-496">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-497">Schreibt den Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-497">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-498">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-498">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-499">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-499">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-500">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-500">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-501"><paramref name="propertyName" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-501"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-502">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-502">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-503">Schreibt den vorcodierten Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-503">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-504">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-504">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-505">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-505">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-506">Schreibt den Anfang eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-506">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-507">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-507">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="d3140-508">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-508">-or-</span></span>

<span data-ttu-id="d3140-509">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-509">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-510">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-510">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="d3140-511">Schreibt den Anfang eines JSON-Arrays mit einem als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-511">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-512">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-512">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-513">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-513">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-514">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-514">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="d3140-515">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-515">-or-</span></span>
       
<span data-ttu-id="d3140-516">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-516">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-517">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-517">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-518">Schreibt den Anfang eines JSON-Arrays mit einem als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-518">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-519">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-519">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-520">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-520">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-521">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-521">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="d3140-522">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-522">-or-</span></span>
       
<span data-ttu-id="d3140-523">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-523">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-524">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-524">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-525">Schreibt den Anfang eines JSON-Arrays mit einem als Zeichenfolge angegebenen Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-525">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-526">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-526">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-527">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-527">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-528">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-528">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="d3140-529">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-529">-or-</span></span>
       
<span data-ttu-id="d3140-530">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-530">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-531">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-531">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-532">Der JSON-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-532">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-533">Schreibt den Anfang eines JSON-Arrays mit einem vorcodierten Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-533">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-534">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-534">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-535">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="d3140-535">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
    
<span data-ttu-id="d3140-536">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-536">- or -</span></span>

<span data-ttu-id="d3140-537">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-537">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3140-538">Schreibt den Anfang eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-538">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-539">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-539">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="d3140-540">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-540">-or-</span></span>

<span data-ttu-id="d3140-541">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-541">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-542">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-542">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="d3140-543">Schreibt den Anfang eines JSON-Objekts mit einem als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-543">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-544">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-544">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-545">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-545">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-546">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-546">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="d3140-547">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-547">-or-</span></span>
       
<span data-ttu-id="d3140-548">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-548">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-549">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-549">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-550">Schreibt den Anfang eines JSON-Objekts mit einem als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-550">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-551">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-551">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-552">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-552">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-553">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-553">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="d3140-554">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-554">-or-</span></span>
       
<span data-ttu-id="d3140-555">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-555">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-556">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-556">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-557">Schreibt den Anfang eines JSON-Objekts mit einem als Zeichenfolge angegebenen Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-557">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-558">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-558">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-559">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-559">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-560">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe von 1.000.</span><span class="sxs-lookup"><span data-stu-id="d3140-560">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="d3140-561">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-561">-or-</span></span>
       
<span data-ttu-id="d3140-562">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-562">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-563">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-563">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-564">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-564">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="d3140-565">Schreibt den Anfang eines JSON-Objekts mit einem vorcodierten Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="d3140-565">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-566">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-566">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-567">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="d3140-567">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
          
<span data-ttu-id="d3140-568">- oder -</span><span class="sxs-lookup"><span data-stu-id="d3140-568">- or -</span></span>

<span data-ttu-id="d3140-569">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-569">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-570">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-570">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-571">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-571">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-572">Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-572">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-573">Schreibt das <xref:System.DateTime> mithilfe des roundtrippable ("O") <xref:System.Buffers.StandardFormat>.</span><span class="sxs-lookup"><span data-stu-id="d3140-573">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="d3140-574">Beispiel: 2017-06-12t05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="d3140-574">For example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="d3140-575">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-575">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-576">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-576">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-577">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-577">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-578">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-578">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-579">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-579">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-580">Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-580">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-581">Schreibt das <xref:System.DateTimeOffset> mit dem roundtrippable (' O ') <xref:System.Buffers.StandardFormat>, z. b. 2017-06-12t05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="d3140-581">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="d3140-582">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-582">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-583">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-583">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-584">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-584">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-585">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-585">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-586">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-586">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-587">Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-587">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-588">Schreibt den <xref:System.Guid> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "d") in der Form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="d3140-588">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="d3140-589">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-589">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-590">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-590">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-591">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-591">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-592">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-592">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="d3140-593">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-593">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-594">Schreibt einen UTF-8-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-594">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-595">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-595">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-596">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-596">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-597">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-597">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-598">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-598">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-599">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-599">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-600">Schreibt einen UTF-8-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-600">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-601">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-601">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-602">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-602">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-603">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-603">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-604">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-604">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-605">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-605">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-606">Schreibt einen UTF-8-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-606">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-607">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-607">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-608">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-608">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-609">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-609">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="d3140-610">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-610">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-611">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-611">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-612">Schreibt den UTF-8-Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-612">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-613">Der Wert sollte bereits mit Escapezeichen versehen werden <xref:System.Text.Json.JsonEncodedText> , wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-613">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="d3140-614">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-614">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-615">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-615">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-616">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-616">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-617">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-617">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-618">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-618">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-619">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-619">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-620">Schreibt das <xref:System.DateTime> mit dem roundtrippable-Objekt ("O" <xref:System.Buffers.StandardFormat>), z. b. "2017-06-12t05:30:45.7680000".</span><span class="sxs-lookup"><span data-stu-id="d3140-620">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="d3140-621">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-621">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-622">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-622">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-623">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-623">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-624">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-624">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-625">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-625">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-626">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-626">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-627">Schreibt das <xref:System.DateTimeOffset> mit dem roundtrippable (' O ') <xref:System.Buffers.StandardFormat>, z. b. 2017-06-12t05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="d3140-627">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="d3140-628">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-628">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-629">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-629">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-630">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-630">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-631">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-631">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-632">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-632">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-633">Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-633">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-634">Schreibt den <xref:System.Guid> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "d") in der Form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="d3140-634">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="d3140-635">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-635">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-636">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-636">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-637">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-637">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-638">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-638">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="d3140-639">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-639">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-640">Schreibt einen UTF-16-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-640">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-641">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-641">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-642">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-642">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-643">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-643">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-644">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-644">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-645">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-645">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-646">Schreibt einen UTF-16-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-646">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-647">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-647">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-648">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-648">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-649">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-649">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-650">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-650">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-651">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-651">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-652">Schreibt einen UTF-16-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-652">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-653">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-653">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-654">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-654">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-655">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-655">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-656">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-656">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-657">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-657">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-658">Schreibt den Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-658">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-659">Der Wert sollte bereits mit Escapezeichen versehen werden <xref:System.Text.Json.JsonEncodedText> , wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-659">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="d3140-660">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-660">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-661">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-661">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-662">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-662">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-663">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-663">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-664">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-664">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-665">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-665">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-666">Schreibt das <xref:System.DateTime> mit dem roundtrippable-Objekt ("O" <xref:System.Buffers.StandardFormat>), z. b. "2017-06-12t05:30:45.7680000".</span><span class="sxs-lookup"><span data-stu-id="d3140-666">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="d3140-667">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-667">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-668">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-668">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-669">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-669">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-670">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-670">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-671">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-671">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-672">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-672">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-673">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-673">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-674">Schreibt das <xref:System.DateTimeOffset> mit dem roundtrippable (' O ') <xref:System.Buffers.StandardFormat>, z. b. 2017-06-12t05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="d3140-674">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="d3140-675">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-675">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-676">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-676">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-677">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-677">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-678">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-678">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-679">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-679">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-680">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-680">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-681">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-681">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-682">Schreibt den <xref:System.Guid> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "d") in der Form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="d3140-682">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="d3140-683">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-683">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-684">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-684">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-685">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-685">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-686">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-686">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-687">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-687">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="d3140-688">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-688">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-689">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-689">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-690">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-690">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-691">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-691">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-692">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-692">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-693">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-693">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-694">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-694">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-695">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-695">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-696">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-696">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-697">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-697">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-698">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-698">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-699">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-699">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-700">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-700">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-701">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-701">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-702">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-702">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-703">Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-703">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-704">Der Eigenschaftsname und der Wert werden vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-704">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-705">Der angegebene Eigenschaftenname oder Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-705">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-706">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-706">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-707">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-707">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-708">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-708">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-709">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-709">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-710">Schreibt den Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-710">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-711">Der Wert sollte bereits mit Escapezeichen versehen werden <xref:System.Text.Json.JsonEncodedText> , wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-711">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="d3140-712">Der Eigenschaftsname wird vor dem Schreiben geschützt.</span><span class="sxs-lookup"><span data-stu-id="d3140-712">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-713">Der angegebene Eigenschaftenname ist zu lang.</span><span class="sxs-lookup"><span data-stu-id="d3140-713">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-714">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-714">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d3140-715">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d3140-715">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-716">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-716">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-717">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-717">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-718">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-718">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-719">Schreibt das <xref:System.DateTime> mit dem roundtrippable-Objekt ("O" <xref:System.Buffers.StandardFormat>), z. b. "2017-06-12t05:30:45.7680000".</span><span class="sxs-lookup"><span data-stu-id="d3140-719">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="d3140-720">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-720">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-721">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-721">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-722">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-722">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-723">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-723">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-724">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-724">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-725">Schreibt das <xref:System.DateTimeOffset> mit dem roundtrippable (' O ') <xref:System.Buffers.StandardFormat>, z. b. 2017-06-12t05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="d3140-725">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="d3140-726">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-726">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-727">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-727">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-728">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-728">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-729">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-729">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-730">Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-730">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-731">Schreibt den <xref:System.Guid> mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "d") in der Form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="d3140-731">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="d3140-732">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-732">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-733">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-733">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-734">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-734">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="d3140-735">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-735">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-736">Schreibt den vorcodierten Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-736">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-737">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-737">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="d3140-738">Der Wert wird vor dem Schreiben mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-738">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-739">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-739">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-740">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-740">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-741">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-741">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-742">Der Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-742">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-743">Schreibt den vorcodierten Eigenschaftennamen und Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-743">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-744">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-744">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="d3140-745">Der Wert wird vor dem Schreiben mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-745">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-746">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-746">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-747">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-747">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-748">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-748">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-749">Der Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-749">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-750">Schreibt den vorcodierten Eigenschaftennamen und Zeichenfolgen-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-750">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-751">Der Eigenschaftsname sollte bereits mit Escapezeichen versehen <xref:System.Text.Json.JsonEncodedText> werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-751">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="d3140-752">Der Wert wird vor dem Schreiben mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-752">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-753">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-753">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-754">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-754">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="d3140-755">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="d3140-755">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="d3140-756">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-756">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="d3140-757">Schreibt den vorcodierten Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="d3140-757">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-758">Der Eigenschaftsname und der Wert müssen bereits mit Escapezeichen <xref:System.Text.Json.JsonEncodedText> versehen werden, wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-758">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-759">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-759">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-760">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-760">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-761">Schreibt einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-761">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-762">Diese Methode schreibt den <xref:System.DateTime> mit dem roundtrippable ("O"). <xref:System.Buffers.StandardFormat></span><span class="sxs-lookup"><span data-stu-id="d3140-762">This method writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="d3140-763">Beispiel: 2017-06-12t05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="d3140-763">For example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-764">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-764">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-765">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-765">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-766">Schreibt einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-766">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-767">Diese Methode schreibt den <xref:System.DateTimeOffset> mit dem roundtrippable ("O"). <xref:System.Buffers.StandardFormat></span><span class="sxs-lookup"><span data-stu-id="d3140-767">This method writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="d3140-768">Beispiel: 2017-06-12t05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="d3140-768">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-769">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-769">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-770">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-770">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-771">Schreibt einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-771">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-772">Diese Methode schreibt den <xref:System.Guid> Wert mit dem Standard <xref:System.Buffers.StandardFormat> Wert (d. h. "d"), wie im folgenden Format: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="d3140-772">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-773">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-773">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="d3140-774">Der UTF-8-codierte Wert, der als JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-774">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-775">Schreibt einen UTF-8-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-775">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-776">Der Wert wird vor dem Schreiben mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-776">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-777">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-777">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-778">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-778">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-779">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-779">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-780">Schreibt einen UTF-16-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-780">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-781">Der Wert wird vor dem Schreiben mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-781">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-782">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-782">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-783">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-783">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-784">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-784">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-785">Schreibt einen Zeichenfolgentextwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-785">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="d3140-786">Der Wert wird vor dem Schreiben mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="d3140-786">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d3140-787">Der angegebene Wert ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="d3140-787">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-788">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-788">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d3140-789">Der JSON-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3140-789">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="d3140-790">Schreibt den vorcodierten Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="d3140-790">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d3140-791">Der Wert sollte bereits mit Escapezeichen versehen werden <xref:System.Text.Json.JsonEncodedText> , wenn die Instanz von erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3140-791">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3140-792">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</span><span class="sxs-lookup"><span data-stu-id="d3140-792">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

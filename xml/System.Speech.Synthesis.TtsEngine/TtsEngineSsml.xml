<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0ef7d4af79c39eac6ad9c3e26b1a7666a25b44dd" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86826573" /></Metadata><TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstrakte Basisklasse, die durch alle Text zu Sprachesynthese-Engines implementiert wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um einen benutzerdefinierten Text für die Sprach-Engine zu erstellen, muss eine Anwendung immer eine von der abstrakten Basisklasse abgeleitete Klasse implementieren <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> .  
  
 Eine ordnungsgemäß registrierte Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> kann dann als eine Synthesizer-Stimme von Namespace <xref:System.Speech.Synthesis> basierten Anwendungen verwendet werden.  
  
 Objekte <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> , die von erben, müssen die folgenden Member überschreiben: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A> , <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> , <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> und <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> .  
  
 Der wichtigste Member der- <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> Klasse, der implementiert werden soll, ist die- <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Methode.  
  
 Die- <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Methode wird vom Text Parser der Infrastruktur aufgerufen, der Folgendes empfängt:  
  
1.  Ein Verweis auf die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> -Schnittstelle, die Zugriff auf Systemdienste bereitstellt, z. b. das Bereitstellen und Schreiben von Audioausgaben.  
  
2.  Ein Array von-Instanzen, die <xref:System.Speech.Synthesis.TtsEngine.TextFragment> von der Sprachsynthese-Markup Sprache (SSML) erstellt werden. Zusätzlich zu dem Text, der als Sprache gerendert werden soll, speichert die Verarbeitung von SSML Informationen zu den angeforderten Attributen der Sprache in einer-Instanz, die den <xref:System.Speech.Synthesis.TtsEngine.FragmentState> einzelnen eingehenden Objekten zugeordnet ist <xref:System.Speech.Synthesis.TtsEngine.TextFragment> .  
  
 Eine Sprachsynthesizer-Anwendung kann optional Anforderungen für ein angegebenes Ausgabeformat anfordern, indem implementiert <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> wird, damit Sie von der Plattform aufgerufen werden kann, wenn Sie versucht, die richtige Audioausgabe bereitzustellen.  
  
 Ein Implementierer kann auch Unterstützung für die Verwaltung externer Definitionen von-Enumerationen oder lexikonen durch die Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> und bieten <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> .  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Vollständiger Name des Registrierungsschlüssels für das Sprachen-Token, das mit der <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />-Implementierung zugeordnet wird. Engine.</param>
        <summary>Erstellt eine neue Instanz von <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> auf Grundlage eines entsprechenden Stimmentokenregistrierungsschlüssels.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufrufe dieses Konstruktors werden in der Regel von <xref:System.Speech.Synthesis> basierten Anwendungen generiert, die eine Synthesizer-Stimme auswählen, die von einer Instanz von verwendet werden soll <xref:System.Speech.Synthesis.SpeechSynthesizer> .  
  
 Ein <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> muss unter HKEY_LOCAL_MACHINE \software\microsoft\sprachlos \voices\anmeldet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddLexicon (uri As Uri, mediaType As String, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Eine gültige Instanz von <see langword="System.Uri" />, die den Speicherort der Lexikoninformationen angibt.</param>
        <param name="mediaType">Eine Zeichenfolge mit dem Medientyp des Lexikons. Bei Medientypen wird die Groß-/Kleinschreibung nicht beachtet.</param>
        <param name="site">Ein Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />-Schnittstelle, die verwendet wird, um mit der Plattforminfrastruktur zu interagieren.</param>
        <summary>Fügt der <see langword="Synthesizer" /><see langword="Voice" /> ein Lexikon hinzu, das von der aktuellen <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> Instanz implementiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Aussprache Lexikon ist eine Auflistung von Wörtern oder Ausdrücken und deren mit einem entsprechenden Ausrufe Alphabet angegebenen Ausdrücke.  
  
 Diese Methode wird in der Regel von der Platt Form Infrastruktur als Reaktion auf Anwendungen aufgerufen, <xref:System.Speech.Synthesis> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> die aufrufen und die von der aktuellen Instanz implementierte Synthesizer-Sprache verwenden <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> .  
  
 Der Wert von `mediaType` ist in der Regel eine MIME-Spezifikation, da die SSML-Spezifikation MIME für Medien Spezifikationen verwendet.  
  
   
  
## Examples  
 Die Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> verwendet die- <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> Schnittstelle, die zum Laden eines Lexikon aus einer Ressource verwendet wird. Anschließend wird ein-Wert `System.IO.Stream` in der Lexikon in einer- `System.Collections.Generic.Dictionary` Instanz gespeichert, die vom Lexikon-URI indiziert wird.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Es liegt in der Verantwortung der Implementierung, das in gespeicherte Lexikon vollständig zu kennen und zu verarbeiten <paramref name="uri" /> . Die-Implementierung muss auch die Lebensdauer aller von ihr Hinzufügungen nachverfolgen und verwalten.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOutputFormat (speakOutputFormat As SpeakOutputFormat, targetWaveFormat As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Gültiger Member der <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />-Enumeration, der den Typ des angeforderten Audioausgabeformats angibt.</param>
        <param name="targetWaveFormat">Ein Zeiger auf <see langword="struct" />, das Detaileinstellung für den Audioformattyp enthält, der vom <paramref name="speakOutputFormat" />-Argument angefordert wurde.</param>
        <summary>Gibt die am besten passende Audioausgabe zurück, die von einer Antwort die angegebene Synthetisier-Engine auf eine Anforderung an die Synthetisier-Engine für die Unterstützung eines bestimmten Ausgabeformats unterstützt wird.</summary>
        <returns>Gibt eine gültige <see cref="T:System.IntPtr" />-Instanz zurück, die auf ein <see langword="struct" /> verweist, das ausführliche Informationen über das Ausgabeformat enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Struktur, die als `targetWaveFormat` und von der-Methode zurückgegeben wird, muss mit dem `WAVEFORMATEX` unter SAPI verfügbaren kompatibel sein, und der zurückgegebene Wert sollte mithilfe von zugeordnet werden `CoTaskMemAlloc` .  
  
 `struct`Muss Funktionen bereitstellen, die folgenden Funktionen entsprechen:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Die nachfolgende Beispiel Implementierung überprüft die ausgewählten Eingaben und verwendet diese, wenn Sie sich innerhalb von Toleranzen befinden; andernfalls werden die Standardwerte verwendet.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Das Objekt, das von erbt <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> , sollte das angeforderte Ausgabeformat untersuchen, wie von angegeben <paramref name="targetWaveFormat" /> , und das nächstgelegene Format zurückgeben.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveLexicon (uri As Uri, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Eine gültige Instanz von <see langword="System.Uri" />, die den Speicherort der Lexikoninformationen angibt.</param>
        <param name="site">Ein Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />-Schnittstelle, die durch die Plattforminfrastruktur übergeben wird, um Zugriff auf Infrastrukturressourcenn zu ermöglichen.</param>
        <summary>Entfernt ein Lexikon, das gerade durch <see langword="Synthesizer" /><see langword="Voice" /> geladen wird, das von der aktuellen <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />-Instanz implementiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Aussprache Lexikon ist eine Auflistung von Wörtern oder Ausdrücken und deren mit einem entsprechenden Ausrufe Alphabet angegebenen Ausdrücke.  
  
 Diese Methode wird in der Regel als Reaktion auf <xref:System.Speech.Synthesis> Anwendungen aufgerufen, <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> die aufrufen und die von der aktuellen Instanz implementierte Synthesizer-Sprache verwenden <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> .  
  
   
  
## Examples  
 Die Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> verwendet den Lexikon-URI, um eine Instanz von abzufragen `System.Collections.Generic.Dictionary` `System.IO.Stream` , schließt den Stream und entfernt den URI, der auf das Lexikon verweist.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Es liegt in der Verantwortung der Implementierung, das in gespeicherte Lexikon vollständig zu kennen und zu verarbeiten <paramref name="uri" /> . Die-Implementierung muss auch die Lebensdauer aller zu entfernenden Lexika nachverfolgen und verwalten.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Ein Array von <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> Instanzen, die den in Sprache umzuwandelnden Text enthalten.</param>
        <param name="waveHeader">Ein <see cref="T:System.IntPtr" />, das auf eine Struktur zeigt, die Audioausgabeformat enthält.</param>
        <param name="site">Ein Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />-Schnittstelle, die durch die Plattforminfrastruktur übergeben wird, um Zugriff auf Infrastrukturressourcenn zu ermöglichen.</param>
        <summary>Rendert angegebenes <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />-Array im angegebenen Ausgabeformat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Struktur, die als `waveHeader` und von der-Methode zurückgegeben wird, muss mit dem `WAVEFORMATEX` unter SAPI verfügbaren kompatibel sein.  
  
 `struct`Muss Funktionen bereitstellen, die folgenden Funktionen entsprechen:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Das folgende Beispiel ist Teil einer benutzerdefinierten Sprachsynthese Implementierung <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> , die von verwendet wird, und verwendet die Verwendung von <xref:System.Speech.Synthesis.TtsEngine.TextFragment> , <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> , <xref:System.Speech.Synthesis.TtsEngine.FragmentState> und. <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Die Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Empfängt ein Array von <xref:System.Speech.Synthesis.TtsEngine.TextFragment> -Instanzen und erstellt ein neues Array von- <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Instanzen, die an die- `Speak` Methode in einer zugrunde liegenden Synthese-Engine weitergeleitet werden sollen.  
  
2.  Wenn der <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> Enumerationswert, der von der-Eigenschaft <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> der zurückgegeben wird, die von der- <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> Eigenschaft jeder Instanz zurückgegeben <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> wurde, ist,  
  
    -   Übersetzt Amerikanismus in britishisms in den zu sprechenden Text.  
  
    -   Wenn die- <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Eigenschaft für die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> Schnittstellen, die für die Implementierung bereitgestellt werden <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> , den Ereignistyp unterstützt, wird eine- <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> Instanz verwendet, um ein Ereignis zu erstellen  
  
3.  Anschließend wird ein sprachrenderingmodul mit dem geänderten <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Array aufgerufen.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Der benutzerdefinierte Sprachsynthesizer implementiert mithilfe von <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> und <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> funktioniert als Filter oder Vermittler zwischen Synthesizer-Anwendungen, die mithilfe der Platt Form Infrastruktur durch die Member des <see cref="N:System.Speech.Synthesis" /> -Namespace und den zugrunde liegenden System Sprachsynthese-Engines erstellt werden.  
  
Eine- <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> Implementierung: 
1.  Fängt die Aspekte der eingehenden Objekte ab oder ändert Sie. <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 
2.  Generiert alle notwendigen Ereignisse mit dem Website Verweis auf eine- <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> Instanz. 
3.  Generiert die tatsächliche Sprache mit synthetischer Sprache.  
  
Die sprach Generierung erfolgt in der Regel durch den Aufruf von " <c>sprechen</c> " in einem der vom Betriebssystem bereitgestellten sprachrenderingengines.  
  
Wenn eines der verfügbaren sprachrenderingengines nicht verwendet wird, muss ein-Objekt, das von erbt, eine <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> eigene sprachrenderingengine erstellen.  
  
Zugriff auf die <c>Sprech</c> Methode auf, die mithilfe der Registrierung und Reflektion abgerufen wurde. .  
  
Wenn Sie von Erben <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> , müssen Sie die folgenden Member überschreiben: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" /> , <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> , <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> , <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" /> und <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> .</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dd79a74db6eb6211a32e44ea8b840a4f9b244fe" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39998192" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstrakte Basisklasse, die durch alle Text zu Sprachesynthese-Engines implementiert wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine benutzerdefinierte Sprachsynthese-Engine zu erstellen, muss eine Anwendung immer eine von der abstrakten Klasse abgeleitete Klasse implementieren <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.  
  
 Eine korrekt registrierte Implementierung <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> kann dann verwendet werden, als eine Stimme Synthesizer von <xref:System.Speech.Synthesis> Namespace-basierte Anwendungen.  
  
 Objekte, die Vererbung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> müssen die folgenden Member überschreiben: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> und <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Das wichtigste Mitglied der <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> -Klasse, die implementiert werden, ist die <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Methode.  
  
 Die <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Methode wird aufgerufen, mit dem Empfangen von Infrastrukturen-Text-Parser:  
  
1.  Ein Verweis auf die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> Schnittstelle, die Zugriff auf die Systemdienste wie z. B. auch queuing und Schreiben von Audioausgabe bereitstellt.  
  
2.  Ein Array von <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Instanz, der aus der Speech Synthesis Markup Language (SSML) Eingabe erzeugt wurde. Zusätzlich zu Text als Sprache gerendert werden, die Analyse von der SSML, speichert Informationen über die angeforderten Attribute von der Sprache in eine <xref:System.Speech.Synthesis.TtsEngine.FragmentState> -Instanz für jede eingehende <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Objekt.  
  
 Anforderungen für einen angegebenen Ausgabeformat kann optional durch das Implementieren von eine Sprache Synthesizer-Anwendung machen <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> von der Plattform aufgerufen werden, wenn versucht wird, geben Sie den richtigen Audioausgabe.  
  
 Eine Implementierung bieten auch Unterstützung für die Verwaltung von externen Definitionen der Aussprache oder Lexika, durch die Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> und <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Vollständiger Name des Registrierungsschlüssels für das Sprachen-Token, das mit der <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />-Implementierung zugeordnet wird. Engine.</param>
        <summary>Erstellt eine neue Instanz von <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> auf Grundlage eines entsprechenden Stimmentokenregistrierungsschlüssels.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufrufe dieses Konstruktors werden in der Regel generiert, indem <xref:System.Speech.Synthesis> -basierte Anwendungen, die eine Stimme Synthesizer auswählen, die von einer Instanz von verwendet werden <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
 Ein <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> muss die Registrierung unter HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens sein.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Eine gültige Instanz von <see langword="System.Uri" />, die den Speicherort der Lexikoninformationen angibt.</param>
        <param name="mediaType">Eine Zeichenfolge mit dem Medientyp des Lexikons. Bei Medientypen wird die Groß-/Kleinschreibung nicht beachtet.</param>
        <param name="site">Ein Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />-Schnittstelle, die verwendet wird, um mit der Plattforminfrastruktur zu interagieren.</param>
        <summary>Fügt der <see langword="Synthesizer" /><see langword="Voice" /> ein Lexikon hinzu, das von der aktuellen <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> Instanz implementiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Lexikon Aussprache ist eine Auflistung von Wörtern oder Ausdrücken sowie deren Aussprache mithilfe eines entsprechenden Aussprache Alphabets angegeben.  
  
 Diese Methode wird in der Regel aufgerufen, durch die Plattforminfrastruktur als Reaktion auf eine <xref:System.Speech.Synthesis> -basierte Anwendungen Aufrufen <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> und Verwenden von Stimme Synthesizer implementiert, die von der aktuellen <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> Instanz.  
  
 Der Wert des `mediaType` ist in der Regel eine MIME-Spezifikation, wie die SSML-Spezifikation MIME für Medienspezifikationen verwendet.  
  
   
  
## Examples  
 Die Implementierung der <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> verwendet die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> Schnittstelle übergeben ein Lexikon aus einer Ressource zu laden. Es speichert ein `System.IO.Stream` auf das Lexikon in eine `System.Collections.Generic.Dictionary` ab, das durch das Lexikon URI-Instanz.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Es ist die Verantwortung für die Implementierung, die mit vollständig vertraut sein, und das Lexikon gespeichert verarbeiten können <paramref name="uri" />. Die Implementierung muss auch nachverfolgen und verwalten die Lebensdauer der alle Lexika, die hinzugefügt werden.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Gültiger Member der <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />-Enumeration, der den Typ des angeforderten Audioausgabeformats angibt.</param>
        <param name="targetWaveFormat">Ein Zeiger auf <see langword="struct" />, das Detaileinstellung für den Audioformattyp enthält, der vom <c>speakOutputFormat</c>-Argument angefordert wurde.</param>
        <summary>Gibt die am besten passende Audioausgabe zurück, die von einer Antwort die angegebene Synthetisier-Engine auf eine Anforderung an die Synthetisier-Engine für die Unterstützung eines bestimmten Ausgabeformats unterstützt wird.</summary>
        <returns>Gibt eine gültige <see langword="IntPtr" />-Instanz zurück, die auf ein <see langword="struct" /> verweist, das ausführliche Informationen über das Ausgabeformat enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Struktur als `targetWaveFormat` und zurückgegeben, indem die Methode sollte kompatibel mit der `WAVEFORMATEX` unter SAPI, und der zurückgegebene Wert mit zugewiesen werden soll `CoTaskMemAlloc`.  
  
 Die `struct` muss gleich Funktionen enthalten:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Die folgenden beispielimplementierung überprüft ausgewählte Eingaben verwenden, deren Verwendung, wenn sie innerhalb der Toleranz sind, andernfalls unter Verwendung von Standardwerten.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>-Objekt erben von <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> sollte überprüfen, gemäß der angegebenen Ausgabeformat <paramref name="targetWaveFormat" /> und Zurückgeben der nächsten Format, das es unterstützt.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Eine gültige Instanz von <see langword="System.Uri" />, die den Speicherort der Lexikoninformationen angibt.</param>
        <param name="site">Ein Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />-Schnittstelle, die durch die Plattforminfrastruktur übergeben wird, um Zugriff auf Infrastrukturressourcenn zu ermöglichen.</param>
        <summary>Entfernt ein Lexikon, das gerade durch <see langword="Synthesizer" /><see langword="Voice" /> geladen wird, das von der aktuellen <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />-Instanz implementiert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Lexikon Aussprache ist eine Auflistung von Wörtern oder Ausdrücken sowie deren Aussprache mithilfe eines entsprechenden Aussprache Alphabets angegeben.  
  
 Diese Methode wird in der Regel aufgerufen, als Reaktion auf eine <xref:System.Speech.Synthesis> -basierte Anwendungen Aufrufen <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> und Verwenden von Stimme Synthesizer implementiert, die von der aktuellen <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> Instanz.  
  
   
  
## Examples  
 Die Implementierung der <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> Lexikons URI verwendet, um eine Instanz abzufragen `System.Collections.Generic.Dictionary` für die `System.IO.Stream`, schließt den Stream und den Uri, der auf das Lexikon entfernt.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Es ist die Verantwortung für die Implementierung, die mit vollständig vertraut sein, und das Lexikon gespeichert verarbeiten können <paramref name="uri" />. Die Implementierung muss auch nachverfolgen und verwalten die Lebensdauer der alle Lexika, die sie entfernt.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Ein Array von <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> Instanzen, die den in Sprache umzuwandelnden Text enthalten.</param>
        <param name="waveHeader">Ein <see langword="IntPtr" />, das auf eine Struktur zeigt, die Audioausgabeformat enthält.</param>
        <param name="site">Ein Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />-Schnittstelle, die durch die Plattforminfrastruktur übergeben wird, um Zugriff auf Infrastrukturressourcenn zu ermöglichen.</param>
        <summary>Rendert angegebenes <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />-Array im angegebenen Ausgabeformat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Struktur als `waveHeader` und zurückgegeben, indem die Methode sollte kompatibel mit der `WAVEFORMATEX` unter SAPI verfügbar sind.  
  
 Die `struct` muss gleich Funktionen enthalten:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Im folgenden Beispiel ist Teil der eine benutzerdefinierte Spracherkennung Sprachsynthese-Implementierung, die Vererbung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, und verwenden die Verwendung von <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, und <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Die Implementierung von <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Empfängt ein Array von <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Instanzen und erstellt ein neues Array von <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Instanzen übergeben werden soll die `Speak` Methode für eine zugrunde liegende Sprachsynthese-Engine.  
  
2.  Wenn die <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> Enumerationswert von gefunden wird, aus der <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> Eigenschaft für die <xref:System.Speech.Synthesis.TtsEngine.FragmentState> zurückgegebenes der <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> Eigenschaft der einzelnen <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Instanz ist <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, die Implementierung  
  
    -   Übersetzt Americanism zu Britishisms in der zu sprechende Text.  
  
    -   Wenn die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Eigenschaft für die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> Schnittstellen bereitgestellt, um die implementierungsunterstützung der <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> Ereignistyp, eine <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> Instanz wird verwendet, um ein Ereignis, das Laufwerk zu erstellen, wird eine Statusanzeige Synthesizer erstellt.  
  
3.  Eine Rendering-Engine von Speech wird dann aufgerufen, mit dem geänderten <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Array.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Benutzerdefinierte Spracherkennung Synthesizer implementiert mit <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> und <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> als Filter oder Vermittler zwischen Synthesizer-Anwendungen erstellt, mit der Plattforminfrastruktur, durch die Mitglieder der <see cref="N:System.Speech.Synthesis" /> Namespace und der zugrunde liegende System sprachesynthese-Engines.  Ein <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> Implementierung: 1.  Fängt, oder ändern Sie die Aspekte der eingehenden <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> Objekte 2.  Generiert alle erforderlichen Ereignisse, die mit der Website-Verweis auf eine <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 3-Instanz.  Wird der tatsächliche gebildeter Sprache generiert.  Generation der Sprache erfolgt i. d. r. durch Aufrufen von <c>Speak</c> auf einem der die Sprache, der rendering-Engines, die vom Betriebssystem bereitgestellt.  Wenn eine zur Verfügung-spracherkennungs-Rendering-Engine kein Objekt, das erben von verwendet wird, <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> müssen eine eigene Rendering-Engine von Speech erstellen.  Der Zugriff auf die <c>Speak</c> Methode zur Verwendung von der Registrierung und Reflektion abgerufen.  Beim Erben von <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, müssen Sie die folgenden Member überschreiben: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, und <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
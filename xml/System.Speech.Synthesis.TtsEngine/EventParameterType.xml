<Type Name="EventParameterType" FullName="System.Speech.Synthesis.TtsEngine.EventParameterType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8400458ce175b78e8dd9477c646c184c735c0185" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="68686336" /></Metadata><TypeSignature Language="C#" Value="public enum EventParameterType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventParameterType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.EventParameterType" />
  <TypeSignature Language="VB.NET" Value="Public Enum EventParameterType" />
  <TypeSignature Language="C++ CLI" Value="public enum class EventParameterType" />
  <TypeSignature Language="F#" Value="type EventParameterType = " />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Listet die Typen von Datenzeigern auf, die an Sprachesyntheseereignisse übergeben werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

Die- `EventParameterType` Enumeration wird verwendet, um ein-Objekt zu erstellen <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> . Ein `EventParameterType` Enumerationsmember, der als `parameterType` Argument an den Konstruktor für übergeben wird, gibt an, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> wie das `param2` Argument des Konstruktors (der sein muss <xref:System.IntPtr> ) interpretiert wird.  
  
Die Auswahl von `EventParameterType` wird durch den Typ des angeforderten Ereignisses vorgegeben, wie von einem Member von angegeben <xref:System.Speech.Synthesis.TtsEngine.TtsEventId?displayProperty=nameWithType> .  
  
Ausführliche Informationen zur Verwendung von finden Sie in `EventParameterType` der Dokumentation zu.<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>  
  
> [!NOTE]
>  Derzeit können Instanzen von verwalteten synthetischen Sprachmodulen, die mithilfe der Member des- <xref:System.Speech.Synthesis> Namespace geschrieben wurden, nach der Erstellung nicht mehr geändert werden.    
  
## Examples  
 Das folgende Beispiel ist Teil einer benutzerdefinierten Sprachsynthese Implementierung <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> , die von, <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> , <xref:System.Speech.Synthesis.TtsEngine.FragmentState> und <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> verwendet wird.  
  
 Die Implementierung von<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Empfängt ein Array von <xref:System.Speech.Synthesis.TtsEngine.TextFragment> -Instanzen und erstellt ein neues Array von- <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Instanzen, die an die- `Speak` Methode in einer zugrunde liegenden Synthese-Engine weitergeleitet werden sollen.  
  
2.  Wenn der <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> Enumerationswert, der von der-Eigenschaft <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> der zurückgegeben wird, die von der- <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> Eigenschaft jeder Instanz zurückgegeben <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> wurde, ist,  
  
    -   Übersetzt Amerikanismus in britishisms in den zu sprechenden Text.  
  
    -   Wenn die- <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> Eigenschaft für die <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> Schnittstellen, die für die Implementierung bereitgestellt werden <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> , den Ereignistyp unterstützt, wird eine- <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> Instanz verwendet, um ein Ereignis zu erstellen  
  
         Die Parameter für <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> , einschließlich des <xref:System.Speech.Synthesis.TtsEngine.EventParameterType> von zurückgegebenen Element Werts, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> werden verwendet, um das Ereignis zu protokollieren, das durch die-Methode generiert wird `LogSpeechEvent` .  
  
3.  Anschließend wird ein sprachrenderingmodul mit dem geänderten <xref:System.Speech.Synthesis.TtsEngine.TextFragment> Array aufgerufen.  
  
```csharp
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
  </Docs>
  <Members>
    <Member MemberName="Object">
      <MemberSignature Language="C#" Value="Object" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Object = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Object" />
      <MemberSignature Language="VB.NET" Value="Object" />
      <MemberSignature Language="C++ CLI" Value="Object" />
      <MemberSignature Language="F#" Value="Object = 2" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Object" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Wird derzeit nicht unterstützt.</summary>
      </Docs>
    </Member>
    <Member MemberName="Pointer">
      <MemberSignature Language="C#" Value="Pointer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Pointer = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Pointer" />
      <MemberSignature Language="VB.NET" Value="Pointer" />
      <MemberSignature Language="C++ CLI" Value="Pointer" />
      <MemberSignature Language="F#" Value="Pointer = 3" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Pointer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Wird derzeit nicht unterstützt.</summary>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="String" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType String = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.String" />
      <MemberSignature Language="VB.NET" Value="String" />
      <MemberSignature Language="C++ CLI" Value="String" />
      <MemberSignature Language="F#" Value="String = 4" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.String" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Gibt an, dass das <paramref name="param2" />-Argument zu <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> ein <see langword="System.IntPtr" /> ist, das mit <see langword="System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni" /> erstellt wird, das ein <see langword="System.String" />-Objekt referenziert; <paramref name="param1" /> akzeptiert möglicherweise einen beliebigen Wert.</summary>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="Token" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Token = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Token" />
      <MemberSignature Language="VB.NET" Value="Token" />
      <MemberSignature Language="C++ CLI" Value="Token" />
      <MemberSignature Language="F#" Value="Token = 1" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Token" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Zeigt an, dass das <paramref name="param2" />-Argument für <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> ein <see cref="T:System.IntPtr" /> ist, das <see cref="Overload:System.Runtime.InteropServices.Marshal.PtrToStructure" /> verwendet und auf ein Windows Desktop Speech Technology-Token verweist, bei dem es sich um ein Windows Desktop Speech Technology-Objekt handelt, das eine Ressource darstellt, z.B. eine Stimme (<see cref="T:System.Speech.Synthesis.VoiceInfo" />). <paramref name="param1" /> kann beliebige Werte annehmen.</summary>
      </Docs>
    </Member>
    <Member MemberName="Undefined">
      <MemberSignature Language="C#" Value="Undefined" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Undefined = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Undefined" />
      <MemberSignature Language="VB.NET" Value="Undefined" />
      <MemberSignature Language="C++ CLI" Value="Undefined" />
      <MemberSignature Language="F#" Value="Undefined = 0" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Undefined" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Gibt an, dass das <paramref name="param2" />-Argument zu <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> nicht definiert ist. Im Allgemeinen werden <paramref name="param1" /> und <paramref name="param2" /> dann ignoriert. Wenn <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" /> jedoch ist <see cref="F:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary" />, kann ein Ereignis der Fortschrittsanzeige generiert werden. <paramref name="param1" /> sollte eine ganze Zahl sein, die die Länge des aktuellen Worts enthält, und <paramref name="param2" /> ein <see cref="T:System.IntPtr" />, das auf eine ganze Zahl verweist, die den Offset des aktuellen Worts enthält.</summary>
      </Docs>
    </Member>
  </Members>
</Type>

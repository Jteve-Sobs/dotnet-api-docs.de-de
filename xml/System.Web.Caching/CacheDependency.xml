<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e7c38b1d7055c405ff866cb30e11c1809f84e05" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70677352" /></Metadata><TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Legt eine Abhängigkeitsbeziehung zwischen einem Element, das im <see cref="T:System.Web.Caching.Cache" />-Objekt einer ASP.NET-Anwendung gespeichert ist, und einer Datei, einem Cacheschlüssel, einem Datei- oder Cacheschlüsselarray oder einem anderen <see cref="T:System.Web.Caching.CacheDependency" />-Objekt fest. Die <see cref="T:System.Web.Caching.CacheDependency" />-Klasse überwacht die Abhängigkeitsbeziehungen, sodass bei Änderung beliebiger dieser Beziehungen das zwischengespeicherte Element automatisch entfernt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie dem Cache ein Element hinzufügen, das von einem anderen Objekt abhängt, z. b. eine Datei oder ein Array von Dateien, wird das abhängige Element automatisch aus dem Cache entfernt, wenn sich das Objekt ändert. Angenommen, Sie erstellen ein <xref:System.Data.DataSet> -Objekt auf der Grundlage von Daten in einer XML-Datei. Sie können das dem <xref:System.Data.DataSet> Cache mit einem <xref:System.Web.Caching.CacheDependency> -Objekt hinzufügen, das <xref:System.Data.DataSet> die Abhängigkeit von der XML-Datei ermöglicht. Wenn sich die XML-Datei ändert <xref:System.Data.DataSet> , wird der aus dem Cache entfernt.  
  
 Mit der-Methode und <xref:System.Web.Caching.Cache.Add%2A> <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> der-Methode können Sie dem Cache Ihrer Anwendung Elemente mit Abhängigkeiten hinzufügen. Sie können die <xref:System.Web.Caching.Cache.Item%2A> -Eigenschaft nicht verwenden, um dem Cache Elemente mit Abhängigkeiten hinzuzufügen.  
  
 Um eine Abhängigkeit einzurichten, erstellen Sie eine Instanz der <xref:System.Web.Caching.CacheDependency> -Klasse, indem Sie die Dateien, Schlüssel oder Verzeichnisse angeben, von denen das Element abhängt, und übergeben Sie dann die Abhängigkeit an die-Methode oder <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> die <xref:System.Web.Caching.Cache.Add%2A> -Methode. Die <xref:System.Web.Caching.CacheDependency> Instanz kann eine einzelne Datei oder ein Verzeichnis, ein Array von Dateien oder Verzeichnissen oder ein Array von Dateien oder Verzeichnissen zusammen mit einem Array von Cache Schlüsseln darstellen (diese stellen andere Elemente dar, die <xref:System.Web.Caching.Cache> im-Objekt gespeichert sind).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung <xref:System.Web.Caching.CacheDependency.HasChanged%2A> der-Eigenschaft veranschaulicht, <xref:System.Web.Caching.CacheDependency> um zu bestimmen, ob seit der vorherigen Anforderung eines <xref:System.Web.Caching.Cache>Elements in geändert wurde. Der `dt` Wert, der `start` im-Parameter übergeben wird <xref:System.DateTime.Now%2A?displayProperty=nameWithType>, wird auf festgelegt.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie Ihre eigene Klasse von <xref:System.Web.Caching.CacheDependency>ableiten möchten, implementieren Sie diese Version <xref:System.Web.Caching.CacheDependency.%23ctor%2A> des Konstruktors.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Klasse, die diese Version des <xref:System.Web.Caching.CacheDependency> Konstruktors implementiert, wenn alle Klassen, die von <xref:System.Web.Caching.CacheDependency> abgeleitet werden, für erforderlich sind.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Der Pfad einer Datei oder eines Verzeichnisses, von der bzw. dem das zwischengespeicherte Objekt abhängig ist. Wenn diese Ressource geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die eine Datei oder ein Verzeichnis auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das im `filename` -Parameter angegebene Verzeichnis oder die Datei nicht im Dateisystem gefunden wird, wird es als fehlend behandelt. Wenn das Verzeichnis oder die Datei nicht vorhanden ist <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Instanz der <xref:System.Web.Caching.CacheDependency> -Klasse mit einer Abhängigkeit von einer XML-Datei erstellt. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> -Methode fügt dann ein Element <xref:System.Web.Caching.Cache> hinzu, das von dieser Datei abhängig ist.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Sie können auch das folgende Verfahren verwenden, um ein Element <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von einer Datei hinzuzufügen.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen) auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine der Dateien oder Verzeichnisse im Array geändert oder aus dem Array entfernt wird, wird das zwischengespeicherte Element veraltet und aus dem <xref:System.Web.Caching.Cache> Objekt der Anwendung entfernt.  
  
 Wenn eines der Verzeichnisse oder Dateien, die im `filenames` -Parameter angegeben sind, im Dateisystem nicht gefunden wird, wird es auch als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei fehlt <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
> [!NOTE]
>  Wenn Sie das Array erstellen, das die Datei Abhängigkeiten enthält, müssen Sie die Anzahl der Dateien definieren, von denen das Element, das <xref:System.Web.Caching.Cache> Sie hinzufügen, abhängig ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> -Methode verwendet wird, um <xref:System.Web.Caching.Cache> mit Abhängigkeiten eines Arrays von Dateien ein Element hinzuzufügen. Sie können auch festlegen, dass das Element von einem Array von Verzeichnissen abhängig ist.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Der Pfad einer Datei oder eines Verzeichnisses, von der bzw. dem das zwischengespeicherte Objekt abhängig ist. Wenn diese Ressource geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="start">Die Zeit, mit der das Datum der letzten Änderung des Verzeichnisses oder der Datei verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die eine Datei oder ein Verzeichnis auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das im `filename` -Parameter angegebene Verzeichnis oder die Datei nicht im Dateisystem gefunden wird, wird es als fehlend behandelt. Wenn das Verzeichnis oder die Datei nicht vorhanden ist <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
> [!NOTE]
>  Die Änderungs Nachverfolgung beginnt sofort und basiert nicht direkt auf `start` dem-Parameter. Verwenden Sie `start` den-Parameter, um ein Datum und eine Uhrzeit in der Vergangenheit zu übergeben, für die Sie das Datum der letzten Änderung des Verzeichnisses oder der `filename` Datei überprüfen möchten, das im-Parameter übergeben wurde. Wenn das Datum der letzten Änderung `start` <xref:System.Web.Caching.Cache>nach dem Datum und der Uhrzeit liegt, das im-Parameter übergeben wird, wird das zwischengespeicherte Element aus entfernt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird dieser Konstruktor verwendet, um ein <xref:System.Web.Caching.CacheDependency> -Objekt zu instanziieren. Anschließend wird ein Element mit dieser Abhängigkeit in die <xref:System.Web.Caching.Cache> eingefügt. Der `dt` Wert, der `start` im-Parameter übergeben wird <xref:System.DateTime.Now%2A?displayProperty=nameWithType>, wird auf festgelegt.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="start">Die Zeit, mit der das Datum der letzten Änderung der Objekte im Array verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen) auf Änderungen überwacht, und gibt an, wann die Änderungsüberwachung beginnt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eines der Verzeichnisse oder Dateien, die im `filenames` -Parameter angegeben sind, im Dateisystem nicht gefunden wird, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei fehlt <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
> [!NOTE]
>  Die Änderungs Nachverfolgung beginnt sofort und basiert nicht direkt auf `start` dem-Parameter. Verwenden Sie `start` den-Parameter, um ein Datum und eine Uhrzeit in der Vergangenheit zu übergeben, für die Sie das Datum der letzten Änderung des Arrays `filenames` überprüfen möchten, das im-Parameter übergeben wird. Wenn das Datum der letzten Änderung eines beliebigen Objekts im-Array `start` <xref:System.Web.Caching.Cache>nach dem in den-Parameter übergebenen Datums-und Uhrzeitangabe liegt, wird das zwischengespeicherte Element aus entfernt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Web.Caching.CacheDependency> -Objekt erstellt, das zwei XML- <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Dateien und einen-Wert übergibt, wenn das-Objekt in <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> einem-Methoden aufrufals Parameter Argument enthalten ist.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eines der Verzeichnisse oder Dateien, die im `filenames` -Parameter angegeben sind, im Dateisystem nicht gefunden wird, wird es auch als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei fehlt <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
 Die `cachekeys` Abhängigkeit funktioniert jedoch nicht auf dieselbe Weise. Wenn mindestens ein Wert im `cachekeys` -Parameter zum Zeitpunkt der Einfügung nicht vorhanden ist, schlägt die Einfügung fehl. Beachten Sie, dass für dieses Szenario keine Ausnahme ausgelöst wird.  
  
## Examples  
 Im folgenden Code Fragment wird veranschaulicht, wie Sie ein Element <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von einem Schlüssel zu einem anderen Element, das im Cache abgelegt wird, in die der Anwendung einfügen. Da diese Methode die Array Syntax verwendet, müssen Sie die Anzahl der Schlüssel definieren, auf die das Element, das Sie <xref:System.Web.Caching.Cache> dem Hinzufügen, abhängig ist.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <param name="start">Datum und Uhrzeit, mit denen das Datum der letzten Änderung der im <paramref name="filenames" />-Array und im <paramref name="cachekeys" />-Array übergebenen Objekte verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eines der Verzeichnisse oder Dateien, die im `filenames` -Parameter angegeben sind, im Dateisystem nicht gefunden wird, wird es auch als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei fehlt <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
 Die `cachekeys` Abhängigkeit funktioniert jedoch nicht auf dieselbe Weise. Wenn mindestens ein Wert im `cachekeys` -Parameter zum Zeitpunkt der Einfügung nicht vorhanden ist, schlägt die Einfügung fehl. Beachten Sie, dass für dieses Szenario keine Ausnahme ausgelöst wird.

> [!NOTE]
>  Die Änderungs Nachverfolgung beginnt sofort und basiert nicht direkt auf `start` dem-Parameter. Verwenden Sie `start` den-Parameter, um ein Datum und eine Uhrzeit in der Vergangenheit zu übergeben, für die Sie das Datum der letzten Änderung eines Objekts `filenames` über `cachekeys` prüfen möchten, das in den Parametern oder übergeben wird. Wenn das Datum der letzten Änderung eines dieser Objekte nach dem Datum und der Uhrzeit liegt, die im `start` -Parameter übergeben wurden, wird das zwischengespeicherte Element aus der <xref:System.Web.Caching.Cache>entfernt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine `CreateDependency` -Methode erstellt. Wenn diese Methode aufgerufen wird, erstellt Sie ein <xref:System.DateTime> -Objekt, <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> und die-Eigenschaft wird verwendet, um dem `key1` Cache ein Element `key` mit dem-Parameter und dem `Value 1`-Wert hinzuzufügen. Ein Array von `dependencyKey`Zeichen folgen,, wird dann mit dem Wert von `key1` erstellt. Dieser <xref:System.Web.Caching.CacheDependency> Konstruktor instanziiert dann ein <xref:System.Web.Caching.CacheDependency> -Objekt, `dependencyKey` das und <xref:System.DateTime> das-Objekt als Parameter Argumente übergibt. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> -Methode wird als nächstes aufgerufen, <xref:System.Web.Caching.CacheDependency> wobei das-Objekt als Parameter verwendet wird. Dadurch wird das Objekt mithilfe der <xref:System.Web.Caching.Cache.Insert%2A> Methode, die vom `key1` Schlüssel abhängig ist, dem Cache hinzugefügt.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <param name="dependency">Eine andere Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, von dem diese Instanz abhängig ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht. Außerdem wird eine Abhängigkeit zu einer separaten Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse hergestellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eines der Verzeichnisse oder Dateien, die im `filenames` -Parameter angegeben sind, im Dateisystem nicht gefunden wird, wird es auch als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei fehlt <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
  
 Die `cachekeys` Abhängigkeit funktioniert jedoch nicht auf dieselbe Weise. Wenn mindestens ein Wert im `cachekeys` -Parameter zum Zeitpunkt der Einfügung nicht vorhanden ist, schlägt die Einfügung fehl. Beachten Sie, dass für dieses Szenario keine Ausnahme ausgelöst wird.
  
## Examples  
 Im folgenden Codebeispiel wird eine `CreateDependency` -Methode erstellt. Wenn diese Methode aufgerufen wird, <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> wird die `key1` -Eigenschaft verwendet, um dem Cache ein Element `key` mit dem-Parameter und dem-Wert `Value 1`hinzuzufügen. Ein Array von `dependencyKey`Zeichen folgen,, wird dann mit dem Wert von `key1` erstellt. Der <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> -Konstruktor wird verwendet, um <xref:System.Web.Caching.CacheDependency> ein- `dep1`Objekt zu erstellen `dependencyKey` , das als Parameter Argument übergibt. Ein zweites <xref:System.Web.Caching.CacheDependency> -Objekt `dep2`,, wird mit diesem Konstruktor erstellt, `dep1` wobei als drittes Parameter Argument übergeben wird. Diese zweite Abhängigkeit ist vom ersten abhängig. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> -Methode wird als nächstes aufgerufen, wobei <xref:System.Web.Caching.CacheDependency> das zweite-Objekt als Parameter verwendet wird. Wenn sich die erste Abhängigkeit in irgendeiner Weise ändert, wird das zwischengespeicherte Element ungültig.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <param name="dependency">Eine andere Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, von dem diese Instanz abhängig ist.</param>
        <param name="start">Die Zeit, mit der das Datum der letzten Änderung der Objekte in den Arrays und des <see cref="T:System.Web.Caching.CacheDependency" />-Objekts verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht. Außerdem wird eine Abhängigkeit zu einer anderen Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse und einem Zeitpunkt hergestellt, an dem die Änderungsüberwachung beginnt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eines der Verzeichnisse oder Dateien, die im `filenames` -Parameter angegeben sind, im Dateisystem nicht gefunden wird, wird es auch als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei fehlt <xref:System.Web.Caching.Cache>, wenn das Objekt mit der Abhängigkeit hinzugefügt wird, wird das zwischengespeicherte Objekt beim Erstellen des Verzeichnisses oder der Datei aus dem <xref:System.Web.Caching.Cache> entfernt.  
  
 Nehmen Sie beispielsweise an, dass Sie ein-Objekt <xref:System.Web.Caching.Cache> mit einer Abhängigkeit vom folgenden Dateipfad hinzufügen: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wird, wenn <xref:System.Web.Caching.CacheDependency> das Objekt erstellt wird, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei "xyz. dat" entfernt.  
 
 Die `cachekeys` Abhängigkeit funktioniert jedoch nicht auf dieselbe Weise. Wenn mindestens ein Wert im `cachekeys` -Parameter zum Zeitpunkt der Einfügung nicht vorhanden ist, schlägt die Einfügung fehl. Beachten Sie, dass für dieses Szenario keine Ausnahme ausgelöst wird.

> [!NOTE]
>  Die Änderungs Nachverfolgung beginnt sofort und basiert nicht direkt auf `start` dem-Parameter. Verwenden Sie `start` den-Parameter, um ein Datum und eine Uhrzeit in der Vergangenheit zu übergeben, für die Sie das Datum der letzten Änderung der Objekte überprüfen `filenames`möchten, die `dependency` in den Parametern, oder übergeben werden `cachekeys`. Wenn das Datum der letzten Änderung eines dieser Objekte nach dem Datum und der Uhrzeit liegt, die im `start` -Parameter übergeben werden, wird das zwischengespeicherte Element aus der <xref:System.Web.Caching.Cache>entfernt.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine `CreateDependency` -Methode. Wenn diese Methode aufgerufen wird, erstellt Sie ein <xref:System.DateTime> -Objekt, <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> und die-Eigenschaft wird verwendet, um dem Cache ein Element `key1` mit dem Schlüsselparameter und dem Wert `Value 1`hinzuzufügen. Ein Array von `dependencyKey`Zeichen folgen,, wird dann mit dem Wert erstellt, der beim ersten (und einzigen) Index auf den Wert `key1` von festgelegt ist. Der <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> -Konstruktor wird dann verwendet, um <xref:System.Web.Caching.CacheDependency> ein- `dep1`Objekt zu erstellen `dependencyKey` , das als Parameter Argument übergibt. Ein zweites <xref:System.Web.Caching.CacheDependency> `dep2`-Objekt wird dann mit diesem Konstruktor erstellt, wobei `dep1` und das <xref:System.DateTime> -Objekt als Parameter Argumente übergeben werden. Diese zweite Abhängigkeit ist abhängig von der ersten, und die Abhängigkeits Überwachung beginnt 10 Sekunden, `CreateDependency` nachdem die-Methode aufgerufen wurde. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> -Methode wird als nächstes aufgerufen, wobei <xref:System.Web.Caching.CacheDependency> das zweite-Objekt als Parameter verwendet wird. Wenn sich die erste Abhängigkeit in irgendeiner Weise ändert, wird das zwischengespeicherte Element ungültig.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Ressourcen frei, die von der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse sowie allen Klassen verwendet werden, die von <see cref="T:System.Web.Caching.CacheDependency" /> abgeleitet sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Klasse, die von der <xref:System.Web.Caching.CacheDependency> -Klasse abgeleitet wird, muss diese Methode implementieren, um die von der abgeleiteten Klasse verwendeten Ressourcen zu bereinigen.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Klasse, die von der <xref:System.Web.Caching.CacheDependency> -Klasse erbt und die <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> -Methode überschreibt. Wenn diese Methode aufgerufen wird, wird eine benutzerdefinierte boolesche Eigenschaft mit `Disposed` dem `true`Namen auf festgelegt.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die vom <see cref="T:System.Web.Caching.CacheDependency" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt die Initialisierung des <see cref="T:System.Web.Caching.CacheDependency" />-Objekts ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Caching.CacheDependency.FinishInit%2A> -Methode schließt die Initialisierung <xref:System.Web.Caching.CacheDependency> des-Objekts ab. Diese Methode wird von allen <xref:System.Web.Caching.CacheDependency> Konstruktoren aufgerufen.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> -Methode muss am Ende des Konstruktors für abgeleitete Klassen aufgerufen werden, um die Initialisierung <see cref="T:System.Web.Caching.CacheDependency" /> des-Objekts abzuschließen.</para></block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Dateiabhängigkeiten ab.</summary>
        <returns>Die Dateiabhängigkeiten.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen eindeutigen Bezeichner für ein <see cref="T:System.Web.Caching.CacheDependency" /> -Objekt ab.</summary>
        <returns>Der eindeutige Bezeichner für das <see cref="T:System.Web.Caching.CacheDependency" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann besonders nützlich sein, um mehrere Instanzen der Klasse <xref:System.Web.Caching.CacheDependency> zu verfolgen, die einem Element oder einer Anwendung zugeordnet ist.  
  
 Der Bezeichner ist eine Kombination aus dem Dateinamen (für eine Datei Abhängigkeit) oder dem Schlüsselnamen (für eine Cache Schlüssel Abhängigkeit) und einer Zeichenfolge, die diese Methode der Abhängigkeit zuweist. In Klassen, die von der <xref:System.Web.Caching.CacheDependency> -Klasse abgeleitet werden, können Sie diese Methode überschreiben, um anzupassen, wie Sie den eindeutigen Bezeichner generiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Web.Caching.AggregateCacheDependency> -Objekt mit `aggDep`dem Namen mit <xref:System.Web.Caching.CacheDependency> zwei-Objekten im-Array erstellt. Nachdem `aggDep` instanziiert wurde, ruft der Code die <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> -Methode auf, um einen eindeutigen Bezeichner für `aggDep` beide Abhängigkeiten zu generieren, die enthält und die Bezeichner für die enthaltende Seite anzeigt. Anschließend wird der <xref:System.Web.Caching.Cache>ein Element hinzugefügt, wobei die <xref:System.Web.Caching.Cache.Insert%2A> -Methode verwendet `aggDep` wird, wobei als Abhängigkeit verwendet wird.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob sich das <see cref="T:System.Web.Caching.CacheDependency" />-Objekt geändert hat.</summary>
        <value><see langword="true" />, wenn sich das <see cref="T:System.Web.Caching.CacheDependency" />-Objekt geändert hat. Andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einem ASP.net- <xref:System.Web.Caching.Cache> Anwendung mit einem <xref:System.Web.Caching.CacheDependency>ein Element hinzufügen. Wenn die <xref:System.Web.Caching.CacheDependency> Änderungen vorgenommen werden, <xref:System.Web.Caching.Cache> wird das hinzugefügte Element für ungültig erklärt und aus dem Cache entfernt. Sie können diese Eigenschaft verwenden, um zu bestimmen <xref:System.Web.Caching.CacheDependency> , ob sich ein geändert hat, und das <xref:System.Web.Caching.Cache> Element in neu erstellen, wenn dies geschehen ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung <xref:System.Web.Caching.CacheDependency.HasChanged%2A> der-Eigenschaft veranschaulicht, <xref:System.Web.Caching.CacheDependency> um zu bestimmen, ob seit der vorherigen Anforderung eines <xref:System.Web.Caching.Cache>Elements in geändert wurde. Der `dt` Wert, der `start` im-Parameter übergeben wird <xref:System.DateTime.Now%2A?displayProperty=nameWithType>, wird auf festgelegt.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird aufgerufen, wenn ein überwachter Cacheeintrag entfernt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert den Zeitpunkt des letzten Zugriffs von jedem Cacheelement, das von diesem Element abhängig ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="e" Type="System.EventArgs" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender">Die Quelle des Ereignisses.</param>
        <param name="e">Ein <see cref="T:System.EventArgs" />-Objekt, das die Ereignisdaten enthält.</param>
        <summary>Benachrichtigt das Basis-<see cref="T:System.Web.Caching.CacheDependency" />-Objekt darüber, dass die durch eine abgeleitete <see cref="T:System.Web.Caching.CacheDependency" />-Klasse dargestellte Abhängigkeit geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Klasse, die von der <xref:System.Web.Caching.CacheDependency> -Klasse abgeleitet wird, muss diese Methode implementieren.  
  
 Wenn Sie von der <xref:System.Web.Caching.CacheDependency> -Klasse ableiten, verwenden Sie die Basisfunktionen jeder Methode oder Eigenschaft, die Sie nicht überschrieben haben. Wenn Sie eine Instanz der abgeleiteten Klasse erstellen, stellt Sie die Dateien, Cache Schlüssel, Datenbanktabellen oder andere beliebige Objekte dar, von denen Sie ein zwischengespeichertes Element abhängig machen möchten. Wenn ein Abhängigkeits Element geändert wird, benachrichtigt diese Methode die Basisfunktionen der <xref:System.Web.Caching.CacheDependency> <xref:System.Web.Caching.CacheDependency.HasChanged%2A> -Klasse, dass das Element geändert wurde, sodass die Werte der Eigenschaften <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> und aktualisiert werden können.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Klasse, die von der <xref:System.Web.Caching.CacheDependency> -Klasse erbt. Es wird eine öffentliche Methode `ResetDependency`erstellt, die die <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> -Methode verwendet, um den Zeitpunkt zu ändern, zu dem die Abhängigkeit geändert wurde, <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> und dann die-Methode aufruft.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" Index="0" FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">Die Änderungsaktion für die Abhängigkeit.</param>
        <summary>Fügt eine Aktionsmethode zum Behandeln von Benachrichtigungen der beteiligten Partei über Änderungen an dieser Abhängigkeit hinzu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Die Zeit, zu der die Abhängigkeit zuletzt geändert wurde.</param>
        <summary>Markiert die Zeit, zu der eine Abhängigkeit zuletzt geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel zeigt eine Klasse, die von der <xref:System.Web.Caching.CacheDependency> -Klasse erbt. Es wird eine öffentliche Methode `ResetDependency`erstellt, die die <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> -Methode verwendet, um den Zeitpunkt zu ändern, zu dem die Abhängigkeit geändert wurde, <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> und dann die-Methode aufruft.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht es dem ersten Benutzer, den exklusiven Besitz dieser Abhängigkeit zu deklarieren.</summary>
        <returns><see langword="true" />, wenn das Element als erstes den Besitz erhalten hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode deklariert, dass die Abhängigkeit verwendet wird. Wenn ein anderes Element, das zuvor als diese Methode bezeichnet `false` und Besitz genommen hat, zurückgegeben wird. Ein <xref:System.Web.Caching.CacheDependency> kann nur von einem Cache Eintrag verwendet werden. Wenn ein Element einem Cache mit angegebenen Cache Abhängigkeiten hinzugefügt wird, sollte der Cache den Besitz dieser Abhängigkeiten übernehmen, um sicherzustellen, dass Sie nicht an anderer Stelle wieder verwendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeit ab, zu der die Abhängigkeit zuletzt geändert wurde.</summary>
        <value>Die Zeit, zu der die Abhängigkeit zuletzt geändert wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird in koordinierter Weltzeit (UTC) (auch als "Greenwich Mean Time" bezeichnet) gemessen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Caching.AggregateCacheDependency> -Klasse verwendet, um ein Element mit <xref:System.Web.Caching.CacheDependency> zwei <xref:System.Web.Caching.Cache>Objektabhängigkeiten hinzuzufügen. Wenn eine Anforderung für das <xref:System.Web.Caching.Cache> Element erstellt wird, überprüft der Code, ob das Element <xref:System.Web.Caching.Cache>im-Objekt ist. Wenn dies der Fall ist <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> , wird die-Eigenschaft in eine Zeichenfolge konvertiert und auf der Seite angezeigt. Wenn dies nicht der Fall ist, werden das Element und seine zwei Abhängigkeiten erstellt und dem <xref:System.Web.Caching.Cache>hinzugefügt.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
  </Members>
</Type>

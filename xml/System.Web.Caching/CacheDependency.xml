<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0839951f67fd4bcdf0655ac9d9150e9c2e6093c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36405520" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Establishes a dependency relationship between an item stored in an ASP.NET application's <see cref="T:System.Web.Caching.Cache" /> object and a file, cache key, an array of either, or another <see cref="T:System.Web.Caching.CacheDependency" /> object. The <see cref="T:System.Web.Caching.CacheDependency" /> class monitors the dependency relationships so that when any of them changes, the cached item will be automatically removed.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein Element mit dem Cache hinzufügen, die auf einem anderen Objekt, z. B. eine Datei oder ein Array von Dateien abhängig ist wird das abhängige Element automatisch aus dem Cache entfernt, wenn das Objekt ändert. Nehmen wir beispielsweise an, die Sie erstellen eine <xref:System.Data.DataSet> -Objekt auf der Grundlage von Daten in eine XML-Datei. Können Sie hinzufügen, die <xref:System.Data.DataSet> in den Cache mit einer <xref:System.Web.Caching.CacheDependency> Objekt, mit der, die <xref:System.Data.DataSet> abhängig von der XML-Datei. Wenn die XML-Datei geändert wird, die <xref:System.Data.DataSet> aus dem Cache entfernt wird.  
  
 Sie können Elemente mit Abhängigkeiten Anwendungscache mit Hinzufügen der <xref:System.Web.Caching.Cache.Add%2A> und <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methoden. Sie können keine der <xref:System.Web.Caching.Cache.Item%2A> Eigenschaft, um den Cache mit Abhängigkeiten Elemente hinzuzufügen.  
  
 Um eine Abhängigkeit einzurichten, erstellen Sie eine Instanz von der <xref:System.Web.Caching.CacheDependency> Klasse angeben, die Dateien, Schlüssel oder Verzeichnisse auf dem das Element abhängig ist, und übergeben Sie dann die Abhängigkeit der <xref:System.Web.Caching.Cache.Add%2A> oder <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode. Die <xref:System.Web.Caching.CacheDependency> Instanz kann eine einzelne Datei oder Verzeichnis, ein Array von Dateien oder Verzeichnisse oder ein Array von Dateien oder Verzeichnisse zusammen mit der ein Array von Cacheschlüsseln darstellen (diese anderen im gespeicherten Elementen darstellen der <xref:System.Web.Caching.Cache> Objekt).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Web.Caching.CacheDependency.HasChanged%2A> -Eigenschaft können Sie bestimmen, ob eine <xref:System.Web.Caching.CacheDependency> geändert, seit der vorherigen Anforderung für ein Element in der <xref:System.Web.Caching.Cache>. Die `dt` übergebene Wert den `start` Parametersatz auf <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie, leiten Sie eine eigene Klasse von möchten <xref:System.Web.Caching.CacheDependency>, implementieren Sie diese Version von den <xref:System.Web.Caching.CacheDependency.%23ctor%2A> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Klasse, die von dieser Version implementiert die <xref:System.Web.Caching.CacheDependency> Konstruktor wie alle Klassen, die davon Herleiten <xref:System.Web.Caching.CacheDependency> sind erforderlich, um.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors a file or directory for changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Verzeichnis oder die Datei im angegebenen der `filename` Parameter wurde nicht gefunden im Dateisystem, wird Sie als fehlend behandelt werden. Wenn das Verzeichnis oder die Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn das Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Instanz von der <xref:System.Web.Caching.CacheDependency> Klasse mit einer Abhängigkeit auf eine XML-Datei. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode fügt dann ein Element aus, um die <xref:System.Web.Caching.Cache> , ist diese Datei abhängt.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Sie können auch das folgende Verfahren zum Hinzufügen eines Elements auf der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf eine Datei.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories) for changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine der Dateien oder Verzeichnisse in das Array ändert oder aus dem Array entfernt das zwischengespeicherte Element ist veraltet und wird aus der Anwendungsverzeichnis entfernt <xref:System.Web.Caching.Cache> Objekt.  
  
 Auch wenn die Verzeichnisse oder die angegebenen Dateien in der `filenames` Parameter wurde nicht gefunden im Dateisystem, wird er als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
> [!NOTE]
>  Bei der Erstellung des Arrays, die die Abhängigkeiten enthält, müssen Sie die Anzahl der Dateien definieren, dass das Element Sie zum Hinzufügen der <xref:System.Web.Caching.Cache> abhängig ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode zum Hinzufügen eines Elements auf der <xref:System.Web.Caching.Cache> mit Abhängigkeiten auf ein Array von Dateien. Sie können auch das Element ein Array von Verzeichnissen abhängig machen.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
        <param name="start">The time against which to check the last modified date of the directory or file.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors a file or directory for changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Verzeichnis oder die Datei im angegebenen der `filename` Parameter wurde nicht gefunden im Dateisystem, wird Sie als fehlend behandelt werden. Wenn das Verzeichnis oder die Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn das Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und basiert nicht direkt auf die `start` Parameter. Verwenden der `start` Parameter übergeben wird, ein Datum und eine Uhrzeit in der Vergangenheit für das Überprüfen der letzten Änderung des Verzeichnisses Datum oder die Datei übergeben werden sollen die `filename` Parameter. Wenn es sich bei der letzten Änderung Datum liegt nach dem Datum und Uhrzeit übergeben der `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel verwendet diesen Konstruktor zum Instanziieren einer <xref:System.Web.Caching.CacheDependency> -Objekt und fügt ein Element in der <xref:System.Web.Caching.Cache> mit dieser Abhängigkeit. Die `dt` übergebene Wert den `start` Parametersatz auf <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</param>
        <param name="start">The time against which to check the last modified date of the objects in the array.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories) for changes and specifies a time when change monitoring begins.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Verzeichnisse oder die angegebenen Dateien in den `filenames` Parameter wurde nicht gefunden im Dateisystem, wird er als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und basiert nicht direkt auf die `start` Parameter. Verwenden der `start` übergebene Parameter übergeben wird, ein Datum und eine Uhrzeit in der Vergangenheit für die Sie das Datum das letzte Änderung des Arrays überprüfen möchten die `filenames` Parameter. Wenn es sich bei der letzten Änderung Datum eines beliebigen Objekts im Array liegt nach dem Datum und Uhrzeit übergeben der `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Web.Caching.CacheDependency> -Objekt, das zwei XML-Dateien übergibt und ein <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Wert, wenn das Objekt als im Parameterargument enthalten ist ein <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> -Methodenaufruf.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</param>
        <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder die angegebenen Dateien in der `filenames` Parameter wurde nicht gefunden im Dateisystem, wird er als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet werden. Wenn mindestens ein in Wert der `cachekeys` Parameter zum Zeitpunkt einer Einfügung nicht vorhanden, der Vorgang schlägt fehl. Beachten Sie, dass es keine Ausnahme ausgelöst, die für dieses Szenario ist.  
  
## Examples  
 Das folgende Codefragment zeigt, wie zum Einfügen eines Elements in der Anwendungsverzeichnis <xref:System.Web.Caching.Cache> mit einer Abhängigkeit zu einem Schlüssel für ein anderes Element im Cache gespeichert. Da diese Methode den Array-Syntax verwendet, müssen Sie definieren, die Anzahl der Schlüssel auf dem das Element hinzufügen der <xref:System.Web.Caching.Cache> richtet.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</param>
        <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
        <param name="start">The date and time against which to check the last modified date of the objects passed in the <c>filenames</c> and <c>cachekeys</c> arrays.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder die angegebenen Dateien in der `filenames` Parameter wurde nicht gefunden im Dateisystem, wird er als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet werden. Wenn mindestens ein in Wert der `cachekeys` Parameter zum Zeitpunkt einer Einfügung nicht vorhanden, der Vorgang schlägt fehl. Beachten Sie, dass es keine Ausnahme ausgelöst, die für dieses Szenario ist.

> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und basiert nicht direkt auf die `start` Parameter. Verwenden der `start` übergebene Parameter übergeben wird, ein Datum und eine Uhrzeit in der Vergangenheit in der Datum das letzte Änderung eines Objekts überprüft werden sollen die `filenames` oder `cachekeys` Parameter. Wenn es sich bei der letzten Änderung eines dieser Objekte liegt nach dem Datum und die festgelegte Zeit übergeben der `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine `CreateDependency` Methode. Wenn diese Methode aufgerufen wird, erstellt eine <xref:System.DateTime> Objekt und die <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> Eigenschaft dient zum Hinzufügen eines Elements in den Cache mit einer `key` Parameter des `key1` und den Wert `Value 1`. Ein Array von Zeichenfolgen, `dependencyKey`, wird dann erstellt, wobei der Wert der `key1` ebenfalls. Dies <xref:System.Web.Caching.CacheDependency> Konstruktor dann instanziiert einen <xref:System.Web.Caching.CacheDependency> -Objekt, das übergibt `dependencyKey` und <xref:System.DateTime> Objekt als Parameterargumente. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode wird aufgerufen als Nächstes mit der <xref:System.Web.Caching.CacheDependency> -Objekt als Parameter. Dadurch wird das Objekt hinzugefügt, den Cache mithilfe der <xref:System.Web.Caching.Cache.Insert%2A> Methode abhängig von der `key1` Schlüssel.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</param>
        <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
        <param name="dependency">Another instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that this instance is dependent upon.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes. It also makes itself dependent upon a separate instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder die angegebenen Dateien in der `filenames` Parameter wurde nicht gefunden im Dateisystem, wird er als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet werden. Wenn mindestens ein in Wert der `cachekeys` Parameter zum Zeitpunkt einer Einfügung nicht vorhanden, der Vorgang schlägt fehl. Beachten Sie, dass es keine Ausnahme ausgelöst, die für dieses Szenario ist.
  
## Examples  
 Das folgende Codebeispiel erstellt eine `CreateDependency` Methode. Wenn diese Methode aufgerufen wird, verwendet der <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> Eigenschaft zum Hinzufügen eines Elements in den Cache mit eine `key` Parameter `key1` und den Wert `Value 1`. Ein Array von Zeichenfolgen, `dependencyKey`, wird dann erstellt, wobei der Wert der `key1` ebenfalls. Die <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor dient zum Erstellen einer <xref:System.Web.Caching.CacheDependency> Objekt `dep1`, übergibt `dependencyKey` als Parameterargument. Ein zweites <xref:System.Web.Caching.CacheDependency> Objekt `dep2`, wird mit diesem Konstruktor erstellt `dep1` als drittes Parameterargument übergeben. Diese zweite Abhängigkeit ist abhängig von der ersten. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode mit dem zweiten als Nächstes heißt <xref:System.Web.Caching.CacheDependency> -Objekt als Parameter. Wenn die erste Abhängigkeit in keiner Weise geändert wird, wird das zwischengespeicherte Element für ungültig erklärt.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</param>
        <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
        <param name="dependency">Another instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that this instance is dependent upon.</param>
        <param name="start">The time against which to check the last modified date of the objects in the arrays and the <see cref="T:System.Web.Caching.CacheDependency" /> object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes. It also makes itself dependent upon another instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class and a time when the change monitoring begins.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder die angegebenen Dateien in der `filenames` Parameter wurde nicht gefunden im Dateisystem, wird er als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit wird hinzugefügt der <xref:System.Web.Caching.Cache>, das zwischengespeicherte Objekt daraus die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit von den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn diese Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
 
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet werden. Wenn mindestens ein in Wert der `cachekeys` Parameter zum Zeitpunkt einer Einfügung nicht vorhanden, der Vorgang schlägt fehl. Beachten Sie, dass es keine Ausnahme ausgelöst, die für dieses Szenario ist.

> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und basiert nicht direkt auf die `start` Parameter. Verwenden der `start` übergebene Parameter übergeben wird, ein Datum und eine Uhrzeit in der Vergangenheit in der Datum das letzte Änderung der eines der Objekte überprüft werden sollen die `filenames`, `cachekeys`, oder `dependency` Parameter. Wenn es sich bei der letzten Änderung für einen Hostobjekte Datum liegt nach dem Datum und Uhrzeit übergeben der `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine `CreateDependency` Methode. Wenn diese Methode aufgerufen wird, erstellt er eine <xref:System.DateTime> Objekt und die <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> Eigenschaft wird verwendet, um ein Element in den Cache mit einem Schlüssel Parameter hinzufügen `key1` und den Wert `Value 1`. Ein Array von Zeichenfolgen, `dependencyKey`, wird mit dem Wert auf die erste (und einzige) Index, legen Sie auf den Wert des erstellt `key1` ebenfalls. Die <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor wird dann zum Erstellen einer <xref:System.Web.Caching.CacheDependency> Objekt `dep1`, übergibt `dependencyKey` als Parameterargument. Ein zweites <xref:System.Web.Caching.CacheDependency> Objekt `dep2`, wird dann mit diesem Konstruktor mit erstellt `dep1` und die <xref:System.DateTime> Objekt als Parameterargumente übergeben. Diese zweite Abhängigkeit ist abhängig von der ersten und Abhängigkeit Überwachung des Webdatenverkehrs beginnt nach 10 Sekunden die `CreateDependency` -Methode aufgerufen wird. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode mit dem zweiten als Nächstes heißt <xref:System.Web.Caching.CacheDependency> -Objekt als Parameter. Wenn die erste Abhängigkeit in keiner Weise geändert wird, wird das zwischengespeicherte Element für ungültig erklärt.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the <see cref="T:System.Web.Caching.CacheDependency" /> class and any classes that derive from <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Klasse, die von abgeleitet ist die <xref:System.Web.Caching.CacheDependency> Klasse ist erforderlich, um implementieren Sie diese Methode zum Bereinigen von Ressourcen die abgeleitete Klasse verwendet wurde.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, eine Klasse, die von erben die <xref:System.Web.Caching.CacheDependency> -Klasse ab und überschreibt die <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> Methode. Wenn diese Methode aufgerufen wird, wird eine benutzerdefinierte boolesche Eigenschaft, die mit dem Namen `Disposed` auf `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the <see cref="T:System.Web.Caching.CacheDependency" /> object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes initialization of the <see cref="T:System.Web.Caching.CacheDependency" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Caching.CacheDependency.FinishInit%2A> Methode schließt die Initialisierung der <xref:System.Web.Caching.CacheDependency> Objekt. Diese Methode wird aufgerufen, indem alle <xref:System.Web.Caching.CacheDependency> Konstruktoren.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> -Methode muss aufgerufen werden, am Ende des Konstruktors für abgeleitete Klassen für die Initialisierung von der <see cref="T:System.Web.Caching.CacheDependency" /> Objekt.</para>
        </block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the file dependencies.</summary>
        <returns>The file dependencies.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a unique identifier for a <see cref="T:System.Web.Caching.CacheDependency" /> object.</summary>
        <returns>The unique identifier for the <see cref="T:System.Web.Caching.CacheDependency" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist besonders hilfreich für das Nachverfolgen von mehreren Instanzen von der <xref:System.Web.Caching.CacheDependency> Klasse ein Element oder einer Anwendung zugeordnet.  
  
 Der Bezeichner ist eine Kombination aus den Dateinamen (für eine Abhängigkeit Datei) oder den Schlüsselnamen (für eine Abhängigkeit Cacheschlüssel) und eine Zeichenfolge, die diese Methode die Abhängigkeit zuweist. In abgeleitete Klassen die <xref:System.Web.Caching.CacheDependency> -Klasse, überschreiben Sie diese Methode, um anzupassen, wie den eindeutigen Bezeichner generiert.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Web.Caching.AggregateCacheDependency> Objekt, mit dem Namen `aggDep`, mit zwei <xref:System.Web.Caching.CacheDependency> Objekte im Array. Einmal `aggDep` instanziiert wird, ruft der Code die <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> Methode, um einen eindeutigen Bezeichner für beide Abhängigkeiten zu generieren, die `aggDep` enthält, und zeigt die IDs auf der Seite an. Ein Element wird dann hinzugefügt, um die <xref:System.Web.Caching.Cache>unter Verwendung der <xref:System.Web.Caching.Cache.Insert%2A> -Methode, mit `aggDep` als Abhängigkeit.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Web.Caching.CacheDependency" /> object has changed.</summary>
        <value>
          <see langword="true" /> Wenn die <see cref="T:System.Web.Caching.CacheDependency" /> Objekt geändert hat, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Element an einer ASP.NET-Anwendung hinzufügen <xref:System.Web.Caching.Cache> mit einem <xref:System.Web.Caching.CacheDependency>. Wenn die <xref:System.Web.Caching.CacheDependency> geändert wird, handelt es sich bei das hinzugefügten Element der <xref:System.Web.Caching.Cache> für ungültig erklärt und aus dem Cache entfernt wird. Sie können diese Eigenschaft verwenden, um zu bestimmen, ob eine <xref:System.Web.Caching.CacheDependency> geändert wurde, und erstellen Sie das Element in der <xref:System.Web.Caching.Cache> Wenn, die aufgetreten ist.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Web.Caching.CacheDependency.HasChanged%2A> -Eigenschaft können Sie bestimmen, ob eine <xref:System.Web.Caching.CacheDependency> geändert, seit der vorherigen Anforderung für ein Element in der <xref:System.Web.Caching.Cache>. Die `dt` übergebene Wert den `start` Parametersatz auf <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when a monitored cache entry is removed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the last access time of every cache item that depends on this item.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The source of the event.</param>
        <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        <summary>Notifies the base <see cref="T:System.Web.Caching.CacheDependency" /> object that the dependency represented by a derived <see cref="T:System.Web.Caching.CacheDependency" /> class has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Klasse, die von abgeleitet ist die <xref:System.Web.Caching.CacheDependency> Klasse muss diese Methode implementieren.  
  
 Beim Ableiten von der <xref:System.Web.Caching.CacheDependency> -Klasse, verwenden Sie die Basisfunktionalität eine beliebige Methode oder Eigenschaft, die Sie nicht außer Kraft gesetzt haben. Wenn Sie eine Instanz der abgeleiteten Klasse erstellen, stellt es die Dateien, Cacheschlüssel, Datenbanktabellen oder andere beliebige Objekte, denen ein zwischengespeichertes Elements von abhängig machen möchten. Wenn eine Abhängigkeit geändert wird, wird diese Methode die Basisfunktionalität benachrichtigt die <xref:System.Web.Caching.CacheDependency> -Klasse, die das Element geändert wurde, so, dass die Werte der der <xref:System.Web.Caching.CacheDependency.HasChanged%2A> und <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> Eigenschaften können aktualisiert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, eine Klasse, die von erben die <xref:System.Web.Caching.CacheDependency> Klasse. Erstellt eine öffentliche Methode `ResetDependency`, verwendet der <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> -Methode, um die Uhrzeit zu ändern, zu dem die Abhängigkeit geändert wurde, und ruft dann die <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> Methode.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">The dependency changed action.</param>
        <summary>Adds an Action method to handle notifying interested party in changes to this dependency.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">The time when the dependency last changed.</param>
        <summary>Marks the time when a dependency last changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, eine Klasse, die von erben die <xref:System.Web.Caching.CacheDependency> Klasse. Erstellt eine öffentliche Methode `ResetDependency`, verwendet der <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> -Methode, um die Uhrzeit zu ändern, zu dem die Abhängigkeit geändert wurde, und ruft dann die <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> Methode.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allows the first user to declare exclusive ownership of this dependency.</summary>
        <returns>
          <see langword="true" />
          <see langword="true" /> if the item was the first to take ownership otherwise <see langword="false" />. <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode deklariert, dass die Abhängigkeit verwendet wird. Wenn ein anderes Element zuvor diese Methode aufgerufen wird und übernommen, `false` wird zurückgegeben. Ein <xref:System.Web.Caching.CacheDependency> kann nur verwendet werden, indem ein Cacheeintrag. Wenn ein Element in einen Cache mit Abhängigkeiten Cache angegeben hinzugefügt wird, sollte der Cache Besitz solcher Abhängigkeiten, um sicherzustellen, dass sie an einer beliebigen Stelle nicht else wiederverwendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time when the dependency was last changed.</summary>
        <value>Die Uhrzeit, wann die Abhängigkeit zuletzt geändert wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird in Coordinated Universal Time (UTC) (auch bekannt als Greenwich Mean Time) gemessen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mit der <xref:System.Web.Caching.AggregateCacheDependency> Klasse zum Hinzufügen eines Elements, mit zwei <xref:System.Web.Caching.CacheDependency> -Objekt Abhängigkeiten, die <xref:System.Web.Caching.Cache>. Wenn eine Anforderung für die <xref:System.Web.Caching.Cache> Element erfolgt, der Code überprüft, ob das Element in der <xref:System.Web.Caching.Cache>. Wenn dies der Fall, die <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> Eigenschaft in eine Zeichenfolge konvertiert und auf der Seite angezeigt wird. Wenn es nicht der Fall ist, das Element und seine zwei Abhängigkeiten erstellt und hinzugefügt die <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
  </Members>
</Type>
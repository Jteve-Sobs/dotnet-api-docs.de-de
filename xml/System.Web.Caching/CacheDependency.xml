<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a017999f647e2f1cce3bf00045d6a312467f3830" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52201598" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Legt eine Abhängigkeitsbeziehung zwischen einem Element, das im <see cref="T:System.Web.Caching.Cache" />-Objekt einer ASP.NET-Anwendung gespeichert ist, und einer Datei, einem Cacheschlüssel, einem Datei- oder Cacheschlüsselarray oder einem anderen <see cref="T:System.Web.Caching.CacheDependency" />-Objekt fest. Die <see cref="T:System.Web.Caching.CacheDependency" />-Klasse überwacht die Abhängigkeitsbeziehungen, sodass bei Änderung beliebiger dieser Beziehungen das zwischengespeicherte Element automatisch entfernt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein Element zum Cache hinzufügen, die auf einem anderen Objekt, z. B. eine Datei oder ein Array von Dateien abhängig ist ist das abhängige Element automatisch aus dem Cache entfernt, wenn das Objekt geändert wird. Nehmen wir beispielsweise an, die Sie erstellen eine <xref:System.Data.DataSet> Objekt auf der Grundlage von Daten in eine XML-Datei. Hinzufügbaren der <xref:System.Data.DataSet> in den Cache mit einer <xref:System.Web.Caching.CacheDependency> -Objekt, das macht die <xref:System.Data.DataSet> abhängig von der XML-Datei. Wenn die XML-Datei geändert wird, die <xref:System.Data.DataSet> aus dem Cache entfernt wird.  
  
 Sie können Elemente mit Abhängigkeiten hinzufügen, in Ihrer Anwendung Cache mit den <xref:System.Web.Caching.Cache.Add%2A> und <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methoden. Sie können keine der <xref:System.Web.Caching.Cache.Item%2A> Eigenschaft, um Elemente in den Cache mit Abhängigkeiten hinzuzufügen.  
  
 Informationen zum Einrichten einer Abhängigkeit, die Sie Erstellen einer Instanz von der <xref:System.Web.Caching.CacheDependency> -Klasse und gibt die Dateien, Schlüssel oder die Verzeichnisse, die auf dem das Element abhängig ist, und übergeben Sie dann auf die Abhängigkeit auf der <xref:System.Web.Caching.Cache.Add%2A> oder <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode. Die <xref:System.Web.Caching.CacheDependency> Instanz kann eine einzelne Datei oder Verzeichnis, ein Array von Dateien oder Verzeichnisse oder ein Array von Dateien oder Verzeichnissen sowie ein Array von Cacheschlüsseln darstellen (diese anderen im gespeicherten Elementen repräsentieren die <xref:System.Web.Caching.Cache> Objekt).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Web.Caching.CacheDependency.HasChanged%2A> Eigenschaft, um zu bestimmen, ob eine <xref:System.Web.Caching.CacheDependency> geändert, seit der vorherigen Anforderung für ein Element in der <xref:System.Web.Caching.Cache>. Die `dt` übergebene Wert den `start` Parametersatz zu <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine eigene Klasse von ableiten möchten <xref:System.Web.Caching.CacheDependency>, implementieren Sie diese Version von der <xref:System.Web.Caching.CacheDependency.%23ctor%2A> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Klasse, die diese Version von implementiert die <xref:System.Web.Caching.CacheDependency> Konstruktor wie alle Klassen, die abgeleitet <xref:System.Web.Caching.CacheDependency> sind erforderlich, um.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Der Pfad einer Datei oder eines Verzeichnisses, von der bzw. dem das zwischengespeicherte Objekt abhängig ist. Wenn diese Ressource geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die eine Datei oder ein Verzeichnis auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Verzeichnis oder Datei, in angegeben der `filename` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt werden. Wenn das Verzeichnis oder die Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn das Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Instanz von der <xref:System.Web.Caching.CacheDependency> Klasse mit einer Abhängigkeit auf eine XML-Datei. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode fügt dann ein Element, das die <xref:System.Web.Caching.Cache> , die richtet sich nach dieser Datei.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Sie können auch das folgende Verfahren zum Hinzufügen eines Elements zum Verwenden der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf eine Datei.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen) auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine der Dateien oder Verzeichnisse in das Array ändert oder entfernt aus dem Array, das zwischengespeicherte Element ist veraltet und wird aus der Anwendung entfernt <xref:System.Web.Caching.Cache> Objekt.  
  
 Auch wenn die Verzeichnisse oder Dateien, die im angegebenen die `filenames` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
> [!NOTE]
>  Wenn Sie das Array, die die Abhängigkeiten enthält erstellen, müssen Sie die Anzahl der Dateien definieren, dass das Element Sie zum Hinzufügen der <xref:System.Web.Caching.Cache> richtet sich nach.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode zum Hinzufügen eines Elements auf die <xref:System.Web.Caching.Cache> mit Abhängigkeiten in ein Array von Dateien. Sie können auch das Element ein Array von Verzeichnissen abhängig machen.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Der Pfad einer Datei oder eines Verzeichnisses, von der bzw. dem das zwischengespeicherte Objekt abhängig ist. Wenn diese Ressource geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="start">Die Zeit, mit der das Datum der letzten Änderung des Verzeichnisses oder der Datei verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die eine Datei oder ein Verzeichnis auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Verzeichnis oder Datei, in angegeben der `filename` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt werden. Wenn das Verzeichnis oder die Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn das Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und wird nicht direkt basierend auf den `start` Parameter. Verwenden der `start` Parameter übergeben, Datum und Uhrzeit in der Vergangenheit für das Überprüfen Sie das letzte Änderungsdatum, der das Verzeichnis oder Datei übergeben werden sollen die `filename` Parameter. Wenn es sich bei der letzten Änderung Datum liegt nach dem Datum und die festgelegte Zeit übergeben die `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel verwendet diesen Konstruktor zum Instanziieren einer <xref:System.Web.Caching.CacheDependency> Objekt aus, und fügt ein Element in der <xref:System.Web.Caching.Cache> mit dieser Abhängigkeit. Die `dt` übergebene Wert den `start` Parametersatz zu <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="start">Die Zeit, mit der das Datum der letzten Änderung der Objekte im Array verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen) auf Änderungen überwacht, und gibt an, wann die Änderungsüberwachung beginnt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keines der Verzeichnisse oder Dateien, die im angegebenen die `filenames` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und wird nicht direkt basierend auf den `start` Parameter. Verwenden der `start` übergebene Parameter übergeben, Datum und Uhrzeit in der Vergangenheit für die das Datum der letzten Änderung des Arrays verglichen werden sollen die `filenames` Parameter. Wenn der letzten Änderung Datum eines beliebigen Objekts in das Array nach dem Datum und die festgelegte Zeit übergeben die `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Web.Caching.CacheDependency> -Objekt, das zwei XML-Dateien zu übergeben und ein <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Wert, wenn das Objekt als im Parameterargument enthalten ist ein <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methodenaufruf.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder Dateien, die im angegebenen die `filenames` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet. Wenn mindestens ein in Wert der `cachekeys` Parameter ist nicht vorhanden, die zum Zeitpunkt einer INSERT-, der Vorgang schlägt fehl. Beachten Sie, dass keine Ausnahme ausgelöst, die für dieses Szenario.  
  
## Examples  
 Im folgenden Codefragment wird veranschaulicht, wie ein Element in Ihrer Anwendungsverzeichnis einfügen <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf einen Schlüssel zu einem anderen Element im Cache platziert. Da diese Methode den Array-Syntax verwendet, müssen Sie definieren die Anzahl der Schlüssel auf dem das Element hinzufügen der <xref:System.Web.Caching.Cache> richtet.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <param name="start">Datum und Uhrzeit, mit denen das Datum der letzten Änderung der im <paramref name="filenames" />-Array und im <paramref name="cachekeys" />-Array übergebenen Objekte verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder Dateien, die im angegebenen die `filenames` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet. Wenn mindestens ein in Wert der `cachekeys` Parameter ist nicht vorhanden, die zum Zeitpunkt einer INSERT-, der Vorgang schlägt fehl. Beachten Sie, dass keine Ausnahme ausgelöst, die für dieses Szenario.

> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und wird nicht direkt basierend auf den `start` Parameter. Verwenden der `start` übergebene Parameter übergeben, Datum und Uhrzeit in der Vergangenheit für die Sie das Datum das letzte Änderung eines Objekts überprüfen möchten die `filenames` oder `cachekeys` Parameter. Wenn es sich bei der letzten Änderung, Datum der eines dieser Objekte wird nach dem Datum und die festgelegte Zeit übergeben die `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine `CreateDependency` Methode. Wenn diese Methode aufgerufen wird, erstellt es eine <xref:System.DateTime> Objekt und die <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> Eigenschaft wird verwendet, um ein Element zum Cache mit Hinzufügen einer `key` Parameter `key1` und den Wert `Value 1`. Ein Array von Zeichenfolgen, `dependencyKey`, wird dann erstellt, mit dem Wert des `key1` ebenfalls. Dies <xref:System.Web.Caching.CacheDependency> Konstruktor instanziiert, klicken Sie dann eine <xref:System.Web.Caching.CacheDependency> -Objekt, das übergibt `dependencyKey` und <xref:System.DateTime> Objekt als Parameterargumente. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode wird aufgerufen als Nächstes mit der <xref:System.Web.Caching.CacheDependency> -Objekt als Parameter. Dadurch wird das Objekt hinzugefügt, die dem Cache mithilfe der <xref:System.Web.Caching.Cache.Insert%2A> Methode hängt von der `key1` Schlüssel.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <param name="dependency">Eine andere Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, von dem diese Instanz abhängig ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht. Außerdem wird eine Abhängigkeit zu einer separaten Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse hergestellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder Dateien, die im angegebenen die `filenames` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
  
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet. Wenn mindestens ein in Wert der `cachekeys` Parameter ist nicht vorhanden, die zum Zeitpunkt einer INSERT-, der Vorgang schlägt fehl. Beachten Sie, dass keine Ausnahme ausgelöst, die für dieses Szenario.
  
## Examples  
 Das folgende Codebeispiel erstellt eine `CreateDependency` Methode. Wenn diese Methode aufgerufen wird, verwendet es die <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> Eigenschaft, um ein Element zum Cache mit Hinzufügen einer `key` Parameter `key1` und den Wert `Value 1`. Ein Array von Zeichenfolgen, `dependencyKey`, wird dann erstellt, mit dem Wert des `key1` ebenfalls. Der <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor wird zum Erstellen einer <xref:System.Web.Caching.CacheDependency> Objekt `dep1`, welche übergibt `dependencyKey` als Parameterargument. Ein zweites <xref:System.Web.Caching.CacheDependency> Objekt `dep2`, wird erstellt, verwenden diesen Konstruktor mit `dep1` als das dritte Parameterargument übergeben. Diese zweite Abhängigkeit ist abhängig von der ersten. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode wird aufgerufen als Nächstes mit dem zweiten <xref:System.Web.Caching.CacheDependency> -Objekt als Parameter. Wenn die erste Abhängigkeit in keiner Weise geändert wird, wird das zwischengespeicherte Element ungültig gemacht werden.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Ein Array von Pfaden (zu Dateien oder Verzeichnissen), von dem das zwischengespeicherte Objekt abhängig ist. Wenn eine dieser Ressourcen geändert wird, ist das zwischengespeicherte Objekt veraltet und wird aus dem Cache entfernt.</param>
        <param name="cachekeys">Ein Array von Cacheschlüsseln, bei dem Änderungen durch das neue Objekt überwacht werden. Bei einer Änderung an einem dieser Cacheschlüssel ist das zwischengespeicherte Objekt, das diesem Abhängigkeitsobjekt zugeordnet ist, veraltet und wird aus dem Cache entfernt.</param>
        <param name="dependency">Eine andere Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, von dem diese Instanz abhängig ist.</param>
        <param name="start">Die Zeit, mit der das Datum der letzten Änderung der Objekte in den Arrays und des <see cref="T:System.Web.Caching.CacheDependency" />-Objekts verglichen werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse, die ein Array von Pfaden (zu Dateien oder Verzeichnissen), ein Array von Cacheschlüsseln oder beides auf Änderungen überwacht. Außerdem wird eine Abhängigkeit zu einer anderen Instanz der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse und einem Zeitpunkt hergestellt, an dem die Änderungsüberwachung beginnt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Auch wenn die Verzeichnisse oder Dateien, die im angegebenen die `filenames` Parameter wurde nicht gefunden im Dateisystem, wird es als fehlend behandelt. Wenn ein Verzeichnis oder eine Datei nicht vorhanden ist. wenn das Objekt mit der Abhängigkeit hinzugefügt wird die <xref:System.Web.Caching.Cache>, wird das zwischengespeicherte Objekt von entfernt die <xref:System.Web.Caching.Cache> Wenn dieses Verzeichnis oder Datei erstellt wird.  
  
 Nehmen wir beispielsweise an, dass Sie ein Objekt, das Hinzufügen der <xref:System.Web.Caching.Cache> mit einer Abhängigkeit auf den folgenden Dateipfad: c:\stocks\xyz.dat. Wenn die Datei nicht gefunden wurde die <xref:System.Web.Caching.CacheDependency> Objekt wird erstellt, aber später erstellt wird, wird das zwischengespeicherte Objekt bei der Erstellung der Datei xyz.dat entfernt.  
 
 Allerdings die `cachekeys` Abhängigkeit kann nicht die gleiche Weise verwendet. Wenn mindestens ein in Wert der `cachekeys` Parameter ist nicht vorhanden, die zum Zeitpunkt einer INSERT-, der Vorgang schlägt fehl. Beachten Sie, dass keine Ausnahme ausgelöst, die für dieses Szenario.

> [!NOTE]
>  Nachverfolgen von Änderungen beginnt sofort und wird nicht direkt basierend auf den `start` Parameter. Verwenden der `start` übergebene Parameter übergeben, Datum und Uhrzeit in der Vergangenheit mit dem Sie das Datum das letzte Änderung der eines der Objekte zu überprüfen möchten die `filenames`, `cachekeys`, oder `dependency` Parameter. Wenn der letzten Änderung Datum für eines dieser Objekte nach dem Datum und Zeit zu übergeben, der `start` Parameter das zwischengespeicherte Element wird entfernt, von der <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine `CreateDependency` Methode. Wenn diese Methode aufgerufen wird, erstellt es einen <xref:System.DateTime> Objekt und die <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> Eigenschaft wird verwendet, um ein Element in den Cache mit dem wichtigsten Parameter hinzufügen `key1` und den Wert `Value 1`. Ein Array von Zeichenfolgen, `dependencyKey`, wird dann erstellt, mit dem Wert auf die erste (und einzige) Index an, legen Sie auf den Wert der `key1` ebenfalls. Die <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor wird dann zum Erstellen einer <xref:System.Web.Caching.CacheDependency> Objekt `dep1`, welche übergibt `dependencyKey` als Parameterargument. Ein zweites <xref:System.Web.Caching.CacheDependency> Objekt `dep2`, wird mit diesem Konstruktor erstellt `dep1` und <xref:System.DateTime> -Objekt als Parameterargumente übergeben. Diese zweite Abhängigkeit ist abhängig von der ersten und abhängigkeitsüberwachung wird 10 Sekunden nach dem Starten der `CreateDependency` Methode wird aufgerufen. Die <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Methode wird aufgerufen als Nächstes mit dem zweiten <xref:System.Web.Caching.CacheDependency> -Objekt als Parameter. Wenn die erste Abhängigkeit in keiner Weise geändert wird, wird das zwischengespeicherte Element ungültig gemacht werden.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Ressourcen frei, die von der <see cref="T:System.Web.Caching.CacheDependency" />-Klasse sowie allen Klassen verwendet werden, die von <see cref="T:System.Web.Caching.CacheDependency" /> abgeleitet sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede abgeleitete Klasse die <xref:System.Web.Caching.CacheDependency> Klasse ist erforderlich, um implementieren Sie diese Methode zum Bereinigen von Ressourcen der abgeleiteten Klasse verwendet wurde.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Klasse, die von erbt die <xref:System.Web.Caching.CacheDependency> -Klasse und überschreibt die <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> Methode. Wenn diese Methode aufgerufen wird, wird eine benutzerdefinierte boolesche Eigenschaft, die mit dem Namen `Disposed` zu `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die vom <see cref="T:System.Web.Caching.CacheDependency" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt die Initialisierung des <see cref="T:System.Web.Caching.CacheDependency" />-Objekts ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Caching.CacheDependency.FinishInit%2A> Methode schließt die Initialisierung der <xref:System.Web.Caching.CacheDependency> Objekt. Diese Methode wird aufgerufen, von allen <xref:System.Web.Caching.CacheDependency> Konstruktoren.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> -Methode muss aufgerufen werden, am Ende des Konstruktors für abgeleitete Klassen für die Initialisierung von der <see cref="T:System.Web.Caching.CacheDependency" /> Objekt.</para>
        </block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Dateiabhängigkeiten ab.</summary>
        <returns>Die Dateiabhängigkeiten.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen eindeutigen Bezeichner für ein <see cref="T:System.Web.Caching.CacheDependency" />-Objekt ab.</summary>
        <returns>Der eindeutige Bezeichner für das <see cref="T:System.Web.Caching.CacheDependency" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist besonders hilfreich für das Nachverfolgen von mehreren Instanzen der <xref:System.Web.Caching.CacheDependency> Klasse ein Element oder einer Anwendung zugeordnet.  
  
 Der Bezeichner ist eine Kombination aus den Dateinamen (für eine dateiabhängigkeit) oder dem Schlüsselnamen (für eine Cache-Key-Abhängigkeit) und eine Zeichenfolge, die diese Methode die Abhängigkeit zuweist. In abgeleitete Klassen die <xref:System.Web.Caching.CacheDependency> -Klasse, Sie können diese Methode, um anzupassen, wie sie den eindeutigen Bezeichner generieren überschreiben.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein <xref:System.Web.Caching.AggregateCacheDependency> Objekt, mit dem Namen `aggDep`, mit zwei <xref:System.Web.Caching.CacheDependency> Objekte im Array. Einmal `aggDep` instanziiert wird, ruft der Code die <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> Methode, um einen eindeutigen Bezeichner für beide Abhängigkeiten zu generieren, die `aggDep` enthält, und zeigt den Bezeichner auf die enthaltende Seite. Ein Element wird dann hinzugefügt, um die <xref:System.Web.Caching.Cache>unter Verwendung der <xref:System.Web.Caching.Cache.Insert%2A> -Methode, mit `aggDep` als Abhängigkeit.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob sich das <see cref="T:System.Web.Caching.CacheDependency" />-Objekt geändert hat.</summary>
        <value>
          <see langword="true" />, wenn sich das <see cref="T:System.Web.Caching.CacheDependency" />-Objekt geändert hat. Andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können ein Element an einer ASP.NET-Anwendung hinzufügen <xref:System.Web.Caching.Cache> mit einem <xref:System.Web.Caching.CacheDependency>. Wenn die <xref:System.Web.Caching.CacheDependency> geändert wird, das Element hinzugefügt wird die <xref:System.Web.Caching.Cache> ungültig und wird aus dem Cache entfernt. Sie können diese Eigenschaft verwenden, um zu bestimmen, ob eine <xref:System.Web.Caching.CacheDependency> geändert wurde, und erstellen Sie das Element im neu die <xref:System.Web.Caching.Cache> Wenn, die aufgetreten ist.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Web.Caching.CacheDependency.HasChanged%2A> Eigenschaft, um zu bestimmen, ob eine <xref:System.Web.Caching.CacheDependency> geändert, seit der vorherigen Anforderung für ein Element in der <xref:System.Web.Caching.Cache>. Die `dt` übergebene Wert den `start` Parametersatz zu <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird aufgerufen, wenn ein überwachter Cacheeintrag entfernt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert den Zeitpunkt des letzten Zugriffs von jedem Cacheelement, das von diesem Element abhängig ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Die Quelle des Ereignisses.</param>
        <param name="e">Ein <see cref="T:System.EventArgs" />-Objekt, das die Ereignisdaten enthält.</param>
        <summary>Benachrichtigt das Basis-<see cref="T:System.Web.Caching.CacheDependency" />-Objekt darüber, dass die durch eine abgeleitete <see cref="T:System.Web.Caching.CacheDependency" />-Klasse dargestellte Abhängigkeit geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede abgeleitete Klasse die <xref:System.Web.Caching.CacheDependency> Klasse muss diese Methode implementieren.  
  
 Beim Ableiten von der <xref:System.Web.Caching.CacheDependency> -Klasse, verwenden Sie die grundlegende Funktionen einer Methode oder Eigenschaft, die Sie nicht überschrieben haben. Wenn Sie eine Instanz der abgeleiteten Klasse erstellen, stellt sie dar, die Dateien, Cacheschlüssel, Datenbanktabellen oder andere beliebige Objekte, denen Sie ein zwischengespeichertes Element abhängig machen möchten. Wenn eine Abhängigkeit geändert wird, wird diese Methode benachrichtigt die grundlegende Funktionen von der <xref:System.Web.Caching.CacheDependency> -Klasse, die das Element geändert wurde, damit die Werte der <xref:System.Web.Caching.CacheDependency.HasChanged%2A> und <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> Eigenschaften können aktualisiert werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Klasse, die von erbt die <xref:System.Web.Caching.CacheDependency> Klasse. Erstellt eine öffentliche Methode `ResetDependency`, verwendet der <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> -Methode, die zu ändern, an dem die Abhängigkeit geändert wurde, und ruft dann die <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> Methode.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">Die Änderungsaktion für die Abhängigkeit.</param>
        <summary>Fügt eine Aktionsmethode zum Behandeln von Benachrichtigungen der beteiligten Partei über Änderungen an dieser Abhängigkeit hinzu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Die Zeit, zu der die Abhängigkeit zuletzt geändert wurde.</param>
        <summary>Markiert die Zeit, zu der eine Abhängigkeit zuletzt geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel zeigt eine Klasse, die von erbt die <xref:System.Web.Caching.CacheDependency> Klasse. Erstellt eine öffentliche Methode `ResetDependency`, verwendet der <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> -Methode, die zu ändern, an dem die Abhängigkeit geändert wurde, und ruft dann die <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> Methode.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht es dem ersten Benutzer, den exklusiven Besitz dieser Abhängigkeit zu deklarieren.</summary>
        <returns>
          <see langword="true" />
          <see langword="true" />, wenn der Besitz für das Element durch den ersten Zugriff bestimmt wird, andernfalls <see langword="false" />. <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode deklariert, dass die Abhängigkeit verwendet wird. Wenn ein anderes Element bereits diese Methode aufgerufen und den Besitz hat, `false` zurückgegeben wird. Ein <xref:System.Web.Caching.CacheDependency> kann nur von einem Cacheeintrag verwendet werden. Wenn ein Element mit bestimmten cacheabhängigkeiten angegeben mit einem Cache hinzugefügt wird, sollte der Cache Übernehmen des Besitzes solcher Abhängigkeiten, um sicherzustellen, dass sie an einer beliebigen Stelle nicht anderen wiederverwendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeit ab, zu der die Abhängigkeit zuletzt geändert wurde.</summary>
        <value>Die Zeit, zu der die Abhängigkeit zuletzt geändert wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird in der Coordinated Universal Time (UTC) (auch bekannt als Greenwich Mean Time) gemessen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.Caching.AggregateCacheDependency> Klasse zum Hinzufügen eines Elements, mit zwei <xref:System.Web.Caching.CacheDependency> objektabhängigkeiten, zu der <xref:System.Web.Caching.Cache>. Wenn eine Anforderung für die <xref:System.Web.Caching.Cache> Element hergestellt, der Code überprüft, ob das Element in der <xref:System.Web.Caching.Cache>. Wenn es sich handelt, die <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> Eigenschaft in eine Zeichenfolge konvertiert und auf der Seite angezeigt wird. Wenn es nicht der Fall ist, das Element und seine zwei Abhängigkeiten erstellt und hinzugefügt die <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Zwischenspeichern von Anwendungsdaten</related>
      </Docs>
    </Member>
  </Members>
</Type>
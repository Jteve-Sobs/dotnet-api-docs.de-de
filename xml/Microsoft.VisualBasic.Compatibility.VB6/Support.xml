<Type Name="Support" FullName="Microsoft.VisualBasic.Compatibility.VB6.Support">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e951a9a7f4a15b1e3979fda5ddfe855cb006394e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36728264" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Support" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Support extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Compatibility.VB6.Support" />
  <TypeSignature Language="VB.NET" Value="Public Module Support" />
  <TypeSignature Language="C++ CLI" Value="public ref class Support sealed" />
  <TypeSignature Language="F#" Value="type Support = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enthält verschiedene Dienstprogrammfunktionen für die Abwärtskompatibilität mit Visual Basic 6.0.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Funktionen in dieser Klasse werden während des Upgrades von Visual Basic 6.0-Projekten in Visual Basic verwendet. Einige Funktionen ersetzen Visual Basic 6.0-Funktionen, die nicht mehr in Visual Basic unterstützt werden. andere Unterschiede in den Objektmodellen kompensiert werden.  
  
 Fügen Sie für die Verwendung der Funktionen in dieser Klasse in einem Visual Basic-Projekt einen Verweis auf die `Microsoft.VisualBasic.Compatibility.VB6` Namespace.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyArray">
      <MemberSignature Language="C#" Value="public static Array CopyArray (Array SourceArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Array CopyArray(class System.Array SourceArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.CopyArray(System.Array)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyArray (SourceArray As Array) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CopyArray(Array ^ SourceArray);" />
      <MemberSignature Language="F#" Value="static member CopyArray : Array -&gt; Array" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.CopyArray SourceArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Ein <see cref="T:System.Array" />.</param>
        <summary>Dupliziert die Visual Basic 6.0-Funktionalität zum Zuweisen eines <see langword="Array" /> zu einem <see langword="Variant" />.</summary>
        <returns>Das Array, das kopiert werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Variant` -Datentyp wird in Visual Basic nicht mehr unterstützt. Die `CopyArray` Funktion wird von den Upgradetools verwendet, kopiert eine `Array` in oder aus einer `Variant` Array.  
  
 Um ein Array in Visual Basic zu kopieren, verwenden Sie die <xref:System.Array.Clone%2A>, <xref:System.Array.Copy%2A> oder <xref:System.Array.CopyTo%2A> Methoden die <xref:System.Array> Klasse.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CursorToIPicture">
      <MemberSignature Language="C#" Value="public static object CursorToIPicture (System.Windows.Forms.Cursor curs);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CursorToIPicture(class System.Windows.Forms.Cursor curs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.CursorToIPicture(System.Windows.Forms.Cursor)" />
      <MemberSignature Language="VB.NET" Value="Public Function CursorToIPicture (curs As Cursor) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CursorToIPicture(System::Windows::Forms::Cursor ^ curs);" />
      <MemberSignature Language="F#" Value="static member CursorToIPicture : System.Windows.Forms.Cursor -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.CursorToIPicture curs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curs" Type="System.Windows.Forms.Cursor" />
      </Parameters>
      <Docs>
        <param name="curs">Die zu konvertierende <see cref="T:System.Windows.Forms.Cursor" />.</param>
        <summary>Gibt das <see langword="IPicture" />-OLE-Objekt zurück, das dem angegebenen <see cref="T:System.Windows.Forms.Cursor" /> entspricht.</summary>
        <returns>Ein <see cref="T:System.Object" />, das das <see langword="IPicture" />-OLE-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `MouseIcon` , laden Sie eine benutzerdefinierte Eigenschaft eines Formulars oder Steuerelements missbraucht werden `MousePointer` (Cursor). In einigen Fällen wird das Bild für die `MouseIcon` gespeichert wurde, als ein `stdOle.IPicture`; diese Funktion wird durch das Upgrade-Tool konvertiert eine <xref:System.Windows.Forms.Cursor> auf eine `stdOle.IPicture`.  
  
 Konvertieren einer <xref:System.Windows.Forms.Cursor> in Visual Basic verwenden die <xref:System.Windows.Forms.AxHost.GetIPictureFromCursor%2A> Methode der <xref:System.Windows.Forms.AxHost> Klasse.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Eqv">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Führt eine logische Äquivalenz zweier Ausdrücke durch.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Eqv">
      <MemberSignature Language="C#" Value="public static bool Eqv (bool a, bool b);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool Eqv(bool a, bool b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eqv (a As Boolean, b As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Eqv(bool a, bool b);" />
      <MemberSignature Language="F#" Value="static member Eqv : bool * bool -&gt; bool" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Boolean" />
        <Parameter Name="b" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="a">Ein zu vergleichender <see cref="T:System.Boolean" />.</param>
        <param name="b">Ein zu vergleichender <see cref="T:System.Boolean" />.</param>
        <summary>Führt eine logische Äquivalenz zweier <see cref="T:System.Boolean" />-Ausdrücke durch.</summary>
        <returns>
          <see langword="true" />, wenn die beiden Ausdrücke gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn einer der Ausdrücke ist `Null`, Ergebnis ist ebenfalls `Null`. Wenn kein Ausdruck ist `Null`, Ergebnis wird entsprechend der folgenden Tabelle bestimmt:  
  
|Expression1|Und expression2 ist|Das Ergebnis ist|  
|-----------------------|------------------------|-------------------|  
|`true`|`true`|`true`|  
|`true`|`false`|`false`|  
|`false`|`true`|`false`|  
|`false`|`false`|`true`|  
  
 In Visual Basic die `Eqv` Operator ist nicht mehr Teil der Sprache Visual Basic; verwenden Sie den Vergleichsoperator gleich (=) anstelle von `Eqv` für logische Bewertungen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eqv">
      <MemberSignature Language="C#" Value="public static byte Eqv (byte a, byte b);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int8 Eqv(unsigned int8 a, unsigned int8 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eqv (a As Byte, b As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Eqv(System::Byte a, System::Byte b);" />
      <MemberSignature Language="F#" Value="static member Eqv : byte * byte -&gt; byte" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Byte" />
        <Parameter Name="b" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="a">Ein zu vergleichender <see cref="T:System.Byte" />.</param>
        <param name="b">Ein zu vergleichender <see cref="T:System.Byte" />.</param>
        <summary>Führt eine logische Äquivalenz zweier <see cref="T:System.Byte" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> mit dem Ergebnis des bitweisen Vergleichs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Eqv` Operator führt einen bitweisen Vergleich von identisch positionierten Bits in zwei numerischen Ausdrücken und legt das entsprechende Bit gemäß der folgenden Tabelle fest:  
  
|Wenn das Bit in expression1|Und das Bit in expression2|Das Ergebnis ist|  
|------------------------------|-------------------------------|-------------------|  
|0|0|1|  
|0|1|0|  
|1|0|0|  
|1|1|1|  
  
 In Visual Basic die `Eqv` Operator ist nicht mehr als ein Teil der Sprache Visual Basic; für die Verwendung von bitweisen auswertungen der `Not` und `XOr` Operatoren.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eqv">
      <MemberSignature Language="C#" Value="public static short Eqv (short a, short b);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Eqv(int16 a, int16 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eqv (a As Short, b As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Eqv(short a, short b);" />
      <MemberSignature Language="F#" Value="static member Eqv : int16 * int16 -&gt; int16" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int16" />
        <Parameter Name="b" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="a">Ein zu vergleichender <see cref="T:System.Int16" />.</param>
        <param name="b">Ein zu vergleichender <see cref="T:System.Int16" />.</param>
        <summary>Führt eine logische Äquivalenz zweier <see cref="T:System.Int16" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Int16" /> mit dem Ergebnis des Vergleichs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic die `Eqv` Operator ist nicht mehr als ein Teil der Sprache Visual Basic; für die Verwendung von bitweisen auswertungen der `Not` und `XOr` Operatoren.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eqv">
      <MemberSignature Language="C#" Value="public static int Eqv (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Eqv(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eqv (a As Integer, b As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Eqv(int a, int b);" />
      <MemberSignature Language="F#" Value="static member Eqv : int * int -&gt; int" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">Ein zu vergleichender <see cref="T:System.Int32" />.</param>
        <param name="b">Ein zu vergleichender <see cref="T:System.Int32" />.</param>
        <summary>Führt eine logische Äquivalenz zweier <see cref="T:System.Int32" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Int32" /> mit dem Ergebnis des Vergleichs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic die `Eqv` Operator ist nicht mehr als ein Teil der Sprache Visual Basic; für die Verwendung von bitweisen auswertungen der `Not` und `XOr` Operatoren.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eqv">
      <MemberSignature Language="C#" Value="public static long Eqv (long a, long b);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Eqv(int64 a, int64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eqv (a As Long, b As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Eqv(long a, long b);" />
      <MemberSignature Language="F#" Value="static member Eqv : int64 * int64 -&gt; int64" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">Ein zu vergleichender <see cref="T:System.Int64" />.</param>
        <param name="b">Ein zu vergleichender <see cref="T:System.Int64" />.</param>
        <summary>Führt eine logische Äquivalenz zweier <see cref="T:System.Int64" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Int64" /> mit dem Ergebnis des Vergleichs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic die `Eqv` Operator ist nicht mehr als ein Teil der Sprache Visual Basic; für die Verwendung von bitweisen auswertungen der `Not` und `XOr` Operatoren.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eqv">
      <MemberSignature Language="C#" Value="public static object Eqv (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Eqv(object a, object b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Eqv (a As Object, b As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Eqv(System::Object ^ a, System::Object ^ b);" />
      <MemberSignature Language="F#" Value="static member Eqv : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Eqv (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a">Ein zu vergleichender <see cref="T:System.Object" />.</param>
        <param name="b">Ein zu vergleichender <see cref="T:System.Object" />.</param>
        <summary>Führt eine logische Äquivalenz zweier <see cref="T:System.Object" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Object" /> mit dem Ergebnis des Vergleichs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic die `Eqv` Operator ist nicht mehr als ein Teil der Sprache Visual Basic; für die Verwendung von bitweisen auswertungen der `Not` und `XOr` Operatoren.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontChangeBold">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeBold (System.Drawing.Font CurrentFont, bool Bold);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeBold(class System.Drawing.Font CurrentFont, bool Bold) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeBold(System.Drawing.Font,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeBold (CurrentFont As Font, Bold As Boolean) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeBold(System::Drawing::Font ^ CurrentFont, bool Bold);" />
      <MemberSignature Language="F#" Value="static member FontChangeBold : System.Drawing.Font * bool -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeBold (CurrentFont, Bold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="Bold" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="Bold">
          <see langword="true" />, um das <see cref="F:System.Drawing.FontStyle.Bold" />-Stilbit festzulegen, andernfalls <see langword="false" />.</param>
        <summary>Ändert das <see cref="F:System.Drawing.FontStyle.Bold" />-Stilbit für eine Schriftart.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" />, auf den das neue Format angewendet wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Schriftschnitte angewendet, indem Sie Eigenschaften festlegen; in Visual Basic-Schriftart Stile angewendet werden, mithilfe einer <xref:System.Drawing.FontStyle> Enumeration. Diese Funktion wird von den Upgradetools verwendet, um die Visual Basic 6.0-Eigenschaften in die neuen Enumerationen zu übersetzen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontChangeGdiCharSet">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeGdiCharSet (System.Drawing.Font CurrentFont, byte GdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeGdiCharSet(class System.Drawing.Font CurrentFont, unsigned int8 GdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeGdiCharSet(System.Drawing.Font,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeGdiCharSet (CurrentFont As Font, GdiCharSet As Byte) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeGdiCharSet(System::Drawing::Font ^ CurrentFont, System::Byte GdiCharSet);" />
      <MemberSignature Language="F#" Value="static member FontChangeGdiCharSet : System.Drawing.Font * byte -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeGdiCharSet (CurrentFont, GdiCharSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="GdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="GdiCharSet">Ein Bytewert, der den zu verwendenden GDI-Zeichensatz angibt.</param>
        <summary>Gibt für einen angegebenen GDI-Zeichensatz eine Schriftart zurück.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" /> für den angegebenen GDI-Zeichensatz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `stdFont` Objekt hat eine `CharSet` -Eigenschaft, die die GDI angegebenen Zeichensatz für eine Schriftart. In Visual Basic der Zeichensatz angegeben ist, als optional eine <xref:System.Drawing.Font> Konstruktor. Diese Funktion wird von den Upgradetools konvertiert eine `stdFont` zu einem <xref:System.Drawing.Font>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName="FontChangeItalic">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeItalic (System.Drawing.Font CurrentFont, bool Italic);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeItalic(class System.Drawing.Font CurrentFont, bool Italic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeItalic(System.Drawing.Font,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeItalic (CurrentFont As Font, Italic As Boolean) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeItalic(System::Drawing::Font ^ CurrentFont, bool Italic);" />
      <MemberSignature Language="F#" Value="static member FontChangeItalic : System.Drawing.Font * bool -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeItalic (CurrentFont, Italic)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="Italic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="Italic">
          <see langword="true" />, um das <see cref="F:System.Drawing.FontStyle.Italic" />-Stilbit festzulegen, andernfalls <see langword="false" />.</param>
        <summary>Ändert das <see cref="F:System.Drawing.FontStyle.Italic" />-Stilbit für eine Schriftart.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" />, auf den das neue Format angewendet wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Schriftschnitte angewendet, indem Sie Eigenschaften festlegen; in Visual Basic-Schriftart Stile angewendet werden, mithilfe einer <xref:System.Drawing.FontStyle> Enumeration. Diese Funktion wird von den Upgradetools verwendet, um die Visual Basic 6.0-Eigenschaften in die neuen Enumerationen zu übersetzen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontChangeName">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeName (System.Drawing.Font CurrentFont, string Name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeName(class System.Drawing.Font CurrentFont, string Name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeName(System.Drawing.Font,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeName (CurrentFont As Font, Name As String) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeName(System::Drawing::Font ^ CurrentFont, System::String ^ Name);" />
      <MemberSignature Language="F#" Value="static member FontChangeName : System.Drawing.Font * string -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeName (CurrentFont, Name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="Name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="Name">Ein <see langword="String" />, der die <see langword="Font" />-Eigenschaft in Visual Basic 6.0 darstellt.</param>
        <summary>Gibt für einen gegebenen Visual Basic 6.0-<see langword="Font" /> einen neuen <see cref="T:System.Drawing.Font" /> zurück.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" />, der <see langword="Font" /> in Visual Basic 6.0 entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, der Namen einer Schriftart angegeben wurde, durch die `Font` Eigenschaft; in Visual Basic <xref:System.Drawing.Font.Name%2A> ist eine Eigenschaft der <xref:System.Drawing.Font> Objekt. Diese Funktion wird von den Upgradetools eine Visual Basic 6.0 konvertiert `Font` zu einem <xref:System.Drawing.Font>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontChangeSize">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeSize (System.Drawing.Font CurrentFont, float Size);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeSize(class System.Drawing.Font CurrentFont, float32 Size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeSize(System.Drawing.Font,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeSize (CurrentFont As Font, Size As Single) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeSize(System::Drawing::Font ^ CurrentFont, float Size);" />
      <MemberSignature Language="F#" Value="static member FontChangeSize : System.Drawing.Font * single -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeSize (CurrentFont, Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="Size" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="Size">Ein <see langword="Single" />, der die <see langword="FontSize" />-Eigenschaft in Visual Basic 6.0 darstellt.</param>
        <summary>Ändert die <see cref="P:System.Drawing.Font.Size" />-Eigenschaft für eine Schriftart.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" />, der <see langword="FontSize" /> in Visual Basic 6.0 entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, wurde die Größe einer Schriftart festgelegt, indem die `FontSize` Eigenschaft; in Visual Basic <xref:System.Drawing.Font.Size%2A> ist eine Eigenschaft der <xref:System.Drawing.Font> Objekt. Diese Funktion wird von den Upgradetools eine Visual Basic 6.0 konvertiert `Font` zu einem <xref:System.Drawing.Font>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontChangeStrikeout">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeStrikeout (System.Drawing.Font CurrentFont, bool Strikeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeStrikeout(class System.Drawing.Font CurrentFont, bool Strikeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeStrikeout(System.Drawing.Font,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeStrikeout (CurrentFont As Font, Strikeout As Boolean) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeStrikeout(System::Drawing::Font ^ CurrentFont, bool Strikeout);" />
      <MemberSignature Language="F#" Value="static member FontChangeStrikeout : System.Drawing.Font * bool -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeStrikeout (CurrentFont, Strikeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="Strikeout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="Strikeout">
          <see langword="true" />, um das <see cref="F:System.Drawing.FontStyle.Strikeout" />-Stilbit festzulegen, andernfalls <see langword="false" />.</param>
        <summary>Ändert das <see cref="F:System.Drawing.FontStyle.Strikeout" />-Stilbit für eine Schriftart.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" />, auf den das neue Format angewendet wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Schriftschnitte angewendet, indem Sie Eigenschaften festlegen; in Visual Basic-Schriftart Stile angewendet werden, mithilfe einer <xref:System.Drawing.FontStyle> Enumeration. Diese Funktion wird von den Upgradetools verwendet, um die Visual Basic 6.0-Eigenschaften in die neuen Enumerationen zu übersetzen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontChangeUnderline">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FontChangeUnderline (System.Drawing.Font CurrentFont, bool Underline);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font FontChangeUnderline(class System.Drawing.Font CurrentFont, bool Underline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeUnderline(System.Drawing.Font,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontChangeUnderline (CurrentFont As Font, Underline As Boolean) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FontChangeUnderline(System::Drawing::Font ^ CurrentFont, bool Underline);" />
      <MemberSignature Language="F#" Value="static member FontChangeUnderline : System.Drawing.Font * bool -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontChangeUnderline (CurrentFont, Underline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CurrentFont" Type="System.Drawing.Font" />
        <Parameter Name="Underline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="CurrentFont">Ein <see cref="T:System.Drawing.Font" />.</param>
        <param name="Underline">
          <see langword="true" />, um das <see cref="F:System.Drawing.FontStyle.Underline" />-Stilbit festzulegen, andernfalls <see langword="false" />.</param>
        <summary>Ändert das <see cref="F:System.Drawing.FontStyle.Underline" />-Stilbit für eine Schriftart.</summary>
        <returns>Ein <see cref="T:System.Drawing.Font" />, auf den das neue Format angewendet wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Schriftschnitte angewendet, indem Sie Eigenschaften festlegen; in Visual Basic-Schriftart Stile angewendet werden, mithilfe einer <xref:System.Drawing.FontStyle> Enumeration. Diese Funktion wird von den Upgradetools verwendet, um die Visual Basic 6.0-Eigenschaften in die neuen Enumerationen zu übersetzen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontToIFont">
      <MemberSignature Language="C#" Value="public static object FontToIFont (System.Drawing.Font fnt);" />
      <MemberSignature Language="ILAsm" Value=".method public static object FontToIFont(class System.Drawing.Font fnt) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FontToIFont(System.Drawing.Font)" />
      <MemberSignature Language="VB.NET" Value="Public Function FontToIFont (fnt As Font) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ FontToIFont(System::Drawing::Font ^ fnt);" />
      <MemberSignature Language="F#" Value="static member FontToIFont : System.Drawing.Font -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FontToIFont fnt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fnt" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="fnt">Die zu konvertierende <see cref="T:System.Drawing.Font" />.</param>
        <summary>Konvertiert einen <see cref="T:System.Drawing.Font" /> in ein <see langword="stdFont" />-Objekt in Visual Basic 6.0.</summary>
        <returns>Ein <see langword="stdFont" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `stdFont` Objekt wurde der COM-basierten und hat keine Entsprechung in Visual Basic. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet eine <xref:System.Drawing.Font> und ein `stdFont` beim Projektupgrade.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = 1, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Format(System.Object,System.String,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;, Optional DayOfWeek As FirstDayOfWeek = 1, Optional WeekOfYear As FirstWeekOfYear = 1) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Format (Expression, Style, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Expression">Der zu konvertierende <see cref="T:System.Object" />-Ausdruck.</param>
        <param name="Style">Dies ist optional. Ein <see cref="T:System.String" />, der ein Datumsformat darstellt.</param>
        <param name="DayOfWeek">Dies ist optional. Eine <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration.</param>
        <param name="WeekOfYear">Dies ist optional. Eine <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration.</param>
        <summary>Konvertiert die <see langword="Format" />-Funktion in Visual Basic 6.0, damit sie mit Visual Basic kompatibel ist.</summary>
        <returns>Ein <see cref="T:System.String" /> mit den formatierten Daten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Format` konnte die LN-Funktion auf einem `Variant` -Datentyp; in Visual Basic die `Variant` -Datentyp nicht mehr vorhanden ist. Diese Funktion wird von den Upgradetools konvertiert eine `Variant` formatierte mithilfe der `Format` Funktion in einer common Language Runtime-kompatiblen Typ.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPixelsUserHeight">
      <MemberSignature Language="C#" Value="public static double FromPixelsUserHeight (double Height, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FromPixelsUserHeight(float64 Height, float64 ScaleHeight, int32 OriginalHeightInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserHeight(System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromPixelsUserHeight (Height As Double, ScaleHeight As Double, OriginalHeightInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double FromPixelsUserHeight(double Height, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="F#" Value="static member FromPixelsUserHeight : double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserHeight (Height, ScaleHeight, OriginalHeightInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Height" Type="System.Double" />
        <Parameter Name="ScaleHeight" Type="System.Double" />
        <Parameter Name="OriginalHeightInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Height">Ein <see cref="T:System.Double" />, der die Höhe darstellt.</param>
        <param name="ScaleHeight">Ein <see cref="T:System.Double" />, der die <see langword="ScaleHeight" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalHeightInPixels">Ein <see langword="Integer" />, der die Höhe in Pixel darstellt.</param>
        <summary>Konvertiert ein Pixelmaß in ein <see langword="ScaleHeight" />-Maß in Visual Basic 6.0.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleHeight" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPixelsUserWidth">
      <MemberSignature Language="C#" Value="public static double FromPixelsUserWidth (double Width, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FromPixelsUserWidth(float64 Width, float64 ScaleWidth, int32 OriginalWidthInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserWidth(System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromPixelsUserWidth (Width As Double, ScaleWidth As Double, OriginalWidthInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double FromPixelsUserWidth(double Width, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="F#" Value="static member FromPixelsUserWidth : double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserWidth (Width, ScaleWidth, OriginalWidthInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Width" Type="System.Double" />
        <Parameter Name="ScaleWidth" Type="System.Double" />
        <Parameter Name="OriginalWidthInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Width">Ein <see cref="T:System.Double" />, das die Breite darstellt.</param>
        <param name="ScaleWidth">Ein <see cref="T:System.Double" />, der die <see langword="ScaleWidth" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalWidthInPixels">Ein <see langword="Integer" />, der die Breite in Pixel darstellt.</param>
        <summary>Konvertiert ein Pixelmaß in ein <see langword="ScaleWidth" />-Maß in Visual Basic 6.0.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleWidth" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPixelsUserX">
      <MemberSignature Language="C#" Value="public static double FromPixelsUserX (double X, double ScaleLeft, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FromPixelsUserX(float64 X, float64 ScaleLeft, float64 ScaleWidth, int32 OriginalWidthInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserX(System.Double,System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromPixelsUserX (X As Double, ScaleLeft As Double, ScaleWidth As Double, OriginalWidthInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double FromPixelsUserX(double X, double ScaleLeft, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="F#" Value="static member FromPixelsUserX : double * double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserX (X, ScaleLeft, ScaleWidth, OriginalWidthInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="System.Double" />
        <Parameter Name="ScaleLeft" Type="System.Double" />
        <Parameter Name="ScaleWidth" Type="System.Double" />
        <Parameter Name="OriginalWidthInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="X">Ein <see cref="T:System.Double" />-Wert, der die X-Koordinate darstellt.</param>
        <param name="ScaleLeft">Ein <see cref="T:System.Double" />, der die <see langword="ScaleLeft" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="ScaleWidth">Ein <see cref="T:System.Double" />, der die <see langword="ScaleWidth" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalWidthInPixels">Ein <see langword="Integer" />, der die Breite in Pixel darstellt.</param>
        <summary>Konvertiert ein Pixelmaß in ein <see langword="ScaleLeft" />-Maß in Visual Basic 6.0.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleLeft" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPixelsUserY">
      <MemberSignature Language="C#" Value="public static double FromPixelsUserY (double Y, double ScaleTop, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FromPixelsUserY(float64 Y, float64 ScaleTop, float64 ScaleHeight, int32 OriginalHeightInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserY(System.Double,System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromPixelsUserY (Y As Double, ScaleTop As Double, ScaleHeight As Double, OriginalHeightInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double FromPixelsUserY(double Y, double ScaleTop, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="F#" Value="static member FromPixelsUserY : double * double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsUserY (Y, ScaleTop, ScaleHeight, OriginalHeightInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Y" Type="System.Double" />
        <Parameter Name="ScaleTop" Type="System.Double" />
        <Parameter Name="ScaleHeight" Type="System.Double" />
        <Parameter Name="OriginalHeightInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Y">Ein <see cref="T:System.Double" />-Wert, der die X-Koordinate darstellt.</param>
        <param name="ScaleTop">Ein <see cref="T:System.Double" />, der die <see langword="ScaleTop" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="ScaleHeight">Ein <see cref="T:System.Double" />, der die <see langword="ScaleHeight" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalHeightInPixels">Ein <see langword="Integer" />, der die Höhe in Pixel darstellt.</param>
        <summary>Konvertiert ein Pixelmaß in ein <see langword="ScaleTop" />-Maß in Visual Basic 6.0.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleTop" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPixelsX">
      <MemberSignature Language="C#" Value="public static double FromPixelsX (double X, Microsoft.VisualBasic.Compatibility.VB6.ScaleMode ToScale);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FromPixelsX(float64 X, valuetype Microsoft.VisualBasic.Compatibility.VB6.ScaleMode ToScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsX(System.Double,Microsoft.VisualBasic.Compatibility.VB6.ScaleMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromPixelsX (X As Double, ToScale As ScaleMode) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double FromPixelsX(double X, Microsoft::VisualBasic::Compatibility::VB6::ScaleMode ToScale);" />
      <MemberSignature Language="F#" Value="static member FromPixelsX : double * Microsoft.VisualBasic.Compatibility.VB6.ScaleMode -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsX (X, ToScale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="System.Double" />
        <Parameter Name="ToScale" Type="Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />
      </Parameters>
      <Docs>
        <param name="X">Ein <see cref="T:System.Double" />, der die X-Koordinate in Pixel darstellt.</param>
        <param name="ToScale">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />-Enumeration, die den <see langword="ScaleMode" /> in Visual Basic 6.0 darstellt, in den konvertiert werden soll.</param>
        <summary>Konvertiert ein Pixelmaß für einen bestimmten <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" /> in ein Maß in Visual Basic 6.0.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit dem Visual Basic 6.0-Wert für den angegebenen <see langword="ScaleMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPixelsY">
      <MemberSignature Language="C#" Value="public static double FromPixelsY (double Y, Microsoft.VisualBasic.Compatibility.VB6.ScaleMode ToScale);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FromPixelsY(float64 Y, valuetype Microsoft.VisualBasic.Compatibility.VB6.ScaleMode ToScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsY(System.Double,Microsoft.VisualBasic.Compatibility.VB6.ScaleMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromPixelsY (Y As Double, ToScale As ScaleMode) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double FromPixelsY(double Y, Microsoft::VisualBasic::Compatibility::VB6::ScaleMode ToScale);" />
      <MemberSignature Language="F#" Value="static member FromPixelsY : double * Microsoft.VisualBasic.Compatibility.VB6.ScaleMode -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.FromPixelsY (Y, ToScale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Y" Type="System.Double" />
        <Parameter Name="ToScale" Type="Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />
      </Parameters>
      <Docs>
        <param name="Y">Ein <see cref="T:System.Double" />, der die Y-Koordinate in Pixel darstellt.</param>
        <param name="ToScale">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />-Enumeration, die den <see langword="ScaleMode" /> in Visual Basic 6.0 darstellt, in den konvertiert werden soll.</param>
        <summary>Konvertiert ein Pixelmaß für einen bestimmten <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" /> in ein Maß in Visual Basic 6.0.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit dem Visual Basic 6.0-Wert für den angegebenen <see langword="ScaleMode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActiveControl">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control GetActiveControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Windows.Forms.Control GetActiveControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetActiveControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetActiveControl () As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ GetActiveControl();" />
      <MemberSignature Language="F#" Value="static member GetActiveControl : unit -&gt; System.Windows.Forms.Control" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetActiveControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das Steuerelement ab, das gegenwärtig den Fokus besitzt.</summary>
        <returns>Das Steuerelement, das gerade den Fokus besitzt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion wird von den Upgrade-Tools verwendet, ersetzen Sie die Visual Basic 6.0 `Screen.ActiveControl` Eigenschaft. Dies entspricht dem Aufrufen von <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> in Visual Basic.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCancel">
      <MemberSignature Language="C#" Value="public static bool GetCancel (System.Windows.Forms.Button btn);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GetCancel(class System.Windows.Forms.Button btn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetCancel(System.Windows.Forms.Button)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCancel (btn As Button) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetCancel(System::Windows::Forms::Button ^ btn);" />
      <MemberSignature Language="F#" Value="static member GetCancel : System.Windows.Forms.Button -&gt; bool" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetCancel btn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="btn" Type="System.Windows.Forms.Button" />
      </Parameters>
      <Docs>
        <param name="btn">Ein <see cref="T:System.Windows.Forms.Button" />-Steuerelement.</param>
        <summary>Ruft einen Wert ab, der angibt, ob es sich bei einem <see cref="T:System.Windows.Forms.Button" /> um die Schaltfläche zum Abbrechen in einem Formular handelt.</summary>
        <returns>
          <see langword="true" />, wenn es sich bei <paramref name="btn" /> um die Schaltfläche zum Abbrechen handelt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion ist die Entsprechung der Überprüfung der <xref:System.Windows.Forms.Form.CancelButton%2A> Eigenschaft von einem <xref:System.Windows.Forms.Form>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefault">
      <MemberSignature Language="C#" Value="public static bool GetDefault (System.Windows.Forms.Button btn);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GetDefault(class System.Windows.Forms.Button btn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetDefault(System.Windows.Forms.Button)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefault (btn As Button) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetDefault(System::Windows::Forms::Button ^ btn);" />
      <MemberSignature Language="F#" Value="static member GetDefault : System.Windows.Forms.Button -&gt; bool" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetDefault btn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="btn" Type="System.Windows.Forms.Button" />
      </Parameters>
      <Docs>
        <param name="btn">Ein <see cref="T:System.Windows.Forms.Button" />-Steuerelement.</param>
        <summary>Ruft einen Wert ab, mit dem angegeben wird, ob ein <see cref="T:System.Windows.Forms.Button" />-Steuerelement die Standardschaltfläche eines Formulars ist, oder legt ihn fest.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="btn" /> die Standardschaltfläche ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion ist die Entsprechung der Überprüfung der <xref:System.Windows.Forms.Form.AcceptButton%2A> Eigenschaft von einem <xref:System.Windows.Forms.Form>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEXEName">
      <MemberSignature Language="C#" Value="public static string GetEXEName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetEXEName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetEXEName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEXEName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetEXEName();" />
      <MemberSignature Language="F#" Value="static member GetEXEName : unit -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetEXEName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den Namen der ausführbaren Datei (.exe) für die aktuelle Anwendung ab.</summary>
        <returns>Ein <see cref="T:System.String" /> mit dem Namen ohne Dateinamenerweiterung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHInstance">
      <MemberSignature Language="C#" Value="public static IntPtr GetHInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public static native int GetHInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetHInstance" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHInstance () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHInstance();" />
      <MemberSignature Language="F#" Value="static member GetHInstance : unit -&gt; nativeint" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetHInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das Instanzhandle (HINSTANCE) für die aktuelle Anwendung ab.</summary>
        <returns>Ein <see cref="T:System.IntPtr" /> für die aktuelle Anwendungsinstanz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion ist das Äquivalent eines Aufrufs <xref:System.Runtime.InteropServices.Marshal.GetHINSTANCE%2A>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemData">
      <MemberSignature Language="C#" Value="public static int GetItemData (System.Windows.Forms.Control Control, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 GetItemData(class System.Windows.Forms.Control Control, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetItemData(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetItemData(System::Windows::Forms::Control ^ Control, int Index);" />
      <MemberSignature Language="F#" Value="static member GetItemData : System.Windows.Forms.Control * int -&gt; int" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetItemData (Control, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Windows.Forms.Control" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Control">Ein <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement oder <see cref="T:System.Windows.Forms.ComboBox" />-Steuerelement.</param>
        <param name="Index">Ein <see langword="Integer" />, der den Index von <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" /> darstellt.</param>
        <summary>Ruft einen einem <see cref="T:System.Windows.Forms.ListBox" />-Element oder <see cref="T:System.Windows.Forms.ComboBox" />-Element zugeordneten <see langword="Integer" /> ab.</summary>
        <returns>Die <see langword="Integer" />, die dem angegebenen <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `ItemData` -Eigenschaft für eine `ListBox` oder `ComboBox` Steuerelement zur Entwurfszeit festgelegt werden die **Eigenschaften** Fenster zuordnen ein `Integer` mit einer `ListBox` oder `ComboBox` Element. In Visual Basic die `ItemData` Eigenschaft nicht mehr vorhanden ist; die `GetItemData` und <xref:Microsoft.VisualBasic.Compatibility.VB6.Support.SetItemData%2A> Methoden können verwendet werden, zum Emulieren des Verhaltens von `ItemData`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemString">
      <MemberSignature Language="C#" Value="public static string GetItemString (System.Windows.Forms.Control Control, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetItemString(class System.Windows.Forms.Control Control, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetItemString(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetItemString(System::Windows::Forms::Control ^ Control, int Index);" />
      <MemberSignature Language="F#" Value="static member GetItemString : System.Windows.Forms.Control * int -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetItemString (Control, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Windows.Forms.Control" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Control">Ein <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement oder <see cref="T:System.Windows.Forms.ComboBox" />-Steuerelement.</param>
        <param name="Index">Ein <see langword="Integer" />, der den Index von <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" /> darstellt.</param>
        <summary>Ruft einen einem <see cref="T:System.String" />-Element oder <see cref="T:System.Windows.Forms.ListBox" />-Element zugeordneten <see cref="T:System.Windows.Forms.ComboBox" /> ab.</summary>
        <returns>Die <see cref="T:System.String" />, die dem angegebenen <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion wird von den Upgrade-Tools zum Emulieren der Visual Basic 6.0 verwendet `List` Eigenschaft. Verwenden Sie in Visual Basic die <xref:System.Windows.Forms.ComboBox.Items%2A> oder <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft stattdessen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPath">
      <MemberSignature Language="C#" Value="public static string GetPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.GetPath" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetPath();" />
      <MemberSignature Language="F#" Value="static member GetPath : unit -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.GetPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den aktuellen Pfad für die Anwendung ab.</summary>
        <returns>Ein <see cref="T:System.String" /> mit dem Pfad der gerade ausgeführten Assembly.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconToIPicture">
      <MemberSignature Language="C#" Value="public static object IconToIPicture (System.Drawing.Icon ico);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IconToIPicture(class System.Drawing.Icon ico) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.IconToIPicture(System.Drawing.Icon)" />
      <MemberSignature Language="VB.NET" Value="Public Function IconToIPicture (ico As Icon) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IconToIPicture(System::Drawing::Icon ^ ico);" />
      <MemberSignature Language="F#" Value="static member IconToIPicture : System.Drawing.Icon -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.IconToIPicture ico" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ico" Type="System.Drawing.Icon" />
      </Parameters>
      <Docs>
        <param name="ico">Ein <see cref="T:System.Drawing.Icon" />.</param>
        <summary>Ruft ein <see langword="IPicture" />-OLE-Objekt für ein angegebenes <see cref="T:System.Drawing.Icon" /> ab.</summary>
        <returns>Ein <see cref="T:System.Object" />, das das <see langword="IPicture" />-OLE-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, eine OLE `IPicture` Objekt kann verwendet werden, um ein Symbol; Geben Sie in Visual Basic die OLE `IPicture` Format wird nicht mehr unterstützt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet ein `IPicture` und ein <xref:System.Drawing.Icon>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFontToFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font IFontToFont (object objFnt);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Font IFontToFont(object objFnt) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.IFontToFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IFontToFont (objFnt As Object) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ IFontToFont(System::Object ^ objFnt);" />
      <MemberSignature Language="F#" Value="static member IFontToFont : obj -&gt; System.Drawing.Font" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.IFontToFont objFnt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objFnt" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objFnt">Ein <see cref="T:System.Object" />-Objekt, das einen Visual Basic 6.0-<see langword="stdFont" /> enthält.</param>
        <summary>Konvertiert ein <see langword="stdFont" />-Objekt in Visual Basic 6.0 in einen <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Ein angegebenes zu konvertierendes Objekt</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `stdFont` Objekt wurde der COM-basierten und hat keine Entsprechung in Visual Basic. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet eine <xref:System.Drawing.Font> und ein `stdFont` beim Projektupgrade.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageToIPicture">
      <MemberSignature Language="C#" Value="public static object ImageToIPicture (System.Drawing.Image img);" />
      <MemberSignature Language="ILAsm" Value=".method public static object ImageToIPicture(class System.Drawing.Image img) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ImageToIPicture(System.Drawing.Image)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImageToIPicture (img As Image) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ImageToIPicture(System::Drawing::Image ^ img);" />
      <MemberSignature Language="F#" Value="static member ImageToIPicture : System.Drawing.Image -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ImageToIPicture img" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="img" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="img">Ein <see cref="T:System.Drawing.Image" />.</param>
        <summary>Ruft ein <see langword="IPicture" />-OLE-Objekt für ein angegebenes <see cref="T:System.Drawing.Image" /> ab.</summary>
        <returns>Ein <see cref="T:System.Object" />, das das <see langword="IPicture" />-OLE-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, eine OLE `IPicture` Objekt kann verwendet werden, um ein Bild; angeben in Visual Basic die OLE `IPicture` Format wird nicht mehr unterstützt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet ein `IPicture` und ein <xref:System.Drawing.Image>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageToIPictureDisp">
      <MemberSignature Language="C#" Value="public static object ImageToIPictureDisp (System.Drawing.Image img);" />
      <MemberSignature Language="ILAsm" Value=".method public static object ImageToIPictureDisp(class System.Drawing.Image img) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ImageToIPictureDisp(System.Drawing.Image)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImageToIPictureDisp (img As Image) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ImageToIPictureDisp(System::Drawing::Image ^ img);" />
      <MemberSignature Language="F#" Value="static member ImageToIPictureDisp : System.Drawing.Image -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ImageToIPictureDisp img" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="img" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="img">Ein <see cref="T:System.Drawing.Image" />.</param>
        <summary>Ruft ein <see langword="IPictureDisp" />-OLE-Objekt für ein angegebenes <see cref="T:System.Drawing.Image" /> ab.</summary>
        <returns>Ein <see cref="T:System.Object" />, das das <see langword="IPictureDisp" />-OLE-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, eine OLE `IPictureDisp` Objekt kann verwendet werden, um ein Bild; angeben in Visual Basic die OLE `IPicture` Format wird nicht mehr unterstützt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet ein `IPicture` und ein <xref:System.Drawing.Image>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Imp">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Führt eine logische Implikation zweier Ausdrücke durch.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Imp">
      <MemberSignature Language="C#" Value="public static bool Imp (bool a, bool b);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool Imp(bool a, bool b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Imp(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imp (a As Boolean, b As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Imp(bool a, bool b);" />
      <MemberSignature Language="F#" Value="static member Imp : bool * bool -&gt; bool" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Imp (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Boolean" />
        <Parameter Name="b" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="a">Ein <see cref="T:System.Boolean" />-Ausdruck.</param>
        <param name="b">Ein <see cref="T:System.Boolean" />-Ausdruck.</param>
        <summary>Führt eine logische Implikation zweier <see cref="T:System.Boolean" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Boolean" />, der das Ergebnis enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Imp` Operator wird nicht mehr in Visual Basic unterstützt. Diese Funktion wird von den Upgradetools verwendet, ersetzen die `Imp` Operator beim Projektupgrade.  
  
 Verwenden Sie in Visual Basic `Not` und `XOr` anstelle von `Imp`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imp">
      <MemberSignature Language="C#" Value="public static byte Imp (byte a, byte b);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int8 Imp(unsigned int8 a, unsigned int8 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Imp(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imp (a As Byte, b As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Imp(System::Byte a, System::Byte b);" />
      <MemberSignature Language="F#" Value="static member Imp : byte * byte -&gt; byte" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Imp (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Byte" />
        <Parameter Name="b" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="a">Ein <see cref="T:System.Byte" />-Ausdruck.</param>
        <param name="b">Ein <see cref="T:System.Byte" />-Ausdruck.</param>
        <summary>Führt eine logische Implikation zweier <see cref="T:System.Byte" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Byte" />, der das Ergebnis enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Imp` Operator wird nicht mehr in Visual Basic unterstützt. Diese Funktion wird von den Upgradetools verwendet, ersetzen die `Imp` Operator beim Projektupgrade.  
  
 Verwenden Sie in Visual Basic `Not` und `XOr` ersetzen `Imp`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imp">
      <MemberSignature Language="C#" Value="public static short Imp (short a, short b);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Imp(int16 a, int16 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Imp(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imp (a As Short, b As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Imp(short a, short b);" />
      <MemberSignature Language="F#" Value="static member Imp : int16 * int16 -&gt; int16" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Imp (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int16" />
        <Parameter Name="b" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="a">Ein <see langword="Short" />-Ausdruck.</param>
        <param name="b">Ein <see langword="Short" />-Ausdruck.</param>
        <summary>Führt eine logische Implikation zweier <see cref="T:System.Int16" />-Ausdrücke durch.</summary>
        <returns>Ein <see langword="Short" />, der das Ergebnis enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Imp` Operator wird nicht mehr in Visual Basic unterstützt. Diese Funktion wird von den Upgradetools verwendet, ersetzen die `Imp` Operator beim Projektupgrade.  
  
 Verwenden Sie in Visual Basic `Not` und `XOr` ersetzen `Imp`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imp">
      <MemberSignature Language="C#" Value="public static int Imp (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Imp(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Imp(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imp (a As Integer, b As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Imp(int a, int b);" />
      <MemberSignature Language="F#" Value="static member Imp : int * int -&gt; int" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Imp (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">Ein <see langword="Integer" />-Ausdruck.</param>
        <param name="b">Ein <see langword="Integer" />-Ausdruck.</param>
        <summary>Führt eine logische Implikation zweier <see cref="T:System.Int32" />-Ausdrücke durch.</summary>
        <returns>Ein <see langword="Integer" />, der das Ergebnis enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Imp` Operator wird nicht mehr in Visual Basic unterstützt. Diese Funktion wird von den Upgradetools verwendet, ersetzen die `Imp` Operator beim Projektupgrade.  
  
 Verwenden Sie in Visual Basic `Not` und `XOr` ersetzen `Imp`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imp">
      <MemberSignature Language="C#" Value="public static long Imp (long a, long b);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Imp(int64 a, int64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Imp(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imp (a As Long, b As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Imp(long a, long b);" />
      <MemberSignature Language="F#" Value="static member Imp : int64 * int64 -&gt; int64" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Imp (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">Ein <see langword="Long" />-Ausdruck.</param>
        <param name="b">Ein <see langword="Long" />-Ausdruck.</param>
        <summary>Führt eine logische Implikation zweier <see cref="T:System.Int64" />-Ausdrücke durch.</summary>
        <returns>Ein <see langword="Long" />, der das Ergebnis enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Imp` Operator wird nicht mehr in Visual Basic unterstützt. Diese Funktion wird von den Upgradetools verwendet, ersetzen die `Imp` Operator beim Projektupgrade.  
  
 Verwenden Sie in Visual Basic `Not` und `XOr` ersetzen `Imp`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imp">
      <MemberSignature Language="C#" Value="public static object Imp (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Imp(object a, object b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.Imp(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imp (a As Object, b As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Imp(System::Object ^ a, System::Object ^ b);" />
      <MemberSignature Language="F#" Value="static member Imp : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.Imp (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a">Ein <see cref="T:System.Object" />-Ausdruck.</param>
        <param name="b">Ein <see cref="T:System.Object" />-Ausdruck.</param>
        <summary>Führt eine logische Implikation zweier <see cref="T:System.Object" />-Ausdrücke durch.</summary>
        <returns>Ein <see cref="T:System.Object" />, der das Ergebnis enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 `Imp` Operator wird nicht mehr in Visual Basic unterstützt. Diese Funktion wird von den Upgradetools verwendet, ersetzen die `Imp` Operator beim Projektupgrade. Während des Upgrades ist der Variant-Datentyp auf aktualisiert <xref:System.Object>.  
  
 Verwenden Sie in Visual Basic `Not` und `XOr` ersetzen `Imp`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPictureDispToImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image IPictureDispToImage (object pict);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Image IPictureDispToImage(object pict) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.IPictureDispToImage(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPictureDispToImage (pict As Object) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ IPictureDispToImage(System::Object ^ pict);" />
      <MemberSignature Language="F#" Value="static member IPictureDispToImage : obj -&gt; System.Drawing.Image" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.IPictureDispToImage pict" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pict" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pict">Ein <see langword="IPictureDisp" />-OLE-Objekt.</param>
        <summary>Ruft ein <see cref="T:System.Drawing.Image" /> für ein bestimmtes OLE <see langword="IPictureDisp" /> Objekt ab.</summary>
        <returns>Bildobjekt</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, eine OLE `IPictureDisp` Objekt kann verwendet werden, um ein Bild; angeben in Visual Basic die OLE `IPicture` Format wird nicht mehr unterstützt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet ein `IPictureDisp` und ein <xref:System.Drawing.Image>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPictureToImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Image IPictureToImage (object pict);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Drawing.Image IPictureToImage(object pict) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.IPictureToImage(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPictureToImage (pict As Object) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Image ^ IPictureToImage(System::Object ^ pict);" />
      <MemberSignature Language="F#" Value="static member IPictureToImage : obj -&gt; System.Drawing.Image" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.IPictureToImage pict" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pict" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pict">Ein <see langword="IPicture" />-OLE-Objekt.</param>
        <summary>Ruft ein <see cref="T:System.Drawing.Image" /> für ein bestimmtes OLE <see langword="IPicture" /> Objekt ab.</summary>
        <returns>Ein konvertiertes Objekt zum Bild.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, eine OLE `IPicture` Objekt kann verwendet werden, um ein Bild; angeben in Visual Basic die OLE `IPicture` Format wird nicht mehr unterstützt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen verwendet ein `IPicture` und ein <xref:System.Drawing.Image>.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadResData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lädt Daten von mehreren möglichen Typen aus einer Ressourcendatei (.res) und gibt ein <see cref="T:System.Byte" />-Array zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadResData">
      <MemberSignature Language="C#" Value="public static object LoadResData (object ID, object restype);" />
      <MemberSignature Language="ILAsm" Value=".method public static object LoadResData(object ID, object restype) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResData(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadResData (ID As Object, restype As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ LoadResData(System::Object ^ ID, System::Object ^ restype);" />
      <MemberSignature Language="F#" Value="static member LoadResData : obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResData (ID, restype)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ID" Type="System.Object" />
        <Parameter Name="restype" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ID">Ein <see cref="T:System.Object" />, das die Daten in der Ressourcendatei angibt.</param>
        <param name="restype">Ein <see cref="T:System.Object" />, das den Ressourcentyp angibt.</param>
        <summary>Lädt Daten von mehreren möglichen Typen aus einer Ressourcendatei (.res).</summary>
        <returns>Ein <see cref="T:System.Object" />, das die Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurde internationale Versionen einer Anwendung erstellt, indem alle lokalisierbaren Informationen, z. B. Zeichenfolgen, in eine separate Ressourcendatei (res) für jede Sprache. Zur Laufzeit, gebietsschemaspezifische Ressourcen aus der Ressourcendatei durch Aufruf geladen wurden die `LoadResString`, `LoadResPicture`, und `LoadResData` Funktionen.  
  
 In Visual Basic-internationale Versionen einer Anwendung werden erstellt, durch Ändern der `Language` -Eigenschaft eines Formulars zur Entwurfszeit. Eine separate Ressourcendatei (.resx) wird für jedes ausgewählte Gebietsschema automatisch erstellt. Sie müssen nicht mehr Ressourcen explizit aus dem Code zu laden; Ressourcen werden automatisch basierend auf dem Gebietsschema des Benutzers geladen. Weitere Informationen finden Sie unter [Globalisieren von Windows Forms-Anwendungen](~/docs/framework/winforms/advanced/globalizing-windows-forms.md).  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadResData">
      <MemberSignature Language="C#" Value="public static object LoadResData (object ID, object restype, System.Globalization.CultureInfo Culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static object LoadResData(object ID, object restype, class System.Globalization.CultureInfo Culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResData(System.Object,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadResData (ID As Object, restype As Object, Culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ LoadResData(System::Object ^ ID, System::Object ^ restype, System::Globalization::CultureInfo ^ Culture);" />
      <MemberSignature Language="F#" Value="static member LoadResData : obj * obj * System.Globalization.CultureInfo -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResData (ID, restype, Culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ID" Type="System.Object" />
        <Parameter Name="restype" Type="System.Object" />
        <Parameter Name="Culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ID">Ein <see cref="T:System.Object" />, das die Daten in der Ressourcendatei angibt.</param>
        <param name="restype">Ein <see cref="T:System.Object" />, das den Ressourcentyp angibt.</param>
        <param name="Culture">Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das das Gebietsschema angibt.</param>
        <summary>Lädt Daten von mehreren möglichen Typen aus einer Ressourcendatei (.res) und gibt ein Gebietsschema an.</summary>
        <returns>Ein <see cref="T:System.Object" />, das die Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurde internationale Versionen einer Anwendung erstellt, indem alle lokalisierbaren Informationen, z. B. Zeichenfolgen, in eine separate Ressourcendatei (res) für jede Sprache. Zur Laufzeit, gebietsschemaspezifische Ressourcen aus der Ressourcendatei durch Aufruf geladen wurden die `LoadResString`, `LoadResPicture`, und `LoadResData` Funktionen.  
  
 In Visual Basic-internationale Versionen einer Anwendung werden erstellt, durch Ändern der `Language` -Eigenschaft eines Formulars zur Entwurfszeit. Eine separate Ressourcendatei (.resx) wird für jedes ausgewählte Gebietsschema automatisch erstellt. Sie müssen nicht mehr Ressourcen explizit aus dem Code zu laden; Ressourcen werden automatisch basierend auf dem Gebietsschema des Benutzers geladen. Weitere Informationen finden Sie unter [Globalisieren von Windows Forms-Anwendungen](~/docs/framework/winforms/advanced/globalizing-windows-forms.md).  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadResPicture">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lädt eine Bitmap, ein Symbol oder einen Cursor aus einer Ressourcendatei (.res).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadResPicture">
      <MemberSignature Language="C#" Value="public static object LoadResPicture (object ID, Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants restype);" />
      <MemberSignature Language="ILAsm" Value=".method public static object LoadResPicture(object ID, valuetype Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants restype) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResPicture(System.Object,Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadResPicture (ID As Object, restype As LoadResConstants) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ LoadResPicture(System::Object ^ ID, Microsoft::VisualBasic::Compatibility::VB6::LoadResConstants restype);" />
      <MemberSignature Language="F#" Value="static member LoadResPicture : obj * Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResPicture (ID, restype)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ID" Type="System.Object" />
        <Parameter Name="restype" Type="Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants" />
      </Parameters>
      <Docs>
        <param name="ID">Ein <see cref="T:System.Object" />, das die Daten in der Ressourcendatei angibt.</param>
        <param name="restype">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants" />-Enumeration, die den Ressourcentyp angibt.</param>
        <summary>Lädt eine Bitmap, ein Symbol oder einen Cursor aus einer Ressourcendatei (.res).</summary>
        <returns>Ein <see cref="T:System.Object" />, das die Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurde internationale Versionen einer Anwendung erstellt, indem alle lokalisierbaren Informationen, z. B. Zeichenfolgen, in eine separate Ressourcendatei (res) für jede Sprache. Zur Laufzeit, gebietsschemaspezifische Ressourcen aus der Ressourcendatei durch Aufruf geladen wurden die `LoadResString`, `LoadResPicture`, und `LoadResData` Funktionen.  
  
 In Visual Basic-internationale Versionen einer Anwendung werden erstellt, durch Ändern der `Language` -Eigenschaft eines Formulars zur Entwurfszeit. Eine separate Ressourcendatei (.resx) wird für jedes ausgewählte Gebietsschema automatisch erstellt. Sie müssen nicht mehr Ressourcen explizit aus dem Code zu laden; Ressourcen werden automatisch basierend auf dem Gebietsschema des Benutzers geladen. Weitere Informationen finden Sie unter [Globalisieren von Windows Forms-Anwendungen](~/docs/framework/winforms/advanced/globalizing-windows-forms.md).  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadResPicture">
      <MemberSignature Language="C#" Value="public static object LoadResPicture (object ID, Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants restype, System.Globalization.CultureInfo Culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static object LoadResPicture(object ID, valuetype Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants restype, class System.Globalization.CultureInfo Culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResPicture(System.Object,Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadResPicture (ID As Object, restype As LoadResConstants, Culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ LoadResPicture(System::Object ^ ID, Microsoft::VisualBasic::Compatibility::VB6::LoadResConstants restype, System::Globalization::CultureInfo ^ Culture);" />
      <MemberSignature Language="F#" Value="static member LoadResPicture : obj * Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants * System.Globalization.CultureInfo -&gt; obj" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResPicture (ID, restype, Culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ID" Type="System.Object" />
        <Parameter Name="restype" Type="Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants" />
        <Parameter Name="Culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ID">Ein <see cref="T:System.Object" />, das die Daten in der Ressourcendatei angibt.</param>
        <param name="restype">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.LoadResConstants" />-Enumeration, die den Ressourcentyp angibt.</param>
        <param name="Culture">Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das das Gebietsschema angibt.</param>
        <summary>Lädt eine Bitmap, ein Symbol oder einen Cursor aus einer Ressourcendatei (.res) und gibt ein Gebietsschema an.</summary>
        <returns>Ein <see cref="T:System.Object" />, das die Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurde internationale Versionen einer Anwendung erstellt, indem alle lokalisierbaren Informationen, z. B. Zeichenfolgen, in eine separate Ressourcendatei (res) für jede Sprache. Zur Laufzeit, gebietsschemaspezifische Ressourcen aus der Ressourcendatei durch Aufruf geladen wurden die `LoadResString`, `LoadResPicture`, und `LoadResData` Funktionen.  
  
 In Visual Basic-internationale Versionen einer Anwendung werden erstellt, durch Ändern der `Language` -Eigenschaft eines Formulars zur Entwurfszeit. Eine separate Ressourcendatei (.resx) wird für jedes ausgewählte Gebietsschema automatisch erstellt. Sie müssen nicht mehr Ressourcen explizit aus dem Code zu laden; Ressourcen werden automatisch basierend auf dem Gebietsschema des Benutzers geladen. Weitere Informationen finden Sie unter [Globalisieren von Windows Forms-Anwendungen](~/docs/framework/winforms/advanced/globalizing-windows-forms.md).  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadResString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lädt eine Zeichenfolge aus einer Ressourcendatei (.res).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadResString">
      <MemberSignature Language="C#" Value="public static string LoadResString (int ID);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LoadResString(int32 ID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadResString (ID As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LoadResString(int ID);" />
      <MemberSignature Language="F#" Value="static member LoadResString : int -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResString ID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ID">Ein <see cref="T:System.Object" />, das die Daten in der Ressourcendatei angibt.</param>
        <summary>Lädt eine Zeichenfolge aus einer Ressourcendatei (.res).</summary>
        <returns>Ein <see cref="T:System.String" />, der die Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurde internationale Versionen einer Anwendung erstellt, indem alle lokalisierbaren Informationen, z. B. Zeichenfolgen, in eine separate Ressourcendatei (res) für jede Sprache. Zur Laufzeit, gebietsschemaspezifische Ressourcen aus der Ressourcendatei durch Aufruf geladen wurden die `LoadResString`, `LoadResPicture`, und `LoadResData` Funktionen.  
  
 In Visual Basic-internationale Versionen einer Anwendung werden erstellt, durch Ändern der `Language` -Eigenschaft eines Formulars zur Entwurfszeit. Eine separate Ressourcendatei (.resx) wird für jedes ausgewählte Gebietsschema automatisch erstellt. Sie müssen nicht mehr Ressourcen explizit aus dem Code zu laden; Ressourcen werden automatisch basierend auf dem Gebietsschema des Benutzers geladen. Weitere Informationen finden Sie unter [Globalisieren von Windows Forms-Anwendungen](~/docs/framework/winforms/advanced/globalizing-windows-forms.md).  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadResString">
      <MemberSignature Language="C#" Value="public static string LoadResString (int ID, System.Globalization.CultureInfo Culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LoadResString(int32 ID, class System.Globalization.CultureInfo Culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResString(System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadResString (ID As Integer, Culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LoadResString(int ID, System::Globalization::CultureInfo ^ Culture);" />
      <MemberSignature Language="F#" Value="static member LoadResString : int * System.Globalization.CultureInfo -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.LoadResString (ID, Culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ID" Type="System.Int32" />
        <Parameter Name="Culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ID">Ein <see cref="T:System.Object" />, das die Daten in der Ressourcendatei angibt.</param>
        <param name="Culture">Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das das Gebietsschema angibt.</param>
        <summary>Lädt eine Zeichenfolge aus einer Ressourcendatei (.res) und gibt ein Gebietsschema an.</summary>
        <returns>Ein <see cref="T:System.String" />, der die Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurde internationale Versionen einer Anwendung erstellt, indem alle lokalisierbaren Informationen, z. B. Zeichenfolgen, in eine separate Ressourcendatei (res) für jede Sprache. Zur Laufzeit, gebietsschemaspezifische Ressourcen aus der Ressourcendatei durch Aufruf geladen wurden die `LoadResString`, `LoadResPicture`, und `LoadResData` Funktionen.  
  
 In Visual Basic-internationale Versionen einer Anwendung werden erstellt, durch Ändern der `Language` -Eigenschaft eines Formulars zur Entwurfszeit. Eine separate Ressourcendatei (.resx) wird für jedes ausgewählte Gebietsschema automatisch erstellt. Sie müssen nicht mehr Ressourcen explizit aus dem Code zu laden; Ressourcen werden automatisch basierend auf dem Gebietsschema des Benutzers geladen. Weitere Informationen finden Sie unter [Globalisieren von Windows Forms-Anwendungen](~/docs/framework/winforms/advanced/globalizing-windows-forms.md).  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsToTwipsX">
      <MemberSignature Language="C#" Value="public static double PixelsToTwipsX (double X);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PixelsToTwipsX(float64 X) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.PixelsToTwipsX(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PixelsToTwipsX (X As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double PixelsToTwipsX(double X);" />
      <MemberSignature Language="F#" Value="static member PixelsToTwipsX : double -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.PixelsToTwipsX X" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="X">Ein <see langword="Double" /> mit der zu konvertierenden X-Koordinate.</param>
        <summary>Konvertiert eine X-Koordinate aus Pixel in Twips.</summary>
        <returns>Ein <see langword="Double" />, der die X-Koordinate in Twips enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Koordinaten in Twips ausgedrückt; in Visual Basic werden diese in Pixeln ausgedrückt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen zwei Koordinatensysteme verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsToTwipsY">
      <MemberSignature Language="C#" Value="public static double PixelsToTwipsY (double Y);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PixelsToTwipsY(float64 Y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.PixelsToTwipsY(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PixelsToTwipsY (Y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double PixelsToTwipsY(double Y);" />
      <MemberSignature Language="F#" Value="static member PixelsToTwipsY : double -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.PixelsToTwipsY Y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Y">Ein <see langword="Double" /> mit der zu konvertierenden Y-Koordinate.</param>
        <summary>Konvertiert eine Y-Koordinate aus Pixel in Twips.</summary>
        <returns>Ein <see langword="Double" />, das die Y-Koordinate in Twips enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Koordinaten in Twips ausgedrückt; in Visual Basic werden diese in Pixeln ausgedrückt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen zwei Koordinatensysteme verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public static void SendKeys (string Keys, bool Wait = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SendKeys(string Keys, bool Wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (Keys As String, Optional Wait As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member SendKeys : string * bool -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SendKeys (Keys, Wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Keys" Type="System.String" />
        <Parameter Name="Wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Keys">Ein <see cref="T:System.String" /> mit den Schlüsselwerten.</param>
        <param name="Wait">
          <see langword="true" />, um Tastaturanschläge zu verarbeiten, bevor die Kontrolle an die Prozedur zurückgegeben wird; andernfalls <see langword="false" />.</param>
        <summary>Sendet einen oder mehrere Tastaturanschläge wie bei der Eingabe über die Tastatur an das aktive Fenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion wird von den Upgrade-Tools zum Emulieren der Visual Basic 6.0 verwendet `SendKeys` Methode. Verwenden Sie in Visual Basic die `My.Computer.Keyboard.SendKeys` Methode stattdessen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCancel">
      <MemberSignature Language="C#" Value="public static void SetCancel (System.Windows.Forms.Button btn, bool Cancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetCancel(class System.Windows.Forms.Button btn, bool Cancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SetCancel(System.Windows.Forms.Button,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCancel (btn As Button, Cancel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCancel(System::Windows::Forms::Button ^ btn, bool Cancel);" />
      <MemberSignature Language="F#" Value="static member SetCancel : System.Windows.Forms.Button * bool -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SetCancel (btn, Cancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="btn" Type="System.Windows.Forms.Button" />
        <Parameter Name="Cancel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="btn">Ein <see cref="T:System.Windows.Forms.Button" />.</param>
        <param name="Cancel">
          <see langword="true" />, wenn die <see langword="CommandButton" />-Eigenschaft des <see langword="Cancel" />-Steuerelements in Visual Basic 6.0 <see langword="true" /> ist, andernfalls <see langword="false" />.</param>
        <summary>Legt die <see cref="P:System.Windows.Forms.Form.CancelButton" />-Eigenschaft eines <see cref="T:System.Windows.Forms.Form" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, der boolesche Wert `Default` und `Cancel` Eigenschaften einer `CommandButton` Steuerelement bestimmen, ob das Steuerelement auf die EINGABETASTE oder ESC Schlüssel bzw. reagiert. In Visual Basic die <xref:System.Windows.Forms.Button> nicht mehr-Steuerelement `Default` oder `Cancel` Eigenschaften. Die <xref:System.Windows.Forms.Form> Objekt hat <xref:System.Windows.Forms.Form.AcceptButton%2A> und <xref:System.Windows.Forms.Form.CancelButton%2A> Eigenschaften, die die gleiche Funktionalität bereitstellen; diese Eigenschaften den Namen eines annehmen einer <xref:System.Windows.Forms.Button> Steuerelement als Argument.  
  
 Diese Funktion wird von den Upgradetools festzulegende verwendet die <xref:System.Windows.Forms.Form.CancelButton%2A> Eigenschaft eine <xref:System.Windows.Forms.Form>festzulegen, auf die `Cancel` Eigenschaft von einer aktualisierten Visual Basic 6.0 `CommandButton` Steuerelement.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefault">
      <MemberSignature Language="C#" Value="public static void SetDefault (System.Windows.Forms.Button btn, bool Default);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetDefault(class System.Windows.Forms.Button btn, bool Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SetDefault(System.Windows.Forms.Button,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDefault (btn As Button, Default As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetDefault(System::Windows::Forms::Button ^ btn, bool Default);" />
      <MemberSignature Language="F#" Value="static member SetDefault : System.Windows.Forms.Button * bool -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SetDefault (btn, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="btn" Type="System.Windows.Forms.Button" />
        <Parameter Name="Default" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="btn">Ein <see cref="T:System.Windows.Forms.Button" />.</param>
        <param name="Default">
          <see langword="true" />, wenn die <see langword="CommandButton" />-Eigenschaft des <see langword="Default" />-Steuerelements in Visual Basic 6.0 <see langword="true" /> ist, andernfalls <see langword="false" />.</param>
        <summary>Legt die <see cref="P:System.Windows.Forms.Form.AcceptButton" />-Eigenschaft eines <see cref="T:System.Windows.Forms.Form" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0, der boolesche Wert `Default` und `Cancel` Eigenschaften einer `CommandButton` Steuerelement bestimmen, ob das Steuerelement auf die EINGABETASTE oder ESC Schlüssel bzw. reagiert. In Visual Basic die <xref:System.Windows.Forms.Button> nicht mehr-Steuerelement `Default` oder `Cancel` Eigenschaften. Die <xref:System.Windows.Forms.Form> Objekt hat <xref:System.Windows.Forms.Form.AcceptButton%2A> und <xref:System.Windows.Forms.Form.CancelButton%2A> Eigenschaften, die die gleiche Funktionalität bereitstellen; diese Eigenschaften den Namen eines annehmen einer <xref:System.Windows.Forms.Button> Steuerelement als Argument.  
  
 Diese Funktion wird von den Upgradetools festzulegende verwendet die <xref:System.Windows.Forms.Form.AcceptButton%2A> Eigenschaft eine <xref:System.Windows.Forms.Form>festzulegen, auf die `Default` Eigenschaft von einer aktualisierten Visual Basic 6.0 `CommandButton` Steuerelement.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemData">
      <MemberSignature Language="C#" Value="public static void SetItemData (System.Windows.Forms.Control Control, int Index, int ItemData);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetItemData(class System.Windows.Forms.Control Control, int32 Index, int32 ItemData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SetItemData(System.Windows.Forms.Control,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetItemData(System::Windows::Forms::Control ^ Control, int Index, int ItemData);" />
      <MemberSignature Language="F#" Value="static member SetItemData : System.Windows.Forms.Control * int * int -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SetItemData (Control, Index, ItemData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Windows.Forms.Control" />
        <Parameter Name="Index" Type="System.Int32" />
        <Parameter Name="ItemData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Control">Ein <see cref="T:System.Windows.Forms.ListBox" />-Steuerelement oder <see cref="T:System.Windows.Forms.ComboBox" />-Steuerelement.</param>
        <param name="Index">Die <see langword="Index" /> des <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" />.</param>
        <param name="ItemData">Ein <see langword="Integer" />, der der <see cref="F:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem.ItemData" />-Eigenschaft zugewiesen werden soll.</param>
        <summary>Legt die <see cref="F:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem.ItemData" />-Eigenschaft für ein <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `ItemData` -Eigenschaft für eine `ListBox` oder `ComboBox` Steuerelement zur Entwurfszeit festgelegt werden die **Eigenschaften** Fenster zuordnen ein `Integer` mit einer `ListBox` oder `ComboBox` Element. In Visual Basic die `ItemData` Eigenschaft nicht mehr vorhanden ist; die <xref:Microsoft.VisualBasic.Compatibility.VB6.Support.GetItemData%2A> und `SetItemData` Methoden können verwendet werden, zum Emulieren des Verhaltens von `ItemData`.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemString">
      <MemberSignature Language="C#" Value="public static void SetItemString (System.Windows.Forms.Control Control, int Index, string ItemString);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetItemString(class System.Windows.Forms.Control Control, int32 Index, string ItemString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SetItemString(System.Windows.Forms.Control,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetItemString(System::Windows::Forms::Control ^ Control, int Index, System::String ^ ItemString);" />
      <MemberSignature Language="F#" Value="static member SetItemString : System.Windows.Forms.Control * int * string -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SetItemString (Control, Index, ItemString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Windows.Forms.Control" />
        <Parameter Name="Index" Type="System.Int32" />
        <Parameter Name="ItemString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Control">Ein <see cref="T:System.Windows.Forms.ListBox" /><see cref="T:System.Windows.Forms.ListBox" />-Steuerelement oder <see cref="T:System.Windows.Forms.ComboBox" />-Steuerelement.</param>
        <param name="Index">Die <see langword="Index" /> des <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" />.</param>
        <param name="ItemString">Ein <see cref="T:System.String" />, der der <see cref="F:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem.ItemString" />-Eigenschaft zugewiesen werden soll.</param>
        <summary>Legt die <see cref="F:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem.ItemString" />-Eigenschaft für ein <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ListBoxItem" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion wird von den Upgrade-Tools zum Emulieren der Visual Basic 6.0 verwendet `List` Eigenschaft. Verwenden Sie in Visual Basic die <xref:System.Windows.Forms.ComboBox.Items%2A> oder <xref:System.Windows.Forms.ListBox.Items%2A> Eigenschaft stattdessen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetResourceBaseName">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Weist dem Visual Basic-Projektnamespace den Namen einer Visual Basic 6.0-Ressourcendatei zu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetResourceBaseName">
      <MemberSignature Language="C#" Value="public static void SetResourceBaseName (string BaseFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetResourceBaseName(string BaseFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SetResourceBaseName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceBaseName (BaseFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetResourceBaseName(System::String ^ BaseFileName);" />
      <MemberSignature Language="F#" Value="static member SetResourceBaseName : string -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SetResourceBaseName BaseFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="BaseFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="BaseFileName">Eine Ressourcendatei (.res).</param>
        <summary>Weist dem aktuellen Visual Basic-Projektnamespace den Namen einer Visual Basic 6.0-Ressourcendatei zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ressourcenbehandlung unterscheidet sich bei Visual Basic 6.0- und Visual Basic. Diese Funktion wird von den Upgradetools verwendet, um eine Visual Basic 6.0-Ressourcendatei zu einem Projekt hinzuzufügen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResourceBaseName">
      <MemberSignature Language="C#" Value="public static void SetResourceBaseName (string ProjectNamespace, string BaseFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetResourceBaseName(string ProjectNamespace, string BaseFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.SetResourceBaseName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceBaseName (ProjectNamespace As String, BaseFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetResourceBaseName(System::String ^ ProjectNamespace, System::String ^ BaseFileName);" />
      <MemberSignature Language="F#" Value="static member SetResourceBaseName : string * string -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.SetResourceBaseName (ProjectNamespace, BaseFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProjectNamespace" Type="System.String" />
        <Parameter Name="BaseFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProjectNamespace">Ein <see cref="T:System.String" />, der den <see langword="Namespace" /> der Ressourcendatei enthält.</param>
        <param name="BaseFileName">Eine Ressourcendatei (.res).</param>
        <summary>Weist einem Visual Basic-Projektnamespace den Namen einer Visual Basic 6.0-Ressourcendatei zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ressourcenbehandlung unterscheidet sich bei Visual Basic 6.0- und Visual Basic. Diese Funktion wird von den Upgradetools verwendet, um eine Visual Basic 6.0-Ressourcendatei zu einem Projekt hinzuzufügen.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowForm">
      <MemberSignature Language="C#" Value="public static void ShowForm (System.Windows.Forms.Form Form, int Modal = 0, System.Windows.Forms.Form OwnerForm = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ShowForm(class System.Windows.Forms.Form Form, int32 Modal, class System.Windows.Forms.Form OwnerForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ShowForm(System.Windows.Forms.Form,System.Int32,System.Windows.Forms.Form)" />
      <MemberSignature Language="F#" Value="static member ShowForm : System.Windows.Forms.Form * int * System.Windows.Forms.Form -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ShowForm (Form, Modal, OwnerForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Form" Type="System.Windows.Forms.Form" />
        <Parameter Name="Modal" Type="System.Int32" />
        <Parameter Name="OwnerForm" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="Form">Das anzuzeigende <see cref="T:System.Windows.Forms.Form" />.</param>
        <param name="Modal">Dies ist optional. Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.FormShowConstants" />-Enumeration, die die Modalität angibt.</param>
        <param name="OwnerForm">Dies ist optional. Der Parameter <c>owner</c> der <see cref="M:System.Windows.Forms.Form.ShowDialog" />-Methode.</param>
        <summary>Zeigt ein Formular durch Aufrufen der <see cref="M:System.Windows.Forms.Control.Show" />-Methode oder der <see cref="M:System.Windows.Forms.Form.ShowDialog" />-Methode an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `Show` Methode angegeben, ob ein Formular modal angezeigt wird; in Visual Basic wird es durch ersetzt die <xref:System.Windows.Forms.Control.Show%2A> und <xref:System.Windows.Forms.Form.ShowDialog%2A> Methoden. Diese Funktion wird von den Upgradetools abzubildenden Visual Basic 6.0 verwendet `Show` Methode, um entweder die <xref:System.Windows.Forms.Control.Show%2A> oder <xref:System.Windows.Forms.Form.ShowDialog%2A> Methode.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabLayout">
      <MemberSignature Language="C#" Value="public static string TabLayout (params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TabLayout(object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.TabLayout(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TabLayout (ParamArray Args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TabLayout(... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member TabLayout : obj[] -&gt; string" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.TabLayout Args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Args">Ein zu druckender Ausdruck oder eine Liste von Ausdrücken.</param>
        <summary>Formatiert Zeichenfolgen, um die <see langword="Debug.Print" />-Funktionalität in Visual Basic 6.0 zu simulieren.</summary>
        <returns>Ein formatierter <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `Debug.Print` Fehlerarray ein `outputlist` Parameter, der angegeben wird, wie die Ausgabe im formatiert wurde die **Direktfenster** Fenster. Diese Funktion dient die Upgrade-Tools beim Übersetzen der `outputlist` Parameter in eine Zeichenfolge für die Anzeige in der **Direktfenster** Fenster.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPixelsUserHeight">
      <MemberSignature Language="C#" Value="public static double ToPixelsUserHeight (double Height, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 ToPixelsUserHeight(float64 Height, float64 ScaleHeight, int32 OriginalHeightInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserHeight(System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPixelsUserHeight (Height As Double, ScaleHeight As Double, OriginalHeightInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToPixelsUserHeight(double Height, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="F#" Value="static member ToPixelsUserHeight : double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserHeight (Height, ScaleHeight, OriginalHeightInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Height" Type="System.Double" />
        <Parameter Name="ScaleHeight" Type="System.Double" />
        <Parameter Name="OriginalHeightInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Height">Ein <see cref="T:System.Double" />, der die Höhe darstellt.</param>
        <param name="ScaleHeight">Ein <see cref="T:System.Double" />, der die <see langword="ScaleHeight" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalHeightInPixels">Ein <see langword="Integer" />, der die Höhe in Pixel darstellt.</param>
        <summary>Konvertiert ein <see langword="ScaleHeight" />-Maß in Visual Basic 6.0 in ein Pixelmaß.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleHeight" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPixelsUserWidth">
      <MemberSignature Language="C#" Value="public static double ToPixelsUserWidth (double Width, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 ToPixelsUserWidth(float64 Width, float64 ScaleWidth, int32 OriginalWidthInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserWidth(System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPixelsUserWidth (Width As Double, ScaleWidth As Double, OriginalWidthInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToPixelsUserWidth(double Width, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="F#" Value="static member ToPixelsUserWidth : double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserWidth (Width, ScaleWidth, OriginalWidthInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Width" Type="System.Double" />
        <Parameter Name="ScaleWidth" Type="System.Double" />
        <Parameter Name="OriginalWidthInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Width">Ein <see cref="T:System.Double" />, das die Breite darstellt.</param>
        <param name="ScaleWidth">Ein <see cref="T:System.Double" />, der die <see langword="ScaleWidth" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalWidthInPixels">Ein <see langword="Integer" />, der die Breite in Pixel darstellt.</param>
        <summary>Konvertiert ein <see langword="ScaleWidth" />-Maß in Visual Basic 6.0 in ein Pixelmaß.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleWidth" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPixelsUserX">
      <MemberSignature Language="C#" Value="public static double ToPixelsUserX (double X, double ScaleLeft, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 ToPixelsUserX(float64 X, float64 ScaleLeft, float64 ScaleWidth, int32 OriginalWidthInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserX(System.Double,System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPixelsUserX (X As Double, ScaleLeft As Double, ScaleWidth As Double, OriginalWidthInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToPixelsUserX(double X, double ScaleLeft, double ScaleWidth, int OriginalWidthInPixels);" />
      <MemberSignature Language="F#" Value="static member ToPixelsUserX : double * double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserX (X, ScaleLeft, ScaleWidth, OriginalWidthInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="System.Double" />
        <Parameter Name="ScaleLeft" Type="System.Double" />
        <Parameter Name="ScaleWidth" Type="System.Double" />
        <Parameter Name="OriginalWidthInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="X">Ein <see cref="T:System.Double" />-Wert, der die X-Koordinate darstellt.</param>
        <param name="ScaleLeft">Ein <see cref="T:System.Double" />, der die <see langword="ScaleLeft" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="ScaleWidth">Ein <see cref="T:System.Double" />, der die <see langword="ScaleWidth" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalWidthInPixels">Ein <see langword="Integer" />, der die Breite in Pixel darstellt.</param>
        <summary>Konvertiert ein <see langword="ScaleLeft" />-Maß in Visual Basic 6.0 in ein Pixelmaß.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleLeft" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPixelsUserY">
      <MemberSignature Language="C#" Value="public static double ToPixelsUserY (double Y, double ScaleTop, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 ToPixelsUserY(float64 Y, float64 ScaleTop, float64 ScaleHeight, int32 OriginalHeightInPixels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserY(System.Double,System.Double,System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPixelsUserY (Y As Double, ScaleTop As Double, ScaleHeight As Double, OriginalHeightInPixels As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToPixelsUserY(double Y, double ScaleTop, double ScaleHeight, int OriginalHeightInPixels);" />
      <MemberSignature Language="F#" Value="static member ToPixelsUserY : double * double * double * int -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsUserY (Y, ScaleTop, ScaleHeight, OriginalHeightInPixels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Y" Type="System.Double" />
        <Parameter Name="ScaleTop" Type="System.Double" />
        <Parameter Name="ScaleHeight" Type="System.Double" />
        <Parameter Name="OriginalHeightInPixels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Y">Ein <see cref="T:System.Double" />, der die Y-Koordinate darstellt.</param>
        <param name="ScaleTop">Ein <see cref="T:System.Double" />, der die <see langword="ScaleTop" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="ScaleHeight">Ein <see cref="T:System.Double" />, der die <see langword="ScaleHeight" /> in Visual Basic 6.0 für den aktuellen <see langword="ScaleMode" /> darstellt.</param>
        <param name="OriginalHeightInPixels">Ein <see langword="Integer" />, der die Höhe in Pixel darstellt.</param>
        <summary>Konvertiert ein <see langword="ScaleTop" />-Maß in Visual Basic 6.0 in ein Pixelmaß.</summary>
        <returns>Ein <see cref="T:System.Double" /> mit der konvertierten Visual Basic 6.0-<see langword="ScaleLeft" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPixelsX">
      <MemberSignature Language="C#" Value="public static double ToPixelsX (double X, Microsoft.VisualBasic.Compatibility.VB6.ScaleMode FromScale);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 ToPixelsX(float64 X, valuetype Microsoft.VisualBasic.Compatibility.VB6.ScaleMode FromScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsX(System.Double,Microsoft.VisualBasic.Compatibility.VB6.ScaleMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPixelsX (X As Double, FromScale As ScaleMode) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToPixelsX(double X, Microsoft::VisualBasic::Compatibility::VB6::ScaleMode FromScale);" />
      <MemberSignature Language="F#" Value="static member ToPixelsX : double * Microsoft.VisualBasic.Compatibility.VB6.ScaleMode -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsX (X, FromScale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="System.Double" />
        <Parameter Name="FromScale" Type="Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />
      </Parameters>
      <Docs>
        <param name="X">Ein <see cref="T:System.Double" />-Wert, der die X-Koordinate darstellt.</param>
        <param name="FromScale">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />-Enumeration, die den zu konvertierenden Visual Basic 6.0-<see langword="ScaleMode" /> darstellt.</param>
        <summary>Konvertiert ein Visual Basic 6.0-Maß für einen angegebenen <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" /> in ein Pixelmaß.</summary>
        <returns>Ein <see cref="T:System.Double" />-Wert, der den Pixelwert für den angegebenen <see langword="ScaleMode" /> enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPixelsY">
      <MemberSignature Language="C#" Value="public static double ToPixelsY (double Y, Microsoft.VisualBasic.Compatibility.VB6.ScaleMode FromScale);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 ToPixelsY(float64 Y, valuetype Microsoft.VisualBasic.Compatibility.VB6.ScaleMode FromScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsY(System.Double,Microsoft.VisualBasic.Compatibility.VB6.ScaleMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToPixelsY (Y As Double, FromScale As ScaleMode) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToPixelsY(double Y, Microsoft::VisualBasic::Compatibility::VB6::ScaleMode FromScale);" />
      <MemberSignature Language="F#" Value="static member ToPixelsY : double * Microsoft.VisualBasic.Compatibility.VB6.ScaleMode -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ToPixelsY (Y, FromScale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Y" Type="System.Double" />
        <Parameter Name="FromScale" Type="Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />
      </Parameters>
      <Docs>
        <param name="Y">Ein <see cref="T:System.Double" />, der die Y-Koordinate darstellt.</param>
        <param name="FromScale">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" />-Enumeration, die den zu konvertierenden Visual Basic 6.0-<see langword="ScaleMode" /> darstellt.</param>
        <summary>Konvertiert ein Visual Basic 6.0-Maß für einen angegebenen <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ScaleMode" /> in ein Pixelmaß.</summary>
        <returns>Ein <see cref="T:System.Double" />-Wert, der den Pixelwert für den angegebenen <see langword="ScaleMode" /> enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 6.0 unterstützt mehrere Koordinatensysteme durch definiert eine `ScaleMode` Eigenschaft. Diese enthalten einen benutzerdefinierten Wert. Visual Basic unterstützt nur ein Koordinatensystem, die auf Pixel basieren. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen Pixel und einen benutzerdefinierten Skalierungswert verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TwipsPerPixelX">
      <MemberSignature Language="C#" Value="public static float TwipsPerPixelX ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 TwipsPerPixelX() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsPerPixelX" />
      <MemberSignature Language="VB.NET" Value="Public Function TwipsPerPixelX () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float TwipsPerPixelX();" />
      <MemberSignature Language="F#" Value="static member TwipsPerPixelX : unit -&gt; single" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsPerPixelX " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Wert ab, mit dem Twips auf Grundlage von Bildschirmeinstellungen in Pixel konvertiert werden.</summary>
        <returns>Ein <see langword="Double" />, der den Konvertierungsfaktor enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Koordinaten in Twips ausgedrückt; in Visual Basic werden diese in Pixeln ausgedrückt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen zwei Koordinatensysteme verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TwipsPerPixelY">
      <MemberSignature Language="C#" Value="public static float TwipsPerPixelY ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 TwipsPerPixelY() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsPerPixelY" />
      <MemberSignature Language="VB.NET" Value="Public Function TwipsPerPixelY () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float TwipsPerPixelY();" />
      <MemberSignature Language="F#" Value="static member TwipsPerPixelY : unit -&gt; single" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsPerPixelY " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Wert ab, mit dem Twips auf Grundlage von Bildschirmeinstellungen in Pixel konvertiert werden.</summary>
        <returns>Ein <see langword="Double" />, der den Konvertierungsfaktor enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Koordinaten in Twips ausgedrückt; in Visual Basic werden diese in Pixeln ausgedrückt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen zwei Koordinatensysteme verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TwipsToPixelsX">
      <MemberSignature Language="C#" Value="public static double TwipsToPixelsX (double X);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 TwipsToPixelsX(float64 X) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsToPixelsX(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TwipsToPixelsX (X As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double TwipsToPixelsX(double X);" />
      <MemberSignature Language="F#" Value="static member TwipsToPixelsX : double -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsToPixelsX X" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="X" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="X">Ein <see langword="Double" /> mit der zu konvertierenden X-Koordinate.</param>
        <summary>Konvertiert eine X-Koordinate aus Twips in Pixel.</summary>
        <returns>Ein <see langword="Double" />, der die X-Koordinate in Pixel enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Koordinaten in Twips ausgedrückt; in Visual Basic werden diese in Pixeln ausgedrückt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen zwei Koordinatensysteme verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TwipsToPixelsY">
      <MemberSignature Language="C#" Value="public static double TwipsToPixelsY (double Y);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 TwipsToPixelsY(float64 Y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsToPixelsY(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TwipsToPixelsY (Y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double TwipsToPixelsY(double Y);" />
      <MemberSignature Language="F#" Value="static member TwipsToPixelsY : double -&gt; double" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.TwipsToPixelsY Y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Y">Ein <see langword="Double" /> mit der zu konvertierenden X-Koordinate.</param>
        <summary>Konvertiert eine Y-Koordinate aus Twips in Pixel.</summary>
        <returns>Ein <see langword="Double" />, der die Y-Koordinate in Pixel enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 wurden Koordinaten in Twips ausgedrückt; in Visual Basic werden diese in Pixeln ausgedrückt. Diese Funktion wird von den Upgrade-Tools zum Konvertieren zwischen zwei Koordinatensysteme verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateControls">
      <MemberSignature Language="C#" Value="public static void ValidateControls (System.Windows.Forms.ContainerControl Form);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ValidateControls(class System.Windows.Forms.ContainerControl Form) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ValidateControls(System.Windows.Forms.ContainerControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateControls (Form As ContainerControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidateControls(System::Windows::Forms::ContainerControl ^ Form);" />
      <MemberSignature Language="F#" Value="static member ValidateControls : System.Windows.Forms.ContainerControl -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ValidateControls Form" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Form" Type="System.Windows.Forms.ContainerControl" />
      </Parameters>
      <Docs>
        <param name="Form">Das <see cref="T:System.Windows.Forms.ContainerControl" />, dem das Steuerelement untergeordnet ist.</param>
        <summary>Emuliert das Verhalten der <see langword="ValidateControls" />-Methode in Visual Basic 6.0.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `ValidateControls` Methode wurde verwendet, um zu erzwingen der `Validate` -Ereignis für das Steuerelement, das Fokus besitzt, wenn ein Formular geschlossen wird, wenn die `Validate` Bewegungsereignis ein Fehler auftritt, wurde ein Fehler ausgelöst. In Visual Basic die `ValidateControls` Methode wird durch ersetzt die <xref:System.Windows.Forms.ContainerControl.Validate%2A> Methode, die zurückgibt `true` oder `false`.  
  
 Diese Funktion wird von den Upgrade-Tools zum Emulieren des Verhaltens von Visual Basic 6.0 verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhatsThisMode">
      <MemberSignature Language="C#" Value="public static void WhatsThisMode (System.Windows.Forms.Form Form);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WhatsThisMode(class System.Windows.Forms.Form Form) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.WhatsThisMode(System.Windows.Forms.Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WhatsThisMode(System::Windows::Forms::Form ^ Form);" />
      <MemberSignature Language="F#" Value="static member WhatsThisMode : System.Windows.Forms.Form -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.WhatsThisMode Form" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Form" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="Form">Ein <see cref="T:System.Windows.Forms.Form" />.</param>
        <summary>Zeigt für ein von Visual Basic 6.0 aktualisiertes Formular ein Popup-Hilfefenster an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontextbezogene Hilfe in Visual Basic 6.0 wurde implementiert, mit der `WhatsThisButton` und `WhatsThisHelp` Eigenschaften eines Formulars; Popup Hilfe in Visual Basic implementiert ist, mithilfe der <xref:System.Windows.Forms.Form.HelpButton%2A> -Eigenschaft eines Formulars. Diese Funktion wird von den Upgradetools so ändern Sie die Methode zum Anzeigen von kontextbezogene Hilfe in einer aktualisierten Anwendung verwendet.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZOrder">
      <MemberSignature Language="C#" Value="public static void ZOrder (System.Windows.Forms.Control Control, int Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ZOrder(class System.Windows.Forms.Control Control, int32 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Compatibility.VB6.Support.ZOrder(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ZOrder(System::Windows::Forms::Control ^ Control, int Position);" />
      <MemberSignature Language="F#" Value="static member ZOrder : System.Windows.Forms.Control * int -&gt; unit" Usage="Microsoft.VisualBasic.Compatibility.VB6.Support.ZOrder (Control, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Compatibility</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Windows.Forms.Control" />
        <Parameter Name="Position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Control">Ein <see cref="T:System.Windows.Forms.Control" />.</param>
        <param name="Position">Eine <see cref="T:Microsoft.VisualBasic.Compatibility.VB6.ZOrderConstants" />-Enumeration.</param>
        <summary>Konvertiert die Visual Basic-<see langword="ZOrder" />-Methode für die Verwendung in Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Visual Basic 6.0 die `ZOrder` -Methode wurde verwendet, um die Anordnung von Steuerelementen anzugeben; in Visual Basic wird dies durch ersetzt die <xref:System.Windows.Forms.Control.BringToFront%2A> und <xref:System.Windows.Forms.Control.SendToBack%2A> Methoden. Diese Funktion wird von den Upgrade-Tools verwendet, um die Zuordnung zwischen den Methoden.  
  
 [!INCLUDE[Note_compatibility](~/includes/note-compatibility-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="80d568fc0daf6dcc09ab810c4a143ebeae612716" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30411034" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementiert eine Reihe von Methoden für kulturabhängige Zeichenfolgenvergleiche.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konventionen für das Vergleichen und Sortieren von Daten variieren Kulturen. Sortierreihenfolge kann z. B. auf Phonetics oder die visuelle Darstellung der Zeichen basieren. In ostasiatischen Sprachen werden Zeichen anhand der Anzahl der Striche und der Radikale der Ideogramme sortiert. Die Sortierung hängt außerdem von der Reihenfolge ab, die das Alphabet der jeweiligen Sprache bzw. Kultur aufweist. Im Dänischen gibt es beispielsweise das Zeichen "Æ", das im Alphabet nach dem Zeichen "Z" einsortiert ist. Darüber hinaus möglicherweise Vergleiche Groß- und Kleinschreibung beachtet, und Regeln Groß-und Kleinschreibung unterscheidet sich auch von Kultur. Die <xref:System.Globalization.CompareInfo> -Klasse ist verantwortlich für die Verwaltung dieser Vergleich kulturabhängige Zeichenfolgendaten und für kulturabhängige Zeichenfolgenoperationen ausführen.  
  
 Sie haben für gewöhnlich keine beim Instanziieren einer <xref:System.Globalization.CompareInfo> -Objekts direkt, da eine implizit von allen nicht-Ordnungszahl Vorgänge für Zeichenfolgenvergleiche, verwendet wird darunter auch Aufrufe an die <xref:System.String.Compare%2A?displayProperty=nameWithType> Methode. Jedoch wenn Sie abrufen möchten, führen Sie eine <xref:System.Globalization.CompareInfo> -Objekt, führen Sie es auf eine der folgenden Weisen:  
  
-   Durch das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> Eigenschaft für eine bestimmte Kultur.  
  
-   Durch Aufrufen der statischen <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> Methode mit dem Namen einer Kultur. Dies ermöglicht spät gebundener Zugriff auf eine <xref:System.Globalization.CompareInfo> Objekt.  
  
## <a name="ignored-search-values"></a>Suchwerten ignoriert  
 Zeichensätze enthalten ignorierbare Zeichen, d. h. Zeichen, die bei der Durchführung eines linguistischen oder kulturabhängigen Vergleichs nicht berücksichtigt werden. Methoden zum Zeichenfolgenvergleich wie z. B. <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> solche Zeichen beim Durchführen eines kulturabhängigen Vergleichs nicht berücksichtigt. Ignorierbare Zeichen enthalten:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType> Methoden für kulturabhängige Zeichenfolgenvergleich werden immer eine leere Zeichenfolge am Anfang (Index 0 (null)) der durchsuchten Zeichenfolge suchen.  
  
-   Ein Zeichen oder eine Zeichenfolge mit Zeichen mit Codepunkten, die nicht in den Vorgang aufgrund von Vergleichsoptionen, insbesondere als die <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> und <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> Optionen generiert sucht in der Symbole und ohne Zwischenraum kombinieren Zeichen werden ignoriert.  
  
-   Eine Zeichenfolge mit Codepunkten, die keine sprachliche Bedeutung haben. Ein bedingten Bindestrich (U + 00AD) wird z. B. immer in eine kulturabhängige Zeichenfolgenvergleich ignoriert.  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten, unabhängig von den kultureinstellungen des Betriebssystems übereinstimmt.  
  
> [!NOTE]
>  Wenn möglich, sollten Sie Methoden zum Zeichenfolgenvergleich, die einen Parameter vom Typ haben verwenden <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt wie die <xref:System.Globalization.CompareInfo> zugeordnete Objekt eine <xref:System.Globalization.CultureInfo> -Objekt Zeichenfolgenvergleiche beeinflusst.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vergleicht zwei Zeichenfolgen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">Die erste zu vergleichende Zeichenfolge.</param>
        <param name="string2">Die zweite zu vergleichende Zeichenfolge.</param>
        <summary>Vergleicht zwei Zeichenfolgen.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedingung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Die beiden Zeichenfolgen sind gleich.  
  
 </description></item><item><term> Kleiner als 0 (null)  
  
 </term><description><paramref name="string1" /> ist kleiner als <paramref name="string2" />.  
  
 </description></item><item><term> ist größer als 0 (null).  
  
 </term><description><paramref name="string1" /> ist größer als <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig erfolgt der Vergleich mit <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen, die über die verschiedenen Teile <xref:System.Globalization.CompareInfo> Objekte:  
  
-   <xref:System.Globalization.CompareInfo> der Kultur Spanisch (Spanien) mit internationaler Sortierung zugeordnete Objekt  
  
-   <xref:System.Globalization.CompareInfo> die Kultur Spanisch (Spanien) mit Traditionelle Sortierung zugeordneten Objekt  
  
-   <xref:System.Globalization.CompareInfo> mit der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 Im folgenden Beispiel wird das Aufrufen der <xref:System.Globalization.CompareInfo.Compare%2A>-Methode veranschaulicht.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten ignorierbare Zeichen, d. h. Zeichen, die bei der Durchführung eines linguistischen oder kulturabhängigen Vergleichs nicht berücksichtigt werden. Die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> Methode berücksichtigt nicht solche Zeichen aus, wenn ein kulturabhängiger Vergleich ausgeführt. Beispielsweise gibt ein kulturabhängiger Vergleich von "Animal" mit "Ani-falsch" (mit einer bedingten Bindestrich oder U + 00AD), dass die beiden Zeichenfolgen äquivalent, wie im folgenden Beispiel gezeigt sind.  
  
 [!code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  
  
 Um Ignorierbare Zeichen in einen Zeichenfolgenvergleich kennen, rufen Sie die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> -Methode, und übergeben Sie entweder den Wert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> für die <paramref name="options" /> Parameter.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Die erste zu vergleichende Zeichenfolge.</param>
        <param name="string2">Die zweite zu vergleichende Zeichenfolge.</param>
        <param name="options">Ein Wert, der definiert, wie die Zeichenfolgen <c>string1</c> und <c>string2</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> und <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Vergleicht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts zwei Zeichenfolgen.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedingung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Die beiden Zeichenfolgen sind gleich.  
  
 </description></item><item><term> Kleiner als 0 (null)  
  
 </term><description><paramref name="string1" /> ist kleiner als <paramref name="string2" />.  
  
 </description></item><item><term> ist größer als 0 (null).  
  
 </term><description><paramref name="string1" /> ist größer als <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden zwei Zeichenfolgen mit verschiedenen <xref:System.Globalization.CompareOptions> Einstellungen.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 Im folgenden Beispiel wird das Aufrufen der <xref:System.Globalization.CompareInfo.Compare%2A>-Methode veranschaulicht.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten ignorierbare Zeichen, d. h. Zeichen, die bei der Durchführung eines linguistischen oder kulturabhängigen Vergleichs nicht berücksichtigt werden. Die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> Methode berücksichtigt nicht solche Zeichen aus, wenn ein kulturabhängiger Vergleich ausgeführt. Um Ignorierbare Zeichen, die den Vergleich zu kennen, geben Sie den Wert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> für die <paramref name="options" /> Parameter.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Die erste zu vergleichende Zeichenfolge.</param>
        <param name="offset1">Der nullbasierte Index des Zeichens in <c>string1</c>, an dem der Vergleich beginnen soll.</param>
        <param name="string2">Die zweite zu vergleichende Zeichenfolge.</param>
        <param name="offset2">Der nullbasierte Index des Zeichens in <c>string2</c>, an dem der Vergleich beginnen soll.</param>
        <summary>Vergleicht den Endabschnitt einer Zeichenfolge mit dem Endabschnitt einer anderen Zeichenfolge.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedingung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Die beiden Zeichenfolgen sind gleich.  
  
 </description></item><item><term> Kleiner als 0 (null)  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist kleiner als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item><item><term> ist größer als 0 (null).  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist größer als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen, die über die verschiedenen Teile <xref:System.Globalization.CompareInfo> Objekte:  
  
-   <xref:System.Globalization.CompareInfo> der Kultur Spanisch (Spanien) mit internationaler Sortierung zugeordnete Objekt  
  
-   <xref:System.Globalization.CompareInfo> die Kultur Spanisch (Spanien) mit Traditionelle Sortierung zugeordneten Objekt  
  
-   <xref:System.Globalization.CompareInfo> mit der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> oder <paramref name="offset2" /> ist kleiner als 0.  
  
 - oder -   
  
 <paramref name="offset1" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string1" />.  
  
 - oder -   
  
 <paramref name="offset2" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten ignorierbare Zeichen. Die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> Methode wird diese Zeichen beim Ausführen eines linguistischen oder kulturabhängigen Vergleichs nicht berücksichtigt. Um Ignorierbare Zeichen, die den Vergleich zu kennen, rufen Sie die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> Methode, und geben Sie den Wert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> für die <paramref name="options" /> Parameter.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Die erste zu vergleichende Zeichenfolge.</param>
        <param name="offset1">Der nullbasierte Index des Zeichens in <c>string1</c>, an dem der Vergleich beginnen soll.</param>
        <param name="string2">Die zweite zu vergleichende Zeichenfolge.</param>
        <param name="offset2">Der nullbasierte Index des Zeichens in <c>string2</c>, an dem der Vergleich beginnen soll.</param>
        <param name="options">Ein Wert, der definiert, wie die Zeichenfolgen <c>string1</c> und <c>string2</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> und <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Vergleicht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts den Endabschnitt einer Zeichenfolge mit dem Endabschnitt einer anderen Zeichenfolge.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedingung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Die beiden Zeichenfolgen sind gleich.  
  
 </description></item><item><term> Kleiner als 0 (null)  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist kleiner als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item><item><term> ist größer als 0 (null).  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist größer als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen mithilfe der verschiedenen Teile <xref:System.Globalization.CompareOptions> Einstellungen.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> oder <paramref name="offset2" /> ist kleiner als 0.  
  
 - oder -   
  
 <paramref name="offset1" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string1" />.  
  
 - oder -   
  
 <paramref name="offset2" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten ignorierbare Zeichen, d. h. Zeichen, die bei der Durchführung eines linguistischen oder kulturabhängigen Vergleichs nicht berücksichtigt werden. Die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> Methode berücksichtigt nicht solche Zeichen aus, wenn einen kulturabhängiger Vergleich ausgeführt. Um Ignorierbare Zeichen, die den Vergleich zu kennen, geben Sie den Wert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> für die <paramref name="options" /> Parameter.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Die erste zu vergleichende Zeichenfolge.</param>
        <param name="offset1">Der nullbasierte Index des Zeichens in <c>string1</c>, an dem der Vergleich beginnen soll.</param>
        <param name="length1">Die Anzahl der zu vergleichenden aufeinanderfolgenden Zeichen in <c>string1</c>.</param>
        <param name="string2">Die zweite zu vergleichende Zeichenfolge.</param>
        <param name="offset2">Der nullbasierte Index des Zeichens in <c>string2</c>, an dem der Vergleich beginnen soll.</param>
        <param name="length2">Die Anzahl der zu vergleichenden aufeinanderfolgenden Zeichen in <c>string2</c>.</param>
        <summary>Vergleicht einen Abschnitt einer Zeichenfolge mit einem Abschnitt einer anderen Zeichenfolge.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedingung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Die beiden Zeichenfolgen sind gleich.  
  
 </description></item><item><term> Kleiner als 0 (null)  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist kleiner als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item><item><term> ist größer als 0 (null).  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist größer als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
> [!NOTE]
>  Wenn möglich, sollten Sie Methoden zum Zeichenfolgenvergleich, die einen Parameter vom Typ haben verwenden <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen, die über die verschiedenen Teile <xref:System.Globalization.CompareInfo> Objekte:  
  
-   <xref:System.Globalization.CompareInfo> der Kultur Spanisch (Spanien) mit internationaler Sortierung zugeordnete Objekt  
  
-   <xref:System.Globalization.CompareInfo> die Kultur Spanisch (Spanien) mit Traditionelle Sortierung zugeordneten Objekt  
  
-   <xref:System.Globalization.CompareInfo> mit der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />, <paramref name="length1" />, <paramref name="offset2" /> oder <paramref name="length2" /> ist kleiner als 0 (Null).  
  
 - oder -   
  
 <paramref name="offset1" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string1" />.  
  
 - oder -   
  
 <paramref name="offset2" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string2" />.  
  
 - oder -   
  
 <paramref name="length1" /> ist größer als die Anzahl der Zeichen ab <paramref name="offset1" /> bis zum Ende von <paramref name="string1" />.  
  
 - oder -   
  
 <paramref name="length2" /> ist größer als die Anzahl der Zeichen ab <paramref name="offset2" /> bis zum Ende von <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten ignorierbare Zeichen. Die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> Methode wird diese Zeichen beim Ausführen eines linguistischen oder kulturabhängigen Vergleichs nicht berücksichtigt. Um Ignorierbare Zeichen, die den Vergleich zu kennen, rufen Sie die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Methode, und geben Sie den Wert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> für die <paramref name="options" /> Parameter.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Die erste zu vergleichende Zeichenfolge.</param>
        <param name="offset1">Der nullbasierte Index des Zeichens in <c>string1</c>, an dem der Vergleich beginnen soll.</param>
        <param name="length1">Die Anzahl der zu vergleichenden aufeinanderfolgenden Zeichen in <c>string1</c>.</param>
        <param name="string2">Die zweite zu vergleichende Zeichenfolge.</param>
        <param name="offset2">Der nullbasierte Index des Zeichens in <c>string2</c>, an dem der Vergleich beginnen soll.</param>
        <param name="length2">Die Anzahl der zu vergleichenden aufeinanderfolgenden Zeichen in <c>string2</c>.</param>
        <param name="options">Ein Wert, der definiert, wie die Zeichenfolgen <c>string1</c> und <c>string2</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> und <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Vergleicht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts einen Abschnitt einer Zeichenfolge mit einem Abschnitt einer anderen Zeichenfolge.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die die lexikalische Beziehung der beiden verglichenen Elemente angibt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedingung  
  
 </description></listheader><item><term> 0 (null)  
  
 </term><description> Die beiden Zeichenfolgen sind gleich.  
  
 </description></item><item><term> Kleiner als 0 (null)  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist kleiner als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item><item><term> ist größer als 0 (null).  
  
 </term><description> Der angegebene Abschnitt von <paramref name="string1" /> ist größer als der angegebene Abschnitt von <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen mithilfe der verschiedenen Teile <xref:System.Globalization.CompareOptions> Einstellungen.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />, <paramref name="length1" />, <paramref name="offset2" /> oder <paramref name="length2" /> ist kleiner als 0 (Null).  
  
 - oder -   
  
 <paramref name="offset1" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string1" />.  
  
 - oder -   
  
 <paramref name="offset2" /> ist größer oder gleich der Anzahl von Zeichen in <paramref name="string2" />.  
  
 - oder -   
  
 <paramref name="length1" /> ist größer als die Anzahl der Zeichen ab <paramref name="offset1" /> bis zum Ende von <paramref name="string1" />.  
  
 - oder -   
  
 <paramref name="length2" /> ist größer als die Anzahl der Zeichen ab <paramref name="offset2" /> bis zum Ende von <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten ignorierbare Zeichen. Die <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Methode berücksichtigt nicht diese Zeichen aus, wenn ein kulturabhängiger Vergleich ausgeführt. Um Ignorierbare Zeichen, die den Vergleich zu kennen, geben Sie den Wert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> für die <paramref name="options" /> Parameter.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das mit der aktuellen <see cref="T:System.Globalization.CompareInfo" /> verglichen werden soll.</param>
        <summary>Bestimmt, ob das angegebene Objekt und das aktuelle <see cref="T:System.Globalization.CompareInfo" />-Objekt gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn das angegebene Objekt und die aktuelle <see cref="T:System.Globalization.CompareInfo" /> gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Globalization.CompareInfo> -Objekte sind gleich, wenn ihre <xref:System.Globalization.CompareInfo.LCID%2A> und <xref:System.Globalization.CompareInfo.Name%2A> Eigenschaften gleich sind.  
  
 Diese Methode überschreibt <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollten Sie verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft, um sicherzustellen, dass das Verhalten unabhängig von den kultureinstellungen des Betriebssystems konsistent ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Eine ganze Zahl, die den Kulturbezeichner darstellt.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der Kultur mit dem angegebenen Bezeichner zugeordnet ist.</summary>
        <returns>Ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der Kultur mit dem angegebenen Bezeichner zugeordnet ist und Methoden zum Zeichenfolgenvergleich aus der aktuellen <see cref="T:System.Reflection.Assembly" /> verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen, die über die verschiedenen Teile <xref:System.Globalization.CompareInfo> Objekte:  
  
-   <xref:System.Globalization.CompareInfo> der Kultur Spanisch (Spanien) mit internationaler Sortierung zugeordnete Objekt  
  
-   <xref:System.Globalization.CompareInfo> die Kultur Spanisch (Spanien) mit Traditionelle Sortierung zugeordneten Objekt  
  
-   <xref:System.Globalization.CompareInfo> mit der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die den Kulturnamen darstellt.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der Kultur mit dem angegebenen Namen zugeordnet ist.</summary>
        <returns>Ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der Kultur mit dem angegebenen Bezeichner zugeordnet ist und Methoden zum Zeichenfolgenvergleich aus der aktuellen <see cref="T:System.Reflection.Assembly" /> verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel vergleicht zwei Zeichenfolgen, die über die verschiedenen Teile <xref:System.Globalization.CompareInfo> Objekte:  
  
-   <xref:System.Globalization.CompareInfo> der Kultur Spanisch (Spanien) mit internationaler Sortierung zugeordnete Objekt  
  
-   <xref:System.Globalization.CompareInfo> die Kultur Spanisch (Spanien) mit Traditionelle Sortierung zugeordneten Objekt  
  
-   <xref:System.Globalization.CompareInfo> mit der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> ist ein ungültiger Kulturname.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">Eine ganze Zahl, die den Kulturbezeichner darstellt.</param>
        <param name="assembly">Eine <see cref="T:System.Reflection.Assembly" />, die die für den Zeichenfolgenvergleich zu verwendenden Methoden enthält.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der angegebenen Kultur zugeordnet ist und Methoden zum Zeichenfolgenvergleich aus der angegebenen <see cref="T:System.Reflection.Assembly" /> verwendet.</summary>
        <returns>Ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der Kultur mit dem angegebenen Bezeichner zugeordnet ist und Methoden zum Zeichenfolgenvergleich aus der aktuellen <see cref="T:System.Reflection.Assembly" /> verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Das Verhalten dieser Methode ist nicht vorhersehbar. Es wird empfohlen, für die Anwendung eine Version dieser Methode verwenden, der keine Assembly Eingabe akzeptiert.  
  
 Die `assembly` Parameter muss den gleichen Typ wie <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> ist ein ungültiger Typ.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">Eine Zeichenfolge, die den Kulturnamen darstellt.</param>
        <param name="assembly">Eine <see cref="T:System.Reflection.Assembly" />, die die für den Zeichenfolgenvergleich zu verwendenden Methoden enthält.</param>
        <summary>Initialisiert ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der angegebenen Kultur zugeordnet ist und Methoden zum Zeichenfolgenvergleich aus der angegebenen <see cref="T:System.Reflection.Assembly" /> verwendet.</summary>
        <returns>Ein neues <see cref="T:System.Globalization.CompareInfo" />-Objekt, das der Kultur mit dem angegebenen Bezeichner zugeordnet ist und Methoden zum Zeichenfolgenvergleich aus der aktuellen <see cref="T:System.Reflection.Assembly" /> verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Das Verhalten dieser Methode ist nicht vorhersehbar. Es wird empfohlen, dass Sie eine Version dieser Methode verwenden, der keine Assembly Eingabe akzeptiert.  
  
 Die `assembly` Parameter muss den gleichen Typ wie <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="assembly" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> ist ein ungültiger Kulturname.  
  
 - oder -   
  
 <paramref name="assembly" /> ist ein ungültiger Typ.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen Hashcode entweder für diese <see cref="T:System.Globalization.CompareInfo" />-Instanz oder für eine bestimmte Zeichenfolge zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Globalization.CompareInfo" /> für die Verwendung in Hashalgorithmen und -datenstrukturen, z. B. in einer Hashtabelle.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Globalization.CompareInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Diese Methode generiert für zwei Objekte, die gemäß der <xref:System.Globalization.CompareInfo.Equals%2A>-Methode gleich sind, denselben Hashcode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die Zeichenfolge, deren Hash zurückgegeben werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie Zeichenfolgen verglichen werden sollen.</param>
        <summary>Ruft den Hash für eine Zeichenfolge basierend auf den angegebenen Vergleichsoptionen ab.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten des <xref:System.Globalization.CompareInfo.GetHashCode%2A> ist abhängig von seiner Implementierung, die von einer Version der common Language Runtime in einen anderen oder von einer .NET Framework-Plattform zu einem anderen ändern kann.  
  
> [!IMPORTANT]
>  Wenn zwei Zeichenfolgenobjekte gleich sind, die <xref:System.Globalization.CompareInfo.GetHashCode%2A> -Methode identische Werte zurück. Es ist jedoch kein eindeutigen Hashcodewert für jeden eindeutigen Zeichenfolgenwert. Andere Zeichenfolgen können den gleichen Hashcode zurückgeben.  
>   
>  Der Hashcode selbst ist nicht garantiert stabil. Hashcodes für identische Zeichenfolgen können über den .NET Framework-Versionen und Plattformen (z. B. 32-Bit- und 64-Bit) für eine einzelne Version von .NET Framework unterscheiden. In einigen Fällen können sie auch nach Anwendungsdomäne unterscheiden.  
>   
>  Als Ergebnis Codes niemals außerhalb der Anwendungsdomäne verwendet werden sollte in der sie erstellt wurden, sollten niemals als Felder in einer Auflistung verwendet werden, und sie nie beibehalten werden soll.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Globalization.SortKey" />-Objekt für eine Zeichenfolge ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die Zeichenfolge, für die ein <see cref="T:System.Globalization.SortKey" />-Objekt abgerufen wird.</param>
        <summary>Ruft den Sortierschlüssel für die angegebene Zeichenfolge ab.</summary>
        <returns>Das <see cref="T:System.Globalization.SortKey" />-Objekt, das den Sortierschlüssel für die angegebene Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verschiedene Kategorien von Sortiergewichtungskategorien zugeordnet, einschließlich alphabetischer, Groß-/Kleinschreibung, Skript und diakritischer Gewichtungen erhält jedes Zeichen in einer Zeichenfolge. Ein Sortierschlüssel ist das Repository diese Gewichtungen für eine bestimmte Zeichenfolge. Ein Sortierschlüssel kann z. B. eine Zeichenfolge mit alphabetischen Gewichtungen enthalten, dann eine Zeichenfolge mit Gewichtungen nach Groß-/Kleinschreibung usw. Die <xref:System.Globalization.CompareInfo.GetSortKey%2A> Methode entspricht der Windows-API-Methode `LCMapString` mit dem LCMAP_SORTKEY-Flag.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die Zeichenfolge, für die ein <see cref="T:System.Globalization.SortKey" />-Objekt abgerufen wird.</param>
        <param name="options">Eine bitweise Kombination aus einem oder mehreren der folgenden Enumerationswerte, die definieren, wie der Sortierschlüssel berechnet wird: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> und <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Ruft mithilfe des angegebenen <see cref="T:System.Globalization.SortKey" />-Werts ein <see cref="T:System.Globalization.CompareOptions" />-Objekt für die angegebenen Zeichenfolge ab.</summary>
        <returns>Das <see cref="T:System.Globalization.SortKey" />-Objekt, das den Sortierschlüssel für die angegebene Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verschiedene Kategorien von Sortiergewichtungskategorien zugeordnet, einschließlich alphabetischer, Groß-/Kleinschreibung, Skript und diakritischer Gewichtungen erhält jedes Zeichen in einer Zeichenfolge. Ein Sortierschlüssel ist das Repository diese Gewichtungen für eine bestimmte Zeichenfolge. Ein Sortierschlüssel kann z. B. eine Zeichenfolge mit alphabetischen Gewichtungen enthalten, dann eine Zeichenfolge mit Gewichtungen nach Groß-/Kleinschreibung usw. Die <xref:System.Globalization.CompareInfo.GetSortKey%2A> Methode entspricht der Windows-API-Methode `LCMapString` mit dem LCMAP_SORTKEY-Flag.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den nullbasierten Index des ersten Vorkommens eines Werts in einer Zeichenfolge bzw. in einem Teil dieser Zeichenfolge zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <summary>Sucht nach dem angegebenen Zeichen und gibt den nullbasierten Index des ersten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1. Gibt 0 (null) zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht die Quellzeichenfolge vom Anfang der Zeichenfolge bis zum Ende der Zeichenfolge.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Wenn `value` stellt ein zusammengesetztes Unicode-Zeichen, z. B. die Ligatur "Æ" (U + 00 C 6) betrachtet werden kann entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, einen Parameter vom Typ hat, in dem ein Zeichen ein anderes Zeichen entspricht gilt nur, wenn ihre Unicode-Codepunkten identisch sind, Sie eine Überladung aufrufen sollte <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> Wert. Im Gegensatz zu <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, die einen kulturabhängigen Vergleich durchführt Überladungen der der <xref:System.String.IndexOf%2A?displayProperty=nameWithType> Methode für die Suche nach einem Zeichen führen einen Ordinalvergleich und führen Sie einen kulturabhängigen Vergleich Überladungen, die nach einer Zeichenfolge suchen.  
  
> [!NOTE]
>  Wenn möglich, sollten Sie Methoden zum Zeichenfolgenvergleich, die einen Parameter vom Typ haben verwenden <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> Methode gibt immer 0 (null), um anzugeben, dass die Übereinstimmung am Anfang des <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> Methode wird verwendet, um den bedingten Bindestrich (U + 00AD) in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen 0 (null), um anzugeben, dass es eine Übereinstimmung gefunden wurde am Anfang der Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <summary>Sucht nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des ersten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1. Gibt 0 (null) zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts am Anfang der Zeichenfolge beginnt und endet am Ende der Zeichenfolge durchsucht.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, in denen die Unicode-Werten verglichen werden, sollten Sie verwenden eine der Überladungen, die einen Parameter vom Typ <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche, bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> Methode gibt immer 0 (null), um anzugeben, dass die Übereinstimmung am Anfang des <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> Methode wird verwendet, um drei Teilzeichenfolgen (einen bedingten Bindestrich (U + 00AD), einen bedingten Bindestrich gefolgt von "n" und einen bedingten Bindestrich gefolgt von "m") in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In jedem Fall, da der bedingte Bindestrich ein ignorierbares Zeichen ist das Ergebnis ist dasselbe wie bei der bedingten Bindestrich in nicht enthalten war <paramref name="value" />. Bei der Suche nach nur einen bedingten Bindestrich gibt die Methode 0 (null), um anzugeben, dass es eine Übereinstimmung am Anfang der Zeichenfolge gefunden wurde.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie die Zeichenfolgen verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach dem angegebenen Zeichen und gibt den nullbasierten Index des ersten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten ersten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1. Gibt 0 (null) zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts am Anfang der Zeichenfolge beginnt und endet am Ende der Zeichenfolge durchsucht.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine ordinale (kulturunabhängige) Suche. Ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte gleich sind. Überladungen der <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, sollten Sie Methoden zum Zeichenfolgenvergleich, die einen Parameter vom Typ haben verwenden <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Methode gibt immer 0 (null), um anzugeben, dass die Übereinstimmung am Anfang des <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD) in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In beiden Fällen gibt eine kulturabhängige Suche, da der bedingte Bindestrich ein ignorierbares Zeichen ist 0 (null), um anzugeben, dass es eine Übereinstimmung gefunden wurde am Anfang der Zeichenfolge. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <summary>Sucht nach dem angegebenen Zeichen und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom ersten angegebenen Index bis zum Ende der Zeichenfolge reicht.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der sich von <paramref name="startIndex" /> bis zum Ende von <paramref name="source" /> erstreckt, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet am Ende der Zeichenfolge.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Zum Ausführen einer Ordnungszahl (kulturunabhängige) suchen, in dem ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte identisch sind sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert. Überladungen der <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD) nach "n" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen 1, um anzugeben, dass er auf die Position des "n" keine Übereinstimmung gefunden wurde.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des ersten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten ersten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1. Gibt 0 (null) zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts am Anfang der Zeichenfolge beginnt und endet am Ende der Zeichenfolge durchsucht.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert diese Überladung führt eine Ordinalsuche (kulturunabhängige), in dem die Unicode-Werten verglichen werden.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche (das heißt, wenn <paramref name="options" /> nicht <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ist), bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> Methode gibt immer 0 (null), um anzugeben, dass die Übereinstimmung am Anfang des <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> Methode wird verwendet, um drei Teilzeichenfolgen (einen bedingten Bindestrich (U + 00AD), einen bedingten Bindestrich gefolgt von "n" und einen bedingten Bindestrich gefolgt von "m") in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt eine kulturabhängige Suche denselben Wert, den es zurückgegeben würde, wenn der bedingte Bindestrich wurden nicht in der Suchzeichenfolge in enthalten. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <summary>Sucht nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom ersten angegebenen Index bis zum Ende der Zeichenfolge reicht.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der sich von <paramref name="startIndex" /> bis zum Ende von <paramref name="source" /> erstreckt, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet am Ende der Zeichenfolge.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, in denen die Unicode-Werten verglichen werden, sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche, bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index des "m" in der Zeichenfolge zurück. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>	Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach dem angegebenen Zeichen und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom angegebenen Index bis zum Ende der Zeichenfolge reicht.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der sich von <paramref name="startIndex" /> bis zum Ende von <paramref name="source" /> erstreckt, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet am Ende der Zeichenfolge.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine ordinale (kulturunabhängige) Suche. Ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte gleich sind. Überladungen der <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, die Position des Zeichens, an dem die Suche zuerst gestartet wurde. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um den bedingten Bindestrich (U + 00AD) nach "n" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In beiden Fällen da der bedingte Bindestrich ein ignorierbares Zeichen ist eine kulturabhängige Suche gibt 1 zurück, um anzugeben, dass er auf die Position des "n" keine Übereinstimmung gefunden wurde. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <summary>Sucht nach dem angegebenen Zeichen und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der beim angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der bei <paramref name="startIndex" /> beginnt und die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet bei `startIndex`  +  `count` - 1.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Zum Ausführen einer Ordnungszahl (kulturunabhängige) suchen, in dem ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte identisch sind sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert. Überladungen der <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Position des Zeichens, an dem die Suche zuerst gestartet wurde. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD) nach "n" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen 1, um anzugeben, dass er auf die Position des "n" keine Übereinstimmung gefunden wurde.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom angegebenen Index bis zum Ende der Zeichenfolge reicht.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der sich von <paramref name="startIndex" /> bis zum Ende von <paramref name="source" /> erstreckt, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet am Ende der Zeichenfolge.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert diese Überladung führt eine Ordinalsuche (kulturunabhängige), in dem die Unicode-Werten verglichen werden.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche (das heißt, wenn <paramref name="options" /> nicht <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ist), bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m" beginnend mit der dritten Position des Zeichens in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index "m" in der Zeichenfolge zurück, wenn ein kulturabhängiger Vergleich ausgeführt wird. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt. Die Methode gibt den Index des bedingten Bindestrichs in der ersten Zeichenfolge nur dann zurück, wenn sie einen Ordinalvergleich ausführt.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <summary>Sucht nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der beim angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
        <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der bei <paramref name="startIndex" /> beginnt und die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet bei `startIndex`  +  `count` - 1.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, in denen die Unicode-Werten verglichen werden, sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche, bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m" ab dem dritten bis sechsten Zeichenpositionen werden in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index "m" in der Zeichenfolge zurück, wenn ein kulturabhängiger Vergleich ausgeführt wird. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach dem angegebenen Zeichen und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der beim angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der bei <paramref name="startIndex" /> beginnt und die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet bei `startIndex`  +  `count` - 1.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine ordinale (kulturunabhängige) Suche. Ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte gleich sind. Überladungen der <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Position des Zeichens, an dem die Suche zuerst gestartet wurde. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um den bedingten Bindestrich (U + 00AD) nach "n" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In beiden Fällen da der bedingte Bindestrich ein ignorierbares Zeichen ist eine kulturabhängige Suche gibt 1 zurück, um anzugeben, dass er auf die Position des "n" keine Übereinstimmung gefunden wurde. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des ersten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der beim angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten ersten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der bei <paramref name="startIndex" /> beginnt und die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge vorwärts beginnenden durchsucht `startIndex` und endet bei `startIndex`  +  `count` - 1.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert diese Überladung führt eine Ordinalsuche (kulturunabhängige), in dem die Unicode-Werten verglichen werden.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche (das heißt, wenn <paramref name="options" /> nicht <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ist), bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m" ab dem dritten bis sechsten Zeichenpositionen werden in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index "m" in der Zeichenfolge zurück, wenn ein kulturabhängiger Vergleich ausgeführt wird. Wenn sie einen Ordinalvergleich ausführt, sucht es die Teilzeichenfolge jedoch nur in der ersten Zeichenfolge fest. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt, wenn ein kulturabhängiger Vergleich ausgeführt. Die Methode gibt den Index des bedingten Bindestrichs in der ersten Zeichenfolge nur dann zurück, wenn sie einen Ordinalvergleich ausführt.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob eine Zeichenfolge mit einem angegebenen Präfix beginnt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="prefix">Die Zeichenfolge, die mit dem Anfang von <c>source</c> verglichen werden soll.</param>
        <summary>Bestimmt, ob die angegebene Quellzeichenfolge mit dem angegebenen Präfix beginnt.</summary>
        <returns>
          <see langword="true" />, wenn die Länge von <paramref name="prefix" /> kleiner oder gleich der Länge von <paramref name="source" /> ist und <paramref name="source" /> mit <paramref name="prefix" /> beginnt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Zeichenfolge beginnt und endet mit einer leeren Teilzeichenfolge (""); aus diesem Grund Wenn `prefix` ist eine leere Zeichenfolge ist, gibt diese Methode `true`.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgenden Beispiel wird bestimmt, ob eine Zeichenfolge das Präfix oder Suffix einer anderen Zeichenfolge ist.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="prefix" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="prefix">Die Zeichenfolge, die mit dem Anfang von <c>source</c> verglichen werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>prefix</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Bestimmt mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts, ob die angegebene Quellzeichenfolge mit dem angegebenen Präfix beginnt.</summary>
        <returns>
          <see langword="true" />, wenn die Länge von <paramref name="prefix" /> kleiner oder gleich der Länge von <paramref name="source" /> ist und <paramref name="source" /> mit <paramref name="prefix" /> beginnt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Zeichenfolge beginnt und endet mit einer leeren Teilzeichenfolge (""); aus diesem Grund Wenn `prefix` ist eine leere Zeichenfolge ist, gibt diese Methode `true`.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgenden Beispiel wird bestimmt, ob eine Zeichenfolge das Präfix oder Suffix der Verwendung von einer anderen Zeichenfolge <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="prefix" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob ein angegebenes Unicode-Zeichen oder eine angegebene Unicode-Zeichenfolge sortierbar ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Ein Unicode-Zeichen.</param>
        <summary>Gibt an, ob ein angegebenes Unicode-Zeichen sortierbar ist.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="ch" />-Parameter sortierbar ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ch` -Parameter sortierbar ist dies ein Unicode-Zeichen, die in einer internen definiert ist <xref:System.Globalization.CompareInfo> -Klasse Sortiertabelle und ist kein Other oder ungepaarten hohes oder niedriges Ersatzzeichen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Eine Zeichenfolge von 0 (null) oder mehr Unicode-Zeichen.</param>
        <summary>Gibt an, ob eine angegebene Unicode-Zeichenfolge sortierbar ist.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="str" />-Parameter keine leere Zeichenfolge ("") ist und alle Unicode-Zeichen in <paramref name="str" /> sortierbar sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Unicode-Zeichen in der `str` Parameter wird durch eine repräsentiert oder mehrere UTF-16-codierte <xref:System.Char> Objekte. Die `str` Parameter sortierbar ist jedes Unicode-Zeichen in einer internen definiert <xref:System.Globalization.CompareInfo> -Klasse Sortiertabelle und ist kein Other oder ungepaarten hohes oder niedriges Ersatzzeichen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob eine Zeichenfolge mit einem angegebenen Suffix endet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="suffix">Die Zeichenfolge, die mit dem Ende von <c>source</c> verglichen werden soll.</param>
        <summary>Bestimmt, ob die angegebene Quellzeichenfolge mit dem angegebenen Suffix endet.</summary>
        <returns>
          <see langword="true" />, wenn die Länge von <paramref name="suffix" /> kleiner oder gleich der Länge von <paramref name="source" /> ist und <paramref name="source" /> mit <paramref name="suffix" /> endet, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Zeichenfolge beginnt und endet mit einer leeren Teilzeichenfolge (""); aus diesem Grund Wenn `suffix` ist eine leere Zeichenfolge ist, gibt diese Methode `true`.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgenden Beispiel wird bestimmt, ob eine Zeichenfolge das Präfix oder Suffix einer anderen Zeichenfolge ist.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="suffix" /> ist <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="suffix">Die Zeichenfolge, die mit dem Ende von <c>source</c> verglichen werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>suffix</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" />, der allein verwendet wird, oder die bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Bestimmt mithilfe des angegebenen<see cref="T:System.Globalization.CompareOptions" />-Werts, ob die angegebene Quellzeichenfolge mit dem angegebenen Suffix endet.</summary>
        <returns>
          <see langword="true" />, wenn die Länge von <paramref name="suffix" /> kleiner oder gleich der Länge von <paramref name="source" /> ist und <paramref name="source" /> mit <paramref name="suffix" /> endet, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Zeichenfolge beginnt und endet mit einer leeren Teilzeichenfolge (""); aus diesem Grund Wenn `suffix` ist eine leere Zeichenfolge ist, gibt diese Methode `true`.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgenden Beispiel wird bestimmt, ob eine Zeichenfolge das Präfix oder Suffix der Verwendung von einer anderen Zeichenfolge <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="suffix" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den nullbasierten Index des letzten Vorkommens eines Werts in einer Zeichenfolge bzw. in einem Teil dieser Zeichenfolge zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <summary>Sucht nach dem angegebenen Zeichen und gibt den nullbasierten Index des letzten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge wird am Ende der Zeichenfolge beginnt am Anfang der Zeichenfolge bis durchsucht.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Zum Ausführen einer Ordnungszahl (kulturunabhängige) suchen, in dem ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte identisch sind sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert. Überladungen der <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> Methode gibt immer die letzte Indexposition in <paramref name="source" /> um anzugeben, dass die Übereinstimmung am Ende der <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> Methode wird verwendet, um den bedingten Bindestrich (U + 00AD) in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen die letzte Indexposition in der Zeichenfolge ein, um anzugeben, dass es eine Übereinstimmung am Ende der Zeichenfolge gefunden wurde.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <summary>Sucht nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des letzten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge wird am Ende der Zeichenfolge beginnt am Anfang der Zeichenfolge bis durchsucht.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, in denen die Unicode-Werten verglichen werden, sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> Wert.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche, bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> immer Methodenrückgabe <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, womit die letzte Indexposition in <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> Methode wird verwendet, um drei Teilzeichenfolgen (einen bedingten Bindestrich (U + 00AD), einen bedingten Bindestrich gefolgt von "n" und einen bedingten Bindestrich gefolgt von "m") in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In jedem Fall, da der bedingte Bindestrich ein ignorierbares Zeichen ist das Ergebnis ist dasselbe wie bei der bedingten Bindestrich in nicht enthalten war <paramref name="value" />. Bei der Suche nach nur einen bedingten Bindestrich erfolgt die Methodenrückgabe 6 und 5. Diese Werte entsprechen den Index des letzten Zeichens in die zwei Zeichenfolgen.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach dem angegebenen Zeichen und gibt den nullbasierten Index des letzten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten letzten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge wird am Ende der Zeichenfolge beginnt am Anfang der Zeichenfolge bis durchsucht.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine ordinale (kulturunabhängige) Suche. Ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte gleich sind. Überladungen der <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Methode gibt immer in die letzte Zeichenposition <paramref name="source" /> um anzugeben, dass die Übereinstimmung am Ende der <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD) in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt eine kulturabhängige Suche in beiden Fällen wird die letzte Indexposition in der Quellzeichenfolge zurück. Im Gegensatz dazu sucht den bedingten Bindestrich in einer Zeichenfolge eine Ordinalsuche erfolgreich und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <summary>Sucht nach dem angegebenen Zeichen und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom Anfang der Zeichenfolge bis zum angegebenen Index reicht.</summary>
        <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der vom Anfang von <paramref name="source" /> bis <paramref name="startIndex" /> reicht, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet am Anfang der Zeichenfolge.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Zum Ausführen einer Ordnungszahl (kulturunabhängige) suchen, in dem ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte identisch sind sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert. Überladungen der <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD), die vor dem letzten "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In beiden Fällen da der bedingte Bindestrich ein ignorierbares Zeichen ist die Methode gibt die Indexposition des "m", das den Wert des <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des letzten Vorkommens in der gesamten Quellzeichenfolge zurück.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten letzten Vorkommens von <paramref name="value" /> in <paramref name="source" />, sofern gefunden, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge wird am Ende der Zeichenfolge beginnt am Anfang der Zeichenfolge bis durchsucht.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert diese Überladung führt eine Ordinalsuche (kulturunabhängige), in dem die Unicode-Werten verglichen werden.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge innerhalb einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche (das heißt, wenn <paramref name="options" /> nicht <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ist), bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, womit die letzte Indexposition in <paramref name="source" />. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> Methode wird verwendet, um drei Teilzeichenfolgen (einen bedingten Bindestrich (U + 00AD), einen bedingten Bindestrich gefolgt von "n" und einen bedingten Bindestrich gefolgt von "m") in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt eine kulturabhängige Suche denselben Wert, den es zurückgegeben würde, wenn der bedingte Bindestrich wurden nicht in der Suchzeichenfolge in enthalten. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <summary>Sucht nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom Anfang der Zeichenfolge bis zum angegebenen Index reicht.</summary>
        <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der vom Anfang von <paramref name="source" /> bis <paramref name="startIndex" /> reicht, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet am Anfang der Zeichenfolge.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, in denen die Unicode-Werten verglichen werden, sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> Wert.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche, bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> Methode wird verwendet, um eine Teilzeichenfolge gefunden werden, enthält einen bedingten Bindestrich (U + 00AD) und vorausgeht oder der endgültige "m" in einer Zeichenfolge enthält. Da in der Suchzeichenfolge in der bedingten Bindestrich ignoriert wird, einen Aufruf der Methode suchen, der den bedingten Bindestrich und "m" besteht, Teilzeichenfolge gibt die Position des "m" in der Zeichenfolge zurück, wohingegen aufrufen, um eine Teilzeichenfolge finden, die den bedingten Bindestrich besteht und "n" gibt die  die Position des "n". Wenn die Suchzeichenfolge nur für den bedingten Bindestrich enthält, gibt die Methode den Index des "m", die den Wert darstellt <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach dem angegebenen Zeichen und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom Anfang der Zeichenfolge bis zum angegebenen Index reicht.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der sich vom Anfang von <paramref name="source" /> bis <paramref name="startIndex" /> erstreckt, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet am Anfang der Zeichenfolge.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine ordinale (kulturunabhängige) Suche. Ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte gleich sind. Überladungen der <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD), die vor dem letzten "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt eine kulturabhängige Suche in beiden Fällen die Indexposition des "m" zurück. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <summary>Sucht nach dem angegebenen Zeichen und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
        <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält und bei <paramref name="startIndex" /> endet, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet bei `startIndex`  -  `count` + 1.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Zum Ausführen einer Ordnungszahl (kulturunabhängige) suchen, in dem ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte identisch sind sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert. Überladungen der <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD), die vor dem letzten "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In beiden Fällen da der bedingte Bindestrich ein ignorierbares Zeichen ist die Methode gibt die Indexposition des "m", das den Wert des <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der vom Anfang der Zeichenfolge bis zum angegebenen Index reicht.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der sich vom Anfang von <paramref name="source" /> bis <paramref name="startIndex" /> erstreckt, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet am Anfang der Zeichenfolge.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert diese Überladung führt eine Ordinalsuche (kulturunabhängige), in dem die Unicode-Werten verglichen werden.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt. Beachten Sie, dass <xref:System.Globalization.CompareInfo.IndexOf%2A> und <xref:System.Globalization.CompareInfo.LastIndexOf%2A> in unterschiedlichen Teilen der Zeichenfolge ist, selbst mit dem gleichen suchen `startIndex` Parameter.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche (das heißt, wenn <paramref name="options" /> nicht <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ist), bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m", beginnend mit dem letzten "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index "m" in der Zeichenfolge zurück, wenn ein kulturabhängiger Vergleich ausgeführt wird. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt. Die Methode gibt den Index des bedingten Bindestrichs in der ersten Zeichenfolge nur dann zurück, wenn sie einen Ordinalvergleich ausführt.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <summary>Sucht nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
        <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält und bei <paramref name="startIndex" /> endet, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet bei `startIndex`  -  `count` + 1.  
  
 Diese Überladung führt eine kulturabhängige Suche durch. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Um eine Ordinalzahl (kulturunabhängige) Suche auszuführen, in denen die Unicode-Werten verglichen werden, sollten Sie eine der Überladungen, die einen Parameter vom Typ aufrufen <xref:System.Globalization.CompareOptions> und Verwenden der <xref:System.Globalization.CompareOptions.Ordinal> Wert.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche, bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m" finden in der drei Zeichen vor der endgültigen "m" von zwei Zeichenfolgen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index "m" in der Zeichenfolge zurück, wenn ein kulturabhängiger Vergleich ausgeführt wird. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Das Zeichen, das in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach dem angegebenen Zeichen und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält und bei <paramref name="startIndex" /> endet, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet bei `startIndex`  -  `count` + 1.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Wenn das Zeichen ein Unicode-Wert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) möglicherweise als entspricht jedem Vorkommen von seiner Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine ordinale (kulturunabhängige) Suche. Ein Zeichen als gleich betrachtet, ein anderes Zeichen nur, wenn die Unicode-Werte gleich sind. Überladungen der <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , dass die Suche nach einem Zeichen führen eine Ordinalsuche, während die, die nach einer Zeichenfolge suchen eine kulturabhängige Suche ausführt.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche Wenn <paramref name="value" /> ein ignorierbares Zeichen ist das Ergebnis ist gleichwertig mit der Suche mit diesem Zeichen entfernt. In diesem Fall die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt. Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um einen bedingten Bindestrich (U + 00AD), die vor dem letzten "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält einen bedingten Bindestrich. In beiden Fällen, da der bedingte Bindestrich ein ignorierbares Zeichen ist eine kulturabhängige Suche gibt die Indexposition des "m", das den Wert des <paramref name="startIndex" />. Eine ordinale Suche erfolgreich sucht den bedingten Bindestrich in eine Zeichenfolge und gibt an, dass er nicht vorhanden ist aus der zweiten Zeichenfolge.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Die zu durchsuchende Zeichenfolge.</param>
        <param name="value">Die Zeichenfolge, die in <c>source</c> gesucht werden soll.</param>
        <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
        <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
        <param name="options">Ein Wert, der definiert, wie <c>source</c> und <c>value</c> verglichen werden sollen. <c>options</c> ist entweder der Enumerationswert <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder eine bitweise Kombination aus mindestens einem der folgenden Werte: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> und <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Sucht mithilfe des angegebenen <see cref="T:System.Globalization.CompareOptions" />-Werts nach der angegebenen Teilzeichenfolge und gibt den nullbasierten Index des letzten Vorkommens in dem Abschnitt der Quellzeichenfolge zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
        <returns>Der nullbasierte Index des mithilfe der angegebenen Vergleichsoptionen gesuchten letzten Vorkommens von <paramref name="value" /> in dem Abschnitt von <paramref name="source" />, der die durch <paramref name="count" /> angegebene Anzahl von Elementen enthält und bei <paramref name="startIndex" /> endet, sofern gefunden, andernfalls -1. Gibt <paramref name="startIndex" /> zurück, wenn <paramref name="value" /> ein ignorierbares Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Quellzeichenfolge ist gesuchte Rückwärtsrichtung `startIndex` und endet bei `startIndex`  -  `count` + 1.  
  
 Die <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wert ist ungültig für diese Methode.  
  
 Wenn `options` schließt nicht die <xref:System.Globalization.CompareOptions.Ordinal> Wert, der diese Überladung führt eine kulturabhängige Suche. Ein Unicodewert, der ein zusammengesetztes Zeichen darstellt, z. B. die Ligatur "Æ" (U + 00 C 6) gilt möglicherweise als äquivalent zu einem Vorkommen der Zeichen-Komponenten in der richtigen Reihenfolge, z. B. "AE" (U + 0041, U + 0045), abhängig von der Kultur. Wenn `options` enthält die <xref:System.Globalization.CompareOptions.Ordinal> Wert diese Überladung führt eine Ordinalsuche (kulturunabhängige), in dem die Unicode-Werten verglichen werden.  
  
> [!NOTE]
>  Wenn möglich, Sie sollten Zeichenfolge Vergleichsmethoden aufrufen, die einen Parameter vom Typ haben <xref:System.Globalization.CompareOptions> , die Art von Vergleich erwartet anzugeben. Als allgemeine Regel, verwenden Sie linguistische (mit der aktuellen Kultur) Optionen zum Vergleichen von Zeichenfolgen, die in der Benutzeroberfläche angezeigt, und geben Sie <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> oder <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> für Sicherheit Vergleiche.  
  
   
  
## Examples  
 Im folgende Beispiel werden die Indizes von der ersten und letzten Vorkommens eines Zeichens oder einer Teilzeichenfolge in einem Teil einer Zeichenfolge bestimmt.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="source" />.  
  
 - oder -   
  
 <paramref name="count" /> ist kleiner als Null.  
  
 - oder -   
  
 <paramref name="startIndex" /> und <paramref name="count" /> geben keinen gültigen Abschnitt im <paramref name="source" /> an.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> enthält einen ungültigen <see cref="T:System.Globalization.CompareOptions" />-Wert.</exception>
        <block subset="none" type="usage">
          <para>Zeichensätze enthalten Ignorierbare Zeichen, d. h. Zeichen, die beim Ausführen einer linguistischen oder kulturabhängigen Sortierung nicht berücksichtigt werden. Bei einer kulturabhängige Suche (das heißt, wenn <paramref name="options" /> nicht <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oder <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ist), bei der <paramref name="value" /> ein ignorierbares Zeichen enthält, ist das Ergebnis das gleiche wie bei einer Suche ohne dieses Zeichen. Wenn <paramref name="value" /> besteht ausschließlich aus ein oder mehrere Ignorierbare Zeichen, die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> immer Methodenrückgabe <paramref name="startIndex" />, also die Zeichenposition, an dem die Suche beginnt.  
  
 Im folgenden Beispiel die <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Methode wird verwendet, um die Position des (U + 00AD) über einen bedingten Bindestrich gefolgt von einem "m" in allen jedoch der ersten Zeichenposition vor dem letzten "m" in zwei Zeichenfolgen zu suchen. Nur eine der Zeichenfolgen enthält die erforderliche Teilzeichenfolge. Da der bedingte Bindestrich ein ignorierbares Zeichen ist, gibt die Methode in beiden Fällen den Index "m" in der Zeichenfolge zurück, wenn ein kulturabhängiger Vergleich ausgeführt wird. Wenn sie einen Ordinalvergleich ausführt, sucht es die Teilzeichenfolge jedoch nur in der ersten Zeichenfolge fest. Beachten Sie, dass bei der ersten Zeichenfolge, die den bedingten Bindestrich gefolgt von einem "m" umfasst, die Methode den Index des bedingten Bindestrichs nicht zurückgeben kann, sondern stattdessen den Index des "m" zurückgibt, wenn ein kulturabhängiger Vergleich ausgeführt. Die Methode gibt den Index des bedingten Bindestrichs in der ersten Zeichenfolge nur dann zurück, wenn sie einen Ordinalvergleich ausführt.  
  
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>	Ruft den ordnungsgemäß gebildeten Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CompareInfo" /> ab.</summary>
        <value>	Der ordnungsgemäß gebildete Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CompareInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CompareInfo.LCID%2A> Eigenschaft.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Kultur ab, die von diesem <see cref="T:System.Globalization.CompareInfo" />-Objekt für Sortiervorgänge verwendet wird.</summary>
        <value>Der Name einer Kultur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CompareInfo.Name%2A> und <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> Eigenschaften können verschiedene Werte haben. Angenommen, ein <xref:System.Globalization.CompareInfo.LCID%2A> Eigenschaftswert hexadezimale 0x10407 identifiziert eine alternativen Sortierreihenfolgen-Kultur, die Namen sortiert, wie sie in einem deutschen Telefonbuch angezeigt werden können. Die <xref:System.Globalization.CompareInfo.Name%2A> Eigenschaft hat den Wert "de-De_phoneb", während die <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> Eigenschaft der entsprechenden Kultur für Deutsch (Deutschland) kann einen Wert von "de-DE".  
  
   
  
## Examples  
 Im folgende Beispiel werden drei Zeichenfolgen, die unter Verwendung der Kulturen fr-FR und ja-JP verglichen. Die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft wird verwendet, um den Namen des jede Kultur anzuzeigen.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Das Objekt, das den Rückruf initiiert hat.</param>
        <summary>Wird ausgeführt, wenn ein vollständiges Objektdiagramm deserialisiert worden ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellenmember-Implementierung, die verwendet werden, kann nur, wenn die aktuelle <xref:System.Globalization.CompareInfo> Objekt umgewandelt wird eine <xref:System.Runtime.Serialization.IDeserializationCallback> Schnittstelle. Weitere Informationen finden Sie unter der Methode <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die das aktuelle <see cref="T:System.Globalization.CompareInfo" />-Objekt darstellt.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.Globalization.CompareInfo" />-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt die <xref:System.Object.ToString%2A?displayProperty=nameWithType> Methode. Es gibt eine Zeichenfolge, die den Klassennamen und den Wert der Instanz besteht <xref:System.Globalization.CompareInfo.Name%2A> Eigenschaft, die durch einen Bindestrich getrennt.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Beginnend mit .NET Framework 4, die <see cref="M:System.Globalization.CompareInfo.ToString" /> Methodenrückgabe den Klassennamen gefolgt von einem Leerzeichen, einen Bindestrich ein Leerzeichen und den Wert des der <see cref="P:System.Globalization.CompareInfo.Name" /> Eigenschaft. Z. B. für eine <see cref="T:System.Globalization.CompareInfo" /> -Objekt, das der Kultur En-US, stellt die <see cref="M:System.Globalization.CompareInfo.ToString" /> Methodenrückgabe "CompareInfo - En-US". In früheren Versionen von .NET Framework gibt es den Klassennamen gefolgt von einem Leerzeichen, einen Bindestrich ein Leerzeichen und den Wert des der <see cref="P:System.Globalization.CompareInfo.LCID" /> Eigenschaft. Z. B. für eine <see cref="T:System.Globalization.CompareInfo" /> -Objekt, das der Kultur En-US, stellt die <see cref="M:System.Globalization.CompareInfo.ToString" /> Methodenrückgabe "CompareInfo - 1033".</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft Informationen über die Version von Unicode ab, die zum Vergleichen und Sortieren von Zeichenfolgen verwendet wird.</summary>
        <value>Ein Objekt, das Informationen über die Unicode-Version für die vergleichenden und sortierenden Zeichenfolgen enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Gewichtung der einzelnen Zeichen, und daher die Möglichkeit, in denen bestimmte Zeichenfolgen verglichen oder sortiert, hängt von der Version der Unicode-Spezifikation, die eine bestimmte Version von .NET Framework implementiert. In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], dies hängt auch Host-Betriebssystem, wie in der folgenden Tabelle gezeigt. Beachten Sie, dass diese Liste der unterstützten Unicode-Versionen lediglich für den Zeichenvergleich und die Sortierung gilt. Sie gilt nicht für die kategorische Klassifizierung von Unicode-Zeichen.  
  
|.NET Framework-Version|Betriebssystem|Unicode-Version|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Alle Betriebssysteme|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] und höhere Versionen|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] und höhere Versionen|[!INCLUDE[win8](~/includes/win8-md.md)] und höheren Versionen von Windows-Betriebssystem|Unicode 6.3|  
  
 Die <xref:System.Globalization.SortVersion> zurückgegebenes Objekt die <xref:System.Globalization.CompareInfo.Version%2A> Eigenschaft identifiziert nicht die präzise Unicodeversion zum Vergleichen von Zeichenfolgen verwendet. Es eignet sich nur beim Vergleichen von zwei <xref:System.Globalization.SortVersion> Objekte, um zu bestimmen, ob sie über die gleiche Unicode-Version und Kultur verwenden, um Zeichenfolgen zu vergleichen. Weitere Informationen und ein Beispiel finden Sie unter der <xref:System.Globalization.SortVersion> Referenzseite.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>
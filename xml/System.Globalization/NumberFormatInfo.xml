<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="404b7fbe097d0f3a171aeb900d8f0265650421f6" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83527901" /></Metadata><TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Globalization" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt kulturspezifische Informationen für Formatierung und Analyse für numerische Werte bereitstellt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo>-Klasse enthält kulturspezifische Informationen, die beim Formatieren und analysieren numerischer Werte verwendet werden. Zu diesen Informationen gehören das Währungssymbol, das Dezimal Symbol, das Gruppen Trennzeichen und die Symbole für positive und negative Vorzeichen.  
  
-   [Instanziieren eines numformatinfo-Objekts](#Instantiating)  
  
    -   [Für die aktuelle Kultur](#Instantiating_Current)  
  
    -   [Für die invariante Kultur](#Instantiating_Invariant)  
  
    -   [Für eine bestimmte Kultur](#Instantiating_Specific)  
  
    -   [Für eine neutrale Kultur](#Instantiating_Neutral)  
  
-   ["Numformatinfo" und "Dynamic Data"](#dynamic)  
  
-   [IFormatProvider, numformatinfo und numerische Formatierung](#formatProvider)  
  
-   [Format Zeichenfolgen und Eigenschaften von "numformatinfo"](#properties)  
  
-   [Ändern von Eigenschaften vom datformatinfo](#modifying)  
  
    -   [Ändern des Währungs Symbols und des Musters](#currency)  
  
    -   [Formatieren einer nationalen Identifikationsnummer](#id)  
  
-   [Verarbeiten numerischer Zeichenfolgen](#parsing)  
  
    -   [Benutzer Zeichenfolgen werden verarbeitet.](#ParseUser)  
  
    -   [Serialisieren und Deserialisieren von numerischen Daten](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>Instanziieren eines numformatinfo-Objekts  
 Sie können ein <xref:System.Globalization.NumberFormatInfo> Objekt instanziieren, das die Formatierungs Konventionen der aktuellen Kultur, der invarianten Kultur, einer bestimmten Kultur oder einer neutralen Kultur darstellt.  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>Instanziieren eines "numformatinfo"-Objekts für die aktuelle Kultur  
 Sie können ein <xref:System.Globalization.NumberFormatInfo>-Objekt für die aktuelle Thread Kultur auf eine der folgenden Arten instanziieren. In jedem Fall ist das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt schreibgeschützt.  
  
-   Durch Abrufen eines <xref:System.Globalization.CultureInfo> Objekts, das die aktuelle Thread Kultur darstellt, aus der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft und Abrufen des <xref:System.Globalization.CultureInfo>-Objekts aus seiner <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>-Eigenschaft.  
  
-   Durch Abrufen des <xref:System.Globalization.NumberFormatInfo> Objekts, das vom `static` (`Shared` in Visual Basic) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>-Eigenschaft zurückgegeben wird.  
  
-   Durch Aufrufen der <xref:System.Globalization.NumberFormatInfo.GetInstance%2A>-Methode mit einem <xref:System.Globalization.CultureInfo>-Objekt, das die aktuelle Kultur darstellt.  
  
 Im folgenden Beispiel werden diese drei Methoden verwendet, um <xref:System.Globalization.NumberFormatInfo>-Objekte zu erstellen, die die Formatierungs Konventionen der aktuellen Kultur darstellen. Außerdem wird der Wert der <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>-Eigenschaft abgerufen, um zu veranschaulichen, dass jedes-Objekt schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 Sie können ein beschreibbares <xref:System.Globalization.NumberFormatInfo> Objekt, das die Konventionen der aktuellen Thread Kultur darstellt, mit einer der folgenden Methoden erstellen:  
  
-   Durch Abrufen eines <xref:System.Globalization.NumberFormatInfo> Objekts in einer der im vorherigen Codebeispiel dargestellten Methoden und Aufrufen der <xref:System.Globalization.NumberFormatInfo.Clone%2A>-Methode für das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt. Dadurch wird eine Kopie des ursprünglichen <xref:System.Globalization.NumberFormatInfo> Objekts erstellt, mit der Ausnahme, dass die <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>-Eigenschaft `false`ist.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>-Methode zum Erstellen eines <xref:System.Globalization.CultureInfo> Objekts, das die aktuelle Kultur darstellt, und anschließendes Verwenden der <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>-Eigenschaft zum Abrufen des <xref:System.Globalization.NumberFormatInfo> Objekts.  
  
 Das folgende Beispiel veranschaulicht diese beiden Methoden zum Instanziieren eines <xref:System.Globalization.NumberFormatInfo> Objekts und zeigt den Wert seiner <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>-Eigenschaft an, um zu veranschaulichen, dass das Objekt nicht schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Beachten Sie, dass der Benutzer mithilfe des Windows-Betriebssystems einige der <xref:System.Globalization.NumberFormatInfo> Eigenschaftswerte, die in numerischen Formatierungs-und Verarbeitungsvorgängen verwendet werden, über das **Regions-und sprach** Element in der Systemsteuerung überschreiben kann Beispielsweise kann ein Benutzer, dessen Kultur Englisch (USA) ist, die Währungswerte als 1,1 USD anstelle des Standardwerts $1,1 anzeigen. Die <xref:System.Globalization.NumberFormatInfo>-Objekte, die in den zuvor erläuterten Methoden abgerufen wurden, spiegeln diese Benutzer Überschreibungen wider. Wenn dies nicht erwünscht ist, können Sie ein <xref:System.Globalization.NumberFormatInfo> Objekt erstellen, das keine Benutzer Überschreibungen widerspiegelt (und auch Lese-/Schreibzugriff und nicht schreibgeschützt ist), indem Sie den <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>-Konstruktor aufrufen und für das `useUserOverride`-Argument den Wert `false` bereitstellen. Das folgende Beispiel enthält eine Abbildung für ein System, dessen aktuelle Kultur Englisch (USA) und dessen Währungssymbol von der Standardeinstellung $ in USD geändert wurde.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>-Eigenschaft auf `true`festgelegt ist, werden die Eigenschaften <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>und <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> auch aus den Benutzereinstellungen abgerufen. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo> Objekt zugeordnet ist, nicht kompatibel sind (wenn der ausgewählte Kalender z. b. keiner der Kalender ist, die von der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>-Eigenschaft aufgelistet werden), sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>Instanziieren eines numformatinfo-Objekts für die invariante Kultur  
 Die invariante Kultur stellt eine Kultur dar, die Kultur unabhängig ist. Es basiert auf der englischen Sprache, aber nicht auf einem bestimmten englischsprachigen Land/einer bestimmten Region. Obwohl die Daten bestimmter Kulturen dynamisch sein können und sich ändern können, um neue Kultur Konventionen oder Benutzereinstellungen widerzuspiegeln, ändern sich die Daten der invarianten Kultur nicht. Ein <xref:System.Globalization.NumberFormatInfo>-Objekt, das die Formatierungs Konventionen der invarianten Kultur darstellt, kann für Formatierungs Vorgänge verwendet werden, bei denen Ergebnis Zeichenfolgen nicht je nach Kultur variieren sollten.  
  
 Sie können ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungs Konventionen der invarianten Kultur darstellt, auf folgende Weise instanziieren:  
  
-   Durch Abrufen des Werts der <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>-Eigenschaft. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch Abrufen des Werts der <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>-Eigenschaft aus dem <xref:System.Globalization.CultureInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch Aufrufen des Parameter losen <xref:System.Globalization.NumberFormatInfo.%23ctor%2A>-Klassenkonstruktors. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist Lese-/Schreibzugriff.  
  
 Im folgenden Beispiel wird jede dieser Methoden verwendet, um ein <xref:System.Globalization.NumberFormatInfo>-Objekt zu instanziieren, das die invariante Kultur darstellt. Dann gibt es an, ob das Objekt schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>Instanziieren eines numformatinfo-Objekts für eine bestimmte Kultur  
 Eine bestimmte Kultur stellt eine Sprache dar, die in einem bestimmten Land oder einer bestimmten Region gesprochen wird. Beispielsweise ist "en-US" eine bestimmte Kultur, die die in der USA gesprochene Englische Sprache darstellt, und "en-ca" ist eine bestimmte Kultur, die die in Kanada gesprochene Englische Sprache darstellt. Sie können ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungs Konventionen einer bestimmten Kultur darstellt, auf folgende Weise instanziieren:  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>-Methode und Abrufen des Werts der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft des zurückgegebenen <xref:System.Globalization.CultureInfo> Objekts. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch Übergeben eines <xref:System.Globalization.CultureInfo> Objekts, das die Kultur darstellt, deren <xref:System.Globalization.NumberFormatInfo> Objekt Sie der statischen <xref:System.Globalization.NumberFormatInfo.GetInstance%2A>-Methode abrufen möchten. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist Lese-/Schreibzugriff.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>-Methode und Abrufen des Werts der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft des zurückgegebenen <xref:System.Globalization.CultureInfo> Objekts. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist Lese-/Schreibzugriff.  
  
-   Durch Aufrufen eines der <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> Klassenkonstruktoren und Abrufen des Werts der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft des zurückgegebenen <xref:System.Globalization.CultureInfo> Objekts. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist Lese-/Schreibzugriff.  
  
 Im folgenden Beispiel werden diese vier Methoden zum Erstellen eines <xref:System.Globalization.NumberFormatInfo> Objekts verwendet, das die Formatierungs Konventionen der indonesischen Kultur (Indonesien) wieder gibt. Außerdem wird angegeben, ob jedes Objekt schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>Instanziieren eines numformatinfo-Objekts für eine neutrale Kultur  
 Eine neutrale Kultur stellt eine Kultur oder Sprache dar, die unabhängig von einem Land bzw. einer Region ist. Es ist in der Regel das übergeordnete Element einer oder mehrerer spezifischer Kulturen. Beispielsweise ist fr eine neutrale Kultur für die französische Sprache und das übergeordnete Element der fr-FR-Kultur. Sie erstellen ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungs Konventionen einer neutralen Kultur darstellt, auf dieselbe Weise, wie Sie ein <xref:System.Globalization.NumberFormatInfo> Objekt erstellen, das die Formatierungs Konventionen einer bestimmten Kultur darstellt.  
  
> [!NOTE]
>  In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen löst der Versuch, ein <xref:System.Globalization.NumberFormatInfo> Objekt abzurufen, das die Formatierungs Konventionen einer neutralen Kultur widerspiegelt, eine <xref:System.NotSupportedException> Ausnahme aus.  
  
 Da es jedoch unabhängig von einem bestimmten Land oder einer bestimmten Region ist, fehlen bei einer neutralen Kultur kulturspezifische Formatierungsinformationen. Anstatt das <xref:System.Globalization.NumberFormatInfo> Objekt mit generischen Werten aufzufüllen, gibt die .NET Framework ein <xref:System.Globalization.NumberFormatInfo> Objekt zurück, das die Formatierungs Konventionen einer bestimmten Kultur widerspiegelt, die ein untergeordnetes Element der neutralen Kultur ist. Beispielsweise spiegelt das <xref:System.Globalization.NumberFormatInfo>-Objekt für die neutrale Kultur "en-US" die Formatierungs Konventionen der Kultur "en-US" wider, und das <xref:System.Globalization.NumberFormatInfo> Objekt für die Kultur "fr" gibt die Formatierungs Konventionen der Kultur "fr-FR" wieder.  
  
 Sie können Code wie den folgenden verwenden, um zu bestimmen, welche Formatierungs Konventionen der jeweiligen Kultur jede neutrale Kultur darstellt.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>"Numformatinfo" und "Dynamic Data"  
 Die kulturspezifischen Daten zum Formatieren von numerischen Werten, die von der <xref:System.Globalization.NumberFormatInfo>-Klasse bereitgestellt werden, sind dynamisch, genau wie die von der <xref:System.Globalization.CultureInfo>-Klasse bereitgestellten Kultur Daten. Sie sollten keine Annahmen über die Stabilität von Werten für <xref:System.Globalization.NumberFormatInfo> Objekten treffen, die bestimmten <xref:System.Globalization.CultureInfo> Objekten zugeordnet sind. Nur die Daten, die von der invarianten Kultur und der zugehörigen <xref:System.Globalization.NumberFormatInfo> Objekt bereitgestellt werden, sind stabil. Andere Daten können aus den folgenden Gründen zwischen Anwendungs Sitzungen oder sogar innerhalb einer einzelnen Sitzung geändert werden:  
  
-   **System Updates.** Kulturelle Einstellungen wie Währungssymbol oder Währungsformate ändern sich im Laufe der Zeit. In diesem Fall enthält Windows Update Änderungen am <xref:System.Globalization.NumberFormatInfo>-Eigenschafts Wert für eine bestimmte Kultur.  
  
-   **Ersetzungs Kulturen.** Die <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse kann verwendet werden, um die Daten einer vorhandenen Kultur zu ersetzen.  
  
-   **Kaskadierende Änderungen an Eigenschafts Werten.** Eine Reihe von kulturbezogenen Eigenschaften kann zur Laufzeit geändert werden, was wiederum bewirkt, dass sich <xref:System.Globalization.NumberFormatInfo> Daten ändern. Beispielsweise kann die aktuelle Kultur entweder Programm gesteuert oder durch eine Benutzeraktion geändert werden. In diesem Fall ändert sich das <xref:System.Globalization.NumberFormatInfo> Objekt, das von der <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>-Eigenschaft zurückgegeben wird, in ein Objekt, das der aktuellen Kultur zugeordnet ist.  
  
-   **Benutzereinstellungen.** Benutzer der Anwendung können einige der Werte, die mit der aktuellen System Kultur verknüpft sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise können Benutzer ein anderes Währungssymbol oder ein anderes Dezimaltrennzeichen auswählen. Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>-Eigenschaft auf `true` (Standardwert) festgelegt ist, werden die Eigenschaften des <xref:System.Globalization.NumberFormatInfo>-Objekts auch aus den Benutzereinstellungen abgerufen.  
  
 Beginnend mit dem .NET Framework 2,0 werden alle vom Benutzer über schreibbaren Eigenschaften eines <xref:System.Globalization.NumberFormatInfo> Objekts initialisiert, wenn das Objekt erstellt wird. Es besteht immer noch eine Möglichkeit einer Inkonsistenz, da weder die Objekt Erstellung noch der Überschreibungs Prozess des Benutzers atomarisch ist und die relevanten Werte sich während der Objekt Erstellung ändern können. Diese Inkonsistenzen sollten jedoch sehr selten auftreten.  
  
 Sie können steuern, ob Benutzer Überschreibungen in <xref:System.Globalization.NumberFormatInfo> Objekten reflektiert werden, die dieselbe Kultur wie die aktuelle Thread Kultur darstellen. In der folgenden Tabelle sind die Methoden aufgeführt, mit denen ein <xref:System.Globalization.NumberFormatInfo> Objekt abgerufen werden kann, und es wird angegeben, ob das resultierende Objekt Benutzer Überschreibungen widerspiegelt.  
  
|Quelle von CultureInfo-und numformatinfo-Objekt|Spiegelt Benutzer Überschreibungen wider|  
|-------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat`-Eigenschaft|Ja|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>-Eigenschaft|Ja|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> -Methode|Ja|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> -Methode|Nein|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>-Konstruktor|Ja|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>-Konstruktor|Hängt vom Wert `useUserOverride` Parameters ab.|  
  
 Sofern es keinen überzeugenden Grund dafür gibt, sollten Sie Benutzer Überschreitungen beachten, wenn Sie das <xref:System.Globalization.NumberFormatInfo>-Objekt in Client Anwendungen verwenden, um Benutzereingaben zu formatieren und zu analysieren oder um numerische Daten anzuzeigen. Bei Server Anwendungen oder unbeaufsichtigten Anwendungen sollten Sie keine Benutzer Überschreibungen berücksichtigen. Wenn Sie jedoch das <xref:System.Globalization.NumberFormatInfo> Objekt entweder explizit oder implizit verwenden, um numerische Daten im Zeichen folgen Format beizubehalten, sollten Sie entweder ein <xref:System.Globalization.NumberFormatInfo> Objekt verwenden, das die Formatierungs Konventionen der invarianten Kultur widerspiegelt, oder Sie sollten eine benutzerdefinierte numerische Format Zeichenfolge angeben, die unabhängig von der Kultur verwendet werden soll.  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider, numformatinfo und numerische Formatierung  
 Ein <xref:System.Globalization.NumberFormatInfo>-Objekt wird implizit oder explizit in allen numerischen Formatierungs Vorgängen verwendet. Hierzu gehören auch Aufrufe der folgenden Methoden:  
  
-   Alle numerischen Formatierungs Methoden, z. b. <xref:System.Int32.ToString%2A?displayProperty=nameWithType>, <xref:System.Double.ToString%2A?displayProperty=nameWithType>und <xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>.  
  
-   Die Hauptmethode für die kombinierte Formatierung, <xref:System.String.Format%2A?displayProperty=nameWithType>.  
  
-   Andere Methoden für die kombinierte Formatierung, z. b. <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> und <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Bei allen numerischen Formatierungs Vorgängen wird eine <xref:System.IFormatProvider>-Implementierung verwendet. Die <xref:System.IFormatProvider>-Schnittstelle enthält eine einzige Methode, <xref:System.IFormatProvider.GetFormat%28System.Type%29>. Dies ist eine Rückruf Methode, der ein <xref:System.Type> Objekt übermittelt wird, das den zum Bereitstellen von Formatierungsinformationen erforderlichen Typ darstellt. Die-Methode ist für die Rückgabe einer Instanz dieses Typs oder `null`verantwortlich, wenn keine Instanz des Typs bereitgestellt werden kann. Der .NET Framework stellt zwei <xref:System.IFormatProvider> Implementierungen zum Formatieren von zahlen bereit:  
  
-   Die <xref:System.Globalization.CultureInfo>-Klasse, die eine bestimmte Kultur (oder eine bestimmte Sprache in einem bestimmten Land oder einer bestimmten Region) darstellt. Bei einem numerischen Formatierungs Vorgang gibt die <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>-Methode das <xref:System.Globalization.NumberFormatInfo>-Objekt zurück, das der <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>-Eigenschaft zugeordnet ist.  
  
-   Die <xref:System.Globalization.NumberFormatInfo>-Klasse, die Informationen zu den Formatierungs Konventionen der zugeordneten Kultur bereitstellt. Die <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType>-Methode gibt eine Instanz von sich selbst zurück.  
  
 Wenn eine <xref:System.IFormatProvider> Implementierung nicht explizit für eine Formatierungs Methode bereitgestellt wird, wird ein <xref:System.Globalization.CultureInfo> Objekt verwendet, das von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, die die aktuelle Thread Kultur darstellt.  
  
 Das folgende Beispiel veranschaulicht die Beziehung zwischen der <xref:System.IFormatProvider>-Schnittstelle und der <xref:System.Globalization.NumberFormatInfo>-Klasse in Formatierungs Vorgängen durch Definieren einer benutzerdefinierten <xref:System.IFormatProvider>-Implementierung. Die <xref:System.IFormatProvider.GetFormat%2A>-Methode zeigt den Typnamen des Objekts an, das vom Formatierungs Vorgang angefordert wird. Wenn die Schnittstelle ein <xref:System.Globalization.NumberFormatInfo> Objekt anfordert, stellt diese Methode das <xref:System.Globalization.NumberFormatInfo>-Objekt für die aktuelle Thread Kultur bereit. Wie die Ausgabe des Beispiels zeigt, fordert die <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>-Methode ein <xref:System.Globalization.NumberFormatInfo>-Objekt an, um Formatierungsinformationen bereitzustellen, während die <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>-Methode <xref:System.Globalization.NumberFormatInfo>-und <xref:System.Globalization.DateTimeFormatInfo>-Objekte sowie eine <xref:System.ICustomFormatter>-Implementierung anfordert.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 Wenn eine <xref:System.IFormatProvider> Implementierung nicht explizit in einem Aufruf der numerischen Formatierungs Methode bereitgestellt wird, ruft die-Methode die `CultureInfo.CurrentCulture.GetFormat`-Methode auf, die das <xref:System.Globalization.NumberFormatInfo>-Objekt zurückgibt, das der aktuellen Thread Kultur entspricht.  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>Format Zeichenfolgen und Eigenschaften von "numformatinfo"  
 Jeder Formatierungs Vorgang verwendet entweder eine Standard-oder eine benutzerdefinierte numerische Format Zeichenfolge, um eine Ergebnis Zeichenfolge aus einer Zahl zu erhalten In einigen Fällen ist die Verwendung einer Format Zeichenfolge zum Entwickeln einer Ergebnis Zeichenfolge explizit, wie im folgenden Beispiel gezeigt. Dieser Code Ruft die <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>-Methode auf, um einen <xref:System.Decimal>-Wert unter Verwendung der Formatierungs Konventionen der Kultur "en-US" in eine Reihe unterschiedlicher Zeichen folgen Darstellungen zu konvertieren.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 In anderen Fällen ist die Verwendung einer Format Zeichenfolge implizit. Beispielsweise wird im folgenden Methodenaufruf der Standardmethode oder der Parameter losen-<xref:System.Decimal.ToString?displayProperty=nameWithType> Methode der Wert der <xref:System.Decimal> Instanz mit dem allgemeinen Format Bezeichner "G" und den Konventionen der aktuellen Kultur formatiert, in diesem Fall die Kultur "en-US".  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 Jede standardmäßige numerische Format Zeichenfolge verwendet mindestens eine <xref:System.Globalization.NumberFormatInfo> Eigenschaften, um das Muster oder die in der Ergebnis Zeichenfolge verwendeten Symbole zu bestimmen. Ebenso werden von jedem benutzerdefinierten numerischen Format Bezeichner mit Ausnahme von "0" und "#" Symbole in die Ergebnis Zeichenfolge eingefügt, die durch <xref:System.Globalization.NumberFormatInfo> Eigenschaften definiert werden. In der folgenden Tabelle werden die standardmäßigen und benutzerdefinierten numerischen Format Bearbeiter und deren zugeordnete <xref:System.Globalization.NumberFormatInfo> Eigenschaften aufgelistet.  Informationen zum Ändern der Darstellung der Ergebnis Zeichenfolge für eine bestimmte Kultur finden Sie im Abschnitt Ändern der Eigenschaften von " [numformatinfo](#modifying) ". Ausführliche Informationen zur Verwendung dieser Format Bearbeiter finden Sie unter [Standard mäßige Zahlenformat](~/docs/standard/base-types/standard-numeric-format-strings.md) Zeichenfolgen und [benutzerdefinierte Zahlenformat](~/docs/standard/base-types/custom-numeric-format-strings.md)Zeichenfolgen.  
  
|Formatbezeichner|Zugeordnete Eigenschaften|  
|----------------------|---------------------------|  
|"C" oder "c" (Currency Format-Spezifizierer)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, um die Standard Anzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, um die Gruppe oder Tausender Trennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>, um die Größen von ganzzahligen Gruppen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>, um das Muster negativer Währungswerte zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>, um das Muster positiver Währungswerte zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, um das Währungssymbol zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.|  
|"D" oder "d" (Dezimal Format Bezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.|  
|"E" oder "e" (exponentieller oder wissenschaftlicher Format Bezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das negative Vorzeichen Symbol in der Mantisse und dem Exponenten zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, um das positive Vorzeichen Symbol im Exponent zu definieren.|  
|"F" oder "f" (fixpointformatspezifizierer)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, um die Standard Anzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.|  
|"G" oder "g" (allgemeiner Format Bezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, um das positive Vorzeichen Symbol für Ergebnis Zeichenfolgen im exponentiellen Format zu definieren.|  
|"N" oder "n" (Zahlenformat Bezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, um die Standard Anzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, um das Gruppen Trennzeichen (Tausender) zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, um die Anzahl der ganzzahligen Ziffern in einer Gruppe zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>, um das Format von negativen Werten zu definieren.|  
|"P" oder "p" (Prozent Format Bezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>, um die Standard Anzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, um das Gruppen Trennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, um die Anzahl der ganzzahligen Ziffern in einer Gruppe zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>, um die Platzierung des Prozent Symbols und das negative Symbol für negative Werte zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>, um die Platzierung des Prozent Symbols für positive Werte zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, um das Prozent Symbol zu definieren.|  
|"R" oder "r" (Roundtrip-Formatspezifizierer)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Symbol für das negative Vorzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, um das positive Vorzeichen Symbol in einem Exponenten zu definieren.|  
|"X" oder "x" (hexadezimal Formatspezifizierer)|None.|  
|"." (benutzerdefinierter Format Bezeichner für Dezimaltrennzeichen)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.|  
|"," (benutzerdefinierter Format Bezeichner für Gruppen Trennzeichen)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, um das Trennzeichen für Gruppen (Tausender) zu definieren.|  
|"%" (benutzerdefinierter Format Bezeichner für Platzhalter)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, um das Prozent Symbol zu definieren.|  
|"°" (benutzerdefinierter Format Bezeichner pro Mille-Platzhalter)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>, um das Promille Symbol zu definieren.|  
|"E" (benutzerdefinierter Format Bezeichner für Exponentialnotation)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das negative Vorzeichen Symbol in der Mantisse und dem Exponenten zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, um das positive Vorzeichen Symbol im Exponent zu definieren.|  
  
 Beachten Sie, dass die <xref:System.Globalization.NumberFormatInfo>-Klasse eine <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>-Eigenschaft enthält, die die von einer bestimmten Kultur verwendeten Basis 10 Ziffern angibt. Die-Eigenschaft wird jedoch nicht in Formatierungs Vorgängen verwendet. nur die grundlegenden lateinischen Ziffern 0 (u + 0030) bis 9 (u + 0039) werden in der Ergebnis Zeichenfolge verwendet. Außerdem besteht für <xref:System.Single>-und <xref:System.Double> Werte von `NaN`, `PositiveInfinity`und `NegativeInfinity`die Ergebnis Zeichenfolge ausschließlich aus den Symbolen, die durch die Eigenschaften <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>und <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> definiert werden.  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>Ändern von Eigenschaften vom datformatinfo  
 Sie können die Eigenschaften eines <xref:System.Globalization.NumberFormatInfo> Objekts ändern, um die in einem numerischen Formatierungs Vorgang erstellte Ergebnis Zeichenfolge anzupassen. Dazu gehen Sie folgendermaßen vor:  
  
1.  Erstellen Sie eine Lese-/Schreibkopie eines <xref:System.Globalization.NumberFormatInfo> Objekts, dessen Formatierungs Konventionen Sie ändern möchten. Weitere Informationen finden Sie im Abschnitt [Instanziieren eines numformatinfo-Objekts](#Instantiating) .  
  
2.  Ändern Sie die-Eigenschaft oder die-Eigenschaften, die zum Entwickeln der gewünschten Ergebnis Zeichenfolge verwendet werden. Informationen dazu, wie Formatierungs Methoden <xref:System.Globalization.NumberFormatInfo> Eigenschaften zum Definieren von Ergebnis Zeichenfolgen verwenden, finden Sie im Abschnitt Formatieren von Zeichen folgen [und Eigenschaften](#properties) von "Eigenschaften".  
  
3.  Verwenden Sie das benutzerdefinierte <xref:System.Globalization.NumberFormatInfo> Objekt als <xref:System.IFormatProvider>-Argument in Aufrufen von Formatierungs Methoden.  
  
> [!NOTE]
>  Anstatt die Eigenschaftswerte einer Kultur bei jedem Start einer Anwendung dynamisch zu ändern, können Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse verwenden, um entweder eine benutzerdefinierte Kultur (eine Kultur mit einem eindeutigen Namen, die vorhandene Kulturen ergänzt) oder eine Ersatz Kultur (die anstelle einer bestimmten Kultur verwendet wird) zu definieren.  
  
 In den folgenden Abschnitten finden Sie einige Beispiele.  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>Ändern des Währungs Symbols und des Musters  
 Im folgenden Beispiel wird ein <xref:System.Globalization.NumberFormatInfo> Objekt geändert, das die Formatierungs Konventionen der Kultur "en-US" darstellt. Das Währungssymbol ISO-4217 wird der <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>-Eigenschaft zugewiesen und ein Muster für Währungswerte definiert, das aus dem Währungssymbol gefolgt von einem Leerzeichen und einem numerischen Wert besteht.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>Formatieren einer nationalen Identifikationsnummer  
 Viele nationale Identifikationsnummern bestehen ausschließlich aus Ziffern und können daher leicht formatiert werden, indem Sie die Eigenschaften eines <xref:System.Globalization.NumberFormatInfo> Objekts ändern. Beispielsweise besteht eine Sozialversicherungsnummer im USA aus 9 Ziffern wie folgt: `XXX-XX-XXXX`. Im folgenden Beispiel wird davon ausgegangen, dass die Sozialversicherungsnummern als ganzzahlige Werte gespeichert und entsprechend formatiert werden.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>Verarbeiten numerischer Zeichenfolgen  
 Bei der-Initialisierung wird die Zeichen folgen Darstellung einer Zahl in eine Zahl konvertiert. Jeder numerische Typ in der .NET Framework enthält zwei überladene Methoden zur Überladung: `Parse` und `TryParse`. Die `Parse`-Methode konvertiert eine Zeichenfolge in eine Zahl und löst eine Ausnahme aus, wenn bei der Konvertierung ein Fehler auftritt. Die `TryParse`-Methode konvertiert eine Zeichenfolge in eine Zahl, weist die Zahl einem `out`-Argument zu und gibt einen <xref:System.Boolean> Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.  
  
 Die Analyse-Methoden verwenden implizit oder explizit einen <xref:System.Globalization.NumberStyles> Enumerationswert, um zu bestimmen, welche Stilelemente (z. b. Gruppen Trennzeichen, ein Dezimaltrennzeichen oder ein Währungssymbol) in einer Zeichenfolge vorhanden sein können, wenn der Analyse-Vorgang erfolgreich ist. Wenn im Methoden Aufrufwert kein <xref:System.Globalization.NumberStyles> Wert bereitgestellt wird, ist der Standardwert ein <xref:System.Globalization.NumberStyles> Wert, der die <xref:System.Globalization.NumberStyles.Float> und <xref:System.Globalization.NumberStyles.AllowThousands> Flags enthält, die angeben, dass die analysierte Zeichenfolge Gruppen Symbole, ein Dezimaltrennzeichen, ein negatives Zeichen und Leerzeichen enthalten kann, oder es kann sich um die Zeichen folgen Darstellung einer Zahl in Exponentialnotation handeln.  
  
 Die Analysemethoden verwenden auch implizit oder explizit ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die spezifischen Symbole und Muster definiert, die in der zu testenden Zeichenfolge vorkommen können. Wenn kein <xref:System.Globalization.NumberFormatInfo> Objekt bereitgestellt wird, ist der Standardwert der <xref:System.Globalization.NumberFormatInfo> für die aktuelle Thread Kultur. Weitere Informationen zur-Verarbeitung finden Sie in den einzelnen Methoden zum Auswerten, wie z. b. <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>, <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>, <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>und <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>.  
  
 Im folgenden Beispiel wird die Kultur abhängige Darstellung von Zeichen folgen veranschaulicht. Es wird versucht, eine Zeichenfolge zu analysieren, die Tausende Trennzeichen enthält, indem die Konventionen der Kultur en-US, fr-FR und invariante verwendet werden. Eine Zeichenfolge, die das Komma als Gruppen Trennzeichen enthält, und der Zeitraum als Dezimaltrennzeichen kann nicht in der fr-FR-Kultur analysiert werden, und eine Zeichenfolge mit Leerraum als Gruppen Trennzeichen und ein Komma als Dezimaltrennzeichen können nicht in den en-US-und invarianten Kulturen analysiert werden.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 Die Verarbeitung erfolgt in der Regel in zwei Kontexten:  
  
-   Als Vorgang, der zum Konvertieren von Benutzereingaben in einen numerischen Wert entworfen wurde.  
  
-   Als Vorgang, der für einen Roundtrip für einen numerischen Wert konzipiert ist. Das heißt, um einen numerischen Wert zu deserialisieren, der zuvor als Zeichenfolge serialisiert wurde.  
  
 In den folgenden Abschnitten werden diese beiden Vorgänge ausführlicher erläutert.  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>Benutzer Zeichenfolgen werden verarbeitet.  
 Wenn Sie numerische Zeichen folgen Eingaben durch den Benutzer durchlaufen, sollten Sie immer ein <xref:System.Globalization.NumberFormatInfo> Objekt instanziieren, das die Kultur Einstellungen des Benutzers widerspiegelt. Informationen dazu, wie ein <xref:System.Globalization.NumberFormatInfo> Objekt instanziiert wird, das Benutzeranpassungen widerspiegelt, finden Sie im Abschnitt zu " [numformatinfo" und "Dynamic Data](#dynamic) ".  
  
 Das folgende Beispiel veranschaulicht den Unterschied zwischen einem-Verarbeitungsvorgang, der Benutzer Kultur Einstellungen widerspiegelt, und einem, der nicht. In diesem Fall ist die Standardsystem Kultur "en-US", aber der Benutzer hat "," als Dezimalzeichen und "." als Gruppen Trennzeichen in der Systemsteuerung, der **Region und der Sprache**definiert. Normalerweise werden diese Symbole in der Standard Kultur "en-US" umgekehrt. Wenn der Benutzer eine Zeichenfolge eingibt, die die Benutzereinstellungen widerspiegelt, und die Zeichenfolge von einem <xref:System.Globalization.NumberFormatInfo> Objekt analysiert wird, das auch Benutzereinstellungen (außer Kraft setzungen) reflektiert, gibt der Analyse Vorgang ein korrektes Ergebnis zurück. Wenn die Zeichenfolge jedoch von einem <xref:System.Globalization.NumberFormatInfo> Objekt analysiert wird, das die standardmäßigen en-US-Kultur Einstellungen widerspiegelt, ist das Komma Symbol für ein Gruppen Trennzeichen fehlerhaft, und es wird ein falsches Ergebnis zurückgegeben.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>Serialisieren und Deserialisieren von numerischen Daten  
 Wenn numerische Daten im Zeichen folgen Format serialisiert und später deserialisiert und analysiert werden, sollten die Zeichen folgen mithilfe der Konventionen der invarianten Kultur generiert und analysiert werden. Die Formatierungs-und die-Diagnose Vorgänge sollten niemals die Konventionen einer bestimmten Kultur widerspiegeln. Wenn kulturspezifische Einstellungen verwendet werden, ist die Portabilität der Daten streng eingeschränkt. Sie kann nur in einem Thread deserialisiert werden, dessen kulturspezifische Einstellungen mit denen des Threads identisch sind, in dem Sie serialisiert wurde. In einigen Fällen bedeutet dies, dass die Daten nicht einmal erfolgreich auf dem gleichen System deserialisiert werden können, auf dem Sie serialisiert wurde.  
  
 Im folgenden Beispiel wird veranschaulicht, was passieren kann, wenn dieses Prinzip verletzt wird. Gleit Komma Werte in einem Array werden in Zeichen folgen konvertiert, wenn der aktuelle Thread die kulturspezifischen Einstellungen der Kultur "en-US" verwendet. Die Daten werden dann von einem Thread analysiert, der die kulturspezifischen Einstellungen der Kultur "en-GB" verwendet. In diesem Fall werden zwar die einzelnen Verarbeitungsvorgänge erfolgreich ausgeführt, die Daten werden jedoch nicht erfolgreich gerundet, und es tritt eine Beschädigung der Daten auf. In anderen Fällen kann es bei einem Verarbeitungsvorgang zu einem Fehler kommen, und es könnte eine <xref:System.FormatException> Ausnahme ausgelöst werden.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Globalization.NumberFormatInfo>-Objekt für ein entsprechendes <xref:System.Globalization.CultureInfo> Objekt abgerufen wird und wie das abgerufene Objekt verwendet wird, um Zahlen Formatierungsinformationen für die jeweilige Kultur abzufragen.  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">Benutzerdefinierte Zahlenformatzeichenfolgen</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue, schreibbare Instanz der <see cref="T:System.Globalization.NumberFormatInfo" />-Klasse, die kulturunabhängig (invariant) ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften der neuen Instanz können geändert werden, wenn die Anwendung eine benutzerdefinierte Formatierung erfordert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Clone() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Clone();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine flache Kopie des <see cref="T:System.Globalization.NumberFormatInfo" />-Objekts.</summary>
        <returns>Ein neues Objekt, das aus dem ursprünglichen <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt kopiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Klon ist beschreibbar, auch wenn das ursprüngliche <xref:System.Globalization.NumberFormatInfo>-Objekt schreibgeschützt ist. Daher können die Eigenschaften des Klons mit benutzerdefinierten Mustern geändert werden.  
  
 Eine flache Kopie eines-Objekts ist nur eine Kopie des-Objekts. Wenn das Objekt Verweise auf andere Objekte enthält, erstellt die flache Kopie keine Kopien der referenzierten Objekte. Stattdessen wird auf die ursprünglichen Objekte verwiesen. Andererseits erstellt eine tiefe Kopie eines Objekts eine Kopie des Objekts und eine Kopie aller Elemente, die direkt oder indirekt von diesem Objekt referenziert werden. Im Fall eines <xref:System.Globalization.NumberFormatInfo> Objekts genügt eine flache Kopie zum Kopieren aller Instanzeigenschaften, da alle Eigenschaften, die Objekt Verweise zurückgeben, `static` (`Shared` in Visual Basic) sind.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.NumberFormatInfo.Clone%2A>-Methode verwendet, um eine Lese-/Schreibkopie eines <xref:System.Globalization.NumberFormatInfo>-Objekts zu erstellen, das die numerischen Formatierungs Konventionen der aktuellen Thread Kultur darstellt.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der in Währungswerten zu verwendenden Dezimalstellen ab oder legt diese fest.</summary>
        <value>Die Anzahl der in Währungsangaben zu verwendenden Dezimalstellen. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "C" ohne genauigkeitsspezifizierer in numerischen Formatierungs Vorgängen verwendet. Definiert die Standard Anzahl von Dezimalstellen, die nach dem Dezimaltrennzeichen angezeigt werden. Dieser Wert wird überschrieben, wenn ein Genauigkeits Bezeichner verwendet wird. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 99 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die in Währungsangaben als Dezimaltrennzeichen zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die in Währungsangaben als Dezimaltrennzeichen zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anfangswert dieser Eigenschaft wird von den Einstellungen in den Bereichen **Region und Sprache** in der Systemsteuerung abgeleitet.  
  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "C" verwendet, um das Symbol zu definieren, das eine Ganzzahl von Bruch Ziffern trennt. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird auf eine leere Zeichenfolge festgelegt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, mit der bei Währungsangaben Zifferngruppen links vom Dezimaltrennzeichen getrennt werden, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, mit der bei Währungsangaben Zifferngruppen links vom Dezimaltrennzeichen getrennt werden. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anfangswert dieser Eigenschaft wird von den Einstellungen im Regions **-und sprach** Element in der Systemsteuerung abgeleitet.  
  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "C" verwendet, um das Symbol zu definieren, das Gruppen von ganzzahligen Ziffern trennt. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Währungsangaben ab oder legt diese fest.</summary>
        <value>Die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Währungsangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ein eindimensionales Array, das ein einziges, auf 3 festgelegtes Element enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "C" verwendet, um die Anzahl der Ziffern zu definieren, die in integralen Gruppen angezeigt werden. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md). Jedes Element im eindimensionalen Array muss eine ganze Zahl zwischen 1 und 9 sein. Das letzte Element kann 0 sein.  
  
 Das erste Element des Arrays definiert die Anzahl der Elemente in der am wenigsten wichtigen Gruppe von Ziffern direkt links vom <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>. Jedes nachfolgende Element verweist auf die nächste bedeutende Gruppe von Ziffern links von der vorherigen Gruppe. Wenn das letzte Element des Arrays nicht 0 ist, werden die restlichen Ziffern basierend auf dem letzten Element des Arrays gruppiert. Wenn das letzte Element 0 ist, werden die restlichen Ziffern nicht gruppiert.  
  
 Wenn das Array z. b. {3, 4, 5} enthält, sind die Ziffern ähnlich wie "$ 55, 55555, 55555, 55555, 4444, 333.00" gruppiert. Wenn das Array {3, 4, 0} enthält, sind die Ziffern ähnlich wie "$ 55555555555555555, 4444, 333.00" gruppiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der kleiner als 0 oder größer als 9 ist.  
  
 - oder -  
  
 Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der nicht der letzte Eintrag ist, der auf 0 festgelegt ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für negative Währungsangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für negative Währungsangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 0 (null), womit "($n)" dargestellt wird, wobei "$" das <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "C" verwendet, um das Muster negativer Währungswerte zu definieren. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft verfügt über einen der Werte in der folgenden Tabelle. Das Symbol "$" ist die <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, das Symbol "-" ist der <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, und `n` ist eine Zahl.  
  
|Wert|Zugeordnetes Muster|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$-n|  
|3|$n:|  
|4|(n $)|  
|5|-n $|  
|6|n-$|  
|7|n$-|  
|8|-n $|  
|9|-$ n|  
|10|n $-|  
|11|$ n-|  
|12|$-n|  
|13|n-$|  
|14|($ n)|  
|15|(n $)|  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>-Eigenschaft das Format negativer Währungswerte definiert.  Dabei werden alle spezifischen Kulturen abgerufen, die auf dem Host Computer definiert sind, und die <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> Eigenschafts Wert jeder Kultur, das zugehörige Muster und eine Zahl, die als Währungswert formatiert ist, angezeigt.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 15 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für positive Währungsangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für positive Währungsangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 0 (null), womit "$n" dargestellt wird, wobei "$" das <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "C" verwendet, um ein Muster positiver Währungswerte zu definieren. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft verfügt über einen der Werte in der folgenden Tabelle. Das Symbol "$" ist die <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, und `n` ist eine Zahl.  
  
|Wert|Zugeordnetes Muster|  
|-----------|------------------------|  
|0|$n|  
|1|n $|  
|2|$ n|  
|3|n $|  
  
 Beachten Sie, dass das Muster kein positives Vorzeichen unterstützt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 3 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die als Währungssymbol zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die als Währungssymbol zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "¤".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die der <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>-Eigenschaft zugewiesene Zeichenfolge ist in der Ergebnis Zeichenfolge enthalten, wenn ein numerischer Wert mit der [standardmäßigen numerischen Format Zeichenfolge](~/docs/standard/base-types/standard-numeric-format-strings.md)"C" formatiert wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt das Währungssymbol für die aktuelle Kultur an und verwendet die standardmäßige numerische Format Zeichenfolge "C", um einen Währungswert zu formatieren.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine schreibgeschützte <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die Werte auf Grundlage der aktuellen Kultur formatiert.</summary>
        <value>Eine schreibgeschützte <see cref="T:System.Globalization.NumberFormatInfo" />, die auf der Kultur des aktuellen Threads basiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Abrufen eines <xref:System.Globalization.NumberFormatInfo> Objekts aus der <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>-Eigenschaft entspricht dem Abrufen eines <xref:System.Globalization.NumberFormatInfo> Objekts aus der `CultureInfo.CurrentCulture.NumberFormat`-Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, dass die Objekte, die von den Eigenschaften <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> und `CultureInfo.CurrentCulture.NumberFormat` zurückgegeben werden, identisch sind. Anschließend werden mithilfe von Reflektion die Eigenschaftswerte des <xref:System.Globalization.NumberFormatInfo> Objekts angezeigt, das von der <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>-Eigenschaft auf einem System zurückgegeben wird, dessen aktuelle Kultur en-US ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, in welcher Form die grafische Benutzeroberfläche Ziffern anzeigt.</summary>
        <value>Einer der Enumerationswerte, der die kulturspezifische Ziffernform angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Die <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A>-Eigenschaft ist für die zukünftige Verwendung reserviert. Derzeit wird Sie nicht für die Verarbeitung oder Formatierung von Vorgängen für das aktuelle <xref:System.Globalization.NumberFormatInfo> Objekt verwendet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem SET-Vorgang ist kein gültiger <see cref="T:System.Globalization.DigitShapes" />-Wert.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Der <see cref="T:System.Type" /> des erforderlichen Formatierungsdiensts.</param>
        <summary>Ruft ein Objekt vom angegebenen Typ ab, das einen Zahlenformatierungsdienst bereitstellt.</summary>
        <returns>Die aktuelle <see cref="T:System.Globalization.NumberFormatInfo" />, wenn<paramref name="formatType" /> mit dem Typ der aktuellen <see cref="T:System.Globalization.NumberFormatInfo" />, andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von den Basis Datentypen unterstützten `Format(String, IFormatProvider)` Methoden rufen diese Methode auf, wenn die aktuelle <xref:System.Globalization.NumberFormatInfo> als <xref:System.IFormatProvider>-Parameter übergeben wird. Diese Methode implementiert <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Der <see cref="T:System.IFormatProvider" />, der zum Abrufen der <see cref="T:System.Globalization.NumberFormatInfo" /> verwendet wird.  
  
- oder - 
 <see langword="null" /> zum Abrufen von <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</param>
        <summary>Ruft die <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die dem angegebenen <see cref="T:System.IFormatProvider" /> zugeordnet ist.</summary>
        <returns>Die <see cref="T:System.Globalization.NumberFormatInfo" />, die dem angegebenen <see cref="T:System.IFormatProvider" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode `formatProvider` mithilfe von <xref:System.Globalization.NumberFormatInfo> als Typparameter. Wenn `formatProvider` `null` oder wenn <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> `null`zurückgibt, gibt diese Methode <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>zurück.  
  
 Die Anwendung ruft mithilfe einer der folgenden Methoden ein <xref:System.Globalization.NumberFormatInfo>-Objekt für eine bestimmte Kultur ab:  
  
-   Durch die <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>-Eigenschaft.  
  
-   Durch die <xref:System.Globalization.NumberFormatInfo.GetInstance%2A>-Methode, bei der `provider` ein <xref:System.Globalization.CultureInfo>ist.  
  
 Ein <xref:System.Globalization.NumberFormatInfo>-Objekt wird nur für die invariante Kultur oder für bestimmte Kulturen erstellt, nicht für neutrale Kulturen. Weitere Informationen über die invariante Kultur, bestimmte Kulturen und neutrale Kulturen finden Sie in der <xref:System.Globalization.CultureInfo>-Klasse.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein schreibgeschütztes <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ab, das kulturunabhängig (invariant) ist.</summary>
        <value>Ein schreibgeschütztes Objekt, das kulturunabhängig (invariant) ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses <xref:System.Globalization.NumberFormatInfo> Objekt, das von dieser Eigenschaft zurückgegeben wird, ändert sich nicht, unabhängig von der aktuellen Kultur. Sie stellt die Formatierungs Konventionen der invarianten Kultur dar, bei der es sich um eine Kultur handelt, die der englischen Sprache, aber nicht mit einem Land/einer Region zugeordnet ist. Die invariante Kultur wird bei Formatierungs Vorgängen verwendet, die Kultur unabhängig sind oder Ergebnis Zeichenfolgen für die Anzeige über mehrere Kulturen liefern.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardeigenschaftswerte des <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>angezeigt.  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt schreibgeschützt ist.</summary>
        <value>Ist <see langword="true" />, wenn die <see cref="T:System.Globalization.NumberFormatInfo" /> schreibgeschützt ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie versuchen, eine Zuweisung zu einer Eigenschaft eines schreibgeschützten <xref:System.Globalization.NumberFormatInfo> auszuführen, wird ein <xref:System.InvalidOperationException>verursacht.  
  
 Sie können die <xref:System.Globalization.NumberFormatInfo.Clone%2A>-Methode aufzurufen, um ein Lese-/Schreib-<xref:System.Globalization.NumberFormatInfo>-Objekt aus einem schreibgeschützten-Objekt zu erstellen, wie im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die den IEEE-NaN-Wert (Not a Number) darstellt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die den IEEE-NaN-Wert (Not a Number) darstellt. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "NaN".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Nan-Werten finden Sie unter <xref:System.Double> oder <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Zeichenfolgenarray mit systemeigenen Ziffern ab, die den europäischen Ziffern 0 (null) bis 9 entsprechen, oder legt ein entsprechendes Zeichenfolgenarray fest.</summary>
        <value>Eine Zeichenfolgenarray, das das systemeigene Äquivalent der westlichen Ziffern 0 bis 9 enthält. Standard ist ein Array mit den Elementen "0", "1", "2", "3", "4", "5", "6", "7", "8" und "9".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Der Zeichensatz, der durch die <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>-Eigenschaft angegeben wird, hat keine Auswirkung auf die Verarbeitung oder Formatierung von Vorgängen. Beim Formatieren oder Auswerten von numerischen Werten oder Datums-und Uhrzeitwerten werden nur die grundlegenden lateinischen Ziffern 0 (u + 0030) bis 9 (u + 0039) verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentNullException">In einem Set-Vorgang ist der Wert <see langword="null" />.  
  
- oder - 
In einem Set-Vorgang ist ein Element des Wertearrays <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">In einem Set-Vorgang enthält das Wertearray nicht 10 Elemente.  
  
- oder - 
In einem Set-Vorgang enthält ein Element des Wertearrays entweder kein einzelnes <see cref="T:System.Char" />-Objekt oder kein Paar von <see cref="T:System.Char" />-Objekten, die ein Ersatzzeichenpaar bilden.  
  
- oder - 
In einem Mengenvorgang ist ein Element des Wertearrays keine wie im [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) definierte Zahl. Das heißt, die Ziffer im Arrayelement weist nicht den Wert der Unicode General Category <see langword="Number, Decimal Digit" /> (Nd) auf.  
  
- oder - 
In einem Set-Vorgang entspricht der numerische Wert eines Elements im Wertearray nicht der Position des Elements im Array. Das heißt, dass das Element an Index 0, bei dem es sich um das erste Element des Arrays handelt, nicht den numerischen Wert 0 hat, oder das Element an Index 1 nicht den numerischen Wert 1 hat.</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die minus unendlich darstellt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die minus unendlich darstellt. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "-Infinity".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu minus unendlich finden Sie unter <xref:System.Double> oder <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die kennzeichnet, dass die zugeordnete Zahl negativ ist, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die kennzeichnet, dass die zugeordnete Zahl negativ ist. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "-".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird sowohl bei Formatierungs-als auch bei der Ausführung von Vorgängen verwendet. Weitere Informationen zur Verwendung bei Formatierungs Vorgängen finden Sie in den Themen zu den [Standard mäßigen Zahlenformat](~/docs/standard/base-types/standard-numeric-format-strings.md) Zeichenfolgen und [benutzerdefinierten Zahlenformat](~/docs/standard/base-types/custom-numeric-format-strings.md) Zeichenfolgen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Lese-/Schreib<xref:System.Globalization.CultureInfo>-Objekt instanziiert, das die invariante Kultur darstellt, und der <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> Eigenschaft wird das Overline-Zeichen (U + 203e) zugewiesen. Anschließend wird dieses <xref:System.Globalization.CultureInfo> Objekt verwendet, um ein Array negativer Gleit Komma Zahlen zu formatieren.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der in numerischen Werten zu verwendenden Dezimalstellen ab oder legt diese fest.</summary>
        <value>Die Anzahl der in numerischen Werten zu verwendenden Dezimalstellen. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>-Eigenschaft wird mit den Standardformat Zeichenfolgen "F" und "N" ohne Genauigkeits Angabe in numerischen Formatierungs Vorgängen verwendet. Definiert die Standard Anzahl von Dezimalstellen, die nach dem Dezimaltrennzeichen angezeigt werden. Dieser Wert wird überschrieben, wenn ein Genauigkeits Bezeichner verwendet wird. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 99 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die in numerischen Werten als Dezimaltrennzeichen zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Gibt die in numerischen Werten als Dezimaltrennzeichen zu verwendende Zeichenfolge an. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>-Eigenschaft wird mit den standardmäßigen Format Zeichenfolgen "E", "F", "G", "N" und "R" verwendet, um das Symbol zu definieren, das ganzzahlige Ziffern von Bruch Ziffern trennt. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 Der Anfangswert dieser Eigenschaft wird von den Einstellungen in den Bereichen **Region und Sprache** in der Systemsteuerung abgeleitet.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird auf eine leere Zeichenfolge festgelegt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, mit der bei numerischen Werten Zifferngruppen links vom Dezimaltrennzeichen getrennt werden, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, mit der bei numerischen Werten Zifferngruppen links vom Dezimaltrennzeichen getrennt werden. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "N" verwendet, um das Symbol zu definieren, das Gruppen von ganzzahligen Ziffern trennt. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 Der Anfangswert dieser Eigenschaft wird von den Einstellungen in den Bereichen **Region und Sprache** in der Systemsteuerung abgeleitet.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in numerischen Werten ab oder legt diese fest.</summary>
        <value>Die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in numerischen Werten. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ein eindimensionales Array, das ein einziges, auf 3 festgelegtes Element enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>-Eigenschaft wirkt sich auf das Ergebnis von Zahlenwerten aus, die mithilfe von "N" formatiert sind. Wenn eine benutzerdefinierte numerische Format Zeichenfolge oder andere standardmäßige numerische Format Zeichenfolgen verwendet werden, wird der Wert der <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>-Eigenschaft ignoriert.  
  
 Jedes Element im eindimensionalen Array muss eine ganze Zahl zwischen 1 und 9 sein. Das letzte Element kann 0 sein.  
  
 Das erste Element des Arrays definiert die Anzahl der Elemente in der am wenigsten wichtigen Gruppe von Ziffern direkt links vom <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>. Jedes nachfolgende Element verweist auf die nächste bedeutende Gruppe von Ziffern links von der vorherigen Gruppe. Wenn das letzte Element des Arrays nicht 0 ist, werden die restlichen Ziffern basierend auf dem letzten Element des Arrays gruppiert. Wenn das letzte Element 0 ist, werden die restlichen Ziffern nicht gruppiert.  
  
 Wenn das Array z. b. {3, 4, 5} enthält, sind die Ziffern ähnlich wie "55, 55555, 55555, 55555, 4444, 333.00" gruppiert. Wenn das Array {3, 4, 0} enthält, sind die Ziffern ähnlich wie "55555555555555555, 4444, 333.00" gruppiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 Im folgenden Beispiel wird ein Wert mit unterschiedlichen <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> Arrays ausgegeben.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der kleiner als 0 oder größer als 9 ist.  
  
 - oder -  
  
 Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der nicht der letzte Eintrag ist, der auf 0 festgelegt ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für negative numerische Werte ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für negative numerische Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>-Eigenschaft definiert das Format von negativen Werten, die mit der standardmäßigen numerischen Format Zeichenfolge "N" formatiert sind. Diese Eigenschaft verfügt über einen der Werte in der folgenden Tabelle. Das Symbol "-" ist die <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> und `n` eine Zahl ist.  
  
|Wert|Zugeordnetes Muster|  
|-----------|------------------------|  
|0|Nr|  
|1|-n|  
|2|-n|  
|3|Nr|  
|4|Nr|  
  
 Der Standardwert für die von der <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>-Eigenschaft zurückgegebene invariante Kultur ist 1, was "-n" darstellt, wobei " *n* " eine Zahl ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Wert mit unterschiedlichen <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> Mustern angezeigt.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 4 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der in Prozentwerten zu verwendenden Dezimalstellen ab oder legt diese fest.</summary>
        <value>Die Anzahl der in Prozentangaben zu verwendenden Dezimalstellen. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "P" ohne Genauigkeits Angabe in numerischen Formatierungs Vorgängen verwendet. Definiert die Standard Anzahl von Dezimalstellen, die nach dem Dezimaltrennzeichen angezeigt werden. Dieser Wert wird überschrieben, wenn ein Genauigkeits Bezeichner verwendet wird. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 99 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die in Prozentwerten als Dezimaltrennzeichen zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die in Prozentangaben als Dezimaltrennzeichen zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "P" verwendet, um das Symbol zu definieren, das eine Ganzzahl von Bruch Ziffern trennt. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird auf eine leere Zeichenfolge festgelegt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, mit der in Prozentwerten Zifferngruppen links vom Dezimaltrennzeichen getrennt werden, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, mit der bei Prozentangaben Zifferngruppen links vom Dezimaltrennzeichen getrennt werden. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "P" verwendet, um das Symbol zu definieren, das Gruppen von Ganzzahlen trennt. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Prozentwerten ab oder legt diese fest.</summary>
        <value>Die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Prozentangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ein eindimensionales Array, das ein einziges, auf 3 festgelegtes Element enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "P" verwendet, um die Anzahl der Ziffern zu definieren, die in integralen Gruppen angezeigt werden. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md). Jedes Element im eindimensionalen Array muss eine ganze Zahl zwischen 1 und 9 sein. Das letzte Element kann 0 sein.  
  
 Das erste Element des Arrays definiert die Anzahl der Elemente in der am wenigsten wichtigen Gruppe von Ziffern direkt links vom <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>. Jedes nachfolgende Element verweist auf die nächste bedeutende Gruppe von Ziffern links von der vorherigen Gruppe. Wenn das letzte Element des Arrays nicht 0 ist, werden die restlichen Ziffern basierend auf dem letzten Element des Arrays gruppiert. Wenn das letzte Element 0 ist, werden die restlichen Ziffern nicht gruppiert.  
  
 Wenn das Array z. b. {3, 4, 5} enthält, sind die Ziffern ähnlich wie "55, 55555, 55555, 55555, 4444, 333.00%" gruppiert. Wenn das Array {3, 4, 0} enthält, sind die Ziffern ähnlich wie "55555555555555555, 4444, 333.00%" gruppiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der kleiner als 0 oder größer als 9 ist.  
  
 - oder -  
  
 Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der nicht der letzte Eintrag ist, der auf 0 festgelegt ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für negative Prozentangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für negative Prozentangaben. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist (null), womit "-n %" dargestellt wird, wobei "%" das <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "P" verwendet, um das Muster negativer Prozentwerte zu definieren. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft verfügt über einen der Werte in der folgenden Tabelle. Das Symbol "%" ist die <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, das Symbol "-" ist der <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, und `n` ist eine Zahl. Die Werte 3-11 wurden in den .NET Framework 2,0 eingeführt und können in früheren Versionen nicht verwendet werden.  
  
|Wert|Zugeordnetes Muster|  
|-----------|------------------------|  
|0|Nr|  
|1|Nr|  
|2|-% n|  
|3|%-n|  
|4|%n-|  
|5|n-%|  
|6|n%-|  
|7|-% n|  
|8|n %-|  
|9|% n-|  
|10|% -n|  
|11|n-%|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert festgelegt, der kleiner als 0 oder größer als 11 ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für positive Prozentangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für positive Prozentangaben. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist (null), womit "n %" dargestellt wird, wobei "%" das <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>-Eigenschaft wird mit der Standardformat Zeichenfolge "P" verwendet, um ein Muster positiver Prozentwerte zu definieren. Weitere Informationen finden Sie unter [Numerische Standard-Formatzeichenfolgen](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft verfügt über einen der Werte in der folgenden Tabelle. Das Symbol "%" ist die <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, und `n` ist eine Zahl.  
  
|Wert|Zugeordnetes Muster|  
|-----------|------------------------|  
|0|Nr|  
|1|Nr|  
|2|% n|  
|3|% n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 3 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die als Prozentsymbol zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die als Prozentsymbol zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "%".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die der <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> Eigenschaft zugewiesene Zeichenfolge ist in der Ergebnis Zeichenfolge enthalten, wenn ein numerischer Wert mit "P" oder mit einer Format Zeichenfolge formatiert ist, die "%" enthält.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die als Promillesymbol zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die als Promillesymbol zu verwendende Zeichenfolge. Der Standardwert für<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "‰", also das Unicode-Zeichen "U+2030".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichenfolge, die der <xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>-Eigenschaft zugewiesen ist, wird in die Ergebnis Zeichenfolge eingeschlossen, wenn ein numerischer Wert mit einer Format Zeichenfolge formatiert wird, die den Wert "  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die plus unendlich darstellt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die plus unendlich darstellt. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "Infinity".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu positiven unendlich finden Sie unter <xref:System.Double> oder <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die kennzeichnet, dass die zugeordnete Zahl positiv ist, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die kennzeichnet, dass die zugeordnete Zahl positiv ist. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "+".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird nur zum Auswerten numerischer Zeichen folgen verwendet, nicht für die Formatierung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der in einem Set-Vorgang zuzuweisende Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">Die zu umschließende <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
        <summary>Gibt einen schreibgeschützten <see cref="T:System.Globalization.NumberFormatInfo" />-Wrapper zurück.</summary>
        <returns>Ein schreibgeschützter <see cref="T:System.Globalization.NumberFormatInfo" />-Wrapper um <paramref name="nfi" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wrapper verhindert Änderungen an `nfi`.  
  
 Wenn Sie versuchen, eine Zuweisung zu einer Eigenschaft eines schreibgeschützten <xref:System.Globalization.NumberFormatInfo> auszuführen, wird ein <xref:System.InvalidOperationException>verursacht.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nfi" /> ist <see langword="null" /></exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>

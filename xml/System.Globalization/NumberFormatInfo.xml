<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="113d3fbbda0876b5fbfe1ccb056490af1cbef7f9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30420934" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt kulturspezifische Informationen für Formatierung und Analyse für numerische Werte bereitstellt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo> Klasse enthält die kulturspezifischen Informationen, die beim Formatieren und Analysieren von numerischen Werten verwendet wird. Diese Informationen umfassen das Währungssymbol, das Dezimalsymbol, das Gruppentrennzeichen und die Symbole für positive und negative Zeichen.  
  
-   [Instanziieren eines NumberFormatInfo-Objekts](#Instantiating)  
  
    -   [Für die aktuelle Kultur](#Instantiating_Current)  
  
    -   [Für die invariante Kultur](#Instantiating_Invariant)  
  
    -   [Für eine bestimmte Kultur](#Instantiating_Specific)  
  
    -   [Für eine neutrale Kultur](#Instantiating_Neutral)  
  
-   [NumberFormatInfo und dynamische Daten](#dynamic)  
  
-   [IFormatProvider NumberFormatInfo und Formatieren von numerischen Daten](#formatProvider)  
  
-   [NumberFormatInfo-Eigenschaften und Formatzeichenfolgen](#properties)  
  
-   [NumberFormatInfo-Eigenschaften ändern](#modifying)  
  
    -   [Ändern das Währungssymbol und Muster](#currency)  
  
    -   [Eine persönliche Identifikationsnummer Formatierung](#id)  
  
-   [Verarbeiten numerischer Zeichenfolgen](#parsing)  
  
    -   [Analysieren von Benutzerzeichenfolgen](#ParseUser)  
  
    -   [Serialisieren und Deserialisieren von numerischen Daten](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>Instanziieren eines NumberFormatInfo-Objekts  
 Instanziieren Sie ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungskonventionen der aktuellen Kultur, die invariante Kultur, eine bestimmte Kultur oder eine neutrale Kultur darstellt.  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>Instanziieren eines NumberFormatInfo-Objekts für die aktuelle Kultur  
 Instanziieren Sie ein <xref:System.Globalization.NumberFormatInfo> -Objekt für die aktuelle Threadkultur in einem der folgenden Methoden. In jedem Fall die zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch das Abrufen von einer <xref:System.Globalization.CultureInfo> Objekt, das über die aktuelle Threadkultur darstellt der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft, und das Abrufen der <xref:System.Globalization.CultureInfo> -Objekt aus seiner <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Durch das Abrufen der <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt die `static` (`Shared` in Visual Basic) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> Methode mit einem <xref:System.Globalization.CultureInfo> Objekt, das die aktuelle Kultur darstellt.  
  
 Im folgenden Beispiel wird diese drei Methoden zum Erstellen von <xref:System.Globalization.NumberFormatInfo> Objekte, die die Formatierungskonventionen der aktuellen Kultur darstellen. Ruft den Wert auch ab der <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> Eigenschaft verdeutlichen, dass jedes Objekt schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 Sie können eine nicht schreibgeschützte erstellen <xref:System.Globalization.NumberFormatInfo> Objekt, das in einem der folgenden Methoden die Konventionen der aktuellen Threadkultur darstellt:  
  
-   Durch das Abrufen von einem <xref:System.Globalization.NumberFormatInfo> Objekt in jeder dieser Methoden, die im vorherigen Codebeispiel wird dargestellt, und Aufrufen der <xref:System.Globalization.NumberFormatInfo.Clone%2A> Methode für das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt. Erstellt eine Kopie des ursprünglichen <xref:System.Globalization.NumberFormatInfo> -Objekt, außer dass die <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> Eigenschaft ist `false`.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> Methode zum Erstellen einer <xref:System.Globalization.CultureInfo> -Objekt, das die aktuelle Kultur darstellt, und klicken Sie dann mithilfe seiner <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> abzurufende Eigenschaft der <xref:System.Globalization.NumberFormatInfo> Objekt.  
  
 Das folgende Beispiel veranschaulicht diese zwei Arten der Instanziierung einer <xref:System.Globalization.NumberFormatInfo> -Objekt und zeigt den Wert des seine <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> Eigenschaft verdeutlichen, dass das Objekt nicht schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Beachten Sie, dass die Windows-Betriebssystems auf der Benutzer einige der außer Kraft setzen kann die <xref:System.Globalization.NumberFormatInfo> Eigenschaftswerte in numerische Formatierung und Analyse von Operationen durch verwendet die **Region und Sprache** Element in der Systemsteuerung. Beispielsweise empfiehlt sich ein Benutzer mit der Kultur Englisch (Vereinigte Staaten) ist Currency-Werte als 1.1 USD anstelle des Standardwerts von $1.1 angezeigt. Die <xref:System.Globalization.NumberFormatInfo> Objekte abgerufen, auf die Weise erörtert zuvor spiegeln diese Benutzer Außerkraftsetzungen. Wenn dies nicht erwünscht ist, können Sie erstellen eine <xref:System.Globalization.NumberFormatInfo> -Objekt, das Benutzer Außerkraftsetzungen nicht wiedergibt (und außerdem Lese-/Schreibzugriff ist anstelle von nur-Lese) durch Aufrufen der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> Konstruktor und Bereitstellen eines Werts des `false` für die `useUserOverride` Argument. Das folgende Beispiel veranschaulicht ein System, dessen aktuelle Kultur Englisch (Vereinigte Staaten) ist und dessen Währungssymbol vom Standardwert $ in USD geändert wurde.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true`, die Eigenschaften <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>, und <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> werden auch von den Einstellungen des Benutzers abgerufen. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo> Objekt (z. B., wenn die ausgewählte Kalender nicht sortiert nach Kalender ist die <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> Eigenschaft), werden die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>Instanziieren eines NumberFormatInfo-Objekts, für die invariante Kultur  
 Die invariante Kultur darstellt, eine Kultur, die kulturunabhängig ist. Es basiert auf der englischen Sprache, jedoch nicht auf alle bestimmte englischsprachige Länder/Regionen. Obwohl die Daten für bestimmte Kulturen dynamisch sein können und können neue kulturelle Konventionen oder benutzereinstellungen entsprechend ändern, ändert sich die Daten der invarianten Kultur nicht. Ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungskonventionen der invarianten Kultur darstellt für Formatierungsvorgänge Zeichenfolgen sollten in der die nicht unterscheiden von Kultur verwendet werden kann.  
  
 Instanziieren Sie ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungskonventionen der invarianten Kultur auf folgende Weise darstellt:  
  
-   Durch das Abrufen des Werts der <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> Eigenschaft. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch das Abrufen des Werts der <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> Eigenschaft aus der <xref:System.Globalization.CultureInfo> von zurückgegebene Objekt der <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> Eigenschaft. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch Aufrufen der parameterlosen <xref:System.Globalization.NumberFormatInfo.%23ctor%2A> Klassenkonstruktor. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt wird Lese-/Schreibzugriff.  
  
 Im folgenden Beispiel wird jede dieser Methoden zum Instanziieren einer <xref:System.Globalization.NumberFormatInfo> -Objekt, das die invariante Kultur darstellt. Es gibt dann an, ob das Objekt schreibgeschützt ist,  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>Instanziieren eines NumberFormatInfo-Objekts für eine bestimmte Kultur  
 Eine bestimmte Kultur darstellt, eine Sprache, die in einem bestimmten Land/Region gesprochen wird. Z. B. En-US ist, eine bestimmte Kultur, die die englische Sprache, die in den Vereinigten Staaten darstellt, und de-Zertifizierungsstelle ist eine bestimmte Kultur, die die englische Sprache gesprochen in Kanada darstellt. Instanziieren Sie ein <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungskonventionen einer bestimmten Kultur auf folgende Weise darstellt:  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType> -Methode und das Abrufen des Werts zurückgegebenen <xref:System.Globalization.CultureInfo> des Objekts <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt.  
  
-   Durch Übergeben einer <xref:System.Globalization.CultureInfo> Objekt, das die Kultur darstellt, deren <xref:System.Globalization.NumberFormatInfo> Objekt der statischen abgerufen werden soll <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> Methode. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt wird Lese-/Schreibzugriff.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> -Methode und das Abrufen des Werts zurückgegebenen <xref:System.Globalization.CultureInfo> des Objekts <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt wird Lese-/Schreibzugriff.  
  
-   Durch Aufrufen einer der <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> Klasse, Konstruktoren und das Abrufen des Werts zurückgegebenen <xref:System.Globalization.CultureInfo> des Objekts <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Das zurückgegebene <xref:System.Globalization.NumberFormatInfo> Objekt wird Lese-/Schreibzugriff.  
  
 Im folgenden Beispiel wird diese vier Methoden zum Erstellen einer <xref:System.Globalization.NumberFormatInfo> -Objekt, das die Formatierungskonventionen der Kultur Indonesisch (Indonesien) wiedergibt. Es gibt auch an, ob jedes Objekt schreibgeschützt ist.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>Instanziieren eines Objekts NumberFormatInfo für eine neutrale Kultur  
 Eine neutrale Kultur darstellt, eine Kultur oder Sprache, die unabhängig von einem Land/Region ist. Es ist in der Regel das übergeordnete Element eine oder mehrere bestimmte Kulturen. Fr ist z. B. eine neutrale Kultur für die französische Sprache und das übergeordnete Element der fr-FR-Kultur. Sie erstellen eine <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungskonventionen einer neutralen Kultur in die gleiche Weise darstellt, die Sie erstellen eine <xref:System.Globalization.NumberFormatInfo> Objekt, das die Formatierungskonventionen einer bestimmten Kultur darstellt.  
  
> [!NOTE]
>  In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die beim Abrufen einer <xref:System.Globalization.NumberFormatInfo> -Objekt, das die Formatierungskonventionen einer neutralen Kultur widerspiegelt löst eine <xref:System.NotSupportedException> Ausnahme.  
  
 Allerdings ist es unabhängig von einem bestimmten Land/Region, verfügt nicht über eine neutrale Kultur kulturspezifische Formatierungsinformationen. Anstatt das Auffüllen der <xref:System.Globalization.NumberFormatInfo> -Objekt mit generischen Werte für die .NET Framework gibt eine <xref:System.Globalization.NumberFormatInfo> -Objekt, das die Formatierungskonventionen einer bestimmten Kultur, die widerspiegelt, ist ein untergeordnetes Element der neutralen Kultur. Z. B. die <xref:System.Globalization.NumberFormatInfo> -Objekt für die En neutrale Kultur die Formatierungskonventionen der Kultur En-US, wiedergibt und die <xref:System.Globalization.NumberFormatInfo> -Objekt für die Kultur fr die Formatierungskonventionen der Kultur fr-FR widerspiegelt.  
  
 Sie können Code wie den folgenden verwenden, die bestimmte Kultur Formatierungskonventionen bestimmen jedes neutrale Kultur darstellt.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo und dynamische Daten  
 Die länderspezifische zum Formatieren von numerischer Werten die <xref:System.Globalization.NumberFormatInfo> Klasse ist dynamisch, wie den kulturellen Daten der <xref:System.Globalization.CultureInfo> Klasse. Sie sollten keine Annahmen über die Stabilität der Werte für <xref:System.Globalization.NumberFormatInfo> verknüpften Objekte mit bestimmten <xref:System.Globalization.CultureInfo> Objekte. Nur die Daten, die die invariante Kultur und die zugehörigen gebotenen <xref:System.Globalization.NumberFormatInfo> Objekt stabil ist. Andere Daten können zwischen anwendungssitzungen oder sogar innerhalb einer einzelnen Sitzung den folgenden Gründen ändern:  
  
-   **Systemupdates.** Kulturelle Einstellungen wie z. B. das Währungssymbol oder Währungsformate der Zeit ändern. In diesem Fall handelt es sich bei Windows Update enthält Änderungen an der <xref:System.Globalization.NumberFormatInfo> Eigenschaftswert für eine bestimmte Kultur.  
  
-   **Ersatzkulturen.** Die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse kann verwendet werden, um die Daten einer vorhandenen Kultur ersetzen.  
  
-   **Kaskadierende Änderungen von Eigenschaftswerten.** Eine Reihe von Eigenschaften kulturbezogene kann zur Laufzeit, die wiederum eine ändern <xref:System.Globalization.NumberFormatInfo> Daten ändern. Beispielsweise kann für die aktuelle Kultur entweder programmgesteuert oder durch die Benutzeraktion geändert werden. In diesem Fall die <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> eigenschaftsänderungen für ein Objekt, das die aktuelle Kultur zugeordnet.  
  
-   **Benutzereinstellungen.** Benutzer der Anwendung möglicherweise einige der Werte, die die aktuelle Systemkultur die Region und Sprache Optionen in der Systemsteuerung zugeordneten außer Kraft gesetzt. Benutzer können z. B. ein anderes Währungssymbol verwendet oder ein Symbol, das abweichende Dezimaltrennzeichen auswählen. Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true` (der Standardwert), die Eigenschaften eines der <xref:System.Globalization.NumberFormatInfo> Objekt auch von den Einstellungen des Benutzers abgerufen werden.  
  
 Beginnend mit .NET Framework 2.0, alle Benutzer überschreibbaren Eigenschaften von einem <xref:System.Globalization.NumberFormatInfo> Objekt werden initialisiert, wenn das Objekt erstellt wird. Weiterhin die Möglichkeit besteht Inkonsistenzen, da keine Erstellung-Objekt noch die Außerkraftsetzung Benutzerprozess ist atomarisch, und die relevanten Werte während der Erstellung des Objekts ändern können. Allerdings sollten diese Inkonsistenzen tritt nur sehr selten sein.  
  
 Sie können steuern, ob Benutzer Außerkraftsetzungen in wiedergegeben werden <xref:System.Globalization.NumberFormatInfo> -Objekten, das dieselbe Kultur aufweist wie die aktuelle Threadkultur darstellen. Die folgende Tabelle enthält, auf welche Weise eine <xref:System.Globalization.NumberFormatInfo> Objekt abgerufen werden kann, und gibt an, ob das resultierende Objekt Außerkraftsetzungen für Benutzer widerspiegeln.  
  
|Quelle CultureInfo und NumberFormatInfo-Objekts|Gibt die Benutzer Außerkraftsetzungen wieder|  
|-------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat`-Eigenschaft|Ja|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>-Eigenschaft|Ja|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>-Methode|Ja|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType>-Methode|Nein|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>-Konstruktor|Ja|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>-Konstruktor|Hängt vom Wert der `useUserOverride` Parameter|  
  
 Wenn ein zwingender Grund nicht vorhanden ist, sollten Benutzer Außerkraftsetzungen berücksichtigen, bei der Verwendung der <xref:System.Globalization.NumberFormatInfo> Objekt in Clientanwendungen zu formatieren und Benutzereingaben analysieren oder numerische Daten anzeigen. Für serveranwendungen oder unbeaufsichtigten Anwendungen sollten Sie Außerkraftsetzungen für Benutzer nicht berücksichtigt. Allerdings bei Verwendung von der <xref:System.Globalization.NumberFormatInfo> Objekt entweder explizit oder implizit um numerische Daten im Zeichenfolgenformat beizubehalten, sollten Sie entweder eine <xref:System.Globalization.NumberFormatInfo> -Objekt, das die Formatierungskonventionen der invarianten Kultur, oder Sie widerspiegelt sollten angeben einer benutzerdefinierte numerische Formatzeichenfolge, die Sie unabhängig von der Kultur verwenden.  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider NumberFormatInfo und Formatieren von numerischen Daten  
 Ein <xref:System.Globalization.NumberFormatInfo> Objekt wird in allen numerischen Formatierungsvorgängen implizit oder explizit verwendet. Dazu gehören die folgenden Methoden aufrufen:  
  
-   Alle numerischen Formatierungsmethoden angeben, wie z. B. <xref:System.Int32.ToString%2A?displayProperty=nameWithType>, <xref:System.Double.ToString%2A?displayProperty=nameWithType>, und <xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>.  
  
-   Die wichtigsten Methode zur kombinierten Formatierung, <xref:System.String.Format%2A?displayProperty=nameWithType>.  
  
-   Andere Methoden zur kombinierten Formatierung, wie z. B. <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> und <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Stellen Sie alle numerischen Formatierungsvorgänge verwenden eine <xref:System.IFormatProvider> Implementierung. Die <xref:System.IFormatProvider> Schnittstelle enthält eine einzelne Methode <xref:System.IFormatProvider.GetFormat%28System.Type%29>. Dies ist eine Rückrufmethode, die übergeben wird, wird ein <xref:System.Type> Objekt, das zum Bereitstellen der Formatierungsinformationen darstellt. Die Methode ist dafür verantwortlich, entweder eine Instanz dieses Typs zurückzugeben oder `null`, wenn sie eine Instanz des Typs bereitstellen kann. .NET Framework bietet zwei <xref:System.IFormatProvider> Implementierungen für das Formatieren von Zahlen:  
  
-   Die <xref:System.Globalization.CultureInfo> Klasse, die eine bestimmte Kultur (oder eine bestimmte Sprache in einem bestimmten Land/Region) darstellt. In eine numerische Formatierung Vorgang der <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType> Methode gibt die <xref:System.Globalization.NumberFormatInfo> zugeordnete Objekt seine <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Die <xref:System.Globalization.NumberFormatInfo> Klasse, die Informationen über die Formatierungskonventionen der Kultur zugeordnete bereitstellt. Die <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine Instanz von sich selbst zurück.  
  
 Wenn ein <xref:System.IFormatProvider> Implementierung wird nicht bereitgestellt, um einer Formatierungsmethode explizit eine <xref:System.Globalization.CultureInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft, die die aktuelle Threadkultur darstellt, wird verwendet.  
  
 Das folgende Beispiel veranschaulicht die Beziehung zwischen der <xref:System.IFormatProvider> Schnittstelle und die <xref:System.Globalization.NumberFormatInfo> bei Formatierungsvorgängen durch Definieren einer benutzerdefiniertes Klasse <xref:System.IFormatProvider> Implementierung. Die <xref:System.IFormatProvider.GetFormat%2A> Methode zeigt den Typnamen des Objekts, durch den Formatierungsvorgang angefordert. Wenn die Schnittstelle angefordert wird eine <xref:System.Globalization.NumberFormatInfo> -Objekt, diese Methode stellt der <xref:System.Globalization.NumberFormatInfo> Objekt für die aktuelle Threadkultur verwendet. Wie die Ausgabe im Beispiel gezeigt die <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> Anforderungsmethoden einer <xref:System.Globalization.NumberFormatInfo> Formatierungsinformationen, wohingegen zu verwendendes Objekt die <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Anforderungsmethoden <xref:System.Globalization.NumberFormatInfo> und <xref:System.Globalization.DateTimeFormatInfo> Objekte als auch ein <xref:System.ICustomFormatter> -Implementierung.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 Wenn ein <xref:System.IFormatProvider> Implementierung wird in eine numerische Formatierung-Methodenaufruf, ruft die Methode nicht explizit angegeben die `CultureInfo.CurrentCulture.GetFormat` -Methode, die gibt die <xref:System.Globalization.NumberFormatInfo> Objekt, das die aktuelle Threadkultur entspricht.  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>NumberFormatInfo-Eigenschaften und Formatzeichenfolgen  
 Jede Formatierungsvorgang verwendet entweder eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge erzeugt eine Ergebniszeichenfolge aus einer Reihe an. In einigen Fällen ist die Verwendung von einer Formatzeichenfolge erzeugt eine Ergebniszeichenfolge explizit, wie im folgenden Beispiel gezeigt. Dieser Code Ruft die <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> -Methode zum Konvertieren einer <xref:System.Decimal> Wert auf eine Anzahl von verschiedenen zeichenfolgendarstellungen, die durch die Verwendung der Formatierungskonventionen der Kultur En-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 In anderen Fällen ist die Verwendung einer Formatzeichenfolge implizit. Z. B. in der folgenden Methodenaufrufe auf den Standardwert oder parameterlosen <xref:System.Decimal.ToString?displayProperty=nameWithType> -Methode, der Wert der <xref:System.Decimal> Instanz wird formatiert, indem Sie mit der allgemeine Formatbezeichner ("G") und den Konventionen der aktuellen Kultur, die in diesem Fall ist die Kultur En-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 Jede standardmäßige Zahlenformatzeichenfolge verwendet wird, eine oder mehrere <xref:System.Globalization.NumberFormatInfo> Eigenschaften des Musters oder in der Ergebniszeichenfolge verwendeten Symbole zu bestimmen. Auf ähnliche Weise jede benutzerdefinierte numerische Formatbezeichner außer "0" und "#" Symbole einfügen, in der Ergebniszeichenfolge, die von definiert sind <xref:System.Globalization.NumberFormatInfo> Eigenschaften. Die folgende Tabelle enthält die Standard- und benutzerdefinierten Zahlenformatbezeichner und ihre zugeordneten <xref:System.Globalization.NumberFormatInfo> Eigenschaften.  Um die Darstellung der Ergebniszeichenfolge für eine bestimmte Kultur zu ändern, finden Sie unter der [NumberFormatInfo Ändern von Eigenschaften](#modifying) Abschnitt. Details zur Verwendung dieser Formatbezeichner, finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
|Formatbezeichner|Zugeordnete Eigenschaften|  
|----------------------|---------------------------|  
|"C" oder "c" (Währungsformatbezeichner)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, um die Standardanzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, um die Gruppe oder Tausende definieren Trennzeichen.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>, um die Größe der ganzzahligen Gruppen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>, um das Muster für negative Währungsangaben zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>, um das Muster für positive Währungsangaben zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, um das Währungssymbol zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.|  
|"D" oder "d" (Dezimalformatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.|  
|"E" oder "e" (exponential "und" wissenschaftlichen Formatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen in der Mantisse und dem Exponent zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, um die Pluszeichen im Exponenten zu definieren.|  
|"F" oder "f" (Festkommaformatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, um die Standardanzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.|  
|"G" oder "g" (allgemeiner Formatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, auf das Pluszeichen für Ergebniszeichenfolgen im Exponentialformat definieren.|  
|"N" oder "n" (Zahlenformatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, um die Standardanzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, um das Gruppentrennzeichen (Tausende) zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, um die Anzahl von ganzzahligen Ziffern in einer Gruppe zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>, um das Format von negativen Werten definieren.|  
|"P" oder "p" (Prozentformatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>, um die Standardanzahl von Dezimalstellen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, das Gruppentrennzeichen definiert.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, um die Anzahl von ganzzahligen Ziffern in einer Gruppe zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>, um die Platzierung des Prozentsymbols sowie des Minuszeichens für negative Werte zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>, um die Platzierung des Prozentsymbols für positive Werte zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, um das Prozentzeichen zu definieren.|  
|"R" oder "R" (Schleifenformatbezeichner)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, auf die Pluszeichen in einen Exponenten zu definieren.|  
|"X" oder "x" (Hexadezimal-Formatbezeichner)|Keine|  
|"." (benutzerdefinierte Formatbezeichner Dezimaltrennzeichen)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, um das Dezimaltrennzeichen zu definieren.|  
|"," (benutzerdefiniertes Formatbezeichner für Gruppentrennzeichen)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, um das Gruppentrennzeichen (Tausende) zu definieren.|  
|"%" (Prozentsatz Platzhalter benutzerdefinierte Formatbezeichner)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, um das Prozentzeichen zu definieren.|  
|"‰" (pro Promillezeichen Platzhalter benutzerdefinierte Formatbezeichner)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>, um zu definieren die Promillesymbol.|  
|"E" (benutzerdefinierte Formatbezeichner Exponentialschreibweise)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, um das Minuszeichen in der Mantisse und dem Exponent zu definieren.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, um die Pluszeichen im Exponenten zu definieren.|  
  
 Beachten Sie, dass die <xref:System.Globalization.NumberFormatInfo> Klasse enthält eine <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> Eigenschaft, die die Basis 10 Ziffern verwendet, die für eine bestimmte Kultur angibt. Die Eigenschaft wird jedoch nicht verwendet, bei Formatierungsvorgängen. nur die grundlegenden lateinischen Ziffern 0 (U + 0030) bis 9 (U + 0039), die in der Ergebniszeichenfolge verwendet werden. Darüber hinaus für <xref:System.Single> und <xref:System.Double> Werte `NaN`, `PositiveInfinity`, und `NegativeInfinity`, die Ergebniszeichenfolge besteht ausschließlich durch definierten Symbole die <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, und <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> Eigenschaften , bzw..  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>NumberFormatInfo-Eigenschaften ändern  
 Sie können die Eigenschaften Ändern einer <xref:System.Globalization.NumberFormatInfo> -Objekt zum Anpassen der Ergebniszeichenfolge, die in eine numerische Formatierung Vorgang erstellt wurde. Gehen Sie dazu wie folgt vor:  
  
1.  Erstellen Sie eine Lese-/Schreibkopie der ein <xref:System.Globalization.NumberFormatInfo> Objekt, deren Formatierungskonventionen ändern möchten. Weitere Informationen finden Sie unter der [Instanziieren eines Objekts NumberFormatInfo](#Instantiating) Abschnitt.  
  
2.  Ändern Sie die Eigenschaft oder Eigenschaften, die verwendet werden, um das gewünschte Ergebniszeichenfolge zu erzeugen. Informationen wie Formatierung Methoden verwenden <xref:System.Globalization.NumberFormatInfo> Eigenschaften zum Definieren von Ergebniszeichenfolgen, finden Sie unter der [Formatieren von Zeichenfolgen und NumberFormatInfo-Eigenschaften](#properties) Abschnitt.  
  
3.  Verwenden Sie die benutzerdefinierte <xref:System.Globalization.NumberFormatInfo> -Objekts entsprechend der <xref:System.IFormatProvider> Argument in Aufrufe für Formatierungsmethoden angeben.  
  
> [!NOTE]
>  Anstatt zu einer Kultur Eigenschaftswerte ändern dynamisch jedes Mal eine Anwendung gestartet wurde, können Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse, um eine benutzerdefinierte Kultur (eine Kultur, besitzt einen eindeutigen Namen und, die ergänzt, die bereits vorhandenen Kulturen) oder ein Ersatzserver definieren die Kultur (eine anstelle einer bestimmten Kultur verwendet wird).  
  
 Die folgenden Abschnitte enthalten einige Beispiele.  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>Ändern das Währungssymbol und Muster  
 Im folgende Beispiel ändert ein <xref:System.Globalization.NumberFormatInfo> Objekt dar, das die Formatierungskonventionen der Kultur En-US. Das ISO 4217-Währungssymbol weist die <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> Eigenschaft und definiert ein Muster für die Currency-Werte, aus denen das Währungssymbol gefolgt von einem Leerzeichen und einen numerischen Wert besteht.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>Eine persönliche Identifikationsnummer Formatierung  
 Viele Personalausweisnummer ausschließlich aus Ziffern bestehen und können daher einfach durch Ändern der Eigenschaften der formatiert werden ein <xref:System.Globalization.NumberFormatInfo> Objekt. Zum Beispiel besteht eine Sozialversicherungsnummer in den Vereinigten Staaten von 9 Ziffern, die wie folgt angeordnet: `XXX-XX-XXXX`. Im folgende Beispiel wird davon ausgegangen, dass Sozialversicherungsnummern gespeichert werden, wie-Ganzzahlwerte und entsprechend formatiert.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>Verarbeiten numerischer Zeichenfolgen  
 Analyse umfasst die Zeichenfolgendarstellung einer Zahl in eine Zahl konvertieren. Jedes numerischen Typs in .NET Framework enthält zwei überladene Analysemethoden: `Parse` und `TryParse`. Die `Parse` -Methode konvertiert eine Zeichenfolge in eine Zahl und löst eine Ausnahme aus, wenn die Konvertierung fehlschlägt. Die `TryParse` Methode konvertiert eine Zeichenfolge in eine Zahl, die diesen Wert zum Zuweisen einer `out` Argument und gibt eine <xref:System.Boolean> Wert, der angibt, ob die Konvertierung erfolgreich war.  
  
 Verwenden Sie die Analysemethoden implizit oder explizit eine <xref:System.Globalization.NumberStyles> Enumerationswert, um zu bestimmen, welche Stilelemente (z. B. Gruppentrennzeichen, ein Dezimaltrennzeichen oder ein Währungssymbol) in einer Zeichenfolge vorhanden sein können, wenn der Analysevorgang erfolgreich ist. Wenn eine <xref:System.Globalization.NumberStyles> Wert ist nicht angegeben wird im Aufruf Methode der Standardwert ist eine <xref:System.Globalization.NumberStyles> Wert ein, enthält die <xref:System.Globalization.NumberStyles.Float> und <xref:System.Globalization.NumberStyles.AllowThousands> Flags, die angibt, dass die analysierte Zeichenfolge enthalten kann, Gruppe Symbole, die ein Dezimaltrennzeichen, die ein negativen Vorzeichen, und Leerzeichen, oder er kann die angegebene Zeichenfolgendarstellung einer Zahl in Exponentialschreibweise.  
  
 Verwenden Sie die Analysemethoden auch implizit oder explizit eine <xref:System.Globalization.NumberFormatInfo> ist möglich, Objekt, das definiert, die bestimmte Symbole und Muster, die in der Zeichenfolge, die analysiert werden. Wenn eine <xref:System.Globalization.NumberFormatInfo> Objekt nicht angegeben ist, der Standardwert ist die <xref:System.Globalization.NumberFormatInfo> für die aktuelle Threadkultur verwendet. Weitere Informationen zum Analysieren von finden Sie unter den einzelnen Analysemethoden, z. B. <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>, <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>, <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>, und <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>.  
  
 Das folgende Beispiel veranschaulicht die kulturabhängig Charakter Analysieren von Zeichenfolgen. Analysiert eine Zeichenfolge, die Tausende versucht Trennzeichen mit den Konventionen der En-US, fr-FR und invariante Kulturen. Eine Zeichenfolge, die Kommas als Gruppentrennzeichen und Punkt enthält, als dezimales Trennzeichen ein Fehler auftritt, in der Kultur fr-FR zu analysieren und eine Zeichenfolge mit White space als Gruppentrennzeichen und ein Komma als Dezimaltrennzeichen kann nicht in die En-US und invariante Kulturen zu analysieren.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 Im Allgemeinen Analyse erfolgt in zwei Kontexten:  
  
-   Als Vorgang dient, die Benutzereingaben in einen numerischen Wert konvertieren.  
  
-   Eine Operation, die entwickelt wurde für den roundtripvorgang einen numerischen Wert; d. h. um einen numerischen Wert zu deserialisieren, das zuvor als eine Zeichenfolge serialisiert wurde.  
  
 In den folgenden Abschnitten werden diese beiden Vorgänge ausführlicher erläutert.  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>Analysieren von Benutzerzeichenfolgen  
 Wenn Sie numerische Zeichenfolgen-Eingabe vom Benutzer analysieren, sollten Sie immer instanziiert einen <xref:System.Globalization.NumberFormatInfo> -Objekt, das kultureinstellungen des Benutzers widerspiegelt. Informationen zum Instanziieren einer <xref:System.Globalization.NumberFormatInfo> -Objekt, das Benutzer Anpassungen widerspiegelt finden Sie unter der [NumberFormatInfo und dynamische Daten](#dynamic) Abschnitt.  
  
 Das folgende Beispiel veranschaulicht den Unterschied zwischen einem Analysevorgang, der Benutzer kultureinstellungen wiedergeben und eine, die nicht der Fall ist. In diesem Fall die Standardkultur für das System wird En-US, aber vom Benutzer definierten "," als Dezimalsymbol und "." als Gruppentrennzeichen für die in der Systemsteuerung **Region und Sprache**. Normalerweise werden diese Symbole in der Kultur En-US "Standard" rückgängig gemacht. Wenn der Benutzer gibt eine Zeichenfolge, die benutzereinstellungen wiedergibt, und die Zeichenfolge wird analysiert, durch eine <xref:System.Globalization.NumberFormatInfo> -Objekt, das auch benutzereinstellungen (überschrieben), gibt der Analysevorgang gibt ein korrekte Ergebnis zurück. Jedoch, wenn die Zeichenfolge wird analysiert durch eine <xref:System.Globalization.NumberFormatInfo> -Objekt, das standard-En-US-kultureinstellungen, widerspiegelt es Fehler das Komma-Symbol für Gruppentrennzeichen und ein falsches Ergebnis zurückgegeben.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>Serialisieren und Deserialisieren von numerischen Daten  
 Wenn numerische Daten im Zeichenfolgenformat serialisiert und später deserialisiert und analysiert, sollte die Zeichenfolgen generiert und mit den Konventionen der invarianten Kultur analysiert werden. Die Formatierung und Analyse Vorgänge sollten nie mit die Konventionen einer bestimmten Kultur widerspiegeln. Wenn kulturspezifische Einstellungen verwendet werden, ist die Übertragbarkeit der Daten streng beschränkt. Es kann nur in einem Thread erfolgreich deserialisiert werden, dessen Einstellungen kulturspezifische identisch mit denen des Threads werden auf denen er serialisiert wurde. In einigen Fällen werden das bedeutet, die die Daten selbst können nicht deserialisiert, auf dem gleichen System auf dem er serialisiert wurde.  
  
 Im folgende Beispiel wird veranschaulicht, was passieren kann, wenn dieser Grundsatz verletzt wird. Gleitkommawerte in einem Array werden in Zeichenfolgen konvertiert, wenn der aktuelle Thread die kulturspezifischen Einstellungen der Kultur En-US verwendet. Klicken Sie dann die Daten von einem Thread analysiert die kulturspezifischen Einstellungen der Kultur En-GB-verwendet. In diesem Fall jedoch jede Analysevorgang erfolgreich ist, die Daten nicht Roundtrip erfolgreich und Beschädigung von Daten. In anderen Fällen kann ein Analysevorgang fehlschlagen und eine <xref:System.FormatException> Ausnahme kann ausgelöst werden.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Abrufen einer <xref:System.Globalization.NumberFormatInfo> -Objekt für ein entsprechendes <xref:System.Globalization.CultureInfo> -Objekt und das abgerufene Objekt die Formatierungsinformationen für die jeweilige Kultur für Zahlen verwenden.  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue, schreibbare Instanz der <see cref="T:System.Globalization.NumberFormatInfo" />-Klasse, die kulturunabhängig (invariant) ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften der neuen Instanz können geändert werden, wenn Ihre Anwendung eine benutzerdefinierte Formatierung erforderlich sind.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine flache Kopie des <see cref="T:System.Globalization.NumberFormatInfo" />-Objekts.</summary>
        <returns>Ein neues Objekt, das aus dem ursprünglichen <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt kopiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Klon beschreibbar ist auch dann, wenn die ursprüngliche <xref:System.Globalization.NumberFormatInfo> Objekt ist schreibgeschützt. Aus diesem Grund können die Eigenschaften des Klons mit benutzerdefinierten Mustern geändert werden.  
  
 Eine flache Kopie eines Objekts ist eine Kopie des Objekts nur. Wenn das Objekt Verweise auf andere Objekte enthält, erstellt die flache Kopie keine Kopien der Objekte verwiesen wird. Er wird stattdessen auf die ursprünglichen Objekte verweisen. Andererseits, erstellt eine tiefe Kopie eines Objekts eine Kopie des Objekts und eine Kopie aller Elemente auf die dieses Objekt direkt oder indirekt verweist. Im Fall von einem <xref:System.Globalization.NumberFormatInfo> Objekt eine flache Kopie ist ausreichend, damit alle Instanzeigenschaften, kopieren, da alle Eigenschaften, die Objektverweise zurückzugeben sind `static` (`Shared` in Visual Basic).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.NumberFormatInfo.Clone%2A> Methode, um eine Lese-/Schreibkopie der Erstellen einer <xref:System.Globalization.NumberFormatInfo> Objekt, das den numerischen Wert, der Formatierungskonventionen der aktuellen Threadkultur darstellt.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der in Währungswerten zu verwendenden Dezimalstellen ab oder legt diese fest.</summary>
        <value>Die Anzahl der in Währungsangaben zu verwendenden Dezimalstellen. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> Eigenschaft wird verwendet, mit der standardmäßigen Formatzeichenfolge "C" ohne einer Genauigkeitsangabe in numerischen Formatierungsvorgängen. Definiert die Standardanzahl von Dezimalstellen, die nach dem Dezimaltrennzeichen angezeigt werden. Dieser Wert wird überschrieben, wenn ein Genauigkeitsbezeichner angegeben verwendet wird. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> Eigenschaft.  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 99 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die in Währungsangaben als Dezimaltrennzeichen zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die in Währungsangaben als Dezimaltrennzeichen zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anfangswert dieser Eigenschaft stammt aus den Einstellungen in der **Region und Sprache** Element in der Systemsteuerung.  
  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> -Eigenschaft mit der Standardformatzeichenfolge "C" verwendet, um das Symbol zu definieren, die über Dezimalstellen integrale trennt. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> Eigenschaft.  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird auf eine leere Zeichenfolge festgelegt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, mit der bei Währungsangaben Zifferngruppen links vom Dezimaltrennzeichen getrennt werden, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, mit der bei Währungsangaben Zifferngruppen links vom Dezimaltrennzeichen getrennt werden. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anfangswert dieser Eigenschaft stammt aus den Einstellungen in der **Regions- und Sprachoptionen** Element in der Systemsteuerung.  
  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> Eigenschaft ist mit der Standardformatzeichenfolge "C" verwendet, um das Symbol definieren, die Gruppen von ganzzahligen Ziffern trennt. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> Eigenschaft.  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Währungsangaben ab oder legt diese fest.</summary>
        <value>Die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Währungsangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ein eindimensionales Array, das ein einziges, auf 3 festgelegtes Element enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> Eigenschaft wird mit der Standardformatzeichenfolge "C" verwendet, um die Anzahl der Ziffern, die angezeigt werden in ganzzahligen Gruppen zu definieren. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md). Jedes Element im eindimensionalen Array muss eine ganze Zahl von 1 bis 9 sein. Das letzte Element kann 0 sein.  
  
 Das erste Element des Arrays definiert die Anzahl der Elemente in der am wenigsten signifikanten Ziffern sofort auf der linken Seite des der <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>. Jedes nachfolgende Element bezieht sich auf die nächste wichtige Gruppe von Ziffern auf der linken Seite der vorherigen Gruppe. Wenn das letzte Element des Arrays ist nicht 0 ist, werden die restlichen Ziffern basierend auf dem letzten Element des Arrays gruppiert. Wenn das letzte Element 0 ist, werden die restlichen Ziffern nicht gruppiert.  
  
 Wenn das Array enthält {3, 4, 5}, werden die Ziffern z. B. ähnlich: "$55,55555,55555,55555,4444,333.00" gruppiert. Wenn das Array enthält {3, 4, 0}, werden die Ziffern ähnlich: "$55555555555555555,4444,333.00" gruppiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> Eigenschaft.  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der kleiner als 0 oder größer als 9 ist.  
  
 - oder -   
  
 Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der nicht der letzte Eintrag ist, der auf 0 festgelegt ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für negative Währungsangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für negative Währungsangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 0 (null), womit "($n)" dargestellt wird, wobei "$" das <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> Eigenschaft wird mit der Standardformatzeichenfolge "C" verwendet, um das Muster für negative Währungsangaben zu definieren. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft hat einen der Werte in der folgenden Tabelle. Das Symbol "$" ist die <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, das Symbol "-" ist die <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, und `n` ist eine Zahl.  
  
|Wert|Zugeordnete Muster|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$-n|  
|3|$n-|  
|4|(n$)|  
|5|-n$|  
|6|n-$|  
|7|n$-|  
|8|-n: $|  
|9|-$ n|  
|10|n $-|  
|11|$ n-|  
|12|$ - n|  
|13|n- $|  
|14|(n$)|  
|15|(n $)|  
  
   
  
## Examples  
 Das folgende Beispiel zeigt wie die <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> Eigenschaft definiert das Format für negative Währungsangaben.  Ruft die bestimmten Kulturen, die auf dem Hostcomputer definiert sind, und zeigt jede Kultur ab <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> Eigenschaftswert, dessen zugeordneten Muster und eine Zahl als Währungswert formatiert.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 15 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für positive Währungsangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für positive Währungsangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 0 (null), womit "$n" dargestellt wird, wobei "$" das <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> Eigenschaft wird mit der Standardformatzeichenfolge "C" verwendet, um Muster für positive Währungsangaben zu definieren. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft hat einen der Werte in der folgenden Tabelle. Das Symbol "$" ist die <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> und `n` ist eine Zahl.  
  
|Wert|Zugeordnete Muster|  
|-----------|------------------------|  
|0|$n|  
|1|n$|  
|2|$ n|  
|3|n $|  
  
 Beachten Sie, dass das Muster ein positiven Vorzeichen nicht unterstützt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 3 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die als Währungssymbol zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die als Währungssymbol zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "¤".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zugewiesene Zeichenfolge die <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> Eigenschaft ist in der Ergebniszeichenfolge enthalten, wenn die Formatierung eines numerischen Werts mit "C" [standardmäßige Zahlenformatzeichenfolge](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt das Währungssymbol der aktuellen Kultur und das "C" standardmäßige Zahlenformatzeichenfolge verwendet, um einen Währungswert formatieren.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine schreibgeschützte <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die Werte auf Grundlage der aktuellen Kultur formatiert.</summary>
        <value>Eine schreibgeschützte <see cref="T:System.Globalization.NumberFormatInfo" />, die auf der Kultur des aktuellen Threads basiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abrufen einer <xref:System.Globalization.NumberFormatInfo> -Objekt aus der <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> Eigenschaft entspricht dem Abrufen einer <xref:System.Globalization.NumberFormatInfo> -Objekt aus der `CultureInfo.CurrentCulture.NumberFormat` Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, dass die zurückgegebenen Objekte die <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> und `CultureInfo.CurrentCulture.NumberFormat` Eigenschaften sind identisch. Es verwendet dann die Reflektion, um die Eigenschaftswerte anzuzeigen die <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> Eigenschaft auf einem System, dessen aktuelle Kultur En-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, in welcher Form die grafische Benutzeroberfläche Ziffern anzeigt.</summary>
        <value>Einer der Enumerationswerte, der die kulturspezifische Ziffernform angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Die <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A> Eigenschaft ist für die zukünftige Verwendung reserviert. Wird derzeit nicht in analysieren oder Formatierungsvorgängen für den aktuellen verwendet <xref:System.Globalization.NumberFormatInfo> Objekt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem SET-Vorgang ist kein gültiger <see cref="T:System.Globalization.DigitShapes" />-Wert.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Der <see cref="T:System.Type" /> des erforderlichen Formatierungsdiensts.</param>
        <summary>Ruft ein Objekt vom angegebenen Typ ab, das einen Zahlenformatierungsdienst bereitstellt.</summary>
        <returns>Die aktuelle <see cref="T:System.Globalization.NumberFormatInfo" />, wenn<paramref name="formatType" /> mit dem Typ der aktuellen <see cref="T:System.Globalization.NumberFormatInfo" />, andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Format(String, IFormatProvider)` von den Basisdatentypen unterstützte Methoden rufen Sie diese Methode beim aktuellen <xref:System.Globalization.NumberFormatInfo> übergeben wird, als die <xref:System.IFormatProvider> Parameter. Diese Methode implementiert <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Der <see cref="T:System.IFormatProvider" />, der zum Abrufen der <see cref="T:System.Globalization.NumberFormatInfo" /> verwendet wird.  
  
 - oder -   
  
 <see langword="null" /> zum Abrufen von <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</param>
        <summary>Ruft die <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die dem angegebenen <see cref="T:System.IFormatProvider" /> zugeordnet ist.</summary>
        <returns>Die <see cref="T:System.Globalization.NumberFormatInfo" />, die dem angegebenen <see cref="T:System.IFormatProvider" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode `formatProvider` mit <xref:System.Globalization.NumberFormatInfo> als Typparameter übergeben. Wenn `formatProvider` ist `null` oder, wenn <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> gibt `null`, gibt diese Methode <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  
  
 Ruft die Anwendung eine <xref:System.Globalization.NumberFormatInfo> Objekt für eine bestimmte Kultur, die mit einer der folgenden Methoden:  
  
-   Über die <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Über die <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> Methode, in denen `provider` ist eine <xref:System.Globalization.CultureInfo>.  
  
 Ein <xref:System.Globalization.NumberFormatInfo> Objekt wird nur für die invariante Kultur oder für bestimmte Kulturen, nicht für die neutralen Kulturen erstellt. Weitere Informationen über die invariante Kultur, die bestimmte Kulturen und die neutralen Kulturen finden Sie unter der <xref:System.Globalization.CultureInfo> Klasse.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein schreibgeschütztes <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ab, das kulturunabhängig (invariant) ist.</summary>
        <value>Ein schreibgeschütztes Objekt, das kulturunabhängig (invariant) ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies <xref:System.Globalization.NumberFormatInfo> von dieser Eigenschaft zurückgegebenen Objekts ändert sich nicht, unabhängig von der aktuellen Kultur. Es stellt die Formatierungskonventionen der invarianten Kultur, die eine Kultur verknüpft sind, mit der englischen Sprache, jedoch nicht für alle Länder/Regionen dar. Die invariante Kultur wird bei Formatierungsvorgängen, die kulturunabhängig sind oder über mehrere Kulturen erzeugt Ergebniszeichenfolgen geeignet für die Anzeige, verwendet.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Standardeigenschaftswerte der <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>.  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob dieses <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt schreibgeschützt ist.</summary>
        <value>
          <see langword="true" />, wenn das <see cref="T:System.Globalization.NumberFormatInfo" /> schreibgeschützt ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Versucht, eine Zuweisung zu einer Eigenschaft ein Read-only auszuführen <xref:System.Globalization.NumberFormatInfo> bewirkt, dass ein <xref:System.InvalidOperationException>.  
  
 Sie erreichen die <xref:System.Globalization.NumberFormatInfo.Clone%2A> Methode zum Erstellen einer Lese-/Schreibzugriff <xref:System.Globalization.NumberFormatInfo> Objekt aus einem nur-Lese Objekt, wie im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die den IEEE-NaN-Wert (Not a Number) darstellt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die den IEEE-NaN-Wert (Not a Number) darstellt. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "NaN".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen über NaN-Werte finden Sie unter <xref:System.Double> oder <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Zeichenfolgenarray mit systemeigenen Ziffern ab, die den europäischen Ziffern 0 (null) bis 9 entsprechen, oder legt ein entsprechendes Zeichenfolgenarray fest.</summary>
        <value>Eine Zeichenfolgenarray, das das systemeigene Äquivalent der westlichen Ziffern 0 bis 9 enthält. Standard ist ein Array mit den Elementen "0", "1", "2", "3", "4", "5", "6", "7", "8" und "9".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Der Zeichensatz, der angegeben wird die <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> Eigenschaft hat keine Auswirkungen auf die Analyse oder dem Formatierungsvorgängen. Nur die grundlegenden lateinischen Ziffern 0 (U + 0030) bis 9 (U + 0039) beim Formatieren oder analysieren, numerische Werte oder Datums-und Uhrzeitwerte verwendet werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> Eigenschaft.  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentNullException">In einem set-Vorgang ist der Wert <see langword="null" />.  
  
 - oder -   
  
 In einem set-Vorgang ist ein Element des Wertearrays <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">In einem Set-Vorgang enthält das Wertearray nicht 10 Elemente.  
  
 - oder -   
  
 In einem set-Vorgang enthält ein Element des Wertearrays weder ein einfaches <see cref="T:System.Char" />-Objekt noch ein <see cref="T:System.Char" />-Objektpaar, das als Ersatzzeichenpaar verwendet werden könnte.  
  
 - oder -   
  
 In einem Mengenvorgang ist ein Element des Wertearrays keine wie im [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) definierte Zahl. Das heißt, die Ziffer im Arrayelement weist keinen allgemeinen Unicode-<see langword="Number, Decimal Digit" />-Kategoriewert auf.  
  
 - oder -   
  
 In einem Set-Vorgang entspricht der numerische Wert eines Elements im Wertearray nicht der Position des Elements im Array. Das heißt, dass das Element an Index 0, bei dem es sich um das erste Element des Arrays handelt, nicht den numerischen Wert 0 hat, oder das Element an Index 1 nicht den numerischen Wert 1 hat.</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die minus unendlich darstellt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die minus unendlich darstellt. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "-Infinity".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu minus unendlich, finden Sie unter <xref:System.Double> oder <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die kennzeichnet, dass die zugeordnete Zahl negativ ist, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die kennzeichnet, dass die zugeordnete Zahl negativ ist. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "-".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird in sowohl Formatierung und Analyse für Vorgänge verwendet. Weitere Informationen zu Verwendungsmöglichkeiten bei Formatierungsvorgängen, finden Sie unter der [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md) Themen.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert Lese-/ Schreibzugriff <xref:System.Globalization.CultureInfo> Objekt, das die invariante Kultur darstellt, und weist das überlagernde Linie-Zeichen (U + 203E) zu seiner <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> Eigenschaft. Es verwendet dann diese <xref:System.Globalization.CultureInfo> zu ein Array von Gleitkommazahlen negative zu formatierende Objekt.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der in numerischen Werten zu verwendenden Dezimalstellen ab oder legt diese fest.</summary>
        <value>Die Anzahl der in numerischen Werten zu verwendenden Dezimalstellen. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> -Eigenschaft wird mit "F" und "N" Standardformatzeichenfolgen ohne einer Genauigkeitsangabe in numerischen Formatierungsvorgängen verwendet. Definiert die Standardanzahl von Dezimalstellen, die nach dem Dezimaltrennzeichen angezeigt werden. Dieser Wert wird überschrieben, wenn ein Genauigkeitsbezeichner angegeben verwendet wird. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> Eigenschaft.  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 99 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die in numerischen Werten als Dezimaltrennzeichen zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Gibt die in numerischen Werten als Dezimaltrennzeichen zu verwendende Zeichenfolge an. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> Eigenschaft wird mit "E", "F", "G", "N" und "R" Standardformatzeichenfolgen verwendet, um das Symbol zu definieren, die über Dezimalstellen integrale trennt. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 Der Anfangswert dieser Eigenschaft stammt aus den Einstellungen in der **Region und Sprache** Element in der Systemsteuerung.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> Eigenschaft.  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird auf eine leere Zeichenfolge festgelegt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, mit der bei numerischen Werten Zifferngruppen links vom Dezimaltrennzeichen getrennt werden, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, mit der bei numerischen Werten Zifferngruppen links vom Dezimaltrennzeichen getrennt werden. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> Eigenschaft ist mit der Standardformatzeichenfolge "N" verwendet, um das Symbol definieren, die Gruppen von ganzzahligen Ziffern trennt. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 Der Anfangswert dieser Eigenschaft stammt aus den Einstellungen in der **Region und Sprache** Element in der Systemsteuerung.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> Eigenschaft.  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in numerischen Werten ab oder legt diese fest.</summary>
        <value>Die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in numerischen Werten. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ein eindimensionales Array, das ein einziges, auf 3 festgelegtes Element enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> Eigenschaft wirkt sich auf das Ergebnis der numerischen Werte, die mithilfe der "N" formatiert sind. Wenn eine benutzerdefinierte numerische Zeichenfolge oder anderen standardmäßigen numerischen Formatierungszeichenfolge Zeichenfolgen verwendet werden, den Wert der Formatieren der <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> Eigenschaft wird ignoriert.  
  
 Jedes Element im eindimensionalen Array muss eine ganze Zahl von 1 bis 9 sein. Das letzte Element kann 0 sein.  
  
 Das erste Element des Arrays definiert die Anzahl der Elemente in der am wenigsten signifikanten Ziffern sofort auf der linken Seite des der <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>. Jedes nachfolgende Element bezieht sich auf die nächste wichtige Gruppe von Ziffern auf der linken Seite der vorherigen Gruppe. Wenn das letzte Element des Arrays ist nicht 0 ist, werden die restlichen Ziffern basierend auf dem letzten Element des Arrays gruppiert. Wenn das letzte Element 0 ist, werden die restlichen Ziffern nicht gruppiert.  
  
 Wenn das Array enthält {3, 4, 5}, werden die Ziffern z. B. ":"55,55555,55555,55555,4444,333.00 ähnelt gruppiert. Wenn das Array enthält {3, 4, 0}, werden die Ziffern ":"55555555555555555,4444,333.00 ähnelt gruppiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> Eigenschaft.  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 Das folgende Beispiel gibt einen anderen Wert <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> Arrays.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der kleiner als 0 oder größer als 9 ist.  
  
 - oder -   
  
 Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der nicht der letzte Eintrag ist, der auf 0 festgelegt ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für negative numerische Werte ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für negative numerische Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> Eigenschaft definiert das Format von negativen Werten, die mit der "N" numerische Standardformatzeichenfolge formatiert. Diese Eigenschaft hat einen der Werte in der folgenden Tabelle. Das Symbol "-" ist die <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> und `n` ist eine Zahl.  
  
|Wert|Zugeordnete Muster|  
|-----------|------------------------|  
|0|(n)|  
|1|-n|  
|2|- n|  
|3|n-|  
|4|n -|  
  
 Der Standardwert für die invariante Kultur zurückgegeben wird, indem Sie die <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> Eigenschaft ist 1, womit "-n", wobei *n* ist eine Zahl.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen anderen Wert <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> Muster.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 4 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der in Prozentwerten zu verwendenden Dezimalstellen ab oder legt diese fest.</summary>
        <value>Die Anzahl der in Prozentangaben zu verwendenden Dezimalstellen. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> Eigenschaft wird verwendet, mit der "P" Standardformatzeichenfolge ohne einer Genauigkeitsangabe in numerischen Formatierungsvorgängen. Definiert die Standardanzahl von Dezimalstellen, die nach dem Dezimaltrennzeichen angezeigt werden. Dieser Wert wird überschrieben, wenn ein Genauigkeitsbezeichner angegeben verwendet wird. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> Eigenschaft.  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 99 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die in Prozentwerten als Dezimaltrennzeichen zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die in Prozentangaben als Dezimaltrennzeichen zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> -Eigenschaft mit der Standardformatzeichenfolge "P" verwendet, um das Symbol zu definieren, die über Dezimalstellen integrale trennt. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> Eigenschaft.  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird auf eine leere Zeichenfolge festgelegt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, mit der in Prozentwerten Zifferngruppen links vom Dezimaltrennzeichen getrennt werden, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, mit der bei Prozentangaben Zifferngruppen links vom Dezimaltrennzeichen getrennt werden. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> Eigenschaft wird mit der Standardformatzeichenfolge "P" verwendet, um das Symbol zu definieren, die Gruppen von ganzen Zahlen trennt. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> Eigenschaft.  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Prozentwerten ab oder legt diese fest.</summary>
        <value>Die Anzahl von Ziffern in jeder Gruppe links vom Dezimaltrennzeichen in Prozentangaben. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist ein eindimensionales Array, das ein einziges, auf 3 festgelegtes Element enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> Eigenschaft wird mit der Standardformatzeichenfolge "P" verwendet, um die Anzahl der Ziffern, die angezeigt werden in ganzzahligen Gruppen zu definieren. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md). Jedes Element im eindimensionalen Array muss eine ganze Zahl von 1 bis 9 sein. Das letzte Element kann 0 sein.  
  
 Das erste Element des Arrays definiert die Anzahl der Elemente in der am wenigsten signifikanten Ziffern sofort auf der linken Seite des der <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>. Jedes nachfolgende Element bezieht sich auf die nächste wichtige Gruppe von Ziffern auf der linken Seite der vorherigen Gruppe. Wenn das letzte Element des Arrays ist nicht 0 ist, werden die restlichen Ziffern basierend auf dem letzten Element des Arrays gruppiert. Wenn das letzte Element 0 ist, werden die restlichen Ziffern nicht gruppiert.  
  
 Z. B. wenn das Array enthält {3, 4, 5}, werden die Ziffern gruppiert ähnlich wie ": 55,55555,55555,55555,4444,333.00 %". Wenn das Array enthält {3, 4, 0}, werden die Ziffern ähnelt gruppiert ": 55555555555555555,4444,333.00 %".  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Auswirkungen der Änderung der <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> Eigenschaft.  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der kleiner als 0 oder größer als 9 ist.  
  
 - oder -   
  
 Die Eigenschaft wird festgelegt, und das Array enthält einen Eintrag, der nicht der letzte Eintrag ist, der auf 0 festgelegt ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für negative Prozentangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für negative Prozentangaben. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist (null), womit "-n %" dargestellt wird, wobei "%" das <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A> Eigenschaft wird mit der Standardformatzeichenfolge "P" verwendet, um das Muster der negativen Prozentwerte zu definieren. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft hat einen der Werte in der folgenden Tabelle. Das Symbol "%" ist die <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, das Symbol "-" ist die <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, und `n` ist eine Zahl. Werte 3 bis 11 wurden in .NET Framework 2.0 eingeführt und können nicht in früheren Versionen verwendet werden.  
  
|Wert|Zugeordnete Muster|  
|-----------|------------------------|  
|0|-n %|  
|1|-n%|  
|2|-%n|  
|3|%-n|  
|4|%n-|  
|5|n-%|  
|6|n%-|  
|7|-% n|  
|8|n %-|  
|9|% n-|  
|10|% -n|  
|11|n- %|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert festgelegt, der kleiner als 0 oder größer als 11 ist.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Formatmuster für positive Prozentangaben ab oder legt dieses fest.</summary>
        <value>Das Formatmuster für positive Prozentangaben. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist (null), womit "n %" dargestellt wird, wobei "%" das <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> und <paramref name="n" /> eine Zahl ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A> Eigenschaft wird mit der Standardformatzeichenfolge "P" verwendet, um positive Prozentwerte Muster zu definieren. Weitere Informationen finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md). Diese Eigenschaft hat einen der Werte in der folgenden Tabelle. Das Symbol "%" ist die <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> und `n` ist eine Zahl.  
  
|Wert|Zugeordnete Muster|  
|-----------|------------------------|  
|0|n %|  
|1|n%|  
|2|%n|  
|3|% n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert kleiner als 0 oder größer als 3 festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die als Prozentsymbol zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die als Prozentsymbol zu verwendende Zeichenfolge. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "%".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zugewiesene Zeichenfolge die <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> Eigenschaft ist in der Ergebniszeichenfolge enthalten, wenn ein numerischer Wert formatiert wird, mit dem "P" oder mit einer Formatzeichenfolge, die das "%" enthält.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die als Promillesymbol zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
        <value>Die als Promillesymbol zu verwendende Zeichenfolge. Der Standardwert für<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "‰", also das Unicode-Zeichen "U+2030".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zugewiesene Zeichenfolge die <xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A> Eigenschaft ist in der Ergebniszeichenfolge enthalten, wenn ein numerischer Wert mit einer Formatzeichenfolge formatiert wird, die der "‰" enthält.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die plus unendlich darstellt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die plus unendlich darstellt. Die Standardeinstellung für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "Infinity".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu positiv unendlich, finden Sie unter <xref:System.Double> oder <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft wird auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die kennzeichnet, dass die zugeordnete Zahl positiv ist, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die kennzeichnet, dass die zugeordnete Zahl positiv ist. Der Standard für <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ist "+".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird nur für das Analysieren von numerischer Zeichenfolgen, die nicht für die Formatierung verwendet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der in einem Set-Vorgang zuzuweisende Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Eigenschaft wird festgelegt, und das <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ist schreibgeschützt.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">Die zu umschließende <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
        <summary>Gibt einen schreibgeschützten <see cref="T:System.Globalization.NumberFormatInfo" />-Wrapper zurück.</summary>
        <returns>Ein schreibgeschützter <see cref="T:System.Globalization.NumberFormatInfo" />-Wrapper um <paramref name="nfi" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wrapper wird verhindert, dass alle Änderungen an `nfi`.  
  
 Versucht, eine Zuweisung zu einer Eigenschaft ein Read-only auszuführen <xref:System.Globalization.NumberFormatInfo> bewirkt, dass ein <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nfi" /> ist <see langword="null" />.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>
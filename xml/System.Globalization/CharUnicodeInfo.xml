<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a87c8a952535547238fa2dc11d5898218b80d7c" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82492522" /></Metadata><TypeSignature Language="C#" Value="public static class CharUnicodeInfo" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <TypeSignature Language="C#" Value="public sealed class CharUnicodeInfo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CharUnicodeInfo extends System.Object" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharUnicodeInfo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo sealed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed CharUnicodeInfo extends System.Object" FrameworkAlternate="netframework-4.0" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Globalization" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Globalization" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ruft Informationen zu einem Unicode-Zeichen ab. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123) definiert eine Reihe von Unicode-Zeichen Kategorien. Beispielsweise kann ein Zeichen als Großbuchstabe, als Kleinbuchstabe, als Dezimal Ziffer, als Buchstaben Nummer, als Absatz Trennzeichen, als Mathematisches Symbol oder als Währungssymbol kategorisiert werden. Die Anwendung kann die Zeichen Kategorie zum Steuern von Zeichen folgen basierten Vorgängen verwenden, z. b. zum Auswerten oder Extrahieren einer Teil Zeichenfolge mit regulären Ausdrücken. Die <xref:System.Globalization.UnicodeCategory>-Enumeration definiert die möglichen Zeichen Kategorien.  
  
 Verwenden Sie die <xref:System.Globalization.CharUnicodeInfo>-Klasse, um den <xref:System.Globalization.UnicodeCategory> Wert für ein bestimmtes Zeichen abzurufen. Die <xref:System.Globalization.CharUnicodeInfo>-Klasse definiert Methoden, die die folgenden Unicode-Zeichen Werte zurückgeben:  
  
-   Die bestimmte Kategorie, zu der ein Zeichen oder Ersatz Zeichenpaar gehört. Der zurückgegebene Wert ist ein Member der <xref:System.Globalization.UnicodeCategory> Enumeration.  
  
-   Ein numerischer Wert. Gilt nur für numerische Zeichen, darunter Bruchzeichen, tief gestellte Zeichen, Superscripts, römische Ziffern, Währungs Zähler, Umbrüche und Skript spezifische Ziffern.  
  
-   Ziffern Wert. Gilt für numerische Zeichen, die mit anderen numerischen Zeichen kombiniert werden können, um eine ganze Zahl in einem Nummerierungssystem darzustellen.  
  
-   Dezimalziffern Wert. Gilt nur für Zeichen, die Dezimalziffern im dezimalen (Basis 10) System darstellen. Bei einer Dezimal Ziffer kann es sich um eine von zehn Ziffern (von 0 bis 9) handeln. Diese Zeichen sind Mitglieder der Kategorie <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>.  
  
 Außerdem wird die <xref:System.Globalization.CharUnicodeInfo>-Klasse intern von einer Reihe anderer .NET Framework Typen und Methoden verwendet, die sich auf die Zeichen Klassifizierung stützen. Dazu gehören:  
  
-   Die <xref:System.Globalization.StringInfo>-Klasse, die mit Textelementen anstelle von einzelnen Zeichen in einer Zeichenfolge funktioniert.  
  
-   Die über Ladungen der <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode, die die Kategorie bestimmen, zu der ein Zeichen oder Ersatz Zeichenpaar gehört.  
  
-   Die [Zeichenklassen](~/docs/standard/base-types/character-classes-in-regular-expressions.md) , die von <xref:System.Text.RegularExpressions.Regex>erkannt werden, die .NET Framework die Engine für reguläre Ausdrücke.  
  
 Wenn Sie diese Klasse in Ihren Anwendungen verwenden, beachten Sie die folgenden Überlegungen zur Programmierung bei der Verwendung des <xref:System.Char> Typs. Der Typ kann schwierig zu verwenden sein, und Zeichen folgen sind im Allgemeinen für die Darstellung linguistischer Inhalte vorzuziehen.  
  
-   Ein <xref:System.Char>-Objekt entspricht nicht immer einem einzelnen Zeichen. Obwohl der <xref:System.Char> Typ einen einzelnen 16-Bit-Wert darstellt, bestehen einige Zeichen (z. b. graphemgruppen-Cluster und Ersatz Zeichenpaare) aus zwei oder mehr UTF-16-Code Einheiten. Weitere Informationen finden Sie unter "Char-Objekte und Unicode-Zeichen" in der <xref:System.String>-Klasse.  
  
-   Das Konzept eines "Zeichens" ist ebenfalls flexibel. Ein Zeichen wird häufig als Symbol betrachtet, aber viele Symbole erfordern mehrere Code Punkte. Beispielsweise kann ä entweder durch zwei Code Punkte ("a" plus U + 0308, die Kombination von DIAERESIS) oder durch einen einzelnen Codepunkt ("ä" oder U + 00a4) dargestellt werden. Einige Sprachen verfügen über viele Buchstaben, Zeichen und Symbole, die mehrere Code Punkte erfordern, was Verwirrung in der Darstellung von linguistischen Inhalten verursachen kann. Beispielsweise gibt es eine ΰ (U + 03b0, Greek Small Letter Upsilon with dialytika und TONOS), es gibt jedoch keinen entsprechenden Großbuchstaben. Durch die Groß Schreibung eines solchen Werts wird lediglich der ursprüngliche Wert abgerufen.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage"><para>Erkannte Zeichen und die spezifischen Kategorien, zu denen Sie gehören, werden vom Unicode-Standard definiert und können von einer Version des Unicode-Standards in eine andere geändert werden. Die Kategorisierung von Zeichen in einer bestimmten Version des .NET Framework basiert auf einer einzelnen Version des Unicode-Standards, unabhängig vom zugrunde liegenden Betriebssystem, auf dem die .NET Framework ausgeführt wird. In der folgenden Tabelle sind die Versionen der .NET Framework aufgeführt, die seit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und den Versionen des Unicode-Standards zum Klassifizieren von Zeichen verwendet werden.  
  
 <list type="table"><listheader><term> .NET Framework-Version 
 </term><description> Version des Unicode-Standards 
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Der Unicode-Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  

 Jede Version des Unicode-Standards enthält Informationen zu Änderungen an der Unicode-Zeichen Datenbank seit der vorherigen Version. Die Unicode-Zeichen Datenbank wird von der <see cref="T:System.Globalization.CharUnicodeInfo" />-Klasse zum Kategorisierungs Zeichen verwendet.</para></block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft den Dezimalziffernwert eines numerischen Unicode-Zeichens ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="ch">Das Unicode-Zeichen, dessen Dezimalziffernwert abgerufen werden soll.</param>
        <summary>Ruft den Dezimalziffernwert des angegebenen numerischen Zeichens ab.</summary>
        <returns>Der Dezimalziffernwert des angegebenen numerischen Zeichens.  
  
 - oder -  
  
 -1, wenn das angegebene Zeichen keine Dezimalziffer ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode werden Zeichen, die Dezimalziffern darstellen, in ihre entsprechenden ganzzahligen Werte konvertiert. Dezimalstellen sind Zeichen in der <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> Kategorie, die eine von zehn Ziffern im dezimalen (Basis 10) Nummerierungssystem darstellen können, von 0 bis 9. Sie enthält Zeichen wie u + 0030 (Ziffer 0) bis u + 0039 (Ziffer 9), u + 0660 (arabische-indic-Ziffer 0) bis u + 0669 (arabische-indic-Ziffer neun), u + 07c0 (nko-Ziffer 0) bis u + 07c9 (nko-Ziffer 9) und u + 1040 (Myanmar Digit Zero) bis u + 1049 (Myanmar-Ziffer 9).  
  
 Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">Der <see cref="T:System.String" /> mit dem Unicode-Zeichen, dessen Dezimalziffernwert abgerufen werden soll.</param>
        <param name="index">Der Index des Unicode-Zeichens, dessen Dezimalziffernwert abgerufen werden soll.</param>
        <summary>Ruft den Dezimalziffernwert des numerischen Zeichens am angegebenen Index der angegebenen Zeichenfolge ab.</summary>
        <returns>Der Dezimalziffernwert des numerischen Zeichens am angegebenen Index der angegebenen Zeichenfolge.  
  
 - oder -  
  
 -1, wenn das Zeichen am angegebenen Index der angegebenen Zeichenfolge keine Dezimalziffer ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode werden Zeichen, die Dezimalziffern darstellen, in ihre entsprechenden ganzzahligen Werte konvertiert. Dezimalstellen sind Zeichen in der <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> Kategorie, die eine von zehn Ziffern im dezimalen (Basis 10) Nummerierungssystem darstellen können, von 0 bis 9. Sie enthält Zeichen wie u + 0030 (Ziffer 0) bis u + 0039 (Ziffer 9), u + 0660 (arabische-indic-Ziffer 0) bis u + 0669 (arabische-indic-Ziffer neun), u + 07c0 (nko-Ziffer 0) bis u + 07c9 (nko-Ziffer 9) und u + 1040 (Myanmar Digit Zero) bis u + 1049 (Myanmar-Ziffer 9).  
  
 Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft den Ziffernwert eines numerischen Unicode-Zeichens ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="ch">Das Unicode-Zeichen, dessen Ziffernwert abgerufen werden soll.</param>
        <summary>Ruft den Ziffernwert des angegebenen numerischen Zeichens ab.</summary>
        <returns>Der Ziffernwert des angegebenen numerischen Zeichens.  
  
 - oder -  
  
 -1, wenn das angegebene Zeichen keine Ziffer ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ziffern Wert ist eine Eigenschaft, die nur auf numerische Zeichen angewendet wird, die als Ziffern verwendet werden können. Eine Ziffer ist ein numerisches Zeichen, das mit anderen Ziffern kombiniert werden kann, um eine ganze Zahl in einem Nummerierungssystem darzustellen.  
  
 Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">Der <see cref="T:System.String" /> mit dem Unicode-Zeichen, dessen Ziffernwert abgerufen werden soll.</param>
        <param name="index">Der Index des Unicode-Zeichens, dessen Ziffernwert abgerufen werden soll.</param>
        <summary>Ruft den Ziffernwert des numerischen Zeichens am angegebenen Index der angegebenen Zeichenfolge ab.</summary>
        <returns>Der Ziffernwert des numerischen Zeichens am angegebenen Index der angegebenen Zeichenfolge.  
  
 - oder -  
  
 -1, wenn das Zeichen am angegebenen Index der angegebenen Zeichenfolge keine Ziffer ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ziffern Wert ist eine Eigenschaft, die nur auf numerische Zeichen angewendet wird, die als Ziffern verwendet werden können. Eine Ziffer ist ein numerisches Zeichen, das mit anderen Ziffern kombiniert werden kann, um eine ganze Zahl in einem Nummerierungssystem darzustellen.  
  
 Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft den einem Unicode-Zeichen zugeordneten numerischen Wert ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Das Unicode-Zeichen, dessen numerischer Wert abgerufen werden soll.</param>
        <summary>Ruft den dem angegebenen Zeichen zugeordneten numerischen Wert ab.</summary>
        <returns>Der dem angegebenen Zeichen zugeordnete numerische Wert.  
  
 - oder -  
  
 -1, wenn das angegebene Zeichen kein numerisches Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der numerische Wert ist eine Unicode-Zeichen Eigenschaft, die nur für numerische Zeichen gilt. dazu gehören Bruchzeichen, tief gestellte Zeichen, Superscripts, römische Ziffern, Währungs Zähler, umschließbare Zahlen und Skript spezifische Ziffern. Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Bei der <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>-Methode wird davon ausgegangen, dass `ch` einem einzelnen linguistischen Zeichen entspricht und überprüft, ob das Zeichen in eine Dezimalzahl konvertiert werden kann. Einige Zahlen im Unicode-Standard werden jedoch durch zwei <xref:System.Char> Objekte dargestellt, die ein Ersatz Zeichenpaar bilden. Beispielsweise besteht das Nummerierungssystem der Ägäis aus den Code Punkten U + 10107 bis u + 10133. Im folgenden Beispiel wird die <xref:System.Char.ConvertFromUtf32%2A>-Methode verwendet, um eine Zeichenfolge zu instanziieren, die die Ägäis-Nummer 1 darstellt. Wie die Ausgabe des Beispiels zeigt, gibt die <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>-Methode-1 zurück, wenn Sie entweder ein hohes Ersatz Zeichen oder ein niedriges Ersatz Zeichen dieses Zeichens ist.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Der <see cref="T:System.String" /> mit dem Unicode-Zeichen, dessen numerischer Wert abgerufen werden soll.</param>
        <param name="index">Der Index des Unicode-Zeichens, dessen numerischer Wert abgerufen werden soll.</param>
        <summary>Ruft den dem Zeichen am angegebenen Index der angegebenen Zeichenfolge zugeordneten numerischen Wert ab.</summary>
        <returns>Der dem Zeichen am angegebenen Index der angegebenen Zeichenfolge zugeordnete numerische Wert.  
  
 - oder -  
  
 -1, wenn das Zeichen am angegebenen Index der angegebenen Zeichenfolge kein numerisches Zeichen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der numerische Wert ist eine Unicode-Zeichen Eigenschaft, die nur für numerische Zeichen gilt. dazu gehören Bruchzeichen, tief gestellte Zeichen, Superscripts, römische Ziffern, Währungs Zähler, umschließbare Zahlen und Skript spezifische Ziffern. Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Wenn das <xref:System.Char> Objekt an der Position `index` das erste Zeichen eines gültigen Ersatz Zeichen Paars ist, bestimmt die <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> Methode, ob das Ersatz Zeichenpaar eine numerische Ziffer bildet, und gibt, wenn dies der Fall ist, den numerischen Wert zurück. Beispielsweise besteht das Nummerierungssystem der Ägäis aus den Code Punkten U + 10107 bis u + 10133. Im folgenden Beispiel wird die <xref:System.Char.ConvertFromUtf32%2A>-Methode verwendet, um eine Zeichenfolge zu instanziieren, die jede Ägäis-Nummer darstellt. Wie die Ausgabe des Beispiels zeigt, gibt die <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>-Methode den korrekten numerischen Wert zurück, wenn der Wert für das hohe Ersatz Zeichen einer Ägäis-Nummer überschritten wird. Wenn jedoch das niedrige Ersatz Zeichen an Sie übermittelt wird, berücksichtigt es nur das niedrige Ersatz Zeichen und gibt-1 zurück.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die Unicode-Kategorie eines Unicode-Zeichens ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Das Unicode-Zeichen, dessen Unicode-Kategorie abgerufen werden soll.</param>
        <summary>Ruft die Unicode-Kategorie des angegebenen Zeichens ab.</summary>
        <returns>Ein <see cref="T:System.Globalization.UnicodeCategory" />-Wert, der die Kategorie des angegebenen Zeichens angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Unicode-Zeichen sind in Kategorien unterteilt. Die Kategorie eines Zeichens ist eine seiner Eigenschaften. Beispielsweise kann ein Zeichen ein Großbuchstabe, ein Kleinbuchstabe, eine Dezimal Ziffer, eine Buchstaben Nummer, eine connecterinterpunktions Zeichen, ein mathematisches Symbol oder ein Währungssymbol sein. Die <xref:System.Globalization.UnicodeCategory>-Klasse gibt die Kategorie eines Unicode-Zeichens zurück. Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Bei der <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A>-Methode wird davon ausgegangen, dass `ch` einem einzelnen linguistischen Zeichen entspricht und seine Kategorie zurückgibt. Dies bedeutet, dass für Ersatz Zeichenpaare anstelle der Kategorie, zu der das Ersatz Zeichen gehört, <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> zurückgegeben wird. Das Ugaritic-Alphabet belegt z. b. Code Punkte u + 10380 bis u + 1039f. Im folgenden Beispiel wird die <xref:System.Char.ConvertFromUtf32%2A>-Methode verwendet, um eine Zeichenfolge zu instanziieren, die den Ugaritic Letter Alpa (U + 10380) darstellt. Dies ist der erste Buchstabe des ugaritischen Alphabets. Wie die Ausgabe des Beispiels zeigt, gibt die <xref:System.Char.IsNumber%28System.Char%29>-Methode `false` zurück, wenn Sie entweder das hohe Ersatz Zeichen oder das niedrige Ersatz Zeichen dieses Zeichens ist.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Beachten Sie, dass <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> nicht immer denselben <xref:System.Globalization.UnicodeCategory> Wert zurückgibt wie die <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode, wenn ein bestimmtes Zeichen als Parameter übergeben wird. Die <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode ist so konzipiert, dass Sie die aktuelle Version des Unicode-Standards widerspiegelt. Obwohl die <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode in der Regel die aktuelle Version des Unicode-Standards widerspiegelt, kann Sie die Kategorie eines Zeichens zurückgeben, die auf einer früheren Version des Standards basiert, oder Sie gibt möglicherweise eine Kategorie zurück, die vom aktuellen Standard abweicht, um die Abwärtskompatibilität zu erhalten.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="codePoint">Eine Zahl, die den 32-Bit-Codepunktwert des Unicode-Zeichens darstellt.</param>
        <summary>Ruft die Unicode-Kategorie des angegebenen Zeichens ab.</summary>
        <returns>Ein <see cref="T:System.Globalization.UnicodeCategory" />-Wert, der die Kategorie des angegebenen Zeichens angibt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Der <see cref="T:System.String" /> mit dem Unicode-Zeichen, dessen Unicode-Kategorie abgerufen werden soll.</param>
        <param name="index">Der Index des Unicode-Zeichens, dessen Unicode-Kategorie abgerufen werden soll.</param>
        <summary>Ruft die Unicode-Kategorie des Zeichens am angegebenen Index der angegebenen Zeichenfolge ab.</summary>
        <returns>Ein <see cref="T:System.Globalization.UnicodeCategory" />-Wert, der die Kategorie des Zeichens am angegebenen Index der angegebenen Zeichenfolge angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Unicode-Zeichen sind in Kategorien unterteilt. Die Kategorie eines Zeichens ist eine seiner Eigenschaften. Beispielsweise kann ein Zeichen ein Großbuchstabe, ein Kleinbuchstabe, eine Dezimal Ziffer, eine Buchstaben Nummer, eine connecterinterpunktions Zeichen, ein mathematisches Symbol oder ein Währungssymbol sein. Die <xref:System.Globalization.UnicodeCategory>-Klasse gibt die Kategorie eines Unicode-Zeichens zurück. Weitere Informationen zu Unicode-Zeichen finden Sie im [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Wenn das <xref:System.Char> Objekt an der Position `index` das erste Zeichen eines gültigen Ersatz Zeichen Paars ist, gibt die <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>-Methode die Unicode-Kategorie des Ersatz Zeichen Paars zurück, anstatt <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>zurückzugeben. Das Ugaritic-Alphabet belegt z. b. Code Punkte u + 10380 bis u + 1039f. Im folgenden Beispiel wird die <xref:System.Char.ConvertFromUtf32%2A>-Methode verwendet, um eine Zeichenfolge zu instanziieren, die den Ugaritic Letter Alpa (U + 10380) darstellt. Dies ist der erste Buchstabe des ugaritischen Alphabets. Wie die Ausgabe des Beispiels zeigt, gibt die <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>-Methode <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> zurück, wenn Sie das hohe Ersatz Zeichen dieses Zeichens hat, das angibt, dass das Ersatz Zeichenpaar berücksichtigt wird. Wenn jedoch das niedrige Ersatz Zeichen an Sie übermittelt wird, wird nur das niedrige Ersatz Zeichen isoliert und <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>zurückgegeben.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Beachten Sie, dass <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Methode nicht immer denselben <xref:System.Globalization.UnicodeCategory> Wert wie die <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode zurückgibt, wenn ein bestimmtes Zeichen als Parameter übergeben wird. Die <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode ist so konzipiert, dass Sie die aktuelle Version des Unicode-Standards widerspiegelt. Obwohl die <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>-Methode in der Regel die aktuelle Version des Unicode-Standards widerspiegelt, kann Sie die Kategorie eines Zeichens zurückgeben, die auf einer früheren Version des Standards basiert, oder Sie gibt möglicherweise eine Kategorie zurück, die vom aktuellen Standard abweicht, um die Abwärtskompatibilität zu erhalten.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Werte, die von jeder Methode für verschiedene Zeichen Typen zurückgegeben werden.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> ist <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> liegt außerhalb des Bereichs der gültigen Indizes für <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="CultureAndRegionInfoBuilder" FullName="System.Globalization.CultureAndRegionInfoBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c6a72cb1c0834406e2a2701c64eaa35cee9e873" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70561711" /></Metadata><TypeSignature Language="C#" Value="public sealed class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CultureAndRegionInfoBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureAndRegionInfoBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureAndRegionInfoBuilder sealed" />
  <TypeSignature Language="F#" Value="type CultureAndRegionInfoBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>sysglobl</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine benutzerdefinierte Kultur, die neu ist oder auf einer anderen Kultur und einem anderen Land oder einer anderen Region basiert. Die benutzerdefinierte Kultur kann auf einem Computer installiert und anschließend von jeder Anwendung verwendet werden, die auf diesem Computer ausgeführt wird. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo> -Klasse enthält kulturspezifische Informationen, z. b. die zugeordnete Sprache, unter Sprache, Land/Region, Kalender und Kultur Konventionen. Diese Klasse stellt auch Kultur <xref:System.Globalization.DateTimeFormatInfo>spezifische Instanzen der Klassen, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>und <xref:System.Globalization.TextInfo> bereit, die für Kultur abhängige Vorgänge wie z. b. die Groß-/Kleinschreibung, das Formatieren und das Formatieren von Datumsangaben und Ziffern sowie Vergleichen von Zeichen folgen.  
  
 Standardmäßig unterstützt <xref:System.Globalization.CultureInfo> die-.NET Framework-Objekte, die einen vordefinierten Satz von Kulturen darstellen. Eine Liste dieser Kulturen, die auf Windows-Systemen verfügbar sind, finden Sie in der Spalte **sprach Kennzeichen** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Die <xref:System.Globalization.CultureAndRegionInfoBuilder> -Klasse ermöglicht es Ihnen, eine benutzerdefinierte Kultur zu erstellen, die vollständig neu ist oder eine vordefinierte Kultur überschreibt.  Wenn eine benutzerdefinierte Kultur auf einem bestimmten Computer installiert und registriert wird, wird Sie nicht mehr von vordefinierten <xref:System.Globalization.CultureInfo> Objekten unterschieden und kann wie diese Objekte instanziiert und verwendet werden.  
  
> [!IMPORTANT]
>  Beachten Sie, <xref:System.Globalization.CultureAndRegionInfoBuilder> dass sich die-Klasse in einer Assembly mit dem Namen "sysglobl. dll" befindet. Die erfolgreiche Kompilierung von Code, der diesen Typ verwendet, erfordert, dass Sie einen Verweis auf sysglobl. dll hinzufügen.  
  
 Eine benutzerdefinierte Kultur kann nur von einem Benutzer, der über Administratorrechte auf dem Computer verfügt, auf einem Computer registriert werden. Folglich werden von apps normalerweise keine benutzerdefinierten Kulturen erstellt und installiert. Stattdessen können Sie die-Klasse <xref:System.Globalization.CultureAndRegionInfoBuilder> verwenden, um ein spezielles Tool zu erstellen, mit dem ein Administrator eine benutzerdefinierte Kultur erstellen, installieren und registrieren kann. Nachdem die benutzerdefinierte Kultur auf einem Computer registriert wurde, können Sie die <xref:System.Globalization.CultureInfo> -Klasse in Ihrer APP verwenden, um Instanzen der benutzerdefinierten Kultur genauso wie für eine vordefinierte Kultur zu erstellen.  
  
 Wenn Sie Datums-und Uhrzeit Zeichenfolgen analysieren, die für eine benutzerdefinierte Kultur generiert <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> wurden <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> , sollten Sie anstelle <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> der <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> -oder-Methode die-oder-Methode verwenden, um die Wahrscheinlichkeit zu verbessern, dass der Analyse Vorgang erfolgreich ausgeführt wird Eine Datums-und Uhrzeit Zeichenfolge für eine benutzerdefinierte Kultur kann kompliziert und daher schwer zu analysieren sein. Die <xref:System.DateTime.Parse%2A> - <xref:System.DateTime.TryParse%2A> Methode und die-Methode versuchen, eine Zeichenfolge mit mehreren impliziten Analyse Mustern zu analysieren, die möglicherweise fehlschlagen. Die <xref:System.DateTime.TryParseExact%2A> -Methode hingegen erfordert, dass die Anwendung explizit ein oder mehrere exakte Analyse Muster bestimmt, die wahrscheinlich erfolgreich sind.  
  
## <a name="defining-and-creating-a-custom-culture"></a>Definieren und Erstellen einer benutzerdefinierten Kultur  
 Sie verwenden die <xref:System.Globalization.CultureAndRegionInfoBuilder> -Klasse, um eine benutzerdefinierte Kultur zu definieren und zu benennen. Die benutzerdefinierte Kultur kann eine völlig neue Kultur sein, eine neue Kultur, die auf einer vorhandenen Kultur (d. h. eine ergänzende Kultur) basiert, oder eine Kultur, die eine vorhandene .NET Framework Kultur ersetzt. In jedem Fall sind die grundlegenden Schritte identisch:  
  
1.  Instanziieren Sie <xref:System.Globalization.CultureAndRegionInfoBuilder> ein-Objekt, <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%28System.String%2CSystem.Globalization.CultureAndRegionModifiers%29> indem Sie dessen Konstruktor aufrufen. Um eine vorhandene Kultur zu ersetzen, übergeben Sie den Namen der Kultur <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> und den-Enumerationswert an den-Konstruktor. Um eine neue Kultur oder eine ergänzende Kultur zu erstellen, übergeben Sie einen eindeutigen Kultur Namen und entweder <xref:System.Globalization.CultureAndRegionModifiers.Neutral?displayProperty=nameWithType> den <xref:System.Globalization.CultureAndRegionModifiers.None?displayProperty=nameWithType> -oder den-Enumerationswert.  
  
    > [!NOTE]
    >  Wenn Sie den <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> -Enumerationswert verwenden, um ein <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt zu <xref:System.Globalization.CultureAndRegionInfoBuilder> instanziieren, werden die Eigenschaften des Objekts automatisch <xref:System.Globalization.CultureInfo> mit Werten aus dem Objekt aufgefüllt, das ersetzt werden soll.  
  
2.  Beim Erstellen einer neuen oder ergänzenden Kultur:  
  
    -   Füllen Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder> Eigenschaften des Objekts aus, indem <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> Sie die-Methode <xref:System.Globalization.CultureInfo> aufrufen und ein-Objekt übergeben, dessen Eigenschaftswerte dem neuen-Objekt ähneln.  
  
    -   Füllen Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder> regionalen Eigenschaften des Objekts auf, indem <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> Sie die-Methode <xref:System.Globalization.RegionInfo> aufrufen und ein-Objekt übergeben, das den Bereich der benutzerdefinierten Kultur darstellt.  
  
3.  Ändern Sie die Eigenschaften des <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekts nach Bedarf.  
  
4.  Wenn Sie beabsichtigen, die benutzerdefinierte Kultur in einer separaten Routine zu registrieren, müssen <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> Sie die-Methode aufrufen. Dadurch wird eine XML-Datei generiert, die in einer separaten benutzerdefinierten Kultur Installationsroutine geladen und registriert werden kann.  
  
## <a name="registering-a-custom-culture"></a>Registrieren einer benutzerdefinierten Kultur  
 Wenn Sie eine Registrierungs Anwendung für eine benutzerdefinierte Kultur entwickeln, die von der Anwendung getrennt ist, von der die Kultur erstellt wird <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> , wird die-Methode aufgerufen, um die XML-Datei zu laden, die die Definition der benutzerdefinierten Kultur enthält, und instanziiert das <xref:System.Globalization.CultureAndRegionInfoBuilder>-Objekt. Um die Registrierung zu behandeln, müssen <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Sie die-Methode aufzurufen. Damit die Registrierung erfolgreich ist, muss die Anwendung, die die benutzerdefinierte Kultur registriert, mit Administratorrechten auf dem Zielsystem ausgeführt werden. Andernfalls löst der- <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> aufrufbefehl <xref:System.UnauthorizedAccessException> eine-Ausnahme aus.  
  
> [!WARNING]
>  Kultur Daten können sich zwischen Systemen unterscheiden. Wenn Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder> -Klasse verwenden, um eine benutzerdefinierte Kultur zu erstellen, die für mehrere Systeme einheitlich ist, und Sie eine benutzerdefinierte Kultur erstellen, <xref:System.Globalization.RegionInfo> indem Sie Daten aus vorhandenen <xref:System.Globalization.CultureInfo> -und-Objekten laden und anpassen, sollten Sie zwei verschiedene Hilfsprogramme. Der erste erstellt die benutzerdefinierte Kultur und speichert Sie in einer XML-Datei. In der zweiten <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methode wird die-Methode verwendet, um die benutzerdefinierte Kultur aus einer XML-Datei zu laden und auf dem Zielcomputer zu registrieren.  
  
 Der Registrierungsvorgang führt die folgenden Aufgaben aus:  
  
-   Erstellt eine NLP-Datei, die die Informationen enthält, die im <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt definiert sind.  
  
-   Speichert die NLP-Datei im Verzeichnis%windir%\globalization System auf dem Zielcomputer. Dadurch können die Einstellungen der benutzerdefinierten Kultur zwischen Sitzungen beibehalten werden. (Für <xref:System.Globalization.CultureAndRegionInfoBuilder> die-Methode sind Administratorrechte erforderlich, da die NLP-Datei in einem System Verzeichnis gespeichert wird.)  
  
-   Bereitet die .NET Framework für das Durchsuchen des System Verzeichnisses%WINDIR%\Globalization anstelle eines internen Caches vor, wenn das nächste Mal eine Anforderung zum Erstellen der neuen benutzerdefinierten Kultur vorliegt.  
  
 Wenn eine benutzerdefinierte Kultur erfolgreich registriert wird, ist Sie nicht von den Kulturen unterschieden, die vom .NET Framework vordefiniert werden. Die benutzerdefinierte Kultur ist verfügbar, bis durch einen <xref:System.Globalization.CultureAndRegionInfoBuilder> -aufrufbefehl die NLP-Datei vom lokalen Computer entfernt wird.  
  
## <a name="instantiating-a-custom-culture"></a>Instanziieren einer benutzerdefinierten Kultur  
 Sie können eine Instanz der benutzerdefinierten Kultur mit einer der folgenden Methoden erstellen:  
  
-   Durch Aufrufen des <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> Konstruktors mit dem Kultur Namen.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> -Methode mit dem Kultur Namen.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> -Methode mit dem Kultur Namen.  
  
 Außerdem enthält das Array von <xref:System.Globalization.CultureInfo> -Objekten, das von der <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=nameWithType> -Methode zurückgegeben wird, die benutzerdefinierte Kultur.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine benutzerdefinierte ru-US-Kultur definiert, die die russische Sprache im USA darstellt. Im Beispiel wird die benutzerdefinierte Kultur durch das Laden von Einstellungen aus dem Russisch <xref:System.Globalization.CultureInfo> (Russische Föderation) <xref:System.Globalization.RegionInfo> -Objekt und dem US-Objekt definiert <xref:System.Globalization.CultureAndRegionInfoBuilder> und dann eine Reihe von Eigenschaften festgelegt. Im Beispiel wird die benutzerdefinierte Kultur registriert, dann instanziiert und die aktuelle Thread Kultur erstellt.  
  
 [!code-csharp[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/cs/car.cs#1)]
 [!code-vb[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/vb/car.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureAndRegionInfoBuilder (string cultureName, System.Globalization.CultureAndRegionModifiers flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cultureName, valuetype System.Globalization.CultureAndRegionModifiers flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.#ctor(System.String,System.Globalization.CultureAndRegionModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cultureName As String, flags As CultureAndRegionModifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureAndRegionInfoBuilder(System::String ^ cultureName, System::Globalization::CultureAndRegionModifiers flags);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureAndRegionInfoBuilder : string * System.Globalization.CultureAndRegionModifiers -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="new System.Globalization.CultureAndRegionInfoBuilder (cultureName, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
        <Parameter Name="flags" Type="System.Globalization.CultureAndRegionModifiers" />
      </Parameters>
      <Docs>
        <param name="cultureName">Der Name einer Kultur.</param>
        <param name="flags">Einer der <see cref="T:System.Globalization.CultureAndRegionModifiers" />-Werte, der angibt, ob das neue <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt eine neutrale Kultur ist, eine vorhandene Kultur und ein vorhandenes Land oder eine vorhandene Region ersetzt oder eine neue Kultur ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `cultureName` -Parameter gibt den Namen des neuen <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekts an.  
  
 Der `flags` -Parameter wird für einen <xref:System.Globalization.CultureAndRegionModifiers> Wert verwendet, der angibt, <xref:System.Globalization.CultureAndRegionInfoBuilder> ob das neue-Objekt eine neue benutzerdefinierte Kultur ist, oder eine vorhandene neutrale Kultur, bestimmte Kultur oder ein Windows-Gebiets Schema ersetzt.  
  
 Wenn der `cultureName` -Parameter eine vorhandene .NET Framework Kultur, eine registrierte benutzerdefinierte Kultur oder eine Kultur angibt, die aus einem <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> Windows-Gebiets Schema generiert wurde, <xref:System.Globalization.CultureAndRegionInfoBuilder> füllt der Konstruktor automatisch das neue-Objekt mit Kultur und Informationen zu Land/Region.  
  
 Füllen Sie das neue <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt mit Kultur-und Land/Region-Informationen <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> auf <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> , indem Sie die Methoden und aufrufen.  
  
## <a name="custom-culture-names"></a>Benutzerdefinierte Kultur Namen  
 Das `cultureName` bevorzugte Format des Parameters für eine neue, benutzerdefinierte Kultur ist "[`prefix`-`language`] [`region`-] [`suffix`-`…`[]]", wobei `language` die Komponente erforderlich ist und `prefix`, die Komponenten `suffix` , und sind optional. `region` Die maximale Länge jeder Komponente beträgt 8 Zeichen, und die maximale Länge des gesamten `cultureName` Parameters beträgt 84 Zeichen.  
  
 Bei `prefix` der Komponente handelt es sich um die IANA-Identifikation (Internet Assigned Numbers Authority). Geben Sie "i-" oder "i" für Kultur Namen an, die bei der IANA registriert sind, oder "x-" oder "x-" für Kultur Namen, die für die private Verwendung reserviert sind. Andernfalls ist das Präfix nicht erforderlich. Weitere Informationen finden Sie unter RFC 4646, "Tags für die Identifizierung von Sprachen".  
  
 Mit der `language` -Komponente des- `region` Parameters wird ein aus ISO 639-1 abgeleiteter, aus zwei Buchstaben bestehender Code mit zwei Buchstaben und einem aus ISO 3166 abgeleiteten aus Großbuchstaben bestehenden Code angegeben. `cultureName` Beispielsweise steht "en-US" für Englisch, wie im USA gesprochen. Das Fehlen der `region` Komponente deutet auf eine neutrale Kultur hin.  
  
 Ein `cultureName` , der mit dem Namen einer Kultur identisch ist, die in der .NET Framework enthalten ist, bedeutet eine Ersetzungs Kultur (außer Kraft Setzung). Die Werte, die den Eigenschaften einer Ersatz Kultur zugewiesen werden können, sind beschränkt. Weitere Informationen zu diesen Einschränkungen finden Sie unter Ausnahmen für die einzelnen Eigenschaften.  
  
 Die Anwendung verwendet die `suffix` -Komponente, um ähnliche Kulturen zu unterscheiden. Beispielsweise können zwei Unternehmen, ABC und XYZ, einen neuen ASP.NET-Webdienst erstellen und freigeben, um Ihre Produkte in verschiedenen Märkten weltweit zu bewerben. Auf den Webseiten für den Dienst werden Informationen wie das regionale Logo und die lokale Telefonnummer der einzelnen Unternehmen angezeigt. Dies hängt von der Kultur des Benutzers ab. Der kulturspezifische Inhalt für jede Webseite befindet sich in separaten Ressourcen Dateien, die durch den Kultur Namen identifiziert und durch den Firmennamen qualifiziert sind.  Ressourcen Dateien für die Kulturen "en-US" und "ja-JP" sind z. b. "en-US-ABC", "en-US-XYZ", "ja-JP-ABC" und "ja-JP-XYZ" benannt. Mit den Suffixen "ABC" und "xyz" kann der Webdienst dieselbe Anwendungslogik verwenden, um unterschiedliche marktspezifische Informationen anzuzeigen.  
  
 Die `suffix` Komponente kann aus unter Komponenten bestehen, wobei jede Unterkomponente durch einen Bindestrich getrennt wird und die maximale Länge jeder Unterkomponente 8 Zeichen beträgt. Wenn z. b. "en-US-Honda-Cars" der `cultureName` Parameter ist, ist "-Honda-Cars" `suffix` die Komponente.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit einem privaten use-Präfix erstellt und dann eine Reihe von Eigenschaften aufgelistet. In der ersten Eigenschaft wird der Name der Kultur aufgelistet.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> ist die leere Zeichenfolge ("").  
  
- oder -  
 <paramref name="cultureName" /> enthält nicht nur die Zeichen "0" bis "9", "a" bis "z", "A" bis "Z", Bindestrich (-) und Unterstrich (_).  
  
- oder -  
 <paramref name="cultureName" /> enthält Bindestriche (-), um die Komponenten zu trennen, aber es fehlt mindestens eine der Komponenten <paramref name="prefix" />, <paramref name="language" />, <paramref name="region" /> oder <paramref name="suffix" />. Es stehen also mindestens zwei Bindestriche nebeneinander.  
  
- oder - 
 <paramref name="cultureName" /> ist länger als 84 Zeichen.  
  
- oder -  
 <paramref name="cultureName" /> enthält Bindestriche, um die Komponenten zu trennen, aber mindestens eine der Komponenten ist länger als 8 Zeichen.  
  
- oder -  
 <paramref name="cultureName" /> enthält einen führenden oder nachfolgenden Bindestrich (-) oder Unterstrich (_).  
  
- oder -  
 <paramref name="cultureName" /> gibt statt einer .NET Framework-Kultur eine Ersatzkultur für die alternative Sortierung an. So ist <paramref name="culturenName" /> z. B. "de-de_phoneb", eine Kultur, in der Zeichenfolgen wie in einem deutschen Telefonbuch sortiert werden, und nicht "de-DE", die Kultur für Deutsch (Deutschland).  
  
- oder -  
 <paramref name="flags" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.CultureAndRegionModifiers" />-Werten.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> oder <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />, und <paramref name="cultureName" /> gibt eine Kultur an, die nicht gefunden werden kann.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" />, und <paramref name="cultureName" /> gibt eine vom Benutzer erstellte benutzerdefinierte Kultur an, die keine mit .NET Framework ausgelieferte Kultur ersetzt.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />, und <paramref name="cultureName" /> gibt eine Kultur an, die keine neutrale Kultur ist.  
  
- oder - 
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />, und <paramref name="cultureName" /> gibt eine vom Benutzer erstellte benutzerdefinierte Kultur an, die eine spezifische mit .NET Framework ausgelieferte Kultur ersetzt.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="T:System.Globalization.CultureAndRegionModifiers" />
      </Docs>
    </Member>
    <Member MemberName="AvailableCalendars">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar[] AvailableCalendars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] AvailableCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Property AvailableCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Globalization::Calendar ^&gt; ^ AvailableCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); void set(cli::array &lt;System::Globalization::Calendar ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AvailableCalendars : System.Globalization.Calendar[] with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Array von Kalendern ab, die von diesem <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt unterstützt werden, oder legt dieses fest.</summary>
        <value>Ein Array von Kalendern.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Das zugewiesene Array in einem set-Vorgang ist <see langword="null" />, oder ein Element des zugewiesenen Arrays ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Diese Eigenschaft wird für neutrale Kulturen nicht unterstützt.  
  
- oder -  
Das zugewiesene Array in einem set-Vorgang enthält <see cref="T:System.Globalization.PersianCalendar" />, <see cref="T:System.Globalization.TaiwanLunisolarCalendar" />, <see cref="T:System.Globalization.KoreanLunisolarCalendar" />, <see cref="T:System.Globalization.JapaneseLunisolarCalendar" />, <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> oder <see cref="T:System.Globalization.JulianCalendar" />.  
  
- oder -  
Bei einem Set-Vorgang enthält das zugewiesene Array einen benutzerdefinierten Kalender.</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.CompareInfo CompareInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); void set(System::Globalization::CompareInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CompareInfo" />-Objekt ab, in dem festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden, oder legt dieses fest.</summary>
        <value>Das <see cref="T:System.Globalization.CompareInfo" />-Objekt, in dem festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A?displayProperty=nameWithType> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die <xref:System.Globalization.TextInfo> - <xref:System.Globalization.CompareInfo> und-Objekte, die der <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> - <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> Eigenschaft und der-Eigenschaft zugewiesen sind, unterstützen Kultur abhängige Zeichen folgen Vergleiche mit Groß-/Kleinschreibung Das <xref:System.Globalization.CompareInfo> -Objekt verfügt auch über Methoden, <xref:System.Globalization.CompareOptions> die einen-Parameter enthalten, der Kultur abhängige, Groß-/Kleinschreibung unterschieden wird. Diese beiden Eigenschaften sollten und <xref:System.Globalization.TextInfo> <xref:System.Globalization.CompareInfo> Objekte zugewiesen werden, die das gleiche Gebiets Schema darstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der zugewiesene Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Diese benutzerdefinierte Kultur überschreibt eine integrierte Kultur.</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConsoleFallbackUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConsoleFallbackUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsoleFallbackUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConsoleFallbackUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsoleFallbackUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die bei einer ungeeigneten Standard-GUI-Kultur geeignete alternative GUI-Kultur für Konsolenanwendungen ab oder legt diese fest.</summary>
        <value>Eine alternative Kultur, die zum Lesen und Anzeigen von Texten auf der Konsole verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei einem Get-Vorgang entspricht <xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> die-Eigenschaft der <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> -Methode. Geben `null` Sie in einem Set-Vorgang an, um anzugeben, dass die <xref:System.Globalization.CultureAndRegionInfoBuilder> durch das aktuelle-Objekt definierte Kultur die alternative Kultur der Benutzeroberfläche ist. Wenn Sie versuchen, die-Eigenschaft auf eine Kulturfest zulegen, die selbst über eine andere Benutzeroberflächen Kultur für die Konsolen Fallback verfügt, wird ihr die endgültige Kultur "Blatt" zugewiesen.  
  
 Sprachen wie Arabisch, Hebräisch, Persian, Urdu und Syriac basieren auf bidirektionalem Text. Für Windows-Anwendungen, die eine grafische Benutzeroberfläche verwenden, werden bidirektionale Sprachen unterstützt. Allerdings bieten Konsolen Anwendungen, die die Text Benutzeroberfläche der Betriebssystem Konsole verwenden, keine bidirektionale Unterstützung. Wenn eine Konsolenanwendung in Arabisch oder Hebräisch lokalisiert wird, wird daher nicht lesbarer Text auf dem Konsolenbildschirm angezeigt.  
  
 Die Kultur der Benutzeroberfläche gibt die Ressourcen an, die eine Anwendung benötigt, um Benutzereingaben und-Ausgaben zu unterstützen, und ist standardmäßig identisch mit der Kultur des Betriebssystems. Beispielsweise gibt die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> -Eigenschaft eine arabische Kultur für ein Arabisch-Betriebssystem zurück. Die Anwendung sollte die <xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> -Eigenschaft zum Abrufen einer neutralen Kultur verwenden, die für die Benutzeroberfläche einer Konsolenanwendung geeignet ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">In einem set-Vorgang, in dem die angegebene Kultur nicht <see langword="null" /> ist, entspricht die <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />-Eigenschaft der angegebenen Kultur nicht der angegebenen Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromLdml">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml (string xmlFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml(string xmlFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLdml (xmlFileName As String) As CultureAndRegionInfoBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureAndRegionInfoBuilder ^ CreateFromLdml(System::String ^ xmlFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromLdml : string -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml xmlFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureAndRegionInfoBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlFileName">Der Name einer Datei, die die XML-Darstellung eines <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts enthält.</param>
        <summary>Rekonstruiert ein <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt aus einer angegebenen XML-Datei, die eine Darstellung des Objekts enthält.</summary>
        <returns>Ein neues Objekt, das den unter dem <paramref name="xmlFileName" />-Parameter gespeicherten Informationen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `xmlFileName` Parameter gibt einen Dateinamen, die die XML-Darstellung der enthält einem <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt. Das Format der XML-Datei heißt LDML (Locale Data Markup Language), Version 1,1. Ein neues <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt wird erstellt und mit den Daten in `xmlFileName`initialisiert. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> -Methode führt den umgekehrten Vorgang der <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> -Methode aus.  
  
 In der LDML-Datei werden die Eigenschaften einer Kultur als untergeordnete Elemente des `<special>` -Elements `<identity>` im-Abschnitt angegeben. Ein Eigenschafts Wert wird in der Regel durch das `type` -Attribut des-Elements angegeben. Der folgende Auszug aus einer LDML-Datei definiert z. b. das übergeordnete Element einer Kultur als Englisch neutrale Kultur.  
  
```xml  
<identity>  
   <version number="1.1">ldml version 1.1</version>  
   <generation date="2012-05-16" />  
   <special xmlns:msLocale="http://schemas.microsoft.com/globalization/2004/08/carib/ldml">  
      <!-content removed -->  
      <msLocale:parentName type="en" />  
      <!-content removed -->  
   </special>  
</identity>  
```  
  
 Weitere Informationen zum LDML-Standard finden Sie unter [Unicode Technical Standard #35, "Locale Data Markup Language (LDML)"](https://go.microsoft.com/fwlink/p/?LinkId=252840) auf der Website des Unicode-Consortium.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methoden.  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="xmlFileName" /> ist eine leere Zeichenfolge ("") oder ein ungültiger Datei- oder Pfadname.</exception>
        <exception cref="T:System.Xml.XmlException">Die Daten in <paramref name="xmlFileName" /> weisen kein gültiges XML-Format auf.  
  
- oder -  
Beim Zugriff auf <paramref name="xmlFileName" /> ist ein E/A-Fehler aufgetreten.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Die Daten in <paramref name="xmlFileName" /> weisen kein gültiges LDML-Format auf.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CultureEnglishName">
      <MemberSignature Language="C#" Value="public string CultureEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den englischen Kulturnamen ab oder legt diesen fest.</summary>
        <value>Der englische Kulturname.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.EnglishName%2A> Eigenschaft.  
  
 Beispielsweise ist der Rückgabewert <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> der-Eigenschaft für die jeweilige Kultur Englisch, wie er im USA gesprochen wird, "English (USA)".  
  
 Der Wert dieser Eigenschaft ist unabhängig von der Sprachversion der .NET Framework identisch.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit einem privaten use-Präfix erstellt und dann eine Reihe von Eigenschaften aufgelistet. In der ersten Eigenschaft wird der Name der Kultur aufgelistet.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 0 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Kultur ab, die erstellt wird.</summary>
        <value>Der Name der Kultur des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist der Name der Kultur, die im <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> Konstruktor angegeben ist. Wenn der angegebene Kultur Name mit einer vorhandenen Kultur identisch ist (mit Ausnahme von Case), ist der Rückgabewert der Name der vorhandenen Kultur, nicht der angegebene Kultur Name.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit einem privaten use-Präfix erstellt und dann eine Reihe von Eigenschaften aufgelistet. In der ersten Eigenschaft wird der Name der Kultur aufgelistet.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureNativeName">
      <MemberSignature Language="C#" Value="public string CultureNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format und der Sprache ab, das bzw. die in der Kultur für die Anzeige festgelegt sind, oder legt diesen fest.</summary>
        <value>Der Kulturname im Format und in der Sprache, das bzw. die in der Kultur für die Anzeige festgelegt sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.NativeName%2A> Eigenschaft.  
  
 Der Wert dieser Eigenschaft ist unabhängig von der Sprachversion der .NET Framework identisch.  
  
 Der vollständige Name der Kultur wird möglicherweise nicht ordnungsgemäß angezeigt, wenn das System nicht so eingestellt ist, dass die Sprache der Kultur ordnungsgemäß angezeigt wird. Wenn die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> Eigenschaft z. b. "ja-JP" für Japanisch (Japan) lautet, <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> wird die Eigenschaft auf einem System, das nur auf Englisch festgelegt ist, nicht ordnungsgemäß angezeigt. Bei mehrsprachigen Betriebssystemen, wie z. b. Windows 2000 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> , wird die-Eigenschaft jedoch ordnungsgemäß angezeigt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit einem privaten use-Präfix erstellt und dann eine Reihe von Eigenschaften aufgelistet. In der ersten Eigenschaft wird der Name der Kultur aufgelistet.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 0 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Globalization.CultureTypes" />-Wert ab, mit dem die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellte Kultur beschrieben wird.</summary>
        <value>Einer der <see cref="T:System.Globalization.CultureTypes" />-Werte.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="P:System.Globalization.CultureInfo.CultureTypes" />
        <altmember cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyEnglishName">
      <MemberSignature Language="C#" Value="public string CurrencyEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den englischen Namen der Währung ab, die in dem Land oder der Region verwendet wird, die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird, oder legt diesen Namen fest.</summary>
        <value>Der englische Name der in dieser Region verwendeten Währung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName%2A> Eigenschaft ist identisch mit der <xref:System.Globalization.RegionInfo.CurrencyEnglishName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang ist die leere Zeichenfolge ("").</exception>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrencyNativeName">
      <MemberSignature Language="C#" Value="public string CurrencyNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den systemeigenen Namen der Währung ab, die in dem Land oder der Region verwendet wird, die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird, oder legt diesen Namen fest.</summary>
        <value>Der Name der Währung, die in dem Land oder der Region verwendet wird, die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird und in der Sprache formatiert ist, die dem entsprechenden Landes-/Regionalcode nach ISO 3166 zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName%2A> Eigenschaft ist identisch mit der <xref:System.Globalization.RegionInfo.CurrencyNativeName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang ist die leere Zeichenfolge ("").</exception>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="GeoId">
      <MemberSignature Language="C#" Value="public int GeoId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GeoId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberSignature Language="VB.NET" Value="Public Property GeoId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GeoId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.GeoId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine eindeutige Identifikationsnummer für eine geographische Region, ein Land, eine Stadt oder einen Ort ab oder legt diese fest.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen geographischen Ort eindeutig identifiziert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.GeoId%2A> Eigenschaft.  
  
 Die Anwendung sollte die <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> -Eigenschaft verwenden, um Kunden kulturspezifische Dienste bereitzustellen. Beispielsweise kann die <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> -Eigenschaft als Schlüssel verwendet werden, um auf einen Datenbankdaten Satz zuzugreifen, der bestimmte Informationen zu einer Region enthält.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt definiert eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="GregorianDateTimeFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property GregorianDateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DateTimeFormatInfo ^ GregorianDateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GregorianDateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Globalization.DateTimeFormatInfo" />-Objekt ab, das das Format von Datumsangaben und Uhrzeiten nach dem gregorianischen Kalender definiert, oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Globalization.DateTimeFormatInfo" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Kultur, einschließlich der vom aktuellen <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt definierten Kultur, enthält einen lokalisierten gregorianischen Kalender, der einem <xref:System.Globalization.DateTimeFormatInfo> -Objekt zugeordnet ist. Das <xref:System.Globalization.DateTimeFormatInfo> -Objekt definiert, wie Ihre Anwendung Datumsangaben und Uhrzeiten anzeigt. Der <xref:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat%2A> Eigenschafts Wert ist <xref:System.Globalization.DateTimeFormatInfo> das Objekt, das dem ersten lokalisierten gregorianischen Kalender zugeordnet <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> ist, der von der Eigenschaft zurückgegeben wird  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Eine Eigenschaft des Werts in einem set-Vorgang hat einen ungültigen Eigenschaftswert zurückgegeben.</exception>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen nach RFC 4646, „Tags for the Identification of Languages“, formatierten Kulturnamen ab oder legt diesen fest.</summary>
        <value>Ein nach RFC 4646 formatierter Kulturname.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag%2A> -Eigenschaft ruft einen nach RFC 4646 formatierten Kultur Namen ab oder legt diesen fest. dieser Wert kann sich von dem von <xref:System.Globalization.CultureInfo.Name%2A> der-Eigenschaft zurückgegebenen Kultur Namen unterscheiden. In der .NET Framework Version 1,0 war der neutrale Kultur Name für traditionelles Chinesisch z. b. "zh-CHT". Im Gegensatz dazu wird in RFC 4646 der Kultur Name als "zh-Hant" definiert. (Beachten Sie, dass in der .NET Framework Version 4 der Anzeige Name für "zh-CHT" "Chinesisch (traditionell) Legacy" lautet.)  
  
 Ein RFC 4646-Kultur Name besteht aus mehreren Komponenten. Ein typischer Kultur Name besteht aus einem obligatorischen sprach Bezeichner, einer optionalen Skript-ID und einem optionalen Land-/Regionsbezeichner. Beispielsweise ist ein gültiger RFC 4646-Kultur Name für die serbische Sprache, das kyrillische Skript und die Region von Serbien "SR-Cyrl-RS".  
  
 Beachten Sie, dass zwei oder mehr Kulturen dasselbe IETF-Sprachtag aufweisen können.  
  
 Weitere Informationen finden Sie unter RFC 4646, "Tags für die Identifizierung von Sprachen", unter [anfordern von Kommentaren](https://go.microsoft.com/fwlink/?linkid=45286).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">In einem Set-Vorgang ist der Wert <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge eines Werts in einem set-Vorgang liegt nicht zwischen 1 und 84 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Eine Komponente des im Wert angegebenen Namens in einem set-Vorgang ist leer oder länger als 8 Zeichen bzw. kein alphanumerisches Zeichen oder Bindestrich (-), oder der Name einhält einen führenden oder nachfolgenden Bindestrich.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsMetric">
      <MemberSignature Language="C#" Value="public bool IsMetric { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMetric" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberSignature Language="VB.NET" Value="Public Property IsMetric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMetric { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsMetric : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für Maßeinheiten in dem Land bzw. der Region das metrische System verwendet wird, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn in dem Land oder der Region für Maßeinheiten das metrische System verwendet wird, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="ISOCurrencySymbol">
      <MemberSignature Language="C#" Value="public string ISOCurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ISOCurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property ISOCurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ISOCurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ISOCurrencySymbol : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das aus drei Zeichen bestehende, dem Land bzw. der Region nach ISO 4217 zugeordnete Währungssymbol ab.</summary>
        <value>Das aus drei Zeichen bestehende, dem Land bzw. der Region nach ISO 4217 zugeordnete Währungssymbol.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.ISOCurrencySymbol%2A> Eigenschaft.  
  
 Eine Liste der dreistelligen ISO 4217-Währungssymbole finden Sie im <xref:System.Globalization.RegionInfo> Thema zur-Klasse. Das Währungssymbol ISO 4217 für den USA Dollar lautet z. b. "USD".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dies ist eine neutrale Kultur.</exception>
        <exception cref="T:System.ArgumentNullException">In einem Set-Vorgang ist der Wert <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem set-Vorgang ist nicht zwischen 0 und 8 Zeichen lang.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die vorherrschende Schreibrichtung der Textzeilen im Schriftsystem ab, das dem aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt zugeordnet ist, oder legt diese fest.</summary>
        <value><see langword="true" />, wenn die vorherrschende Schreibrichtung der Textzeilen im aktuellen Schriftsystem von rechts nach links ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anwendung verwendet die <xref:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft%2A> -Eigenschaft, um die relative Position von Steuerelementen wie Schaltflächen und Bild Lauf leisten in einer grafischen Benutzeroberfläche zu bestimmen.  
  
 Um auf die vorherrschende Textrichtung in einer vom aktuellen <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt erstellten benutzerdefinierten Kultur zuzugreifen, sollte die Anwendung die <xref:System.Globalization.TextInfo.IsRightToLeft%2A> -Eigenschaft des-Objekts verwenden, das von der <xref:System.Globalization.CultureInfo.TextInfo%2A> -Eigenschaft der benutzerdefinierten Kultur zurückgegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public int KeyboardLayoutId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyboardLayoutId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Bezeichner für das aktive Eingabegebietsschema ab oder legt diesen fest.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen Bezeichner für das Eingabegebietsschema angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.KeyboardLayoutId%2A> Eigenschaft.  
  
 Der Bezeichner für das Eingabe Gebiets Schema wurde früher als Tastaturlayout bezeichnet. Der Bezeichner kann für einen sprach-/textkonverterkonverter, einen Eingabemethoden-Editor (IME) oder eine beliebige andere Form von Eingaben verwendet werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem set-Vorgang ist 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturbezeichner für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ab.</summary>
        <value>Der Kulturbezeichner für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.LCID%2A?displayProperty=nameWithType> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Für Ersetzungs Kulturen wird der Kultur Bezeichner dem entsprechenden NLS-Gebiets Schema Bezeichner (National Language Support) zugeordnet. Bei benutzerdefinierten Kulturen ist der Wert dieser Eigenschaft immer hexadezimal 0x1000.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromCultureInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromCultureInfo (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromCultureInfo(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromCultureInfo (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromCultureInfo(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromCultureInfo : System.Globalization.CultureInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Das Objekt, dessen Eigenschaften verwendet werden.</param>
        <summary>Legt die Eigenschaften des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts mit den entsprechenden Eigenschaften des angegebenen <see cref="T:System.Globalization.CultureInfo" />-Objekts fest.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromRegionInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromRegionInfo (System.Globalization.RegionInfo region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromRegionInfo(class System.Globalization.RegionInfo region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo(System.Globalization.RegionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromRegionInfo (region As RegionInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromRegionInfo(System::Globalization::RegionInfo ^ region);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromRegionInfo : System.Globalization.RegionInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromRegionInfo region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Globalization.RegionInfo" />
      </Parameters>
      <Docs>
        <param name="region">Das Objekt, dessen Eigenschaften verwendet werden.</param>
        <summary>Legt die Eigenschaften des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts mit den entsprechenden Eigenschaften des angegebenen <see cref="T:System.Globalization.RegionInfo" />-Objekts fest.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="region" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Es können keine Landes-/Regionsinformationen festgelegt werden, weil das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt eine neutrale Kultur angibt.</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ab, das das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert, oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft.  
  
 Die Anwendung sollte diese Eigenschaft nur für bestimmte Kulturen aufgerufen werden.  
  
 Die <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>Eigenschaften <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, , <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>  und <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>  von werden <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A>  ignoriert. Die gespeicherte Form einer Kultur speichert keine expliziten Werte für diese Eigenschaften. Stattdessen bei die Kultur geladen wird, als Standardwerte immer <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, und <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>bzw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Angabe in einer Eigenschaft für Zahlen, Währungen oder Prozentsätze für diese Kultur enthält zu viele Ziffern, oder sie liegt außerhalb des zulässigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die übergeordnete Kultur der aktuellen benutzerdefinierten Kultur darstellt, oder legt dieses fest.</summary>
        <value>Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die übergeordnete Kultur der aktuellen benutzerdefinierten Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kulturen verfügen über eine Hierarchie. Bei vordefinierten Kulturen ist das übergeordnete Element einer bestimmten Kultur eine neutrale Kultur, und das übergeordnete Element einer neutralen Kultur <xref:System.Globalization.CultureInfo.InvariantCulture%2A>ist das. Die übergeordnete Kultur umfasst nur den Satz von Informationen, die für die untergeordneten Elemente häufig vorkommen.  
  
 Im Allgemeinen wird empfohlen, dass benutzerdefinierte Kulturen dieser Hierarchie entsprechen. Standardmäßig ist die <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> einer benutzerdefinierten Kultur jedoch die <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> der Kultur, auf der Sie basiert. Wenn die Anwendung eine Kultur mit <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> "en-US-MyCulture" erstellt, die auf "en-US" basiert, ist das übergeordnete Element "en", da dies der <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> von "en-US" ist. Wenn die Anwendung "en-US" als <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> der neuen benutzerdefinierten Kultur verwendet, muss dieser Wert explizit festgelegt werden.  
  
 Wenn die Ressourcen für die jeweilige Kultur im System nicht verfügbar sind, werden die Ressourcen für die neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die in die Hauptassembly eingebetteten Ressourcen verwendet. Weitere Informationen zum Ressourcen Fall Backprozess finden Sie unter [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)Bereitstellen von Ressourcen.  
  
 Die Liste der Kulturen in der Windows-API unterscheidet sich geringfügig von der Liste der Kulturen in der .NET Framework. Wenn Interoperabilität mit Windows erforderlich ist, z. b. durch den Platt Form Aufruf Mechanismus, sollte die Anwendung eine bestimmte Kultur verwenden, die in der .NET Framework definiert ist. Dadurch wird die Konsistenz mit dem entsprechenden Windows-Gebiets Schema sichergestellt, das <xref:System.Globalization.CultureInfo.LCID%2A>mit identisch identifiziert wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert für die Kultur in einem set-Vorgang kann nicht gefunden werden. Möglicherweise ist der zugewiesene Wert eine nicht registrierte benutzerdefinierte Kultur.</exception>
        <exception cref="T:System.ArgumentNullException">In einem Set-Vorgang ist der Wert <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">In einem set-Vorgang, bei dem die Vorgänger der aktuellen Kultur durchlaufen werden, kann die invariante Kultur nicht innerhalb von 10 Vorgängergenerationen gefunden werden.  
  
 - oder -  
  
 In einem set-Vorgang wurde ein zirkulärer Verweis ermittelt: der zugewiesene Wert ist ein Vorgänger der aktuellen benutzerdefinierten Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionEnglishName">
      <MemberSignature Language="C#" Value="public string RegionEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständigen englischen Namen des Landes bzw. der Region ab oder legt diesen fest.</summary>
        <value>Der vollständige Name des Landes bzw. der Region auf Englisch.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.EnglishName%2A> Eigenschaft.  
  
 Beispielsweise ist der Rückgabewert von <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> für die USA "USA".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 0 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionName">
      <MemberSignature Language="C#" Value="public string RegionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegionName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Landes bzw. der Region für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ab.</summary>
        <value>Der Name des Landes bzw. der Region für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist der Name der Kultur, die im <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> Konstruktor angegeben ist. Wenn der angegebene Kultur Name mit einer vorhandenen Kultur identisch ist (mit Ausnahme von Case), ist der Rückgabewert der Name der vorhandenen Kultur, nicht der angegebene Kultur Name.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.Name%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionNativeName">
      <MemberSignature Language="C#" Value="public string RegionNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständigen Namen des Landes bzw. der Region ab, der örtlich in dieser benutzerdefinierten Kultur verwendet wird, oder legt diesen fest.</summary>
        <value>Der örtlich verwendete Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.NativeName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Register();" />
      <MemberSignature Language="F#" Value="member this.Register : unit -&gt; unit" Usage="cultureAndRegionInfoBuilder.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Behält das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt als benutzerdefinierte Kultur auf dem lokalen Computer bei und macht diese Kultur für Anwendungen verfügbar. Erfordert Administratorberechtigungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> -Methode speichert eine benutzerdefinierte Kultur als Datei auf dem lokalen Computer im Unterverzeichnis "Globalization" des Verzeichnisses, das von der Win32-Funktion " [GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561) " zurückgegeben wird. Dieser Vorgang wird als Registrieren der benutzerdefinierten Kultur bezeichnet. Nachdem die benutzerdefinierte Kultur registriert ist, kann eine neue benutzerdefinierte Kultur erstellt werden, indem der Kultur Name <xref:System.Globalization.CultureInfo.%23ctor%2A> in einem Konstruktor angegeben oder <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> die-Methode aufgerufen wird.  
  
 Die benutzerdefinierte Kultur kann durch Aufrufen der <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> -Methode entfernt werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode.  
  
 [!code-csharp[sys.glob.carib.register#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.register/CS/persist.cs#1)]
 [!code-vb[sys.glob.carib.register#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.register/VB/persist.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die benutzerdefinierte Kultur ist bereits registriert.  
  
- oder - 
Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt verfügt über eine Eigenschaft, die festgelegt werden muss, bevor die Kultur registriert werden kann. Für alle Kulturen, neutrale und spezifische, müssen <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" /> und <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" /> festgelegt werden. Für spezifische Kulturen müssen auch <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />, <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" /> und <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" /> festgelegt werden.  
  
Diese Methode löst <see cref="T:System.InvalidOperationException" /> auch dann aus, wenn die folgenden Eigenschaften nicht definiert sind: 
 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert einer <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekteigenschaft übersteigt seine zulässige Höchstlänge oder seinen zulässigen Höchstwert.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über Administratorberechtigungen.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="cultureAndRegionInfoBuilder.Save filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Der Name einer Datei, die die XML-Darstellung dieser benutzerdefinierten Kultur enthalten soll.</param>
        <summary>Schreibt eine XML-Darstellung des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts in die angegebene Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> -Methode schreibt das <xref:System.Globalization.CultureAndRegionInfoBuilder> aktuelle-Objekt in die durch den `filename` -Parameter angegebene Datei in einem XML-Format mit dem Namen Locale Data Markup Language (LDML) Version 1,1. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> -Methode führt den umgekehrten Vorgang der <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> -Methode aus.  
  
 Weitere Informationen zum Format einer LDML-Datei finden Sie unter der <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> -Methode. Weitere Informationen zum LDML-Standard finden Sie unter [Unicode Technical Standard #35, "Locale Data Markup Language (LDML)"](https://go.microsoft.com/fwlink/p/?LinkId=252840) auf der Website des Unicode-Consortium.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methoden.  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filename" /> ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert einer Eigenschaft der im aktuellen <see cref="T:System.Globalization.DateTimeFormatInfo" />-Objekt enthaltenen Objekte<see cref="T:System.Globalization.TextInfo" />, <see cref="T:System.Globalization.NumberFormatInfo" /> oder <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> ist ungültig.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.TextInfo TextInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); void set(System::Globalization::TextInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.TextInfo" />-Objekt ab, das das dieser benutzerdefinierten Kultur zugeordnete Schriftsystem definiert, oder legt dieses fest.</summary>
        <value>Das Objekt, das das dieser benutzerdefinierten Kultur zugeordnete Schriftsystem definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A?displayProperty=nameWithType> -Eigenschaft stellt kulturspezifische Schreib Informationen für Zeichen folgen bereit. Dies entspricht der <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> -Eigenschaft.  
  
 Die <xref:System.Globalization.TextInfo> - <xref:System.Globalization.CompareInfo> und-Objekte, die der <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> - <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> Eigenschaft und der-Eigenschaft zugewiesen sind, unterstützen Kultur abhängige Zeichen folgen Vergleiche mit Groß-/Kleinschreibung Das <xref:System.Globalization.CompareInfo> -Objekt verfügt auch über Methoden, <xref:System.Globalization.CompareOptions> die einen-Parameter enthalten, der Kultur abhängige, Groß-/Kleinschreibung unterschieden wird. Diese beiden Eigenschaften sollten und <xref:System.Globalization.TextInfo> <xref:System.Globalization.CompareInfo> Objekte zugewiesen werden, die das gleiche Gebiets Schema darstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang wird für Ersatzkulturen nicht unterstützt.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Anzahl von Zeichen in einem Listentrennzeichen liegt nicht zwischen 0 und 3.</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 639-2 für die Sprache dieser benutzerdefinierten Kultur ab oder legt diesen fest.</summary>
        <value>Der aus drei Buchstaben bestehende Code nach ISO 639-2 für die Sprache des aktuellen <see cref="T:System.Globalization.CultureInfo" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.ThreeLetterISOLanguageName%2A> Eigenschaft.  
  
 Die drei buchstabige Abkürzung für Englisch lautet z. b. "eng".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISORegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 3166 für das Land bzw. die Region ab oder legt diesen fest.</summary>
        <value>Der in ISO 3166 definierte, aus drei Buchstaben bestehende Code für das Land bzw. die Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> Eigenschaft.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> -Eigenschaft enthält einen der aus drei Buchstaben bestehenden Codes, die in ISO 3166 für Land/Region definiert sind. Der aus drei Buchstaben bestehende Code für USA lautet z. b. "USA".  
  
 Der Fall ist nicht signifikant. Allerdings enthalten <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>die <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> Eigenschaften, und den entsprechenden Code in Großbuchstaben.  
  
 Die vordefinierten Länder-/Regionsnamen werden im <xref:System.Globalization.RegionInfo> Thema der-Klasse aufgelistet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code für die Sprache ab, wie er in der Windows-API definiert ist, oder legt diesen fest.</summary>
        <value>Der aus drei Buchstaben bestehenden Code für die Sprache, wie er in der Windows-API definiert ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName%2A> Eigenschaft.  
  
 Diese Eigenschaft gibt denselben Wert wie die Windows-API- `GetLocaleInfo` Methode mit dem LOCALE_SABBREVLANGNAME-Wert zurück. Beispielsweise lautet der aus drei Buchstaben bestehende Code für Englisch (USA), wie er in der Windows-API definiert ist, "deu".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
        <exception cref="T:System.NotSupportedException">Die aktuelle benutzerdefinierte Kultur in einem set-Vorgang ist eine Ersatzkultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsRegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsRegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsRegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsRegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsRegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsRegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code ab, der von Windows dem Land bzw. der Region zugeordnet wird, das bzw. die durch die aktuelle benutzerdefinierte Kultur dargestellt wird, oder legt diesen fest.</summary>
        <value>Der aus drei Buchstaben bestehende Code, der von Windows dem Land bzw. der Region zugeordnet wird, das bzw. die durch dieses <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName%2A> Eigenschaft.  
  
 Der aus drei Buchstaben bestehende Code für USA lautet z. b. "USA".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
        <exception cref="T:System.NotSupportedException">Die aktuelle benutzerdefinierte Kultur in einem set-Vorgang ist eine Ersatzkultur oder eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string TwoLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus zwei Buchstaben bestehenden Code nach ISO 639-1 für die Sprache des aktuellen <see cref="T:System.Globalization.CultureInfo" />-Objekts ab oder legt diesen fest.</summary>
        <value>Der aus zwei Buchstaben bestehende Code nach ISO 639-1 für die Sprache des aktuellen <see cref="T:System.Globalization.CultureInfo" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaft.  
  
 Die zwei buchstabige Abkürzung für Englisch lautet z. b. "en".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISORegionName">
      <MemberSignature Language="C#" Value="public string TwoLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus zwei Buchstaben bestehenden Code nach ISO 3166 für das Land bzw. die Region ab oder legt diesen fest.</summary>
        <value>Der in ISO 3166 definierte, aus zwei Buchstaben bestehende Code für das Land oder die Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A> Eigenschaft.  
  
 Der <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> Eigenschafts Wert ist einer der aus zwei Buchstaben bestehenden Codes, die in ISO 3166 für Land/Region definiert sind. Beispielsweise ist der aus zwei Buchstaben bestehende Code für USA "US". Die vordefinierten <xref:System.Globalization.RegionInfo> Namen werden im Thema zur <xref:System.Globalization.RegionInfo> -Klasse aufgelistet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
        <exception cref="T:System.NotSupportedException">Die aktuelle benutzerdefinierte Kultur in einem set-Vorgang ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Globalization.CultureAndRegionInfoBuilder.Unregister cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">Der Name der zu löschenden benutzerdefinierten Kultur.</param>
        <summary>Löscht eine benutzerdefinierte Kultur vom lokalen Computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> Methode führt das Gegenteil der <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode aus. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> -Methode speichert eine benutzerdefinierte Kultur als Datei auf dem lokalen Computer im Unterverzeichnis Globalization des Verzeichnisses, das von der Windows-API [GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561) -Funktion zurückgegeben wird. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> -Methode löscht die permanente benutzerdefinierte Kultur Datei vom Computer. Nachdem die Datei gelöscht wurde, können vorhandene Instanzen der benutzerdefinierten Kultur im Computerspeicher weiterhin verwendet werden, es können jedoch keine neuen Instanzen der benutzerdefinierten Kultur erstellt werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> Methode.  
  
 [!code-csharp[sys.glob.carib.unregister#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.unregister/CS/unregister.cs#1)]
 [!code-vb[sys.glob.carib.unregister#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.unregister/VB/unregister.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="cultureName" /> ist eine übergeordnete Kultur oder eine alternative Konsolen-GUI-Kultur einer abhängigen Kultur.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über Administratorberechtigungen.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> gibt eine Kultur an, die nicht gefunden wurde.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      </Docs>
    </Member>
  </Members>
</Type>

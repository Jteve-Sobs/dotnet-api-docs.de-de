<Type Name="CultureAndRegionInfoBuilder" FullName="System.Globalization.CultureAndRegionInfoBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b83703024424be0b7fdda926527cec730b7ee108" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39731805" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CultureAndRegionInfoBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureAndRegionInfoBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureAndRegionInfoBuilder sealed" />
  <TypeSignature Language="F#" Value="type CultureAndRegionInfoBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>sysglobl</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine benutzerdefinierte Kultur, die neu ist oder auf einer anderen Kultur und einem anderen Land oder einer anderen Region basiert. Die benutzerdefinierte Kultur kann auf einem Computer installiert und anschließend von jeder Anwendung verwendet werden, die auf diesem Computer ausgeführt wird. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo> -Klasse enthält kulturspezifische Informationen, z. B. die zugeordnete Sprache, untersprachen, Land/Region, Kalender und kulturellen Konventionen. Diese Klasse stellt auch kulturspezifische Instanzen der <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, und <xref:System.Globalization.TextInfo> Klassen, die für kulturabhängige Vorgänge wie z. B. Groß-/Kleinschreibung, Formatierung und Analyse für Datumsangaben und Zahlen erforderlich sind, und Vergleichen von Zeichenfolgen.  
  
 .NET Framework unterstützt standardmäßig <xref:System.Globalization.CultureInfo> Objekte, die einen vordefinierten Satz von Kulturen darstellen. Eine Liste dieser Kulturen, finden Sie unter den [National Language Support (NLS) API-Referenz](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Die <xref:System.Globalization.CultureAndRegionInfoBuilder> -Klasse können Sie eine benutzerdefinierte Kultur zu erstellen, das ist völlig neue oder, der eine vordefinierte Kultur überschreibt.  Wenn eine benutzerdefinierte Kultur installiert und auf einem bestimmten Computer registriert ist, wird es nicht von Unterschieden vordefinierte <xref:System.Globalization.CultureInfo> Objekte aufweist, und können instanziiert und wie diese Objekte verwendet.  
  
> [!IMPORTANT]
>  Beachten Sie, dass die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse in einer Assembly mit dem Namen sysglobl.dll gefunden wird. Erfolgreich Kompilieren von Code, der dieser Typ wird verwendet, müssen Sie einen Verweis auf sysglobl.dll hinzufügen.  
  
 Eine benutzerdefinierte Kultur kann nur von einem Benutzer mit Administratorrechten auf dem Computer, auf einem Computer registriert werden. Folglich apps in der Regel nicht erstellen, und Installieren von Kulturen. Sie können stattdessen die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse, um ein spezielles Tool zu erstellen, mit denen ein Administrator erstellen, installieren und registrieren eine benutzerdefinierte Kultur an. Nachdem die benutzerdefinierte Kultur auf einem Computer registriert ist, können Sie mithilfe der <xref:System.Globalization.CultureInfo> Klasse in Ihrer app zum Erstellen von Instanzen der benutzerdefinierten Kultur, wie Sie für eine vordefinierte Kultur.  
  
 Wenn Sie Zeichenfolgen für Datum und Uhrzeit für eine benutzerdefinierte Kultur generiert analysieren, verwenden Sie die <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> -Methode anstelle der <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> Methode, um die Wahrscheinlichkeit zu verbessern, die der Analysevorgang erfolgreich ist. Eine Datums- und Uhrzeitzeichenfolge für eine benutzerdefinierte Kultur kann kompliziert und daher schwer zu analysieren sein. Die <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.TryParse%2A> Methoden zu versuchen, eine Zeichenfolge mit mehrerer impliziter Analysemuster analysiert alle möglicherweise fehlschlagen. Die <xref:System.DateTime.TryParseExact%2A> -Methode, im Gegensatz dazu erfordert die Anwendung eine oder mehrere genaue Analysemuster angeben, die voraussichtlich erfolgreich sein werden.  
  
## <a name="defining-and-creating-a-custom-culture"></a>Definieren und erstellen eine benutzerdefinierte Kultur  
 Sie verwenden die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse definieren und benennen eine benutzerdefinierte Kultur an. Die benutzerdefinierte Kultur kann sein, eine ganz neue Kultur, eine neue Kultur, die auf eine vorhandene Kultur (d. h. eine Ergänzungskultur) basieren oder eine Kultur, die eine vorhandene .NET Framework-Kultur ersetzt. In jedem Fall sind die grundlegenden Schritte identisch:  
  
1.  Instanziieren einer <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt durch Aufrufen der <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%28System.String%2CSystem.Globalization.CultureAndRegionModifiers%29> Konstruktor. Um eine vorhandene Kultur zu ersetzen, übergeben Sie dem Kulturnamen und dem <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> Enumerationswert an den Konstruktor. Um eine neue oder eine ergänzende Kultur zu erstellen, übergeben Sie einen eindeutigen Kulturnamen und entweder die <xref:System.Globalization.CultureAndRegionModifiers.Neutral?displayProperty=nameWithType> oder <xref:System.Globalization.CultureAndRegionModifiers.None?displayProperty=nameWithType> Enumerationswert.  
  
    > [!NOTE]
    >  Bei Verwendung der <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> Enumerationswert zu instanziieren ein <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt, die <xref:System.Globalization.CultureAndRegionInfoBuilder> Eigenschaften des Objekts werden automatisch aufgefüllt, mit Werten aus der <xref:System.Globalization.CultureInfo> Objekt ersetzt werden.  
  
2.  Wenn Sie eine neue oder zusätzliche Kultur erstellen:  
  
    -   Füllen Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder> Eigenschaften des Objekts durch Aufrufen der <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> -Methode und übergeben ein <xref:System.Globalization.CultureInfo> Objekt, dessen Eigenschaftswerte ähnlich wie das neue Objekt sind.  
  
    -   Auffüllen der <xref:System.Globalization.CultureAndRegionInfoBuilder> regionalen Eigenschaften des Objekts durch Aufrufen der <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> -Methode und übergeben einen <xref:System.Globalization.RegionInfo> -Objekt, das den Bereich für eine benutzerdefinierte Kultur darstellt.  
  
3.  Ändern der Eigenschaften der <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt nach Bedarf.  
  
4.  Wenn Sie die benutzerdefinierte Kultur in einer separaten Routine registrieren möchten, rufen Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> Methode. Dadurch wird eine XML-Datei, die Sie laden und registrieren Sie in einer separaten benutzerdefinierte Kultur Installationsroutine generiert.  
  
## <a name="registering-a-custom-culture"></a>Registrieren eine benutzerdefinierte Kultur  
 Wenn Sie eine registrierungsanwendung für eine benutzerdefinierte Kultur entwickeln, die von der Anwendung getrennt ist, die die Kultur erstellt wird, rufen Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methode zum Laden Sie die XML-Datei, die die benutzerdefinierte Kultur Definition enthält, und Instanziieren der <xref:System.Globalization.CultureAndRegionInfoBuilder>Objekt. Um die Registrierung zu behandeln, rufen Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode. Für die Registrierung erfolgreich ist muss die Anwendung, die die benutzerdefinierte Kultur registriert mit Administratorrechten auf dem Zielsystem ausgeführt werden; andernfalls, den Aufruf von <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> löst eine <xref:System.UnauthorizedAccessException> Ausnahme.  
  
> [!WARNING]
>  Systeme können Kultur unterscheiden. Bei Verwendung der <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse, um eine benutzerdefinierte Kultur zu erstellen, die über mehrere Systeme und Sie einheitlich ist die benutzerdefinierte Kultur durch Laden von Daten aus vorhandenen erstellen <xref:System.Globalization.CultureInfo> und <xref:System.Globalization.RegionInfo> Objekte und anpassen, Sie sollten zwei entwickeln verschiedene Dienstprogramme. Die erste die benutzerdefinierte Kultur erstellt und speichert es in eine XML-Datei. Die zweite verwendet den <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methode, um die benutzerdefinierte Kultur aus einer XML-Datei laden und registrieren Sie ihn auf dem Zielcomputer.  
  
 Während der Registrierung führt die folgenden Aufgaben:  
  
-   Erstellt eine NLP-Datei, die Informationen, die in definiert ist, enthält, die <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt.  
  
-   Speichert die NLP-Datei im Systemverzeichnis %windir%\Globalization auf dem Zielcomputer an. Dadurch wird die benutzerdefinierte Kultur Einstellungen zwischen Sitzungen beibehalten werden. (Die <xref:System.Globalization.CultureAndRegionInfoBuilder> Methode sind Administratorrechte erforderlich, da die NLP-Datei in einem Systemverzeichnis gespeichert werden.)  
  
-   Vorbereitet, suchen Sie das nächste Mal das Systemverzeichnis %windir%\Globalization, statt einen internen Cache von .NET Framework gibt es eine Anforderung zum Erstellen einer neuen benutzerdefinierten Kultur.  
  
 Wenn Sie eine benutzerdefinierte Kultur erfolgreich registriert wurde, ist es über die Kulturen, die von .NET Framework vordefiniert sind. Die benutzerdefinierte Kultur ist verfügbar, bis ein Aufruf der <xref:System.Globalization.CultureAndRegionInfoBuilder> Methode entfernt die NLP-Datei aus dem lokalen Computer.  
  
## <a name="instantiating-a-custom-culture"></a>Instanziieren eine benutzerdefinierte Kultur  
 Sie können eine Instanz der benutzerdefinierten Kultur in einem der folgenden Methoden erstellen:  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> Konstruktor mit dem Namen der Kultur.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> Methode mit dem Kulturnamen.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> Methode mit dem Kulturnamen.  
  
 Außerdem wird das Array von <xref:System.Globalization.CultureInfo> Objekte, die von zurückgegeben wird das <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=nameWithType> Methode enthält die benutzerdefinierte Kultur.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine benutzerdefinierte ru-US-Kultur, die in den Vereinigten Staaten die russische Sprache darstellt. Im Beispiel wird die benutzerdefinierte Kultur definiert, durch das Laden von Einstellungen aus der Russisch (Russische Föderation) <xref:System.Globalization.CultureInfo> Objekt und den USA <xref:System.Globalization.RegionInfo> Objekt und legt dann eine Anzahl von <xref:System.Globalization.CultureAndRegionInfoBuilder> Eigenschaften. Im Beispiel registriert die benutzerdefinierte Kultur, und klicken Sie dann instanziiert wird und die aktuelle Threadkultur macht.  
  
 [!code-csharp[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/cs/car.cs#1)]
 [!code-vb[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/vb/car.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureAndRegionInfoBuilder (string cultureName, System.Globalization.CultureAndRegionModifiers flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cultureName, valuetype System.Globalization.CultureAndRegionModifiers flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.#ctor(System.String,System.Globalization.CultureAndRegionModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cultureName As String, flags As CultureAndRegionModifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureAndRegionInfoBuilder(System::String ^ cultureName, System::Globalization::CultureAndRegionModifiers flags);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureAndRegionInfoBuilder : string * System.Globalization.CultureAndRegionModifiers -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="new System.Globalization.CultureAndRegionInfoBuilder (cultureName, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
        <Parameter Name="flags" Type="System.Globalization.CultureAndRegionModifiers" />
      </Parameters>
      <Docs>
        <param name="cultureName">Der Name einer Kultur.</param>
        <param name="flags">Einer der <see cref="T:System.Globalization.CultureAndRegionModifiers" />-Werte, der angibt, ob das neue <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt eine neutrale Kultur ist, eine vorhandene Kultur und ein vorhandenes Land oder eine vorhandene Region ersetzt oder eine neue Kultur ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `cultureName` Parameter gibt den Namen des neuen <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt.  
  
 Die `flags` Parameter wird verwendet, für eine <xref:System.Globalization.CultureAndRegionModifiers> Wert, der angibt, ob die neue <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt eine neue benutzerdefinierte Kultur, oder eine vorhandene neutrale Kultur, bestimmte Kultur oder ein Windows-Gebietsschema ersetzt.  
  
 Wenn die `cultureName` Parameter gibt an, eine vorhandene .NET Framework-Kultur, die registrierte benutzerdefinierte Kultur oder Kultur, die aus einem Windows-Gebietsschema, generiert der <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> Konstruktor füllt automatisch die neue <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt mit der Kultur und Land/Region-Informationen.  
  
 Füllen Sie das neue <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt mit Informationen zur Kultur und Land/Region durch Aufrufen der <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> Methoden.  
  
## <a name="custom-culture-names"></a>Benutzerdefinierte Kulturnamen  
 Das bevorzugte Format, der die `cultureName` Parameter für eine neue benutzerdefinierte Kultur ist "[`prefix`-]`language`[-`region`] [-`suffix`[`…`]]", wobei die `language` -Komponente ist erforderlich und die `prefix`, `region`, und `suffix` Komponenten sind optional. Die maximale Länge der einzelnen Komponenten ist 8 Zeichen und die maximale Länge des gesamten `cultureName` -Parameter ist 84 Zeichen.  
  
 Die `prefix` Komponente ist die Kennung (IANA = Internet Assigned Numbers Authority). Geben Sie "i-" oder "ich:" für die Kulturnamen registriert die IANA, oder "X" oder "X-" für die Kulturnamen zur privaten Verwendung reserviert. Andernfalls ist das Präfix nicht erforderlich. Weitere Informationen finden Sie unter RFC 4646, "Tags for the Identification of Sprachen".  
  
 Die `language` -Komponente von der `cultureName` Parameter gibt an, einen Kleinbuchstaben kleingeschriebener zweibuchstabiger Code nach ISO 639-1 abgeleitet und `region` gibt an, einen Großbuchstaben kleingeschriebener zweibuchstabiger Code nach ISO 3166 abgeleitet. Steht z. B. En-US für Englisch, wie in den Vereinigten Staaten gesprochen. Das Fehlen der `region` Komponente gibt an, eine neutrale Kultur.  
  
 Ein `cultureName` , genau wie der Name einer Kultur, die in .NET Framework enthalten eine Ersatzkultur (Überschreibung) bezeichnet. Die Werte, die die Eigenschaften des eine Ersatzkultur zugewiesen werden können, sind beschränkt. Weitere Informationen zu solchen Beschränkungen finden Sie die Ausnahmen für jede Eigenschaft.  
  
 Die Anwendung verwendet die `suffix` Komponente ähnliche Kulturen unterscheiden. Beispielsweise zwei Unternehmen ABC "und" XYZ ", erstellen und teilen einen neuen Webdienst von ASP.NET, um ihre Produkte in verschiedenen Ländern auf der ganzen Welt höher zu stufen. Die Webseiten für den Dienst werden Informationen wie z. B. das regionale Logo und die lokale Telefonnummer des jedes Unternehmen je nach Kultur des Benutzers angezeigt. Die kulturspezifischen Inhalt für jede Webseite wird in separate Ressourcendateien, die durch den Kulturnamen identifiziert und gekennzeichnet werden, nach dem Firmennamen.  Ressourcendateien für die Kulturen En-US "und" ja-JP heißen z.B. En-US-ABC "," En-US-XYZ "," ja-JP-ABC "und" ja-JP-XYZ. Die Suffixe "ABC" und "XYZ" aktivieren Sie den Webdienst für die gleiche Anwendungslogik zu verwenden, um unterschiedliche marktspezifische Informationen anzuzeigen.  
  
 Die `suffix` -Komponente kann Unterkomponenten, wobei jede Unterkomponente ist durch einen Bindestrich getrennt und die maximale Länge der einzelnen Unterkomponente 8 Zeichen bestehen. Wenn "En-US-Honda-Cars" werden z. B. die `cultureName` -Parameter "- Honda - Cars" ist die `suffix` Komponente.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit dem Präfix für die private Verwendung erstellt, und klicken Sie dann enthält eine Reihe von dessen Eigenschaften. Die erste Eigenschaft enthält den Namen der Kultur.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> ist die leere Zeichenfolge ("").  
  
- oder -  
 <paramref name="cultureName" /> enthält nicht nur die Zeichen "0" bis "9", "a" bis "z", "A" bis "Z", Bindestrich (-) und Unterstrich (_).  
  
- oder -  
 <paramref name="cultureName" /> enthält Bindestriche (-), um die Komponenten zu trennen, aber es fehlt mindestens eine der Komponenten <paramref name="prefix" />, <paramref name="language" />, <paramref name="region" /> oder <paramref name="suffix" />. Es stehen also mindestens zwei Bindestriche nebeneinander.  
  
- oder -  
 <paramref name="cultureName" /> ist länger als 84 Zeichen.  
  
- oder -  
 <paramref name="cultureName" /> enthält Bindestriche, um die Komponenten zu trennen, aber mindestens eine der Komponenten ist länger als 8 Zeichen.  
  
- oder -  
 <paramref name="cultureName" /> enthält einen führenden oder nachfolgenden Bindestrich (-) oder Unterstrich (_).  
  
- oder -  
 <paramref name="cultureName" /> gibt statt einer .NET Framework-Kultur eine Ersatzkultur für die alternative Sortierung an. So ist <paramref name="culturenName" /> z. B. "de-de_phoneb", eine Kultur, in der Zeichenfolgen wie in einem deutschen Telefonbuch sortiert werden, und nicht "de-DE", die Kultur für Deutsch (Deutschland).  
  
- oder -  
 <paramref name="flags" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.CultureAndRegionModifiers" />-Werten.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> oder <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />, und <paramref name="cultureName" /> gibt eine Kultur an, die nicht gefunden werden kann.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" />, und <paramref name="cultureName" /> gibt eine vom Benutzer erstellte benutzerdefinierte Kultur an, die keine mit .NET Framework ausgelieferte Kultur ersetzt.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />, und <paramref name="cultureName" /> gibt eine Kultur an, die keine neutrale Kultur ist.  
  
- oder -  
 <paramref name="flags" /> enthält <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />, und <paramref name="cultureName" /> gibt eine vom Benutzer erstellte benutzerdefinierte Kultur an, die eine spezifische mit .NET Framework ausgelieferte Kultur ersetzt.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="T:System.Globalization.CultureAndRegionModifiers" />
      </Docs>
    </Member>
    <Member MemberName="AvailableCalendars">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar[] AvailableCalendars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] AvailableCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Property AvailableCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Globalization::Calendar ^&gt; ^ AvailableCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); void set(cli::array &lt;System::Globalization::Calendar ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AvailableCalendars : System.Globalization.Calendar[] with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Array von Kalendern ab, die von diesem <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt unterstützt werden, oder legt dieses fest.</summary>
        <value>Ein Array von Kalendern.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Das zugewiesene Array in einem set-Vorgang ist <see langword="null" />, oder ein Element des zugewiesenen Arrays ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Diese Eigenschaft wird für neutrale Kulturen nicht unterstützt.  
  
- oder -  
Das zugewiesene Array in einem set-Vorgang enthält <see cref="T:System.Globalization.PersianCalendar" />, <see cref="T:System.Globalization.TaiwanLunisolarCalendar" />, <see cref="T:System.Globalization.KoreanLunisolarCalendar" />, <see cref="T:System.Globalization.JapaneseLunisolarCalendar" />, <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> oder <see cref="T:System.Globalization.JulianCalendar" />.  
  
- oder -  
Bei einem Set-Vorgang enthält das zugewiesene Array einen benutzerdefinierten Kalender.</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.CompareInfo CompareInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); void set(System::Globalization::CompareInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CompareInfo" />-Objekt ab, in dem festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden, oder legt dieses fest.</summary>
        <value>Das <see cref="T:System.Globalization.CompareInfo" />-Objekt, in dem festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A?displayProperty=nameWithType> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die <xref:System.Globalization.TextInfo> und <xref:System.Globalization.CompareInfo> Objekte, die zugewiesen werden, die <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> Eigenschaften, die beide unterstützen Zeichenfolgenvergleich ist kulturabhängig und Groß-/Kleinschreibung beachtet. Die <xref:System.Globalization.CompareInfo> Objekt verfügt auch über Methoden, die enthalten eine <xref:System.Globalization.CompareOptions> Parameter, der Kultur, Unterscheidung nach Groß-/Kleinschreibung Vergleich unterstützt. Diese beiden Eigenschaften zugewiesen werden <xref:System.Globalization.TextInfo> und <xref:System.Globalization.CompareInfo> Objekte, die das gleiche Gebietsschema darstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der zugewiesene Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Diese benutzerdefinierte Kultur überschreibt eine integrierte Kultur.</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConsoleFallbackUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConsoleFallbackUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsoleFallbackUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConsoleFallbackUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsoleFallbackUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die bei einer ungeeigneten Standard-GUI-Kultur geeignete alternative GUI-Kultur für Konsolenanwendungen ab oder legt diese fest.</summary>
        <value>Eine alternative Kultur, die zum Lesen und Anzeigen von Texten auf der Konsole verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem Get-Vorgang die <xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> Methode. Geben Sie `null` in einem Set-Vorgang, um anzugeben, dass die Kultur der aktuellen definiert <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt ist die alternative GUI-Kultur. Wenn Sie versuchen, die Eigenschaft für eine Kultur festgelegt werden, die selbst eine andere Konsole Fallback UI-Kultur verfügt, wird dann es diese letzte "Leaf" Kultur zugewiesen werden.  
  
 Sprachen wie Arabisch, Hebräisch, Persian, Urdu und Syrisch basiert auf den bidirektionalen Text. Windows-Anwendungen, die grafische Benutzeroberfläche verwenden, unterstützen die bidirektionale Sprachen. Konsolenanwendungen, die die Benutzeroberfläche der Text der Betriebssystem-Konsole nutzen zu können, bieten jedoch keine bidirektionale Unterstützung. Wenn eine Konsolenanwendung in Arabisch oder Hebräisch lokalisiert ist, zeigt folglich es unlesbaren Text an den Konsolenbildschirm.  
  
 Der Benutzeroberflächenkultur gibt die Ressourcen, eine Anwendung Benutzer ein- und Ausgaben unterstützen muss, und in der Standardeinstellung identisch mit dem Betriebssystem-Kultur ist an. Z. B. die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft eine arabische Kultur für einem arabischen Betriebssystem zurück. Sollte die Anwendung verwenden die <xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> Eigenschaft zum Abrufen einer neutralen Kultur für die Benutzeroberfläche eine Konsole-Anwendung geeignet ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">In einem set-Vorgang, in dem die angegebene Kultur nicht <see langword="null" /> ist, entspricht die <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />-Eigenschaft der angegebenen Kultur nicht der angegebenen Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromLdml">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml (string xmlFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml(string xmlFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLdml (xmlFileName As String) As CultureAndRegionInfoBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureAndRegionInfoBuilder ^ CreateFromLdml(System::String ^ xmlFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromLdml : string -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml xmlFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureAndRegionInfoBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlFileName">Der Name einer Datei, die die XML-Darstellung eines <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts enthält.</param>
        <summary>Rekonstruiert ein <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt aus einer angegebenen XML-Datei, die eine Darstellung des Objekts enthält.</summary>
        <returns>Ein neues Objekt, das den unter dem <paramref name="xmlFileName" />-Parameter gespeicherten Informationen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `xmlFileName` Parameter gibt einen Dateinamen, die die XML-Darstellung der enthält einem <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt. Das Format der XML-Datei heißt Locale Data Markup Language (LDML) Version 1.1. Ein neues <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt erstellt und initialisiert Sie mit den Daten im `xmlFileName`. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> Methode führt den umgekehrten Vorgang der <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methode.  
  
 In der LDML-Datei, die Eigenschaften einer Kultur angegeben werden, als untergeordnete Elemente des der `<special>` Element in der `<identity>` Abschnitt. Ein Eigenschaftswert wird in der Regel anhand des Elements `type` Attribut. Der folgende Auszug aus einer Datei LDML definiert z. B. einer Kultur übergeordneten, als die neutrale Kultur Englisch.  
  
```xml  
<identity>  
   <version number="1.1">ldml version 1.1</version>  
   <generation date="2012-05-16" />  
   <special xmlns:msLocale="http://schemas.microsoft.com/globalization/2004/08/carib/ldml">  
      <!—content removed -->  
      <msLocale:parentName type="en" />  
      <!—content removed -->  
   </special>  
</identity>  
```  
  
 Weitere Informationen zu den LDML-Standard, finden Sie unter [Unicode Technical Standard #35, "Locale Data Markup Language (LDML)"](http://go.microsoft.com/fwlink/p/?LinkId=252840) auf der Website des Unicode-Konsortiums.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methoden.  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlFileName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="xmlFileName" /> ist eine leere Zeichenfolge ("") oder ein ungültiger Datei- oder Pfadname.</exception>
        <exception cref="T:System.Xml.XmlException">Die Daten in <paramref name="xmlFileName" /> weisen kein gültiges XML-Format auf.  
  
- oder -  
Beim Zugriff auf <paramref name="xmlFileName" /> ist ein E/A-Fehler aufgetreten.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Die Daten in <paramref name="xmlFileName" /> weisen kein gültiges LDML-Format auf.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CultureEnglishName">
      <MemberSignature Language="C#" Value="public string CultureEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den englischen Kulturnamen ab oder legt diesen fest.</summary>
        <value>Der englische Kulturname.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.EnglishName%2A> Eigenschaft.  
  
 Beispielsweise ist der Rückgabewert von der <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> -Eigenschaft für die spezifische Kultur Englisch gesprochen in den Vereinigten Staaten ist "Englisch (USA)".  
  
 Der Wert dieser Eigenschaft ist identisch, unabhängig von der Sprachversion von .NET Framework.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit dem Präfix für die private Verwendung erstellt, und klicken Sie dann enthält eine Reihe von dessen Eigenschaften. Die erste Eigenschaft enthält den Namen der Kultur.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 0 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Kultur ab, die erstellt wird.</summary>
        <value>Der Name der Kultur des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist der Name der Kultur angegeben, der <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> Konstruktor. Identisch mit einer vorhandenen Kultur, mit Ausnahme der Fall ist der Name der angegebenen Kultur ist der Rückgabewert den Namen des vorhandenen Kultur, nicht auf den Namen angegebenen Kultur.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit dem Präfix für die private Verwendung erstellt, und klicken Sie dann enthält eine Reihe von dessen Eigenschaften. Die erste Eigenschaft enthält den Namen der Kultur.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureNativeName">
      <MemberSignature Language="C#" Value="public string CultureNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format und der Sprache ab, das bzw. die in der Kultur für die Anzeige festgelegt sind, oder legt diesen fest.</summary>
        <value>Der Kulturname im Format und in der Sprache, das bzw. die in der Kultur für die Anzeige festgelegt sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.NativeName%2A> Eigenschaft.  
  
 Der Wert dieser Eigenschaft ist identisch, unabhängig von der Sprachversion von .NET Framework.  
  
 Vollständigen Namen der Kultur wird möglicherweise nicht ordnungsgemäß angezeigt, wenn das System nicht festgelegt ist, damit der Sprache der Kultur richtig angezeigt. Z. B. wenn die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> -Eigenschaft ist "ja-JP" für Japanisch (Japan), die <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> Eigenschaft wird nicht richtig angezeigt, auf einem System, die nur auf Englisch festgelegt ist. Mehrsprachige Betriebssystemen wie Windows 2000, jedoch Anzeigen der <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> Eigenschaft ordnungsgemäß.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine benutzerdefinierte Kultur mit dem Präfix für die private Verwendung erstellt, und klicken Sie dann enthält eine Reihe von dessen Eigenschaften. Die erste Eigenschaft enthält den Namen der Kultur.  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 0 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Globalization.CultureTypes" />-Wert ab, mit dem die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellte Kultur beschrieben wird.</summary>
        <value>Einer der <see cref="T:System.Globalization.CultureTypes" />-Werte.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="P:System.Globalization.CultureInfo.CultureTypes" />
        <altmember cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyEnglishName">
      <MemberSignature Language="C#" Value="public string CurrencyEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den englischen Namen der Währung ab, die in dem Land oder der Region verwendet wird, die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird, oder legt diesen Namen fest.</summary>
        <value>Der englische Name der in dieser Region verwendeten Währung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName%2A> Eigenschaft ist identisch mit der <xref:System.Globalization.RegionInfo.CurrencyEnglishName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang ist die leere Zeichenfolge ("").</exception>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrencyNativeName">
      <MemberSignature Language="C#" Value="public string CurrencyNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den systemeigenen Namen der Währung ab, die in dem Land oder der Region verwendet wird, die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird, oder legt diesen Namen fest.</summary>
        <value>Der Name der Währung, die in dem Land oder der Region verwendet wird, die durch das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird und in der Sprache formatiert ist, die dem entsprechenden Landes-/Regionalcode nach ISO 3166 zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName%2A> Eigenschaft ist identisch mit der <xref:System.Globalization.RegionInfo.CurrencyNativeName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang ist die leere Zeichenfolge ("").</exception>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="GeoId">
      <MemberSignature Language="C#" Value="public int GeoId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GeoId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberSignature Language="VB.NET" Value="Public Property GeoId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GeoId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.GeoId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine eindeutige Identifikationsnummer für eine geographische Region, ein Land, eine Stadt oder einen Ort ab oder legt diese fest.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen geographischen Ort eindeutig identifiziert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.GeoId%2A> Eigenschaft.  
  
 Sollte die Anwendung verwenden die <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> Eigenschaft, um kulturspezifische Dienste für Kunden bereitzustellen. Z. B. die <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> Eigenschaft kann als Schlüssel verwendet werden, um einen Datenbankdatensatz zugreifen, die spezifische Informationen zu einer Region enthält.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt definiert eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="GregorianDateTimeFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property GregorianDateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DateTimeFormatInfo ^ GregorianDateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GregorianDateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Globalization.DateTimeFormatInfo" />-Objekt ab, das das Format von Datumsangaben und Uhrzeiten nach dem gregorianischen Kalender definiert, oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Globalization.DateTimeFormatInfo" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Kultur, die definiert, die von der aktuellen Kultur auch <xref:System.Globalization.CultureAndRegionInfoBuilder> -Objekt ist, enthält einen lokalisierten gregorianischen Kalender, der zugeordnet wird eine <xref:System.Globalization.DateTimeFormatInfo> Objekt. Die <xref:System.Globalization.DateTimeFormatInfo> Objekt definiert, wie Ihre Anwendung Datums- und Uhrzeitangaben angezeigt. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat%2A> Eigenschaftswert ist die <xref:System.Globalization.DateTimeFormatInfo> verknüpft ist, mit dem ersten lokalisierte gregorianischen Kalender zurückgegebenes Objekt der <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Eine Eigenschaft des Werts in einem set-Vorgang hat einen ungültigen Eigenschaftswert zurückgegeben.</exception>
        <exception cref="T:System.NotSupportedException">Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen nach RFC 4646, „Tags for the Identification of Languages“, formatierten Kulturnamen ab oder legt diesen fest.</summary>
        <value>Ein nach RFC 4646 formatierter Kulturname.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag%2A> -Eigenschaft ruft ab oder legt den Namen einer Kultur formatiert entsprechend RFC 4646, der sich vom Namen Kultur, die von zurückgegeben werden, kann die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft. In .NET Framework, Version 1.0 war der Name der neutralen Kultur für Chinesisch (traditionell) z. B. "Zh-CHT". Im Gegensatz dazu definiert RFC 4646 Kulturname als "Zh-HANT". (Beachten Sie, dass in .NET Framework, Version 4, der Anzeigename für "Zh-CHT" ist "Chinesisch (traditionell) Legacy").  
  
 Ein Kulturname RFC 4646 besteht aus mehreren Komponenten. Eine typische Kulturname besteht aus einer obligatorischen Sprachen-ID, ein optionales Skript-Bezeichner und eine optionale Land/Region-Bezeichner. Beispielsweise ist ein gültiger Kulturname der RFC 4646 für Serbisch, das kyrillische Skript und die Region Serbien "sr-Cyrl-RS".  
  
 Beachten Sie, dass zwei oder mehr Kulturen die gleiche IETF-Sprachtag haben können.  
  
 Weitere Informationen finden Sie unter RFC 4646, "-Tags für die Identification of Languages" [Request For Comments](http://go.microsoft.com/fwlink/?linkid=45286).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">In einem set-Vorgang ist der Wert <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge eines Werts in einem set-Vorgang liegt nicht zwischen 1 und 84 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Eine Komponente des im Wert angegebenen Namens in einem set-Vorgang ist leer oder länger als 8 Zeichen bzw. kein alphanumerisches Zeichen oder Bindestrich (-), oder der Name einhält einen führenden oder nachfolgenden Bindestrich.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsMetric">
      <MemberSignature Language="C#" Value="public bool IsMetric { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMetric" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberSignature Language="VB.NET" Value="Public Property IsMetric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMetric { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsMetric : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für Maßeinheiten in dem Land bzw. der Region das metrische System verwendet wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn in dem Land oder der Region für Maßeinheiten das metrische System verwendet wird, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="ISOCurrencySymbol">
      <MemberSignature Language="C#" Value="public string ISOCurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ISOCurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property ISOCurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ISOCurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ISOCurrencySymbol : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das aus drei Zeichen bestehende, dem Land bzw. der Region nach ISO 4217 zugeordnete Währungssymbol ab.</summary>
        <value>Das aus drei Zeichen bestehende, dem Land bzw. der Region nach ISO 4217 zugeordnete Währungssymbol.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.ISOCurrencySymbol%2A> Eigenschaft.  
  
 Eine Liste der aus drei Zeichen bestehende ISO 4217 Währungssymbole finden Sie der <xref:System.Globalization.RegionInfo> Thema-Klasse. Das Währungssymbol nach ISO 4217, für die US-Dollar ist z. B. "US".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dies ist eine neutrale Kultur.</exception>
        <exception cref="T:System.ArgumentNullException">In einem set-Vorgang ist der Wert <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem set-Vorgang ist nicht zwischen 0 und 8 Zeichen lang.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die vorherrschende Schreibrichtung der Textzeilen im Schriftsystem ab, das dem aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt zugeordnet ist, oder legt diese fest.</summary>
        <value>
          <see langword="true" />, wenn die vorherrschende Schreibrichtung der Textzeilen im aktuellen Schriftsystem von rechts nach links ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anwendung verwendet die <xref:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft%2A> Eigenschaft, um zu bestimmen, die relative Position der Steuerelemente wie Schaltflächen und führen Sie einen Bildlauf in einer grafischen Benutzeroberfläche Balken.  
  
 Auf die vorherrschende Schreibrichtung der Text in eine benutzerdefinierte Kultur erstellt aus dem aktuellen <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt ist, sollte die Anwendung verwenden die <xref:System.Globalization.TextInfo.IsRightToLeft%2A> -Eigenschaft des Objekts zurückgegeben werden, indem die <xref:System.Globalization.CultureInfo.TextInfo%2A> -Eigenschaft der benutzerdefinierten Kultur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public int KeyboardLayoutId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyboardLayoutId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Bezeichner für das aktive Eingabegebietsschema ab oder legt diesen fest.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen Bezeichner für das Eingabegebietsschema angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.KeyboardLayoutId%2A> Eigenschaft.  
  
 Der Gebietsschemabezeichner für die Eingabe wurde früher als das Tastaturlayout bezeichnet. Der Bezeichner kann für eine Sprache-zu-Text-Konverter, einen Eingabemethoden-Editor (IME) oder eine andere Form der Eingabe verwendet werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem set-Vorgang ist 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturbezeichner für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ab.</summary>
        <value>Der Kulturbezeichner für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.LCID%2A?displayProperty=nameWithType> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Der Kulturbezeichner wird für Ersatzkulturen das entsprechende Gebietsschema-ID des National Language Support (NLS) zugeordnet. Für eine benutzerdefinierte Kulturen lautet der Wert dieser Eigenschaft immer hexadezimale 0 x 1000.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromCultureInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromCultureInfo (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromCultureInfo(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromCultureInfo (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromCultureInfo(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromCultureInfo : System.Globalization.CultureInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Das Objekt, dessen Eigenschaften verwendet werden.</param>
        <summary>Legt die Eigenschaften des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts mit den entsprechenden Eigenschaften des angegebenen <see cref="T:System.Globalization.CultureInfo" />-Objekts fest.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="culture" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromRegionInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromRegionInfo (System.Globalization.RegionInfo region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromRegionInfo(class System.Globalization.RegionInfo region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo(System.Globalization.RegionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromRegionInfo (region As RegionInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromRegionInfo(System::Globalization::RegionInfo ^ region);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromRegionInfo : System.Globalization.RegionInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromRegionInfo region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Globalization.RegionInfo" />
      </Parameters>
      <Docs>
        <param name="region">Das Objekt, dessen Eigenschaften verwendet werden.</param>
        <summary>Legt die Eigenschaften des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts mit den entsprechenden Eigenschaften des angegebenen <see cref="T:System.Globalization.RegionInfo" />-Objekts fest.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="region" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Es können keine Landes-/Regionsinformationen festgelegt werden, weil das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt eine neutrale Kultur angibt.</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt ab, das das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert, oder legt dieses fest.</summary>
        <value>Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft.  
  
 Die Anwendung muss diese Eigenschaft nur für bestimmte Kulturen aufrufen.  
  
 Die <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, und <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> Eigenschaften <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> werden ignoriert. Die gespeicherten Form einer Kultur werden explizite Werte für diese Eigenschaften nicht gespeichert werden. Stattdessen bei die Kultur geladen wird, als Standardwerte immer <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, und <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>bzw..  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Angabe in einer Eigenschaft für Zahlen, Währungen oder Prozentsätze für diese Kultur enthält zu viele Ziffern, oder sie liegt außerhalb des zulässigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die übergeordnete Kultur der aktuellen benutzerdefinierten Kultur darstellt, oder legt dieses fest.</summary>
        <value>Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, das die übergeordnete Kultur der aktuellen benutzerdefinierten Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kulturen bilden eine Hierarchie. Bei vordefinierten Kulturen ist das übergeordnete Element eine bestimmte Kultur ist eine neutrale Kultur und das übergeordnete Element eine neutrale Kultur ist die <xref:System.Globalization.CultureInfo.InvariantCulture%2A>. Die übergeordnete Kultur umfasst nur den Satz von Informationen, die häufig von seiner untergeordneten Elemente ist.  
  
 Es wird im Allgemeinen empfohlen, dass diese Hierarchie Kulturen entsprechen. Allerdings standardmäßig der <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> eine benutzerdefinierte Kultur ist die <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> der Kultur auf dem es basiert. Wenn die Anwendung eine Kultur mit erstellt <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> "En-US-MyCulture" auf der Grundlage von "En-US", die das übergeordnete Element ist "En", da dies ist die <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> "En-US". Wenn die Anwendung "En-US" als verwendet die <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> für die neue benutzerdefinierte Kultur, es muss dieser Wert explizit festgelegt.  
  
 Wenn die Ressourcen für die spezifische Kultur nicht im System verfügbar sind, werden die Ressourcen für die neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die Ressourcen, die in die Hauptassembly eingebettet verwendet. Weitere Informationen zu den Ressourcenfallback-Prozess, finden Sie unter [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 Die Liste der Kulturen, in der Windows-API unterscheidet sich etwas aus der Liste der in .NET Framework enthaltene Kulturen. Wenn Interoperabilität mit Windows erforderlich ist, sollte z. B. über den Plattformaufrufmechanismus können Sie die Anwendung eine bestimmte Kultur, die in .NET Framework definiert ist. Dadurch wird sichergestellt, Konsistenz mit dem entsprechenden Windows-Gebietsschema, der mit dem gleichen identifiziert wird <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert für die Kultur in einem set-Vorgang kann nicht gefunden werden. Möglicherweise ist der zugewiesene Wert eine nicht registrierte benutzerdefinierte Kultur.</exception>
        <exception cref="T:System.ArgumentNullException">In einem set-Vorgang ist der Wert <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">In einem set-Vorgang, bei dem die Vorgänger der aktuellen Kultur durchlaufen werden, kann die invariante Kultur nicht innerhalb von 10 Vorgängergenerationen gefunden werden.  
  
- oder -  
In einem set-Vorgang wurde ein zirkulärer Verweis ermittelt: der zugewiesene Wert ist ein Vorgänger der aktuellen benutzerdefinierten Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionEnglishName">
      <MemberSignature Language="C#" Value="public string RegionEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständigen englischen Namen des Landes bzw. der Region ab oder legt diesen fest.</summary>
        <value>Der vollständige Name des Landes bzw. der Region auf Englisch.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.EnglishName%2A> Eigenschaft.  
  
 Beispielsweise ist der Rückgabewert von <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> für den Vereinigten Staaten, "USA" ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 0 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionName">
      <MemberSignature Language="C#" Value="public string RegionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegionName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Landes bzw. der Region für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt ab.</summary>
        <value>Der Name des Landes bzw. der Region für das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist der Name der Kultur angegeben, der <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> Konstruktor. Identisch mit einer vorhandenen Kultur, mit Ausnahme der Fall ist der Name der angegebenen Kultur ist der Rückgabewert den Namen des vorhandenen Kultur, nicht auf den Namen angegebenen Kultur.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.Name%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionNativeName">
      <MemberSignature Language="C#" Value="public string RegionNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständigen Namen des Landes bzw. der Region ab, der örtlich in dieser benutzerdefinierten Kultur verwendet wird, oder legt diesen fest.</summary>
        <value>Der örtlich verwendete Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.NativeName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang ist für eine neutrale Kultur nicht gültig.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 79 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Register();" />
      <MemberSignature Language="F#" Value="member this.Register : unit -&gt; unit" Usage="cultureAndRegionInfoBuilder.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Behält das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt als benutzerdefinierte Kultur auf dem lokalen Computer bei und macht diese Kultur für Anwendungen verfügbar. Erfordert Administratorberechtigungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode speichert eine benutzerdefinierte Kultur als Datei auf dem lokalen Computer im Unterverzeichnis "Globalisierung" des Verzeichnisses zurückgegeben, durch die Win32- [GetWindowsDirectory](http://go.microsoft.com/fwlink/?LinkId=191561) Funktion. Dieser Prozess wird aufgerufen, die benutzerdefinierte Kultur zu registrieren. Nachdem die benutzerdefinierte Kultur registriert wurde, kann eine neue benutzerdefinierte Kultur erstellt werden, indem Sie den Namen der Kultur in einem <xref:System.Globalization.CultureInfo.%23ctor%2A> Konstruktor oder beim Aufruf der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> Methode.  
  
 Die benutzerdefinierte Kultur kann entfernt werden, durch den Aufruf der <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode.  
  
 [!code-csharp[sys.glob.carib.register#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.register/CS/persist.cs#1)]
 [!code-vb[sys.glob.carib.register#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.register/VB/persist.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die benutzerdefinierte Kultur ist bereits registriert.  
  
- oder -  
Das aktuelle <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt verfügt über eine Eigenschaft, die festgelegt werden muss, bevor die Kultur registriert werden kann. Für alle Kulturen, neutrale und spezifische, müssen <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" /> und <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" /> festgelegt werden. Für spezifische Kulturen müssen auch <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />, <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" /> und <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" /> festgelegt werden.  
  
Diese Methode löst <see cref="T:System.InvalidOperationException" /> auch dann aus, wenn die folgenden Eigenschaften nicht definiert sind: 
 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert einer <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekteigenschaft übersteigt seine zulässige Höchstlänge oder seinen zulässigen Höchstwert.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über Administratorberechtigungen.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="cultureAndRegionInfoBuilder.Save filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Der Name einer Datei, die die XML-Darstellung dieser benutzerdefinierten Kultur enthalten soll.</param>
        <summary>Schreibt eine XML-Darstellung des aktuellen <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekts in die angegebene Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> Methode schreibt die aktuelle <xref:System.Globalization.CultureAndRegionInfoBuilder> Objekt, das die Datei, die gemäß der `filename` Parameter in einem XML-Format namens Locale Data Markup Language (LDML) Version 1.1. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methode führt den umgekehrten Vorgang der <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> Methode.  
  
 Weitere Informationen über das Format einer LDML-Datei finden Sie unter den <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methode. Weitere Informationen zu den LDML-Standard, finden Sie unter [Unicode Technical Standard #35, "Locale Data Markup Language (LDML)"](http://go.microsoft.com/fwlink/p/?LinkId=252840) auf der Website des Unicode-Konsortiums.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> Methoden.  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="filename" /> ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert einer Eigenschaft der im aktuellen <see cref="T:System.Globalization.DateTimeFormatInfo" />-Objekt enthaltenen Objekte<see cref="T:System.Globalization.TextInfo" />, <see cref="T:System.Globalization.NumberFormatInfo" /> oder <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> ist ungültig.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.TextInfo TextInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); void set(System::Globalization::TextInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.TextInfo" />-Objekt ab, das das dieser benutzerdefinierten Kultur zugeordnete Schriftsystem definiert, oder legt dieses fest.</summary>
        <value>Das Objekt, das das dieser benutzerdefinierten Kultur zugeordnete Schriftsystem definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A?displayProperty=nameWithType> -Eigenschaft stellt Informationen zur Kultur-, Groß-/Kleinschreibung für Zeichenfolgen. Dies entspricht der <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die <xref:System.Globalization.TextInfo> und <xref:System.Globalization.CompareInfo> Objekte, die zugewiesen werden, die <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> und <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> Eigenschaften, die beide unterstützen Zeichenfolgenvergleich ist kulturabhängig und Groß-/Kleinschreibung beachtet. Die <xref:System.Globalization.CompareInfo> Objekt verfügt auch über Methoden, die enthalten eine <xref:System.Globalization.CompareOptions> Parameter, der Kultur, Unterscheidung nach Groß-/Kleinschreibung Vergleich unterstützt. Diese beiden Eigenschaften zugewiesen werden <xref:System.Globalization.TextInfo> und <xref:System.Globalization.CompareInfo> Objekte, die das gleiche Gebietsschema darstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Dieser Vorgang wird für Ersatzkulturen nicht unterstützt.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Anzahl von Zeichen in einem Listentrennzeichen liegt nicht zwischen 0 und 3.</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 639-2 für die Sprache dieser benutzerdefinierten Kultur ab oder legt diesen fest.</summary>
        <value>Der aus drei Buchstaben bestehende Code nach ISO 639-2 für die Sprache des aktuellen <see cref="T:System.Globalization.CultureInfo" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.ThreeLetterISOLanguageName%2A> Eigenschaft.  
  
 Die drei Buchstaben bestehende Abkürzung für Englisch ist beispielsweise "Eng".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISORegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 3166 für das Land bzw. die Region ab oder legt diesen fest.</summary>
        <value>Der in ISO 3166 definierte, aus drei Buchstaben bestehende Code für das Land bzw. die Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> Eigenschaft.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> Eigenschaft enthält die drei Buchstaben bestehenden Codes für Land/Region in ISO 3166 definierte. Die drei Buchstaben bestehenden Code für die USA ist z. B. "USA".  
  
 Fall ist nicht signifikant. Allerdings die <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>, <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>, und die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> Eigenschaften enthalten die entsprechenden Code in Großbuchstaben.  
  
 Die vordefinierten Länder-/Regionsnamen finden Sie in der <xref:System.Globalization.RegionInfo> Thema-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code für die Sprache ab, wie er in der Windows-API definiert ist, oder legt diesen fest.</summary>
        <value>Der aus drei Buchstaben bestehenden Code für die Sprache, wie er in der Windows-API definiert ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName%2A> Eigenschaft.  
  
 Diese Eigenschaft gibt den gleichen Wert wie die Windows-API-Methode `GetLocaleInfo` mit dem LOCALE_SABBREVLANGNAME-Wert. Die drei Buchstaben bestehenden Code für Englisch (Vereinigte Staaten), wie in der Windows-API definiert ist z. B. "Enu".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
        <exception cref="T:System.NotSupportedException">Die aktuelle benutzerdefinierte Kultur in einem set-Vorgang ist eine Ersatzkultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsRegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsRegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsRegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsRegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsRegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsRegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code ab, der von Windows dem Land bzw. der Region zugeordnet wird, das bzw. die durch die aktuelle benutzerdefinierte Kultur dargestellt wird, oder legt diesen fest.</summary>
        <value>Der aus drei Buchstaben bestehende Code, der von Windows dem Land bzw. der Region zugeordnet wird, das bzw. die durch dieses <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" />-Objekt dargestellt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName%2A> Eigenschaft.  
  
 Die drei Buchstaben bestehenden Code für die USA ist z. B. "USA".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
        <exception cref="T:System.NotSupportedException">Die aktuelle benutzerdefinierte Kultur in einem set-Vorgang ist eine Ersatzkultur oder eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string TwoLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus zwei Buchstaben bestehenden Code nach ISO 639-1 für die Sprache des aktuellen <see cref="T:System.Globalization.CultureInfo" />-Objekts ab oder legt diesen fest.</summary>
        <value>Der aus zwei Buchstaben bestehende Code nach ISO 639-1 für die Sprache des aktuellen <see cref="T:System.Globalization.CultureInfo" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName%2A> Eigenschaft entspricht der <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaft.  
  
 Die zweibuchstabige Abkürzung für Englisch ist z. B. "En".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISORegionName">
      <MemberSignature Language="C#" Value="public string TwoLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus zwei Buchstaben bestehenden Code nach ISO 3166 für das Land bzw. die Region ab oder legt diesen fest.</summary>
        <value>Der in ISO 3166 definierte, aus zwei Buchstaben bestehende Code für das Land oder die Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> Eigenschaft entspricht der <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A> Eigenschaft.  
  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> Eigenschaftswert ist die zwei Buchstaben bestehenden Codes für Land/Region in ISO 3166 definierte. Beispielsweise ist "Uns", der zwei Buchstaben bestehenden Code für die USA. Die vordefinierten <xref:System.Globalization.RegionInfo> Namen finden Sie in der <xref:System.Globalization.RegionInfo> Thema-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem set-Vorgang ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Länge des Werts in einem set-Vorgang liegt nicht zwischen 1 und 8 Zeichen.</exception>
        <exception cref="T:System.ArgumentException">Der Wert in einem set-Vorgang enthält ein Zeichen, das sich nicht im Bereich "a" bis "z", "A" bis "Z" oder "0" bis "9" befindet.</exception>
        <exception cref="T:System.NotSupportedException">Die aktuelle benutzerdefinierte Kultur in einem set-Vorgang ist eine neutrale Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Globalization.CultureAndRegionInfoBuilder.Unregister cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">Der Name der zu löschenden benutzerdefinierten Kultur.</param>
        <summary>Löscht eine benutzerdefinierte Kultur vom lokalen Computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> Methode ist die Umkehrung der der <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> Methode speichert eine benutzerdefinierte Kultur als Datei auf dem lokalen Computer im Unterverzeichnis "Globalisierung" des Verzeichnisses, das von der Win32-API zurückgegebenen [GetWindowsDirectory](http://go.microsoft.com/fwlink/?LinkId=191561) Funktion. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> Methode löscht die persistenten benutzerdefinierte Kultur-Datei auf dem Computer. Nachdem die Datei gelöscht wurde, die benutzerdefinierte Kultur im Arbeitsspeicher des Computers vorhandene Instanzen weiterhin funktionieren, aber neue Instanzen der benutzerdefinierten Kultur können nicht erstellt werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> Methode.  
  
 [!code-csharp[sys.glob.carib.unregister#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.unregister/CS/unregister.cs#1)]
 [!code-vb[sys.glob.carib.unregister#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.unregister/VB/unregister.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="cultureName" /> ist eine übergeordnete Kultur oder eine alternative Konsolen-GUI-Kultur einer abhängigen Kultur.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über Administratorberechtigungen.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> gibt eine Kultur an, die nicht gefunden wurde.</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      </Docs>
    </Member>
  </Members>
</Type>
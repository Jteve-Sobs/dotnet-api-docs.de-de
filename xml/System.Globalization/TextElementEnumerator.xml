<Type Name="TextElementEnumerator" FullName="System.Globalization.TextElementEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0838f7ad92cf5191b15275b5370a9120bc2435d3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69245675" /></Metadata><TypeSignature Language="C#" Value="public class TextElementEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TextElementEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.TextElementEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextElementEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type TextElementEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Listet die Textelemente einer Zeichenfolge auf.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die .NET Framework definiert ein Textelement als eine Einheit von Text, die als einzelnes Zeichen, d. h. als Grapheme, angezeigt wird. Ein Textelement kann eines der folgenden sein:  
  
-   Ein Basiszeichen, das als einzelner <xref:System.Char> Wert dargestellt wird. Beispielsweise sind Lateinische Großbuchstaben A (u + 0041) und Latin Small Letter AE (u + 00e6) Basiszeichen.  
  
-   Eine kombinierte Zeichenfolge, die aus einem Basiszeichen und einem oder mehreren kombinierten Zeichen besteht. Beispiel: Lateinisch Großbuchstabe A (u + 0041), gefolgt von der Kombination von MACRON (u + 0304), ist eine kombinierte Zeichen Sequenz.  
  
-   Ersatz Zeichenpaare, die der [Unicode-Standard](https://go.microsoft.com/fwlink/?linkid=37123) als codierte Zeichen Darstellung für ein einzelnes abstraktes Zeichen definiert, das aus einer Sequenz von zwei Code Einheiten besteht: ein hohes Ersatz Zeichen und ein niedriges Ersatz Zeichen. Ersatzpaare werden verwendet, um Zeichen außerhalb der Unicode-Basis-mehrsprachigen Ebene als UTF-16-codierte Zeichen darzustellen. Der gotische Buchstabe sauil (U + 10343) wird z. b. in UTF-16-Codierung als hohes Ersatz Zeichen dargestellt, dessen Wert 0xD800 ist, und ein niedriges Ersatz Zeichen, dessen Wert 0xdf43 ist. Ein Ersatz Zeichenpaar kann ein Basiszeichen oder ein Kombinations Zeichen darstellen.  
  
 Die <xref:System.Globalization.TextElementEnumerator> -Klasse ermöglicht es Ihnen, mit den Textelementen in einer Zeichenfolge statt mit <xref:System.Char> einzelnen Objekten zu arbeiten.  
  
 Instanziieren Sie ein <xref:System.Globalization.TextElementEnumerator> -Objekt, das eine bestimmte Zeichenfolge darstellt, indem Sie <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> die Zeichenfolge an die-Methode übergeben. Dadurch wird ein Enumerator zurückgegeben, der vor dem ersten Textelement in der Zeichenfolge positioniert ist. Durch den <xref:System.Globalization.TextElementEnumerator.Reset%2A> Aufruf der-Methode wird der Enumerator ebenfalls auf diese Position zurückversetzt. Da dies einen ungültigen Zustand darstellt, muss aufgerufen <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> werden, um den Enumerator auf das erste Textelement der Zeichenfolge zu setzen, bevor der <xref:System.Globalization.TextElementEnumerator.Current%2A> Wert der-Eigenschaft gelesen wird, um das aktuelle Textelement zurückzugeben.  
  
 Wenn Sie mit einem <xref:System.Globalization.TextElementEnumerator> -Objekt arbeiten, sind Sie dafür verantwortlich, den Enumerator zu positionieren. Die <xref:System.Globalization.TextElementEnumerator.Current%2A> -Eigenschaft gibt dasselbe Textelement zurück, bis Sie <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> entweder <xref:System.Globalization.TextElementEnumerator.Reset%2A>oder aufgerufen haben. Der Enumerator befindet sich in einem ungültigen Zustand, wenn er vor dem ersten Textelement oder hinter dem letzten Textelement in der Zeichenfolge positioniert ist. Wenn sich der Enumerator in einem ungültigen Zustand befindet, wird beim Versuch, den <xref:System.Globalization.TextElementEnumerator.Current%2A> Wert der-Eigenschaft abzurufen, eine Ausnahme ausgelöst. Sie können bestimmen, ob sich der Enumerator in einem ungültigen Zustand befindet, indem Sie überprüfen <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> , ob `false`der Rückgabewert der-Eigenschaft ist.  
  
 Das <xref:System.Globalization.TextElementEnumerator> -Objekt stellt eine Momentaufnahme des aktuellen Status einer Zeichen folgen Variablen oder eines Zeichenfolgenliterals dar <xref:System.Globalization.TextElementEnumerator> , wenn das Objekt instanziiert wird. Hinweis:  
  
-   Text Element-Enumeratoren können nur zum Lesen von Daten in einer Zeichenfolge verwendet werden. Die zugrunde liegende Zeichenfolge kann nicht geändert werden.  
  
-   Ein Enumerator hat keinen exklusiven Zugriff auf die Zeichenfolge, die er darstellt. Eine Zeichen folgen Variable kann geändert werden, nachdem der Enumerator erstellt wurde.  
  
-   Ein <xref:System.Globalization.TextElementEnumerator> -Objekt listet die Textelemente auf <xref:System.Globalization.TextElementEnumerator> , die in der Zeichenfolge zum Zeitpunkt der instanziierten-Objekts vorhanden waren. Sie spiegelt keine nachfolgenden Änderungen an der Zeichen folgen Variablen wider, wenn diese Variable später geändert wird.  
  
-   Da die <xref:System.Globalization.TextElementEnumerator> -Klasse nicht über <xref:System.Object.Equals%2A?displayProperty=nameWithType>schrieben wird <xref:System.Globalization.TextElementEnumerator> , werden zwei-Objekte, die dieselbe Zeichenfolge darstellen, als ungleich betrachtet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.TextElementEnumerator> -Klasse verwendet, um die Textelemente einer Zeichenfolge aufzulisten.  
  
 [!code-cpp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CPP/tee_summary.cpp#1)]
 [!code-csharp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CS/tee_summary.cs#1)]
 [!code-vb[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/VB/tee_summary.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.StringInfo" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Globalization.TextElementEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das aktuelle Textelement in der Zeichenfolge ab.</summary>
        <value>Ein Objekt, das das aktuelle Textelement in der Zeichenfolge enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem ein Enumerator erstellt wurde oder nachdem ein <xref:System.Globalization.TextElementEnumerator.Reset%2A> aufgerufen wurde, <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> muss aufgerufen werden, um den Enumerator auf das erste Textelement der Zeichenfolge vor dem Lesen des Werts <xref:System.Globalization.TextElementEnumerator.Current%2A>von zu verschieben. <xref:System.Globalization.TextElementEnumerator.Current%2A> Andernfalls ist nicht definiert.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A>löst auch eine Ausnahme aus, wenn der letzte <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> Rückruf `false`von zurückgegeben wurde, wodurch das Ende der Zeichenfolge angegeben wird.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A>Verschiebt die Position des Enumerators nicht, und aufeinanderfolgende Aufrufe <xref:System.Globalization.TextElementEnumerator.Current%2A> von geben das gleiche Objekt zurück, bis entweder <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> oder <xref:System.Globalization.TextElementEnumerator.Reset%2A> aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Enumerator ist vor dem ersten Textelement oder hinter dem letzten Textelement der Zeichenfolge positioniert.</exception>
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="ElementIndex">
      <MemberSignature Language="C#" Value="public int ElementIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ElementIndex" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ElementIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementIndex : int" Usage="System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index des Textelements ab, über dem sich der Enumerator gerade befindet.</summary>
        <value>Der Index des Textelements, über dem sich der Enumerator gerade befindet.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Enumerator ist vor dem ersten Textelement oder hinter dem letzten Textelement der Zeichenfolge positioniert.</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      </Docs>
    </Member>
    <Member MemberName="GetTextElement">
      <MemberSignature Language="C#" Value="public string GetTextElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextElement () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextElement();" />
      <MemberSignature Language="F#" Value="member this.GetTextElement : unit -&gt; string" Usage="textElementEnumerator.GetTextElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das aktuelle Textelement in der Zeichenfolge ab.</summary>
        <returns>Eine neue Zeichenfolge, die das aktuelle Textelement aus der gerade gelesenen Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt das gleiche Textelement wie die <xref:System.Globalization.TextElementEnumerator.Current%2A> -Eigenschaft zurück.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Enumerator ist vor dem ersten Textelement oder hinter dem letzten Textelement der Zeichenfolge positioniert.</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="textElementEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt den Enumerator auf das nächste Textelement der Zeichenfolge.</summary>
        <returns><see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Textelement gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Zeichenfolge überschritten hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem ein Enumerator erstellt wurde oder nachdem ein <xref:System.Globalization.TextElementEnumerator.Reset%2A> aufgerufen wurde, wird der Enumerator vor dem ersten Textelement der Zeichenfolge positioniert, und der erste <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> Aufruf von verschiebt den Enumerator über das erste Textelement der Zeichenfolge.  
  
 Wenn die Zeichenfolge nach der Erstellung dieses Enumerators geändert wird <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> , löst eine Ausnahme aus.  
  
 Nach dem Ende der Zeichenfolge werden nachfolgende Aufrufe <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> von zurück `false` gegeben, <xref:System.Globalization.TextElementEnumerator.Reset%2A> bis aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="textElementEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Textelement in der Zeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.TextElementEnumerator.Reset%2A> -Methode verschiebt den Enumerator vor dem ersten Textelement an den Anfang der Zeichenfolge. Nach dem <xref:System.Globalization.TextElementEnumerator.Reset%2A>Aufrufen von müssen Sie <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> aufrufen, um den Enumerator auf das erste Textelement der Zeichenfolge zu <xref:System.Globalization.TextElementEnumerator.Current%2A> setzen, bevor Sie aufrufen, um den Wert des ersten Text Elements zu lesen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>

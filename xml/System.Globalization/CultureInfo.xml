<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a893f5fdbdc63534290842cc0287051b9f2a73e" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83449852" /></Metadata><TypeSignature Language="C#" Value="public class CultureInfo : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CultureInfo extends System.Object implements class System.IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Globalization" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Informationen über eine bestimmte Kultur bereit (die bei der nicht verwalteten Codeentwicklung als *Gebietsschema* bezeichnet wird). Zu diesen Informationen gehören der Name der Kultur, das Schriftsystem, der verwendete Kalender sowie die Sortierreihenfolge von Zeichenfolgen und die Formatierung für Datumsangaben und Zahlen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo>-Klasse stellt kulturspezifische Informationen bereit, z. b. Sprache, unter Sprache, Land/Region, Kalender und Konventionen, die einer bestimmten Kultur zugeordnet sind. Diese Klasse ermöglicht auch den Zugriff auf kulturspezifische Instanzen der Objekte <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>und <xref:System.Globalization.TextInfo>. Diese Objekte enthalten die Informationen, die für Kultur abhängige Vorgänge erforderlich sind, wie z. b. die Groß-/Kleinschreibung, das Formatieren von Datumsangaben und Ziffern Die <xref:System.Globalization.CultureInfo>-Klasse wird entweder direkt oder indirekt von Klassen verwendet, die kulturspezifische Daten formatieren, analysieren oder bearbeiten, wie z. b. <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>und numerischen Typen.  
  
 In diesem Abschnitt  
  
 [Kultur Namen und](#CultureNames) Bezeichner   
 [Invariante, neutrale und bestimmte Kulturen](#Invariant)   
 [Benutzerdefinierte Kulturen](#Custom)   
 [Dynamische Kultur Daten](#Dynamic)   
 [CultureInfo und Kultur Daten](#cultureinfo-and-cultural-data) [die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur](#Current)   
 [Alle Kulturen](#GetAll) werden   
 [Kultur und Threads](#Threads)   
 [Kultur-und Anwendungs Domänen](#AppDomain)   
 [Kultur-und aufgabenbasierte asynchrone Vorgänge](#Async)   
 [CultureInfo-Objektserialisierung](#Serialization)   
 Außerkraftsetzungs [Überschreitungen](#CPanel)   
 [Alternative Sortierreihenfolgen](#AlternateSort)   
 [Culture-und Windows-apps](#Windows)  

<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Kultur Namen und Bezeichner  
 Die <xref:System.Globalization.CultureInfo>-Klasse gibt basierend auf RFC 4646 einen eindeutigen Namen für jede Kultur an. Der Name ist eine Kombination aus einem ISO 639 2-Buchstaben in Kleinbuchstaben, der einer Sprache zugeordnet ist, und einem ISO 3166 2-Buchstaben in Großbuchstaben, der einem Land oder einer Region zugeordnet ist. Außerdem werden für apps, die auf [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] oder höher abzielen und unter Windows 10 oder höher ausgeführt werden, Kultur Namen unterstützt, die gültigen bcp-47-sprach Tags entsprechen.  
  
> [!NOTE]
>  Wenn ein Kultur Name an einen Klassenkonstruktor oder eine Methode wie z. b. <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> oder <xref:System.Globalization.CultureInfo>übergeben wird, ist die Groß-/Kleinschreibung nicht signifikant.  
  
 Das Format des Kultur namens basierend auf RFC 4646 lautet *languagecode2*>-*Country/regioncode2*, wobei *languagecode2* der aus zwei Buchstaben bestehende Sprachcode und *Country/regioncode2* der aus zwei Buchstaben bestehende Code für die unter Kultur ist. Beispiele sind „ja-JP“ für Japanisch (Japan) und „en-US“ für Englisch (USA). In Fällen, in denen kein aus zwei Buchstaben bestehender Sprachcode verfügbar ist, wird ein aus drei Buchstaben bestehender, von ISO 639-2 abgeleiteter Code verwendet.  
  
 Beachten Sie, dass einige Kultur Namen auch ein ISO 15924-Skript angeben. Beispielsweise gibt Cyrl das kyrillische Skript an, und der Latn gibt das lateinische Skript an. Ein Kultur Name, der ein Skript enthält, verwendet das Muster *languagecode2*-*Scripttag*-*Country/regioncode2*. Ein Beispiel für diese Art von Kultur Name ist "UZ-Cyrl-UZ" für Uzbek (Kyrillisch, Usbekistan). Bei Windows-Betriebssystemen vor Windows Vista wird für einen Kultur Namen, der ein Skript enthält, das Muster *languagecode2*-*Country/regioncode2*-*Scripttag*verwendet, z. b. für den Uzbek (Kyrillisch, Usbekistan).  
  
 Eine neutrale Kultur wird nur durch den aus zwei Buchstaben bestehenden Code für Kleinbuchstaben angegeben. Beispielsweise gibt fr die neutrale Kultur für Französisch an, und de gibt die neutrale Kultur für Deutsch an.  
  
> [!NOTE]
>  Es gibt zwei Kultur Namen, die dieser Regel widersprechen. Die Kulturen Chinesisch (vereinfacht) mit dem Namen zh-Hans und Chinesisch (traditionell) mit dem Namen zh-Hant sind neutrale Kulturen. Die Kultur Namen stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung der älteren Namen zh-CHS und zh-cht.  
  
 Ein Kultur Bezeichner ist eine standardmäßige internationale numerische Abkürzung und verfügt über die erforderlichen Komponenten, um eine der installierten Kulturen eindeutig identifizieren zu können. Die Anwendung kann vordefinierte Kultur Bezeichner verwenden oder benutzerdefinierte Bezeichner definieren.  
  
 Bestimmte vordefinierte Kultur Namen und Bezeichner werden von diesem und anderen Klassen im <xref:System.Globalization?displayProperty=nameWithType>-Namespace verwendet. Ausführliche Informationen zur Kultur für Windows-Systeme finden Sie in der Spalte **sprach Kennzeichen** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard.  
  
 Beachten Sie, dass die Kultur Namen und-Bezeichner nur eine Teilmenge der Kulturen darstellen, die auf einem bestimmten Computer gefunden werden können. Die verfügbaren Kulturen können von Windows-Versionen oder Service Packs geändert werden. Anwendungen fügen benutzerdefinierte Kulturen mithilfe der <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse hinzu. Benutzer fügen mithilfe des Microsoft Locale Builder-Tools eigene benutzerdefinierte Kulturen hinzu. Microsoft Locale Builder wird in verwaltetem Code mit der `CultureAndRegionInfoBuilder`-Klasse geschrieben.  
  
 Mehrere eindeutige Namen sind eng mit einer Kultur verknüpft, insbesondere die Namen, die den folgenden Klassenmembern zugeordnet sind:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Invariante, neutrale und spezifische Kulturen  
 Die Kulturen sind im Allgemeinen in drei Sätze gruppiert: invariante Kulturen, neutrale Kulturen und bestimmte Kulturen.  
  
 Eine invariante Kultur ist Kultur unabhängig. Die Anwendung gibt die invariante Kultur anhand des Namens mit einer leeren Zeichenfolge ("") oder durch ihren Bezeichner an. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> eine Instanz der invarianten Kultur definiert. Sie ist mit der englischen Sprache verknüpft, aber nicht mit einem Land bzw. einer Region. Sie wird in nahezu jeder Methode im `Globalization`-Namespace verwendet, der eine Kultur erfordert.  
  
 Eine neutrale Kultur ist eine Kultur, die einer Sprache zugeordnet ist, aber nicht mit einem Land bzw. einer Region. Eine bestimmte Kultur ist eine Kultur, die einer Sprache und einem Land/einer Region zugeordnet ist. Beispielsweise ist "fr" der neutrale Name für die französische Kultur, und "fr-FR" ist der Name der Kultur "Französisch (Frankreich)". Beachten Sie, dass Chinesisch (vereinfacht) und Chinesisch (traditionell) auch als neutrale Kulturen angesehen werden.  
  
 Das Erstellen einer Instanz einer <xref:System.Globalization.CompareInfo> Klasse für eine neutrale Kultur ist nicht empfehlenswert, da die darin enthaltenen Daten willkürlich sind. Um Daten anzuzeigen und zu sortieren, geben Sie die Sprache und die Region an. Außerdem gibt die <xref:System.Globalization.CompareInfo.Name%2A>-Eigenschaft eines <xref:System.Globalization.CompareInfo> Objekts, das für eine neutrale Kultur erstellt wurde, nur das Land zurück und schließt den Bereich nicht ein.  
  
 Die definierten Kulturen verfügen über eine Hierarchie, in der das übergeordnete Element einer bestimmten Kultur eine neutrale Kultur ist und das übergeordnete Element einer neutralen Kultur die invariante Kultur ist. Die <xref:System.Globalization.CultureInfo.Parent%2A>-Eigenschaft enthält die neutrale Kultur, die einer bestimmten Kultur zugeordnet ist. Benutzerdefinierte Kulturen sollten die <xref:System.Globalization.CultureInfo.Parent%2A>-Eigenschaft in Übereinstimmung mit diesem Muster definieren.  
  
 Wenn die Ressourcen für eine bestimmte Kultur im Betriebssystem nicht verfügbar sind, werden die Ressourcen für die zugehörige neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die in die Hauptassembly eingebetteten Ressourcen verwendet. Weitere Informationen zum Ressourcen Fall Backprozess finden Sie unter [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)Bereitstellen von Ressourcen.  
  
 Die Liste der Gebiets Schemas in der Windows-API unterscheidet sich geringfügig von der Liste der Kulturen, die vom .NET Framework unterstützt werden. Wenn Interoperabilität mit Windows erforderlich ist, z. b. durch den p/aufrufen-Mechanismus, sollte die Anwendung eine bestimmte Kultur verwenden, die für das Betriebssystem definiert ist. Die Verwendung der jeweiligen Kultur gewährleistet die Konsistenz mit dem entsprechenden Windows-Gebiets Schema, das mit einem Gebiets Schema Bezeichner identifiziert wird, der mit <xref:System.Globalization.CultureInfo.LCID%2A>identisch ist.  
  
 Eine <xref:System.Globalization.DateTimeFormatInfo> oder eine <xref:System.Globalization.NumberFormatInfo> kann nur für die invariante Kultur oder für bestimmte Kulturen, nicht für neutrale Kulturen, erstellt werden.  
  
 Wenn <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> die <xref:System.Globalization.TaiwanCalendar>, aber die <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> nicht auf zh-tw festgelegt ist, geben <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>und <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> eine leere Zeichenfolge ("") zurück.  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Benutzerdefinierte Kulturen  
 Zusätzlich zu den vordefinierten Kulturen, die vom Windows-Betriebssystem und dem .NET Framework unterstützt werden, unterstützt die .NET Framework drei Typen von benutzerdefinierten Kulturen:  
  
-   Neue Kulturen, die die in Windows verfügbaren Kulturen ergänzen, oder die .NET Framework. Beispielsweise kann eine Anwendung ein <xref:System.Globalization.CultureInfo> Objekt installieren, das die Kultur fj-FJ (oder fijan (Fidschi) in einem System darstellt.  
  
-   Ersatzkulturen, deren Eigenschaften sich von den Eigenschaften der Standard Kulturen unterscheiden, die von Windows und der .NET Framework unterstützt werden.  
  
-   Standard Kulturen mit Benutzer Überschreitungen. Der Benutzer kann die **Regions-und sprach** Anwendung in der **Systemsteuerung** verwenden, um die Eigenschaftswerte einer vorhandenen Kultur anzupassen.  
  
> [!NOTE]
>  Sie können die <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse verwenden, um benutzerdefinierte Kulturen zu definieren, zu speichern und zu registrieren, die vorhandene Kulturen ergänzen oder ersetzen. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType>-Methode erstellt eine LDML-Datei (Locale Data Markup Language), die zum Installieren einer benutzerdefinierten Kultur auf Zielsystemen verwendet werden kann. Schritt-für-Schritt-Informationen zur Verwendung der <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse zum Erstellen einer neuen oder Ersatz Kultur finden Sie im Thema <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse.  
  
 Da der .NET Framework benutzerdefinierte Kulturen unterstützt, sollten beim Arbeiten mit kulturspezifischen Daten folgende Punkte berücksichtigt werden:  
  
-   Benutzerdefinierte Kulturen können Werte aufweisen, die die Bereiche der vordefinierten Kulturen überschreiten. Beispielsweise weisen einige Kulturen ungewöhnlich lange Monatsnamen, unerwartete Datums-oder Uhrzeit Formate oder andere ungewöhnliche Daten auf.  
  
-   Wenn Sie kulturspezifische Daten auf der Benutzeroberfläche anzeigen, sollten Sie die Anpassungen des Benutzers berücksichtigen. der Benutzer könnte z. b. ein 24-Stunden-Format oder ein YYYYMMDD-Datumsformat haben.  
  
-   Beachten Sie, dass benutzerdefinierte Kulturen Standardwerte überschreiben. Daher können Kultur Daten nicht als stabil betrachtet werden. Ländernamen, Zahlen-und Datumsformate sowie rechtschreibweisen können sich in Zukunft ändern. Wenn Sie Kultur abhängige Daten (z. b. Datums-und Uhrzeit Zeichenfolgen) serialisieren möchten, die an die Datums-und Uhrzeit-parametrisierungsfunktionen übermittelt werden sollen, sollten Sie die invariante Kultur oder eine bestimmte verwenden.  
  
 Der <xref:System.Globalization.CultureInfo.CultureTypes%2A>-Eigenschafts Wert von benutzerdefinierten Kulturen, die auf einem System installiert sind, umfasst das <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>-Flag, und benutzerdefinierten Kulturen wird ein <xref:System.Globalization.CultureInfo.LCID%2A>-Eigenschafts Wert `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 oder 4096) zugewiesen. Beachten Sie, dass dieser Wert ab Windows 10 auch System definierten Kulturen zugewiesen wird, die nicht über umfassende Kultur Daten verfügen.  

## <a name="cultureinfo-and-cultural-data"></a>CultureInfo-und Kultur Daten

.Net leitet seine kulturellen Daten von einer Vielzahl von Quellen ab, je nach Implementierung, Plattform und Version:

- In .NET Framework 3,5 und früheren Versionen werden Kultur Daten sowohl vom Windows-Betriebssystem als auch vom .NET Framework bereitgestellt.

- In .NET Framework 4 und höheren Versionen werden Kultur Daten vom Windows-Betriebssystem bereitgestellt.

- In allen Versionen von .net Core, die unter Windows ausgeführt werden, werden die kulturellen Daten vom Windows-Betriebssystem bereitgestellt.

- In allen Versionen von .net Core, die auf UNIX-Plattformen ausgeführt werden, werden Kultur Daten von der [ICU-Bibliothek (International Components for Unicode)](http://site.icu-project.org/)bereitgestellt. Die spezifische Version der ICU-Bibliothek hängt vom jeweiligen Betriebssystem ab.

Aus diesem Grund ist eine Kultur, die für eine bestimmte .NET-Implementierung, Plattform oder Version verfügbar ist, möglicherweise nicht in einer anderen .NET-Implementierung, Plattform oder Version verfügbar.

Einige `CultureInfo` Objekte unterscheiden sich abhängig von der zugrunde liegenden Plattform. Insbesondere "zh-cn" oder Chinesisch (vereinfacht, China) und zh-tw bzw. Chinesisch (traditionell, Taiwan) sind auf Windows-Systemen verfügbare Kulturen, aber es handelt sich dabei um Alias Kulturen auf UNIX-Systemen. "zh-cn" ist ein Alias für die Kultur "zh-Hans-CN", und "zh-tw" ist ein Alias für die Kultur "zh-Hant-TW". Alias Kulturen werden von Aufrufen der <xref:System.Globalization.CultureInfo.GetCultures%2A>-Methode nicht zurückgegeben und verfügen möglicherweise über unterschiedliche Eigenschaftswerte, einschließlich verschiedener <xref:System.Globalization.CultureInfo.Parent> Kulturen, als Ihre Windows-Entsprechungen. Für die zh-cn-und zh-tw-Kulturen umfassen diese differendie folgenden Unterschiede:

- Auf Windows-Systemen ist die übergeordnete Kultur der Kultur "zh-cn" "zh-Hans", und die übergeordnete Kultur der "zh-tw"-Kultur ist "zh-Hant". Die übergeordnete Kultur beider Kulturen ist "zh". Auf UNIX-Systemen sind die übergeordneten Elemente beider Kulturen "zh". Dies bedeutet, dass Sie, wenn Sie keine Kultur abhängigen Ressourcen für die Kulturen "zh-cn" oder "zh-tw" bereitstellen, aber keine Ressourcen für die neutrale Kultur "zh-Hans" oder "zh-Hant" bereitstellen, dass Ihre Anwendung die Ressourcen für die neutrale Kultur unter Windows, jedoch nicht für UNIX lädt. Auf UNIX-Systemen müssen Sie den <xref:System.Globalization.CultureInfo.CurrentUICulture> des Threads explizit entweder auf "zh-Hans" oder "zh-Hant" festlegen. 

- Auf Windows-Systemen gibt das Aufrufen von <xref:System.Globalization.CultureInfo.Equals%2A?displayProperty=nameWithType> auf einer-Instanz, die die Kultur "zh-cn" darstellt, und die Übergabe einer zh-Hans-CN-Instanz `true`zurück. Auf UNIX-Systemen gibt der Methodenaufrufe `false`zurück. Dieses Verhalten gilt auch für den Aufruf von <xref:System.Globalization.CultureInfo.Equals%2A> in einer <xref:System.Globalization.CultureInfo>-Instanz von "zh-tw" und für die Übergabe einer zh-Hant-TW-Instanz.

<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dynamische Kultur Daten  
 Mit Ausnahme der invarianten Kultur sind Kultur Daten dynamisch. Dies gilt auch für die vordefinierten Kulturen. Beispielsweise übernehmen Länder oder Regionen neue Währungen, ändern ihre Schreibweise von Wörtern oder ändern Ihren bevorzugten Kalender, und Kultur Definitionen ändern sich, um dies zu verfolgen.  Benutzerdefinierte Kulturen können ohne vorherige Ankündigung geändert werden, und jede bestimmte Kultur kann durch eine benutzerdefinierte Ersatz Kultur überschrieben werden. Außerdem kann ein einzelner Benutzer, wie im folgenden erläutert, die kulturellen Einstellungen überschreiben. Anwendungen sollten Kultur Daten immer zur Laufzeit abrufen.  
  
> [!CAUTION]
>  Beim Speichern von Daten sollte Ihre Anwendung die invariante Kultur, ein binäres Format oder ein bestimmtes Kultur unabhängiges Format verwenden. Daten, die gemäß den aktuellen Werten gespeichert werden, die einer bestimmten Kultur zugeordnet sind, außer der invarianten Kultur, können möglicherweise nicht lesbar sein oder sich ändern, wenn sich die Kultur ändert.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>Die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur  
 Jeder Thread in einer .NET-Anwendung verfügt über eine aktuelle Kultur und eine aktuelle Benutzeroberflächen Kultur. Die aktuelle Kultur bestimmt die Formatierungs Konventionen für Datumsangaben, Uhrzeiten, Zahlen und Währungswerte, die Sortierreihenfolge von Text, die Groß-/Kleinschreibungskonventionen und die Möglichkeiten, wie Zeichen folgen verglichen werden. Die aktuelle Benutzeroberflächen Kultur wird zum Abrufen kulturspezifischer Ressourcen zur Laufzeit verwendet.  
  
> [!NOTE]
>  Informationen dazu, wie die aktuelle und die aktuelle Benutzeroberflächen Kultur Thread bezogen bestimmt wird, finden Sie im Abschnitt [Kultur und Threads](#Threads) . Informationen dazu, wie die aktuelle und die aktuelle Benutzeroberflächen Kultur auf Threads festgelegt wird, die in einer neuen Anwendungsdomäne ausgeführt werden, sowie auf Threads, die Anwendungs Domänen Grenzen überschreiten, finden Sie im Abschnitt [Kultur-und Anwendungs Domänen](#AppDomain) . Informationen dazu, wie Current und Current auf Threads festgelegt werden, die aufgabenbasierte asynchrone Vorgänge ausführen, finden Sie im Abschnitt [Kultur und aufgabenbasierte asynchrone Vorgänge](#Async) .  
  
 Ausführlichere Informationen zur aktuellen Kultur finden Sie im Thema <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft. Ausführlichere Informationen zur aktuellen Benutzeroberflächen Kultur finden Sie im Thema <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Abrufen der aktuellen und der aktuellen Benutzeroberflächen Kulturen  
 Sie können ein <xref:System.Globalization.CultureInfo> Objekt, das die aktuelle Kultur darstellt, auf zwei Arten erhalten:  
  
-   Durch Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft.  
  
-   Durch Abrufen des Werts der [Thread. CurrentThread. CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) -Eigenschaft.  
  
 Im folgenden Beispiel werden beide Eigenschaftswerte abgerufen und verglichen, um anzuzeigen, dass Sie gleich sind, und der Name der aktuellen Kultur wird angezeigt.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Sie können ein <xref:System.Globalization.CultureInfo> Objekt, das die aktuelle Benutzeroberflächen Kultur darstellt, auf zwei Arten erhalten:  
  
-   Durch Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft.  
  
-   Durch Abrufen des Werts der [Thread. CurrentThread. CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) -Eigenschaft.  
  
 Im folgenden Beispiel werden beide Eigenschaftswerte abgerufen und verglichen, um anzuzeigen, dass Sie gleich sind, und der Name der aktuellen Benutzeroberflächen Kultur wird angezeigt.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Festlegen der aktuellen und der aktuellen Benutzeroberflächen Kulturen  
 Gehen Sie folgendermaßen vor, um die Kultur und die Benutzeroberflächen Kultur eines Threads zu ändern:  
  
1.  Instanziieren Sie ein <xref:System.Globalization.CultureInfo> Objekt, das diese Kultur darstellt, indem Sie einen <xref:System.Globalization.CultureInfo>-Klassenkonstruktor aufrufen und ihm den Namen der Kultur übergeben. Der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>-Konstruktor instanziiert ein <xref:System.Globalization.CultureInfo> Objekt, das Benutzer Überschreibungen widerspiegelt, wenn die neue Kultur mit der aktuellen Windows-Kultur identisch ist.   Mit dem <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>-Konstruktor können Sie angeben, ob das neu instanziierte <xref:System.Globalization.CultureInfo> Objekt Benutzer Überschreibungen widerspiegelt, wenn die neue Kultur mit der aktuellen Windows-Kultur identisch ist.  
  
2.  Weisen Sie das <xref:System.Globalization.CultureInfo>-Objekt der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-oder <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft in .net Core und .NET Framework 4,6 und höheren Versionen zu. (Bei .NET Framework 4.5.2 und früheren Versionen können Sie das `CultureInfo`-Objekt der Eigenschaft <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> oder <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> zuweisen.)   
  
 Im folgenden Beispiel wird die aktuelle Kultur abgerufen. Wenn es sich um etwas anderes als die Kultur Französisch (Frankreich) handelt, wird die aktuelle Kultur in Französisch (Frankreich) geändert. Andernfalls wird die aktuelle Kultur in Französisch (Luxemburg) geändert.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 Im folgenden Beispiel wird die aktuelle Kultur abgerufen. Wenn es sich um eine andere Kultur für Slowenisch (Slowenien) handelt, wird die aktuelle Kultur in Slowenisch (Slowenien) geändert. Andernfalls wird die aktuelle Kultur in Kroatisch (Kroatien) geändert.  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Alle Kulturen erhalten  
 Sie können ein Array spezifischer Kategorien von Kulturen oder alle Kulturen abrufen, die auf dem lokalen Computer verfügbar sind, indem Sie die <xref:System.Globalization.CultureInfo.GetCultures%2A>-Methode aufrufen. Beispielsweise können Sie benutzerdefinierte Kulturen, bestimmte Kulturen oder neutrale Kulturen entweder allein oder in Kombination abrufen.  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.GetCultures%2A>-Methode zweimal aufgerufen, zuerst mit dem <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Enumerationsmember, um alle benutzerdefinierten Kulturen abzurufen, und dann mit dem <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>-Enumerationsmember, um alle Ersetzungs Kulturen abzurufen.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Kultur und Threads  
 Wenn ein neuer Anwendungs Thread gestartet wird, werden die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur von der aktuellen System Kultur und nicht von der aktuellen Thread Kultur definiert. Der Unterschied wird im folgenden Beispiel veranschaulicht. Sie legt die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur eines Anwendungs Threads auf die Kultur Französisch (Frankreich) (fr-FR) fest. Wenn die aktuelle Kultur bereits "fr-FR" ist, wird Sie im Beispiel auf die Kultur "Englisch (USA)" (en-US) festgelegt. Es zeigt drei Zufallszahlen als Währungswerte an und erstellt dann einen neuen Thread, der wiederum drei weitere Zufallszahlen als Währungswerte anzeigt. Wie die Ausgabe des Beispiels zeigt, spiegeln die vom neuen Thread angezeigten Währungswerte jedoch nicht die Formatierungs Konventionen der Kultur Französisch (Frankreich) wider, anders als bei der Ausgabe des Hauptanwendungs Threads.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 In Versionen der .NET Framework vor dem [!INCLUDE[net_v45](~/includes/net-v45-md.md)]ist die häufigste Methode, um sicherzustellen, dass der Hauptanwendungs Thread die gleiche Kultur gemeinsam mit allen anderen Arbeitsthreads hat, den Namen der Anwendungs weiten Kultur oder ein <xref:System.Globalization.CultureInfo> Objekt, das die Anwendungs weite Kultur darstellt, an einen <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> Delegaten zu übergeben. Im folgenden Beispiel wird dieser Ansatz verwendet, um sicherzustellen, dass die von zwei Threads angezeigten Währungswerte die Formatierungs Konventionen der gleichen Kultur widerspiegeln.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Sie können die Kultur und die UI-Kultur von Thread Pool-Threads auf ähnliche Weise festlegen, indem Sie die <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType>-Methode aufrufen.  
  
 Beginnend mit dem [!INCLUDE[net_v45](~/includes/net-v45-md.md)]können Sie die Kultur und die UI-Kultur aller Threads in einer Anwendungsdomäne mehr direkt festlegen, indem Sie ein <xref:System.Globalization.CultureInfo> Objekt, das diese Kultur darstellt, den Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> zuweisen. Im folgenden Beispiel werden diese Eigenschaften verwendet, um sicherzustellen, dass alle Threads in der Standard Anwendungsdomäne dieselbe Kultur gemeinsam verwenden.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Obwohl es sich bei den Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> um statische Member handelt, definieren Sie die Standard Kultur und die standardmäßige Benutzeroberflächen Kultur nur für die Anwendungsdomäne, die zum Zeitpunkt der Festlegung dieser Eigenschaftswerte aktuell ist. Weitere Informationen finden Sie im nächsten Abschnitt [Kultur-und Anwendungs Domänen](#AppDomain).  
  
 Wenn Sie den Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Werte zuweisen, ändern sich auch die Kultur und die UI-Kultur der Threads in der Anwendungsdomäne, wenn Ihnen nicht explizit eine Kultur zugewiesen wurde. Diese Threads spiegeln jedoch nur die neuen Kultur Einstellungen wider, während Sie in der aktuellen Anwendungsdomäne ausgeführt werden. Wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, wird ihre Kultur zur Standard Kultur, die für die jeweilige Anwendungsdomäne definiert ist. Daher wird empfohlen, dass Sie immer die Kultur des Hauptanwendungs Threads festlegen und sich nicht auf die Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> verlassen, um Sie zu ändern.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Kultur-und Anwendungs Domänen  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sind statische Eigenschaften, die explizit eine Standard Kultur nur für die Anwendungsdomäne definieren, die aktuell ist, wenn der Eigenschafts Wert festgelegt oder abgerufen wird. Im folgenden Beispiel werden die Standard Kultur und die standardmäßige Benutzeroberflächen Kultur in der Standard Anwendungsdomäne auf Französisch (Frankreich) festgelegt. Anschließend werden mithilfe der <xref:System.AppDomainSetup>-Klasse und des <xref:System.AppDomainInitializer> Delegaten die Standard Kultur und die Benutzeroberflächen Kultur in einer neuen Anwendungsdomäne auf Russisch (Russische Föderation) festgelegt. Ein einzelner Thread führt dann in jeder Anwendungsdomäne zwei Methoden aus. Beachten Sie, dass die Kultur und Benutzeroberflächen Kultur des Threads nicht explizit festgelegt werden. Sie werden von der Standard Kultur und Benutzeroberflächen Kultur der Anwendungsdomäne abgeleitet, in der der Thread ausgeführt wird. Beachten Sie auch, dass die Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> die Standard <xref:System.Globalization.CultureInfo> Werte der Anwendungsdomäne zurückgeben, die bei der Methodenaufrufe aktuell ist.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Weitere Informationen zu Kulturen und Anwendungs Domänen finden Sie im Abschnitt "Anwendungs Domänen und Threads" im Thema [Anwendungs Domänen](~/docs/framework/app-domains/application-domains.md) .  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Kultur-und aufgabenbasierte asynchrone Vorgänge  
 Das [aufgabenbasierte asynchrone Programmier Muster](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) verwendet <xref:System.Threading.Tasks.Task>-und <xref:System.Threading.Tasks.Task%601>-Objekte, um Delegaten asynchron in Thread Pool-Threads auszuführen. Der bestimmte Thread, in dem eine bestimmte Aufgabe ausgeführt wird, ist im Voraus nicht bekannt, wird jedoch nur zur Laufzeit bestimmt.  
  
 Für apps, die auf [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder höhere Versionen ausgerichtet sind, ist die Kultur Teil eines asynchronen Vorgangs Kontexts. Mit anderen Worten, beginnend mit apps, die auf das [!INCLUDE[net_v46](~/includes/net-v46-md.md)]abzielen, erben asynchrone Vorgänge standardmäßig die Werte der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften des Threads, von dem Sie gestartet werden. Wenn die aktuelle Kultur oder die aktuelle UI-Kultur von der System Kultur abweicht, überschreitet die aktuelle Kultur Thread Grenzen und wird zur aktuellen Kultur des Thread Pool-Threads, der einen asynchronen Vorgang ausführt.  
  
 Das folgende Beispiel bietet eine einfache Veranschaulichung. Das <xref:System.Runtime.Versioning.TargetFrameworkAttribute>-Attribut wird verwendet, um die [!INCLUDE[net_v46](~/includes/net-v46-md.md)]als Ziel zu verwenden. Das Beispiel definiert einen <xref:System.Func%601> Delegaten, `formatDelegate`, der einige Zahlen zurückgibt, die als Währungswerte formatiert sind. Im Beispiel wird die aktuelle System Kultur entweder in Französisch (Frankreich) oder, wenn Französisch (Frankreich) bereits die aktuelle Kultur ist, in Englisch (USA) geändert. Dann:  
  
-   Ruft den Delegaten direkt auf, sodass er synchron im Haupt-App-Thread ausgeführt wird.  
  
-   Erstellt eine Aufgabe, die den Delegaten asynchron in einem Thread Pool Thread ausführt.  
  
-   Erstellt eine Aufgabe, die den Delegaten synchron im Haupt-App-Thread ausführt, indem die <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType>-Methode aufgerufen wird.  
  
 Wie die Ausgabe des Beispiels zeigt, wenn die aktuelle Kultur in Französisch (Frankreich) geändert wird, wird die aktuelle Kultur des Threads, von dem aus Aufgaben asynchron aufgerufen werden, zur aktuellen Kultur für diesen asynchronen Vorgang.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Für apps, die auf Versionen des .NET Framework vor dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)]abzielen, oder für apps, die nicht auf eine bestimmte Version der .NET Framework abzielen, ist die Kultur des aufrufenden Threads nicht Teil des Kontext einer Aufgabe. Wenn eine nicht explizit definiert ist, ist die Kultur neuer Threads standardmäßig die System Kultur. Das folgende Beispiel, das mit dem vorherigen Beispiel identisch ist, mit dem Unterschied, dass es nicht über das <xref:System.Runtime.Versioning.TargetFrameworkAttribute>-Attribut verfügt, veranschaulicht dies. Da die System Kultur des Systems, auf dem das Beispiel ausgeführt wurde, Englisch (USA) war, ist die Kultur der Aufgabe, die asynchron in einem Thread Pool Thread ausgeführt wird, "en-US" und nicht "fr-FR".  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Für apps, die auf Versionen der .NET Framework von der [!INCLUDE[net_v45](~/includes/net-v45-md.md)] und höher, aber vor dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)]abzielen, können Sie die Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> verwenden, um sicherzustellen, dass die Kultur des aufrufenden Threads in asynchronen Aufgaben verwendet wird, die in Thread Pool-Threads ausgeführt werden. Das folgende Beispiel ist mit dem vorherigen Beispiel identisch, mit dem Unterschied, dass es die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft verwendet, um sicherzustellen, dass Thread Pool-Threads dieselbe Kultur wie der Haupt Anwendungs Thread aufweisen.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sind pro App-Domänen Eigenschaften. Das heißt, Sie stellen eine Standard Kultur für alle Threads her, die nicht explizit einer Kultur in einer bestimmten Anwendungsdomäne zugewiesen sind. Für apps, die auf [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder höher ausgerichtet sind, bleibt die Kultur des aufrufenden Threads jedoch Teil eines asynchronen Aufgaben Kontexts, auch wenn der Task Anwendungs Domänen Grenzen überschreitet.  
  
 Das folgende Beispiel zeigt, dass die Kultur des aufrufenden Threads die aktuelle Kultur eines aufgabenbasierten asynchronen Vorgangs ist, auch wenn die von der Aufgabe ausgeführte Methode Anwendungs Domänen Grenzen überschreitet. Es definiert eine-Klasse, `DataRetriever`mit einer einzelnen Methode, `GetFormattedNumber`, die eine zufällige Gleit Komma Zahl mit doppelter Genauigkeit zwischen 1 und 1.000 als Währungswert formatiert zurückgibt. Eine erste Aufgabe wird ausgeführt, die einfach eine `DataRetriever` Instanz instanziiert und ihre `GetFormattedNumber`-Methode aufruft. Eine zweite Aufgabe meldet die aktuelle Anwendungsdomäne, erstellt eine neue Anwendungsdomäne, instanziiert eine `DataRetriever` Instanz in der neuen Anwendungsdomäne und ruft deren `GetFormattedNumber` Methode auf. Wie die Ausgabe des Beispiels zeigt, ist die aktuelle Kultur im aufrufenden Thread, in der ersten Aufgabe und in der zweiten Aufgabe sowohl bei der Ausführung in der Haupt Anwendungsdomäne als auch in der zweiten Anwendungsdomäne unverändert geblieben.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>  
## <a name="cultureinfo-object-serialization"></a>CultureInfo-Objektserialisierung  
 Wenn ein <xref:System.Globalization.CultureInfo> Objekt serialisiert wird, werden alle tatsächlich gespeicherten Daten <xref:System.Globalization.CultureInfo.Name%2A> und <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Die Deserialisierung erfolgt nur in einer Umgebung, in der diese <xref:System.Globalization.CultureInfo.Name%2A> dieselbe Bedeutung hat. Die folgenden drei Beispiele zeigen, warum dies nicht immer der Fall ist:  
  
- Wenn der <xref:System.Globalization.CultureInfo.CultureTypes%2A>-Eigenschafts Wert <xref:System.Globalization.CultureTypes.InstalledWin32Cultures?displayProperty=nameWithType>ist und diese Kultur zuerst in eine bestimmte Version des Windows-Betriebssystems eingeführt wurde, ist es nicht möglich, Sie in einer früheren Version von Windows zu deserialisieren. Wenn z. b. eine Kultur in Windows 10 eingeführt wurde, kann Sie nicht unter Windows 8 deserialisiert werden.  
  
-   Wenn der <xref:System.Globalization.CultureInfo.CultureTypes%2A> Wert <xref:System.Globalization.CultureTypes.UserCustomCulture?displayProperty=nameWithType>ist und auf dem Computer, auf dem die Deserialisierung ausgeführt wird, diese benutzerdefinierte Kultur nicht installiert ist, ist es nicht möglich, Sie zu deserialisieren.  
  
-   Wenn der <xref:System.Globalization.CultureInfo.CultureTypes%2A> Wert <xref:System.Globalization.CultureTypes.ReplacementCultures?displayProperty=nameWithType>ist und der Computer, auf dem er deserialisiert ist, nicht über diese Ersetzungs Kultur verfügt, wird er in denselben Namen deserialisiert, jedoch nicht die gleichen Merkmale. Wenn z. b. "en-US" eine Ersatz Kultur auf Computer a, aber nicht auf Computer b ist, und wenn ein <xref:System.Globalization.CultureInfo> Objekt, das sich auf diese Kultur bezieht, auf Computer a serialisiert und auf Computer b deserialisiert wird, wird keines der benutzerdefinierten Merkmale der Kultur übertragen. Die Kultur wird erfolgreich deserialisiert, jedoch mit einer anderen Bedeutung.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Außer Kraft setzungen der Systemsteuerung  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden. Im Allgemeinen sollten Ihre Anwendungen diese außer Kraft setzungen von Benutzern berücksichtigen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true` und die angegebene Kultur mit der aktuellen Windows-Kultur übereinstimmt, verwendet der <xref:System.Globalization.CultureInfo> diese außer Kraft setzungen, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Alternative Sortier Reihenfolgen  
 Einige Kulturen unterstützten mehr als eine Sortierreihenfolge. Zum Beispiel:  
  
-   Die Kultur Spanisch (Spanien) hat zwei Sortier Reihenfolgen: die standardmäßige internationale Sortierreihenfolge und die herkömmliche Sortierreihenfolge. Wenn Sie ein <xref:System.Globalization.CultureInfo> Objekt mit dem Namen der es-es-Kultur instanziieren, wird die internationale Sortierreihenfolge verwendet. Wenn Sie ein <xref:System.Globalization.CultureInfo> Objekt mit dem Kultur Namen "es-es-tradnl" instanziieren, wird die herkömmliche Sortierreihenfolge verwendet.  
  
-   Die Kultur zh-cn (Chinesisch (vereinfacht, PRC)) unterstützt zwei Sortier Reihenfolgen: nach Aussprache (Standard) und nach Strich Anzahl. Wenn Sie ein <xref:System.Globalization.CultureInfo> Objekt mit dem Namen der zh-cn-Kultur instanziieren, wird die Standard Sortierreihenfolge verwendet. Wenn Sie ein <xref:System.Globalization.CultureInfo> Objekt mit einem lokalen Bezeichner 0x00020804 instanziieren, werden Zeichen folgen nach Strich Anzahl sortiert.  
  
 Die folgende Tabelle enthält die Kulturen, die unterschiedliche Sortierreihenfolgen unterstützen, sowie die Bezeichner für die standardmäßigen und die alternativen Sortierreihenfolgen.  
  
|Kulturname|culture|Standardsortierreihenfolge und Bezeichner|Alternative Sortierreihenfolge und Bezeichner|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Spanisch (Spanien)|International: 0x00000C0A|Traditionell: 0x0000040A|  
|zh-TW|Chinesisch (Taiwan)|Anzahl der Striche: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chinesisch (VRC)|Aussprache: 0x00000804|Anzahl der Striche: 0x00020804|  
|zh-HK|Chinesisch (Hongkong SAR)|Anzahl der Striche: 0x00000c04|Anzahl der Striche: 0x00020c04|  
|zh-SG|Chinesisch (Singapur)|Aussprache: 0x00001004|Anzahl der Striche: 0x00021004|  
|zh-MO|Chinesisch (Macau SAR)|Aussprache: 0x00001404|Anzahl der Striche: 0x00021404|  
|ja-JP|Japanisch (Japan)|Standard: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Koreanisch (Korea)|Standard: 0x00000412|Koreanisch Xwansung – Unicode:  0x00010412|  
|de-DE|Deutsch (Deutschland)|Wörterbuch: 0x00000407|Telefonbuchsortierung DIN: 0x00010407|  
|hu-HU|Ungarisch (Ungarn)|Standard: 0x0000040e|Technische Sortierung: 0x0001040e|  
|ka-GE|Georgisch (Georgien)|Traditionell: 0x00000437|Moderne Sortierung: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Die aktuelle Kultur und UWP-apps  
 In universelle Windows-Plattform-Apps (UWP) werden die Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mit Lese-/Schreibzugriff, ebenso wie in .NET Framework-und .net Core-apps. UWP-apps erkennen jedoch eine einzelne Kultur. Die Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> werden dem ersten Wert in der [Windows. applicationmodel. resources. Core. ResourceManager. DefaultContext. Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Auflistung zugeordnet.  

In .NET Framework und .net Core-Apps ist die aktuelle Kultur eine Thread spezifische Einstellung, und die Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> spiegeln die Kultur und die UI-Kultur des aktuellen Threads wider. In UWP-apps wird die aktuelle Kultur der [Windows. applicationmodel. resources. Core. ResourceManager. DefaultContext. Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Auflistung zugeordnet, bei der es sich um eine globale Einstellung handelt. Durch Festlegen der Eigenschaft <xref:System.Globalization.CultureInfo.CurrentCulture%2A> oder <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> wird die Kultur der gesamten APP geändert. die Kultur kann nicht pro Thread festgelegt werden.
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Globalization.CultureInfo>-Objekt für Spanisch (Spanien) mit der internationalen Sortierung und ein weiteres <xref:System.Globalization.CultureInfo>-Objekt mit der herkömmlichen Sortierung erstellt wird.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Bezeichner, die <see cref="P:System.Globalization.CultureInfo.LCID" />-Eigenschaft eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts oder ein Nur-Windows-Kulturbezeichner.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Kulturbezeichner angegebenen Kultur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Vordefinierte Kultur Bezeichner für Kulturen, die unter Windows System verfügbar sind, sind in der Spalte **Sprachtag** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)aufgelistet. Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard.

 In den meisten Fällen wird der `culture` Parameter dem entsprechenden NLS-Gebiets Schema Bezeichner (National Language Support) zugeordnet. Der Wert des `culture`-Parameters wird zum Wert der <xref:System.Globalization.CultureInfo.LCID%2A>-Eigenschaft der neuen <xref:System.Globalization.CultureInfo>.  
  
 Es wird empfohlen, den Namen des Gebiets Schema namens <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>aufzurufen, da Gebiets Schema Namen LCIDs vorzuziehen sind. Bei benutzerdefinierten Gebiets Schemas ist ein Gebiets Schema Name erforderlich.  
  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden. Wenn der angegebene Kultur Bezeichner mit dem Kultur Bezeichner der aktuellen Windows-Kultur übereinstimmt, erstellt dieser Konstruktor eine <xref:System.Globalization.CultureInfo>, die diese über schreibungen verwendet, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die der <xref:System.Globalization.CultureInfo> zugeordnet ist, nicht kompatibel sind (wenn der ausgewählte Kalender z. b. keiner der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>ist), sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Wenn der angegebene Kultur Bezeichner nicht mit dem Bezeichner der aktuellen Windows-Kultur identisch ist, erstellt dieser Konstruktor eine <xref:System.Globalization.CultureInfo>, die die Standardwerte für die angegebene Kultur verwendet.  
  
 Die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz ist immer auf `true`.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Windows-Kultur ist und der Benutzer den Kalender von Hijri in Gregorianisch geändert hat.  
  
-   Bei `CultureInfo("0x0401")` (Kultur Name AR-SA) ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.GregorianCalendar> festgelegt (d. h. die Benutzereinstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
-   Bei `CultureInfo("0x041E")` (Kultur Name TH) ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.ThaiBuddhistCalendar> (der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
 Für Kulturen, die den Euro verwenden, legen die .NET Framework und Windows XP die Standardwährung auf "Euro" fest. Ältere Versionen von Windows jedoch nicht. Wenn der Benutzer einer älteren Version von Windows die Währungs Einstellung nicht über den Regions-und Sprachoptionen Bereich der Systemsteuerung geändert hat, ist die Währung daher möglicherweise falsch. Um die .NET Framework Standardeinstellung für die Währung zu verwenden, sollte die Anwendung eine <xref:System.Globalization.CultureInfo>-Konstruktorüberladung verwenden, die einen `useUserOverride`-Parameter akzeptiert und auf `false`festlegt.  
  
> [!NOTE]
>  Für Abwärtskompatibilität einer Kultur mithilfe einer `culture` Parameter 0 x 0004 oder 0x7c04 besitzen, wird eine <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft Zh-CHS oder Zh-CHT bzw. Sie sollten stattdessen die Kultur mithilfe der aktuellen Standard Kultur Namen von zh-Hans oder zh-Hant erstellen, es sei denn, Sie haben einen Grund für die Verwendung der älteren Namen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> ist kein gültiger Kulturbezeichner. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> aus, wenn <paramref name="culture" /> kein gültiger Kultur Bezeichner ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst dieser Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="culture" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name, eine <see cref="P:System.Globalization.CultureInfo.Name" />-Eigenschaft einer vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Klasse oder ein nur für Windows definierter Kulturname. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Namen angegebenen Kultur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kultur Namen auf Windows-Systemen finden Sie in der Spalte **sprach Kennzeichen** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Außerdem kann `name` ab Windows 10 ein beliebiges gültiges bcp-47-Sprachtag sein.  
  
 Wenn `name` <xref:System.String.Empty?displayProperty=nameWithType>ist, erstellt der Konstruktor eine Instanz der invarianten Kultur. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Eigenschaft.  
  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden. Wenn der mit `name` verknüpfte Kultur Bezeichner mit dem Kultur Bezeichner der aktuellen Windows-Kultur übereinstimmt, erstellt dieser Konstruktor ein <xref:System.Globalization.CultureInfo> Objekt, das diese außer Kraft setzungen verwendet, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Wenn der mit `name` verknüpfte Kultur Bezeichner nicht mit dem Kultur Bezeichner der aktuellen Windows-Kultur identisch ist, erstellt dieser Konstruktor ein <xref:System.Globalization.CultureInfo> Objekt, das die Standardwerte für die angegebene Kultur verwendet.  
  
 Die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz ist immer auf `true`.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Windows-Kultur ist und der Benutzer den Kalender von Hijri in Gregorianisch geändert hat.  
  
-   Bei `CultureInfo("ar-SA")`ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.GregorianCalendar> (d. h. die Benutzereinstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
-   Bei `CultureInfo("th-TH")`ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.ThaiBuddhistCalendar> (der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
 Die <xref:System.Globalization.CultureInfo.LCID%2A>-Eigenschaft der neuen <xref:System.Globalization.CultureInfo> wird auf den Kultur Bezeichner festgelegt, der dem angegebenen Namen zugeordnet ist.  
  
 Für Kulturen, die den Euro verwenden, legen die .NET Framework und Windows XP die Standardwährung auf "Euro" fest. In älteren Versionen von Windows wird dies jedoch nicht der Fall sein. Wenn der Benutzer einer älteren Version von Windows die Währungs Einstellung nicht über den Regions-und Sprachoptionen Bereich der Systemsteuerung geändert hat, ist die Währung daher möglicherweise falsch. Um die .NET Framework Standardeinstellung für die Währung zu verwenden, sollte die Anwendung eine <xref:System.Globalization.CultureInfo>-Konstruktorüberladung verwenden, die einen `useUserOverride`-Parameter akzeptiert und auf `false`festlegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die aktuelle Kultur abgerufen. Wenn es sich um einen anderen Wert als die Kultur Französisch (Frankreich) handelt, wird der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>-Konstruktor aufgerufen, um ein <xref:System.Globalization.CultureInfo> Objekt zu instanziieren, das die Kultur Französisch (Frankreich) darstellt und es zur aktuellen Thread Kultur macht. Andernfalls instanziiert er ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur Französisch (Luxemburg) darstellt, und bildet es zur aktuellen Kultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ist kein gültiger Kulturname. Weitere Informationen finden Sie im Abschnitt "Hinweise zu Aufrufern".</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und früheren Versionen wird eine <see cref="T:System.ArgumentException" /> ausgelöst, wenn <paramref name="name" /> kein gültiger Kultur Name ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst dieser Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="name" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird und <paramref name="name" /> nicht der Name einer ergänzenden oder Ersatz Kultur ist, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Bezeichner, die <see cref="P:System.Globalization.CultureInfo.LCID" />-Eigenschaft eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts oder ein Nur-Windows-Kulturbezeichner.</param>
        <param name="useUserOverride">Ein boolescher Wert, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen verwendet werden sollen (<see langword="true" />) oder ob die Standardkultureinstellungen verwendet werden (<see langword="false" />).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Kulturbezeichner angegebenen Kultur und auf der Grundlage des booleschen Werts, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen des Systems verwendet werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Vordefinierte Kultur Bezeichner, die auf Windows-Systemen verfügbar sind, sind in der Spalte **Sprachtag** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)aufgelistet. Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard.

 In den meisten Fällen wird der `culture` Parameter dem entsprechenden NLS-Gebiets Schema Bezeichner (National Language Support) zugeordnet. Der Wert des `culture`-Parameters wird zum Wert der <xref:System.Globalization.CultureInfo.LCID%2A>-Eigenschaft der neuen <xref:System.Globalization.CultureInfo>.  
  
 Es wird empfohlen, den Namen des Gebiets Schema namens <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>aufzurufen, da Gebiets Schema Namen LCIDs vorzuziehen sind. Bei benutzerdefinierten Gebiets Schemas ist ein Gebiets Schema Name erforderlich.  
  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Anwendungen sollten Benutzer Überschreibungen in der Regel nicht zulassen. Beachten Sie, dass das Zulassen von außer Kraft setzungen nicht selbst die Daten Stabilität garantiert. Siehe Blogeintrag [Kultur Daten sollten nicht als stabil eingestuft werden (außer invariant)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A>-Eigenschaft auf `true` festgelegt ist und der angegebene Kultur Bezeichner mit dem Bezeichner der aktuellen Windows-Kultur übereinstimmt, erstellt dieser Konstruktor eine <xref:System.Globalization.CultureInfo>, die diese über schreibungen verwendet, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Andernfalls erstellt dieser Konstruktor eine <xref:System.Globalization.CultureInfo>, die die Standardwerte für die angegebene Kultur verwendet.  
  
 Der Wert des `useUserOverride`-Parameters wird zum Wert der <xref:System.Globalization.CultureInfo.UseUserOverride%2A>-Eigenschaft.  
  
 Angenommen, Arabisch (Saudi-Arabien) ist die aktuelle Kultur von Windows, und der Benutzer hat den Kalender von Hijri in Gregorianisch geändert.  
  
-   Bei `CultureInfo("0x0401", true)` (Kultur Name AR-SA) ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.GregorianCalendar> festgelegt (d. h. die Benutzereinstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
-   Bei `CultureInfo("0x0401", false)` (Kultur Name AR-SA) ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.HijriCalendar> (der Standardkalender für AR-SA) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `false`festgelegt.  
  
-   Bei `CultureInfo("0x041E", true)` (Kultur Name TH) ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.ThaiBuddhistCalendar> (der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
-   Bei `CultureInfo("0x041E", false)` (Kultur Name TH) ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.ThaiBuddhistCalendar> (der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `false`festgelegt.  
  
 Für Kulturen, die den Euro verwenden, legen die .NET Framework und Windows XP die Standardwährung auf "Euro" fest. Ältere Versionen von Windows jedoch nicht. Wenn der Benutzer einer älteren Version von Windows die Währungs Einstellung nicht über den Regions-und Sprachoptionen Bereich der Systemsteuerung geändert hat, ist die Währung daher möglicherweise falsch. Um die .NET Framework Standardeinstellung für die Währung zu verwenden, sollte die Anwendung den `useUserOverride`-Parameter auf `false`festlegen.  
  
> [!NOTE]
>  Für Abwärtskompatibilität einer Kultur mithilfe einer `culture` Parameter 0 x 0004 oder 0x7c04 besitzen, wird eine <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft Zh-CHS oder Zh-CHT bzw. Sie sollten stattdessen die Kultur mithilfe der aktuellen Standard Kultur Namen von zh-Hans oder zh-Hant erstellen, es sei denn, Sie haben einen Grund für die Verwendung der älteren Namen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> ist kein gültiger Kulturbezeichner. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> aus, wenn <paramref name="culture" /> kein gültiger Kultur Bezeichner ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst dieser Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="culture" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name, eine <see cref="P:System.Globalization.CultureInfo.Name" />-Eigenschaft einer vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Klasse oder ein nur für Windows definierter Kulturname. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <param name="useUserOverride">Ein boolescher Wert, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen verwendet werden sollen (<see langword="true" />) oder ob die Standardkultureinstellungen verwendet werden (<see langword="false" />).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Namen angegebenen Kultur und auf der Grundlage des booleschen Werts, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen des Systems verwendet werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kultur Namen finden Sie in der Spalte **Sprachtag** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Außerdem kann `name` ab Windows 10 ein beliebiges gültiges bcp-47-Sprachtag sein.  
  
Wenn `name` <xref:System.String.Empty?displayProperty=nameWithType>ist, erstellt der Konstruktor eine Instanz der invarianten Kultur. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Eigenschaft.  
  
 Der Benutzer kann einige der Werte, die mit der aktuellen Windows-Kultur verknüpft sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Anwendungen sollten Benutzer Überschreibungen in der Regel nicht zulassen. Beachten Sie, dass das Zulassen von außer Kraft setzungen nicht selbst die Daten Stabilität garantiert. Siehe Blogeintrag [Kultur Daten sollten nicht als stabil eingestuft werden (außer invariant)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A>-Eigenschaft auf `true` festgelegt ist und der Kultur Bezeichner, der dem angegebenen Kultur Namen zugeordnet ist, mit dem Kultur Bezeichner der aktuellen Windows-Kultur übereinstimmt, erstellt dieser Konstruktor eine <xref:System.Globalization.CultureInfo>, die diese außer Kraft setzungen verwendet, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz<xref:System.Globalization.CultureInfo.NumberFormat%2A> Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Andernfalls erstellt dieser Konstruktor eine <xref:System.Globalization.CultureInfo>, die die Standardwerte für die angegebene Kultur verwendet.  
  
 Der Wert des `useUserOverride`-Parameters wird zum Wert der <xref:System.Globalization.CultureInfo.UseUserOverride%2A>-Eigenschaft.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Windows-Kultur ist und der Benutzer den Kalender von Hijri in Gregorianisch geändert hat.  
  
-   Bei `CultureInfo("ar-SA", true)`ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.GregorianCalendar> (d. h. die Benutzereinstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
-   Bei `CultureInfo("ar-SA", false)`ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.HijriCalendar> (der Standardkalender für AR-SA) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `false`festgelegt.  
  
-   Bei `CultureInfo("th-TH", true)`ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.ThaiBuddhistCalendar> (der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `true`festgelegt.  
  
-   Bei `CultureInfo("th-TH", false)`ist <xref:System.Globalization.CultureInfo.Calendar%2A> auf <xref:System.Globalization.ThaiBuddhistCalendar> (der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> auf `false`festgelegt.  
  
 Die <xref:System.Globalization.CultureInfo.LCID%2A>-Eigenschaft der neuen <xref:System.Globalization.CultureInfo> wird auf den Kultur Bezeichner festgelegt, der dem angegebenen Namen zugeordnet ist.  
  
 Für Kulturen, die den Euro verwenden, legen die .NET Framework und Windows XP die Standardwährung auf "Euro" fest. In älteren Versionen von Windows wird dies jedoch nicht der Fall sein. Wenn der Benutzer einer älteren Version von Windows die Währungs Einstellung nicht über den Regions-und Sprachoptionen Bereich der Systemsteuerung geändert hat, ist die Währung daher möglicherweise falsch. Um die .NET Framework Standardeinstellung für die Währung zu verwenden, sollte die Anwendung den `useUserOverride`-Parameter auf `false`festlegen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ist kein gültiger Kulturname. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und früheren Versionen wird eine <see cref="T:System.ArgumentException" /> ausgelöst, wenn <paramref name="name" /> kein gültiger Kultur Name ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst dieser Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="name" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird und <paramref name="name" /> nicht der Name einer ergänzenden oder Ersatz Kultur ist, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den von der Kultur verwendeten Standardkalender ab.</summary>
        <value>Ein <see cref="T:System.Globalization.Calendar" />, der den von der Kultur verwendeten Standardkalender darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true` und die angegebene Kultur mit der aktuellen Windows-Kultur übereinstimmt, verwendet der <xref:System.Globalization.CultureInfo> diese außer Kraft setzungen, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true`ist, kann der Wert dieser Eigenschaft daher nicht mit dem von der Kultur verwendeten Standardkalender identisch sein.  
  
 Die Anwendung ändert den von der aktuellen <xref:System.Globalization.CultureInfo> verwendeten Kalender durch Festlegen der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>-Eigenschaft von <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, bei der es sich um eine Instanz der <xref:System.Globalization.DateTimeFormatInfo> Klasse handelt. Der neue Kalender muss einer der Kalender sein, die in <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>aufgeführt sind. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> umfasst auch andere Eigenschaften, die die Datums-und Uhrzeit Formatierung anpassen, die dieser <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>zugeordnet ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert die zwischengespeicherten kulturbezogenen Informationen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informationen, z. b. die Standard Kultur und Format Muster, werden bei der ersten Anforderung zwischengespeichert. Diese Informationen können sich während der Lebensdauer des <xref:System.AppDomain>ändern, z. b. wenn der Benutzer den Regions-und sprach Optionsbereich der Systemsteuerung ändert. Die <xref:System.Globalization.CultureInfo>-Klasse erkennt Änderungen in den Systemeinstellungen jedoch nicht automatisch.  
  
 Die <xref:System.Globalization.CultureInfo.ClearCachedData%2A>-Methode löscht den Cache von <xref:System.Globalization.CultureInfo> Objekten, die von <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> erstellt wurden, und aktualisiert die Informationen in den Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>und <xref:System.Globalization.RegionInfo.CurrentRegion%2A> basierend auf den aktuellen Systemeinstellungen.  
  
 Die <xref:System.Globalization.CultureInfo.ClearCachedData%2A>-Methode aktualisiert die Informationen in der <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft für vorhandene Threads nicht. Zukünftige Threads verfügen jedoch über neue <xref:System.Globalization.CultureInfo> Eigenschaftswerte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>Eine Kopie der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Klon ist beschreibbar, auch wenn die ursprüngliche <xref:System.Globalization.CultureInfo> schreibgeschützt ist. Daher können die Eigenschaften des geklonten geändert werden.  
  
 Eine flache Kopie eines-Objekts ist nur eine Kopie des-Objekts. Wenn das Objekt Verweise auf andere Objekte enthält, erstellt die flache Kopie keine Kopien der referenzierten Objekte. Stattdessen verweist es auf die ursprünglichen Objekte. Im Gegensatz dazu erstellt eine tiefe Kopie eines Objekts eine Kopie des Objekts und eine Kopie aller Elemente, die direkt oder indirekt von diesem Objekt referenziert werden.  
  
 Die <xref:System.Globalization.CultureInfo.Clone%2A>-Methode erstellt eine verbesserte flache Kopie. Die von den Eigenschaften <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>und <xref:System.Globalization.CultureInfo.Calendar%2A> zurückgegebenen Objekte werden ebenfalls kopiert. Folglich kann das geklonte <xref:System.Globalization.CultureInfo> Objekt seine kopierten Eigenschaften ändern, ohne dass sich dies auf das ursprüngliche <xref:System.Globalization.CultureInfo> Objekt auswirkt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, dass CultureInfo. Clone auch die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> der <xref:System.Globalization.CultureInfo>zugeordneten Instanzen klont.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CompareInfo" /> ab, in der festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</summary>
        <value>Die <see cref="T:System.Globalization.CompareInfo" />, in der festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.CompareInfo%2A>-Eigenschaft gibt ein <xref:System.Globalization.CompareInfo> Objekt zurück, das kulturspezifische Informationen bereitstellt, die in Kultur abhängigen Sortier-und Zeichen folgen Vergleichs Vorgängen verwendet werden.  
  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true` und die angegebene Kultur mit der aktuellen Windows-Kultur übereinstimmt, verwendet der <xref:System.Globalization.CultureInfo> diese außer Kraft setzungen, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und eine andere <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierung erstellt wird.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name oder der Name eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Erstellt eine <see cref="T:System.Globalization.CultureInfo" />, die die zum angegebenen Namen gehörige spezifische Kultur darstellt.</summary>
        <returns>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das Folgendes darstellt: 
Die invariante Kultur, wenn <paramref name="name" /> eine leere Zeichenfolge ist ("").  
  
- oder - 
Die spezifische <paramref name="name" /> zugeordnete Kultur, wenn <paramref name="name" /> eine neutrale Kultur ist.  
  
- oder - 
Die von <paramref name="name" /> angegebene Kultur, wenn <paramref name="name" /> bereits eine bestimmte Kultur ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Methode bindet einen Aufruf der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor.  
  
> [!NOTE]
> Eine Liste der vordefinierten Kultur Namen auf Windows-Systemen finden Sie in der Spalte **sprach Kennzeichen** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Außerdem kann `name` ab Windows 10 ein beliebiges gültiges bcp-47-Sprachtag sein.  
  
 Kulturen werden in drei Gruppen unterteilt: die invariante Kultur, die neutralen Kulturen und die spezifischen Kulturen. Weitere Informationen finden Sie in der Beschreibung der <xref:System.Globalization.CultureInfo>-Klasse.  
  
 Wenn der Kultur Bezeichner der von dieser Methode zurückgegebenen Kultur mit dem Kultur Bezeichner der aktuellen Windows-Kultur übereinstimmt, erstellt diese Methode ein <xref:System.Globalization.CultureInfo> Objekt, das die Windows-Kultur Überschreibungen verwendet. Die außer Kraft setzungen umfassen Benutzereinstellungen für die Eigenschaften des <xref:System.Globalization.DateTimeFormatInfo> Objekts, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und das <xref:System.Globalization.NumberFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird Um ein <xref:System.Globalization.CultureInfo> Objekt zu instanziieren, das mit den Standard Kultur Einstellungen anstelle von Benutzer Überschreibungen steht, müssen Sie den <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>-Konstruktor mit dem Wert `false` für das `useUserOverride`-Argument aufzurufen.  
  
 Der Name der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Methode enthält zwar den Begriff "spezifisch", aber denken Sie daran, dass sich Kultur Daten Zwischenversionen oder aufgrund von benutzerdefinierten Kulturen oder aufgrund von Benutzer Überschreibungen ändern können. Verwenden Sie die invariante Kultur oder binäre oder fixierte Formulare zum Speichern von Daten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von <xref:System.Globalization.CultureInfo> Objekten abgerufen, die neutrale Kulturen aus der <xref:System.Globalization.CultureInfo.GetCultures%2A>-Methode darstellen und das Array sortiert. Wenn die Elemente im Array durchlaufen werden, übergibt Sie den Namen der einzelnen neutralen Kultur an die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>-Methode und zeigt den Namen der von der-Methode zurückgegebenen Kultur an.  
  
> [!NOTE]
>  Das Beispiel verwendet die Kultur Namen zh-CHS und zh-cht. Anwendungen, die auf Windows Vista und höher ausgerichtet sind, sollten zh-Hans anstelle von zh-CHS und zh-Hant anstelle von zh-CHT verwenden. zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund, ältere Namen zu verwenden.  
>   
>  Beachten Sie auch, dass sich die Ergebnisse des Beispiels bei einer Installation von taiwanesischen Fenstern unterscheiden können, bei denen die Eingabe einer chinesischen (herkömmlichen) neutralen Kultur (ZH, zh-CHT oder zh-Hant) zh-tw zurückgibt.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ist kein gültiger Kulturname.  
  
- oder - 
Der von <paramref name="name" /> angegebenen Kultur ist keine bestimmte Kultur zugeordnet.</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="name" /> ist NULL.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und früheren Versionen wird eine <see cref="T:System.ArgumentException" /> ausgelöst, wenn <paramref name="name" /> kein gültiger Kultur Name ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus.</para></block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kulturtypen ab, die das aktuelle <see cref="T:System.Globalization.CultureInfo" />-Objekt betreffen.</summary>
        <value>	Eine bitweise Kombination von einem oder mehreren <see cref="T:System.Globalization.CultureTypes" />-Werten. Es ist kein Standardwert vorhanden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden die <xref:System.Globalization.CultureTypes>-Enumeration und die <xref:System.Globalization.CultureInfo.CultureTypes%2A>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As CultureInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CurrentCulture" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die vom aktuellen Thread verwendete Kultur darstellt, oder setzt dieses Objekt.</summary>
        <value>Ein Objekt, das die vom aktuellen Thread verwendete Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Globalization.CultureInfo> Objekt, das von dieser Eigenschaft und den zugehörigen Objekten zurückgegeben wird, bestimmt das Standardformat für Datumsangaben, Uhrzeiten, Ziffern, Währungswerte, Sortierreihenfolge von Text, Schreib Konventionen und Zeichen folgen Vergleiche.  
  
 Die aktuelle Kultur ist eine Eigenschaft des ausgeführten Threads. Das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft ist ein leistungsfähigere Äquivalent zum Abrufen des <xref:System.Globalization.CultureInfo> Objekts, das von der `Thread.CurrentThread.CurrentCulture`-Eigenschaft zurückgegeben wird.
  
> [!NOTE]
>  In der .NET Framework 4.5.2 und früheren Versionen ist die Eigenschaft <xref:System.Globalization.CultureInfo.CurrentCulture%2A> schreibgeschützt.  Das heißt, Sie können den Eigenschafts Wert abrufen, ihn aber nicht festlegen. Um die aktuelle Kultur zu ändern, weisen Sie das <xref:System.Globalization.CultureInfo>-Objekt, das die neue Kultur darstellt, der `Thread.CurrentThread.CurrentCulture`-Eigenschaft zu. Beginnend mit dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)]ist die <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft Lese-/Schreibzugriff. Sie können den Wert der Eigenschaft festlegen und abrufen. Wenn Sie den Eigenschafts Wert auf ein <xref:System.Globalization.CultureInfo> Objekt festlegen, das eine neue Kultur darstellt, ändert sich auch der Wert der `Thread.CurrentThread.CurrentCulture`-Eigenschaft.  
  
 In diesem Abschnitt  
  
 [Wie die Kultur eines Threads bestimmt wird](#ThreadCulture)   
 [Die aktuelle Kultur](#Getting)   
 [Explizites Festlegen der CurrentCulture-Eigenschaft](#ExplicitSetting)   
 [Die aktuelle Kultur und Benutzer Überschreibungen](#Overrides)   
 [Culture-und Windows-apps](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Bestimmen der Kultur eines Threads  
 Wenn ein Thread gestartet wird, wird seine Kultur anfänglich wie folgt bestimmt:  
  
-   Durch Abrufen der Kultur, die von der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft in der Anwendungsdomäne angegeben wird, in der der Thread ausgeführt wird, wenn der Eigenschafts Wert nicht `null`ist.  
  
-   Wenn es sich bei dem Thread um einen Thread Pool Thread handelt, der einen aufgabenbasierten asynchronen Vorgang ausführt und die APP auf die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder eine höhere Version des .NET Framework abzielt, wird die Kultur durch die Kultur des aufrufenden Threads bestimmt.  Im folgenden Beispiel wird die aktuelle Kultur in Portugiesisch (Brasilien) geändert, und es werden sechs Aufgaben gestartet, von denen jede die Thread-ID, ihre Task-ID und die aktuelle Kultur anzeigt. Jede der Tasks (und Threads) hat die Kultur des aufrufenden Threads geerbt.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" im Thema <xref:System.Globalization.CultureInfo>.  
  
-   Durch Aufrufen der Windows `GetUserDefaultLocaleName`-Funktion.  
  
 Beachten Sie Folgendes: Wenn Sie eine bestimmte Kultur festlegen, die sich von der vom System installierten Kultur oder der bevorzugten Kultur des Benutzers unterscheidet, und die Anwendung mehrere Threads startet, ist die aktuelle Kultur dieser Threads die Kultur, die von der `GetUserDefaultLocaleName` Funktion zurückgegeben wird, es sei denn, Sie weisen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft in der Anwendungsdomäne, in der der Thread ausgeführt wird, eine Kultur zu.  
  
 Weitere Informationen zur Bestimmung der Kultur eines Threads finden Sie im Abschnitt "Kultur und Threads" auf der <xref:System.Globalization.CultureInfo>-Referenzseite.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Die aktuelle Kultur wird erhalten.  
 Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft ist eine Einstellung pro Thread. Das heißt, dass jeder Thread seine eigene Kultur aufweisen kann. Sie erhalten die Kultur des aktuellen Threads, indem Sie den Wert der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft abrufen, wie im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Sie können auch den Wert der Kultur des aktuellen Threads aus der <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType>-Eigenschaft abrufen.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Explizites Festlegen der CurrentCulture-Eigenschaft  
 Wenn Sie mit dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)]in die Kultur wechseln, die von einem vorhandenen Thread verwendet wird, legen Sie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft auf die neue Kulturfest. Wenn Sie die Kultur eines Threads auf diese Weise explizit ändern, bleibt diese Änderung erhalten, wenn der Thread Anwendungs Domänen Grenzen überschreitet. Im folgenden Beispiel wird die aktuelle Thread Kultur in Niederländisch (Niederlande) geändert. Es zeigt auch, dass die aktuelle Kultur, wenn der aktuelle Thread Anwendungs Domänen Grenzen überschreitet, unverändert bleibt.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Um die Kultur mithilfe der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft zu ändern, ist eine <xref:System.Security.Permissions.SecurityPermission> Berechtigung mit dem <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> Wert erforderlich. Das Manipulieren von Threads ist aufgrund des mit Threads verbundenen Sicherheitszustands gefährlich. Daher sollte diese Berechtigung nur an vertrauenswürdigen Code und dann nur bei Bedarf erteilt werden. Sie können die Thread Kultur nicht in halb vertrauenswürdigem Code ändern.  
  
 Beginnend mit dem [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]können Sie die aktuelle Thread Kultur explizit entweder in eine bestimmte Kultur (z. b. Französisch (Kanada)) oder in eine neutrale Kultur (z. b. Französisch) ändern. Wenn ein <xref:System.Globalization.CultureInfo> Objekt eine neutrale Kultur darstellt, spiegeln die Werte <xref:System.Globalization.CultureInfo> Eigenschaften wie <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>und <xref:System.Globalization.CultureInfo.TextInfo%2A> die spezifische Kultur wider, die der neutralen Kultur zugeordnet ist. Beispielsweise ist die dominierende Kultur der englischen neutralen Kultur Englisch (USA); die dominierende Kultur der deutschen Kultur ist Deutsch (Deutschland). Das folgende Beispiel veranschaulicht den Unterschied bei der Formatierung, wenn die aktuelle Kultur auf eine bestimmte Kultur, Französisch (Kanada) und eine neutrale Kultur (Französisch) festgelegt ist.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Sie können auch die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>-Eigenschaft zusammen mit der <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType>-Eigenschaft verwenden, um die <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft einer ASP.NET-Anwendung auf die bevorzugte Kultur des Benutzers festzulegen, wie im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>Die aktuelle Kultur und Benutzer Überschreibungen  
 Windows ermöglicht Benutzern das Überschreiben der Standardeigenschaftswerte des <xref:System.Globalization.CultureInfo> Objekts und der zugehörigen Objekte mithilfe von Regions **-und Sprachoptionen** in der Systemsteuerung. Das <xref:System.Globalization.CultureInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft zurückgegeben wird, reflektiert diese Benutzer Überschreibungen in den folgenden Fällen:  
  
-   , Wenn die aktuelle Thread Kultur implizit von der Windows `GetUserDefaultLocaleName`-Funktion festgelegt wird.  
  
-   , Wenn die aktuelle Thread Kultur, die durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft definiert ist, der aktuellen Windows-System Kultur entspricht.  
  
-   , Wenn die aktuelle Thread Kultur explizit auf eine Kulturfest gelegt wird, die von der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>-Methode zurückgegeben wird, und diese Kultur der aktuellen Windows-System Kultur entspricht.  
  
-   , Wenn die aktuelle Thread Kultur explizit auf eine Kulturfest gelegt wird, die vom <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>-Konstruktor instanziiert wird, und diese Kultur der aktuellen Windows-System Kultur entspricht.  
  
 In einigen Fällen, insbesondere bei Server Anwendungen, ist das Festlegen der aktuellen Kultur auf ein <xref:System.Globalization.CultureInfo> Objekt, das Benutzer Überschreibungen widerspiegelt, möglicherweise nicht erwünscht. Stattdessen können Sie die aktuelle Thread Kultur auf eine <xref:System.Globalization.CultureInfo> Objekt festlegen, das keine Benutzer Überschreibungen auf folgende Weise widerspiegelt:  
  
-   Durch Aufrufen des <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>-Konstruktors mit dem Wert `false` für das `useUserOverride`-Argument.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>-Methode, die ein zwischengespeichertes Schreib geschütztes <xref:System.Globalization.CultureInfo>-Objekt zurückgibt.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Die aktuelle Kultur und UWP-apps  
 In universelle Windows-Plattform-Apps (UWP) lautet die Eigenschaft <xref:System.Globalization.CultureInfo.CurrentCulture%2A> mit Lese-/Schreibzugriff, ebenso wie Sie in .NET Framework und .net Core-apps. Sie können Sie verwenden, um die aktuelle Kultur zu erhalten und festzulegen. UWP-apps unterscheiden sich jedoch nicht zwischen der aktuellen Kultur und der aktuellen Benutzeroberflächen Kultur. Die Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> werden dem ersten Wert in der [Windows. applicationmodel. resources. Core. ResourceManager. DefaultContext. Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Auflistung zugeordnet.  

In .NET Framework und .net Core-Apps ist die aktuelle Kultur eine Thread spezifische Einstellung, und die <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft gibt die Kultur des aktuellen Threads an. In UWP-apps wird die aktuelle Kultur der [Windows. applicationmodel. resources. Core. ResourceManager. DefaultContext. Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Eigenschaft zugeordnet, bei der es sich um eine globale Einstellung handelt. Wenn Sie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft festlegen, wird die Kultur der gesamten APP geändert. die Kultur kann nicht pro Thread festgelegt werden.
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> des aktuellen Threads geändert werden.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentUICulture As CultureInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CurrentUICulture" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die aktuelle Benutzeroberfläche darstellt, mit deren Hilfe der Ressourcen-Manager kulturabhängige Ressourcen zur Laufzeit sucht, oder setzt dieses Objekt.</summary>
        <value>Die aktuelle Kultur, mit deren Hilfe der Ressourcen-Manager zur Laufzeit kulturabhängige Ressourcen sucht, oder legt diese fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Benutzeroberflächen Kultur ist eine Thread spezifische Eigenschaft. Das heißt, jeder Thread verfügt über eine eigene aktuelle Benutzeroberflächen Kultur. Diese Eigenschaft entspricht dem Abrufen von oder, beginnend mit dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)], wobei das <xref:System.Globalization.CultureInfo>-Objekt festgelegt wird, das der `System.Threading.Thread.CurrentThread.CurrentUICulture`-Eigenschaft zugewiesen ist. Wenn ein Thread gestartet wird, wird die Benutzeroberflächen Kultur anfänglich wie folgt bestimmt:  
  
-   Durch Abrufen der Kultur, die von der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>-Eigenschaft in der Anwendungsdomäne angegeben wird, in der der Thread ausgeführt wird, wenn der Eigenschafts Wert nicht `null`ist.  
  
-   Wenn es sich bei dem Thread um einen Thread Pool Thread handelt, der einen aufgabenbasierten asynchronen Vorgang ausführt und die APP auf die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder eine höhere Version des .NET Framework abzielt, wird die Benutzeroberflächen Kultur durch die Benutzeroberflächen Kultur des aufrufenden Threads bestimmt.  Im folgenden Beispiel wird die aktuelle Benutzeroberflächen Kultur in Portugiesisch (Brasilien) geändert, und es werden sechs Aufgaben gestartet, von denen jede die Thread-ID, ihre Task-ID und die aktuelle Benutzeroberflächen Kultur anzeigt. Alle Tasks (und Threads) haben die Benutzeroberflächen Kultur des aufrufenden Threads geerbt.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" im Thema <xref:System.Globalization.CultureInfo>.  
  
-   Durch Aufrufen der Windows `GetUserDefaultUILanguage`-Funktion.  
  
> [!NOTE]
>  Im [!INCLUDE[Compact](~/includes/compact-md.md)]ist die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>-Eigenschaft schreibgeschützt. Die aktuelle Benutzeroberflächen Kultur wird durch die regionalen Einstellungen des Systems bestimmt und kann nicht Programm gesteuert geändert werden.  
  
 Legen Sie die Eigenschaft <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> auf die neue Kulturfest, beginnend mit dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)], um die von einem Thread verwendete Benutzeroberflächen Kultur zu ändern. Wenn Sie die Benutzeroberflächen Kultur eines Threads auf diese Weise explizit ändern, bleibt diese Änderung erhalten, wenn der Thread Anwendungs Domänen Grenzen überschreitet.  
  
> [!NOTE]
>  In der .NET Framework 4.5.2 und früheren Versionen ist die Eigenschaft <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> schreibgeschützt.  Das heißt, Sie können den Eigenschafts Wert abrufen, ihn aber nicht festlegen. Um die aktuelle Benutzeroberflächen Kultur zu ändern, weisen Sie das <xref:System.Globalization.CultureInfo>-Objekt, das die neue Benutzeroberflächen Kultur darstellt, der `Thread.CurrentThread.CurrentUICulture`-Eigenschaft zu. Beginnend mit dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)]ist die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft Lese-/Schreibzugriff. Sie können den Wert der Eigenschaft festlegen und abrufen. Wenn Sie den Eigenschafts Wert auf ein <xref:System.Globalization.CultureInfo> Objekt festlegen, das eine neue Kultur darstellt, ändert sich auch der Wert der `Thread.CurrentThread.CurrentCulture`-Eigenschaft.  
  
 In diesem Abschnitt  
  
 [Die aktuelle Benutzeroberflächen Kultur](#Getting) wird   
 [Explizites Festlegen der aktuellen Benutzeroberflächen Kultur](#Explicit)   
 [Implizites Festlegen der aktuellen Benutzeroberflächen Kultur](#Implicit)   
 [Sicherheitsüberlegungen](#Security)   
 [Die aktuelle Benutzeroberflächen Kultur und Windows-apps](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Die aktuelle Benutzeroberflächen Kultur wird erhalten.  
 Die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft ist eine Einstellung pro Thread. Das heißt, jeder Thread kann über eine eigene Benutzeroberflächen Kultur verfügen. Sie erhalten die Benutzeroberflächen Kultur des aktuellen Threads, indem Sie den Wert der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft abrufen, wie im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Sie können auch den Wert der Benutzeroberflächen Kultur des aktuellen Threads aus der <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft abrufen.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Explizites Festlegen der aktuellen Benutzeroberflächen Kultur  
 Beginnend mit dem [!INCLUDE[net_v46](~/includes/net-v46-md.md)]können Sie die aktuelle Benutzeroberflächen Kultur ändern, indem Sie der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft ein <xref:System.Globalization.CultureInfo> Objekt zuweisen, das die neue Kultur darstellt. Die aktuelle Benutzeroberflächen Kultur kann entweder auf eine bestimmte Kultur (z. b. "en-US" oder "de-de") oder auf eine neutrale Kultur (z. b. en oder de) festgelegt werden. Im folgenden Beispiel wird die aktuelle Benutzeroberflächen Kultur auf "fr-FR" oder "Französisch" (Frankreich) festgelegt.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 In einer Multithreadanwendung können Sie die Benutzeroberflächen Kultur eines Threads explizit festlegen, indem Sie ein <xref:System.Globalization.CultureInfo> Objekt, das diese Kultur darstellt, der <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft des Threads zuweisen. Wenn der Thread, dessen Kultur Sie festlegen möchten, der aktuelle Thread ist, können Sie die neue Kultur der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft zuweisen. Wenn die Benutzeroberflächen Kultur eines Threads explizit festgelegt wird, behält dieser Thread dieselbe Kultur bei, selbst wenn er Anwendungs Domänen Grenzen überschreitet und Code in einer anderen Anwendungsdomäne ausführt.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Implizites Festlegen der aktuellen Benutzeroberflächen Kultur  
 Wenn ein Thread, einschließlich des Hauptanwendungs Threads, erstmalig erstellt wird, wird die aktuelle Benutzeroberflächen Kultur standardmäßig wie folgt festgelegt:  
  
-   Mit der Kultur, die von der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>-Eigenschaft für die aktuelle Anwendungsdomäne definiert wird, wenn der Eigenschafts Wert nicht `null`ist.  
  
-   Mithilfe der Standard Kultur des Systems. Auf Systemen, die das Windows-Betriebssystem verwenden, ruft der Common Language Runtime die Windows `GetUserDefaultUILanguage`-Funktion auf, um die aktuelle Benutzeroberflächen Kulturfest zulegen. `GetUserDefaultUILanguage` gibt die vom Benutzer festgelegte Standard Kultur der Benutzeroberfläche zurück. Wenn der Benutzer keine Standardbenutzer Oberflächen Sprache festgelegt hat, wird die ursprünglich auf dem System installierte Kultur zurückgegeben.  
  
 Wenn der Thread Anwendungsgrenzen überschreitet und Code in einer anderen Anwendungsdomäne ausführt, wird seine Kultur auf die gleiche Weise wie bei einem neu erstellten Thread bestimmt.  
  
 Beachten Sie Folgendes: Wenn Sie eine bestimmte Benutzeroberflächen Kultur festlegen, die sich von der vom System installierten Benutzeroberflächen Kultur oder der bevorzugten Benutzeroberflächen Kultur des Benutzers unterscheidet, und die Anwendung mehrere Threads startet, ist die aktuelle Benutzeroberflächen Kultur dieser Threads die Kultur, die von der `GetUserDefaultUILanguage` Funktion zurückgegeben wird, es sei denn, Sie weisen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft in der Anwendungsdomäne, in der der Thread ausgeführt  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Zum Ändern der Kultur des aktuellen Threads ist eine <xref:System.Security.Permissions.SecurityPermission> Berechtigung mit dem festgelegten <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> Wert erforderlich.  
  
> [!CAUTION]
>  Das Manipulieren von Threads ist aufgrund des mit Threads verbundenen Sicherheitszustands gefährlich. Daher sollte diese Berechtigung nur an vertrauenswürdigen Code und dann nur bei Bedarf erteilt werden. Sie können die Thread Kultur nicht in halb vertrauenswürdigem Code ändern.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>Die aktuelle Benutzeroberflächen Kultur und UWP-apps  
 
In universelle Windows-Plattform-Apps (UWP) lautet die Eigenschaft <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mit Lese-/Schreibzugriff, ebenso wie Sie in .NET Framework und .net Core-apps. Sie können Sie verwenden, um die aktuelle Kultur zu erhalten und festzulegen. UWP-apps unterscheiden sich jedoch nicht zwischen der aktuellen Kultur und der aktuellen Benutzeroberflächen Kultur. Die Eigenschaften <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> werden dem ersten Wert in der [Windows. applicationmodel. resources. Core. ResourceManager. DefaultContext. Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Auflistung zugeordnet.

In .NET Framework-und .net Core-Apps ist die aktuelle Benutzeroberflächen Kultur eine Thread spezifische Einstellung, und die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>-Eigenschaft reflektiert die Benutzeroberflächen Kultur des aktuellen Threads. In UWP-apps wird die aktuelle Kultur der [Windows. applicationmodel. resources. Core. ResourceManager. DefaultContext. Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Eigenschaft zugeordnet, bei der es sich um eine globale Einstellung handelt. Wenn Sie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A>-Eigenschaft festlegen, wird die Kultur der gesamten APP geändert. die Kultur kann nicht pro Thread festgelegt werden.    
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> des aktuellen Threads geändert werden.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft ist auf einen Kulturnamen festgelegt, der nicht zum Suchen einer Ressourcendatei verwendet werden kann. Ressourcendateinamen dürfen nur Buchstaben, Zahlen, Bindestriche oder Unterstriche enthalten.</exception>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.DateTimeFormatInfo" /> ab, die das für die Kultur spezifische Format zum Anzeigen von Datumsangaben und Uhrzeiten definiert, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.DateTimeFormatInfo" />, die das für die Kultur spezifische Format zum Anzeigen von Datumsangaben und Uhrzeiten definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true` und die angegebene Kultur mit der aktuellen Windows-Kultur übereinstimmt, verwendet der <xref:System.Globalization.CultureInfo> diese außer Kraft setzungen, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Der Wert der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft und der-Eigenschaft <xref:System.Globalization.CultureInfo.NumberFormat%2A> wird erst berechnet, wenn die Anwendung auf die-Eigenschaft zugreift. Wenn der Benutzer die aktuelle Kultur in eine neue Kultur ändern kann, während die Anwendung ausgeführt wird, und dann auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> oder <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft zugreift, ruft die Anwendung die Standardwerte für die neue Kultur anstelle der außer Kraft setzungen für die ursprüngliche Kultur ab. Um die außer Kraft setzungen für die ursprüngliche aktuelle Kultur beizubehalten, sollte die Anwendung auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften zugreifen, bevor die aktuelle Kultur geändert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, dass CultureInfo. Clone auch die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> der <xref:System.Globalization.CultureInfo>zugeordneten Instanzen klont.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf NULL festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />-Eigenschaft oder eine der <see cref="T:System.Globalization.DateTimeFormatInfo" />-Eigenschaften wird festgelegt, und die <see cref="T:System.Globalization.CultureInfo" /> ist schreibgeschützt.</exception>
        <block subset="none" type="usage"><para>Wenn <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> der <see cref="T:System.Globalization.TaiwanCalendar" /> ist, aber der <see cref="P:System.Threading.Thread.CurrentCulture" /> nicht auf Chinesisch (Taiwan) mit dem Namen zh-tw festgelegt ist, wird <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />und <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> eine leere Zeichenfolge ("") zurückgeben.</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardkultur für Threads in der aktuellen Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die Standardkultur für Threads in der aktuellen Anwendungsdomäne oder <see langword="null" />, wenn die aktuelle Systemkultur die standardmäßige Threadkultur in der Anwendungsdomäne ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und früheren Versionen ist die Kultur aller Threads standardmäßig auf die Windows-System Kulturfest gelegt. Bei Anwendungen, deren aktuelle Kultur von der Standardsystem Kultur abweicht, ist dieses Verhalten oft nicht erwünscht. Im [!INCLUDE[net_v45](~/includes/net-v45-md.md)]ermöglicht die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft einer Anwendung, die Standard Kultur aller Threads in einer Anwendungsdomäne zu definieren.  
  
> [!IMPORTANT]
>  Wenn Sie die Kultur vorhandener Threads, die in einer Anwendungsdomäne ausgeführt werden, nicht explizit festgelegt haben, wird durch das Festlegen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft auch die Kultur dieser Threads geändert. Wenn diese Threads jedoch in einer anderen Anwendungsdomäne ausgeführt werden, wird ihre Kultur durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft in dieser Anwendungsdomäne oder, wenn kein Standardwert definiert ist, von der Standardsystem Kultur definiert. Aus diesem Grund wird empfohlen, die Kultur des Hauptanwendungs Threads stets explizit festzulegen und sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft zu verlassen, um die Kultur des Hauptanwendungs Threads zu definieren.  
  
 Wenn Sie nicht explizit festgelegt wird, wird der Wert der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>-Eigenschaft `null`, und die Kultur der Threads in einer Anwendungsdomäne, denen keine explizite Kultur zugewiesen wurde, wird durch die standardmäßige Windows-System Kultur definiert.  
  
 Weitere Informationen zu Kulturen, Threads und Anwendungs Domänen finden Sie in den Abschnitten "Kultur und Threads" und "Kultur und Anwendungs Domänen" auf der <xref:System.Globalization.CultureInfo>-Referenzseite.  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Standardverhalten der .NET Framework beim Definieren der aktuellen Kultur eines neuen Threads veranschaulicht. Beim Start werden im Beispiel die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Französisch (Frankreich) auf allen Systemen festgelegt, mit Ausnahme derjenigen, bei denen die Standardsystem Kultur bereits Französisch (Frankreich) ist. Wenn die Standardsystem Kultur bereits Französisch (Frankreich) ist, legt der Code die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Englisch (USA) fest. Anschließend wird die `DisplayRandomNumbers`-Routine aufgerufen, die drei Zufallszahlen generiert und Sie als Währungswerte anzeigt. Anschließend wird ein neuer Thread erstellt, in dem auch die `DisplayRandomNumbers` Routine ausgeführt wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Wie die Ausgabe des Beispiels zeigt, zeigt der Haupt Thread, wenn das Beispiel auf einem Computer ausgeführt wird, dessen System Kultur Englisch (USA) ist, seine Währungswerte mithilfe der Formatierungs Konventionen der Kultur Französisch (Frankreich). Da die Kultur des Arbeits Threads jedoch von der aktuellen Windows-System Kultur abgeleitet ist und nicht von der aktuellen Kultur der Anwendung, zeigt der Arbeits Thread seine Währungswerte mithilfe der Formatierungs Konventionen der Kultur "Englisch (USA)" an.  
  
 Im folgenden Beispiel werden die Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> verwendet, um die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur eines neuen Anwendungs Threads zu definieren. Beim Start werden im Beispiel die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Französisch (Frankreich) auf allen Systemen festgelegt, mit Ausnahme derjenigen, bei denen die Standardsystem Kultur bereits Französisch (Frankreich) ist. Wenn die Standardsystem Kultur bereits Französisch (Frankreich) ist, wird die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Englisch (USA) festgelegt. Anschließend wird die `DisplayRandomNumbers`-Routine aufgerufen, die drei Zufallszahlen generiert und Sie als Währungswerte anzeigt. Anschließend wird ein neuer Thread erstellt, in dem auch die `DisplayRandomNumbers` Routine ausgeführt wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Wie die Ausgabe des Beispiels zeigt, wenn das Beispiel auf einem Computer ausgeführt wird, dessen System Kultur Englisch (USA) ist, zeigen sowohl der Haupt Thread als auch der Arbeits Thread ihre Währungswerte mithilfe der Formatierungs Konventionen der Kultur Französisch (Frankreich) an.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die standardmäßige Benutzeroberflächenkultur für Threads in der aktuellen Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die Standardkultur der Benutzeroberfläche für Threads in der aktuellen Anwendungsdomäne oder <see langword="null" />, wenn die aktuelle Systemkultur der Benutzeroberfläche die standardmäßige Threadkultur der Benutzeroberfläche in der Anwendungsdomäne ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und früheren Versionen wird die Benutzeroberflächen Kultur aller Threads standardmäßig auf die Windows-System Kulturfest gelegt. Bei Anwendungen, deren aktuelle Benutzeroberflächen Kultur von der Standardsystem Kultur abweicht, ist dieses Verhalten oft nicht erwünscht. In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]können Sie mit der Eigenschaft <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> die standardmäßige Benutzeroberflächen Kultur aller Threads in einer Anwendungsdomäne definieren.  
  
> [!IMPORTANT]
>  Wenn Sie die UI-Kultur vorhandener Threads, die in einer Anwendungsdomäne ausgeführt werden, nicht explizit festgelegt haben, wird durch das Festlegen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>-Eigenschaft auch die Kultur dieser Threads geändert. Wenn diese Threads jedoch in einer anderen Anwendungsdomäne ausgeführt werden, wird ihre Kultur durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>-Eigenschaft in dieser Anwendungsdomäne oder, wenn kein Standardwert definiert ist, von der Standardsystem Kultur definiert. Aus diesem Grund wird empfohlen, die Kultur des Hauptanwendungs Threads stets explizit festzulegen und sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>-Eigenschaft zu verlassen, um die Kultur des Hauptanwendungs Threads zu definieren.  
  
 Sofern Sie nicht explizit festgelegt wird, wird der Wert der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>-Eigenschaft `null`, und die aktuelle Kultur aller Threads in einer Anwendungsdomäne, denen keine explizite Kultur zugewiesen wurde, wird durch die standardmäßige Windows-System Kultur definiert.  
  
 Weitere Informationen zu Kulturen, Threads und Anwendungs Domänen finden Sie in den Abschnitten "Kultur und Threads" und "Kultur und Anwendungs Domänen" auf der <xref:System.Globalization.CultureInfo>-Referenzseite.  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Standardverhalten der .NET Framework beim Definieren der aktuellen Kultur eines neuen Threads veranschaulicht. Er verwendet englische und russische Sprachressourcen. Die folgende Textdatei mit dem Namen "greetingstrings. txt" enthält die englischsprachigen Ressourcen:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Sie wird in eine binäre RESOURCES-Datei namens greetingstrings. resources kompiliert, indem der [Ressourcen Datei-Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) mit dem folgenden Befehl verwendet wird.  
  
```console  
resgen greetingstrings.txt  
```  
  
 Die folgende Textdatei mit dem Namen GreetingStrings.ru-ru. txt enthält die russischsprachigen Ressourcen:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Sie wird in eine binäre RESOURCES-Datei mit dem Namen GreetingStrings.ru-ru. resources kompiliert, indem der [Ressourcen Datei-Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) mit dem folgenden Befehl verwendet wird.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 Der unten gezeigte Anwendungscode befindet sich in einer Datei namens "example1". vb oder example1.cs. Sie wird mit dem folgenden Befehl für den Visual Basic Compiler in eine ausführbare Datei kompiliert:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Für den C# Compiler ist der Befehl ähnlich:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Dadurch wird eine Assembly erstellt, die den ausführbaren Code des Beispiels zusammen mit den Ressourcen für die Fall backkultur enthält. Sie können auch den [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) verwenden, um die Ressourcen Datei für die Kultur Russisch (Russische Föderation) mit dem folgenden Befehl zu erstellen:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Beim Start legt das Beispiel die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Russisch (Russische Föderation) auf allen Systemen fest, mit Ausnahme derjenigen, auf denen die Standardsystem Kultur bereits Russisch (Russische Föderation) ist. Wenn die Standardsystem Kultur bereits Russisch (Russische Föderation) ist, legt der Code die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Englisch (USA) fest. Anschließend wird die `ShowGreeting`-Routine aufgerufen, die beim ersten Aufrufen eine einfache Zeichenfolge und bei nachfolgenden Methoden aufrufen eine etwas andere Zeichenfolge anzeigt. Anschließend wird ein neuer Thread erstellt, in dem auch die `ShowGreeting` Routine ausgeführt wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Wie die Ausgabe des Beispiels zeigt, zeigt der Haupt Thread, wenn das Beispiel auf einem Computer ausgeführt wird, dessen System Kultur Englisch (USA) ist, die ursprüngliche Zeichenfolge in Russisch an. Da die Kultur des Arbeits Threads jedoch von der aktuellen Windows-System Kultur abgeleitet ist und nicht von der aktuellen Kultur der Anwendung, zeigt der Arbeits Thread seine Zeichenfolge in englischer Sprache an.  
  
 Im folgenden Beispiel werden die Eigenschaften <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> verwendet, um die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur eines neuen Anwendungs Threads zu definieren.  
  
 Im Beispiel werden dieselben Ressourcen Dateien wie im vorherigen Beispiel verwendet. Die Befehle zum Kompilieren und zum Einbetten der lokalisierten russischen Sprachressourcen in eine Satellitenassembly sind ebenfalls identisch, mit dem Unterschied, dass sich der Name der ausführbaren Assembly ändert.  
  
 Beim Start legt das Beispiel die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Russisch (Russische Föderation) auf allen Systemen fest, mit Ausnahme derjenigen, auf denen die Standardsystem Kultur bereits Russisch (Russische Föderation) ist. Wenn die Standardsystem Kultur bereits Russisch (Russische Föderation) ist, werden die aktuelle Kultur und die aktuelle Benutzeroberflächen Kultur auf Englisch (USA) festgelegt. Anschließend wird die `ShowGreeting`-Routine aufgerufen, die beim ersten Aufrufen eine einfache Zeichenfolge und bei nachfolgenden Methoden aufrufen eine etwas andere Zeichenfolge anzeigt. Anschließend wird ein neuer Thread erstellt, in dem auch die `ShowGreeting` Routine ausgeführt wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Wie die Ausgabe des Beispiels zeigt, werden beim Ausführen des Beispiels auf einem Computer, dessen System Kultur Englisch (USA) ist, sowohl der Haupt Thread als auch der Arbeits Thread ihre Zeichen folgen in der russischen Sprache anzeigen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Bei einem SET-Vorgang ist der Eigenschaftswert <see cref="P:System.Globalization.CultureInfo.Name" /> ungültig.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständig lokalisierten Kulturnamen ab.</summary>
        <value>Der vollständig lokalisierte Kulturname im Format *languagefull* [*country/regionfull*], wobei *languagefull* der vollständige Name der Sprache ist und *country/regionfull* der vollständige Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt den lokalisierten Namen des <xref:System.Globalization.CultureInfo> Objekts dar.  
  
 Kultur Namen können aufgrund von Skript-oder Formatierungs Konventionen variieren. Verwenden Sie den zurückgegebenen Namen für die Anzeige, und versuchen Sie nicht, Sie zu analysieren.  
  
 Wenn eine benutzerdefinierte Kultur mithilfe der <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse erstellt wird, wird die <xref:System.Globalization.CultureInfo.DisplayName%2A>-Eigenschaft mit dem Wert der <xref:System.Globalization.CultureInfo.NativeName%2A>-Eigenschaft initialisiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die Kulturen zh-CHS und zh-CHT mit den Kultur bezeichgern 0x0004 und 0x7C04 an. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format *languagefull* [*country/regionfull*] auf Englisch ab.</summary>
        <value>Der Kulturname im Format *languagefull* [*country/regionfull*] auf Englisch, wobei *languagefull* der vollständige Name der Sprache ist und *country/regionfull* der vollständige Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beispielsweise ist die <xref:System.Globalization.CultureInfo.EnglishName%2A> für den spezifischen Kultur Namen "en-US" "English (USA)".  
  
 Der Wert dieser Eigenschaft ist unabhängig von der Sprachversion der .NET Framework identisch.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Im Beispiel werden die Namen der älteren zh-CHS-und zh-CHT-Kultur mit den Kultur Bezeichner"0x0004" und "0x7C04" angezeigt. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das mit der aktuellen <see cref="T:System.Globalization.CultureInfo" /> verglichen werden soll.</param>
        <summary>Bestimmt, ob das angegebene Objekt dieselbe Kultur aufweist wie die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns><see langword="true" />, wenn <paramref name="value" /> dieselbe Kultur aufweist wie die aktuelle <see cref="T:System.Globalization.CultureInfo" />, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Zwei <xref:System.Globalization.CultureInfo> Objekte werden als gleich betrachtet, wenn deren <xref:System.Globalization.CultureInfo.Name%2A> und <xref:System.Globalization.CultureInfo.CompareInfo%2A> Eigenschaften gleich sind.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft im Falle einer ungeeigneten Standard-GUI-Kultur eine alternative Kultur der Benutzeroberfläche für Konsolenanwendungen auf.</summary>
        <returns>Eine alternative Kultur, die zum Lesen und Anzeigen von Texten auf der Konsole verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprachen wie Arabisch, Hebräisch, Urdu und Syriac basieren auf bidirektionalem Text. Windows-Anwendungen, die über eine grafische Benutzeroberfläche verfügen, unterstützen bidirektionale Sprachen. Allerdings bieten Konsolen Anwendungen, die die Text Benutzeroberfläche der Betriebssystem Konsole verwenden, keine bidirektionale Unterstützung. Wenn Sie also eine Konsolenanwendung auf Arabisch oder Hebräisch lokalisieren, zeigt Ihre Anwendung nicht lesbaren Text auf dem Konsolenbildschirm an.  
  
 Die Kultur der Benutzeroberfläche gibt die Ressourcen an, die eine Anwendung benötigt, um Benutzereingaben und-Ausgaben zu unterstützen, und ist standardmäßig identisch mit der Kultur des Betriebssystems. Die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>-Eigenschaft gibt beispielsweise eine arabische Kultur für ein Arabisch-Betriebssystem zurück. Verwenden Sie die <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A>-Methode, um eine Kultur abzurufen, die für die Benutzeroberfläche einer Konsolenanwendung geeignet ist. Nachdem die Anwendung die Kultur der Fall Back Benutzeroberfläche abgerufen hat, sollte Sie die Kultur der aktuellen Benutzeroberflächen Kultur des aktuellen Threads zuweisen. Weitere Informationen finden Sie im Abschnitt "explizites Festlegen der aktuellen UI-Kultur" der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>-Eigenschaft.  
  
 Im folgenden finden Sie vordefinierte Kulturen mit einem anderen Kultur Namen der Fall Back Benutzeroberfläche aus dem vordefinierten Kultur Namen.  
  
|Vordefinierte Kultur|Kulturname|Kultur Name der Fallback-Benutzeroberfläche|  
|------------------------|------------------|------------------------------------------|  
|Amharisch|Uhr|en-US|  
|Amharisch (Äthiopien)|am-et|en-US|  
|(neutral Arabisch)|ar|en-US|  
|Arabisch (Vereinigte Arabische Emirate)|ar-AE|en-US|  
|Arabisch (Bahrain)|ar-BH|en-US|  
|Arabisch (Algerien)|ar-DZ|fr-FR|  
|Arabisch (Ägypten)|ar-EG|en-US|  
|Arabisch (Irak)|AR-IQ|en-US|  
|Arabisch (Jordanien)|ar-JO|en-US|  
|Arabisch (Kuwait)|ar-KW|en-US|  
|Arabisch (Libanon)|AR-lb|en-US|  
|Arabisch (Libyen)|AR-ly|en-US|  
|Arabisch (Marokko)|AR-MA|fr-FR|  
|Arabisch (Oman)|AR-OM|en-US|  
|Arabisch (Katar)|ar-QA|en-US|  
|Arabisch (Saudi-Arabien)|ar-SA|en-US|  
|Arabisch (Syrien)|ar-SY|en-US|  
|Arabisch (Tunesien)|AR-TN|fr-FR|  
|Arabisch (Jemen)|AR-Ye|en-US|  
|Assamesisch|as|en-US|  
|Assamisch (Indien)|as-in|en-US|  
|Bengalisch|bn|en-US|  
|Bangla (Bangladesch)|bn-BD|en-US|  
|Bangla (Indien)|bn-IN|en-US|  
|Tibetisch|ur|en-US|  
|Tibetisch (VRC)|bo-CN|en-US|  
|Divehi|DV|en-US|  
|Divehi (Indien)|dv-MV|en-US|  
|Persisch|fa|en-US|  
|Persisch (Iran)|fa-IR|en-US|  
|Gujarati|gu|en-US|  
|Gujarati (Indien)|gu-IN|en-US|  
|Hebräisch|er|en-US|  
|Hebräisch (Israel)|he-IL|en-US|  
|Hindi|hi|en-US|  
|Hindi (Indien)|hi-IN|en-US|  
|Yi|ii|en-US|  
|Yi (VRC)|ii-CN|en-US|  
|Inukitut-Syllabics|IU-Dosen|en-US|  
|Inukitut-Syllabics (Kanada)|iu-Cans-CA|en-US|  
|Khmer|km|en-US|  
|Khmer (Kambodscha)|km-KH|en-US|  
|Kannada|kn|en-US|  
|Kannada (Indien)|kn-IN|en-US|  
|Konkani|ZZ|en-US|  
|Konkani (Indien)|Kok-in|en-US|  
|Laotisch|Siehe|en-US|  
|Laos (Laos P.D.R.)|Lo-La|en-US|  
|Malayalam|ml|en-US|  
|Malayalam (Indien)|ml-IN|en-US|  
|Mohawk|-|en-US|  
|Mohawk (Kanada)|-Zertifizierungsstelle|en-US|  
|Marathi|mr|en-US|  
|Marathi (Indien)|mr-IN|en-US|  
|Nepalesisch|ne|en-US|  
|Nepalesisch (Nepal)|ne-np|en-US|  
|Norwegisch|Nein|nb-NO|  
|Odiya|oder|en-US|  
|Odiya (Indien)|or-in|en-US|  
|Pandschabi|pa|en-US|  
|Punjabi (Indien)|pa-IN|en-US|  
|Dari|PRS|en-US|  
|Dari (Afghanistan)|prs-AF|en-US|  
|Paschtu|ps|en-US|  
|Paschtu (Afghanistan)|ps-AF|en-US|  
|Sanskrit|sa|en-US|  
|Sanskrit (Indien)|SA-in|en-US|  
|Singhalesisch|si|en-US|  
|Sinhala (Sri Lanka)|Si-LK|en-US|  
|Syrisch|SYR|en-US|  
|Syrisch (Syrien)|SYR-Sy|en-US|  
|Tamil|ta|en-US|  
|Tamil (Indien)|ta-IN|en-US|  
|Telugu|te|en-US|  
|Telugu (Indien)|te-IN|en-US|  
|Thai|th|en-US|  
|Thai (Thailand)|th-TH|en-US|  
|Uighur|speist|en-US|  
|Uighurisch (VRC)|ug-CN|en-US|  
|Urdu|ur|en-US|  
|Urdu (Pakistan)|ur-PK|en-US|  
|Vietnamesisch|Vi|en-US|  
|Vietnamesisch (Vietnam)|vi-VN|en-US|  
  
 Die Anwendung kann mit <xref:System.Globalization.CultureAndRegionInfoBuilder> einen Ersatz für eine Kultur erstellen, und diese Kultur kann eine andere Konsolen Fall backkultur Ihrer Wahl haben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Kultur der Fall Back Benutzeroberfläche angezeigt, die einem Kultur Objekt zugeordnet ist.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture">Ein Gebietsschemabezeichner (LCID).</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur mithilfe des angegebenen Kulturbezeichners ab.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es wird empfohlen, die Zeichen folgen Überladung dieser Methode (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>) zu verwenden, da Gebiets Schema Namen anstelle von LCIDs verwendet werden sollen. Bei benutzerdefinierten Gebiets Schemata ist der Gebiets Schema Name erforderlich.  
  
 Wenn `culture` der Gebiets Schema Bezeichner der aktuellen Kultur ist, spiegelt das zurückgegebene <xref:System.Globalization.CultureInfo>-Objekt keine Benutzer Überschreibungen wider.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt "Hinweise zu Aufrufern".</exception>
        <block subset="none" type="usage"><para>Der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> aus, wenn <paramref name="culture" /> kein gültiger Kultur Bezeichner ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="culture" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Kultur. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur mithilfe des angegebenen Kulturnamens ab.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kultur Namen auf Windows-Systemen finden Sie in der Spalte **sprach Kennzeichen** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Außerdem kann `name` ab Windows 10 ein beliebiges gültiges bcp-47-Sprachtag sein.  
  
 Die <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>-Methode ruft ein zwischengespeichertes <xref:System.Globalization.CultureInfo> Objekt ab, das schreibgeschützt ist. Sie bietet eine bessere Leistung als ein entsprechender aufrufskonstruktor <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType>.  
  
 Wenn `name` der Name der aktuellen Kultur ist, spiegelt das zurückgegebene <xref:System.Globalization.CultureInfo>-Objekt keine Benutzer Überschreibungen wider. Dadurch eignet sich die-Methode für Server Anwendungen oder-Tools, die nicht über ein echtes Benutzerkonto im System verfügen und mehrere Kulturen effizient laden müssen.  
  
 Wenn `name` <xref:System.String.Empty?displayProperty=nameWithType>ist, gibt die Methode die invariante Kultur zurück. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und früheren Versionen wird eine <see cref="T:System.ArgumentException" /> ausgelöst, wenn <paramref name="name" /> kein gültiger Kultur Name ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="name" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird und <paramref name="name" /> nicht der Name einer ergänzenden oder Ersatz Kultur ist, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, bool predefinedOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, bool predefinedOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, predefinedOnly As Boolean) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, bool predefinedOnly);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, predefinedOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="predefinedOnly" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="predefinedOnly">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="altName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Kultur. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <param name="altName">Der Name einer Kultur, die das <see cref="T:System.Globalization.TextInfo" />-Objekt und das <see cref="T:System.Globalization.CompareInfo" />-Objekt liefert, mit denen <paramref name="name" /> initialisiert wird. Bei <paramref name="altName" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur ab. Mit Parametern wird eine Kultur angegeben, die mit dem <see cref="T:System.Globalization.TextInfo" />-Objekt und dem <see cref="T:System.Globalization.CompareInfo" />-Objekt initialisiert wird, die wiederum von einer anderen Kultur angegeben werden.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kultur Namen auf Windows-Systemen finden Sie in der Spalte **sprach Kennzeichen** in der [Liste der von Windows unterstützten Sprachen/Regions Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Außerdem kann `name` ab Windows 10 ein beliebiges gültiges bcp-47-Sprachtag sein.  
  
 Die <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>-Methode ruft ein zwischengespeichertes Schreib geschütztes <xref:System.Globalization.CultureInfo>-Objekt ab. Sie bietet eine bessere Leistung als ein entsprechender aufrufsvorgang eines <xref:System.Globalization.CultureInfo.%23ctor%2A> Konstruktors. Die-Methode wird verwendet, um eine Kultur zu erstellen, die mit der vom `name`-Parameter angegebenen Kultur vergleichbar ist, jedoch mit unterschiedlichen Sortier-und Schreibregeln.  
  
 Wenn `name` oder `altName` der Name der aktuellen Kultur ist, werden die zurückgegebenen Objekte keine Benutzer Überschreibungen widerspiegeln. Wenn `name` <xref:System.String.Empty?displayProperty=nameWithType>ist, gibt die Methode die invariante Kultur zurück. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Eigenschaft. Wenn `altName` <xref:System.String.Empty?displayProperty=nameWithType>ist, verwendet die-Methode das Schriftsystem und die von der invarianten Kultur angegebenen Vergleichs Regeln.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> oder <paramref name="altName" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> oder <paramref name="altName" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und früheren Versionen wird eine <see cref="T:System.ArgumentException" /> ausgelöst, wenn <paramref name="name" /> oder <paramref name="altName" /> kein gültiger Kultur Name ist. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="name" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird und <paramref name="name" /> nicht der Name einer ergänzenden oder Ersatz Kultur ist, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme aus. Beginnend mit apps, die unter der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher ausgeführt werden, versucht die Methode, ein <see cref="T:System.Globalization.CultureInfo" /> Objekt abzurufen, dessen Bezeichner vom Betriebssystem <paramref name="name" /> wird. Wenn diese Kultur vom Betriebssystem nicht unterstützt wird und <paramref name="name" /> nicht der Name einer ergänzenden oder Ersatz Kultur ist, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Sprache gemäß dem Standard RFC 4646.</param>
        <summary>Veraltet. Ruft ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, dessen linguistische Merkmale vom angegebenen RFC 4646-Sprachtag identifiziert werden.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode und die <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A>-Eigenschaft sind veraltet. Anstatt diese Elemente zu verwenden, sollte die Anwendung ein neues <xref:System.Globalization.CultureInfo>-Objekt verwenden und die <xref:System.Globalization.CultureInfo.Name%2A>-Eigenschaft aufrufen. IETF-Tags und-Namen sind identisch.  
  
 Der von der Internet Engineering Task Force (IETF) verwaltet RFC 4646-Standard definiert ein IETF-Sprachtag, das eine einheitliche Methode zum Identifizieren einer Sprache bereitstellt. Das Format eines IETF-sprach Tags ist mit dem Kultur Namen identisch, der von der <xref:System.Globalization.CultureInfo.Name%2A>-Eigenschaft zurückgegeben wird, aber es wird keine Kultur eindeutig identifiziert. Verschiedene Kulturen verwenden dasselbe IETF-Sprachtag, wenn diese Kulturen identische linguistische Merkmale aufweisen. Die linguistischen Merkmale einer Kultur sind im <xref:System.Globalization.TextInfo> Objekt enthalten, das einem <xref:System.Globalization.CultureInfo> Objekt zugeordnet ist.  
  
 Ein IETF-Sprachtag besteht aus einem obligatorischen sprach Bezeichner, einer optionalen Skript Kennung und einem optionalen Bereichs Bezeichner.  
  
 Ihre Anwendungen sollten die abgerufene Kultur verwenden, um sprachspezifische Aufgaben zu steuern, z. b. das Verwalten einer Rechtschreibprüfung oder einer Grammatik Prüfung. Anwendungen sollten die abgerufene Kultur nicht zum Steuern kulturspezifischer Aufgaben verwenden, wie z. b. das Sortieren von Text oder das Formatieren von Zeiten und Datumsangaben.  
  
 Weitere Informationen finden Sie unter RFC 4646, "Tags für identifizierende Sprachen" und dem neuesten Entwurfs Standard, Draft-phillips-langtags-05. txt, unter [https://go.microsoft.com/fwlink/?LinkId=100231](https://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> entspricht keiner unterstützten Kultur.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und früheren Versionen wird eine <see cref="T:System.ArgumentException" /> ausgelöst, wenn <paramref name="name" /> nicht dem Namen einer unterstützten Kultur entspricht. Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />aus.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="types">Eine bitweise Kombination von Enumerationswerten, mit denen die abzurufenden Kulturen gefiltert werden.</param>
        <summary>Ruft die Liste der unterstützten Kulturen ab, die entsprechend dem angegebenen <see cref="T:System.Globalization.CultureTypes" />-Parameter gefiltert sind.</summary>
        <returns>Ein Array, das die vom <paramref name="types" />-Parameter angegebenen Kulturen enthält. Das Array von Kulturen ist unsortiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.GetCultures%2A>-Methode wird am häufigsten aufgerufen, wenn der Parameter `types` auf die folgenden Werte festgelegt ist:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, die alle spezifischen Kulturen zurückgibt.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, die alle neutralen Kulturen und die invariante Kultur zurückgibt.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, das alle neutralen und spezifischen Kulturen, Kulturen, die im Windows-System installiert sind, und benutzerdefinierte Kulturen zurückgibt, die vom Benutzer erstellt wurden.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, die alle benutzerdefinierten Kulturen zurückgibt, wie z. b. die von der <xref:System.Globalization.CultureAndRegionInfoBuilder>-Klasse registrierten. In Windows-Versionen vor Windows 10 gilt der <xref:System.Globalization.CultureTypes.UserCustomCulture> Wert für alle benutzerdefinierten Kulturen. Ab Windows 10 gilt es für System Kulturen, bei denen keine umfassenden Kultur Daten fehlen und die keinen eindeutigen lokalen Bezeichner aufweisen, wie durch den <xref:System.Globalization.CultureInfo.LCID%2A>-Eigenschafts Wert angegeben. Folglich gibt Code wie den folgenden andere Ergebnisse zurück, wenn er unter Windows 10 und einer früheren Version von Windows ausgeführt wird.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die Kulturen zh-CHS und zh-CHT mit den Kultur bezeichgern 0x0004 und 0x7C04 an. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="types" /> gibt eine ungültige Kombination von <see cref="T:System.Globalization.CultureTypes" />-Werten an.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Der <see cref="T:System.Type" />, für den ein Formatierungsobjekt abgerufen werden soll. Diese Methode unterstützt nur den <see cref="T:System.Globalization.NumberFormatInfo" />-Typ und den <see cref="T:System.Globalization.DateTimeFormatInfo" />-Typ.</param>
        <summary>Ruft ein Objekt ab, das definiert, wie der angegebene Typ formatiert werden soll.</summary>
        <returns>Der Wert der <see cref="P:System.Globalization.CultureInfo.NumberFormat" />-Eigenschaft, bei der es sich um eine <see cref="T:System.Globalization.NumberFormatInfo" /> mit Informationen über das Standardzahlenformat für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> handelt, wenn <paramref name="formatType" /> das <see cref="T:System.Type" />-Objekt für die <see cref="T:System.Globalization.NumberFormatInfo" />-Klasse ist.  
  
- oder - 
Der Wert der <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />-Eigenschaft, bei der es sich um eine <see cref="T:System.Globalization.DateTimeFormatInfo" /> mit Informationen über das Standardformat für Datums- und Uhrzeitangaben für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> handelt, wenn <paramref name="formatType" /> das <see cref="T:System.Type" />-Objekt für die <see cref="T:System.Globalization.DateTimeFormatInfo" />-Klasse darstellt.  
  
- oder - 
NULL, wenn <paramref name="formatType" /> ein beliebiges anderes Objekt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementiert <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` stellt das kulturspezifische numerische Format bereit, das zusammen mit den Format Methoden in den Basis Datentypen verwendet wird. `DateTimeFormatInfo` steuert, wie die Datums-und Uhrzeitwerte für eine bestimmte Kultur formatiert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Globalization.CultureInfo" />, die sich für die Verwendung in Hashalgorithmen und -datenstrukturen eignet, z. B. in einer Hashtabelle.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Diese Methode generiert für zwei Objekte, die gemäß der <xref:System.Globalization.CultureInfo.Equals%2A>-Methode gleich sind, denselben Hashcode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Veraltet. Ruft die Sprachkennung gemäß dem Standard RFC 4646 ab.</summary>
        <value>Eine Zeichenfolge, die die Sprachkennung gemäß dem Standard RFC 4646 darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Eigenschaft und die <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A>-Methode sind veraltet. Stattdessen sollten Sie die <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>-Eigenschaft verwenden. IETF-Tags und-Namen sind identisch.  
  
 Der von der Internet Engineering Task Force (IETF) verwaltet RFC 4646-Standard definiert ein IETF-Sprachtag, das eine einheitliche Methode zum Identifizieren einer Sprache bereitstellt. Das Format eines IETF-sprach Tags ähnelt dem Kultur Namen, der von der <xref:System.Globalization.CultureInfo.Name%2A>-Eigenschaft zurückgegeben wird, identifiziert aber keine Kultur eindeutig. Das heißt, dass unterschiedliche Kulturen dasselbe IETF-Sprachtag verwenden, wenn diese Kulturen identische linguistische Merkmale aufweisen. Die linguistischen Merkmale einer Kultur sind im <xref:System.Globalization.TextInfo> Objekt enthalten, das einem <xref:System.Globalization.CultureInfo> Objekt zugeordnet ist.  
  
 Ein IETF-Sprachtag besteht aus einem obligatorischen sprach Bezeichner, einer optionalen Skript Kennung und einem optionalen Bereichs Bezeichner.  
  
 Weitere Informationen finden Sie unter [RFC 5646, "Tags für die Identifizierung von Sprachen](https://go.microsoft.com/fwlink/?LinkId=230876). Eine Liste der unter Tags finden Sie in [der IANA Language Subtag-Registrierung](https://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CultureInfo" /> ab, die die mit dem Betriebssystem installierte Kultur darstellt.</summary>
        <value>Die <see cref="T:System.Globalization.CultureInfo" />, die die mit dem Betriebssystem installierte Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem lokalisierten Betriebssystem, z. b. einer japanischen Edition von Windows, gibt diese Eigenschaft die Kultur des Betriebssystems zurück. Diese Eigenschaft entspricht `GetSystemDefaultUILanguage` in der Windows-API.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das kulturunabhängige (invariante) <see cref="T:System.Globalization.CultureInfo" />-Objekt ab.</summary>
        <value>Das Objekt, das die kulturunabhängige (invariante) ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die invariante Kultur ist Kultur unabhängig. Sie ist mit der englischen Sprache verknüpft, aber nicht mit einem Land bzw. einer Region. Sie geben die invariante Kultur nach Namen an, indem Sie eine leere Zeichenfolge ("") im Aufrufe einer <xref:System.Globalization.CultureInfo> Instanziierung-Methode verwenden. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> ruft auch eine Instanz der invarianten Kultur ab. Sie kann in nahezu jeder Methode im <xref:System.Globalization>-Namespace verwendet werden, der eine Kultur erfordert. Die von Eigenschaften wie <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>und <xref:System.Globalization.CultureInfo.NumberFormat%2A> zurückgegebenen Objekte spiegeln auch den Zeichen folgen Vergleich und die Formatierungs Konventionen der invarianten Kultur wider.  
  
 Im Unterschied zu Kultur abhängigen Daten, die von der Benutzeranpassung oder durch Aktualisierungen der .NET Framework oder des Betriebssystems geändert werden können, sind invariante Kultur Daten im Zeitverlauf und in den installierten Kulturen stabil und können nicht von Benutzern angepasst werden. Dadurch ist die invariante Kultur besonders nützlich für Vorgänge, die Kultur unabhängige Ergebnisse erfordern, wie z. b. Formatierungs-und Verarbeitungsvorgänge, bei denen formatierte Daten persistent gespeichert werden, oder Sortier-und Sortiervorgänge, bei denen Daten unabhängig von der Kultur in einer festgelegten Reihenfolge angezeigt werden müssen.  
  
## <a name="string-operations"></a>Zeichen folgen Vorgänge  
 Sie können die invariante Kultur für Kultur abhängige Zeichen folgen Operationen verwenden, die nicht von den Konventionen der aktuellen Thread Kultur betroffen sind und die zwischen Kulturen einheitlich sind. Beispielsweise möchten Sie, dass sortierte Daten in einer festgelegten Reihenfolge angezeigt werden oder einen Standardsatz von Regeln für die Groß-/Kleinschreibung unabhängig von der aktuellen Thread Kultur auf Zeichen folgen anwenden. Zu diesem Zweck übergeben Sie das <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Objekt an eine Methode, die über einen <xref:System.Globalization.CultureInfo> Parameter verfügt, z. b. <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> und <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Beibehalten von Daten  
 Die <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Eigenschaft kann verwendet werden, um Daten in einem Kultur unabhängigen Format beizubehalten. Dadurch wird ein bekanntes Format bereitgestellt, das sich nicht ändert und das zum Serialisieren und Deserialisieren von Daten zwischen Kulturen verwendet werden kann. Nachdem die Daten deserialisiert wurden, können Sie entsprechend den kulturellen Konventionen des aktuellen Benutzers entsprechend formatiert werden.  
  
 Wenn Sie z. b. Datums-und Uhrzeit Daten im Zeichen folgen Format beibehalten möchten, können Sie das <xref:System.Globalization.CultureInfo.InvariantCulture%2A>-Objekt an die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-oder <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>-Methode übergeben, um die Zeichenfolge zu erstellen, und Sie können das <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Objekt an die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-oder <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode übergeben, um die Zeichenfolge in einen Datums-und Uhrzeitwert zu konvertieren Mit dieser Methode wird sichergestellt, dass die zugrunde liegenden Datums-und Uhrzeitwerte nicht geändert werden, wenn die Daten von Benutzern aus unterschiedlichen Kulturen gelesen oder geschrieben werden.  
  
 Im folgenden Beispiel wird die invariante Kultur verwendet, um einen <xref:System.DateTime> Wert als Zeichenfolge beizubehalten. Anschließend wird die Zeichenfolge analysiert und der zugehörige Wert mithilfe der Formatierungs Konventionen der Kulturen Französisch (Frankreich) und Deutsch (Deutschland) angezeigt.  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Sicherheitsentscheidungen  
 Wenn Sie eine Sicherheits Entscheidung treffen (z. b., ob der Zugriff auf eine System Ressource zulässig ist), basierend auf dem Ergebnis eines Zeichen folgen Vergleichs oder einer Fall Änderung, sollten Sie die invariante Kultur nicht verwenden. Stattdessen sollten Sie einen Ordinalvergleich ohne Beachtung der Groß-/Kleinschreibung durchführen, indem Sie eine Methode aufrufen, die einen <xref:System.StringComparison>-Parameter enthält und entweder <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> oder <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> als Argument bereitstellt. Code, der Kultur abhängige Zeichen folgen Operationen ausführt, kann zu Sicherheitsrisiken führen, wenn die aktuelle Kultur geändert wird oder wenn sich die Kultur des Computers, auf dem der Code ausgeführt wird, von der Kultur unterscheidet, die zum Testen des Codes verwendet wird. Im Gegensatz dazu ist ein Ordinalvergleich nur von dem binären Wert der verglichenen Zeichen abhängig.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle <see cref="T:System.Globalization.CultureInfo" /> eine neutrale Kultur darstellt.</summary>
        <value><see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> eine neutrale Kultur darstellt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine neutrale Kultur ist eine Kultur, die einer Sprache zugeordnet ist, aber nicht mit einem Land oder einer Region. Es unterscheidet sich von einer bestimmten Kultur, bei der es sich um eine Kultur handelt, die sowohl einer Sprache als auch einem Land oder einer Region zugeordnet ist. Beispielsweise ist "fr" der Name für die neutrale französische Kultur, während "fr-FR" der Name der französischen Kultur in Frankreich ist.  
  
 Wenn diese Eigenschaft `false`zurückgibt, ist die Kultur entweder eine bestimmte Kultur oder die invariante Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, welche Kulturen in der chinesischen Sprache neutrale Kulturen sind.  
  
> [!NOTE]
>  Im Beispiel werden die Namen der älteren zh-CHS-und zh-CHT-Kultur mit den Kultur Bezeichner"0x0004" und "0x7C04" angezeigt. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle <see cref="T:System.Globalization.CultureInfo" /> schreibgeschützt ist.</summary>
        <value><see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> schreibgeschützt ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Globalization.CultureInfo> schreibgeschützt ist, sind die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-und <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Instanzen ebenfalls schreibgeschützt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass <xref:System.Globalization.CultureInfo.IsReadOnly%2A> auch zum Schutz der <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo>-Instanzen beiträgt, die mit dem <xref:System.Globalization.CultureInfo>verknüpft sind.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktiven Bezeichner für das Eingabegebietsschema ab.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen Bezeichner für das Eingabegebietsschema angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bezeichner für das Eingabe Gebiets Schema wurde früher als Tastaturlayout bezeichnet. Ein Eingabe Gebiets Schema Bezeichner ist ein umfassenderes Konzept als ein Tastaturlayout, da es auch einen sprach-zu-Text-Konverter, einen Eingabemethoden-Editor (IME) oder eine beliebige andere Form von Eingaben angeben kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen wird der Kultur Bezeichner dem entsprechenden NLS-Gebiets Schema Bezeichner zugeordnet.  
  
 In Windows-Versionen vor Windows 10 wird der Gebiets Schema Bezeichner `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 oder 4096) benutzerdefinierten Kulturen zugewiesen, die vom Benutzer erstellt wurden. Ab Windows 10 wird es einer beliebigen Kultur zugewiesen, die nicht über einen eindeutigen Gebiets Schema Bezeichner verfügt und nicht über die vom System bereitgestellten Daten verfügt. Daher gibt Code, in dem Kulturen durchlaufen und mit einem <xref:System.Globalization.CultureInfo.LCID%2A> Wert von `LOCALE_CUSTOM_UNSPECIFIED` abgerufen werden, eine größere Teilmenge von <xref:System.Globalization.CultureInfo> Objekten zurück, wenn Sie unter Windows 10 ausgeführt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie ein <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierreihenfolge und eine andere <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierreihenfolge erstellt wird.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format *languagecode2*-*country/regioncode2*ab.</summary>
        <value>Der Kultur Name im Format *languagecode2*-*Country/regioncode2*, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> Kultur abhängig ist. oder eine leere Zeichenfolge, wenn es sich um eine invariante Kultur handelt. *languagecode2* ist ein aus ISO 639-1 abgeleiteter, aus zwei Kleinbuchstaben bestehender Code. *country/regioncode2* ist aus ISO 3166 abgeleitet und verwendet normalerweise zwei Großbuchstaben oder ein BCP-47-Sprachtag.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kultur Namen und Bezeichner, die die <xref:System.Globalization.CultureInfo.Name%2A>-Eigenschaft auf Windows-Systemen zurückgeben kann, finden Sie in der Spalte **Sprachtag** in der [Liste der von Windows unterstützten sprach-/Regionsnamen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard. Außerdem kann `name` ab Windows 10 ein beliebiges gültiges bcp-47-Sprachtag sein. Beachten Sie, dass Kultur Namen geändert werden und dass Sie auch die Namen von benutzerdefinierten Kulturen widerspiegeln können.  
  
 Die <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>-Eigenschaft folgt den Benennungs Standards, die im Thema <xref:System.Globalization.CultureInfo>-Klasse bereitgestellt werden. Sie gibt die Kurzform des Kultur namens zurück, die alle Anzeichen einer alternativen Sortierreihenfolge ausschließt. Wenn Sie z. b. ein <xref:System.Globalization.CultureInfo> Objekt instanziieren, indem Sie die Zeichenfolge "de-de_phoneb" verwenden, um eine Alternative Sortierreihenfolge widerzuspiegeln, gibt die <xref:System.Globalization.CultureInfo.Name%2A>-Eigenschaft "de-de" zurück.  
  
 Um den vollständigen Namen der Kultur zu erhalten, verwenden Sie die Eigenschaft <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>oder <xref:System.Globalization.CultureInfo.NativeName%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Im Beispiel werden die Namen der älteren zh-CHS-und zh-CHT-Kultur mit den Kultur Bezeichner"0x0004" und "0x7C04" angezeigt. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Kultur ab, der aus der Sprache, dem Land oder der Region und dem optionalen Skript besteht, das in der Kultur angezeigt werden soll.</summary>
        <value>Der Kultur Name, der aus dem vollständigen Namen der Sprache, dem vollständigen Namen des Landes bzw. der Region und dem optionalen Skript besteht. Das Format wird in der Beschreibung der <see cref="T:System.Globalization.CultureInfo" />-Klasse erläutert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft ist unabhängig von der Sprachversion der .NET Framework identisch.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.NumberFormatInfo" />, die das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true` und die angegebene Kultur mit der aktuellen Windows-Kultur übereinstimmt, verwendet der <xref:System.Globalization.CultureInfo> diese außer Kraft setzungen, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Die Werte der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft und der-Eigenschaft <xref:System.Globalization.CultureInfo.NumberFormat%2A> werden erst berechnet, wenn der Benutzer auf die-Eigenschaft zugreift. Wenn der Benutzer die Systemsteuerung verwendet, um die aktuelle Kultur in eine neue Kultur zu ändern, während die Anwendung ausgeführt wird, und dann auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> oder <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft zugreift, ruft die Anwendung die Standardwerte für die neue Kultur ab. nicht die außer Kraft setzungen für die ursprüngliche Kultur. Um die außer Kraft setzungen für die ursprüngliche aktuelle Kultur beizubehalten, sollte die Anwendung auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften zugreifen, bevor die aktuelle Kultur geändert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, dass CultureInfo. Clone auch die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> der <xref:System.Globalization.CultureInfo>zugeordneten Instanzen klont.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf NULL festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Globalization.CultureInfo.NumberFormat" />-Eigenschaft oder eine der <see cref="T:System.Globalization.NumberFormatInfo" />-Eigenschaften wird festgelegt, und die <see cref="T:System.Globalization.CultureInfo" /> ist schreibgeschützt.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste der Kalender ab, die von dieser Kultur verwendet werden können.</summary>
        <value>Ein Array vom Typ <see cref="T:System.Globalization.Calendar" />, das die Kalender darstellt, die von der Kultur verwendet werden können, die von der aktuellen <see cref="T:System.Globalization.CultureInfo" /> dargestellt werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anwendung ändert den von der aktuellen <xref:System.Globalization.CultureInfo> verwendeten Kalender durch Festlegen der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>-Eigenschaft von <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, bei der es sich um eine Instanz der <xref:System.Globalization.DateTimeFormatInfo> Klasse handelt. Der neue Kalender muss einer der Kalender sein, die in <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>aufgeführt sind. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> umfasst auch andere Eigenschaften, die die Datums-und Uhrzeit Formatierung anpassen, die dieser <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>zugeordnet ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die von der Kultur unterstützten <xref:System.Globalization.GregorianCalendar> Versionen bestimmt werden.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CultureInfo" /> ab, die die übergeordnete Kultur zur aktuellen <see cref="T:System.Globalization.CultureInfo" /> darstellt.</summary>
        <value>Die <see cref="T:System.Globalization.CultureInfo" />, die die übergeordnete Kultur zur aktuellen <see cref="T:System.Globalization.CultureInfo" /> darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kulturen verfügen über eine Hierarchie, in der das übergeordnete Element einer bestimmten Kultur eine neutrale Kultur ist, das übergeordnete Element einer neutralen Kultur das <xref:System.Globalization.CultureInfo.InvariantCulture%2A>ist und das übergeordnete Element des <xref:System.Globalization.CultureInfo.InvariantCulture%2A> die invariante Kultur selbst ist. Die übergeordnete Kultur umfasst nur den Satz von Informationen, die für die untergeordneten Elemente häufig vorkommen.  
  
 Wenn die Ressourcen für die jeweilige Kultur im System nicht verfügbar sind, werden die Ressourcen für die neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die in die Hauptassembly eingebetteten Ressourcen verwendet. Weitere Informationen zum Ressourcen Fall Backprozess finden Sie unter [Verpacken und](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)Bereitstellen von Ressourcen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die übergeordnete Kultur jeder bestimmten Kultur mithilfe der chinesischen Sprache bestimmt.  
  
> [!NOTE]
>  Im Beispiel werden die Namen der älteren zh-CHS-und zh-CHT-Kultur mit den Kultur Bezeichner"0x0004" und "0x7C04" angezeigt. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, für das der Wrapper erstellt wird.</param>
        <summary>Gibt einen schreibgeschützten Wrapper für das angegebene <see cref="T:System.Globalization.CultureInfo" />-Objekt zurück.</summary>
        <returns>Ein schreibgeschützter <see cref="T:System.Globalization.CultureInfo" />-Wrapper um <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wrapper verhindert Änderungen an `ci`oder den vom `ci`zurückgegebenen Objekten.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, dass die <xref:System.Globalization.CultureInfo.ReadOnly%2A>-Methode zum Schutz der <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo>-Instanzen beiträgt, die dem <xref:System.Globalization.CultureInfo>zugeordnet sind.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ci" /> ist NULL.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.TextInfo" /> ab, die das der Kultur zugeordnete Schriftsystem definiert.</summary>
        <value>Die <see cref="T:System.Globalization.TextInfo" />, die das der Kultur zugeordnete Schriftsystem definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.TextInfo%2A>-Eigenschaft stellt kulturspezifische Schreib Informationen für Zeichen folgen bereit. Um Kultur unabhängige Schreibweise auszuführen, sollte die Anwendung die <xref:System.Globalization.CultureInfo.TextInfo%2A>-Eigenschaft von <xref:System.Globalization.CultureInfo.InvariantCulture%2A>verwenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie ein <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierreihenfolge und eine andere <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierreihenfolge erstellt wird.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 639-2 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der aus drei Buchstaben bestehende Code nach ISO 639-2 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die drei buchstabige Abkürzung für Englisch lautet z. b. "eng".  
  
> [!NOTE]
>  Bei der Kommunikation zwischen Prozessen oder Beibehaltung von Daten ist es in der Regel besser, den vollständigen <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>zu verwenden. Wenn nur die Sprache verwendet wird, können Kontext und Daten verloren gehen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Im Beispiel werden die Namen der älteren zh-CHS-und zh-CHT-Kultur mit den Kultur Bezeichner"0x0004" und "0x7C04" angezeigt. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code für die Sprache ab, wie er in der Windows-API definiert ist.</summary>
        <value>Der aus drei Buchstaben bestehenden Code für die Sprache, wie er in der Windows-API definiert ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt denselben Wert zurück wie die Windows-API-Methode `GetLocaleInfo` mit dem LOCALE_SABBREVLANGNAME Wert. Beispielsweise lautet der aus drei Buchstaben bestehende Code für Englisch (USA), wie er in der Windows-API definiert ist, "deu".  
  
> [!NOTE]
>  Bei der Kommunikation zwischen Prozessen oder Beibehaltung von Daten ist es in der Regel besser, den vollständigen <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>zu verwenden. Wenn nur die Sprache verwendet wird, können Kontext und Daten verloren gehen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Im Beispiel werden die Namen der älteren zh-CHS-und zh-CHT-Kultur mit den Kultur Bezeichner"0x0004" und "0x7C04" angezeigt. Allerdings sollten Ihre Windows Vista-Anwendungen den zh-Hans-Namen anstelle von zh-CHS und den zh-Hant-Namen anstelle von zh-CHT verwenden. Die Namen zh-Hans und zh-Hant stellen den aktuellen Standard dar und sollten verwendet werden, es sei denn, Sie haben einen Grund für die Verwendung älterer Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge mit dem Namen der aktuellen <see cref="T:System.Globalization.CultureInfo" /> im Format *languagecode2*-*country/regioncode2*ab.</summary>
        <returns>Eine Zeichenfolge, die den Namen der aktuellen <see cref="T:System.Globalization.CultureInfo" />-Klasse enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Sie gibt eine normalisierte Version des Kultur namens zurück, die an den <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>-oder <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>-Konstruktor oder an die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>-oder <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>-Methode übergeben wird. Die Ergebnis Zeichenfolge wird normalisiert, indem Zeichen in *languagecode2* in Kleinbuchstaben konvertiert werden und Zeichen in *Country/regioncode2* bei Bedarf in Großbuchstaben konvertiert werden.  
  
 Vordefinierte Kultur Namen auf Windows-Systemen werden in der Spalte **Sprachtag** in der [Liste der von Windows unterstützten Sprachen-/Regionsnamen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)aufgelistet. Kulturnamen befolgen den von [BCP 47](https://tools.ietf.org/html/bcp47) definierten Standard.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus zwei Buchstaben bestehenden Code nach ISO 639-1 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der aus zwei Buchstaben bestehende Code nach ISO 639-1 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zwei buchstabige Abkürzung für Englisch lautet z. b. "en". Der <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>-Eigenschafts Wert für die invariante Kultur ist "IV".  
  
> [!NOTE]
>  Bei der Kommunikation zwischen Prozessen oder Beibehaltung von Daten ist es in der Regel besser, den vollständigen <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>zu verwenden. Wenn nur die Sprache verwendet wird, können Kontext und Daten verloren gehen.  
  
 Wenn ISO 639-1 keinen aus zwei Buchstaben bestehenden Sprachcode für eine bestimmte Kultur definiert, gibt die <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>-Eigenschaft eine Zeichenfolge zurück, die aus drei oder mehr Buchstaben besteht. Weitere Informationen finden Sie unter Beispiel:  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Kulturen aufgelistet, deren <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>-Eigenschaft nicht aus einem aus zwei Buchstaben bestehenden Sprachcode besteht.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das aktuelle <see cref="T:System.Globalization.CultureInfo" />-Objekt die vom Benutzer ausgewählten Kultureinstellungen verwendet.</summary>
        <value><see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> die vom Benutzer ausgewählten Kultureinstellungen verwendet, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Benutzer kann einige der Werte, die der aktuellen Kultur von Windows zugeordnet sind, über die Regions-und Sprachoptionen in der Systemsteuerung überschreiben. Beispielsweise kann der Benutzer das Datum in einem anderen Format anzeigen oder eine andere Währung als den Standardwert für die Kultur verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> `true` und die angegebene Kultur mit der aktuellen Windows-Kultur übereinstimmt, verwendet der <xref:System.Globalization.CultureInfo> diese außer Kraft setzungen, einschließlich der Benutzereinstellungen für die Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, und der Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Instanz, die von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft zurückgegeben wird. Wenn die Benutzereinstellungen mit der Kultur, die dem <xref:System.Globalization.CultureInfo>zugeordnet ist, nicht kompatibel sind, z. b. wenn es sich bei dem ausgewählten Kalender nicht um einen der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>handelt, sind die Ergebnisse der Methoden und die Werte der Eigenschaften nicht definiert.  
  
 Diese Eigenschaft wird festgelegt, wenn die <xref:System.Globalization.CultureInfo> erstellt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

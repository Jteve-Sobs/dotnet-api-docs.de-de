<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc69f215a6f10b142ad356718b7a90c13d971742" /><Meta Name="ms.sourcegitcommit" Value="101e237579339f500467ba198ec0d3471dec4e4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/17/2019" /><Meta Name="ms.locfileid" Value="67149898" /></Metadata><TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Informationen über eine bestimmte Kultur bereit (die bei der nicht verwalteten Codeentwicklung als *Gebietsschema* bezeichnet wird). Zu diesen Informationen gehören der Name der Kultur, das Schriftsystem, der verwendete Kalender sowie die Sortierreihenfolge von Zeichenfolgen und die Formatierung für Datumsangaben und Zahlen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo> Klasse stellt kulturspezifische Informationen, z. B. die Sprache, untersprachen, Land/Region, Kalender und Konventionen, die eine bestimmte Kultur zugeordnet. Diese Klasse bietet auch Zugriff auf kulturspezifische Instanzen der <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, und <xref:System.Globalization.TextInfo> Objekte. Diese Objekte enthalten die Informationen für kulturabhängige Vorgänge, z. B. Groß-/Kleinschreibung, dem Formatieren von Datumsangaben und Zahlen und Vergleichen von Zeichenfolgen. Die <xref:System.Globalization.CultureInfo> Klasse wird verwendet, entweder direkt oder indirekt von Klassen, die zu formatieren, analysieren und Bearbeiten von kulturspezifische Daten wie z. B. <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>, und die numerischen Typen.  
  
 In diesem Abschnitt  
  
 [Culture-Namen und Bezeichner](#CultureNames)   
 [Invarianten, neutrale und spezifische Kulturen](#Invariant)   
 [Kulturen](#Custom)   
 [Dynamische Kultur](#Dynamic)   
 [CultureInfo und kulturellen Daten](#cultureinfo-and-cultural-data) [der aktuellen Kultur und die aktuelle UI-Kultur](#Current)   
 [Abrufen aller Kulturen](#GetAll)   
 [Kultur und threads](#Threads)   
 [Die Kultur und die Anwendung von Domänen](#AppDomain)   
 [Kultur und aufgabenbasierte asynchrone Vorgänge](#Async)   
 [Serialisierung der CultureInfo-Objekten](#Serialization)   
 [Systemsteuerung überschreibt.](#CPanel)   
 [Alternative Sortierreihenfolgen](#AlternateSort)   
 [Die Kultur und die Windows-apps](#Windows)  

<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Culture-Namen und Bezeichner  
 Die <xref:System.Globalization.CultureInfo> Klasse gibt einen eindeutigen Namen für jede Kultur, die basierend auf dem Standard RFC 4646. Der Name ist eine Kombination aus einer ISO 639 zweibuchstabige Kleinbuchstaben den Kulturcode einer Sprache zugeordnet und eine nach ISO 3166 zweibuchstabige Großbuchstaben den unterkulturcode ein Land oder Region zugeordnet. Darüber hinaus für apps, die als Ziel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] oder höher und werden unter Windows 10 oder höher ausgeführt wird, Kulturnamen ab, die gültigen BCP-47-Sprache entsprechen-Tags werden unterstützt.  
  
> [!NOTE]
>  Wenn der Name einer Kultur übergeben wird auf einem Klassenkonstruktor oder eine Methode wie z. B. <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> oder <xref:System.Globalization.CultureInfo>, der Fall ist nicht von Bedeutung.  
  
 Das Format für den Namen der Kultur, basierend auf dem Standard RFC 4646 ist *languagecode2*>-*Landes-/regionscode2*, wobei *languagecode2* der zwei Buchstaben bestehende Sprachcode und *Landes-/regionscode2* der zwei Buchstaben bestehenden unterkulturcode. Beispiele für sind ja-JP für Japanisch (Japan) und En-US für Englisch (USA). In Fällen, in denen ein zwei Buchstaben bestehende Sprachcode nicht verfügbar ist, wird ein drei Buchstaben bestehenden Code nach ISO 639-2-abgeleitet verwendet.  
  
 Beachten Sie, dass einige Kulturnamen auch ein ISO-15924-Skript angeben. Beispielsweise Cyrl gibt an, das kyrillische Skript und Latn gibt lateinischen an. Den Namen einer Kultur, die ein Skript enthält, verwendet das Muster *languagecode2*-*Scripttag*-*Landes-/regionscode2*. Ein Beispiel für diese Art von Kulturname ist Uz-Cyrl-UZ für Usbekisch (Kyrillisch, Usbekistan). Bei Windows-Betriebssystemen vor Windows Vista verwendet den Namen einer Kultur, die ein Skript enthält das Muster *languagecode2*-*Landes-/regionscode2* -  *Scripttag*, z. B. Uz-UZ-Cyrl für Usbekisch (Kyrillisch, Usbekistan).  
  
 Eine neutrale Kultur ist nur durch die zwei Buchstaben bestehenden Kleinbuchstaben Sprachcode angegeben. Zum Beispiel "fr" gibt die neutrale Kultur für Französisch und de gibt die neutrale Kultur für Deutsch.  
  
> [!NOTE]
>  Es gibt zwei Kulturnamen, die dieser Regel entsprechen. Die Kulturen, Chinesisch (vereinfacht), mit dem Namen Zh-Hans und Chinesisch (traditionell), mit dem Namen Zh-Hant, sind die neutralen Kulturen. Die Kulturnamen infrage stellen die aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen Zh-CHS und Zh-CHT.  
  
 Ein Kulturbezeichner ist eine internationale numerische standardabkürzung und verfügt über die Komponenten, die erforderlich sind, um eine der installierten Kulturen eindeutig zu identifizieren. Ihre Anwendung kann vordefinierte Kulturbezeichner verwenden oder benutzerdefinierten Bezeichner definieren.  
  
 Bestimmte vordefinierte Kulturnamen und Bezeichner verwendet werden, indem dieser und anderen Klassen in der <xref:System.Globalization?displayProperty=nameWithType> Namespace. Ausführliche kulturinformationen für Windows-Systeme, finden Sie unter den **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47).  
  
 Denken Sie daran, dass die Kulturnamen und Bezeichner, nur eine Teilmenge der Kulturen darstellen, die auf einem bestimmten Computer gefunden werden können. Windows-Versionen oder Servicepacks können die verfügbaren Kulturen ändern. Hinzufügen von Anwendungen mithilfe von Kulturen die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse. Benutzer können eigene benutzerdefinierten Kulturen, die mit dem Tool Microsoft Locale Builder hinzugefügt werden. Microsoft Locale Builder wird geschrieben, in verwaltetem Code mithilfe der `CultureAndRegionInfoBuilder` Klasse.  
  
 Mehrere unterschiedliche Namen sind eng verknüpft mit einer Kultur, insbesondere die folgenden Member zugeordneten Namen:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Invarianten, neutrale und spezifische Kulturen  
 Die Kulturen sind im Allgemeinen in drei Gruppen zusammengefasst: invariante Kulturen, neutrale Kulturen und spezifische Kulturen.  
  
 Eine invariante Kultur ist die Culture-insensitive. Die Anwendung gibt die invariante Kultur Namen in eine leere Zeichenfolge ("") oder durch seinen Bezeichner. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> definiert eine Instanz der invarianten Kultur. Es ist verknüpft mit der englischen Sprache jedoch nicht mit der alle Länder/Regionen. Hiermit wird in fast allen Methoden in der `Globalization` Namespace, die eine Kultur erforderlich sind.  
  
 Eine neutrale Kultur ist, eine Kultur, die verknüpft sind mit einer anderen Sprache jedoch nicht mit einem Land/einer Region. Eine bestimmte Kultur ist eine Kultur, die eine Sprache und Land/Region zugeordnet ist. Z. B. "fr" ist der neutralen Name für die Kultur Französisch und "fr-FR" ist der Name der bestimmten Kultur Französisch (Frankreich). Beachten Sie, dass Chinesisch (vereinfacht) und Chinesisch (traditionell) auch neutrale Kulturen berücksichtigt werden.  
  
 Erstellen einer Instanz einer <xref:System.Globalization.CompareInfo> -Klasse für eine neutrale Kultur nicht empfohlen, da die darin enthaltenen Daten beliebiger ist. Geben Sie zum Anzeigen und Sortieren von Daten, die Sprache und die Region aus. Darüber hinaus die <xref:System.Globalization.CompareInfo.Name%2A> Eigenschaft eine <xref:System.Globalization.CompareInfo> Objekt für eine neutrale Kultur nur das Land gibt und enthält nicht die Region erstellt.  
  
 Die definierten Kulturen bilden eine Hierarchie, in dem das übergeordnete Element eine bestimmte Kultur ist eine neutrale Kultur und das übergeordnete Element eine neutrale Kultur ist die invariante Kultur. Die <xref:System.Globalization.CultureInfo.Parent%2A> Eigenschaft enthält die neutrale Kultur, die eine bestimmte Kultur zugeordnet. Benutzerdefinierte Kulturen sollten definieren die <xref:System.Globalization.CultureInfo.Parent%2A> -Eigenschaft in Übereinstimmung mit diesem Muster.  
  
 Wenn die Ressourcen für eine bestimmte Kultur nicht in das Betriebssystem verfügbar sind, werden die Ressourcen für die zugeordnete neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die Ressourcen, die in die Hauptassembly eingebettet verwendet. Weitere Informationen zu den Ressourcenfallback-Prozess, finden Sie unter [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 Die Liste der Gebietsschemas, in der Windows-API unterscheidet sich etwas aus der Liste der von .NET Framework unterstützten Kulturen. Wenn Interoperabilität mit Windows erforderlich ist, sollten z. B. über den p/invoke-Mechanismus, die Anwendung verwenden eine bestimmte Kultur, die definiert, ist für das Betriebssystem. Verwendung einer bestimmten Kultur gewährleistet die Konsistenz mit dem entsprechenden Windows-Gebietsschema, der mit der Gebietsschema-ID identifiziert wird, die identisch ist <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 Ein <xref:System.Globalization.DateTimeFormatInfo> oder <xref:System.Globalization.NumberFormatInfo> kann nur für die invariante Kultur oder für bestimmte Kulturen, für neutrale Kulturen nicht erstellt werden.  
  
 Wenn <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> ist die <xref:System.Globalization.TaiwanCalendar> jedoch <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> ist nicht festgelegt, Zh-TW, klicken Sie dann <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, und <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> eine leere Zeichenfolge zurückgegeben ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Kulturen  
 Zusätzlich zu den vordefinierten durch das Windows-Betriebssystem und .NET Framework unterstützten Kulturen unterstützt .NET Framework drei Arten von Kulturen:  
  
-   Neue Kulturen, die die Kulturen, die in Windows oder .NET Framework verfügbar zu ergänzen. Z. B. eine Anwendung installieren konnte eine <xref:System.Globalization.CultureInfo> -Objekt, stellt die Fj-FJ (oder Fijan (Fidschi)) auf einem System Kultur.  
  
-   Ersatzkulturen, dessen Eigenschaften die Eigenschaften der standard durch Windows und .NET Framework unterstützten Kulturen unterscheiden.  
  
-   Standard Kulturen mit überschreibungen. Der Benutzer kann mithilfe der **Regions- und Spracheinstellungen** -Anwendung in **Systemsteuerung** Eigenschaftswerte für eine vorhandene Kultur anpassen.  
  
> [!NOTE]
>  Sie können die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse zu definieren, speichern und Kulturen, die ergänzen oder Ersetzen von vorhandenen Kulturen zu registrieren. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> Methode erstellt eine Locale Data Markup Language (LDML)-Datei, die verwendet werden kann, um eine benutzerdefinierte Kultur auf den Zielsystemen zu installieren. Schrittweise Schritt Informationen zur Verwendung der <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse zum Erstellen einer neuen oder Ersatzkultur, finden Sie unter den <xref:System.Globalization.CultureAndRegionInfoBuilder> Thema-Klasse.  
  
 Da .NET Framework Kulturen unterstützt, sollten Sie beim Arbeiten mit kulturspezifischen Folgendes:  
  
-   Kulturen können Werte enthalten, die die Bereiche von vordefinierten Kulturen zu überschreiten. Beispielsweise verfügen einige Kulturen, ungewöhnlich lange Monatsnamen, unerwartete Datums- oder Uhrzeitformaten oder andere ungewöhnlichen Daten.  
  
-   Wenn kulturspezifische Daten in der Benutzeroberfläche angezeigt werden, sollten Sie des Benutzers Anpassungen berücksichtigt; der Benutzer kann z. B. ein 24-Stunden-Format oder ein Datum im Format YyyyMMdd soll.  
  
-   Denken Sie daran, dass die Kulturen Standardwerte außer Kraft setzen. Sie können nicht aus diesem Grund Kulturdaten stabil, berücksichtigen. Ländernamen, Number und Date-Formate und Schreibweisen, möglicherweise in Zukunft ändern. Wenn Sie kulturabhängige Daten wie Zeichenfolgen für Datum und Zeit, die Datums-und uhrzeitanalyse Funktionen übergeben werden serialisieren möchten, sollten Sie die invariante Kultur oder ein bestimmtes verwenden.  
  
 Der <xref:System.Globalization.CultureInfo.CultureTypes%2A> schließt-Eigenschaftswert von Kulturen, die auf einem System installiert die <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Flag und Kulturen werden zugewiesen. eine <xref:System.Globalization.CultureInfo.LCID%2A> Eigenschaftswert `LOCALE_CUSTOM_UNSPECIFIED` (4096 oder 0 x 1000). Beachten Sie, dass ab Windows 10, diesen Wert auch systemdefinierte Kulturen zugewiesen wird, die vollständige kulturelle Daten hat.  

## <a name="cultureinfo-and-cultural-data"></a>CultureInfo und kulturellen Daten

.NET wird die kulturellen Daten aus einer Vielzahl von Quellen, je nach Implementierung, Plattform und Version eine abgeleitet:

- In .NET Framework 3.5 und früher werden die kulturelle Daten von sowohl das Windows-Betriebssystem und .NET Framework bereitgestellt.

- In .NET Framework 4 und höher werden die kulturelle Daten durch das Windows-Betriebssystem bereitgestellt.

- In allen Versionen von .NET Core auf Windows ausgeführt wird werden die kulturelle Daten durch das Windows-Betriebssystem bereitgestellt.

- In allen Versionen von .NET Core auf Unix-Plattformen ausgeführt wird, erfolgt die kulturelle Daten über die [International Components for Unicode)-Bibliothek ICU (](http://site.icu-project.org/). Die spezifische Version der ICU-Bibliothek hängt von den einzelnen Betriebssystem ab.

Aus diesem Grund kann eine Kultur, die auf einer bestimmten .NET Implementierung, Plattform oder Version auf eine andere .NET Implementierung, Plattform oder Version nicht verfügbar.

Einige `CultureInfo` Objekte unterscheiden sich abhängig von der zugrunde liegenden Plattform. Vor allem "Zh-CN", "oder" Chinesisch (vereinfacht, China) "und" Zh-TW, oder "Chinesisch (traditionell, Taiwan), werden die verfügbaren Kulturen auf Windows-Systemen, aber sie sind mit einem Alias versehen Kulturen auf Unix-Systemen. "Zh-CN" ist ein Alias für die Kultur "Zh-Hanscn" und "Zh-TW" ist ein Alias für die Kultur "Zh-Hant-TW". Mit einem Alias versehen Kulturen werden durch Aufrufe von nicht zurückgegeben. die <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode und möglicherweise andere Werte, einschließlich der verschiedenen <xref:System.Globalization.CultureInfo.Parent> Kulturen als ihre Gegenstücke Windows. Für die Kulturen Zh-CN und Zh-TW diese Differenes die folgenden:

- Klicken Sie auf Windows-Systemen die übergeordnete Kultur der Kultur "Zh-CN" ist "Zh-Hans", und die übergeordnete Kultur der Kultur "Zh-TW" ist "Zh-Hant". Die übergeordnete Kultur beide dieser Kulturen ist "Zh". Auf Unix-Systemen sind die übergeordneten Elemente der beiden Kulturen "Zh". Dies bedeutet, dass, wenn Sie kulturspezifische Ressourcen für die Kulturen "Zh-CN" oder "Zh-TW" bieten keine Ressourcen für die neutrale "Zh-Hans" oder "Zh-Hant" Kultur bieten, Ihre Anwendung die Ressourcen für die neutrale Kultur, die auf Windows jedoch nicht auf Unix geladen werden . Auf Unix-Systemen müssen Sie explizit festlegen des Threads <xref:System.Globalization.CultureInfo.CurrentUICulture> "Zh-Hans" oder "Zh-Hant". 

- Auf Windows-Systemen Aufrufen <xref:System.Globalization.CultureInfo.Equals%2A?displayProperty=nameWithType> auf einer Instanz darstellt, die die Kultur "Zh-CN" und gibt zurück, und übergeben sie eine Instanz der "Zh-Hanscn" `true`. Auf Unix-Systemen der Methodenaufruf zurückkehrt `false`. Dieses Verhalten gilt auch für Aufrufen <xref:System.Globalization.CultureInfo.Equals%2A> auf eine "Zh-TW" <xref:System.Globalization.CultureInfo> -Instanz und eine Instanz der "Zh-Hant-Tw" übergeben.

<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dynamische Kultur  
 Mit Ausnahme der invarianten Kultur verwenden ist die Culture-Daten dynamisch. Dies gilt auch für die vordefinierten Kulturen. Z. B. Länder oder Regionen übernehmen die neue Währungen, ändern Sie die Schreibweise der Wörter oder ändern Sie ihre bevorzugte Kalender und Kultur Definitionen ändern, um dies zu verfolgen.  Kulturen können ohne vorherige Ankündigung geändert werden, und bestimmte Kultur eine Ersatzkultur für die benutzerdefinierte überschrieben werden kann. Darüber hinaus kann wie im folgenden erläutert wird, ein einzelner Benutzer kulturelle Einstellungen außer Kraft. Anwendungen sollten immer Kulturdaten zur Laufzeit abrufen.  
  
> [!CAUTION]
>  Beim Speichern von Daten sollten Ihre Anwendung die invariante Kultur, ein binäres Format oder einem bestimmten kulturunabhängig-Format verwenden. Gemäß der aktuellen Werte einer bestimmten Kultur, als der invarianten Kultur, zugeordneten gespeicherte Daten können nicht gelesen werden oder Bedeutung können sich ändern, wenn die Kultur ändert.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>Die aktuelle Kultur und die aktuelle UI-Kultur  
 Jeder Thread in einer .NET-Anwendung verfügt über eine aktuelle Kultur und die aktuelle UI-Kultur. Die aktuelle Kultur bestimmt die Formatierungskonventionen für Datum, Uhrzeit, Zahlen und Währungswerte, die Sortierreihenfolge von Texten, Groß-/ Kleinschreibungskonventionen und die Möglichkeiten, die die Zeichenfolgen verglichen werden. Die aktuelle Kultur wird verwendet, um kulturspezifische Ressourcen zur Laufzeit abzurufen.  
  
> [!NOTE]
>  Weitere Informationen dazu, wie die aktuelle und die aktuelle Benutzeroberflächenkultur auf einer pro-Thread-Basis bestimmt wird, finden Sie unter den [Kultur und Threads](#Threads) Abschnitt. Informationen zur Bestimmung der aktuellen und der aktuellen Benutzeroberflächenkultur für Threads ausgeführt werden, in einer neuen Anwendungsdomäne und in Threads, die überschreiten von Grenzen von Anwendungsdomänen hinweg, finden Sie unter den [Kultur und Anwendungsdomänen](#AppDomain) Abschnitt. Weitere Informationen dazu, wie der aktuellen und der aktuellen richtet sich auf die Threads, die aufgabenbasierte asynchrone Vorgänge ausführen, finden Sie unter den [Kultur und aufgabenbasierte asynchrone Vorgänge](#Async) Abschnitt.  
  
 Ausführliche Informationen auf der aktuellen Kultur finden Sie unter den <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Thema-Eigenschaft. Ausführlichere Informationen über die aktuelle Benutzeroberflächenkultur finden Sie unter den <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Thema-Eigenschaft.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Abrufen der aktuellen und die aktuelle UI-Kulturen  
 Sie erhalten eine <xref:System.Globalization.CultureInfo> -Objekt, das die aktuelle Kultur auf zwei Arten darstellt:  
  
-   Durch Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Durch Abrufen des Werts der [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) Eigenschaft.  
  
 Das folgende Beispiel ruft der beiden Eigenschaftenwerte, miteinander verglichen, um anzugeben, dass sie identisch sind, und zeigt den Namen der aktuellen Kultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Sie erhalten eine <xref:System.Globalization.CultureInfo> Objekt, das die aktuelle Benutzeroberflächenkultur auf zwei Arten darstellt:  
  
-   Durch Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Durch Abrufen des Werts der [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) Eigenschaft.  
  
 Das folgende Beispiel ruft beider Eigenschaftswerte, miteinander verglichen, um anzugeben, dass sie identisch sind, und zeigt den Namen der aktuellen Benutzeroberflächenkultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Festlegen der aktuellen und die aktuelle UI-Kulturen  
 Um die Kultur und Benutzeroberflächenkultur eines Threads zu ändern, führen Sie folgende Schritte aus:  
  
1.  Instanziieren einer <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, durch den Aufruf darstellt einer <xref:System.Globalization.CultureInfo> Klasse, Konstruktor und übergibt den Namen der Kultur. Die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor instanziiert ein <xref:System.Globalization.CultureInfo> -Objekt, das Benutzer widerspiegelt wird überschrieben, wenn die neue Kultur der aktuellen Windows-Kultur entspricht.   Die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor können Sie angeben, ob das neu instanziierte <xref:System.Globalization.CultureInfo> -Objekt gibt Benutzer wird überschrieben, wenn die neue Kultur der aktuellen Windows-Kultur entspricht.  
  
2.  Weisen Sie die <xref:System.Globalization.CultureInfo> -Objekt an die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> oder <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft, die auf .NET Core und .NET Framework 4.6 und höher. (Für .NET Framework 4.5.2 und frühere Versionen Youc Zuweisen der `CultureInfo` -Objekt an die <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> oder <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft.)   
  
 Im folgende Beispiel ruft die aktuelle Kultur ab. Wenn sie etwas anderes als die Kultur Französisch (Frankreich) ist, werden die aktuelle Kultur auf Französisch (Frankreich) ändert. Andernfalls werden die aktuelle Kultur auf Französisch (Luxemburg) ändert.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 Im folgende Beispiel ruft die aktuelle Kultur ab. Wenn es etwas anderes ist die Kultur Slowenisch (Slowenien), Slowenisch (Slowenien) die aktuelle Kultur ändert. Andernfalls werden die aktuelle Kultur auf Kroatisch (Kroatien) ändert.  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Abrufen aller Kulturen  
 Sie können ein Array bestimmte Kategorien von Kulturen oder aller Kulturen, die auf dem lokalen Computer verfügbar abrufen, durch den Aufruf der <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode. Beispielsweise können Sie Kulturen, neutrale Kulturen oder bestimmte Kulturen entweder alleine oder zusammen abrufen.  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.GetCultures%2A> zweimal-Methode, mit der <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Enumerationsmember zum Abrufen aller Kulturen, und klicken Sie dann mit der <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Enumerationsmember alle Ersatzkulturen abrufen.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Kultur und threads  
 Wenn ein neuer Anwendungsthread gestartet wird, werden die aktuelle Kultur und die aktuelle UI-Kultur durch die aktuelle Systemkultur und nicht durch die aktuelle Threadkultur definiert. Der Unterschied wird im folgenden Beispiel veranschaulicht. Die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur eines Threads der Anwendung festgelegt auf die Kultur "Französisch (Frankreich)" (fr-FR). Wenn die aktuelle Kultur, die bereits "fr-FR" ist, wird im Beispiel auf der Kultur Englisch (USA) (En-US). Es werden drei Zufallszahlen als Währungswerte angezeigt und erstellt dann einen neuen Thread, der was wiederum drei weitere Zufallszahlen als Currency-Werte werden angezeigt. Aber wie die Ausgabe im Beispiel wird gezeigt, die Currency-Werte, die angezeigt wird, von dem neuen Thread spiegeln nicht die Formatierungskonventionen der Kultur Französisch (Frankreich) im Gegensatz zu den aus dem Hauptanwendungsthread.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 In Versionen von .NET Framework vor der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], wird die allgemeine Möglichkeit sicherzustellen, dass der Thread der hauptanwendung das dieselbe Kultur für alle anderen Arbeitsthreads freigegeben ist, übergeben entweder den Namen der Kultur der gesamten Anwendung oder ein <xref:System.Globalization.CultureInfo> -Objekt, Stellt die gesamte Anwendung Kultur, die eine <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> delegieren. Das folgende Beispiel verwendet diesen Ansatz, um sicherzustellen, dass die Currency-Werte von zwei Threads angezeigt, die Formatierungskonventionen der das dieselbe Kultur widerspiegeln.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Sie können festlegen der Kultur und Benutzeroberflächenkultur eines Threads des Threadpools auf ähnliche Weise durch Aufrufen der <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> Methode.  
  
 Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], lassen sich die Kultur und Benutzeroberflächenkultur aller Threads in einer Anwendungsdomäne, indem Sie direkt zuweisen einer <xref:System.Globalization.CultureInfo> -Objekt, das diese Kultur entspricht der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften. Im folgenden Beispiel wird diese Eigenschaften, um sicherzustellen, dass alle Threads in der Standardanwendungsdomäne auf dieselbe Kultur aufweist freigeben.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Obwohl die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften sind statische Member, die sie definieren die Standardkultur und die Standardkultur der Benutzeroberfläche nur für die Anwendungsdomäne, die zum Zeitpunkt ist, werden diese Eigenschaftswerte festgelegt. Weitere Informationen finden Sie im nächsten Abschnitt [Kultur und Anwendungsdomänen](#AppDomain).  
  
 Beim Zuweisen von Werten, die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> auch ändern der Eigenschaften, die Kultur und Benutzeroberflächenkultur des Threads in der Anwendungsdomäne, wenn sie nicht explizit eine Kultur zugewiesen wurden. Diese Threads entsprechen jedoch die neuen kultureinstellungen, allerdings nur, wenn sie in der aktuellen Anwendungsdomäne ausgeführt. Wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, wird ihre Kultur die Standardkultur für die Anwendungsdomäne definiert. Daher wird empfohlen, dass Sie immer die Kultur der Thread der hauptanwendung festgelegt, und Sie sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, um ihn zu ändern.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Die Kultur und die Anwendung von Domänen  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sind statische Eigenschaften, die eine Standardkultur nur für die Anwendungsdomäne explizit zu definieren, die aktuell ist, wenn der Eigenschaftswert festgelegt oder abgerufen wird. Im folgenden Beispiel legt die Standardkultur und die Standardkultur der Benutzeroberfläche in der Standardanwendungsdomäne auf Französisch (Frankreich) fest, und verwendet dann die <xref:System.AppDomainSetup> Klasse und die <xref:System.AppDomainInitializer> Delegat, der die neutrale Kultur und Benutzeroberflächenkultur in einer neuen Anwendungsdomäne zu festlegen Russisch (Russische Föderation). Ein einzelner Thread werden zwei Methoden wird in jeder Anwendungsdomäne ausgeführt. Beachten Sie, dass die Kultur und Benutzeroberflächenkultur des Threads nicht explizit festgelegt werden. Sie abgeleitet sind aus der Standardkultur und-Benutzeroberflächenkultur der Anwendungsdomäne, in der der Thread ausgeführt wird. Beachten Sie auch, dass die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften zurück, der Standardwert <xref:System.Globalization.CultureInfo> Werte der Anwendungsdomäne, die aktuell ist, wenn der Methodenaufruf durchgeführt wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Weitere Informationen über Kulturen und Anwendungsdomänen finden Sie im Abschnitt "Domänen und Anwendungsthreads" in der [Anwendungsdomänen](~/docs/framework/app-domains/application-domains.md) Thema.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Kultur und aufgabenbasierte asynchrone Vorgänge  
 Die [aufgabenbasierte asynchrone Programmierungsmuster](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) verwendet <xref:System.Threading.Tasks.Task> und <xref:System.Threading.Tasks.Task%601> Objekte Delegaten asynchron auf auszuführende thread des Threadpools. Die bestimmte Thread, auf dem eine bestimmte Aufgabe ausgeführt wird, nicht im Voraus bekannt ist, aber es wird nur zur Laufzeit bestimmt.  
  
 Für apps, die als Ziel der [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder höhere Versionen Kultur ist Bestandteil des Kontexts für einen asynchronen Vorgang. Das heißt, beginnend mit apps für die [!INCLUDE[net_v46](~/includes/net-v46-md.md)], asynchrone Vorgänge standardmäßig erben, die Werte der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften des Threads aus dem sie gestartet werden. Wenn die aktuelle Kultur oder die aktuelle UI-Kultur aus der Systemkultur unterscheidet, und der aktuellen Kultur über mehrere Threads wird die aktuelle Kultur der Threadpool-Thread, der einen asynchronen Vorgang ausgeführt wird.  
  
 Das folgende Beispiel bietet eine einfache Veranschaulichung. Er verwendet den <xref:System.Runtime.Versioning.TargetFrameworkAttribute> Attribut soll die [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. Das Beispiel definiert eine <xref:System.Func%601> zu delegieren, `formatDelegate`, einige als Währungswerte formatierten Zahlen zurückgibt. Im Beispiel wird die aktuelle Systemkultur entweder in Französisch (Frankreich) geändert oder, wenn Französisch (Frankreich) bereits mit der aktuellen Kultur Englisch (USA) ist. Klicken Sie dann diese:  
  
-   Ruft den Delegaten direkt, sodass sie synchron auf dem Haupt-app-Thread ausgeführt wird.  
  
-   Erstellt eine Aufgabe, die den Delegaten asynchron auf einem Threadpool-Thread ausgeführt wird.  
  
-   Erstellt eine Aufgabe, die den Delegaten synchron für den Haupt-app-Thread durch den Aufruf ausgeführt wird die <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> Methode.  
  
 Die Ausgabe des Beispiels zeigt an, wenn die aktuelle Kultur auf Französisch (Frankreich), der geändert wird, wird die aktuelle Kultur des Threads aus dem Vorgänge asynchron aufgerufen werden die aktuelle Kultur für diesen asynchronen Vorgang.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Für apps mit Zielversionen von .NET Framework vor der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], oder für apps, die eine bestimmte Version von .NET Framework nicht erreichen, ist die Kultur des aufrufenden Threads nicht Teil des Kontexts einer Aufgabe. Stattdessen, es sei denn, eine explizit definiert ist, ist die Kultur des neuen Threads standardmäßig die Systemkultur. Im folgenden Beispiel an, die mit dem vorherigen Beispiel identisch ist, außer dass er verfügt nicht über die <xref:System.Runtime.Versioning.TargetFrameworkAttribute> Attribut, wird dies veranschaulicht. Da die Systemkultur des Systems auf dem das Beispiel ausgeführt Englisch (Vereinigte Staaten) war, ist die Kultur der Aufgabe, die asynchron auf einem Threadpool-Thread ausgeführt wird auf, fr-FR, anstatt En-US  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Für apps mit Zielversionen von .NET Framework aus der [!INCLUDE[net_v45](~/includes/net-v45-md.md)] und später aber vor der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], können Sie die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, um sicherzustellen, dass die Kultur des aufrufenden Threads, bei der asynchronen verwendet wird tasks, Führen Sie für Threads im Threadpool. Im folgende Beispiel wird mit dem vorherigen Beispiel identisch, verwendet jedoch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft, um diesen Thread des Threadpools sicherzustellen haben dieselbe Kultur aufweist wie der Haupt-app-Thread.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sind pro-app Domäneneigenschaften; d. h. eingerichtete eine Standardkultur für alle Threads, die nicht explizit eine Kultur in einer bestimmten Anwendungsdomäne zugewiesen. Für apps, die als Ziel der [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder höher, die Kultur des aufrufenden Threads Bestandteil des Kontexts von einer asynchronen Aufgabe bleibt, selbst wenn die Aufgabe über app-Domänengrenzen überschreitet.  
  
 Das folgende Beispiel zeigt, dass die Kultur des aufrufenden Threads die aktuelle Kultur einer aufgabenbasierten asynchronen Vorgang bleibt, selbst wenn die Methode, die die Aufgabe ausgeführt wird, Anwendungsdomänengrenzen überschreitet. Es definiert eine Klasse, `DataRetriever`, mit einer einzelnen Methode, `GetFormattedNumber`, die eine Gleitkommazahl mit doppelter Genauigkeit Zufallszahl zwischen 1 und 1000, die als Währungswert formatiert zurückgibt. Eine erste Aufgabe ausgeführt wird, instanziiert Sie einfach eine `DataRetriever` -Instanz und ruft seine `GetFormattedNumber` Methode. Eine zweite Aufgabe gibt die aktuelle Anwendungsdomäne, erstellt eine neue Anwendungsdomäne, instanziiert ein `DataRetriever` -Instanz in der neuen Anwendungsdomäne und ruft seine `GetFormattedNumber` Methode. Wie die Ausgabe des Beispiels zeigt, die aktuelle Kultur geblieben in den aufrufenden Thread, der erste Task und die zweite Aufgabe beide identisch, wenn es in die Hauptassembly der Anwendung und der zweiten Anwendungsdomäne ausgeführt wurde.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>  
## <a name="cultureinfo-object-serialization"></a>Serialisierung der CultureInfo-Objekten  
 Wenn eine <xref:System.Globalization.CultureInfo> Objekt serialisiert wird, ist alles, was tatsächlich gespeichert ist <xref:System.Globalization.CultureInfo.Name%2A> und <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Es ist erfolgreich deserialisiert nur in einer Umgebung, in denen, die <xref:System.Globalization.CultureInfo.Name%2A> hat die gleiche Bedeutung. Die folgenden drei Beispiele zeigen, warum dies nicht ist immer der Fall:  
  
- Wenn die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Eigenschaftswert ist <xref:System.Globalization.CultureTypes.InstalledWin32Cultures?displayProperty=nameWithType>, und wenn die Kultur in einer bestimmten Version des Windows-Betriebssystems eingeführt wurde, es ist nicht möglich, es auf eine frühere Version von Windows zu deserialisieren. Z. B. eine Kultur, die in Windows 10 eingeführt wurde, kann es unter Windows 8 deserialisiert werden.  
  
-   Wenn die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Wert <xref:System.Globalization.CultureTypes.UserCustomCulture?displayProperty=nameWithType>, und der Computer, auf die deserialisiert werden, keine installiert benutzerdefinierte Kultur, es ist nicht möglich, zu deserialisieren.  
  
-   Wenn die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Wert <xref:System.Globalization.CultureTypes.ReplacementCultures?displayProperty=nameWithType>, und der Computer, auf die deserialisiert werden, verfügt nicht über diese Ersatzkultur, aufheben, die den gleichen Namen, jedoch nicht alle Eigenschaften, die serialisiert. Z. B. En-US ist eine Ersatzkultur auf Computer A, aber nicht auf Computer B, und wenn ein <xref:System.Globalization.CultureInfo> Objekt verweisen auf diese Kultur ist auf Computer A serialisiert und deserialisiert auf Computer B, und klicken Sie dann keine der benutzerdefinierten Eigenschaften der Kultur übertragen. Die Kultur deserialisiert erfolgreich, aber eine andere Bedeutung hat.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Systemsteuerung überschreibt.  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden. Im Allgemeinen sollten Ihre Anwendungen diese Außerkraftsetzungen Benutzer berücksichtigt.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und die angegebene Kultur entspricht die aktuelle Kultur von Windows, die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Alternative Sortierreihenfolgen  
 Einige Kulturen unterstützten mehr als eine Sortierreihenfolge. Beispiel:  
  
-   Die Kultur Spanisch (Spanien) verfügt über zwei Sortierreihenfolgen: internationaler Standard-Sortierreihenfolge und der herkömmlichen Sortierreihenfolge. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt mit dem Namen für den es-ES-Kultur, die internationale Sortierreihenfolge wird verwendet. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt mit dem Kulturnamen Tradnl-es-ES-und die herkömmlichen Sortierreihenfolge wird verwendet.  
  
-   Die Kultur Zh-CN (Chinesisch (vereinfacht, VR China)) werden zwei Sortierreihenfolgen unterstützt: nach Aussprache (Standard) und nach Anzahl der Striche. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt mit dem Namen des Zh-CN-Kultur, für die Standard-Sortierreihenfolge wird verwendet. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt durch eine lokale Bezeichner, der 0 x 00020804, Zeichenfolgen nach Anzahl sortiert sind.  
  
 Die folgende Tabelle enthält die Kulturen, die unterschiedliche Sortierreihenfolgen unterstützen, sowie die Bezeichner für die standardmäßigen und die alternativen Sortierreihenfolgen.  
  
|Kulturname|culture|Standardsortierreihenfolge und Bezeichner|Alternative Sortierreihenfolge und Bezeichner|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Spanisch (Spanien)|International: 0x00000C0A|Traditionell: 0x0000040A|  
|zh-TW|Chinesisch (Taiwan)|Anzahl der Striche: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chinesisch (VRC)|Aussprache: 0x00000804|Anzahl der Striche: 0x00020804|  
|zh-HK|Chinesisch (Hongkong SAR)|Anzahl der Striche: 0x00000c04|Anzahl der Striche: 0x00020c04|  
|zh-SG|Chinesisch (Singapur)|Aussprache: 0x00001004|Anzahl der Striche: 0x00021004|  
|zh-MO|Chinesisch (Macau SAR)|Aussprache: 0x00001404|Anzahl der Striche: 0x00021404|  
|ja-JP|Japanisch (Japan)|Standard: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Koreanisch (Korea)|Standard: 0x00000412|Koreanisch Xwansung – Unicode:  0x00010412|  
|de-DE|Deutsch (Deutschland)|Wörterbuch: 0x00000407|Telefonbuchsortierung DIN: 0x00010407|  
|hu-HU|Ungarisch (Ungarn)|Standard: 0x0000040e|Technische Sortierung: 0x0001040e|  
|ka-GE|Georgisch (Georgien)|Traditionell: 0x00000437|Moderne Sortierung: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Die aktuelle Kultur und die UWP-apps  
 In apps für universelle Windows-Plattform (UWP) die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften sind Lese-/ Schreibzugriff, nur als auch in .NET Framework und .NET Core-apps. UWP-apps erkennt jedoch eine einzelne Kultur. Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> eigenschaftenzuordnung auf den ersten Wert in der [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) Auflistung.  

In .NET Framework und .NET Core-apps, die aktuelle Kultur ist eine pro-Thread-Einstellung, und die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften entsprechend der Kultur und Benutzeroberflächenkultur des aktuellen Threads. In UWP-apps, die aktuelle Kultur ordnet die [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Auflistung, die eine globale einsstellung handelt. Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> oder <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ändert die Kultur der gesamten app; Kultur kann nicht auf einer pro-Thread-Basis festgelegt werden.
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie erstellen eine <xref:System.Globalization.CultureInfo> -Objekt für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> Objekt mit der herkömmlichen Sortierung.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Bezeichner, die <see cref="P:System.Globalization.CultureInfo.LCID" />-Eigenschaft eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts oder ein Nur-Windows-Kulturbezeichner.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Kulturbezeichner angegebenen Kultur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Vordefinierte Kulturbezeichner für die Kulturen, die auf Windows-System verfügbaren finden Sie in der **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47).

 In den meisten Fällen die `culture` Parameter dem entsprechenden National Language Support (NLS) Gebietsschemabezeichner zugeordnet ist. Der Wert des der `culture` Parameter wird der Wert des der <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft des neuen <xref:System.Globalization.CultureInfo>.  
  
 Es wird empfohlen, dass Sie die Gebietsschema-Namen-Konstruktor aufrufen <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, da Gebietsschemanamen LCIDs vorzuziehen sind. Bei benutzerdefinierten Gebietsschemas ist der Name eines Gebietsschemas erforderlich.  
  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden. Wenn der angegebenen Kulturbezeichner den Kulturbezeichner für die aktuelle Windows-Kultur entspricht, wird dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> , verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft, und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo> (z. B., wenn eine der nicht der ausgewählte Kalender ist die <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Wenn der angegebenen Kulturbezeichner den Bezeichner für die aktuelle Windows-Kultur nicht übereinstimmt, wird dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> , die die Standardwerte für die angegebene Kultur verwendet.  
  
 Die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz ist immer auf `true`.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Windows-Kultur ist und der Benutzer hat den Kalender von Hijri gregorianische geändert.  
  
-   Mit `CultureInfo("0x0401")` (die Kultur Namen Ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.GregorianCalendar> (Dies ist der Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
-   Mit `CultureInfo("0x041E")` (die Namen th-ten Kultur) <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.ThaiBuddhistCalendar> (Dies ist der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
 Für die Kulturen, die mit den Euro, wird .NET Framework und Windows XP standardmäßig Währung als Euro festlegen. Werden jedoch in ältere Versionen von Windows nicht. Wenn der Benutzer eine ältere Version von Windows nicht die Einstellung "Währung" über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung geändert hat, kann die Währung aus diesem Grund falsch sein. Um die .NET Framework-Standardeinstellung für die Währung zu verwenden, sollte die Anwendung verwenden eine <xref:System.Globalization.CultureInfo> Konstruktorüberladung, die akzeptiert eine `useUserOverride` Parameter und setzen es auf `false`.  
  
> [!NOTE]
>  Für Abwärtskompatibilität einer Kultur mithilfe einer `culture` Parameter 0 x 0004 oder 0x7c04 besitzen, wird eine <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft Zh-CHS oder Zh-CHT bzw. Sie sollten stattdessen lieber die Kultur, die über die aktuellen Namen der Standardkultur des Zh-Hans oder Zh-Hant, erstellen, wenn Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> ist kein gültiger Kulturbezeichner. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="culture" /> vom Betriebssystem; Wenn das Betriebssystem, Kultur, nicht unterstützt die -Methode löst eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name, eine <see cref="P:System.Globalization.CultureInfo.Name" />-Eigenschaft einer vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Klasse oder ein nur für Windows definierter Kulturname. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Namen angegebenen Kultur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kulturnamen auf Windows-Systemen, finden Sie unter den **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47). Darüber hinaus beginnend mit Windows 10, `name` möglich, dass alle gültigen BCP-47-Sprachtag.  
  
 Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, der Konstruktor erstellt eine Instanz der invarianten Kultur; Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft.  
  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden. Wenn der Kulturbezeichner zugeordnet `name` Übereinstimmungen, die der Kulturbezeichner für die aktuelle Windows-Kultur, dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> Objekt, das die Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der verwendet<xref:System.Globalization.DateTimeFormatInfo>vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft, und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Wenn der Kulturbezeichner zugeordnet `name` entspricht nicht der Kulturbezeichner für die aktuelle Windows-Kultur, dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> Objekt, das die Standardwerte für die angegebene Kultur verwendet.  
  
 Die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz ist immer auf `true`.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Kultur von Windows ist und der Benutzer in den gregorianischen Kalender von Hijri geändert.  
  
-   Mit `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.GregorianCalendar> (Dies ist der Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
-   Mit `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.ThaiBuddhistCalendar> (Dies ist der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
 Die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft des neuen <xref:System.Globalization.CultureInfo> festgelegt ist, auf die Kultur-ID, die dem angegebenen Namen zugeordnet.  
  
 Für die Kulturen, die mit den Euro, wird .NET Framework und Windows XP standardmäßig Währung als Euro festlegen. Jedoch tun ältere Versionen von Windows nicht dies. Wenn der Benutzer eine ältere Version von Windows nicht die Einstellung "Währung" über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung geändert hat, kann die Währung aus diesem Grund falsch sein. Um die .NET Framework-Standardeinstellung für die Währung zu verwenden, sollte die Anwendung verwenden eine <xref:System.Globalization.CultureInfo> Konstruktorüberladung, die akzeptiert eine `useUserOverride` Parameter und setzen es auf `false`.  
  
   
  
## Examples  
 Im folgende Beispiel ruft die aktuelle Kultur ab. Wenn es etwas anderes als die Kultur Französisch (Frankreich) ist, ruft sie die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor zum Instanziieren einer <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur Französisch (Frankreich) darstellt und die aktuelle Threadkultur erleichtert. Andernfalls es instanziiert einen <xref:System.Globalization.CultureInfo> Objekt, das von der Kultur Französisch (Luxemburg), und erleichtert die aktuelle Kultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ist kein gültiger Kulturname. Weitere Informationen finden Sie im Abschnitt "Hinweise zu Aufrufern".</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt und <paramref name="name" /> ist nicht der Name einer Kultur zusätzliche oder ersetzt die löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Bezeichner, die <see cref="P:System.Globalization.CultureInfo.LCID" />-Eigenschaft eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts oder ein Nur-Windows-Kulturbezeichner.</param>
        <param name="useUserOverride">Ein boolescher Wert, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen verwendet werden sollen (<see langword="true" />) oder ob die Standardkultureinstellungen verwendet werden (<see langword="false" />).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Kulturbezeichner angegebenen Kultur und auf der Grundlage des booleschen Werts, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen des Systems verwendet werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Vordefinierte Kulturbezeichner auf Windows-Systemen verfügbar finden Sie in der **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47).

 In den meisten Fällen die `culture` Parameter dem entsprechenden National Language Support (NLS) Gebietsschemabezeichner zugeordnet ist. Der Wert des der `culture` Parameter wird der Wert des der <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft des neuen <xref:System.Globalization.CultureInfo>.  
  
 Es wird empfohlen, dass Sie die Gebietsschema-Namen-Konstruktor aufrufen <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, da Gebietsschemanamen LCIDs vorzuziehen sind. Bei benutzerdefinierten Gebietsschemas ist der Name eines Gebietsschemas erforderlich.  
  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Anwendungen sollten die überschreibungen in der Regel nicht unterbinden. Beachten Sie, dass untersagen von Außerkraftsetzungen nicht selbst Datenstabilität garantiert; finden Sie im Blogeintrag [Kultur sollte nicht als (mit Ausnahme von invarianten) stabil betrachtet werden](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz auf `true` und der angegebenen Kulturbezeichner entspricht dem Bezeichner für die aktuelle Windows-Kultur, dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> , verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für die Eigenschaften für von der <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften von der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Dieser Konstruktor erstellt andernfalls einen <xref:System.Globalization.CultureInfo> , die die Standardwerte für die angegebene Kultur verwendet.  
  
 Der Wert des der `useUserOverride` -Parameter wird der Wert, der die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Eigenschaft.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Kultur von Windows ist und der Benutzer hat den Kalender von Hijri gregorianische geändert.  
  
-   Mit `CultureInfo("0x0401", true)` (die Kultur Namen Ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.GregorianCalendar> (Dies ist der Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
-   Mit `CultureInfo("0x0401", false)` (die Kultur Namen Ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.HijriCalendar> (Dies ist der Standardkalender für Ar-SA) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `false`.  
  
-   Mit `CultureInfo("0x041E", true)` (die Namen th-ten Kultur) <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.ThaiBuddhistCalendar> (Dies ist der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
-   Mit `CultureInfo("0x041E", false)` (die Namen th-ten Kultur) <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.ThaiBuddhistCalendar> (Dies ist der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `false`.  
  
 Für die Kulturen, die mit den Euro, wird .NET Framework und Windows XP standardmäßig Währung als Euro festlegen. Werden jedoch in ältere Versionen von Windows nicht. Wenn der Benutzer eine ältere Version von Windows nicht die Einstellung "Währung" über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung geändert hat, kann die Währung aus diesem Grund falsch sein. Um die .NET Framework-Standardeinstellung für die Währung zu verwenden, die Anwendung festlegen, sollten die `useUserOverride` Parameter `false`.  
  
> [!NOTE]
>  Für Abwärtskompatibilität einer Kultur mithilfe einer `culture` Parameter 0 x 0004 oder 0x7c04 besitzen, wird eine <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft Zh-CHS oder Zh-CHT bzw. Sie sollten stattdessen lieber die Kultur, die über die aktuellen Namen der Standardkultur des Zh-Hans oder Zh-Hant, erstellen, wenn Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> ist kein gültiger Kulturbezeichner. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="culture" /> vom Betriebssystem; Wenn das Betriebssystem, Kultur, nicht unterstützt die -Methode löst eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name, eine <see cref="P:System.Globalization.CultureInfo.Name" />-Eigenschaft einer vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Klasse oder ein nur für Windows definierter Kulturname. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <param name="useUserOverride">Ein boolescher Wert, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen verwendet werden sollen (<see langword="true" />) oder ob die Standardkultureinstellungen verwendet werden (<see langword="false" />).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Namen angegebenen Kultur und auf der Grundlage des booleschen Werts, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen des Systems verwendet werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste von vordefinierten Kulturnamen finden Sie in der **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47). Darüber hinaus beginnend mit Windows 10, `name` möglich, dass alle gültigen BCP-47-Sprachtag.  
  
Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, der Konstruktor erstellt eine Instanz der invarianten Kultur; Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft.  
  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Anwendungen sollten die überschreibungen in der Regel nicht unterbinden. Beachten Sie, dass untersagen von Außerkraftsetzungen nicht selbst Datenstabilität garantiert; finden Sie im Blogeintrag [Kultur sollte nicht als (mit Ausnahme von invarianten) stabil betrachtet werden](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz auf `true` und der Namen der angegebenen Kultur zugeordnete Kulturbezeichner entspricht den Kulturbezeichner für die aktuelle Windows-Kultur, dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> , verwendet diese Außerkraftsetzungen einschließlich der Einstellungen für die Eigenschaften des Benutzers der <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft, und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Dieser Konstruktor erstellt andernfalls einen <xref:System.Globalization.CultureInfo> , die die Standardwerte für die angegebene Kultur verwendet.  
  
 Der Wert des der `useUserOverride` -Parameter wird der Wert, der die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Eigenschaft.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Kultur von Windows ist und der Benutzer in den gregorianischen Kalender von Hijri geändert.  
  
-   Mit `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.GregorianCalendar> (Dies ist der Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
-   Mit `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.HijriCalendar> (Dies ist der Standardkalender für Ar-SA) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `false`.  
  
-   Mit `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.ThaiBuddhistCalendar> (Dies ist der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `true`.  
  
-   Mit `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> nastaven NA hodnotu <xref:System.Globalization.ThaiBuddhistCalendar> (Dies ist der Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> nastaven NA hodnotu `false`.  
  
 Die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft des neuen <xref:System.Globalization.CultureInfo> festgelegt ist, auf die Kultur-ID, die dem angegebenen Namen zugeordnet.  
  
 Für die Kulturen, die mit den Euro, wird .NET Framework und Windows XP standardmäßig Währung als Euro festlegen. Jedoch tun ältere Versionen von Windows nicht dies. Wenn der Benutzer eine ältere Version von Windows nicht die Einstellung "Währung" über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung geändert hat, kann die Währung aus diesem Grund falsch sein. Um die .NET Framework-Standardeinstellung für die Währung zu verwenden, die Anwendung festlegen, sollten die `useUserOverride` Parameter `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ist kein gültiger Kulturname. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt und <paramref name="name" /> ist nicht der Name einer Kultur zusätzliche oder ersetzt die löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den von der Kultur verwendeten Standardkalender ab.</summary>
        <value>Ein <see cref="T:System.Globalization.Calendar" />, der den von der Kultur verwendeten Standardkalender darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und die angegebene Kultur entspricht die aktuelle Kultur von Windows, die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Aus diesem Grund Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true`, der Wert dieser Eigenschaft kann von den von der Kultur verwendeten Standardkalender unterscheiden.  
  
 Ihre Anwendung ändert den Kalender ein, die die aktuelle <xref:System.Globalization.CultureInfo> durch Festlegen der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> Eigenschaft <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, die ist eine Instanz von der <xref:System.Globalization.DateTimeFormatInfo> Klasse. Der neue Kalender muss eine der aufgeführten im Kalender <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> enthält auch andere Eigenschaften, die der Datums- und uhrzeitformatierungen zugeordnet sind, anpassen <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert die zwischengespeicherten kulturbezogenen Informationen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informationen, z. B. die standardmäßige Kultur und Formatierungsmuster wird beim ersten zwischengespeichert, die sie angefordert werden. Informationen während der Lebensdauer des Ändern der <xref:System.AppDomain>, z. B. wenn der Benutzer ändert Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung. Allerdings die <xref:System.Globalization.CultureInfo> Klasse erkennt nicht automatisch Änderungen in den Systemeinstellungen.  
  
 Die <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Methode löscht den Cache des <xref:System.Globalization.CultureInfo> Objekten von erstellt <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> und aktualisiert die Informationen in den <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, und <xref:System.Globalization.RegionInfo.CurrentRegion%2A> Eigenschaften auf Grundlage der aktuellen Systemeinstellungen.  
  
 Die <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Methode wird nicht aktualisiert die Informationen in den <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft für die vorhandenen Threads. Zukünftige Threads müssen jedoch alle neuen <xref:System.Globalization.CultureInfo> Eigenschaftswerte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>Eine Kopie der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Klon überschreibbar. selbst wenn die ursprüngliche <xref:System.Globalization.CultureInfo> ist schreibgeschützt. Aus diesem Grund können die Eigenschaften des Klons geändert werden.  
  
 Eine flache Kopie eines Objekts ist eine Kopie des Objekts nur. Wenn das Objekt Verweise auf andere Objekte enthält, erstellt der flache Kopie keine Kopien der Objekte verwiesen wird. Es verweist stattdessen auf die ursprünglichen Objekte. Im Gegensatz dazu erstellt eine tiefe Kopie eines Objekts auf, eine Kopie des Objekts und eine Kopie aller Elemente auf die dieses Objekt direkt oder indirekt verweist.  
  
 Die <xref:System.Globalization.CultureInfo.Clone%2A> Methode wird eine verbesserte flache Kopie erstellt. Die zurückgegebenen Objekte die <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, und <xref:System.Globalization.CultureInfo.Calendar%2A> Eigenschaften werden ebenfalls kopiert. Daher ist die geklonte <xref:System.Globalization.CultureInfo> Objekt kann die kopierten Eigenschaften ändern, ohne Auswirkungen auf die ursprüngliche <xref:System.Globalization.CultureInfo> Objekt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass CultureInfo.Clone auch klont die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> zugeordneten Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CompareInfo" /> ab, in der festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</summary>
        <value>Die <see cref="T:System.Globalization.CompareInfo" />, in der festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.CompareInfo%2A> -Eigenschaft gibt eine <xref:System.Globalization.CompareInfo> Objekt, das kulturspezifische Informationen, die in kulturabhängige Sortierung und Vergleichsvorgänge verwendet bereitstellt.  
  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und die angegebene Kultur entspricht die aktuelle Kultur von Windows, die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierung.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name oder der Name eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Erstellt eine <see cref="T:System.Globalization.CultureInfo" />, die die zum angegebenen Namen gehörige spezifische Kultur darstellt.</summary>
        <returns>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das Folgendes darstellt: 
Die invariante Kultur, wenn <paramref name="name" /> eine leere Zeichenfolge ist ("").  
  
- oder - 
Die spezifische <paramref name="name" /> zugeordnete Kultur, wenn <paramref name="name" /> eine neutrale Kultur ist.  
  
- oder - 
Die von <paramref name="name" /> angegebene Kultur, wenn <paramref name="name" /> bereits eine bestimmte Kultur ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Methode bindet einen Aufruf der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor.  
  
> [!NOTE]
> Eine Liste der vordefinierten Kulturnamen auf Windows-Systemen, finden Sie unter den **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47). Darüber hinaus beginnend mit Windows 10, `name` möglich, dass alle gültigen BCP-47-Sprachtag.  
  
 Kulturen werden in drei Gruppen zusammengefasst: der invarianten Kultur, die neutralen Kulturen und die spezifischen Kulturen. Weitere Informationen finden Sie unter der Beschreibung der <xref:System.Globalization.CultureInfo> Klasse.  
  
 Wenn Sie der Bezeichner der spezifischen Kultur, die von dieser Methode zurückgegebene den Kulturbezeichner für die aktuelle Windows-Kultur entspricht, erstellt diese Methode eine <xref:System.Globalization.CultureInfo> überschreibt-Objekt, das die Windows-Kultur verwendet. Die Außerkraftsetzungen sind Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft und die <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Instanziiert eine <xref:System.Globalization.CultureInfo> Objekt, das standardmäßig kultureinstellungen anstatt Benutzer überschreibt, rufen Sie mit der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor mit einem Wert von `false` für die `useUserOverride` Argument.  
  
 Obwohl die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Methodennamen enthält den Begriff "Spezifisch", beachten Sie, dass die Kultur zwischen verschiedenen Versionen oder aufgrund von Kulturen oder aufgrund von überschreibungen ändern können. Verwenden Sie die invariante Kultur oder binär- oder feste Form zum Speichern von Daten an.  
  
   
  
## Examples  
 Das folgende Beispiel ruft ein Array von <xref:System.Globalization.CultureInfo> neutrale Kulturen aus darstellende – Objekte die <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode und das Array sortiert. Wenn sie die Elemente im Array durchläuft, übergibt den Namen der einzelnen neutrale Kultur, die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> -Methode und zeigt der Namen der spezifischen Kultur, die von der-Methode zurückgegeben.  
  
> [!NOTE]
>  Im Beispiel wird die Kulturnamen Zh-CHS und Zh-CHT. Jedoch Anwendungen, Windows Vista und später Zh-Hans statt Zh-CHS und Zh-Hant statt Zh-CHT verwenden sollten. Zh-Hans und Zh-Hant wird den aktuellen Standard darstellen, und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
>   
>  Beachten Sie außerdem, dass die Ergebnisse des Beispiels auf einer Installation von Windows Taiwanesisch, abweichen können, in dem die Eingabe einer Chinesisch (traditionell) neutralen Kultur (Zh, Zh-CHT oder Zh-Hant) Zh-TW zurückgibt.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ist kein gültiger Kulturname.  
  
- oder - 
Der von <paramref name="name" /> angegebenen Kultur ist keine bestimmte Kultur zugeordnet.</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="name" /> ist NULL.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kulturtypen ab, die das aktuelle <see cref="T:System.Globalization.CultureInfo" />-Objekt betreffen.</summary>
        <value>Eine bitweise Kombination von einem oder mehreren <see cref="T:System.Globalization.CultureTypes" />-Werten. Es ist kein Standardwert vorhanden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.Globalization.CultureTypes> Enumeration und die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Eigenschaft.  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die vom aktuellen Thread verwendete Kultur darstellt, oder setzt dieses Objekt.</summary>
        <value>Ein Objekt, das die vom aktuellen Thread verwendete Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo> -Objekt, das von dieser Eigenschaft zurückgegeben wird und die zugeordneten Objekte zu bestimmen, das Standardformat für Datum, Uhrzeit, Zahlen, Currency-Werte, die Sortierreihenfolge des Texts, Groß-/ Kleinschreibungskonventionen und Zeichenfolgenvergleichen.  
  
 Die aktuelle Kultur ist eine Eigenschaft des ausgeführten Threads. Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft ist eine weitere leistungsstarke Entsprechung zum Abrufen der <xref:System.Globalization.CultureInfo> zurückgegebenes Objekt der `Thread.CurrentThread.CurrentCulture` Eigenschaft.
  
> [!NOTE]
>  In .NET Framework 4.5.2 und frühere Versionen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> -Eigenschaft ist schreibgeschützt.  d. h. Sie können den Wert der Eigenschaft abrufen, aber es kann nicht festgelegt werden. Um die aktuelle Kultur zu ändern, weisen Sie die <xref:System.Globalization.CultureInfo> -Objekt, das die neue Kultur entspricht der `Thread.CurrentThread.CurrentCulture` Eigenschaft. Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentCulture%2A> -Eigenschaft ist schreibgeschützt; Sie können sowohl festlegen und Abrufen des Eigenschaftswerts. Wenn Sie den Wert der Eigenschaft zum Festlegen einer <xref:System.Globalization.CultureInfo> -Objekt, das eine neue Kultur den Wert der darstellt, die `Thread.CurrentThread.CurrentCulture` Eigenschaft ändert sich ebenfalls.  
  
 In diesem Abschnitt  
  
 [Wie wird die Kultur eines Threads bestimmt.](#ThreadCulture)   
 [Die aktuelle Kultur](#Getting)   
 [Explizites Festlegen der CurrentCulture-Eigenschaft](#ExplicitSetting)   
 [Die aktuelle Kultur und Überschreibungen](#Overrides)   
 [Die Kultur und die Windows-Apps](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Wie wird die Kultur eines Threads bestimmt.  
 Wenn ein Thread gestartet wird, wird die Kultur zunächst wie folgt bestimmt:  
  
-   Durch Abrufen der Kultur, die angegeben wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird, der den Wert der Eigenschaft ist nicht `null`.  
  
-   Wenn der Thread einen Threadpool-Thread, der ausgeführt wird, einen aufgabenbasierten asynchronen Vorgang und die app aufgerichtet ist die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder eine höhere Version von .NET Framework, die Kultur, hängt von der Kultur des aufrufenden Threads.  Im folgende Beispiel wird die aktuelle Kultur, Portugiesisch (Brasilien), und startet sechs Aufgaben, von die jedes eigene Thread-ID, die Aufgaben-ID und die aktuelle Kultur wird angezeigt. Jede der Aufgaben (und die Threads) hat die Kultur des aufrufenden Threads geerbt.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" in der <xref:System.Globalization.CultureInfo> Thema.  
  
-   Durch Aufrufen der Windows `GetUserDefaultLocaleName` Funktion.  
  
 Beachten Sie, dass wenn Sie festlegen, dass eine bestimmte Kultur, die von dem System installierten Kultur oder die bevorzugte Kultur des Benutzers und die Anwendung gestartet, mehrere Threads wird, die aktuelle Kultur dieser Threads die Kultur, die von zurückgegeben wird das `GetUserDefaultLocaleName` Funktion, es sei denn, Sie über eine Kultur zugewiesen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird.  
  
 Weitere Informationen darüber, wie die Kultur eines Threads bestimmt wird, finden Sie im Abschnitt "Kultur und Threads" in der <xref:System.Globalization.CultureInfo> Referenzseite.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Abrufen der aktuellen Kultur  
 Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft ist eine pro-Thread-Einstellung; d. h. jeder Thread kann seine eigene Kultur verfügen. Erhalten Sie durch Abrufen des Werts, der die Kultur des aktuellen Threads die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft, wie im folgenden Beispiel illustriert.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Sie können auch den Wert der Kultur des aktuellen Threads Abrufen der <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> Eigenschaft.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Explizites Festlegen der CurrentCulture-Eigenschaft  
 Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], um die Kultur ändern, mit dem eines vorhandenen Threads abonnieren, Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft, um der neuen Kultur. Wenn Sie explizit ändern, die Kultur eines Threads auf diese Weise, die geändert werden weiterhin auf, wenn der Thread Anwendungsdomänengrenzen überschreitet. Im folgende Beispiel ändert die aktuelle Threadkultur, Niederländisch (Niederlande). Es zeigt auch, wenn der aktuelle Thread Anwendungsdomänengrenzen überschreitet, dessen aktuelle Kultur geänderten bleibt.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Ändern die Kultur mithilfe der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft ist erforderlich, eine <xref:System.Security.Permissions.SecurityPermission> Berechtigung mit der <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> Wert festgelegt. Bearbeiten von Threads ist aufgrund der mit Threads verbundenen Sicherheitszustands riskant. Daher sollte diese Berechtigung erteilt werden, nur für vertrauenswürdigen Code, und klicken Sie dann nur nach Bedarf. Sie können die Threadkultur in teilweise vertrauenswürdigem Code nicht ändern.  
  
 Beginnend mit der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], Sie können die aktuelle Threadkultur explizit auf eine bestimmte Kultur (z. B. Französisch (Kanada)) oder eine neutrale Kultur (z. B. Französisch) ändern. Wenn eine <xref:System.Globalization.CultureInfo> Objekt stellt eine neutrale Kultur, die Werte der <xref:System.Globalization.CultureInfo> Eigenschaften, z. B. <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, und <xref:System.Globalization.CultureInfo.TextInfo%2A> entsprechend die spezifische Kultur, die zugeordnet wird die neutrale Kultur. Die vorherrschende Kultur für die neutrale Kultur Englisch ist beispielsweise Englisch (Vereinigte Staaten); die vorherrschende Kultur für die Kultur "Deutsch" "Deutsch (Deutschland)". Das folgende Beispiel veranschaulicht den Unterschied bei der Formatierung, wenn die aktuelle Kultur auf eine bestimmte Kultur Französisch (Kanada) und eine neutrale Kultur festgelegt ist, Französisch.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Können Sie auch die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft zusammen mit der <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> -Eigenschaft zum Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft einer ASP.NET-Anwendung für den Benutzer die bevorzugte Kultur des, wie im folgende Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>Die aktuelle Kultur und Überschreibungen  
 Windows ermöglicht Benutzern, die standardmäßige Eigenschaftswerte überschreiben die <xref:System.Globalization.CultureInfo> Objekt und die zugeordneten Objekte mithilfe von **Regions- und Sprachoptionen** in der Systemsteuerung. Die <xref:System.Globalization.CultureInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft spiegelt wider, überschreibt diese Benutzer in den folgenden Fällen:  
  
-   Wenn die aktuelle Threadkultur implizit, durch die Windows festgelegt ist `GetUserDefaultLocaleName` Funktion.  
  
-   Wenn die aktuelle Threadkultur definiert die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft entspricht der aktuellen Kultur der Windows-System.  
  
-   Wenn die aktuelle Threadkultur explizit festgelegt wird, für eine Kultur, die zurückgegeben werden, indem die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> -Methode, und die aktuelle Systemkultur von Windows Kultur entspricht.  
  
-   Wenn die aktuelle Threadkultur explizit, für eine Kultur, die zur Instanziierung festgelegt wird von der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor, und die aktuelle Systemkultur von Windows Kultur entspricht.  
  
 In einigen Fällen, insbesondere für Server-Anwendungen, die aktuelle Kultur festlegen eine <xref:System.Globalization.CultureInfo> -Objekt, das überschreibungen widerspiegelt, kann unerwünscht sein. Stattdessen können Sie die aktuelle Threadkultur festlegen, um eine <xref:System.Globalization.CultureInfo> -Objekt, das Benutzer nicht widerspiegelt Außerkraftsetzungen auf folgende Weise:  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor mit einem Wert von `false` für die `useUserOverride` Argument.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Methode, die einem zwischengespeicherten, schreibgeschützten zurückgibt <xref:System.Globalization.CultureInfo> Objekt.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Die aktuelle Kultur und die UWP-apps  
 In apps für universelle Windows-Plattform (UWP) die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ist Lese-/ Schreibzugriff, ebenso wie in .NET Framework und .NET Core-apps; Sie können es verwenden, um abzurufen und die aktuelle Kultur festgelegt. UWP-apps unterscheiden zwischen der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur jedoch nicht. Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> eigenschaftenzuordnung auf den ersten Wert in der [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) Auflistung.  

In .NET Framework und .NET Core-apps, die aktuelle Kultur ist eine pro-Thread-Einstellung, und die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft spiegelt wider, die Kultur des aktuellen Threads. In UWP-apps, die aktuelle Kultur ordnet die [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Eigenschaft, die eine globale einsstellung handelt. Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ändert die Kultur der gesamten app; Kultur kann nicht auf einer pro-Thread-Basis festgelegt werden.
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie so ändern Sie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> des aktuellen Threads.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Festlegen der aktuellen Kultur. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die aktuelle Benutzeroberfläche darstellt, mit deren Hilfe der Ressourcen-Manager kulturabhängige Ressourcen zur Laufzeit sucht, oder setzt dieses Objekt.</summary>
        <value>Die aktuelle Kultur, mit deren Hilfe der Ressourcen-Manager zur Laufzeit kulturabhängige Ressourcen sucht, oder legt diese fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Benutzeroberflächenkultur ist eine Eigenschaft pro Thread. D. h. verfügt jeder Thread eine eigene aktuelle UI-Kultur. Diese Eigenschaft ist identisch mit dem Abrufen oder, ab der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]wird durch das Festlegen der <xref:System.Globalization.CultureInfo> zugewiesene Objekt die `System.Threading.Thread.CurrentThread.CurrentUICulture` Eigenschaft. Wenn ein Thread gestartet wird, wird der UI-Kultur zunächst wie folgt bestimmt:  
  
-   Durch Abrufen der Kultur, die angegeben wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird, der den Wert der Eigenschaft ist nicht `null`.  
  
-   Wenn der Thread einen Threadpool-Thread, der ausgeführt wird, einen aufgabenbasierten asynchronen Vorgang und die app aufgerichtet ist die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder eine höhere Version von .NET Framework, die UI-Kultur, hängt von der UI-Kultur des aufrufenden Threads.  Im folgende Beispiel ändert sich die aktuelle Benutzeroberflächenkultur in Portugiesisch (Brasilien), und startet sechs Aufgaben, von die jedes eigene Thread-ID, die Aufgaben-ID und die aktuelle Kultur der Benutzeroberfläche anzeigt. Jede der Aufgaben (und die Threads) hat die UI-Kultur des aufrufenden Threads geerbt.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" in der <xref:System.Globalization.CultureInfo> Thema.  
  
-   Durch Aufrufen der Windows `GetUserDefaultUILanguage` Funktion.  
  
> [!NOTE]
>  In der [!INCLUDE[Compact](~/includes/compact-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ist schreibgeschützt. Die aktuelle Benutzeroberflächenkultur hängt von den regionalen Einstellungen des Systems und kann nicht programmgesteuert geändert werden.  
  
 Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], so ändern Sie die Kultur der Benutzeroberfläche verwendet werden soll, von einem Thread, legen Sie die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft, um der neuen Kultur. Wenn Sie explizit ändern, die Kultur eines Threads Benutzeroberfläche auf diese Weise, die geändert werden weiterhin auf, wenn der Thread Anwendungsdomänengrenzen überschreitet.  
  
> [!NOTE]
>  In .NET Framework 4.5.2 und frühere Versionen der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> -Eigenschaft ist schreibgeschützt.  d. h. Sie können den Wert der Eigenschaft abrufen, aber es kann nicht festgelegt werden. Um die aktuelle Benutzeroberflächenkultur, Sie weisen die <xref:System.Globalization.CultureInfo> Objekt, das neue UI-Kultur darstellt. die `Thread.CurrentThread.CurrentUICulture` Eigenschaft. Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> -Eigenschaft ist schreibgeschützt; Sie können sowohl festlegen und Abrufen des Eigenschaftswerts. Wenn Sie den Wert der Eigenschaft zum Festlegen einer <xref:System.Globalization.CultureInfo> -Objekt, das eine neue Kultur den Wert der darstellt, die `Thread.CurrentThread.CurrentCulture` Eigenschaft ändert sich ebenfalls.  
  
 In diesem Abschnitt  
  
 [Die aktuelle Benutzeroberflächenkultur abrufen](#Getting)   
 [Explizites Festlegen der aktuellen Benutzeroberflächenkultur](#Explicit)   
 [Implizites Festlegen der aktuellen Benutzeroberflächenkultur](#Implicit)   
 [Sicherheitsüberlegungen](#Security)   
 [Die aktuelle Benutzeroberflächenkultur und die Windows-apps](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Die aktuelle Benutzeroberflächenkultur abrufen  
 Die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> -Eigenschaft ist eine pro-Thread-Einstellung; d. h. jeder Thread kann einen eigenen Benutzeroberflächenkultur verfügen. Erhalten Sie die UI-Kultur des aktuellen Threads durch Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> -Eigenschaft, wie im folgenden Beispiel illustriert.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Sie können auch den Wert des UI-Kultur des aktuellen Threads vom Abrufen der <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Explizites Festlegen der aktuellen Benutzeroberflächenkultur  
 Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], können Sie ändern die aktuelle Benutzeroberflächenkultur Zuweisen einer <xref:System.Globalization.CultureInfo> -Objekt, das die neue Kultur entspricht der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Die aktuelle Benutzeroberflächenkultur kann entweder eine bestimmte Kultur (z. B. En-US oder de-DE) oder eine neutrale Kultur (z. B. "de" oder "de") festgelegt werden. Im folgenden Beispiel wird die aktuelle Benutzeroberflächenkultur auf "fr-FR" bzw. Französisch (Frankreich).  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 Sie können in einer Multithreadanwendung kann explizit die Kultur der Benutzeroberfläche eines beliebigen Threads festlegen, durch Zuweisen einer <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur des Threads darstellt <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Wenn der Thread, dessen Kultur, die Sie festlegen möchten, der aktuelle Thread befindet, können Sie die neue Kultur zum Zuweisen der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Wenn die Benutzeroberflächenkultur eines Threads explizit festgelegt ist, dass der Thread das dieselbe Kultur beibehalten, auch wenn es überschreitet die Grenzen von Anwendungsdomänen hinweg und Code in einer anderen Anwendungsdomäne führt.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Implizites Festlegen der aktuellen Benutzeroberflächenkultur  
 Wenn ein Thread auf, einschließlich der Thread der hauptanwendung, erste wird erstellt, wird standardmäßig die aktuelle Benutzeroberflächenkultur wird festgelegt, und wie folgt:  
  
-   Mithilfe der Kultur definiert wird, durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> -Eigenschaft für die aktuelle Anwendungsdomäne ist der Eigenschaftswert nicht `null`.  
  
-   Mithilfe der Standardkultur des Systems. Auf Systemen, die das Windows-Betriebssystem verwenden, ruft die common Language Runtime den Windows `GetUserDefaultUILanguage` Funktion, um die aktuelle Benutzeroberflächenkultur festgelegt. `GetUserDefaultUILanguage` Gibt die standardmäßige Benutzeroberflächenkultur, die vom Benutzer festgelegt wird. Wenn der Benutzer eine Standardsprache für die Benutzeroberfläche nicht festgelegt, wird die Kultur, die ursprünglich auf dem System installierten zurückgegeben.  
  
 Wenn der Thread führt Code in einer anderen Anwendungsdomäne Anwendungsgrenzen überschreitet, wird die Kultur auf die gleiche Weise wie für einen neu erstellten Thread bestimmt.  
  
 Beachten Sie, dass wenn Sie festlegen, dass eine bestimmte UI-Kultur, die sich von der Benutzeroberflächenkultur-System installiert ist oder der Benutzer die bevorzugte Kultur der Benutzeroberfläche des, und die Anwendung gestartet, mehrere Threads wird, die aktuelle Benutzeroberflächenkultur dieser Threads die Kultur, die von der zurückgegebenen`GetUserDefaultUILanguage`funktionieren, es sei denn, Sie über eine Kultur zugewiesen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Ändern der Kultur des aktuellen Threads erfordert eine <xref:System.Security.Permissions.SecurityPermission> Berechtigung mit der <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> Wert festgelegt.  
  
> [!CAUTION]
>  Bearbeiten von Threads ist aufgrund der mit Threads verbundenen Sicherheitszustands riskant. Daher sollte diese Berechtigung erteilt werden, nur für vertrauenswürdigen Code, und klicken Sie dann nur nach Bedarf. Sie können die Threadkultur in teilweise vertrauenswürdigem Code nicht ändern.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>Die aktuelle Benutzeroberflächenkultur und die UWP-apps  
 
In apps für universelle Windows-Plattform (UWP) die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ist Lese-/ Schreibzugriff, ebenso wie in .NET Framework und .NET Core-apps; Sie können es verwenden, um abzurufen und die aktuelle Kultur festgelegt. UWP-apps unterscheiden zwischen der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur jedoch nicht. Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> eigenschaftenzuordnung auf den ersten Wert in der [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) Auflistung.

In .NET Framework und .NET Core-apps, die aktuelle Benutzeroberflächenkultur ist eine pro-Thread-Einstellung, und die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft spiegelt wider, die UI-Kultur des aktuellen Threads. In UWP-apps, die aktuelle Kultur ordnet die [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Eigenschaft, die eine globale einsstellung handelt. Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ändert die Kultur der gesamten app; Kultur kann nicht auf einer pro-Thread-Basis festgelegt werden.    
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie so ändern Sie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> des aktuellen Threads.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft ist auf einen Kulturnamen festgelegt, der nicht zum Suchen einer Ressourcendatei verwendet werden kann. Ressourcendateinamen dürfen nur Buchstaben, Zahlen, Bindestriche oder Unterstriche enthalten.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Festlegen der aktuellen Benutzeroberflächenkultur. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.DateTimeFormatInfo" /> ab, die das für die Kultur spezifische Format zum Anzeigen von Datumsangaben und Uhrzeiten definiert, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.DateTimeFormatInfo" />, die das für die Kultur spezifische Format zum Anzeigen von Datumsangaben und Uhrzeiten definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und die angegebene Kultur entspricht die aktuelle Kultur von Windows, die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Der Wert des der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft und die <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft wird nicht berechnet, bis die Anwendung die Eigenschaft zugreift. Wenn der Benutzer die aktuelle Kultur in eine neue Kultur ändern kann, während die Anwendung ausgeführt wird, und klicken Sie dann die Anwendung greift auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> oder <xref:System.Globalization.CultureInfo.NumberFormat%2A> -Eigenschaft, die Anwendung ruft die Standardwerte für die neue Kultur die Außerkraftsetzungen für die ursprüngliche Kultur. Um die Außerkraftsetzungen für die ursprüngliche aktuelle Kultur zu erhalten, sollte Zugriff auf die Anwendung die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften vor dem Ändern der aktuellen Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass CultureInfo.Clone auch klont die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> zugeordneten Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf NULL festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />-Eigenschaft oder eine der <see cref="T:System.Globalization.DateTimeFormatInfo" />-Eigenschaften wird festgelegt, und die <see cref="T:System.Globalization.CultureInfo" /> ist schreibgeschützt.</exception>
        <block subset="none" type="usage"><para>Wenn <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> ist die <see cref="T:System.Globalization.TaiwanCalendar" /> jedoch <see cref="P:System.Threading.Thread.CurrentCulture" /> ist nicht festgelegt, Chinesisch (Taiwan), klicken Sie dann mit der Bezeichnung Zh-TW, <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, und <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> eine leere Zeichenfolge zurückgegeben ("").</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardkultur für Threads in der aktuellen Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die Standardkultur für Threads in der aktuellen Anwendungsdomäne oder <see langword="null" />, wenn die aktuelle Systemkultur die standardmäßige Threadkultur in der Anwendungsdomäne ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und früheren Versionen wird standardmäßig die Kultur aller Threads ist festgelegt auf die Windows-System-Kultur. Dieses Verhalten ist für Anwendungen, die die Standardkultur für das System mit der aktuellen Kultur unterscheidet, häufig nicht erwünscht. In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> -Eigenschaft ermöglicht einer Anwendung, um die Standardkultur aller Threads in einer Anwendungsdomäne zu definieren.  
  
> [!IMPORTANT]
>  Wenn Sie die Kultur nicht explizit festgelegt haben alle vorhandenen in einer Anwendungsdomäne, Festlegen von ausgeführte threads die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft ändert auch die Kultur dieser Threads. Jedoch wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, ihre Kultur definiert, durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> -Eigenschaft in dieser Anwendungsdomäne oder, wenn kein Standardwert, durch die standardsystemkultur definiert ist. Aus diesem Grund wird empfohlen, dass Sie immer explizit der Kultur des Threads Hauptthread der Anwendung festlegen, und Sie sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft, um die Kultur der Thread der hauptanwendung definieren.  
  
 Sofern es nicht explizit den Wert des der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft `null`, und die Kultur des Threads in einer Anwendungsdomäne, die keine explizite Kultur zugewiesen wurden durch die Standardkultur für Windows-System definiert ist.  
  
 Weitere Informationen zu Kulturen, Threads und Anwendungsdomänen finden Sie unter "Kultur und Threads" und "Kultur und Anwendungsdomänen" Abschnitte in der <xref:System.Globalization.CultureInfo> Referenzseite.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Standardverhalten von .NET Framework bei der Definition der aktuellen Kultur eines neuen Threads. Beim Start wird im Beispiel der aktuellen Kultur und die aktuelle Kultur auf Französisch (Frankreich) auf allen Systemen außer den auf denen die Standardkultur für das System bereits Französisch (Frankreich) ist. Wenn die Standardkultur für das System bereits Französisch (Frankreich) ist, legt der Code der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur auf Englisch (USA). Es ruft dann die `DisplayRandomNumbers` -Routine, die drei Zufallszahlen generiert und zeigt sie als Currency-Werte. Als Nächstes erstellt er einen neuen Thread und führt auch die `DisplayRandomNumbers` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Wie die Ausgabe des Beispiels zeigt an, wenn das Beispiel auf einem Computer ausgeführt wird, dessen Systemkultur Englisch (USA), ist, zeigt der Hauptthread die Currency-Werte, die Verwendung der Formatierungskonventionen der Kultur Französisch (Frankreich). Da der Arbeitsthread-Kultur aus der aktuellen Kultur der Windows-System anstelle der aktuellen Kultur der Anwendung abgeleitet ist, zeigt jedoch der Arbeitsthread die Currency-Werte, die Verwendung der Formatierungskonventionen der Kultur Englisch (USA).  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur eines neuen Threads der Anwendung zu definieren. Beim Start wird im Beispiel der aktuellen Kultur und die aktuelle Kultur auf Französisch (Frankreich) auf allen Systemen außer den auf denen die Standardkultur für das System bereits Französisch (Frankreich) ist. Ist die Standardkultur für das System bereits Französisch (Frankreich), wird die aktuelle UI-Kultur und der aktuellen Kultur Englisch (USA). Es ruft dann die `DisplayRandomNumbers` -Routine, die drei Zufallszahlen generiert und zeigt sie als Currency-Werte. Als Nächstes erstellt er einen neuen Thread und führt auch die `DisplayRandomNumbers` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Wie die Ausgabe des Beispiels zeigt an, wenn das Beispiel auf einem Computer ausgeführt wird, dessen Systemkultur Englisch (USA), ist, zeigt sowohl den Hauptthread und Arbeitsthread die Currency-Werte, die Verwendung der Formatierungskonventionen der Kultur Französisch (Frankreich).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die standardmäßige Benutzeroberflächenkultur für Threads in der aktuellen Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die Standardkultur der Benutzeroberfläche für Threads in der aktuellen Anwendungsdomäne oder <see langword="null" />, wenn die aktuelle Systemkultur der Benutzeroberfläche die standardmäßige Threadkultur der Benutzeroberfläche in der Anwendungsdomäne ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und früheren Versionen wird standardmäßig die Benutzeroberflächenkultur aller Threads ist festgelegt auf die Windows-System-Kultur. Dieses Verhalten ist für Anwendungen, die die Standardkultur für das System, dessen aktuelle Kultur der Benutzeroberfläche unterscheidet, häufig nicht erwünscht. In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft können Sie die standardmäßige Benutzeroberflächenkultur aller Threads in einer Anwendungsdomäne zu definieren.  
  
> [!IMPORTANT]
>  Wenn Sie nicht explizit die Kultur der Benutzeroberfläche des festgelegt haben alle vorhandenen in einer Anwendungsdomäne, Festlegen von ausgeführte threads die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft ändert auch die Kultur dieser Threads. Jedoch wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, ihre Kultur definiert, durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> -Eigenschaft in dieser Anwendungsdomäne oder, wenn kein Standardwert, durch die standardsystemkultur definiert ist. Aus diesem Grund wird empfohlen, dass Sie immer explizit der Kultur des Threads Hauptthread der Anwendung festlegen, und verlassen Sie sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft, um die Kultur der Thread der hauptanwendung definieren.  
  
 Sofern es nicht explizit den Wert des der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft `null`, und die aktuelle Kultur aller Threads in einer Anwendungsdomäne, die keine explizite Kultur zugewiesen wurden durch die Standardkultur für Windows-System definiert ist.  
  
 Weitere Informationen zu Kulturen, Threads und Anwendungsdomänen finden Sie unter "Kultur und Threads" und "Kultur und Anwendungsdomänen" Abschnitte in der <xref:System.Globalization.CultureInfo> Referenzseite.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Standardverhalten von .NET Framework bei der Definition der aktuellen Kultur eines neuen Threads. Er verwendet die Sprachressourcen für Englisch "und" Russisch. Die folgende Textdatei, die mit dem Namen GreetingStrings.txt enthält die Sprachressourcen für Englisch:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Kompiliert wird, um eine binäre RESOURCES-Datei mit dem Namen GreetingStrings.resources mithilfe der [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) mit dem folgenden Befehl.  
  
```console  
resgen greetingstrings.txt  
```  
  
 Die folgende Textdatei, die mit dem Namen GreetingStrings.ru-RU.txt enthält die Ressourcen für die russische Sprache an:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Kompiliert wird, um eine binäre RESOURCES-Datei mit dem Namen GreetingStrings.ru-RU.resources mithilfe der [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) mit dem folgenden Befehl.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 Der Anwendungscode, der unten angezeigt wird, befindet sich in einer Datei mit dem Namen "example1.vb" oder "example1.cs". Es wird in eine ausführbare Datei kompiliert, mit dem folgenden Befehl für Visual Basic-Compiler:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Für den c#-Compiler entspricht der Befehl:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Dies erstellt eine Assembly, die im Beispiel wird der ausführbaren Code zusammen mit den Ressourcen für die fallback-Kultur enthält. Sie können auch die [Assembly Linker-Tool](~/docs/framework/tools/al-exe-assembly-linker.md) zum Erstellen der Ressourcendatei für die Kultur Russisch (Russische Föderation) mit dem folgenden Befehl:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Beim Start im Beispiel wird die aktuelle UI-Kultur und der aktuellen Kultur Russisch (Russische Föderation) auf allen Systemen außer den auf dem die Standardkultur für das System bereits Russisch ist (Russische Föderation). Ist die Standardkultur für das System bereits Kultur Russisch (Russische Föderation), legt der Code der aktuellen Kultur und der aktuellen Benutzeroberfläche um Englisch (USA). Es ruft dann die `ShowGreeting` -Routine, die eine einfache Zeichenfolge beim ersten Aufruf und eine etwas andere Zeichenfolge auf nachfolgenden Methodenaufrufe angezeigt. Als Nächstes erstellt er einen neuen Thread und führt auch die `ShowGreeting` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Wie die Ausgabe des Beispiels zeigt an, wenn das Beispiel auf einem Computer ausgeführt wird, dessen Systemkultur Englisch (USA), ist, zeigt der Hauptthread die erste Zeichenfolge in Russisch. Da der Arbeitsthread-Kultur aus der aktuellen Kultur der Windows-System anstelle der aktuellen Kultur der Anwendung abgeleitet ist, zeigt der Arbeitsthread die Zeichenfolge jedoch in Englisch.  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur eines neuen Threads der Anwendung zu definieren.  
  
 Das Beispiel verwendet die gleichen Ressourcendateien, wie im vorherigen Beispiel. Die Befehle zum Kompilieren und die Russische lokalisiert-Ressourcen in eine Satellitenassembly eingebettet sind auch identisch, außer dass der Name der ausführbaren Assembly ändert.  
  
 Beim Start im Beispiel wird die aktuelle UI-Kultur und der aktuellen Kultur Russisch (Russische Föderation) auf allen Systemen außer den auf dem die Standardkultur für das System bereits Russisch ist (Russische Föderation). Ist die Standardkultur für das System bereits Russisch (Russische Föderation), wird die aktuelle UI-Kultur und der aktuellen Kultur Englisch (USA). Es ruft dann die `ShowGreeting` -Routine, die eine einfache Zeichenfolge beim ersten Aufruf und eine etwas andere Zeichenfolge auf nachfolgenden Methodenaufrufe angezeigt. Als Nächstes erstellt er einen neuen Thread und führt auch die `ShowGreeting` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Wie die Ausgabe des Beispiels zeigt an, wenn das Beispiel auf einem Computer ausgeführt wird, dessen Systemkultur Englisch (USA), ist, sowohl den Hauptthread und Arbeitsthread in russischer Sprache sowohl ihre Zeichenfolgen angezeigt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Bei einem SET-Vorgang ist der Eigenschaftswert <see cref="P:System.Globalization.CultureInfo.Name" /> ungültig.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständig lokalisierten Kulturnamen ab.</summary>
        <value>Der vollständig lokalisierte Kulturname im Format *Languagefull* [*Country/Regionfull*], wobei *Languagefull* ist der vollständige Name der Sprache und  *Country/Regionfull* ist der vollständige Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt den lokalisierten Namen des der <xref:System.Globalization.CultureInfo> Objekt.  
  
 Kulturnamen variieren aufgrund der Skripterstellung oder Formatierungskonventionen. Sie sollten verwenden Sie den zurückgegebenen Namen für die Anzeige, und versuchen Sie nicht analysieren.  
  
 Wenn eine benutzerdefinierte Kultur, von erstellt wird der <xref:System.Globalization.CultureAndRegionInfoBuilder> -Klasse, die <xref:System.Globalization.CultureInfo.DisplayName%2A> Eigenschaft initialisiert wird, auf den Wert des der <xref:System.Globalization.CultureInfo.NativeName%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die Zh-CHS und Zh-CHT Kulturen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur bzw. aus. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format *languagefull* [*country/regionfull*] auf Englisch ab.</summary>
        <value>Der Kulturname im Format *Languagefull* [*Country/Regionfull*] auf Englisch, wobei *Languagefull* ist der vollständige Name der Sprache und *Land / Regionfull* ist der vollständige Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z. B. die <xref:System.Globalization.CultureInfo.EnglishName%2A> für die spezifische Kultur En-US "Englisch (USA)" ist.  
  
 Der Wert dieser Eigenschaft ist identisch, unabhängig von der Sprachversion von .NET Framework.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die älteren Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das mit der aktuellen <see cref="T:System.Globalization.CultureInfo" /> verglichen werden soll.</param>
        <summary>Bestimmt, ob das angegebene Objekt dieselbe Kultur aufweist wie die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns><see langword="true" />, wenn <paramref name="value" /> dieselbe Kultur aufweist wie die aktuelle <see cref="T:System.Globalization.CultureInfo" />, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Zwei <xref:System.Globalization.CultureInfo> Objekte werden als gleich betrachtet, wenn ihre <xref:System.Globalization.CultureInfo.Name%2A> und <xref:System.Globalization.CultureInfo.CompareInfo%2A> Eigenschaften gleich sind.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft im Falle einer ungeeigneten Standard-GUI-Kultur eine alternative Kultur der Benutzeroberfläche für Konsolenanwendungen auf.</summary>
        <returns>Eine alternative Kultur, die zum Lesen und Anzeigen von Texten auf der Konsole verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprachen wie Arabisch, Hebräisch, Urdu und Syrisch basiert auf den bidirektionalen Text. Windows-Anwendungen, die über eine grafische Benutzeroberfläche verfügen, unterstützen die bidirektionale Sprachen. Konsolenanwendungen, die die Benutzeroberfläche der Text der Betriebssystem-Konsole nutzen zu können, bieten jedoch keine bidirektionale Unterstützung. Wenn Sie eine Konsolenanwendung, Arabisch oder Hebräisch lokalisieren, zeigt Ihre Anwendung daher unlesbaren Text an den Konsolenbildschirm.  
  
 Der Benutzeroberflächenkultur gibt die Ressourcen, die eine Anwendung Benutzer ein- und Ausgaben unterstützen muss, die und in der Standardeinstellung ist identisch mit dem Betriebssystem-Kultur, an. Z. B. die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft eine arabische Kultur für einem arabischen Betriebssystem zurück. Verwenden der <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> Methode zum Abrufen einer Kultur, die für die Benutzeroberfläche eine Konsole-Anwendung geeignet ist. Nachdem Ihre Anwendung die GUI-Kultur abgerufen hat, sollten sie die Kultur der aktuellen Benutzeroberflächenkultur des aktuellen Threads zuweisen. Weitere Informationen finden Sie im Abschnitt "Explizit festlegen der aktuellen Benutzeroberflächenkultur" die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft.  
  
 Im folgenden werden die vordefinierten Kulturen, die einen anderen fallback-Schnittstelle Kultur Benutzernamen aus den vordefinierten Kulturnamen aufweisen.  
  
|Vordefinierte Kultur|Kulturname|Alternative Kultur Schnittstellenname|  
|------------------------|------------------|------------------------------------------|  
|Amharisch|Uhr|en-US|  
|Amharisch (Äthiopien)|Uhr-ET|en-US|  
|(neutral Arabisch)|ar|en-US|  
|Arabisch (Vereinigte Arabische Emirate)|ar-AE|en-US|  
|Arabic (Bahrain)|ar-BH|en-US|  
|Arabisch (Algerien)|ar-DZ|fr-FR|  
|Arabisch (Ägypten)|ar-EG|en-US|  
|Arabisch (Irak)|ar-IQ|en-US|  
|Arabisch (Jordanien)|ar-JO|en-US|  
|Arabisch (Kuwait)|ar-KW|en-US|  
|Arabisch (Libanon)|ar-LB|en-US|  
|Arabisch (Libyen)|ar-LY|en-US|  
|Arabisch (Marokko)|ar-MA|fr-FR|  
|Arabisch (Oman)|Ar-OM|en-US|  
|Arabic (Qatar)|ar-QA|en-US|  
|Arabisch (Saudi-Arabien)|ar-SA|en-US|  
|Arabisch (Syrien)|ar-SY|en-US|  
|Arabisch (Tunesien)|ar-TN|fr-FR|  
|Arabisch (Jemen)|Ar-YE|en-US|  
|Assamesisch|as|en-US|  
|Assamisch (Indien)|as-IN|en-US|  
|Bangla|Bn|en-US|  
|Bangla (Bangladesch)|bn-BD|en-US|  
|Bangla (India)|bn-IN|en-US|  
|Tibetisch|BO|en-US|  
|Tibetan (PRC)|bo-CN|en-US|  
|Divehi|dv|en-US|  
|Divehi (Indien)|dv-MV|en-US|  
|Persisch|firefly-Algorithmus|en-US|  
|Persisch (Iran)|fa-IR|en-US|  
|Gujarati|gu|en-US|  
|Gujarati (Indien)|gu-IN|en-US|  
|Hebräisch|er|en-US|  
|Hebrew (Israel)|he-IL|en-US|  
|Hindi|hi|en-US|  
|Hindi (Indien)|hi-IN|en-US|  
|Yi|ii|en-US|  
|Yi (PRC)|ii-CN|en-US|  
|Inukitut-Silbenschrift|iu-Cans|en-US|  
|Inukitut-Silbenschrift (Kanada)|iu-Cans-CA|en-US|  
|Khmer|km|en-US|  
|Khmer (Kambodscha)|km-KH|en-US|  
|Kannada|KN|en-US|  
|Kannada (Indien)|KN-IN|en-US|  
|Konkani|kok|en-US|  
|Konkani (Indien)|kok-IN|en-US|  
|Laotisch|lo|en-US|  
|Lao (Lao P.D.R.)|lo-LA|en-US|  
|Malayalam|ml|en-US|  
|Malayalam (Indien)|ml-IN|en-US|  
|Mohawk|moh|en-US|  
|Mohawk (Kanada)|moh-CA|en-US|  
|Marathi|mr|en-US|  
|Marathi (Indien)|mr-IN|en-US|  
|Nepali|ne|en-US|  
|Nepali (Nepal)|ne-NP|en-US|  
|Norwegisch|Nein|nb-NO|  
|Odiya|oder|en-US|  
|Odiya (Indien)|oder-IN|en-US|  
|Punjabi|PA|en-US|  
|Punjabi (Indien)|pa-IN|en-US|  
|Dari|Pull Requests|en-US|  
|Dari (Afghanistan)|prs-AF|en-US|  
|Pashto|ps|en-US|  
|Pashto (Afghanistan)|ps-AF|en-US|  
|Sanskrit|sa|en-US|  
|Sanskrit (India)|sa-IN|en-US|  
|Singhalesisch|si|en-US|  
|Sinhala (Sri Lanka)|si-LK|en-US|  
|Syrisch|SYR|en-US|  
|Syrisch (Syrien)|syr-SY|en-US|  
|Tamil|ta|en-US|  
|Tamil (Indien)|ta-IN|en-US|  
|Telugu|Te|en-US|  
|Telugu (Indien)|te-IN|en-US|  
|Thai|th|en-US|  
|Thailändisch (Thailand)|th-Th|en-US|  
|Uigurisch|UG|en-US|  
|Uighurisch (VRC)|ug-CN|en-US|  
|Urdu|Ihre|en-US|  
|Urdu (Pakistan)|ur-PK|en-US|  
|Vietnamesisch|Vi|en-US|  
|Vietnamesisch (Vietnam)|vi-VN|en-US|  
  
 Die Anwendung kann mithilfe <xref:System.Globalization.CultureAndRegionInfoBuilder> zum Erstellen einen Ersatz für eine Kultur und die Kultur eine Fallbackkultur Ihrer Wahl verfügen können.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die GUI-Kultur ein Culture-Objekt zugeordnet.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Ein Gebietsschemabezeichner (LCID).</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur mithilfe des angegebenen Kulturbezeichners ab.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es wird empfohlen, dass Sie die zeichenfolgenüberladung dieser Methode verwenden (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), da die Gebietsschema-Namen statt LCIDs verwendet werden soll. Bei benutzerdefinierten Gebietsschemas ist die Gebietsschemanamen erforderlich.  
  
 Wenn `culture` ist der Gebietsschemabezeichner für die aktuelle Kultur, die den zurückgegebenen <xref:System.Globalization.CultureInfo> Objekt drückt sich nicht auf alle überschreibungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt "Hinweise zu Aufrufern".</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="culture" /> vom Betriebssystem; Wenn das Betriebssystem, Kultur, nicht unterstützt die -Methode löst eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Kultur. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur mithilfe des angegebenen Kulturnamens ab.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kulturnamen auf Windows-Systemen, finden Sie unter den **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47). Darüber hinaus beginnend mit Windows 10, `name` möglich, dass alle gültigen BCP-47-Sprachtag.  
  
 Die <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Methode ruft eine zwischengespeicherte nur-Lese <xref:System.Globalization.CultureInfo> Objekt. Er bietet eine bessere Leistung als einen zugehörigen Aufruf an die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor.  
  
 Wenn `name` ist der Name der aktuellen Kultur, die zurückgegebene <xref:System.Globalization.CultureInfo> Objekt drückt sich nicht auf alle überschreibungen. Dadurch wird die Methode für die Server-Anwendungen oder Tools, die nicht über ein echtes Benutzerkonto auf dem System verfügen, und verwenden müssen, um das Laden von mehreren Kulturen effizient, geeignet ist.  
  
 Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, gibt die Methode die invariante Kultur zurück. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt und <paramref name="name" /> ist nicht der Name einer Kultur zusätzliche oder ersetzt die löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="altName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Kultur. Bei <paramref name="name" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <param name="altName">Der Name einer Kultur, die das <see cref="T:System.Globalization.TextInfo" />-Objekt und das <see cref="T:System.Globalization.CompareInfo" />-Objekt liefert, mit denen <paramref name="name" /> initialisiert wird. Bei <paramref name="altName" /> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur ab. Mit Parametern wird eine Kultur angegeben, die mit dem <see cref="T:System.Globalization.TextInfo" />-Objekt und dem <see cref="T:System.Globalization.CompareInfo" />-Objekt initialisiert wird, die wiederum von einer anderen Kultur angegeben werden.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kulturnamen auf Windows-Systemen, finden Sie unter den **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47). Darüber hinaus beginnend mit Windows 10, `name` möglich, dass alle gültigen BCP-47-Sprachtag.  
  
 Die <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Methode ruft einen zwischengespeicherten, schreibgeschützten <xref:System.Globalization.CultureInfo> Objekt. Er bietet eine bessere Leistung als einen zugehörigen Aufruf an ein <xref:System.Globalization.CultureInfo.%23ctor%2A> Konstruktor. Die Methode wird verwendet, um eine Kultur wie vom angegebenen erstellen die `name` Parameter, aber mit anderen Sortierung und Groß-/Kleinschreibung von Regeln.  
  
 Wenn `name` oder `altName` ist der Name der aktuellen Kultur, die zurückgegebenen Objekte spiegeln keine überschreibungen. Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, gibt die Methode die invariante Kultur zurück. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft. Wenn `altName` ist <xref:System.String.Empty?displayProperty=nameWithType>, die Methode verwendet, das Schriftsystem und der Vergleich Regeln der invarianten Kultur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> oder <paramref name="altName" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> oder <paramref name="altName" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> oder <paramref name="altName" /> ist kein gültiger Kulturname. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt und <paramref name="name" /> ist nicht der Name einer Kultur zusätzliche oder ersetzt die löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme. Beginnend mit apps, die unter ausgeführt der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] oder höher unter Windows 7 oder höher, die Methode versucht, Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt und <paramref name="name" /> ist nicht der Name einer Kultur zusätzliche oder ersetzt die löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Sprache gemäß dem Standard RFC 4646.</param>
        <summary>Veraltet. Ruft ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, dessen linguistische Merkmale vom angegebenen RFC 4646-Sprachtag identifiziert werden.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode und die <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> Eigenschaft sind veraltet. Anstatt diese Elemente zu verwenden, sollte die Anwendung eine neue verwenden <xref:System.Globalization.CultureInfo> -Objekt und Aufrufe an die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft. IETF-Tags und die Namen sind identisch.  
  
 Der Standard RFC 4646, der von der Internet Engineering Task Force (IETF) verwaltet wird, definiert ein IETF-Sprachtag, bietet eine einheitliche Möglichkeit zur Identifikation einer Sprache. Das Format von einem IETF-Sprachtag ist identisch mit den Namen der Kultur zurückgegeben wird, indem die <xref:System.Globalization.CultureInfo.Name%2A> -Eigenschaft, aber eine Kultur nicht eindeutig identifiziert. Verschiedene Kulturen Freigeben der gleiche IETF-Sprachtag aus, wenn diese Kulturen identisch linguistische Merkmale aufweisen. Die linguistischen Eigenschaften einer Kultur befinden sich der <xref:System.Globalization.TextInfo> zugeordnete Objekt ein <xref:System.Globalization.CultureInfo> Objekt.  
  
 Ein IETF-Sprachtag besteht aus einer obligatorischen Sprachen-ID, ein optionales Skript-Bezeichner und eine optionale Region-Bezeichner.  
  
 Ihre Anwendungen sollten die abgerufenen Kultur verwenden, um sprachspezifische-Aufgaben, z. B. das Verwalten eines Rechtschreib- oder grammatikprüfung steuern zu können. Anwendungen sollten die abgerufenen Kultur nicht verwenden, um kulturspezifische Aufgaben, z. B. Sortierung Text oder die Formatierung von Uhrzeiten und Datumsangaben zu steuern.  
  
 Weitere Informationen finden Sie unter RFC 4646, "Tags for identifizieren Languages" und der standard, Draft-Philips-Langtags-05.txt, unter [ http://go.microsoft.com/fwlink/?LinkId=100231 ](https://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> entspricht keiner unterstützten Kultur.</exception>
        <block subset="none" type="usage"><para>Die [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> entspricht nicht der Name einer unterstützten Kultur. Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="types">Eine bitweise Kombination von Enumerationswerten, mit denen die abzurufenden Kulturen gefiltert werden.</param>
        <summary>Ruft die Liste der unterstützten Kulturen ab, die entsprechend dem angegebenen <see cref="T:System.Globalization.CultureTypes" />-Parameter gefiltert sind.</summary>
        <returns>Ein Array, das die vom <paramref name="types" />-Parameter angegebenen Kulturen enthält. Das Array von Kulturen ist unsortiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode heißt am häufigsten mit der `types` Parameter festgelegt wird, auf die folgenden Werte:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, womit alle spezifische Kulturen.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, womit alle neutrale Kulturen und die invariante Kultur.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, womit alle neutrale und spezifische Kulturen, im Windows-System installierter Kulturen und vom Benutzer erstellte Kulturen.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, womit alle Kulturen, z. B. registriert, indem die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse. In Versionen von Windows vor Windows 10 die <xref:System.Globalization.CultureTypes.UserCustomCulture> Wert gilt für alle benutzerdefinierten Kulturen. Ab Windows 10, dies gilt für System-Kulturen, die vollständige kulturelle Daten fehlen und, die nicht über eine eindeutige lokale Bezeichner, durch die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaftswert. Daher gibt Code wie den folgenden unterschiedliche Ergebnisse beim Ausführen von Windows 10 oder auf eine frühere Version von Windows zurück.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die Zh-CHS und Zh-CHT Kulturen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur bzw. aus. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="types" /> gibt eine ungültige Kombination von <see cref="T:System.Globalization.CultureTypes" />-Werten an.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Der <see cref="T:System.Type" />, für den ein Formatierungsobjekt abgerufen werden soll. Diese Methode unterstützt nur den <see cref="T:System.Globalization.NumberFormatInfo" />-Typ und den <see cref="T:System.Globalization.DateTimeFormatInfo" />-Typ.</param>
        <summary>Ruft ein Objekt ab, das definiert, wie der angegebene Typ formatiert werden soll.</summary>
        <returns>Der Wert der <see cref="P:System.Globalization.CultureInfo.NumberFormat" />-Eigenschaft, bei der es sich um eine <see cref="T:System.Globalization.NumberFormatInfo" /> mit Informationen über das Standardzahlenformat für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> handelt, wenn <paramref name="formatType" /> das <see cref="T:System.Type" />-Objekt für die <see cref="T:System.Globalization.NumberFormatInfo" />-Klasse ist.  
  
- oder - 
Der Wert der <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />-Eigenschaft, bei der es sich um eine <see cref="T:System.Globalization.DateTimeFormatInfo" /> mit Informationen über das Standardformat für Datums- und Uhrzeitangaben für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> handelt, wenn <paramref name="formatType" /> das <see cref="T:System.Type" />-Objekt für die <see cref="T:System.Globalization.DateTimeFormatInfo" />-Klasse darstellt.  
  
- oder - 
NULL, wenn <paramref name="formatType" /> ein beliebiges anderes Objekt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementiert <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` enthält den numerische kulturspezifischen Format in Verbindung mit dem Format-Methoden in die Basisdatentypen verwendet. `DateTimeFormatInfo` Steuert, wie Werte für Datum und Uhrzeit für eine bestimmte Kultur formatiert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Globalization.CultureInfo" />, die sich für die Verwendung in Hashalgorithmen und -datenstrukturen eignet, z. B. in einer Hashtabelle.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Diese Methode generiert für zwei Objekte, die gemäß der <xref:System.Globalization.CultureInfo.Equals%2A>-Methode gleich sind, denselben Hashcode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Veraltet. Ruft die Sprachkennung gemäß dem Standard RFC 4646 ab.</summary>
        <value>Eine Zeichenfolge, die die Sprachkennung gemäß dem Standard RFC 4646 darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Eigenschaft und die <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> Methode sind veraltet. Sie sollten stattdessen eine der <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> Eigenschaft. IETF-Tags und die Namen sind identisch.  
  
 Der Standard RFC 4646, der von der Internet Engineering Task Force (IETF) verwaltet wird, definiert ein IETF-Sprachtag, bietet eine einheitliche Möglichkeit zur Identifikation einer Sprache. Das Format von einem IETF-Sprachtag ähnelt den Namen der Kultur zurückgegeben wird, indem die <xref:System.Globalization.CultureInfo.Name%2A> -Eigenschaft, aber eine Kultur nicht eindeutig identifiziert. Unterschiedliche Kulturen freigeben, also die gleiche IETF-Sprachtag aus, falls Sie diese Kulturen identisch linguistische Merkmale haben. Die linguistischen Eigenschaften einer Kultur befinden sich der <xref:System.Globalization.TextInfo> zugeordnete Objekt ein <xref:System.Globalization.CultureInfo> Objekt.  
  
 Ein IETF-Sprachtag besteht aus einer obligatorischen Sprachen-ID, ein optionales Skript-Bezeichner und eine optionale Region-Bezeichner.  
  
 Weitere Informationen finden Sie unter [RFC 5646, "Tags für identifizieren Sprachen](https://go.microsoft.com/fwlink/?LinkId=230876). Eine Liste der Subtags, finden Sie unter [der IANA-Sprache-Sprachtags Registrierung](https://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CultureInfo" /> ab, die die mit dem Betriebssystem installierte Kultur darstellt.</summary>
        <value>Die <see cref="T:System.Globalization.CultureInfo" />, die die mit dem Betriebssystem installierte Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem lokalisierten Betriebssystem, wie z. B. eine japanische Edition von Windows gibt diese Eigenschaft die Kultur des Betriebssystems. Diese Eigenschaft entspricht der `GetSystemDefaultUILanguage` in der Windows-API.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das kulturunabhängige (invariante) <see cref="T:System.Globalization.CultureInfo" />-Objekt ab.</summary>
        <value>Das Objekt, das die kulturunabhängige (invariante) ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die invariante Kultur ist die Culture-insensitive; Es ist verknüpft mit der englischen Sprache jedoch nicht mit der alle Länder/Regionen. Die invariante Kultur wird anhand des Namens angegeben, mit der eine leere Zeichenfolge ("") im Aufruf von einem <xref:System.Globalization.CultureInfo> Instanziierung-Methode. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> Außerdem wird eine Instanz der invarianten Kultur abgerufen. Kann verwendet werden, in fast allen Methoden in der <xref:System.Globalization> Namespace, die eine Kultur erforderlich sind. Die Objekte, die von Eigenschaften zurückgegeben werden beispielsweise <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, und <xref:System.Globalization.CultureInfo.NumberFormat%2A> auch entsprechend den Zeichenfolgenvergleich und Formatierungskonventionen der invarianten Kultur.  
  
 Im Gegensatz zu kulturabhängige-Daten, die Anpassung oder Updates für .NET Framework oder dem Betriebssystem unterliegt, invariante Kultur stabil ist, im Laufe der Zeit und verschiedenen installierter Kulturen und kann nicht von Benutzern angepasst werden. Dadurch wird die invariante Kultur besonders nützlich für Vorgänge, die erfordern kulturunabhängige Ergebnisse zu erzielen, z. B. Formatierung und Analyse für Vorgänge, die beibehalten werden formatierte Daten, oder durch Sortieren und Reihenfolge der Vorgänge, die erfordern, dass die Daten angezeigt werden, in einem feste Reihenfolge unabhängig von der Kultur.  
  
## <a name="string-operations"></a>Zeichenfolgenoperationen  
 Sie können die invariante Kultur kulturabhängige Zeichenfolgenoperationen, die durch die Konventionen der aktuellen Threadkultur nicht betroffen sind und über Kulturen hinweg konsistent sind. Beispielsweise sollten Sie die sortierte Daten in einer festen Reihenfolge angezeigt werden, oder einen Standardsatz von Groß-/ Kleinschreibungskonventionen in Zeichenfolgen, unabhängig von der aktuellen Threadkultur anwenden. Hierzu übergeben Sie die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Objekt, das eine Methode mit einer <xref:System.Globalization.CultureInfo> Parameter, wie z. B. <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> und <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Beibehalten von Daten  
 Die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft kann verwendet werden, um Daten in einem Format kulturunabhängig dauerhaft zu speichern. Dies bietet es sich um ein bekanntes Format, die nicht geändert und zum Serialisieren und Deserialisieren von Daten über Kulturen hinweg verwendet werden können. Nachdem die Daten deserialisiert werden, können sie abhängig von Ihrer die kulturellen Konventionen, die von den aktuellen Benutzer formatiert werden.  
  
 Beispielsweise, wenn Sie entscheiden, Datum und Uhrzeit-Daten in Form einer Zeichenfolge beibehalten, Sie können übergeben der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> -Objekt an der <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> Methode, um die Zeichenfolge, und Sie erstellen kann übergeben der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> -Objekt an der <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode, die die Zeichenfolge in ein Datum und Uhrzeit-Wert zu konvertieren. Dieses Verfahren stellt sicher, dass das zugrunde liegende Datum und die Time-Werten werden nicht geändert werden, wenn die Daten gelesen oder geschrieben werden, von Benutzern aus unterschiedlichen Kulturen.  
  
 Im folgenden Beispiel wird die invariante Kultur zum Beibehalten einer <xref:System.DateTime> Wert als Zeichenfolge. Anschließend analysiert die Zeichenfolge und zeigt den Wert mithilfe der Formatierungskonventionen der die (Frankreich) Kulturen Französisch und Deutsch (Deutschland).  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Sicherheitsentscheidungen  
 Wenn Sie eine sicherheitsentscheidung (z. B., ob Zugriff auf eine Systemressource) vornehmen, werden basierend auf das Ergebnis eines Zeichenfolgenvergleichs oder eine Änderung, verwenden Sie nicht die invariante Kultur. Stattdessen sollten Sie einen ordinalen Vergleich Groß- und Kleinschreibung ausführen, durch Aufrufen einer Methode, die enthält eine <xref:System.StringComparison> Parameter und die Angabe <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> oder <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> als Argument. Code, der kulturabhängige Zeichenfolgenoperationen ausführt kann Sicherheitslücken zur Folge haben, wenn die aktuelle Kultur geändert wird, oder wenn die Kultur auf dem Computer, der der Code ausgeführt wird von der Kultur, die verwendet wird unterscheiden, um den Code zu testen. Im Gegensatz dazu hängt ein Ordinalvergleich ausschließlich auf den binären Wert der verglichenen Zeichen ein.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle <see cref="T:System.Globalization.CultureInfo" /> eine neutrale Kultur darstellt.</summary>
        <value><see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> eine neutrale Kultur darstellt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine neutrale Kultur ist, eine Kultur, die verknüpft sind mit einer anderen Sprache jedoch nicht mit einem Land oder Region. Es unterscheidet sich von einer bestimmten Kultur, die einer Kultur, die sowohl eine Sprache und Land oder Region zugeordnet ist. Beispielsweise ist "fr" den Namen für die neutrale Kultur Französisch, während "fr-FR" der Name für die Kultur "Französisch" in Frankreich ist.  
  
 Wenn diese Eigenschaft gibt `false`, die Kultur ist entweder eine bestimmte Kultur oder der invarianten Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, welche Kulturen die chinesische Sprache verwenden neutrale Kulturen sind.  
  
> [!NOTE]
>  Das Beispiel zeigt die älteren Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle <see cref="T:System.Globalization.CultureInfo" /> schreibgeschützt ist.</summary>
        <value><see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> schreibgeschützt ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Globalization.CultureInfo> ist schreibgeschützt, die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Instanzen sind ebenfalls schreibgeschützt.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt, dass <xref:System.Globalization.CultureInfo.IsReadOnly%2A> schützt auch den <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> zugeordneten Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktiven Bezeichner für das Eingabegebietsschema ab.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen Bezeichner für das Eingabegebietsschema angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Gebietsschemabezeichner für die Eingabe wurde früher als das Tastaturlayout bezeichnet. Ein Eingabegebietsschema-Bezeichner ist eine umfassendere Konzept als Tastaturlayout aus, da es kann auch eine Sprache-zu-Text-Konverter, einen Eingabemethoden-Editor (IME) oder eine andere Form der Eingabe angeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen wird der entsprechende NLS-Gebietsschemabezeichner der Kulturbezeichner zugeordnet.  
  
 In Versionen von Windows vor Windows 10, die Gebietsschema-ID `LOCALE_CUSTOM_UNSPECIFIED` (0 x 1000 oder 4096) vom Benutzer erstellte Kulturen zugewiesen wird. Ab Windows 10, wird er alle Kulturen zugewiesen, die keinen eindeutigen Gebietsschema-ID und keinen vollständige vom System bereitgestellten Daten. Als Ergebnis wird Code, der Kulturen durchläuft und ruft Sie ab, die mit einer <xref:System.Globalization.CultureInfo.LCID%2A> Wert `LOCALE_CUSTOM_UNSPECIFIED` gibt einen größeren Teil <xref:System.Globalization.CultureInfo> Objekte an, wenn unter Windows 10 ausgeführt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierreihenfolge.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format *languagecode2*-*country/regioncode2*ab.</summary>
        <value>Der Kulturname im Format *languagecode2*-*Landes-/regionscode2*. *languagecode2* stammt ein Kleinbuchstaben zwei Buchstaben bestehende Code nach ISO 639-1. *Country/regioncode2* ist aus ISO 3166 abgeleitet und besteht normalerweise aus zwei Großbuchstaben oder ein BCP-47-Sprachtag.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Eine Liste der vordefinierten Kulturnamen und Bezeichner, die die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft kann zurück auf Windows-Systeme, finden Sie unter der **Sprach-Tag** -Spalte in der [Liste von Sprache/Region-Namen, die von Windowsunterstützt](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47). Darüber hinaus beginnend mit Windows 10, `name` möglich, dass alle gültigen BCP-47-Sprachtag. Beachten Sie, dass die Kulturnamen geändert werden und sie auch die Namen von Kulturen wiedergeben können.  
  
 Die <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> -Eigenschaft folgt die Benennungsstandards bereitgestellt, der <xref:System.Globalization.CultureInfo> Thema-Klasse. Gibt die Kurzform der Name der Kultur, die einen Hinweis auf eine andere Sortierreihenfolge ausschließt. Angenommen, Sie instanziieren ein <xref:System.Globalization.CultureInfo> Objekt, indem Sie die Zeichenfolge "de-DE_phoneb" eine andere Sortierreihenfolge, entsprechend der <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft zurückgibt, "de-DE".  
  
 Um den vollständigen Namen der Kultur abzurufen, verwenden Sie die <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, oder <xref:System.Globalization.CultureInfo.NativeName%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die älteren Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Kultur ab, der aus der Sprache, dem Land oder der Region und dem optionalen Skript besteht, das in der Kultur angezeigt werden soll.</summary>
        <value>Der Kulturname , der aus dem vollständigen Namen der Sprache, dem vollständigen Namen des Landes bzw. der Region und dem optionalen Skript besteht. Das Format wird in der Beschreibung der <see cref="T:System.Globalization.CultureInfo" />-Klasse erläutert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft ist identisch, unabhängig von der Sprachversion von .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.NumberFormatInfo" />, die das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und die angegebene Kultur entspricht die aktuelle Kultur von Windows, die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Die Werte der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft und die <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft werden nicht berechnet, bis der Benutzer auf die Eigenschaft zugreift. Wenn der Benutzer die Systemsteuerung verwendet, um die aktuelle Kultur auf eine neue Kultur zu ändern, während die Anwendung ausgeführt wird, und klicken Sie dann greift auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> oder <xref:System.Globalization.CultureInfo.NumberFormat%2A> -Eigenschaft, die Anwendung ruft die Standardwerte für die neue Kultur ab. nicht die Außerkraftsetzungen für die ursprüngliche Kultur. Um die Außerkraftsetzungen für die ursprüngliche aktuelle Kultur zu erhalten, sollte Zugriff auf die Anwendung die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften vor dem Ändern der aktuellen Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass CultureInfo.Clone auch klont die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> zugeordneten Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf NULL festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Globalization.CultureInfo.NumberFormat" />-Eigenschaft oder eine der <see cref="T:System.Globalization.NumberFormatInfo" />-Eigenschaften wird festgelegt, und die <see cref="T:System.Globalization.CultureInfo" /> ist schreibgeschützt.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste der Kalender ab, die von dieser Kultur verwendet werden können.</summary>
        <value>Ein Array vom Typ <see cref="T:System.Globalization.Calendar" />, das die Kalender darstellt, die von der Kultur verwendet werden können, die von der aktuellen <see cref="T:System.Globalization.CultureInfo" /> dargestellt werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ihre Anwendung ändert den Kalender ein, die die aktuelle <xref:System.Globalization.CultureInfo> durch Festlegen der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> Eigenschaft <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, die ist eine Instanz von der <xref:System.Globalization.DateTimeFormatInfo> Klasse. Der neue Kalender muss eine der aufgeführten im Kalender <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> enthält auch andere Eigenschaften, die der Datums- und uhrzeitformatierungen zugeordnet sind, anpassen <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie auf Sie bestimmen die <xref:System.Globalization.GregorianCalendar> Versionen, die von der Kultur unterstützt.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CultureInfo" /> ab, die die übergeordnete Kultur zur aktuellen <see cref="T:System.Globalization.CultureInfo" /> darstellt.</summary>
        <value>Die <see cref="T:System.Globalization.CultureInfo" />, die die übergeordnete Kultur zur aktuellen <see cref="T:System.Globalization.CultureInfo" /> darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kulturen bilden eine Hierarchie, in dem das übergeordnete Element einer bestimmten Kultur eine neutrale Kultur ist, das übergeordnete Element eine neutrale Kultur ist die <xref:System.Globalization.CultureInfo.InvariantCulture%2A>, und das übergeordnete Element des der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> ist die invariante Kultur selbst. Die übergeordnete Kultur umfasst nur den Satz von Informationen, die häufig von seiner untergeordneten Elemente ist.  
  
 Wenn die Ressourcen für die spezifische Kultur nicht im System verfügbar sind, werden die Ressourcen für die neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die Ressourcen, die in die Hauptassembly eingebettet verwendet. Weitere Informationen zu den Ressourcenfallback-Prozess, finden Sie unter [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, die die übergeordnete Kultur jede spezifische Kultur, die die chinesische Sprache verwenden.  
  
> [!NOTE]
>  Das Beispiel zeigt die älteren Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, für das der Wrapper erstellt wird.</param>
        <summary>Gibt einen schreibgeschützten Wrapper für das angegebene <see cref="T:System.Globalization.CultureInfo" />-Objekt zurück.</summary>
        <returns>Ein schreibgeschützter <see cref="T:System.Globalization.CultureInfo" />-Wrapper um <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wrapper wird verhindert, dass alle Änderungen an `ci`, oder die zurückgegebenen Objekte die `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, dass die <xref:System.Globalization.CultureInfo.ReadOnly%2A> Methode schützt die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> zugeordneten Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ci" /> ist NULL.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.TextInfo" /> ab, die das der Kultur zugeordnete Schriftsystem definiert.</summary>
        <value>Die <see cref="T:System.Globalization.TextInfo" />, die das der Kultur zugeordnete Schriftsystem definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.TextInfo%2A> -Eigenschaft stellt Informationen zur Kultur-, Groß-/Kleinschreibung für Zeichenfolgen. Um kulturunabhängige Groß-und Kleinschreibung auszuführen, sollte die Anwendung verwenden die <xref:System.Globalization.CultureInfo.TextInfo%2A> Eigenschaft <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierreihenfolge.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 639-2 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der aus drei Buchstaben bestehende Code nach ISO 639-2 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die drei Buchstaben bestehende Abkürzung für Englisch ist beispielsweise "Eng".  
  
> [!NOTE]
>  Wenn die Kommunikation zwischen Prozessen und Beibehalten von Daten es normalerweise ist besser, Verwendung des vollständigen <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Verwenden nur in die Sprache kann Kontext und die Daten verloren gehen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die älteren Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code für die Sprache ab, wie er in der Windows-API definiert ist.</summary>
        <value>Der aus drei Buchstaben bestehenden Code für die Sprache, wie er in der Windows-API definiert ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt den gleichen Wert wie die Windows-API-Methode `GetLocaleInfo` mit dem LOCALE_SABBREVLANGNAME-Wert. Die drei Buchstaben bestehenden Code für Englisch (Vereinigte Staaten), wie in der Windows-API definiert ist z. B. "Enu".  
  
> [!NOTE]
>  Wenn die Kommunikation zwischen Prozessen und Beibehalten von Daten es normalerweise ist besser, Verwendung des vollständigen <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Verwenden nur in die Sprache kann Kontext und die Daten verloren gehen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die älteren Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen des Zh-Hans statt Zh-CHS und die Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen darstellen den aktuellen Standard und sollte verwendet werden, es sei denn, Sie einen Grund für die Verwendung der älteren Namen haben.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge mit dem Namen der aktuellen <see cref="T:System.Globalization.CultureInfo" /> im Format *languagecode2*-*country/regioncode2*ab.</summary>
        <returns>Eine Zeichenfolge, die den Namen der aktuellen <see cref="T:System.Globalization.CultureInfo" />-Klasse enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Gibt den Namen der Kultur, die an eine normalisierte Version der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> oder <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor oder die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> oder <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> Methode. Er normalisiert die Ergebniszeichenfolge durch Konvertieren von Zeichen in *languagecode2* Groß- und Kleinbuchstaben konvertieren Zeichen *Landes-/regionscode2* bei Bedarf in Großbuchstaben.  
  
 Auf Windows-Systemen vordefinierten Kulturnamen finden Sie in der **Sprach-Tag** -Spalte in der [Liste der von Windows unterstützte Sprache/Region-Namen](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c). Kulturnamen führen Sie den Standard von [BCP 47](https://tools.ietf.org/html/bcp47).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus zwei Buchstaben bestehenden Code nach ISO 639-1 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der aus zwei Buchstaben bestehende Code nach ISO 639-1 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zweibuchstabige Abkürzung für Englisch ist z. B. "En". Die <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaftswert für die invariante Kultur ist "iv".  
  
> [!NOTE]
>  Wenn die Kommunikation zwischen Prozessen und Beibehalten von Daten es normalerweise ist besser, Verwendung des vollständigen <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Verwenden nur in die Sprache kann Kontext und die Daten verloren gehen.  
  
 Wenn ISO 639-1 keinen zwei Buchstaben bestehende Sprachcode für eine bestimmte Kultur, definiert der <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaft gibt eine Zeichenfolge, die besteht aus drei oder mehr Buchstaben zurück. Weitere Informationen finden Sie im Beispiel.  
  
   
  
## Examples  
 Das folgende Beispiel listet die Kulturen, deren <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaft nicht bestehen aus zwei Buchstaben bestehende Sprachcode.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das aktuelle <see cref="T:System.Globalization.CultureInfo" />-Objekt die vom Benutzer ausgewählten Kultureinstellungen verwendet.</summary>
        <value><see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> die vom Benutzer ausgewählten Kultureinstellungen verwendet, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Benutzer möglicherweise zum Überschreiben einiger der aktuellen Kultur von Windows über die Regions- und spracheinstellungen des Teils der Optionen der Systemsteuerung zugeordneten Werte auswählen. Der Benutzer könnte z. B. zum Anzeigen des Datums in einem anderen Format oder keine andere als die Standardeinstellung für die Kultur zu verwenden.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und die angegebene Kultur entspricht die aktuelle Kultur von Windows, die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. wenn einer der nicht der ausgewählte Kalender ist der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Diese Eigenschaft wird festgelegt, wenn die <xref:System.Globalization.CultureInfo> erstellt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="760f47cb03120a95de0658b641d9eb0ff11b8f38" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36487809" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Informationen über eine bestimmte Kultur bereit (die bei der nicht verwalteten Codeentwicklung als *Gebietsschema* bezeichnet wird). Zu diesen Informationen gehören der Name der Kultur, das Schriftsystem, der verwendete Kalender sowie die Sortierreihenfolge von Zeichenfolgen und die Formatierung für Datumsangaben und Zahlen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo> -Klasse stellt kulturspezifische Informationen, z. B. Sprache, untersprachen, Land/Region, Kalender und Konventionen, die einer bestimmten Kultur zugeordnet. Diese Klasse bietet außerdem Zugriff auf kulturspezifische Instanzen der <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, und <xref:System.Globalization.TextInfo> Objekte. Diese Objekte enthalten, die Informationen für kulturabhängige Vorgänge, z. B. Groß-/Kleinschreibung, dem Formatieren von Datumsangaben und Zahlen, und Vergleichen von Zeichenfolgen. Die <xref:System.Globalization.CultureInfo> Klasse wird verwendet, entweder direkt oder indirekt von Klassen, die formatieren, analysieren oder Bearbeiten von kulturspezifische Daten wie z. B. <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>, und die numerischen Typen.  
  
 In diesem Abschnitt  
  
 [Kulturnamen und Bezeichner](#CultureNames)   
 [Der invariante, neutrale und spezifische Kulturen](#Invariant)   
 [Kulturen](#Custom)   
 [Dynamische Kulturdaten](#Dynamic)   
 [Die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur](#Current)   
 [Abrufen aller Kulturen](#GetAll)   
 [Kultur und threads](#Threads)   
 [Die Kultur und die Anwendung Domänen](#AppDomain)   
 [Kultur und aufgabenbasierte asynchrone Vorgänge](#Async)   
 [Serialisierung der CultureInfo-Objekt](#Serialization)   
 [Systemsteuerung überschreibt.](#CPanel)   
 [Alternative Sortierreihenfolgen](#AlternateSort)   
 [Kultur und Windows-apps](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Kulturnamen und Bezeichner  
 Die <xref:System.Globalization.CultureInfo> Klasse gibt einen eindeutigen Namen für jede Kultur, basierend auf dem Standard RFC 4646. Der Name ist eine Kombination aus einer ISO 639 zweibuchstabige Kleinbuchstaben Kulturcode einer anderen Sprache zugeordnet und ein ISO 3166 zweibuchstabige Großbuchstaben Teilkulturcode ein Land oder Region zugeordnet. Darüber hinaus für apps, die als Ziel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] oder höher und sind unter Windows 10 oder höher ausführen Kulturnamen, die gültige BCP-47-Sprache entsprechen-Tags werden unterstützt.  
  
> [!NOTE]
>  Wenn ein Kulturnamen an übergeben ein Klassenkonstruktor oder eine Methode wie z. B. <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> oder <xref:System.Globalization.CultureInfo>, dessen Fall spielt keine Rolle.  
  
 Weist das Format der Kulturname, der basierend auf dem Standard RFC 4646 *languagecode2*>-*Country/regioncode2*, wobei *languagecode2* der zwei Buchstaben bestehende Sprachcode und *Country/regioncode2* zwei Teilkulturcode ist. Beispiele für sind ja-JP für Japanisch (Japan) "und" En-US für Englisch (Vereinigte Staaten). In Fällen, in denen ein zweistelliger Sprachcode nicht verfügbar ist, wird ein drei Buchstaben bestehenden Code nach ISO 639-2 abgeleitet verwendet.  
  
 Beachten Sie, dass einige Kulturnamen auch ein ISO 15924-Skript angeben. Beispielsweise Cyrl gibt an, das kyrillische Skript und Latn gibt lateinischen an. Ein Kulturname, der ein Skript enthält, verwendet das Muster *languagecode2*-*Scripttag*-*Country/regioncode2*. Ein Beispiel für diese Art von Kulturname ist Uz-Cyrl-UZ für Usbekisch (Kyrillisch, Usbekistan). Auf Windows-Betriebssystemen vor Windows Vista verwendet ein Kulturnamen, die ein Skript enthält das Muster *languagecode2*-*Country/regioncode2* - * Scripttag*, z. B. Uz-UZ-Cyrl für Usbekisch (Kyrillisch, Usbekistan).  
  
 Eine neutrale Kultur wird nur durch die zweibuchstabige Kleinbuchstaben Sprachcode angegeben. Beispielsweise fr gibt die neutrale Kultur für Französisch und de gibt die neutrale Kultur für Deutsch.  
  
> [!NOTE]
>  Es gibt zwei Kulturnamen, die mit dieser Regel widersprechen. Chinesisch (vereinfacht), mit dem Namen Zh-Hans und Chinesisch (traditionell), mit dem Namen Zh-Hant Kulturen werden neutrale Kulturen. Die Kulturnamen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen Zh-CHS und Zh-CHT.  
  
 Eine Kultur-ID ist eine internationale numerische standardabkürzung und die Komponenten, die erforderlich sind, um eine der installierten Kulturen eindeutig zu identifizieren. Ihre Anwendung kann vordefinierte Kulturbezeichner verwenden oder benutzerdefinierte Bezeichner definieren.  
  
 Bestimmte vordefinierte Kulturnamen und Bezeichner verwendet werden, indem dieser und anderen Klassen in der <xref:System.Globalization?displayProperty=nameWithType> Namespace. Ausführliche kulturinformationen wird angezeigt, der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center.  
  
 Denken Sie daran, dass die Kulturnamen und Bezeichner nur eine Teilmenge der Kulturen darstellen, die auf einem bestimmten Computer gefunden werden kann. Windows-Versionen oder Servicepacks können die verfügbaren Kulturen ändern. Anwendungen hinzufügen Kulturen, die mithilfe der <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse. Benutzer können eigene benutzerdefinierten Kulturen, die mit dem Microsoft-Gebietsschema-Generator-Tool hinzugefügt werden. Microsoft-Gebietsschema-Generator wird geschrieben, in verwaltetem Code mit der `CultureAndRegionInfoBuilder` Klasse.  
  
 Verschiedene eindeutige Namen sind eng verknüpft mit einer Kultur, insbesondere die Namen, die die folgenden Member zugeordnet:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Der invariante, neutrale und spezifische Kulturen  
 Die Kulturen sind im Allgemeinen in drei Gruppen zusammengefasst: invarianten Kulturen, die neutralen Kulturen und bestimmte Kulturen.  
  
 Es ist eine invariante Kultur kulturunabhängige. Ihre Anwendung gibt die invariante Kultur an, anhand des Namens, die mit einer leeren Zeichenfolge ("") oder durch seinen Bezeichner. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> definiert eine Instanz der invarianten Kultur. Verknüpft ist mit der englischen Sprache, jedoch nicht für alle Länder/Regionen. Es dient in nahezu jede Methode in der `Globalization` Namespace, die eine Kultur erforderlich sind.  
  
 Eine neutrale Kultur ist eine Kultur, die verknüpft ist mit einer anderen Sprache jedoch nicht mit einem Land/Region. Eine bestimmte Kultur ist eine Kultur, die eine Sprache und ein Land/Region zugeordnet ist. Beispielsweise fr ist neutral Name für die Kultur Französisch und fr-FR ist der Name der bestimmten Kultur Französisch (Frankreich). Beachten Sie, dass Chinesisch (vereinfacht) und Chinesisch (traditionell) auch neutrale Kulturen berücksichtigt werden.  
  
 Erstellen einer Instanz von einem <xref:System.Globalization.CompareInfo> -Klasse für eine neutrale Kultur wird nicht empfohlen, da die darin enthaltenen Daten beliebiger ist. Geben Sie zum Anzeigen und Sortieren von Daten, Sprache und Region aus. Darüber hinaus die <xref:System.Globalization.CompareInfo.Name%2A> Eigenschaft von einem <xref:System.Globalization.CompareInfo> Objekt für eine neutrale Kultur nur das Land gibt und die Region nicht schließt erstellt.  
  
 Die definierten Kulturen bilden eine Hierarchie, in dem das übergeordnete Element einer bestimmten Kultur ist eine neutrale Kultur, das übergeordnete Element einer neutralen Kultur die invariante Kultur. Die <xref:System.Globalization.CultureInfo.Parent%2A> Eigenschaft enthält die neutrale Kultur, die eine bestimmte Kultur zugeordnet. Benutzerdefinierte Kulturen sollten definieren die <xref:System.Globalization.CultureInfo.Parent%2A> Eigenschaft in Übereinstimmung mit diesem Muster.  
  
 Wenn die Ressourcen für eine bestimmte Kultur nicht im Betriebssystem verfügbar sind, werden die Ressourcen für die zugehörige neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die in die Hauptassembly eingebetteten Ressourcen verwendet. Weitere Informationen zu den Ressourcenfallback-Prozess, finden Sie unter [Verpacken und Bereitstellen von Ressourcen](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 Die Liste der Gebietsschemas in der Windows-API unterscheidet sich leicht aus der Liste der von .NET Framework unterstützten Kulturen. Wenn Interoperabilität mit Windows erforderlich ist, sollten beispielsweise über den p/invoke-Mechanismus die Anwendung verwenden eine bestimmte Kultur, die definiert, ist für das Betriebssystem. Verwendung einer bestimmten Kultur gewährleistet die Konsistenz der entsprechende Windows-Gebietsschema, der mit der Gebietsschema-ID identifiziert wird, die als ist <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 Ein <xref:System.Globalization.DateTimeFormatInfo> oder ein <xref:System.Globalization.NumberFormatInfo> kann nur für die invariante Kultur oder für bestimmte Kulturen, nicht für die neutralen Kulturen erstellt werden.  
  
 Wenn <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> ist die <xref:System.Globalization.TaiwanCalendar> aber die <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> nicht festgelegt ist, Zh-TW, klicken Sie dann <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, und <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> geben eine leere Zeichenfolge zurück ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Kulturen  
 Zusätzlich zu den vordefinierten von Windows-Betriebssystems und der .NET Framework unterstützten Kulturen unterstützt das .NET Framework drei Typen von Kulturen:  
  
-   Neue Kulturen, die die Kulturen, die in Windows oder .NET Framework verfügbaren ergänzen. Beispielsweise eine Anwendung installieren konnte eine <xref:System.Globalization.CultureInfo> -Objekt, stellt die Fj-FJ (oder Fijan (Fidschi)) auf einem System Kultur.  
  
-   Ersatzkulturen, dessen Eigenschaften aus den Eigenschaften der standard durch Windows und .NET Framework unterstützten Kulturen unterschiedlich sind.  
  
-   Standard Kulturen mit Benutzer überschreibt. Die Benutzer können die **Region und Sprache** -Anwendung in **Systemsteuerung** Eigenschaftswerte für eine vorhandene Kultur anpassen.  
  
> [!NOTE]
>  Sie können die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse definieren, gespeichert und Kulturen, die ergänzen oder Ersetzen der vorhandene Kulturen zu registrieren. Die <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> Methode erstellt eine Gebietsschema Data Markup Language (LDML)-Datei, die verwendet werden kann, um eine benutzerdefinierte Kultur auf den Zielsystemen zu installieren. Schritt-für-Schritt-Informationen zur Verwendung der <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse zum Erstellen eines neuen oder Ersatzkultur, finden Sie unter der <xref:System.Globalization.CultureAndRegionInfoBuilder> klassenthema.  
  
 Da .NET Framework Kulturen unterstützt, sollten Sie beim Arbeiten mit kulturspezifischen Daten Folgendes:  
  
-   Kulturen können Werte enthalten, die die Bereiche von vordefinierten Kulturen überschreiten. Beispielsweise haben einige Kulturen außergewöhnlich lange Monatsnamen, unerwartete Datums- oder Zeitformate oder andere ungewöhnlichen Daten.  
  
-   Wenn kulturspezifische Daten in der Benutzeroberfläche angezeigt werden, sollten Sie Anpassungen des Benutzers entsprechen. der Benutzer kann z. B. ein 24-Stunden-Format oder ein Datumsformat jjjjMMtt soll.  
  
-   Denken Sie daran, dass benutzerdefinierte Kulturen Standardwerte zu überschreiben. Daher kann nicht die der Kulturdaten stabil berücksichtigt werden. Ländernamen, Number und Date-Formate und Schreibweisen können in der Zukunft ändern. Wenn Sie kulturabhängige Daten wie z. B. Datum- und Uhrzeitzeichenfolgen Datum und Uhrzeit, die Analyse Funktionen übergeben werden serialisieren möchten, sollten Sie die invariante Kultur oder ein bestimmtes verwenden.  
  
 Die <xref:System.Globalization.CultureInfo.CultureTypes%2A> enthält Eigenschaftswert Kulturen, die auf einem System installiert die <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Flag und Kulturen zugewiesen sind ein <xref:System.Globalization.CultureInfo.LCID%2A> Eigenschaftswert `LOCALE_CUSTOM_UNSPECIFIED` (0 x 1000 oder 4096). Beachten Sie, dass die ab Windows 10, diesen Wert auch systemdefinierte Kulturen zugewiesen ist, die keine vollständige kulturelle Daten.  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dynamische Kulturdaten  
 Mit Ausnahme der invarianten Kultur ist die Kultur dynamisch. Dies gilt auch für die vordefinierten Kulturen. Z. B. Länder oder Regionen neue Währungen zu verwenden, ändern Sie die Schreibweise von Wörtern oder ändern Sie ihre bevorzugte Kalender und Kultur Definitionen ändern, um dies zu verfolgen.  Benutzerdefinierte Kulturen können ohne vorherige Ankündigung geändert werden und bestimmte Kultur möglicherweise durch eine benutzerdefinierte Kultur überschrieben werden. Darüber hinaus kann wie unten erläutert wird, ein einzelner Benutzer kulturelle Einstellungen überschreiben. Anwendungen sollten immer Kulturdaten zur Laufzeit abrufen.  
  
> [!CAUTION]
>  Beim Speichern von Daten sollten Ihre Anwendung die invariante Kultur, ein binäres Format oder ein bestimmtes kulturunabhängig-Format verwenden. Entsprechend den aktuellen Werten, die eine bestimmte Kultur als der invarianten Kultur zugeordnete gespeicherte Daten möglicherweise nicht mehr gelesen werden oder Bedeutung können sich ändern, wenn sich die Kultur ändert.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>Die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur  
 Jeder Thread in einer .NET Framework-Anwendung verfügt über eine aktuelle Kultur und die aktuelle UI-Kultur. Die aktuelle Kultur bestimmt die Formatierungskonventionen für Datumsangaben, Uhrzeiten, Zahlen und Währungsangaben, die Sortierreihenfolge der Text, Groß-/ Kleinschreibungskonventionen und die Methoden, die Zeichenfolgen verglichen werden. Die aktuelle Benutzeroberflächenkultur wird verwendet, um kulturabhängige Ressourcen zur Laufzeit abzurufen.  
  
> [!NOTE]
>  Informationen wie die aktuelle und die aktuelle Benutzeroberflächenkultur regelmäßig threadspezifisches bestimmt wird, finden Sie unter der [Kultur und Threads](#Threads) Abschnitt. Informationen wie die aktuelle und die aktuelle Benutzeroberflächenkultur für Threads bestimmt wird in einer neuen Anwendungsdomäne und Threads, die Grenzen von Anwendungsdomänen, hinweg ausführen finden Sie unter der [Kultur und Anwendungsdomänen](#AppDomain) Abschnitt. Informationen wie der aktuellen und der aktuellen Threads Ausführen von asynchronen Vorgängen aufgabenbasierte bestimmt ist, finden Sie unter der [Kultur und aufgabenbasierte asynchrone Vorgänge](#Async) Abschnitt.  
  
 Ausführlichere Informationen über die aktuelle Kultur finden Sie unter der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Thema-Eigenschaft. Ausführlichere Informationen über die aktuelle Benutzeroberflächenkultur finden Sie unter der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Thema-Eigenschaft.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Abrufen der aktuellen und dem aktuellen Benutzeroberflächenkulturen  
 Sie erhalten eine <xref:System.Globalization.CultureInfo> Objekt, das die aktuelle Kultur auf zwei Arten darstellt:  
  
-   Durch das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Durch das Abrufen des Werts der [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) Eigenschaft.  
  
 Das folgende Beispiel ruft der beiden Eigenschaftenwerte, miteinander verglichen, um anzuzeigen, dass sie gleich sind, und zeigt den Namen der aktuellen Kultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Sie erhalten eine <xref:System.Globalization.CultureInfo> Objekt, das die aktuelle Benutzeroberflächenkultur auf zwei Arten darstellt:  
  
-   Durch das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Durch das Abrufen des Werts der [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) Eigenschaft.  
  
 Das folgende Beispiel ruft der beiden Eigenschaftenwerte, miteinander verglichen, um anzuzeigen, dass sie gleich sind, und zeigt den Namen des die aktuelle Benutzeroberflächenkultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Festlegen der aktuellen und dem aktuellen Benutzeroberflächenkulturen  
 Führen Sie folgende Schritte aus, um die Kultur und Benutzeroberflächenkultur eines Threads zu ändern:  
  
1.  Instanziieren einer <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, durch den Aufruf darstellt einer <xref:System.Globalization.CultureInfo> -Konstruktors und übergibt den Namen der Kultur. Die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor instanziiert einen <xref:System.Globalization.CultureInfo> -Objekt, das Benutzer widerspiegelt wird überschrieben, wenn die neue Kultur der aktuellen Windows-Kultur entspricht.   Die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor können Sie angeben, ob das neu instanziierte <xref:System.Globalization.CultureInfo> Objekt darstellt, Benutzer wird überschrieben, wenn die neue Kultur der aktuellen Windows-Kultur entspricht.  
  
2.  Weisen Sie die <xref:System.Globalization.CultureInfo> -Objekt an die <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> oder <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Darüber hinaus für apps, die die Version 4.6 oder höher von .NET Framework desktop ausgeführt werden, Sie können auch Zuweisen der <xref:System.Globalization.CultureInfo> -Objekt an die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> oder <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Im folgende Beispiel ruft die aktuelle Kultur ab. Wenn sie nicht die Kultur Französisch (Frankreich) verwendet wird, wird die aktuelle Kultur auf Französisch (Frankreich) geändert. Andernfalls wird die aktuelle Kultur auf Französisch (Luxemburg) geändert.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 Im folgende Beispiel ruft die aktuelle Kultur ab. Ist es etwas andere Kultur Slowenisch (Slowenien) die aktuelle Kultur in Slowenisch (Slowenien) geändert. Andernfalls wird die aktuelle Kultur auf Kroatisch (Kroatien) geändert.  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Abrufen aller Kulturen  
 Sie können ein Array Informationskategorien Kulturen oder aller Kulturen, die auf dem lokalen Computer verfügbaren abrufen, durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode. Beispielsweise können Sie benutzerdefinierte Kulturen, bestimmte Kulturen oder neutralen Kulturen entweder allein oder in Kombination abrufen.  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode zweimal, wird zuerst mit der <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Enumerationsmember zum Abrufen aller Kulturen, und klicken Sie dann mit der <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Enumerationsmember alle Ersatzkulturen abgerufen.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Kultur und threads  
 Wenn ein neuer Anwendungsthread gestartet wird, werden dessen aktuelle Kultur und die aktuelle Benutzeroberflächenkultur durch die aktuelle Systemkultur, und nicht durch die aktuelle Threadkultur definiert. Der Unterschied wird im folgenden Beispiel veranschaulicht. Die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur eines Threads für die Anwendung festgelegt auf der Kultur Französisch (Frankreich) (fr-FR). Ist die aktuelle Kultur bereits fr-FR, wird das Beispiel auf der Kultur Englisch (USA) (En-US). Es werden drei Zufallszahlen als Währungswerte angezeigt und erstellt dann einen neuen Thread, der, die wiederum drei mehr Zufallszahlen als Währungswerte angezeigt. Aber wie die Ausgabe des Beispiels zeigt, die Währungswerte angezeigt, von dem neuen Thread spiegeln nicht die Formatierungskonventionen der Kultur Französisch (Frankreich) im Gegensatz zu der Kassenstand Thread der hauptanwendung.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 In Versionen von .NET Framework vor der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], wird der verbreitete Methode, um sicherzustellen, dass der Thread der hauptanwendung das dieselbe Kultur mit anderen Arbeitsthreads teilt ist entweder der Name der Kultur anwendungsweite übergeben oder ein <xref:System.Globalization.CultureInfo> Objekt, mit Stellt die anwendungsweite Kultur, die eine <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> delegieren. Im folgende Beispiel wird dieser Ansatz verwendet, um sicherzustellen, dass die Formatierungskonventionen der gleichen Kultur, die Currency-Werte von zwei Threads angezeigt widerspiegeln.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Sie können festlegen der Kultur und Benutzeroberflächenkultur des Threads im Threadpool auf ähnliche Weise durch Aufrufen der <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> Methode.  
  
 Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die Kultur und Benutzeroberflächenkultur aller Threads in einer Anwendungsdomäne direkt durch Zuweisen von festlegen eine <xref:System.Globalization.CultureInfo> -Objekt, das diese Kultur entspricht der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften. Im folgenden Beispiel wird diese Eigenschaften, um sicherzustellen, dass alle Threads in der Standardanwendungsdomäne das dieselbe Kultur nutzen.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Obwohl die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften sind statische Member, die sie definieren die Standardkultur und die standardmäßige Benutzeroberflächenkultur nur für die Anwendungsdomäne, die während der Ausführung wird diese Eigenschaftswerte festgelegt sind. Weitere Informationen finden Sie im nächsten Abschnitt [Kultur und Anwendungsdomänen](#AppDomain).  
  
 Wenn Sie Werte zuweisen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, die Kultur und Benutzeroberflächenkultur für Threads in der Anwendungsdomäne auch ändern, wenn diese nicht explizit eine Kultur zugewiesen wurden. Diese Threads wider jedoch die neuen kultureinstellungen, allerdings nur, wenn sie in der aktuellen Anwendungsdomäne ausgeführt. Wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, wird ihre Kultur die Standardkultur für diese Anwendungsdomäne definiert. Daher wird empfohlen, dass Sie immer die Kultur des Threads hauptanwendung festgelegt, und verlassen Sie sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, um ihn zu ändern.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Die Kultur und die Anwendung Domänen  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sind statische Eigenschaften, die explizit eine Standardkultur nur für die Anwendungsdomäne zu definieren, die aktuell ist, wenn der Wert der Eigenschaft festgelegt oder abgerufen wird. Im folgende Beispiel legt die Standardkultur und die standardmäßige Benutzeroberflächenkultur in die Standardanwendungsdomäne auf Französisch (Frankreich) fest und verwendet dann die <xref:System.AppDomainSetup> Klasse und die <xref:System.AppDomainInitializer> Delegat, der in eine neue Anwendungsdomäne, die Standardkultur und Benutzeroberflächenkultur festgelegt Russisch (Russische Föderation). Ein einzelner Thread wird zwei Methoden in jeder Anwendungsdomäne ausgeführt. Beachten Sie, dass der Thread Kultur und Benutzeroberflächenkultur nicht explizit festgelegt werden. Sie abgeleitet sind aus der Standardkultur und-Benutzeroberflächenkultur der Anwendungsdomäne, in der der Thread ausgeführt wird. Beachten Sie auch, dass die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften zurückgeben, die Standardeinstellung <xref:System.Globalization.CultureInfo> Werte der Anwendungsdomäne, die aktuell ist, wenn die Methode aufgerufen wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Weitere Informationen über Kulturen und Anwendungsdomänen finden Sie im Abschnitt "Anwendung Domänen und Threads" im Thema.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Kultur und aufgabenbasierte asynchrone Vorgänge  
 Die [aufgabenbasierte asynchrone programmierschema](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) verwendet <xref:System.Threading.Tasks.Task> und <xref:System.Threading.Tasks.Task%601> Objekte, die asynchron auszuführende Delegaten auf thread des Threadpools. Die bestimmte Thread, der auf dem eine bestimmte Aufgabe ausgeführt wird nicht im Voraus bekannt ist, aber es wird nur zur Laufzeit bestimmt.  
  
 Für apps, die als Ziel der [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder höhere Versionen Kultur ist Bestandteil des Kontexts eines asynchronen Vorgangs. Das heißt, beginnend mit apps, die gezielt die [!INCLUDE[net_v46](~/includes/net-v46-md.md)], asynchrone Vorgänge standardmäßig erben die Werte der der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften des Threads, von dem sie gestartet werden. Wenn die aktuelle Kultur oder die aktuelle Benutzeroberflächenkultur die Systemkultur unterscheidet, und der aktuellen Kultur über mehrere Threads wird von der aktuellen Kultur der Thread des Threadpools, der einen asynchronen Vorgang ausführt.  
  
 Das folgende Beispiel bietet eine einfache Veranschaulichung. Er verwendet die <xref:System.Runtime.Versioning.TargetFrameworkAttribute> Attribut, um das Ziel der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. Im Beispiel definiert eine <xref:System.Func%601> zu delegieren, `formatDelegate`, Zahlen, die als Währungswerte formatiert zurückgibt. Im Beispiel wird die aktuelle Systemkultur entweder in Französisch (Frankreich) geändert oder, wenn Französisch (Frankreich) bereits die aktuelle Kultur Englisch (Vereinigte Staaten) ist. Klicken Sie dann diese:  
  
-   Ruft den Delegaten direkt, sodass er synchron auf der Haupt-app-Thread ausgeführt wird.  
  
-   Erstellt eine Aufgabe, die den Delegaten asynchron über einen Threadpoolthread ausgeführt wird.  
  
-   Erstellt eine Aufgabe, die den Delegaten auf dem Haupt-app-Thread durch den Aufruf synchron ausführt die <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> Methode.  
  
 Wie die Ausgabe des Beispiels zeigt, wenn die aktuelle Kultur auf Französisch (Frankreich) geändert wird, wird die aktuelle Kultur des Threads aus dem Vorgänge asynchron aufgerufen werden, die aktuelle Kultur für diesen asynchronen Vorgang an.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Für apps, die gezielt Versionen von .NET Framework vor der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], oder für apps, die keine bestimmte Version von .NET Framework ausgerichtet sind, ist die Kultur des aufrufenden Threads nicht Teil des Kontexts einer Aufgabe. Stattdessen, es sei denn, eine explizit definiert ist, ist die Kultur des neuen Threads in der Standardeinstellung die Systemkultur. Das folgende Beispiel, das mit dem vorherigen Beispiel identisch ist, außer dass es fehlt das <xref:System.Runtime.Versioning.TargetFrameworkAttribute> -Attribut angegeben wird, wird dies veranschaulicht. Wurde die Systemkultur des Systems, auf dem das Beispiel ausgeführt, Englisch (Vereinigte Staaten), wird die Kultur der Aufgabe, die asynchron über einen Threadpoolthread ausgeführt wird, fr-FR, anstatt En-US  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Für apps, die gezielt Versionen von .NET Framework von der [!INCLUDE[net_v45](~/includes/net-v45-md.md)] und später jedoch vor der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], können Sie die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, um sicherzustellen, dass die Kultur des aufrufenden Threads, im asynchronen verwendet wird tasks Führen Sie für Threads im Threadpool. Im folgende Beispiel wird mit dem vorherigen Beispiel identisch, verwendet die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft, um diesem Thread des Threadpools sicherzustellen haben, das dieselbe Kultur aufweist wie die Haupt-app-Thread.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sind app-bezogenes Domäneneigenschaften; d. h. eingerichtete eine Standardkultur für alle Threads, die nicht explizit eine Kultur in einer bestimmten Anwendungsdomäne zugewiesen. Beachten Sie jedoch bei apps, die als Ziel der [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder später, die Kultur des aufrufenden Threads Bestandteil des Kontexts einer asynchronen Aufgabe bleibt, auch wenn die Aufgabe app-Domänengrenzen überschreitet.  
  
 Das folgende Beispiel zeigt, dass die Kultur des aufrufenden Threads der aktuellen Kultur einen aufgabenbasierten asynchronen Vorgangs bleibt, auch wenn die Methode, die die Aufgabe ausgeführt wird, Anwendungsdomänengrenzen überschreitet. Definiert eine Klasse `DataRetriever`, mit einer einzelnen Methode `GetFormattedNumber`, eine zufällige Gleitkommazahl mit doppelter Genauigkeit zwischen 1 und 1.000 als Währungswert formatiert zurückgibt. Eine erste Aufgabe wird ausgeführt, der einfach instanziiert einen `DataRetriever` -Instanz und ruft seine `GetFormattedNumber` Methode. Eine zweite Aufgabe gibt die aktuelle Anwendungsdomäne, erstellt eine neue Anwendungsdomäne, instanziiert einen `DataRetriever` Instanz in die neue Anwendungsdomäne und ruft seine `GetFormattedNumber` Methode. Wie die Ausgabe des Beispiels zeigt, die aktuelle Kultur geblieben in den aufrufenden Thread, die erste Aufgabe und die zweite Aufgabe beide identisch, wenn die Hauptassembly der Anwendung und der zweiten Anwendungsdomäne ausgeführt wurde.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>Serialisierung der CultureInfo-Objekt  
 Wenn eine <xref:System.Globalization.CultureInfo> Objekt serialisiert wird, tatsächlich gespeichert ist, lediglich <xref:System.Globalization.CultureInfo.Name%2A> und <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Es ist erfolgreich deserialisiert nur in einer Umgebung, in denen, <xref:System.Globalization.CultureInfo.Name%2A> hat die gleiche Bedeutung. Die folgenden drei Beispiele zeigen, warum dies nicht ist immer die Groß-/Kleinschreibung:  
  
-   Wenn die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Eigenschaftswert ist <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, und diese Kultur zuerst in Windows Vista oder eine höhere Version des Betriebssystems Windows eingeführt wurde, ist es nicht möglich, es unter Windows XP deserialisiert werden. Wenn die Kultur in Windows XP Service Pack 2 eingeführt wurde, ist es entsprechend nicht möglich, deserialisiert für ein Windows XP-System werden auf dem die Kultur nicht installiert wurde.  
  
-   Wenn die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Wert <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, und der Computer, auf dem er deserialisiert verfügt nicht über diese benutzerdefinierte Kultur installiert, es ist nicht möglich, es deserialisiert werden.  
  
-   Wenn die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Wert <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, und der Computer, auf dem er deserialisiert verfügt nicht über diese Ersetzung Kultur, es Deserialisierung den gleichen Namen, aber nicht alle die gleichen Merkmale. Z. B. wenn ein Ersatzkultur auf Computer A, jedoch nicht auf Computer B "En-US" ist und eine <xref:System.Globalization.CultureInfo> Objekt verweisen auf diese Kultur wird auf Computer A serialisiert und deserialisiert auf Computer B, dann sind die benutzerdefinierten Merkmale der Kultur übertragen. Die Deserialisierung wird erfolgreich, aber eine andere Bedeutung hat.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Systemsteuerung überschreibt.  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen. Im Allgemeinen sollten Anwendungen diese Außerkraftsetzungen Benutzer berücksichtigen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und der angegebene Kultur entspricht die aktuelle Kultur von Windows die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Alternativen Sortierreihenfolgen  
 Einige Kulturen unterstützten mehr als eine Sortierreihenfolge. Zum Beispiel:  
  
-   Die Kultur Spanisch (Spanien) verfügt über zwei Sortierreihenfolgen: internationaler Standard-Sortierreihenfolge und die herkömmliche Sortierreihenfolge. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> -Objekt mit den Kulturnamens es-ES, die internationale Sortierreihenfolge verwendet wird. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt mit dem Kulturnamen es-ES-Tradnl die herkömmlichen Sortierreihenfolge verwendet wird.  
  
-   Die Kultur Zh-CN (Chinesisch (vereinfacht, VR China)) werden zwei Sortierreihenfolgen unterstützt: durch Aussprache (Standard) und der Anzahl. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> -Objekt mit den Kulturnamen Zh-CN-Standard-Sortierreihenfolge verwendet wird. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> -Objekt mit einer lokalen Bezeichners der 0 x 00020804, Zeichenfolgen nach strichzählung sortiert sind.  
  
 Die folgende Tabelle enthält die Kulturen, die unterschiedliche Sortierreihenfolgen unterstützen, sowie die Bezeichner für die standardmäßigen und die alternativen Sortierreihenfolgen.  
  
|Kulturname|culture|Standardsortierreihenfolge und Bezeichner|Alternative Sortierreihenfolge und Bezeichner|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Spanisch (Spanien)|International: 0x00000C0A|Traditionell: 0x0000040A|  
|zh-TW|Chinesisch (Taiwan)|Anzahl der Striche: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chinesisch (VRC)|Aussprache: 0x00000804|Anzahl der Striche: 0x00020804|  
|zh-HK|Chinesisch (Hongkong SAR)|Anzahl der Striche: 0x00000c04|Anzahl der Striche: 0x00020c04|  
|zh-SG|Chinesisch (Singapur)|Aussprache: 0x00001004|Anzahl der Striche: 0x00021004|  
|zh-MO|Chinesisch (Macau SAR)|Aussprache: 0x00001404|Anzahl der Striche: 0x00021404|  
|ja-JP|Japanisch (Japan)|Standard: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Koreanisch (Korea)|Standard: 0x00000412|Koreanisch Xwansung – Unicode:  0x00010412|  
|de-DE|Deutsch (Deutschland)|Wörterbuch: 0x00000407|Telefonbuchsortierung DIN: 0x00010407|  
|hu-HU|Ungarisch (Ungarn)|Standard: 0x0000040e|Technische Sortierung: 0x0001040e|  
|ka-GE|Georgisch (Georgien)|Traditionell: 0x00000437|Moderne Sortierung: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Die aktuelle Kultur und uwp-apps  
 In apps der universellen Windows-Plattform (UWP) die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften sind Lese-/ Schreibzugriff, wie sie in .NET Framework und .NET Core-apps sind. Uwp-apps erkennt jedoch eine bestimmte Kultur. Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften-Karte, um den ersten Wert in der [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) Auflistung.  

In .NET Framework und .NET Core-apps, die aktuelle Kultur ist eine Einstellung pro Thread und die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> entsprechen Eigenschaften, die Kultur und Benutzeroberflächenkultur des aktuellen Threads. In uwp-apps, die aktuelle Kultur ordnet die [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Auflistung, die eine globale einsstellung handelt. Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> oder <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ändert die Kultur der gesamten app; Kultur kann nicht auf eine Threadbasis festgelegt werden.
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Erstellen einer <xref:System.Globalization.CultureInfo> Objekt für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> Objekt mit der herkömmlichen Sortierung.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Bezeichner, die <see cref="P:System.Globalization.CultureInfo.LCID" />-Eigenschaft eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts oder ein Nur-Windows-Kulturbezeichner.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Kulturbezeichner angegebenen Kultur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vordefinierte Kulturbezeichner sind aufgeführt, der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center.  
  
 In den meisten Fällen die `culture` Parameter dem entsprechenden National Language Support (NLS) Gebietsschemabezeichner zugeordnet ist. Der Wert, der die `culture` Parameter wird der Wert der die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft der neuen <xref:System.Globalization.CultureInfo>.  
  
 Es wird empfohlen, dass der Aufruf des Konstruktors der Gebietsschema-Namen <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, da Gebietsschemanamen LCIDs vorzuziehen sind. Für benutzerdefinierte Gebietsschemas ist ein Gebietsschemanamen erforderlich.  
  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen. Wenn des angegebenen Kulturbezeichners den Kulturbezeichner für die aktuelle Windows-Kultur übereinstimmt, wird dieser Konstruktor erstellt eine <xref:System.Globalization.CultureInfo> , verwendet diese Außerkraftsetzungen, einschließlich der Einstellungen für die Eigenschaften des Benutzers der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo> (z. B., wenn die ausgewählte Kalender nicht wird der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Wenn der Bezeichner für die angegebene Kultur nicht den Bezeichner des aktuellen Windows-Kultur übereinstimmt, wird dieser Konstruktor erstellt eine <xref:System.Globalization.CultureInfo> , die Standardwerte für die angegebene Kultur verwendet.  
  
 Die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz ist immer auf `true`.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Windows-Kultur ist und der Benutzer hat den Kalender von Hijri gregorianische geändert.  
  
-   Mit `CultureInfo("0x0401")` (die Kultur Namen Ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.GregorianCalendar> (Hierbei handelt es sich um die Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
-   Mit `CultureInfo("0x041E")` (die Kultur Namen th-TH) <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.ThaiBuddhistCalendar> (Hierbei handelt es sich um den Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
 Kulturen, die Euro verwenden, wird .NET Framework und Windows XP standardmäßig als Euro festlegen. Allerdings keine frühere Versionen von Windows. Wenn der Benutzer eine ältere Version von Windows die Currency-Einstellung über die Länder- und spracheinstellungen des Teils der Optionen der Systemsteuerung nicht geändert wurde, kann die Währung aus diesem Grund falsch sein. Um die .NET Framework-Standardeinstellung für die Währung zu verwenden, sollte die Anwendung verwenden eine <xref:System.Globalization.CultureInfo> Konstruktorüberladung, die akzeptiert eine `useUserOverride` Parameter und setzen es auf `false`.  
  
> [!NOTE]
>  Für Abwärtskompatibilität einer Kultur mithilfe einer `culture` Parameter 0 x 0004 oder 0x7c04 besitzen, wird eine <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft Zh-CHS oder Zh-CHT bzw. Sie sollten stattdessen, die mit der aktuellen Kulturnamen Zh-Hans oder Zh-Hant Kultur zu erstellen, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen verwenden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="culture" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name, eine <see cref="P:System.Globalization.CultureInfo.Name" />-Eigenschaft einer vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Klasse oder ein nur für Windows definierter Kulturname. Bei <c>name</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>	Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Namen angegebenen Kultur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kulturnamen, finden Sie unter der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Darüber hinaus starten mit Windows 10, `name` kann eine beliebige gültige BCP-47-Sprachtag.  
  
 Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, der Konstruktor erstellt eine Instanz der invarianten Kultur; Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft.  
  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen. Wenn der Kulturbezeichner zugeordnet `name` Übereinstimmungen, die der Kulturbezeichner für die aktuelle Windows-Kultur dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> -Objekt, das die Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der verwendet<xref:System.Globalization.DateTimeFormatInfo>vom zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften des der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Wenn die der Kulturbezeichner zugeordnete `name` entspricht nicht der Kulturbezeichner für die aktuelle Windows-Kultur dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> -Objekt, das die Standardwerte für die angegebene Kultur verwendet.  
  
 Die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz ist immer auf `true`.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Kultur von Windows ist und der Benutzer in den gregorianischen Kalender von Hijri geändert.  
  
-   Mit `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.GregorianCalendar> (Hierbei handelt es sich um die Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
-   Mit `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.ThaiBuddhistCalendar> (Hierbei handelt es sich um den Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
 Die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft der neuen <xref:System.Globalization.CultureInfo> festgelegt ist, auf die Kultur-ID, die dem angegebenen Namen zugeordnet.  
  
 Kulturen, die Euro verwenden, wird .NET Framework und Windows XP standardmäßig als Euro festlegen. Jedoch tun ältere Versionen von Windows nicht dies. Wenn der Benutzer eine ältere Version von Windows die Currency-Einstellung über die Länder- und spracheinstellungen des Teils der Optionen der Systemsteuerung nicht geändert wurde, kann die Währung aus diesem Grund falsch sein. Um die .NET Framework-Standardeinstellung für die Währung zu verwenden, sollte die Anwendung verwenden eine <xref:System.Globalization.CultureInfo> Konstruktorüberladung, die akzeptiert eine `useUserOverride` Parameter und setzen es auf `false`.  
  
   
  
## Examples  
 Im folgende Beispiel ruft die aktuelle Kultur ab. Wenn sie nicht die Kultur Französisch (Frankreich) verwendet wird, ruft es die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor zum Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt, das der Kultur Französisch (Frankreich) darstellt und erleichtert die aktuelle Threadkultur verwendet. Andernfalls, instanziiert es ein <xref:System.Globalization.CultureInfo> Objekt, das der Kultur Französisch (Luxemburg) darstellt und erleichtert die aktuelle Kultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> ist kein gültiger Kulturname. Weitere Informationen finden Sie im Abschnitt "Hinweise zu Aufrufern".</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , und wenn <paramref name="name" /> ist nicht der Name einer zusätzlichen oder Ersatz Kultur, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Bezeichner, die <see cref="P:System.Globalization.CultureInfo.LCID" />-Eigenschaft eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts oder ein Nur-Windows-Kulturbezeichner.</param>
        <param name="useUserOverride">Ein boolescher Wert, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen verwendet werden sollen (<see langword="true" />) oder ob die Standardkultureinstellungen verwendet werden (<see langword="false" />).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Kulturbezeichner angegebenen Kultur und auf der Grundlage des booleschen Werts, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen des Systems verwendet werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vordefinierte Kulturbezeichner sind aufgeführt, der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center.  
  
 In den meisten Fällen die `culture` Parameter dem entsprechenden National Language Support (NLS) Gebietsschemabezeichner zugeordnet ist. Der Wert, der die `culture` Parameter wird der Wert der die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft der neuen <xref:System.Globalization.CultureInfo>.  
  
 Es wird empfohlen, dass der Aufruf des Konstruktors der Gebietsschema-Namen <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, da Gebietsschemanamen LCIDs vorzuziehen sind. Für benutzerdefinierte Gebietsschemas ist ein Gebietsschemanamen erforderlich.  
  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Anwendungen sollten in der Regel Außerkraftsetzungen für Benutzer unterbinden. Beachten Sie, dass untersagen Außerkraftsetzungen nicht selbst Datenstabilität garantiert; finden Sie im Blogeintrag [Kulturdaten werden nicht als Abrechnungsinformation erachtet stabil (mit Ausnahme von Invariant)](http://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz auf `true` und des angegebenen Kulturbezeichners entspricht dem Bezeichner der aktuellen Windows-Kultur, dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> , verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für die Eigenschaften für von der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften des der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Andernfalls dieser Konstruktor erstellt eine <xref:System.Globalization.CultureInfo> , die Standardwerte für die angegebene Kultur verwendet.  
  
 Der Wert, der die `useUserOverride` Parameter wird der Wert der die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Eigenschaft.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Kultur von Windows ist und der Benutzer hat den Kalender von Hijri gregorianische geändert.  
  
-   Mit `CultureInfo("0x0401", true)` (die Kultur Namen Ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.GregorianCalendar> (Hierbei handelt es sich um die Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
-   Mit `CultureInfo("0x0401", false)` (die Kultur Namen Ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.HijriCalendar> (Hierbei handelt es sich um den Standardkalender für Ar-SA) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `false`.  
  
-   Mit `CultureInfo("0x041E", true)` (die Kultur Namen th-TH) <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.ThaiBuddhistCalendar> (Hierbei handelt es sich um den Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
-   Mit `CultureInfo("0x041E", false)` (die Kultur Namen th-TH) <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.ThaiBuddhistCalendar> (Hierbei handelt es sich um den Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `false`.  
  
 Kulturen, die Euro verwenden, wird .NET Framework und Windows XP standardmäßig als Euro festlegen. Allerdings keine frühere Versionen von Windows. Wenn der Benutzer eine ältere Version von Windows die Currency-Einstellung über die Länder- und spracheinstellungen des Teils der Optionen der Systemsteuerung nicht geändert wurde, kann die Währung aus diesem Grund falsch sein. Die Anwendung sollte für die Verwendung der .NET Framework-Standardeinstellung für die Währung Festlegen der `useUserOverride` Parameter `false`.  
  
> [!NOTE]
>  Für Abwärtskompatibilität einer Kultur mithilfe einer `culture` Parameter 0 x 0004 oder 0x7c04 besitzen, wird eine <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft Zh-CHS oder Zh-CHT bzw. Sie sollten stattdessen, die mit der aktuellen Kulturnamen Zh-Hans oder Zh-Hant Kultur zu erstellen, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen verwenden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="culture" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name, eine <see cref="P:System.Globalization.CultureInfo.Name" />-Eigenschaft einer vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Klasse oder ein nur für Windows definierter Kulturname. Bei <c>name</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <param name="useUserOverride">Ein boolescher Wert, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen verwendet werden sollen (<see langword="true" />) oder ob die Standardkultureinstellungen verwendet werden (<see langword="false" />).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.CultureInfo" />-Klasse auf der Grundlage der durch den Namen angegebenen Kultur und auf der Grundlage des booleschen Werts, der angibt, ob die vom Benutzer ausgewählten Kultureinstellungen des Systems verwendet werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kulturnamen, finden Sie unter der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Darüber hinaus starten mit Windows 10, `name` kann eine beliebige gültige BCP-47-Sprachtag.  
  
 Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, der Konstruktor erstellt eine Instanz der invarianten Kultur; Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft.  
  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Windows-Kultur über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Anwendungen sollten in der Regel Außerkraftsetzungen für Benutzer unterbinden. Beachten Sie, dass untersagen Außerkraftsetzungen nicht selbst Datenstabilität garantiert; finden Sie im Blogeintrag [Kulturdaten werden nicht als Abrechnungsinformation erachtet stabil (mit Ausnahme von Invariant)](http://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> -Eigenschaftensatz auf `true` und der Namen angegebenen Kultur zugeordnete Kulturbezeichner entspricht den Kulturbezeichner für die aktuelle Windows-Kultur, dieser Konstruktor erstellt ein <xref:System.Globalization.CultureInfo> , verwendet diese Außerkraftsetzungen einschließlich der Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften des der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Andernfalls dieser Konstruktor erstellt eine <xref:System.Globalization.CultureInfo> , die Standardwerte für die angegebene Kultur verwendet.  
  
 Der Wert, der die `useUserOverride` Parameter wird der Wert der die <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Eigenschaft.  
  
 Nehmen wir beispielsweise an, dass Arabisch (Saudi-Arabien) die aktuelle Kultur von Windows ist und der Benutzer in den gregorianischen Kalender von Hijri geändert.  
  
-   Mit `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.GregorianCalendar> (Hierbei handelt es sich um die Benutzer-Einstellung) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
-   Mit `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.HijriCalendar> (Hierbei handelt es sich um den Standardkalender für Ar-SA) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `false`.  
  
-   Mit `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.ThaiBuddhistCalendar> (Hierbei handelt es sich um den Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `true`.  
  
-   Mit `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> festgelegt ist, um <xref:System.Globalization.ThaiBuddhistCalendar> (Hierbei handelt es sich um den Standardkalender für th-TH) und <xref:System.Globalization.CultureInfo.UseUserOverride%2A> festgelegt ist, um `false`.  
  
 Die <xref:System.Globalization.CultureInfo.LCID%2A> -Eigenschaft der neuen <xref:System.Globalization.CultureInfo> festgelegt ist, auf die Kultur-ID, die dem angegebenen Namen zugeordnet.  
  
 Kulturen, die Euro verwenden, wird .NET Framework und Windows XP standardmäßig als Euro festlegen. Jedoch tun ältere Versionen von Windows nicht dies. Wenn der Benutzer eine ältere Version von Windows die Currency-Einstellung über die Länder- und spracheinstellungen des Teils der Optionen der Systemsteuerung nicht geändert wurde, kann die Währung aus diesem Grund falsch sein. Die Anwendung sollte für die Verwendung der .NET Framework-Standardeinstellung für die Währung Festlegen der `useUserOverride` Parameter `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> ist kein gültiger Kulturname. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst der Konstruktor eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , und wenn <paramref name="name" /> ist nicht der Name einer zusätzlichen oder Ersatz Kultur, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den von der Kultur verwendeten Standardkalender ab.</summary>
        <value>Ein <see cref="T:System.Globalization.Calendar" />, der den von der Kultur verwendeten Standardkalender darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und der angegebene Kultur entspricht die aktuelle Kultur von Windows die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Aus diesem Grund Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true`, der Wert dieser Eigenschaft aus den von der Kultur verwendeten Standardkalender unterschiedlich sein.  
  
 Die Anwendung ändert den Kalender, die vom aktuellen <xref:System.Globalization.CultureInfo> durch Festlegen der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> Eigenschaft <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, also in eine Instanz von der <xref:System.Globalization.DateTimeFormatInfo> Klasse. Der neue Kalender muss einer der verwendete Kalender abgelesen <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> enthält auch andere Eigenschaften, die der Datums- und uhrzeitformatierungen zugeordnet sind, anpassen <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualisiert die zwischengespeicherten kulturbezogenen Informationen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informationen, z. B. die Standardeinstellung Kultur und Formatierungsmuster wird erstmalig zwischengespeichert, wenn es angefordert wird. Informationen während der Lebensdauer des ändern kann die <xref:System.AppDomain>, z. B. wenn der Benutzer ändert den Regions- und Sprachoptionen Teil Systemsteuerung Optionen. Allerdings die <xref:System.Globalization.CultureInfo> Klasse automatisch erkennt keine Änderungen in den Systemeinstellungen.  
  
 Die <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Methode löscht den Cache des <xref:System.Globalization.CultureInfo> von erstellten Objekte <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> und aktualisiert die Informationen in den <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, und <xref:System.Globalization.RegionInfo.CurrentRegion%2A> Eigenschaften auf Grundlage der aktuellen Systemeinstellungen.  
  
 Die <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Methode wird nicht aktualisiert die Informationen in der <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft für vorhandene Threads. Zukünftige Threads müssen jedoch alle neuen <xref:System.Globalization.CultureInfo> Eigenschaftswerte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>Eine Kopie der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Klon beschreibbar ist auch dann, wenn die ursprüngliche <xref:System.Globalization.CultureInfo> ist schreibgeschützt. Aus diesem Grund können die Eigenschaften des Klons geändert werden.  
  
 Eine flache Kopie eines Objekts ist eine Kopie des Objekts nur. Wenn das Objekt Verweise auf andere Objekte enthält, erstellt die flache Kopie keine Kopien der Objekte verwiesen wird. Er bezieht sich stattdessen auf die ursprünglichen Objekte. Im Gegensatz dazu erstellt eine tiefe Kopie eines Objekts eine Kopie des Objekts und eine Kopie aller Elemente auf die dieses Objekt direkt oder indirekt verweist.  
  
 Die <xref:System.Globalization.CultureInfo.Clone%2A> Methode eine verbesserte flache Kopie erstellt. Die zurückgegebenen Objekte die <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, und <xref:System.Globalization.CultureInfo.Calendar%2A> Eigenschaften werden ebenfalls kopiert. Daher, das die geklonte <xref:System.Globalization.CultureInfo> Objekt kann die kopierten Eigenschaften ändern, ohne Auswirkungen auf die ursprüngliche <xref:System.Globalization.CultureInfo> Objekt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass CultureInfo.Clone auch klont die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> mit verknüpften Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CompareInfo" /> ab, in der festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</summary>
        <value>Die <see cref="T:System.Globalization.CompareInfo" />, in der festgelegt wird, wie Zeichenfolgen für die Kultur verglichen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.CompareInfo%2A> -Eigenschaft gibt ein <xref:System.Globalization.CompareInfo> Objekt, das kulturspezifische Informationen, die in kulturabhängige Sortierung und Vergleichsvorgänge verwendet bereitstellt.  
  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und der angegebene Kultur entspricht die aktuelle Kultur von Windows die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> mit der herkömmlichen Sortierung.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ein vordefinierter <see cref="T:System.Globalization.CultureInfo" />-Name oder der Name eines vorhandenen <see cref="T:System.Globalization.CultureInfo" />-Objekts. Bei <c>name</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Erstellt eine <see cref="T:System.Globalization.CultureInfo" />, die die zum angegebenen Namen gehörige spezifische Kultur darstellt.</summary>
        <returns>Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt das Folgendes darstellt:  die invariante Kultur, wenn es sich bei <paramref name="name" /> um eine leere Zeichenfolge („“) handelt.  Oder:  Die spezifische <paramref name="name" /> zugeordnete Kultur, wenn <paramref name="name" /> eine neutrale Kultur ist.  Oder:  Die von <paramref name="name" /> angegebene Kultur, wenn <paramref name="name" /> bereits eine bestimmte Kultur ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Methode bindet einen Aufruf der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor.  
  
> [!NOTE]
>  Eine Liste der vordefinierten Kulturnamen, finden Sie unter der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Darüber hinaus starten mit Windows 10, `name` kann eine beliebige gültige BCP-47-Sprachtag.  
  
 Kulturen sind in drei Gruppen zusammengefasst: die invariante Kultur, die neutralen Kulturen und spezifischen Kulturen. Weitere Informationen finden Sie unter der Beschreibung der <xref:System.Globalization.CultureInfo> Klasse.  
  
 Wenn Sie der Kulturbezeichner für die bestimmte Kultur, die von dieser Methode zurückgegebene den Kulturbezeichner für die aktuelle Windows-Kultur übereinstimmt, erstellt diese Methode eine <xref:System.Globalization.CultureInfo> überschreibt-Objekt, das die Windows-Kultur verwendet. Die Außerkraftsetzungen enthalten Einstellungen für die Eigenschaften des Benutzers die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft und die <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Beim Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt, das standardmäßig kultureinstellungen statt Benutzer überschreibt, rufen Sie mit der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor mit einem Wert von `false` für die `useUserOverride` Argument.  
  
 Obwohl die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Methodennamen umfasst des Begriffs "Spezifisch", denken Sie daran, dass Kulturdaten zwischen den Versionen, oder aufgrund von Kulturen oder aufgrund von Benutzer Außerkraftsetzungen ändern können. Verwenden Sie die invariante Kultur oder binär- oder feste Form zum Speichern von Daten an.  
  
   
  
## Examples  
 Das folgende Beispiel ruft ein Array von <xref:System.Globalization.CultureInfo> Objekte, die neutrale Kulturen aus darstellen der <xref:System.Globalization.CultureInfo.GetCultures%2A> Methode und sortiert. Wenn sie die Elemente im Array durchläuft, übergibt er den Namen des jede neutrale Kultur der <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> -Methode und zeigt der Namen der bestimmten Kultur zurückgegeben wird, von der Methode.  
  
> [!NOTE]
>  Im Beispiel wird die Kulturnamen Zh-CHS und Zh-CHT verwendet. Allerdings Anwendungen, Windows Vista und später Zh-Hans anstelle von Zh-CHS und Zh-Hant statt Zh-CHT verwenden soll. Zh-Hans und Zh-Hant stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
>   
>  Beachten Sie außerdem, dass die Ergebnisse des Beispiels auf einer Installation von taiwanischen Windows geltenden Richtlinien abweichen, in denen die Eingabe einer Chinesisch (traditionell) neutralen Kultur (Zh, Zh-CHT oder Zh-Hant) Zh-TW zurückgeben wird.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> ist kein gültiger Kulturname.  Oder:  Der von <paramref name="name" /> angegebenen Kultur ist keine bestimmte Kultur zugeordnet.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" /> ist NULL.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Kulturtypen ab, die das aktuelle <see cref="T:System.Globalization.CultureInfo" />-Objekt betreffen.</summary>
        <value>	Eine bitweise Kombination von einem oder mehreren <see cref="T:System.Globalization.CultureTypes" />-Werten. Es ist kein Standardwert vorhanden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die <xref:System.Globalization.CultureTypes> Enumeration und die <xref:System.Globalization.CultureInfo.CultureTypes%2A> Eigenschaft.  
  
 [!code-cpp[system.globalization.cultureTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cpp/ct.cpp#1)]
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die vom aktuellen Thread verwendete Kultur darstellt, oder setzt dieses Objekt.</summary>
        <value>Ein Objekt, das die vom aktuellen Thread verwendete Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo> -Objekt, das von dieser Eigenschaft zurückgegeben wird und die zugeordneten Objekte bestimmen das Standardformat für Datumsangaben, Uhrzeiten, Zahlen, Currency-Werte, die Sortierreihenfolge des Texts, Groß-/ Kleinschreibungskonventionen und Zeichenfolgenvergleiche.  
  
 Die aktuelle Kultur ist eine Eigenschaft des ausgeführten Threads, die von der statischen zurückgegeben wird <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> Eigenschaft. Der Wert des der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft entspricht dem Wert, der die <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft. Das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft entspricht dem Abrufen der <xref:System.Globalization.CultureInfo> zurückgegebenes Objekt die `Thread.CurrentThread.CurrentCulture` Eigenschaft. Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], Festlegen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft ändert sich ebenfalls die aktuelle Threadkultur verwendet.  
  
> [!NOTE]
>  In .NET Framework 4.5.2 und frühere Versionen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ist schreibgeschützt.  d. h. Sie können den Wert der Eigenschaft abrufen, aber Sie können ihn nicht festlegen. Um die aktuelle Kultur zu ändern, Sie weisen die <xref:System.Globalization.CultureInfo> -Objekt, das der neue Kultur entspricht der `Thread.CurrentThread.CurrentCulture` Eigenschaft. Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ist Lese-/ Schreibzugriff; Sie können sowohl festlegen und Abrufen des Werts der Eigenschaft. Wenn Sie den Wert der Eigenschaft zum Festlegen einer <xref:System.Globalization.CultureInfo> Objekt, das eine neue Kultur, den Wert des darstellt der `Thread.CurrentThread.CurrentCulture` Eigenschaft auch geändert.  
  
 In diesem Abschnitt  
  
 [Wie wird die Kultur eines Threads bestimmt.](#ThreadCulture)   
 [Die aktuelle Kultur](#Getting)   
 [Das explizite Festlegen der CurrentCulture-Eigenschaft](#ExplicitSetting)   
 [Die aktuelle Kultur und die Benutzer-Außerkraftsetzungen](#Overrides)   
 [Die Kultur und die Windows-Apps](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Wie wird die Kultur eines Threads bestimmt.  
 Wenn ein Thread gestartet wird, wird seine Kultur zunächst wie folgt bestimmt:  
  
-   Durch Abrufen der Kultur, die von angegeben wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird, der den Wert der Eigenschaft ist nicht `null`.  
  
-   Wenn der Thread ein Thread des Threadpools, die ausgeführt wird ist, einen aufgabenbasierten asynchronen Vorgängen und die app aufgerichtet ist die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder eine höhere Version von .NET Framework, die Kultur wird von der Kultur des aufrufenden Threads bestimmt.  Im folgenden Beispiel wird die aktuelle Kultur, Portugiesisch (Brasilien) und sechs Aufgaben gestartet, von die jede die Thread-ID, die Task-ID und die aktuelle Kultur angezeigt. Jede der Vorgänge (und die Threads) hat die Kultur des aufrufenden Threads geerbt.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" in der <xref:System.Globalization.CultureInfo> Thema.  
  
-   Durch Aufruf der Windows `GetUserDefaultLocaleName` Funktion.  
  
 Beachten Sie, dass wenn Sie festlegen, dass eine bestimmte Kultur, die von der Kultur System installiert oder bevorzugten Kultur des Benutzers unterscheidet, und die Anwendung mehrere Threads startet, die aktuelle Kultur des Threads die Kultur, die von zurückgegeben wird das `GetUserDefaultLocaleName` Funktion, es sei denn, Sie eine Kultur zugewiesen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird.  
  
 Weitere Informationen, wie die Kultur eines Threads bestimmt wird, finden Sie im Abschnitt "Kultur und Threads" in der <xref:System.Globalization.CultureInfo> Referenzseite.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Abrufen der aktuellen Kultur  
 Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft ist eine Einstellung threadspezifisches; d. h. jeder Thread eine eigene Kultur verfügen kann. Sie erhalten die Kultur des aktuellen Threads an, indem Sie das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft, wie im folgenden Beispiel illustriert.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Sie können auch den Wert der Kultur des aktuellen Threads Abrufen der <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> Eigenschaft.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Das explizite Festlegen der CurrentCulture-Eigenschaft  
 Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], um die Kultur zu ändern, die durch einen vorhandenen Thread verwendet wird Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> -Eigenschaft der neuen Kultur. Wenn Sie explizit ändern, die Kultur eines Threads auf diese Weise ändern, weiterhin auf, wenn der Thread Anwendungsdomänengrenzen überschreitet. Im folgende Beispiel ändert die aktuelle Threadkultur, Niederländisch (Niederlande). Es zeigt auch, dass, wenn der aktuelle Thread Anwendungsdomänengrenzen überschreitet, dessen aktuelle Kultur geänderten bleibt.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Ändern die Kultur mithilfe der <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft erfordert eine <xref:System.Security.Permissions.SecurityPermission> Berechtigung mit der <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> festgelegten Wert. Bearbeiten von Threads ist aufgrund der mit Threads verbundenen Sicherheitszustands riskant. Daher sollte diese Berechtigung erteilt werden, nur für vertrauenswürdigen Code, und klicken Sie dann nur nach Bedarf. Sie können Threadkultur in teilweise vertrauenswürdigem Code nicht ändern.  
  
 Beginnend mit der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], Sie können die aktuelle Threadkultur explizit in einer bestimmten Kultur (z. B. Französisch (Kanada)) oder eine neutrale Kultur (z. B. Französisch) ändern. Wenn eine <xref:System.Globalization.CultureInfo> Objekt stellt eine neutrale Kultur, die Werte der <xref:System.Globalization.CultureInfo> Eigenschaften wie z. B. <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, und <xref:System.Globalization.CultureInfo.TextInfo%2A> reflektieren die bestimmte Kultur, die zugeordnet ist die neutrale Kultur. Beispielsweise ist die bestimmende Kultur für die neutrale Kultur Englisch Englisch (Vereinigte Staaten); die bestimmende Kultur für die deutscher Kultur "Deutsch (Deutschland)". Das folgende Beispiel veranschaulicht den Unterschied bei der Formatierung, wenn die aktuelle Kultur, an eine bestimmte Kultur Französisch (Kanada) und eine neutrale Kultur festgelegt ist Französisch.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Können Sie auch die <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft zusammen mit der <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> -Eigenschaft zum Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft einer ASP.NET-Anwendung für den Benutzer bevorzugten Kultur, wie im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>Die aktuelle Kultur und die Benutzer-Außerkraftsetzungen  
 Windows kann Benutzer, der die Standardeigenschaftenwerte überschreiben die <xref:System.Globalization.CultureInfo> Objekt und die zugeordneten Objekte mithilfe von **Regions- und Sprachoptionen** in der Systemsteuerung. Die <xref:System.Globalization.CultureInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft spiegelt wider, diese Benutzer überschreibt in den folgenden Fällen:  
  
-   Wenn die aktuelle Threadkultur implizit, der von Windows festgelegt ist `GetUserDefaultLocaleName` Funktion.  
  
-   Wenn die aktuelle Threadkultur definiert die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft entspricht der aktuellen Kultur des Windows-System.  
  
-   Wenn die aktuelle Threadkultur für eine Kultur zurückgegebenes explizit festgelegt ist die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> -Methode, und die aktuelle Systemkultur von Windows Kultur entspricht.  
  
-   Wenn die aktuelle Threadkultur explizit für eine Kultur instanziiert, indem festgelegt wird die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor, und die aktuelle Systemkultur von Windows Kultur entspricht.  
  
 In einigen Fällen, insbesondere für serveranwendungen, die aktuelle Kultur festlegen eine <xref:System.Globalization.CultureInfo> -Objekt, das Benutzer Außerkraftsetzungen wiedergibt, kann unerwünscht sein. Sie können stattdessen die aktuelle Threadkultur festlegen, um eine <xref:System.Globalization.CultureInfo> -Objekt, das Benutzer nicht wiedergibt Außerkraftsetzungen auf folgende Weise:  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor mit einem Wert von `false` für die `useUserOverride` Argument.  
  
-   Durch Aufrufen der <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Methode, die schreibgeschützt sind und eine zwischengespeicherte zurückgibt <xref:System.Globalization.CultureInfo> Objekt.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Die aktuelle Kultur und uwp-apps  
 In apps der universellen Windows-Plattform (UWP) die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ist Lese-/ Schreibzugriff, so wie dies in .NET Framework und .NET Core-apps erfolgt, können sowohl abrufen und festlegen die aktuelle Kultur verwenden. Uwp-apps unterscheiden zwischen der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur jedoch nicht. Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften-Karte, um den ersten Wert in der [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) Auflistung.  

In .NET Framework und .NET Core-apps, die aktuelle Kultur ist eine Einstellung pro Thread und die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft zeigt die Kultur des aktuellen Threads. In uwp-apps, die aktuelle Kultur ordnet die [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Eigenschaft, die eine globale einsstellung handelt. Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ändert die Kultur der gesamten app; Kultur kann nicht auf eine Threadbasis festgelegt werden.
  
## Examples  
 Das folgende Beispiel veranschaulicht das Ändern der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> des aktuellen Threads.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Festlegen der aktuellen Kultur an. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, das die aktuelle Benutzeroberfläche darstellt, mit deren Hilfe der Ressourcen-Manager kulturabhängige Ressourcen zur Laufzeit sucht, oder setzt dieses Objekt.</summary>
        <value>Die aktuelle Kultur, mit deren Hilfe der Ressourcen-Manager zur Laufzeit kulturabhängige Ressourcen sucht, oder legt diese fest.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Benutzeroberflächenkultur ist eine Eigenschaft pro Thread. Das bedeutet, dass jeder Thread seine eigene aktuelle Benutzeroberflächenkultur aufweist. Diese Eigenschaft entspricht dem Abrufen oder beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]wird durch das Festlegen der <xref:System.Globalization.CultureInfo> zugewiesene Objekt die `System.Threading.Thread.CurrentThread.CurrentUICulture` Eigenschaft. Wenn ein Thread gestartet wird, wird die Kultur der Benutzeroberfläche zunächst wie folgt bestimmt:  
  
-   Durch Abrufen der Kultur, die von angegeben wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird, der den Wert der Eigenschaft ist nicht `null`.  
  
-   Wenn der Thread ein Thread des Threadpools, die ausgeführt wird ist, einen aufgabenbasierten asynchronen Vorgängen und die app aufgerichtet ist die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] oder eine höhere Version von .NET Framework, die Kultur der Benutzeroberfläche richtet sich nach der UI-Kultur des aufrufenden Threads.  Im folgenden Beispiel ändert sich die aktuelle Benutzeroberflächenkultur in Portugiesisch (Brasilien) und sechs Aufgaben gestartet, von die jede die Thread-ID, die Task-ID und die aktuelle Benutzeroberflächenkultur angezeigt. Jede der Vorgänge (und die Threads) hat die UI-Kultur des aufrufenden Threads geerbt.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" in der <xref:System.Globalization.CultureInfo> Thema.  
  
-   Durch Aufruf der Windows `GetUserDefaultUILanguage` Funktion.  
  
> [!NOTE]
>  In der [!INCLUDE[Compact](~/includes/compact-md.md)]die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ist schreibgeschützt. Die aktuelle Benutzeroberflächenkultur hängt von den regionalen Einstellungen des Systems und kann nicht programmgesteuert geändert werden.  
  
 Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], so ändern Sie die Kultur der Benutzeroberfläche verwendet wird, über einen Thread, legen Sie die <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft, um der neuen Kultur. Wenn Sie die UI-Kultur des Threads auf diese Weise ändern, explizit ändern weiterhin auf, wenn der Thread Anwendungsdomänengrenzen überschreitet.  
  
> [!NOTE]
>  In .NET Framework 4.5.2 und frühere Versionen der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ist schreibgeschützt.  d. h. Sie können den Wert der Eigenschaft abrufen, aber Sie können ihn nicht festlegen. Um die aktuelle Kultur zu ändern, Sie weisen die <xref:System.Globalization.CultureInfo> Objekt, das neue UI-Kultur darstellt. die `Thread.CurrentThread.CurrentUICulture` Eigenschaft. Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft ist Lese-/ Schreibzugriff; Sie können sowohl festlegen und Abrufen des Werts der Eigenschaft. Wenn Sie den Wert der Eigenschaft zum Festlegen einer <xref:System.Globalization.CultureInfo> Objekt, das eine neue Kultur, den Wert des darstellt der `Thread.CurrentThread.CurrentCulture` Eigenschaft auch geändert.  
  
 In diesem Abschnitt  
  
 [Die aktuelle Benutzeroberflächenkultur abrufen](#Getting)   
 [Die aktuelle Benutzeroberflächenkultur festlegen explizit](#Explicit)   
 [Implizites Festlegen der aktuellen Benutzeroberflächenkultur](#Implicit)   
 [Sicherheitsüberlegungen](#Security)   
 [Die aktuelle Kultur der Benutzeroberfläche und Windows-apps](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Die aktuelle Benutzeroberflächenkultur abrufen  
 Die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft ist eine Einstellung threadspezifisches; d. h. jeder Thread kann einen eigenen Benutzeroberflächenkultur verfügen. Erhalten Sie die UI-Kultur des aktuellen Threads an, durch das Abrufen des Werts der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> -Eigenschaft, wie im folgenden Beispiel illustriert.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Sie können auch festlegen, Abrufen des Werts eines UI-Kultur des aktuellen Threads aus dem <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Die aktuelle Benutzeroberflächenkultur festlegen explizit  
 Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)], Sie können die aktuelle Benutzeroberflächenkultur ändern, indem Sie zuweisen eine <xref:System.Globalization.CultureInfo> -Objekt, das der neue Kultur entspricht der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Die aktuelle Benutzeroberflächenkultur kann festgelegt werden, um eine bestimmte Kultur (z. B. En-US "oder" de-DE ") oder eine neutrale Kultur (z. B." En "oder" de "). Im folgenden Beispiel wird die aktuelle UI-Kultur fr-FR oder Französisch (Frankreich).  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 Sie können in einer Multithreadanwendung explizit von einem beliebigen Thread der UI-Kultur festlegen, durch Zuweisen einer <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, an des Threads darstellt <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Wenn der Thread, dessen Kultur, die Sie festlegen möchten den aktuellen Thread ist, können Sie die neue Kultur zu Zuweisen der <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft. Wenn die Benutzeroberflächenkultur eines Threads explizit festgelegt ist, dass ein Thread das dieselbe Kultur beibehält, auch wenn es Anwendungsdomänengrenzen überschreitet und führt Code in einer anderen Anwendungsdomäne aus.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Implizites Festlegen der aktuellen Benutzeroberflächenkultur  
 Wenn ein Thread auf, einschließlich der Thread der hauptanwendung ersten wird erstellt, wird standardmäßig die aktuelle Benutzeroberflächenkultur wie folgt festgelegt ist:  
  
-   Mithilfe der Kultur definiert wird, indem Sie die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> -Eigenschaft für die aktuelle Anwendungsdomäne, wenn der Eigenschaftswert nicht ist `null`.  
  
-   Mithilfe der Standardkultur des Systems. Auf Systemen, die das Windows-Betriebssystem verwenden, ruft die common Language Runtime Windows `GetUserDefaultUILanguage` Funktion, um die aktuelle Benutzeroberflächenkultur festgelegt. `GetUserDefaultUILanguage` Gibt die standardmäßige Benutzeroberflächenkultur, die vom Benutzer festgelegt. Wenn der Benutzer eine Standardsprache für die Benutzeroberfläche nicht festgelegt, wird die Kultur, die ursprünglich auf dem System installierten zurückgegeben.  
  
 Wenn der Thread anwendungsbegrenzungen überschreitet und Code in einer anderen Anwendungsdomäne ausführt, wird auf die gleiche Weise wie für einen neu erstellten Thread seine Kultur bestimmt.  
  
 Beachten Sie, dass wenn Sie festlegen, dass eine bestimmte Kultur der Benutzeroberfläche, die sich von der Kultur der Benutzeroberfläche System installiert ist oder der Benutzer Kultur der Benutzeroberfläche bevorzugten und die Anwendung mehrere Threads startet, die aktuelle UI-Kultur des Threads die Kultur der zurückgegebenes`GetUserDefaultUILanguage`funktionsfähig, es sei denn, Sie eine Kultur zugewiesen der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft in der Anwendungsdomäne, in dem der Thread ausgeführt wird.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Ändern der Kultur des aktuellen Threads erfordert eine <xref:System.Security.Permissions.SecurityPermission> Berechtigung mit der <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> festgelegten Wert.  
  
> [!CAUTION]
>  Bearbeiten von Threads ist aufgrund der mit Threads verbundenen Sicherheitszustands riskant. Daher sollte diese Berechtigung erteilt werden, nur für vertrauenswürdigen Code, und klicken Sie dann nur nach Bedarf. Sie können Threadkultur in teilweise vertrauenswürdigem Code nicht ändern.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>Die aktuelle Benutzeroberflächenkultur und uwp-apps  
 
In apps der universellen Windows-Plattform (UWP) die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft ist Lese-/ Schreibzugriff, so wie dies in .NET Framework und .NET Core-apps erfolgt, können sowohl abrufen und festlegen die aktuelle Kultur verwenden. Uwp-apps unterscheiden zwischen der aktuellen Kultur und die aktuelle Benutzeroberflächenkultur jedoch nicht. Die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaften-Karte, um den ersten Wert in der [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) Auflistung.

In .NET Framework und .NET Core-apps, die aktuelle Benutzeroberflächenkultur ist eine Einstellung pro Thread und die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft zeigt die UI-Kultur des aktuellen Threads. In uwp-apps, die aktuelle Kultur ordnet die [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) -Eigenschaft, die eine globale einsstellung handelt. Festlegen der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Eigenschaft ändert die Kultur der gesamten app; Kultur kann nicht auf eine Threadbasis festgelegt werden.    
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie so ändern Sie die <xref:System.Globalization.CultureInfo.CurrentCulture%2A> und <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> des aktuellen Threads.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
        <exception cref="T:System.ArgumentException">Die Eigenschaft ist auf einen Kulturnamen festgelegt, der nicht zum Suchen einer Ressourcendatei verwendet werden kann. Ressourcendateinamen dürfen nur Buchstaben, Zahlen, Bindestriche oder Unterstriche enthalten.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für die aktuelle Benutzeroberflächenkultur wird festgelegt. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.DateTimeFormatInfo" /> ab, die das für die Kultur spezifische Format zum Anzeigen von Datumsangaben und Uhrzeiten definiert, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.DateTimeFormatInfo" />, die das für die Kultur spezifische Format zum Anzeigen von Datumsangaben und Uhrzeiten definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und der angegebene Kultur entspricht die aktuelle Kultur von Windows die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Der Wert von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft und die <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft wird nicht berechnet werden, bis die Anwendung auf die Eigenschaft zugreift. Wenn der Benutzer die aktuelle Kultur auf eine neue Kultur ändern kann, während die Anwendung ausgeführt wird, und klicken Sie dann die Anwendung greift auf die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> oder <xref:System.Globalization.CultureInfo.NumberFormat%2A> -Eigenschaft, die Anwendung ruft die Standardwerte für die neue Kultur anstelle der Außerkraftsetzungen für die ursprüngliche Kultur. Um die Außerkraftsetzungen für die ursprüngliche aktuelle Kultur zu erhalten, die Anwendung zugreifen, sollte die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften vor dem Ändern der aktuellen Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass CultureInfo.Clone auch klont die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> mit verknüpften Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf NULL festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />-Eigenschaft oder eine der <see cref="T:System.Globalization.DateTimeFormatInfo" />-Eigenschaften wird festgelegt, und die <see cref="T:System.Globalization.CultureInfo" /> ist schreibgeschützt.</exception>
        <block subset="none" type="usage">
          <para>Wenn <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> ist die <see cref="T:System.Globalization.TaiwanCalendar" /> aber die <see cref="P:System.Threading.Thread.CurrentCulture" /> ist nicht festgelegt, Chinesisch (Taiwan), mit dem Namen Zh-TW, klicken Sie dann <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, und <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> geben eine leere Zeichenfolge zurück ("").</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standardkultur für Threads in der aktuellen Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die Standardkultur für Threads in der aktuellen Anwendungsdomäne oder <see langword="null" />, wenn die aktuelle Systemkultur die standardmäßige Threadkultur in der Anwendungsdomäne ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und früheren Versionen wird standardmäßig die Kultur aller Threads ist festgelegt auf die Windows-System-Kultur. Dieses Verhalten ist für Anwendungen, die die Standardkultur für das System, dessen aktuelle Kultur unterscheiden, häufig unerwünschten. In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> -Eigenschaft ermöglicht einer Anwendung, um die Standardkultur aller Threads in einer Anwendungsdomäne zu definieren.  
  
> [!IMPORTANT]
>  Wenn die Kultur des nicht explizit festgelegt haben alle vorhandenen in einer Anwendungsdomäne festlegen ausgeführte threads die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft ändert auch die Kultur des diese Threads. Jedoch, wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, ihre Kultur wird definiert durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft in der Anwendungsdomäne oder, wenn kein Standardwert, durch die Standardkultur des Systems definiert ist. Aus diesem Grund wird empfohlen, dass Sie die Kultur des Threads hauptanwendung immer explizit festgelegt, und Sie sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft, um die Kultur des Threads Hauptassembly der Anwendung zu definieren.  
  
 Sofern es nicht explizit den Wert von der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> Eigenschaft ist `null`, und die Kultur des Threads in einer Anwendungsdomäne, die keine explizite Kultur zugewiesen wurden, wird durch die Standardkultur für Windows-System definiert.  
  
 Weitere Informationen zu Kulturen, Threads und Anwendungsdomänen finden Sie unter "Kultur und Threads" und "Kultur und Anwendungsdomänen" im Berichtsbereiche der <xref:System.Globalization.CultureInfo> Referenzseite.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Standardverhalten von .NET Framework bei der Definition der aktuellen Kultur eines neuen Threads. Beim Start wird im Beispiel der aktuellen Kultur und die aktuelle Kultur auf Französisch (Frankreich) auf allen Systemen mit Ausnahme derjenigen auf denen die Standardkultur für das System bereits Französisch (Frankreich) ist. Wenn die Standardkultur für das System bereits Französisch (Frankreich) ist, legt der Code die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur auf Englisch (Vereinigte Staaten). Er ruft dann die `DisplayRandomNumbers` -Routine, die drei Zufallszahlen generiert und zeigt sie als Currency-Werte. Als Nächstes erstellt es einen neuen Thread, die auch ausgeführt, wird die `DisplayRandomNumbers` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Wie die Ausgabe des Beispiels zeigt, wenn das Beispiel auf einem Computer ausgeführt wird, deren Systemkultur Englisch (USA) ist, zeigt der Hauptthread die Currency-Werte, die Verwendung der Formatierungskonventionen der Kultur Französisch (Frankreich). Da der Arbeitsthread Kultur aus Kulturwert der Anwendung, anstatt die aktuelle Systemkultur von Windows abgeleitet ist, zeigt der Arbeitsthread jedoch die Verwendung der Formatierungskonventionen der Kultur Englisch (Vereinigte Staaten) Währungsangaben.  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, um die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur eines neuen Threads für die Anwendung zu definieren. Beim Start wird im Beispiel der aktuellen Kultur und die aktuelle Kultur auf Französisch (Frankreich) auf allen Systemen mit Ausnahme derjenigen auf denen die Standardkultur für das System bereits Französisch (Frankreich) ist. Wenn die Standardkultur für das System bereits Französisch (Frankreich) ist, legt die aktuelle Benutzeroberflächenkultur und der aktuellen Kultur auf Englisch (Vereinigte Staaten) fest. Er ruft dann die `DisplayRandomNumbers` -Routine, die drei Zufallszahlen generiert und zeigt sie als Currency-Werte. Als Nächstes erstellt es einen neuen Thread, die auch ausgeführt, wird die `DisplayRandomNumbers` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Wie die Ausgabe des Beispiels zeigt, wenn das Beispiel auf einem Computer ausgeführt wird, deren Systemkultur Englisch (USA) ist, Anzeigen der Haupt-Thread und der Arbeitsthread die Currency-Werte, die Verwendung der Formatierungskonventionen der Kultur Französisch (Frankreich).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die standardmäßige Benutzeroberflächenkultur für Threads in der aktuellen Anwendungsdomäne ab oder legt diese fest.</summary>
        <value>Die Standardkultur der Benutzeroberfläche für Threads in der aktuellen Anwendungsdomäne oder <see langword="null" />, wenn die aktuelle Systemkultur der Benutzeroberfläche die standardmäßige Threadkultur der Benutzeroberfläche in der Anwendungsdomäne ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] und früheren Versionen wird standardmäßig die Benutzeroberflächenkultur aller Threads ist Windows Systemkultur festgelegt. Dieses Verhalten ist für Anwendungen, die die Standardkultur für das System, dessen aktuelle Kultur der Benutzeroberfläche unterscheidet, häufig unerwünschten. In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft können Sie die standardmäßige Benutzeroberflächenkultur aller Threads in einer Anwendungsdomäne zu definieren.  
  
> [!IMPORTANT]
>  Wenn Sie die UI-Kultur des nicht explizit festgelegt haben alle vorhandenen in einer Anwendungsdomäne festlegen ausgeführte threads die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft ändert auch die Kultur des diese Threads. Jedoch, wenn diese Threads in einer anderen Anwendungsdomäne ausgeführt werden, ihre Kultur wird definiert durch die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft in der Anwendungsdomäne oder, wenn kein Standardwert, durch die Standardkultur des Systems definiert ist. Aus diesem Grund wird empfohlen, dass Sie immer explizit die Kultur des Threads hauptanwendung festlegen und verlassen Sie sich nicht auf die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft, um die Kultur des Threads Hauptassembly der Anwendung zu definieren.  
  
 Sofern es nicht explizit den Wert von der <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaft ist `null`, und die aktuelle Kultur aller Threads in einer Anwendungsdomäne, die keine explizite Kultur zugewiesen wurden, wird durch die Standardkultur für Windows-System definiert.  
  
 Weitere Informationen zu Kulturen, Threads und Anwendungsdomänen finden Sie unter "Kultur und Threads" und "Kultur und Anwendungsdomänen" im Berichtsbereiche der <xref:System.Globalization.CultureInfo> Referenzseite.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Standardverhalten von .NET Framework bei der Definition der aktuellen Kultur eines neuen Threads. Englisch und Russisch Ressourcen verwendet. Die folgende Textdatei, die mit dem Namen GreetingStrings.txt enthält die englische Sprachressourcen:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Kompiliert wird, um eine binäre RESOURCES-Datei mit dem Namen GreetingStrings.resources mithilfe der [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) mit dem folgenden Befehl.  
  
```console  
resgen greetingstrings.txt  
```  
  
 Die folgende Textdatei, die mit dem Namen GreetingStrings.ru RU.txt enthält die Ressourcen russischer Sprache:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Kompiliert wird, um eine binäre RESOURCES-Datei mit dem Namen GreetingStrings.ru RU.resources mithilfe der [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) mit dem folgenden Befehl.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 Anwendungscode, der unten angezeigt wird, befindet sich in einer Datei namens Example1.vb oder Example1.cs. Es wird in eine ausführbare Datei mit dem folgenden Befehl für Visual Basic-Compiler kompiliert:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Für den c#-Compiler ähnelt der Befehl:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Dies erstellt eine Assembly, die im Beispiel ausführbaren Code zusammen mit den Ressourcen für die Fallbackkultur enthält. Sie können auch die [Assemblylinker](~/docs/framework/tools/al-exe-assembly-linker.md) zum Erstellen der Ressourcendatei für die Kultur Russisch (Russische Föderation) mit den folgenden Befehl aus:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Beim Starten des im Beispiel wird die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur auf Russisch (Russische Föderation) auf allen Systemen mit Ausnahme derjenigen auf dem die Standardkultur für das System bereits Russisch ist (Russische Föderation). Die Standardkultur für das System ist bereits Kultur Russisch (Russische Föderation), legt der Code die aktuelle Kultur und die aktuelle UI um Englisch (Vereinigte Staaten). Er ruft dann die `ShowGreeting` Routine zeigt eine einfache Zeichenfolge das erste Mal aufgerufen wird und eine etwas andere Zeichenfolge auf nachfolgende Methode aufruft. Als Nächstes erstellt es einen neuen Thread, die auch ausgeführt, wird die `ShowGreeting` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Wie die Ausgabe des Beispiels zeigt, wenn das Beispiel auf einem Computer ausgeführt wird, deren Systemkultur Englisch (USA) ist, zeigt der Haupt-Thread seine erste Zeichenfolge in Russisch. Da der Arbeitsthread Kultur aus Kulturwert der Anwendung, anstatt die aktuelle Systemkultur von Windows abgeleitet ist, wird der Arbeitsthread seine Zeichenfolge allerdings auf Englisch.  
  
 Im folgenden Beispiel wird die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> Eigenschaften, um die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur eines neuen Threads für die Anwendung zu definieren.  
  
 Das Beispiel verwendet die gleichen Ressourcendateien wie im vorherigen Beispiel. Die Befehle zum Kompilieren und die lokalisierte Sprachressourcen für Russisch in eine Satellitenassembly eingebettet sind auch identisch, außer dass ändert sich der Name der ausführbaren Assembly.  
  
 Beim Starten des im Beispiel wird die aktuelle Kultur und die aktuelle Benutzeroberflächenkultur auf Russisch (Russische Föderation) auf allen Systemen mit Ausnahme derjenigen auf dem die Standardkultur für das System bereits Russisch ist (Russische Föderation). Ist die Standardkultur für das System bereits Russisch (Russische Föderation), wird die aktuelle Kultur und die aktuelle Kultur auf Englisch (Vereinigte Staaten). Er ruft dann die `ShowGreeting` Routine zeigt eine einfache Zeichenfolge das erste Mal aufgerufen wird und eine etwas andere Zeichenfolge auf nachfolgende Methode aufruft. Als Nächstes erstellt es einen neuen Thread, die auch ausgeführt, wird die `ShowGreeting` Routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Wie die Ausgabe des Beispiels zeigt, wenn das Beispiel auf einem Computer ausgeführt wird, deren Systemkultur Englisch (USA) ist, der Haupt-Thread und der Arbeitsthread in russischer Sprache ihre Zeichenfolgen angezeigt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Bei einem SET-Vorgang ist der Eigenschaftswert <see cref="P:System.Globalization.CultureInfo.Name" /> ungültig.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den vollständig lokalisierten Kulturnamen ab.</summary>
        <value>Der vollständig lokalisierte Kulturname im Format * Languagefull * [* Country / Regionfull *], wobei * Languagefull * ist der vollständige Name der Sprache und * Country / Regionfull * lautet der vollständige Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt den lokalisierten Namen des der <xref:System.Globalization.CultureInfo> Objekt.  
  
 Kulturnamen können aufgrund von Skripts oder Formatierungskonventionen variieren. Sie sollten den zurückgegebenen Namen für die Anzeige verwenden und versuchen Sie nicht zu analysieren.  
  
 Wenn eine benutzerdefinierte Kultur vom der erstellt wird die <xref:System.Globalization.CultureAndRegionInfoBuilder> -Klasse, die <xref:System.Globalization.CultureInfo.DisplayName%2A> -Eigenschaft wird auf den Wert des initialisiert die <xref:System.Globalization.CultureInfo.NativeName%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die Kulturen Zh-CHS und Zh-CHT mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur bzw. aus. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format *languagefull* [*country/regionfull*] auf Englisch ab.</summary>
        <value>Der Kulturname im Format * Languagefull * [* Country / Regionfull *] auf Englisch, wobei * Languagefull * ist der vollständige Name der Sprache und * Country / Regionfull * lautet der vollständige Name des Landes bzw. der Region.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z. B. die <xref:System.Globalization.CultureInfo.EnglishName%2A> für die spezifische Kultur En-US "Englisch (USA)" ist.  
  
 Der Wert dieser Eigenschaft ist identisch, unabhängig von der jeweiligen Sprachversion von .NET Framework.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die ältere Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das mit der aktuellen <see cref="T:System.Globalization.CultureInfo" /> verglichen werden soll.</param>
        <summary>Bestimmt, ob das angegebene Objekt dieselbe Kultur aufweist wie die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="value" /> dieselbe Kultur aufweist wie die aktuelle <see cref="T:System.Globalization.CultureInfo" />, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Zwei <xref:System.Globalization.CultureInfo> Objekte als gleich betrachtet werden, wenn ihre <xref:System.Globalization.CultureInfo.Name%2A> und <xref:System.Globalization.CultureInfo.CompareInfo%2A> Eigenschaften gleich sind.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft im Falle einer ungeeigneten Standard-GUI-Kultur eine alternative Kultur der Benutzeroberfläche für Konsolenanwendungen auf.</summary>
        <returns>Eine alternative Kultur, die zum Lesen und Anzeigen von Texten auf der Konsole verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprachen wie Arabisch, Hebräisch, Urdu und Syrisch basieren auf bidirektionalen Text. Windows-Anwendungen, die eine grafische Benutzeroberfläche haben, unterstützen bidirektionale Sprachen. Konsolenanwendungen, die die Benutzeroberfläche der Text der Betriebssystem-Konsole nutzen zu können, bieten jedoch keine bidirektionale Unterstützung. Wenn Sie eine Konsolenanwendung, Arabisch oder Hebräisch lokalisieren, zeigt Ihrer Anwendung daher nicht lesbar Text auf dem Konsolenbildschirm.  
  
 Die Kultur der Benutzeroberfläche gibt die Ressourcen, die eine Anwendung muss Benutzer ein- und Ausgaben unterstützen, die und in der Standardeinstellung ist identisch mit dem Betriebssystem-Kultur, an. Z. B. die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft eine arabische Kultur für einem arabischen Betriebssystem zurück. Verwenden der <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> Methode zum Abrufen einer Kultur, die für eine Konsole Anwendungsbenutzeroberfläche geeignet ist. Nachdem die Anwendung die GUI-Kultur abgerufen hat, sollten sie die aktuelle Benutzeroberflächenkultur des aktuellen Threads die Kultur zuweisen. Weitere Informationen finden Sie im Abschnitt "Explizit festlegen der aktuellen Kultur der Benutzeroberfläche" die <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> Eigenschaft.  
  
 Im folgenden sind die vordefinierten Kulturen, die einen anderen fallback Schnittstelle Kultur Benutzernamen aus den vordefinierten Kulturnamen verfügen.  
  
|Vordefinierte Kultur|Kulturname|Alternative Kulturname der Benutzeroberfläche|  
|------------------------|------------------|------------------------------------------|  
|Amharisch|Uhr|en-US|  
|Amharisch (Äthiopien)|Uhr-ET|en-US|  
|(neutrale Arabisch)|ar|en-US|  
|Arabisch (Vereinigte Arabische Emirate)|Ar-AE|en-US|  
|Arabisch (Bahrain)|Ar-NG|en-US|  
|Arabisch (Algerien)|ar-DZ|fr-FR|  
|Arabisch (Ägypten)|Ar-EG|en-US|  
|Arabisch (Irak)|Ar-IQ|en-US|  
|Arabisch (Jordanien)|ar-JO|en-US|  
|Arabisch (Kuwait)|Ar-KW|en-US|  
|Arabisch (Libanon)|Ar-LB|en-US|  
|Arabisch (Libyen)|Ar-übernehmen|en-US|  
|Arabisch (Marokko)|Ar-MA|fr-FR|  
|Arabisch (Oman)|Ar-OM|en-US|  
|Arabisch (Katar)|Ar-QA|en-US|  
|Arabisch (Saudi-Arabien)|ar-SA|en-US|  
|Arabisch (Syrien)|Ar-SY|en-US|  
|Arabisch (Tunesien)|Ar-TN|fr-FR|  
|Arabisch (Jemen)|Ar-Ihre|en-US|  
|Assamesisch|as|en-US|  
|Assamisch (Indien)|wie IN|en-US|  
|Bangla|Bn|en-US|  
|Bangla (Bangladesch)|bn-BD|en-US|  
|Bangla (Indien)|Bn-IN|en-US|  
|Tibetisch|BO|en-US|  
|Tibetisch (VRC)|bo-CN|en-US|  
|Divehi|DV|en-US|  
|Divehi (Indien)|dv-MV|en-US|  
|Persisch|Anlagen|en-US|  
|Persisch (Iran)|fa-IR|en-US|  
|Gujarati|gu|en-US|  
|Gujarati (Indien)|gu-IN|en-US|  
|Hebräisch|er|en-US|  
|Hebräisch (Israel)|HE-IL|en-US|  
|Hindi|Hallo|en-US|  
|Hindi (Indien)|hi-IN|en-US|  
|"Yi"|ii|en-US|  
|Yi (VRC)|II-CN|en-US|  
|Inukitut Syllabics|IU-Lebensmitteldosen|en-US|  
|Inukitut Syllabics (Kanada)|iu-Cans-CA|en-US|  
|Khmer|km|en-US|  
|Khmer (Kambodscha)|km-KH|en-US|  
|Kannada|KN|en-US|  
|Kannada (Indien)|KN-IN|en-US|  
|Konkani|kok|en-US|  
|Konkani (Indien)|Kok-IN|en-US|  
|Laotisch|lo|en-US|  
|LAO (Volksrepublik P.D.R.)|lo LA|en-US|  
|Malayalam|ml|en-US|  
|Malayalam (Indien)|ml-IN|en-US|  
|Mohawk|MOH enthalten|en-US|  
|Mohawk (Kanada)|MOH enthalten-Zertifizierungsstelle|en-US|  
|Marathi|die von Herrn|en-US|  
|Marathi (Indien)|die von Herrn-IN|en-US|  
|Nepali|ne|en-US|  
|Nepali (Nepal)|Ne-NP|en-US|  
|Norwegisch|Nein|nb-NO|  
|Oriya|oder|en-US|  
|Oriya (Indien)|oder-IN|en-US|  
|Punjabi|PA|en-US|  
|Punjabi (Indien)|PA-IN|en-US|  
|Dari|prs|en-US|  
|Dari (Afghanistan)|prs-AF|en-US|  
|Paschtu|PS|en-US|  
|Paschtu (Afghanistan)|ps-AF|en-US|  
|Sanskrit|SA|en-US|  
|Sanskrit (Indien)|SA-IN|en-US|  
|Singhalesisch|si|en-US|  
|Singhalesisch (Sri Lanka)|SI LK|en-US|  
|Syrisch|SYR|en-US|  
|Syrisch (Syrien)|SYR SY|en-US|  
|Tamil|TA|en-US|  
|Tamil (Indien)|TA-IN|en-US|  
|Telugu|Te|en-US|  
|Telugu (Indien)|Te-IN|en-US|  
|Thai|th|en-US|  
|Thai (Thailand)|th-Th|en-US|  
|Uighur|¶g|en-US|  
|Uighurisch (VRC)|UG-CN|en-US|  
|Urdu|Ihre|en-US|  
|Urdu (Kanada)|ur-PK|en-US|  
|Vietnamesisch|Vi|en-US|  
|Vietnamesisch (Vietnam)|vi-VN|en-US|  
  
 Ihre Anwendung können <xref:System.Globalization.CultureAndRegionInfoBuilder> Ersatz für eine Kultur und die Kultur eine Konsole Fallbackkultur Ihrer Wahl aufweisen kann erstellen möchten.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die GUI-Kultur ein Culture-Objekt zugeordnet.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Ein Gebietsschemabezeichner (LCID).</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur mithilfe des angegebenen Kulturbezeichners ab.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es wird empfohlen, dass Sie die zeichenfolgenüberladung dieser Methode verwenden (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), da die Gebietsschema-Namen anstatt LCIDs verwendet werden soll. Für benutzerdefinierte Gebietsschemas ist der Gebietsschemaname erforderlich.  
  
 Wenn `culture` ist der Gebietsschemabezeichner für die aktuelle Kultur, die den zurückgegebenen <xref:System.Globalization.CultureInfo> Objekt reflektiert keinen Benutzer Außerkraftsetzungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> ist kleiner als Null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt "Hinweise zu Aufrufern".</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="culture" /> ist kein gültiger Kulturbezeichner. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="culture" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Kultur. Bei <c>name</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur mithilfe des angegebenen Kulturnamens ab.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kulturnamen, finden Sie unter der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Darüber hinaus starten mit Windows 10, `name` kann eine beliebige gültige BCP-47-Sprachtag.  
  
 Die <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Methode ruft eine zwischengespeicherte schreibgeschützt <xref:System.Globalization.CultureInfo> Objekt. Er bietet eine bessere Leistung als einen zugehörigen Aufruf an die <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor.  
  
 Wenn `name` ist der Name der aktuellen Kultur, das zurückgegebene <xref:System.Globalization.CultureInfo> Objekt reflektiert keinen Benutzer Außerkraftsetzungen. Dadurch wird die Methode für die Server-Anwendungen oder Tools, die nicht über eine echte Benutzerkonto auf dem System verfügen und, die mehrere Kulturen effizient laden müssen, geeignet ist.  
  
 Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, gibt die Methode die invariante Kultur zurück. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> ist kein gültiger Kulturname. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , und wenn <paramref name="name" /> ist nicht der Name einer zusätzlichen oder Ersatz Kultur, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Kultur. Bei <c>name</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <param name="altName">Der Name einer Kultur, die das <see cref="T:System.Globalization.TextInfo" />-Objekt und das <see cref="T:System.Globalization.CompareInfo" />-Objekt liefert, mit denen <c>name</c> initialisiert wird. Bei <c>altName</c> wird nicht zwischen Groß- und Kleinschreibung unterschieden.</param>
        <summary>Ruft eine zwischengespeicherte und schreibgeschützte Instanz einer Kultur ab. Mit Parametern wird eine Kultur angegeben, die mit dem <see cref="T:System.Globalization.TextInfo" />-Objekt und dem <see cref="T:System.Globalization.CompareInfo" />-Objekt initialisiert wird, die wiederum von einer anderen Kultur angegeben werden.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kulturnamen, finden Sie unter der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Darüber hinaus starten mit Windows 10, `name` kann eine beliebige gültige BCP-47-Sprachtag.  
  
 Die <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Methode ruft eine zwischengespeicherte schreibgeschützt <xref:System.Globalization.CultureInfo> Objekt. Er bietet eine bessere Leistung als einen zugehörigen Aufruf an ein <xref:System.Globalization.CultureInfo.%23ctor%2A> Konstruktor. Die Methode wird verwendet, um eine Kultur zu erstellen, die ähnlich, die durch die `name` Parameter, jedoch mit anderen Sortierung und Groß-/Kleinschreibung Regeln.  
  
 Wenn `name` oder `altName` ist der Name der aktuellen Kultur, die zurückgegebenen Objekte spiegeln keine Benutzer überschreibt. Wenn `name` ist <xref:System.String.Empty?displayProperty=nameWithType>, gibt die Methode die invariante Kultur zurück. Dies entspricht dem Abrufen des Werts der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft. Wenn `altName` ist <xref:System.String.Empty?displayProperty=nameWithType>, die Methode verwendet, das Schriftsystem und der Vergleich Regeln, die durch die invariante Kultur angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> oder <paramref name="altName" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> oder <paramref name="altName" /> gibt eine Kultur an, die nicht unterstützt wird. Weitere Informationen finden Sie im Abschnitt „Hinweise zu Aufrufern“.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> oder <paramref name="altName" /> ist kein gültiger Kulturname. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , und wenn <paramref name="name" /> ist nicht der Name einer zusätzlichen oder Ersatz Kultur, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme. Beginnend mit apps, die Ausführung unter der [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)] oder höher unter Windows 7 oder höher, die Methode versucht, zum Abrufen einer <see cref="T:System.Globalization.CultureInfo" /> Objekt, dessen Bezeichner <paramref name="name" /> vom Betriebssystem; Wenn das Betriebssystem diese Kultur nicht unterstützt , und wenn <paramref name="name" /> ist nicht der Name einer zusätzlichen oder Ersatz Kultur, löst die Methode eine <see cref="T:System.Globalization.CultureNotFoundException" /> Ausnahme.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name einer Sprache gemäß dem Standard RFC 4646.</param>
        <summary>Veraltet. 	Ruft ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt ab, dessen linguistische Merkmale vom angegebenen RFC 4646-Sprachtag identifiziert werden.</summary>
        <returns>Ein schreibgeschütztes <see cref="T:System.Globalization.CultureInfo" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode und die <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> Eigenschaft sind veraltet. Diese Elemente die Anwendung sollte verwenden Sie anstelle eines neuen <xref:System.Globalization.CultureInfo> Objekt und Aufrufe an die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft. IETF-Tags und Namen sind identisch.  
  
 Der Standard RFC 4646, der von der Internet Engineering Task Force (IETF) verwaltet wird, definiert ein IETF-Sprachtag, die eine einheitliche Möglichkeit der Identifizierung von einer anderen Sprache bereitstellt. Das Format von einem IETF-Sprachtag ist identisch mit der Kulturname zurückgegebenes der <xref:System.Globalization.CultureInfo.Name%2A> -Eigenschaft, aber eine Kultur nicht eindeutig identifiziert. Unterschiedliche Kulturen Teilen der gleiche IETF-Sprachtag aus, wenn diese Kulturen identisch linguistische Merkmale aufweisen. Die linguistischen Eigenschaften einer Kultur sind enthalten die <xref:System.Globalization.TextInfo> zugeordnete Objekt eine <xref:System.Globalization.CultureInfo> Objekt.  
  
 Ein IETF-Sprachtag besteht aus einer obligatorischen Sprachen-ID, ein optionales Skriptbezeichner und eine optionale Regionsbezeichner.  
  
 Anwendungen sollten die abgerufenen Kultur verwenden, um sprachspezifische Aufgaben wie das Verwalten eines Rechtschreibung oder Grammatik Checker steuern zu können. Anwendungen sollten nicht die abgerufenen Kultur verwenden, um kulturspezifische Aufgaben, z. B. Sortierung Text bzw. Formatierung Zeiten und Datumsangaben zu steuern.  
  
 Weitere Informationen finden Sie unter RFC 4646, "Tags für identifizieren Sprachen" und die standardmäßigen, Draft-Phillips-Langtags-05.txt, unter [ http://go.microsoft.com/fwlink/?LinkId=100231 ](http://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist NULL.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> entspricht keiner unterstützten Kultur.</exception>
        <block subset="none" type="usage">
          <para>Der [! Include[net_v35_long](~/Includes/NET-v35-Long-MD.MD)] und frühere Versionen lösen eine <see cref="T:System.ArgumentException" /> Wenn <paramref name="name" /> entspricht nicht der Name einer unterstützten Kultur. Beginnend mit dem [! Include[net_v40_long](~/Includes/NET-V40-Long-MD.MD)], löst diese Methode eine <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">Eine bitweise Kombination von Enumerationswerten, mit denen die abzurufenden Kulturen gefiltert werden.</param>
        <summary>	Ruft die Liste der unterstützten Kulturen ab, die entsprechend dem angegebenen <see cref="T:System.Globalization.CultureTypes" />-Parameter gefiltert sind.</summary>
        <returns>Ein Array, das die vom <paramref name="types" />-Parameter angegebenen Kulturen enthält. Das Array von Kulturen ist unsortiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.GetCultures%2A> -Methode am häufigsten aufgerufen wird, und die `types` Parameter auf die folgenden Werte festgelegt:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, womit alle bestimmte Kulturen.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, womit alle neutralen Kulturen und die invariante Kultur.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, womit alle neutraler und spezifischer Kulturen, Kulturen, die in der Windows-System installiert und vom Benutzer erstellte Kulturen.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, womit alle Kulturen, z. B. solche registriert, indem Sie die <xref:System.Globalization.CultureAndRegionInfoBuilder> Klasse. In Versionen von Windows vor Windows 10 die <xref:System.Globalization.CultureTypes.UserCustomCulture> Wert gilt für alle benutzerdefinierten Kulturen. Ab Windows 10, gilt dieser für System Kulturen, die vollständige kulturelle Daten fehlen und bei denen nicht eindeutigen lokalen Bezeichner, durch die <xref:System.Globalization.CultureInfo.LCID%2A> Eigenschaftswert. Daher gibt Code wie der folgende unterschiedliche Ergebnisse beim Ausführen unter Windows 10 und unter einer früheren Version von Windows zurück.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die Kulturen Zh-CHS und Zh-CHT mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur bzw. aus. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="types" /> gibt eine ungültige Kombination von <see cref="T:System.Globalization.CultureTypes" />-Werten an.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Der <see cref="T:System.Type" />, für den ein Formatierungsobjekt abgerufen werden soll. 	Diese Methode unterstützt nur den <see cref="T:System.Globalization.NumberFormatInfo" />-Typ und den <see cref="T:System.Globalization.DateTimeFormatInfo" />-Typ.</param>
        <summary>Ruft ein Objekt ab, das definiert, wie der angegebene Typ formatiert werden soll.</summary>
        <returns>Der Wert der <see cref="P:System.Globalization.CultureInfo.NumberFormat" />-Eigenschaft, bei der es sich um eine <see cref="T:System.Globalization.NumberFormatInfo" /> mit Informationen über das Standardzahlenformat für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> handelt, wenn <paramref name="formatType" /> das <see cref="T:System.Type" />-Objekt für die <see cref="T:System.Globalization.NumberFormatInfo" />-Klasse ist.  Oder:  Der Wert der <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />-Eigenschaft, bei der es sich um eine <see cref="T:System.Globalization.DateTimeFormatInfo" /> mit Informationen über das Standardformat für Datums- und Uhrzeitangaben für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> handelt, wenn <paramref name="formatType" /> das <see cref="T:System.Type" />-Objekt für die <see cref="T:System.Globalization.DateTimeFormatInfo" />-Klasse ist.  Oder:  NULL, wenn <paramref name="formatType" /> ein beliebiges anderes Objekt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementiert <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` enthält den numerische kulturspezifischen Format in Verbindung mit den Methoden Format in die Basisdatentypen verwendet. `DateTimeFormatInfo` Steuert, wie die Werte für Datum und Uhrzeit für eine bestimmte Kultur formatiert werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Globalization.CultureInfo" />, die sich für die Verwendung in Hashalgorithmen und -datenstrukturen eignet, z. B. in einer Hashtabelle.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Diese Methode generiert für zwei Objekte, die gemäß der <xref:System.Globalization.CultureInfo.Equals%2A>-Methode gleich sind, denselben Hashcode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Veraltet. Ruft die Sprachkennung gemäß dem Standard RFC 4646 ab.</summary>
        <value>Eine Zeichenfolge, die die Sprachkennung gemäß dem Standard RFC 4646 darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Eigenschaft und die <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> Methode sind veraltet. Stattdessen sollten Sie verwenden eine der <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> Eigenschaft. IETF-Tags und Namen sind identisch.  
  
 Der Standard RFC 4646, der von der Internet Engineering Task Force (IETF) verwaltet wird, definiert ein IETF-Sprachtag, die eine einheitliche Möglichkeit der Identifizierung von einer anderen Sprache bereitstellt. Das Format des ein IETF-Sprachtag ähnelt der Kulturname zurückgegebenes der <xref:System.Globalization.CultureInfo.Name%2A> -Eigenschaft, aber eine Kultur nicht eindeutig identifiziert. D. h. Teilen unterschiedliche Kulturen die gleiche IETF-Sprachtag, wenn diese Kulturen identisch linguistische Merkmale aufweisen. Die linguistischen Eigenschaften einer Kultur sind enthalten die <xref:System.Globalization.TextInfo> zugeordnete Objekt eine <xref:System.Globalization.CultureInfo> Objekt.  
  
 Ein IETF-Sprachtag besteht aus einer obligatorischen Sprachen-ID, ein optionales Skriptbezeichner und eine optionale Regionsbezeichner.  
  
 Weitere Informationen finden Sie unter [RFC 5646, "Tags für identifizieren Sprachen](http://go.microsoft.com/fwlink/?LinkId=230876). Eine Liste der untergeordneten Tags, finden Sie unter [der IANA Sprache Gebietsschemazeichenfolge Registrierung](http://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CultureInfo" /> ab, die die mit dem Betriebssystem installierte Kultur darstellt.</summary>
        <value>Die <see cref="T:System.Globalization.CultureInfo" />, die die mit dem Betriebssystem installierte Kultur darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einem lokalisierten Betriebssystem, z. B. eine japanische Edition von Windows gibt diese Eigenschaft die Kultur des Betriebssystems. Diese Eigenschaft entspricht der `GetSystemDefaultUILanguage` in der Windows-API.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das kulturunabhängige (invariante) <see cref="T:System.Globalization.CultureInfo" />-Objekt ab.</summary>
        <value>Das Objekt, das die kulturunabhängige (invariante) ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die invariante Kultur ist kulturunabhängige; verknüpft ist mit der englischen Sprache, jedoch nicht für alle Länder/Regionen. Sie anhand des Namens die invariante Kultur angeben, mit der eine leere Zeichenfolge ("") im Aufruf einer <xref:System.Globalization.CultureInfo> Instanziierung-Methode. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> Außerdem wird eine Instanz der invarianten Kultur abgerufen. Kann verwendet werden, nahezu jede Methode in der <xref:System.Globalization> Namespace, die eine Kultur erforderlich sind. Die Objekte, z. B. von Eigenschaften zurückgegebene <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, und <xref:System.Globalization.CultureInfo.NumberFormat%2A> auch entsprechen den Zeichenfolgenvergleich und die Formatierungskonventionen der invarianten Kultur.  
  
 Im Gegensatz zu kulturabhängige Daten, d. h. implementierungsspezifisch benutzeranpassung oder Updates für .NET Framework oder das Betriebssystem, Daten der invarianten Kultur stabil ist, im Zeitverlauf und über installierte Kulturen und können nicht von Benutzern angepasst werden. Dadurch wird die invariante Kultur besonders nützlich für Vorgänge, die kulturunabhängige Ergebnisse erfordern, z. B. Formatierung und Analyse für Vorgänge, die beibehalten werden formatiert, oder sortieren und die Reihenfolge der Vorgänge, die erfordern, dass Daten in angezeigt werden ein festen Reihenfolge unabhängig von der Kultur.  
  
## <a name="string-operations"></a>Zeichenfolgenoperationen  
 Sie können die invariante Kultur für kulturabhängige Zeichenfolgenoperationen, sind nicht betroffen von den Konventionen der aktuellen Threadkultur und zwischen Kulturen konsistent sind. Beispielsweise empfiehlt sortierte Daten in einer festen Reihenfolge angezeigt werden, oder wenden einen Standardsatz von Groß-/ Kleinschreibungskonventionen in Zeichenfolgen unabhängig von der die aktuelle Threadkultur verwendet. Übergeben Sie zu diesem Zweck die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Objekt, das eine Methode mit einer <xref:System.Globalization.CultureInfo> Parameter, wie z. B. <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> und <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Beibehalten von Daten  
 Die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Eigenschaft kann verwendet werden, um Daten in einem Format kulturunabhängig persistent zu speichern. Dies bietet es sich um ein bekanntes Format, die nicht geändert und zum Serialisieren und Deserialisieren von Daten zwischen Kulturen verwendet werden können. Nachdem die Daten deserialisiert werden, kann es abhängig von ihrer kulturellen Konventionen des aktuellen Benutzers formatiert werden.  
  
 Beispielsweise, falls gewünscht, Datum und Uhrzeit-Daten in Form einer Zeichenfolge beibehalten, Sie können übergeben der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> -Objekt an die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> Methode zum Erstellen der Zeichenfolge ein, und Sie können übergeben der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> -Objekt an die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> die Methode, die Zeichenfolge in einen Wert für Datum und Uhrzeit umzuwandeln. Diese Technik wird sichergestellt, dass das zugrunde liegende Datum und Time-Werten bleiben unverändert, wenn die Daten gelesen oder geschrieben werden, von Benutzern aus unterschiedlichen Kulturen.  
  
 Im folgenden Beispiel wird die invariante Kultur zum Beibehalten einer <xref:System.DateTime> Wert als Zeichenfolge. Klicken Sie dann analysiert die Zeichenfolge, und ihr Wert durch die Verwendung der Formatierungskonventionen der Kulturen Deutsch (Deutschland) und Französisch (Frankreich) angezeigt.  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Sicherheitsrelevanten  
 Wenn Sie eine sicherheitsentscheidung (z. B., ob Zugriff auf eine Systemressource) vornehmen, werden basierend auf dem Ergebnis eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung, Sie sollten nicht die invariante Kultur verwenden. Stattdessen sollten Sie einen ordinalen Vergleich Groß- und Kleinschreibung ausführen, durch den Aufruf einer Methode, enthält eine <xref:System.StringComparison> Parameter und liefert entweder <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> oder <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> als Argument. Code, der kulturabhängige Zeichenfolgenoperationen stellen jedoch führt kann Sicherheitslücken verursachen, wenn die aktuelle Kultur geändert wird oder wenn die Kultur auf dem Computer, auf dem den Code ausgeführt wird von der Kultur, die verwendet wird unterscheidet, um den Code zu testen. Im Gegensatz dazu hängt ein ordinalen Vergleich ausschließlich auf den binären Wert der verglichenen Zeichen ein.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle <see cref="T:System.Globalization.CultureInfo" /> eine neutrale Kultur darstellt.</summary>
        <value>
          <see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> eine neutrale Kultur darstellt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine neutrale Kultur ist eine Kultur, die verknüpft ist mit einer anderen Sprache jedoch nicht mit einem Land oder Region. Es unterscheidet sich von einer bestimmten Kultur eine Kultur ist, die sowohl eine Sprache und ein Land oder Region zugeordnet ist. Fr ist z. B. den Namen für die neutrale Kultur Französisch, fr-FR zwar den Namen für die Kultur Französisch in Frankreich.  
  
 Wenn diese Eigenschaft gibt `false`, die Kultur ist, eine bestimmte Kultur oder der invarianten Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, welche Kulturen die chinesische Sprache verwenden neutrale Kulturen sind.  
  
> [!NOTE]
>  Das Beispiel zeigt die ältere Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle <see cref="T:System.Globalization.CultureInfo" /> schreibgeschützt ist.</summary>
        <value>
          <see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> schreibgeschützt ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Globalization.CultureInfo> ist schreibgeschützt, der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Instanzen sind ebenfalls schreibgeschützt.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt, dass <xref:System.Globalization.CultureInfo.IsReadOnly%2A> auch schützt die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> mit verknüpften Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktiven Bezeichner für das Eingabegebietsschema ab.</summary>
        <value>Eine 32-Bit-Zahl mit Vorzeichen, die einen Bezeichner für das Eingabegebietsschema angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Gebietsschemabezeichner für die Eingabe hieß früher das Tastaturlayout. Ein Eingabegebietsschema-Bezeichner ist eine breitere Konzept als das Tastaturlayout, da es kann auch einen Konverter Sprache-zu-Text, einen Eingabemethoden-Editor (IME) oder eine andere Art der Eingabe angeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der Kulturbezeichner für die aktuelle <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In den meisten Fällen wird der Kulturbezeichner dem entsprechenden NLS-Gebietsschemabezeichner zugeordnet.  
  
 In Versionen von Windows vor Windows 10, die Gebietsschema-ID `LOCALE_CUSTOM_UNSPECIFIED` (0 x 1000 oder 4096) vom Benutzer erstellte Kulturen zugewiesen ist. Ab Windows 10, wird er alle Kulturen zugewiesen, die keinen eindeutigen Gebietsschema-ID und keinen vollständige vom System bereitgestellte Daten. Demzufolge Code, iteriert Kulturen und ruft Sie ab, die mit, einer <xref:System.Globalization.CultureInfo.LCID%2A> Wert `LOCALE_CUSTOM_UNSPECIFIED` gibt eine größere Teilmenge der <xref:System.Globalization.CultureInfo> Objekte unter Windows 10 ausgeführt werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> mit herkömmlichen Sortierreihenfolge.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturnamen im Format *languagecode2*-*country/regioncode2* ab.</summary>
        <value>Der Kulturname im Format * languagecode2 *-* Country / regioncode2 *. * languagecode2 * ist einen Kleinbuchstaben zwei Buchstaben bestehende Code nach ISO 639-1 abgeleitet. * Country / regioncode2 * ist aus ISO 3166 abgeleitet und verwendet normalerweise zwei Großbuchstaben oder ein BCP-47-Sprachtag.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Liste der vordefinierten Kulturnamen und Bezeichnern, die die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft zurückgeben kann, finden Sie unter der [National Language Support (NLS) API-Referenz](http://go.microsoft.com/fwlink/?LinkId=200048) am Go Global Developer Center. Darüber hinaus starten mit Windows 10, `name` kann eine beliebige gültige BCP-47-Sprachtag. Beachten Sie, dass Kulturnamen können geändert werden, und sie auch die Namen der Kulturen wiedergeben können.  
  
 Die <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> -Eigenschaft folgt die Benennungsstandards gemäß der <xref:System.Globalization.CultureInfo> klassenthema. Es gibt die Kurzform der Kulturname, der Angabe, der eine andere Sortierreihenfolge ausschließt. Angenommen, Sie Instanziieren einer <xref:System.Globalization.CultureInfo> Objekt mit der Zeichenfolge "de-DE_phoneb" eine andere Sortierreihenfolge entsprechend der <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft gibt "de-DE".  
  
 Um den vollständigen Namen der Kultur abzurufen, verwenden Sie die <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, oder <xref:System.Globalization.CultureInfo.NativeName%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die ältere Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Kultur ab, der aus der Sprache, dem Land oder der Region und dem optionalen Skript besteht, das in der Kultur angezeigt werden soll.</summary>
        <value>Der Kulturname , der aus dem vollständigen Namen der Sprache, dem vollständigen Namen des Landes bzw. der Region und dem optionalen Skript besteht. Das Format wird in der Beschreibung der <see cref="T:System.Globalization.CultureInfo" />-Klasse erläutert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft ist identisch, unabhängig von der jeweiligen Sprachversion von .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.NumberFormatInfo" /> ab, die das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert, oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.Globalization.NumberFormatInfo" />, die das für die Kultur spezifische Format zum Anzeigen von Zahlen, Währungen und Prozentsätzen definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und der angegebene Kultur entspricht die aktuelle Kultur von Windows die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Die Werte der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft und die <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft werden nicht berechnet werden, bis der Benutzer die Eigenschaft zugreift. Wenn der Benutzer der Systemsteuerung verwendet, um die aktuelle Kultur auf eine neue Kultur zu ändern, während die Anwendung ausgeführt wird, und klicken Sie dann Zugriffe ist die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> oder <xref:System.Globalization.CultureInfo.NumberFormat%2A> -Eigenschaft, die Anwendung ruft die Standardwerte für die neue Kultur ab. nicht die Außerkraftsetzungen für die ursprüngliche Kultur. Um die Außerkraftsetzungen für die ursprüngliche aktuelle Kultur zu erhalten, die Anwendung zugreifen, sollte die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften vor dem Ändern der aktuellen Kultur.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, dass CultureInfo.Clone auch klont die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> mit verknüpften Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf NULL festgelegt.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Globalization.CultureInfo.NumberFormat" />-Eigenschaft oder eine der <see cref="T:System.Globalization.NumberFormatInfo" />-Eigenschaften wird festgelegt, und die <see cref="T:System.Globalization.CultureInfo" /> ist schreibgeschützt.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste der Kalender ab, die von dieser Kultur verwendet werden können.</summary>
        <value>Ein Array vom Typ <see cref="T:System.Globalization.Calendar" />, das die Kalender darstellt, die von der Kultur verwendet werden können, die von der aktuellen <see cref="T:System.Globalization.CultureInfo" /> dargestellt werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anwendung ändert den Kalender, die vom aktuellen <xref:System.Globalization.CultureInfo> durch Festlegen der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> Eigenschaft <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, also in eine Instanz von der <xref:System.Globalization.DateTimeFormatInfo> Klasse. Der neue Kalender muss einer der verwendete Kalender abgelesen <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> enthält auch andere Eigenschaften, die der Datums- und uhrzeitformatierungen zugeordnet sind, anpassen <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie bestimmt die <xref:System.Globalization.GregorianCalendar> Versionen, die von der Kultur unterstützt.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.CultureInfo" /> ab, die die übergeordnete Kultur zur aktuellen <see cref="T:System.Globalization.CultureInfo" /> darstellt.</summary>
        <value>Die <see cref="T:System.Globalization.CultureInfo" />, die die übergeordnete Kultur zur aktuellen <see cref="T:System.Globalization.CultureInfo" /> darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Kulturen bilden eine Hierarchie, in dem das übergeordnete Element einer bestimmten Kultur eine neutrale Kultur ist, das übergeordnete Element eine neutrale Kultur ist die <xref:System.Globalization.CultureInfo.InvariantCulture%2A>, und das übergeordnete Element des der <xref:System.Globalization.CultureInfo.InvariantCulture%2A> die invariante Kultur selbst ist. Die übergeordnete Kultur zur umfasst nur die Informationen, die die untergeordneten Elemente gemeinsam sind.  
  
 Wenn die Ressourcen für die spezifische Kultur nicht im System verfügbar sind, werden die Ressourcen für die neutrale Kultur verwendet. Wenn die Ressourcen für die neutrale Kultur nicht verfügbar sind, werden die in die Hauptassembly eingebetteten Ressourcen verwendet. Weitere Informationen zu den Ressourcenfallback-Prozess, finden Sie unter [Verpacken und Bereitstellen von Ressourcen](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die übergeordnete Kultur jede spezifische Kultur, die die chinesische Sprache verwenden bestimmt.  
  
> [!NOTE]
>  Das Beispiel zeigt die ältere Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, für das der Wrapper erstellt wird.</param>
        <summary>Gibt einen schreibgeschützten Wrapper für das angegebene <see cref="T:System.Globalization.CultureInfo" />-Objekt zurück.</summary>
        <returns>Ein schreibgeschützter <see cref="T:System.Globalization.CultureInfo" />-Wrapper um <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wrapper wird verhindert, dass alle Änderungen an `ci`, oder die zurückgegebenen Objekte die `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> und `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaften.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, dass die <xref:System.Globalization.CultureInfo.ReadOnly%2A> Methode schützt die <xref:System.Globalization.DateTimeFormatInfo> und <xref:System.Globalization.NumberFormatInfo> mit verknüpften Instanzen der <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" /> ist NULL.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Globalization.TextInfo" /> ab, die das der Kultur zugeordnete Schriftsystem definiert.</summary>
        <value>Die <see cref="T:System.Globalization.TextInfo" />, die das der Kultur zugeordnete Schriftsystem definiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.CultureInfo.TextInfo%2A> Eigenschaft enthält die Groß-/Kleinschreibung kulturspezifische Informationen für Zeichenfolgen. Um kulturunabhängige Groß-/Kleinschreibung auszuführen, die Anwendung verwenden, sollten die <xref:System.Globalization.CultureInfo.TextInfo%2A> Eigenschaft <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer <xref:System.Globalization.CultureInfo> für Spanisch (Spanien) mit der internationalen Sortierung und ein anderes <xref:System.Globalization.CultureInfo> mit herkömmlichen Sortierreihenfolge.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code nach ISO 639-2 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der aus drei Buchstaben bestehende Code nach ISO 639-2 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beispielsweise ist die dreibuchstabige Abkürzung für Englisch "Eng".  
  
> [!NOTE]
>  Wenn die Kommunikation zwischen Prozessen und Beibehalten von Daten, die normalerweise ist es besser, verwenden Sie die vollständige <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Verwenden nur in die Sprache kann Kontext und Daten gehen verloren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die ältere Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aus drei Buchstaben bestehenden Code für die Sprache ab, wie er in der Windows-API definiert ist.</summary>
        <value>Der aus drei Buchstaben bestehenden Code für die Sprache, wie er in der Windows-API definiert ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt den gleichen Wert wie die Windows-API-Methode `GetLocaleInfo` mit dem LOCALE_SABBREVLANGNAME-Wert. Die drei Buchstaben bestehenden Code für Englisch (Vereinigte Staaten), wie in der Windows-API definiert ist z. B. "Enu".  
  
> [!NOTE]
>  Wenn die Kommunikation zwischen Prozessen und Beibehalten von Daten, die normalerweise ist es besser, verwenden Sie die vollständige <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Verwenden nur in die Sprache kann Kontext und Daten gehen verloren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden mehrere Eigenschaften der neutralen Kulturen angezeigt.  
  
> [!NOTE]
>  Das Beispiel zeigt die ältere Zh-CHS und Zh-CHT Kulturnamen mit den Bezeichnern 0 x 0004 und 0x7C04 Kultur. Allerdings sollten Ihre Windows Vista-Anwendungen den Namen Zh-Hans anstelle von Zh-CHS und den Namen der Zh-Hant anstelle von Zh-CHT verwenden. Die Zh-Hans und Zh-Hant Namen stellen den aktuellen Standard dar und sollte verwendet werden, es sei denn, Sie einen Grund haben für die Verwendung der älteren Namen.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge mit dem Namen der aktuellen <see cref="T:System.Globalization.CultureInfo" /> im Format *languagecode2*-*country/regioncode2* zurück.</summary>
        <returns>Eine Zeichenfolge, die den Namen der aktuellen <see cref="T:System.Globalization.CultureInfo" />-Klasse enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Gibt den Namen der Kultur, die an eine normalisierte Version der <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> oder <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor oder die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> oder <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> Methode. Er normalisiert die Ergebniszeichenfolge durch Konvertieren von Zeichen in *languagecode2* klein geschriebene und Konvertieren von Zeichen in *Country/regioncode2* bei Bedarf in Großbuchstaben.  
  
 Vordefinierten Kulturnamen sind aufgeführt, der [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) Seite bei der Go Global Developer Center.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>	Ruft den aus zwei Buchstaben bestehenden Code nach ISO 639-1 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" /> ab.</summary>
        <value>Der aus zwei Buchstaben bestehende Code nach ISO 639-1 für die Sprache der aktuellen <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beispielsweise ist die zweibuchstabige Abkürzung für Englisch "En". Die <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaftswert für die invariante Kultur ist "iv".  
  
> [!NOTE]
>  Wenn die Kommunikation zwischen Prozessen und Beibehalten von Daten, die normalerweise ist es besser, verwenden Sie die vollständige <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Verwenden nur in die Sprache kann Kontext und Daten gehen verloren.  
  
 Wenn ISO 639-1, die nicht über ein zweistelliger Sprachcode für eine bestimmte Kultur definiert die <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaft gibt eine Zeichenfolge, die aus mindestens drei Buchstaben besteht. Weitere Informationen finden Sie im Beispiel.  
  
   
  
## Examples  
 Das folgende Beispiel listet die Kulturen, deren <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Eigenschaft bestehen nicht auf ein zweistelliger Sprachcode.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das aktuelle <see cref="T:System.Globalization.CultureInfo" />-Objekt die vom Benutzer ausgewählten Kultureinstellungen verwendet.</summary>
        <value>
          <see langword="true" />, wenn die aktuelle <see cref="T:System.Globalization.CultureInfo" /> die vom Benutzer ausgewählten Kultureinstellungen verwendet, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Benutzer möglicherweise auswählen, um einige der Werte der aktuellen Kultur von Windows über den Regions- und Sprachoptionen Teil Systemsteuerung Optionen zugeordnete zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen.  
  
 Wenn <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ist `true` und der angegebene Kultur entspricht die aktuelle Kultur von Windows die <xref:System.Globalization.CultureInfo> verwendet diese Außerkraftsetzungen, einschließlich der benutzereinstellungen für für die Eigenschaften der der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> -Eigenschaft und die Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebene Instanz der <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 Diese Eigenschaft wird festgelegt, wenn die <xref:System.Globalization.CultureInfo> wird erstellt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
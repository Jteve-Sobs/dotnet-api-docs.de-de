<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="98f78c3e41ba2075c81b3baa1d7603464f5aa183" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78824833" /></Metadata><TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Unterstützt die Verwendung von Nicht-ASCII-Zeichen für Internetdomänennamen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Internet Domänen Name besteht aus einem oder mehreren Teilen, die als Domänen Namen Bezeichnungen bezeichnet werden, getrennt durch Bezeichnungs Trennzeichen. Der Domänen Name "www.proseware.com" besteht z. b. aus den Bezeichnungen "www", "Proseware" und "com", die durch Punkte getrennt sind. Standard Domänen Namen bestehen aus festgelegten Zeichen im US-ASCII-Zeichenbereich (oder im Basis lateinischen Zeichenbereich) von U + 0021 bis U + 007E. Um die Internet Verwendung in Kulturen zu vereinfachen, die nicht den US-ASCII-Zeichensatz verwenden, wurde der internationalisieren von Domänen Namen in Applications (IDNA)-Standards in 2003 eingeführt, um die Aufnahme von Unicode-Zeichen außerhalb des US-ASCII-Zeichen Bereichs zu unterstützen. Namensserver und die Auflösung von Domänen Namen basieren jedoch weiterhin auf Zeichen innerhalb des US-ASCII-Zeichen Bereichs.  
  
 Der IDNA-Mechanismus verwendet Punycode, um einen internationalisierten Domänen Namen, der Unicode-Zeichen außerhalb des US-ASCII-Zeichen Bereichs enthält, dem US-ASCII-Zeichenbereich zuzuordnen, der vom Domain Name System unterstützt wird. Mit dem IDNA-Mechanismus werden nur Domänen Namen konvertiert, nicht über das Internet übertragene Daten.  
  
> [!IMPORTANT]
>  In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]unterstützt die <xref:System.Globalization.IdnMapping>-Klasse je nach verwendetem Betriebssystem verschiedene Versionen des IDNA-Standards:  
>   
> - Bei der Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)]wird die Version 2008 des IDNA-Standards unterstützt, die von [RFC 5891: Internationalisierte Domänen Namen in Anwendungen (IDNA): Protocol](https://go.microsoft.com/fwlink/?LinkId=231875)beschrieben wird.
> - Wenn unter früheren Versionen des Windows-Betriebssystems ausgeführt wird, wird die Version 2003 unterstützt, die von [RFC 3490: internationalisieren von Domänen Namen in Anwendungen (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)beschrieben wird.
>   
>  Weitere Informationen finden Sie unter [Unicode Technical Standard #46: IDNA Compatibility processing](https://go.microsoft.com/fwlink/?LinkId=232459) für die Unterschiede in der Art und Weise, wie diese Standards bestimmte Zeichensätze verarbeiten.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType>-Methode normalisiert einen Domänen Namen, konvertiert den normalisierten Namen in eine-Darstellung, die aus anzeigbaren Unicode-Zeichen im US-ASCII-Code punktbereich (u + 0020 bis U + 007E) besteht, und stellt jedem Bezeichnungs Zeichen ein ASCII-kompatibles ("xn--") Präfix ("xn-") voran. Die <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType>-Methode stellt die von der <xref:System.Globalization.IdnMapping.GetAscii%2A>-Methode konvertierten Domänen Namen Bezeichnungen wieder her.  
  
 Wenn die zu konvertierende Zeichenfolge die Trennzeichen für Bezeichnungs Zeichen (u + 3002), vollständige vollständige Beendigung (u + FF0E) und Halfwidth ideografischer vollständiger Vorgang (u + FF61) enthält, werden Sie durch die <xref:System.Globalization.IdnMapping.GetAscii%2A>-Methode in den Bezeichnungs Trennzeichen vollständige Beendigung (Punkt, U + 002e) konvertiert. Die <xref:System.Globalization.IdnMapping.GetUnicode%2A>-Methode stellt jedoch das ursprüngliche Bezeichnungs Trennzeichen nicht wieder her.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>-Methode verwendet, um ein Array von internationalisierten Domänen Namen in Punycode zu konvertieren. Die <xref:System.Globalization.IdnMapping.GetUnicode%2A>-Methode konvertiert den Punycode-Domänen Namen dann wieder in den ursprünglichen Domänen Namen, ersetzt jedoch die ursprünglichen Bezeichnungs Trennzeichen durch das Standard Trennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Alle öffentlichen Methoden von <see cref="T:System.Globalization.IdnMapping" /> sind Thread sicher und können gleichzeitig von mehreren Threads verwendet werden, solange die Eigenschaften der <see cref="T:System.Globalization.IdnMapping" /> Instanz nicht gleichzeitig festgelegt werden.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.IdnMapping" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Eigenschaften <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> und <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> werden `false`initialisiert. Eine kleine Teilmenge von ASCII-Zeichen (mit Ausnahme von A-Z, 0-9, Bindestrich (-) und Punktzeichen (.) ist in Domänen Namen zulässig, aber nicht zugewiesene Unicode-Code Punkte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in Vorgängen, die von den Membern des aktuellen <see cref="T:System.Globalization.IdnMapping" />-Objekts durchgeführt werden, nicht zugewiesene Codepunkte verwendet werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn in Vorgängen nicht zugewiesene Codepunkte verwendet werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein registrierter Domänen Name darf keine nicht zugewiesenen Code Punkte enthalten. Folglich ist der Standardwert der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A>-Eigenschaft `false`. Die IDNA-Spezifikation lässt nicht zugewiesene Code Punkte nur in Abfragen für übereinstimmende Zeichen folgen (d. h. bei der Suche nach Domänen Namen) zu. Weitere Informationen zur Verwendung nicht zugewiesener Code Punkte in Domänen Namen finden Sie unter [RFC 3454, "Vorbereitung von internationalisierten Zeichen folgen (Stringprep)"](https://go.microsoft.com/fwlink/?LinkId=231873) und [RFC 5891, "internationalisierte Domänen Namen in Anwendungen (IDNA): Protokoll"](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Wenn die <xref:System.Globalization.IdnMapping.AllowUnassigned%2A>-Eigenschaft `false`ist, hängt das Verhalten, das der-Eigenschaft zugeordnet ist, vom zugrunde liegenden Betriebssystem ab. Auf [!INCLUDE[win8](~/includes/win8-md.md)]entspricht die <xref:System.Globalization.IdnMapping>-Klasse IDNA 2008, das auf dem Unicode-Standard "6,0" basiert. In früheren Versionen von Windows basiert die <xref:System.Globalization.IdnMapping>-Klasse auf IDNA 2003, das auf Unicode 3 basiert. *x*. Einigen Code Punkten, denen in IDNA 2003 keine Zuweisung zugewiesen wurde, wurden Zeichen zugewiesen, und Sie werden in IDNA 2008 unterstützt. Beispielsweise wurde U + 0221 in Unicode 4,0 eingeführt. Auf [!INCLUDE[win8](~/includes/win8-md.md)]wird Sie als "xn – 6LA" codiert. In früheren Versionen von Windows wird eine <xref:System.ArgumentException> Ausnahme ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das angegebene Objekt und das aktuelle <see cref="T:System.Globalization.IdnMapping" />-Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn das vom <paramref name="obj" />-Parameter angegebene Objekt von <see cref="T:System.Globalization.IdnMapping" /> abgeleitet ist und seine <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft sowie seine <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert eine Zeichenfolge aus Domänennamensbezeichnungen, die Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) enthalten. Die Zeichenfolge wird entsprechend dem IDNA-Standard formatiert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">Eine zu konvertierende Eingabezeichenfolge, die aus einer oder mehreren durch Bezeichnungstrennzeichen getrennten Domänennamensbezeichnungen besteht.</param>
        <summary>Codiert eine Zeichenfolge von Domänennamensbezeichnungen, die aus Unicode-Zeichen bestehen, in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich. Die Zeichenfolge wird entsprechend dem IDNA-Standard formatiert.</summary>
        <returns>Die Entsprechung der durch die <paramref name="unicode" />-Parameter angegebene Zeichenfolge, bestehend aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) und formatiert entsprechend des IDNA-Standards.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `unicode`-Parameter gibt eine Zeichenfolge mit einer oder mehreren Bezeichnungen an, die aus gültigen Unicode-Zeichen bestehen. Die Bezeichnungen werden durch Trennzeichen getrennt. Der `unicode`-Parameter darf nicht mit einem Bezeichnungs Trennzeichen beginnen, aber er kann einschließen und optional mit einem Trennzeichen enden. Die Trennzeichen für Bezeichnungen sind vollständig (Punkt, U + 002e), ideografischer vollständiger Vorgang (u + 3002), vollständige vollständige Beendigung (u + FF0E) und Halfwidth ideografischer vollständiger Vorgang (u + FF61). Der Domänen Name "www.adatum.com" besteht z. b. aus den Bezeichnungen "www", "Adatum" und "com", die durch Punkte getrennt sind.  
  
 Eine Bezeichnung darf keines der folgenden Zeichen enthalten:  
  
-   Unicode-Steuerzeichen von u + 0001 bis u + 001F und u + 007F.  
  
-   Nicht zugewiesene Unicode-Zeichen, wenn der Wert der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A>-Eigenschaft `false`ist.  
  
-   Nicht standardmäßige Zeichen im US-ASCII-Zeichenbereich, wie z. b. das Leerzeichen (u + 0020), das Ausrufezeichen (u + 0021) und das niedrige Linien Zeichen (u + 005F), wenn der Wert der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft `true`ist.  
  
-   Zeichen, die von einer bestimmten Version des IDNA-Standards nicht zulässig sind. Weitere Informationen zu unzulässigen Zeichen finden Sie unter [RFC 3454: Vorbereitung von internationalisierten Zeichen folgen ("Stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) für IDNA 2003 und [RFC 5982: den Unicode-Code Punkten und den internationalisierten Domänen Namen für Anwendungen](https://go.microsoft.com/fwlink/?LinkId=231877) für IDNA 2008.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A>-Methode konvertiert alle Bezeichnungs Trennzeichen in vollständige Beendigung (Period, U + 002e).  
  
 Wenn `unicode` keine Zeichen außerhalb des US-ASCII-Zeichen Bereichs enthält und keine Zeichen im US-ASCII-Zeichenbereich zulässig sind, gibt die Methode `unicode` unverändert zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>-Methode verwendet, um ein Array von internationalisierten Domänen Namen in Punycode zu konvertieren. dabei handelt es sich um eine codierte Entsprechung, die aus Zeichen im US-ASCII-Zeichenbereich besteht. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>-Methode konvertiert dann den Namen der Punycode-Domäne wieder in den ursprünglichen Domänen Namen, ersetzt jedoch die ursprünglichen Bezeichnungs Trennzeichen durch das Standard Trennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]unterstützt die <see cref="T:System.Globalization.IdnMapping" />-Klasse je nach verwendetem Betriebssystem verschiedene Versionen des IDNA-Standards: 
: Bei Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)]wird die Version 2008 des IDNA-Standards unterstützt, die von [RFC 5891: Internationalisierte Domänen Namen in Anwendungen (IDNA): Protocol](https://go.microsoft.com/fwlink/?LinkId=231875)beschrieben wird.  
  
-Wenn unter früheren Versionen des Windows-Betriebssystems ausgeführt wird, wird die Version 2003 unterstützt, die von [RFC 3490: internationalisieren von Domänen Namen in Anwendungen (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)beschrieben wird.  
  
Weitere Informationen finden Sie unter [Unicode Technical Standard #46: IDNA Compatibility processing](https://go.microsoft.com/fwlink/?LinkId=232459) für die Unterschiede in der Art und Weise, wie diese Standards bestimmte Zeichensätze verarbeiten.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">Eine zu konvertierende Eingabezeichenfolge, die aus einer oder mehreren durch Bezeichnungstrennzeichen getrennten Domänennamensbezeichnungen besteht.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="unicode" />, der den Anfang der zu konvertierenden Teilzeichenfolge angibt. Der Konvertierungsvorgang wird bis zum Ende der <paramref name="unicode" />-Zeichenfolge fortgesetzt.</param>
        <summary>Codiert eine Teilzeichenfolge Domänennamensbezeichnungen, die Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs enthalten. Die Teilzeichenfolge wird in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich konvertiert und wird entsprechend dem IDNA-Standard formatiert.</summary>
        <returns>Die Entsprechung der durch die <paramref name="unicode" />und <paramref name="index" />-Parameter angegebenen Teilzeichenfolge, bestehend aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) und formatiert entsprechend des IDNA-Standards.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit den Parametern `unicode` und `index` wird eine Teil Zeichenfolge mit einer oder mehreren Bezeichnungen definiert, die aus gültigen Unicode-Zeichen bestehen. Die Bezeichnungen werden durch Trennzeichen getrennt. Das erste Zeichen der Teil Zeichenfolge darf nicht mit einem Bezeichnungs Trennzeichen beginnen, aber es kann einschließen und optional mit einem Trennzeichen enden. Die Trennzeichen für Bezeichnungen sind vollständig (Punkt, U + 002e), ideografischer vollständiger Vorgang (u + 3002), vollständige vollständige Beendigung (u + FF0E) und Halfwidth ideografischer vollständiger Vorgang (u + FF61). Der Domänen Name "www.adatum.com" besteht z. b. aus den Bezeichnungen "www", "Adatum" und "com", die durch Punkte getrennt sind.  
  
 Eine Bezeichnung darf keines der folgenden Zeichen enthalten:  
  
-   Unicode-Steuerzeichen von u + 0001 bis u + 001F und u + 007F.  
  
-   Nicht zugewiesene Unicode-Zeichen, abhängig vom Wert der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A>-Eigenschaft.  
  
-   Nicht standardmäßige Zeichen im US-ASCII-Zeichenbereich, wie z. b. das Leerzeichen (u + 0020), das Ausrufezeichen (u + 0021) und das tiefstzeichen (u + 005F), abhängig vom Wert der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft.  
  
-   Zeichen, die von einer bestimmten Version des IDNA-Standards nicht zulässig sind. Weitere Informationen zu unzulässigen Zeichen finden Sie unter [RFC 3454: Vorbereitung von internationalisierten Zeichen folgen ("Stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) für IDNA 2003 und [RFC 5982: den Unicode-Code Punkten und den internationalisierten Domänen Namen für Anwendungen](https://go.microsoft.com/fwlink/?LinkId=231877) für IDNA 2008.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A>-Methode konvertiert alle Bezeichnungs Trennzeichen in vollständige Beendigung (Period, U + 002e).  
  
 Wenn `unicode` keine Zeichen außerhalb des US-ASCII-Zeichen Bereichs enthält und keine Zeichen im US-ASCII-Zeichenbereich zulässig sind, gibt die Methode `unicode` unverändert zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel werden der lokale Teil und das @-Zeichen aus einer e-Mail-Adresse entfernt und der resultierende Domänen Name an die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>-Methode weitergeleitet, um einen Punycode-Domänen Namen zu erstellen, bei dem es sich um eine codierte Entsprechung handelt, die aus Zeichen im US-ASCII- Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>-Methode konvertiert dann den Namen der Punycode-Domäne wieder in den ursprünglichen Domänen Namen, ersetzt jedoch die ursprünglichen Bezeichnungs Trennzeichen durch das Standard Trennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ist kleiner als Null.  
  
- oder - 
 <paramref name="index" /> ist größer als die Länge von <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]unterstützt die <see cref="T:System.Globalization.IdnMapping" />-Klasse je nach verwendetem Betriebssystem verschiedene Versionen des IDNA-Standards: 
: Bei Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)]wird die Version 2008 des IDNA-Standards unterstützt, die von [RFC 5891: Internationalisierte Domänen Namen in Anwendungen (IDNA): Protocol](https://go.microsoft.com/fwlink/?LinkId=231875)beschrieben wird.  
  
-Wenn unter früheren Versionen des Windows-Betriebssystems ausgeführt wird, wird die Version 2003 unterstützt, die von [RFC 3490: internationalisieren von Domänen Namen in Anwendungen (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)beschrieben wird.  
  
Weitere Informationen finden Sie unter [Unicode Technical Standard #46: IDNA Compatibility processing](https://go.microsoft.com/fwlink/?LinkId=232459) für die Unterschiede in der Art und Weise, wie diese Standards bestimmte Zeichensätze verarbeiten.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">Eine zu konvertierende Eingabezeichenfolge, die aus einer oder mehreren durch Bezeichnungstrennzeichen getrennten Domänennamensbezeichnungen besteht.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="unicode" />, der den Anfang der Teilzeichenfolge angibt.</param>
        <param name="count">Die Anzahl von zu konvertierenden Zeichen in der Teilzeichenfolge, die an der durch <paramref name="index" /> in der <paramref name="unicode" />-Zeichenfolge angegebenen Position beginnt.</param>
        <summary>Codiert die angegebene Anzahl von Zeichen in einer Teilzeichenfolge von Domänennamensbezeichnungen, die Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs enthalten. Die Teilzeichenfolge wird in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich konvertiert und wird entsprechend dem IDNA-Standard formatiert.</summary>
        <returns>Die Entsprechung der durch den <paramref name="unicode" />-Parameter, den <paramref name="index" />-Parameter und den <paramref name="count" />-Parameter angegebenen Teilzeichenfolge, bestehend aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) und formatiert entsprechend des IDNA-Standards.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit den Parametern `Unicode`, `index`und `count` wird eine Teil Zeichenfolge mit einer oder mehreren Bezeichnungen definiert, die aus gültigen Unicode-Zeichen bestehen. Die Bezeichnungen werden durch Trennzeichen getrennt. Das erste Zeichen der Teil Zeichenfolge darf nicht mit einem Bezeichnungs Trennzeichen beginnen, aber es kann einschließen und optional mit einem Trennzeichen enden. Die Trennzeichen für Bezeichnungen sind vollständig (Punkt, U + 002e), ideografischer vollständiger Vorgang (u + 3002), vollständige vollständige Beendigung (u + FF0E) und Halfwidth ideografischer vollständiger Vorgang (u + FF61). Der Domänen Name "www.adatum.com" besteht z. b. aus den Bezeichnungen "www", "Adatum" und "com", die durch Punkte getrennt sind.  
  
 Eine Bezeichnung darf keines der folgenden Zeichen enthalten:  
  
-   Unicode-Steuerzeichen von u + 0001 bis u + 001F und u + 007F.  
  
-   Nicht zugewiesene Unicode-Zeichen, abhängig vom Wert der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A>-Eigenschaft.  
  
-   Nicht standardmäßige Zeichen im US-ASCII-Zeichenbereich, wie z. b. das Leerzeichen (u + 0020), das Ausrufezeichen (u + 0021) und das tiefstzeichen (u + 005F), abhängig vom Wert der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft.  
  
-   Zeichen, die von einer bestimmten Version des IDNA-Standards nicht zulässig sind. Weitere Informationen zu unzulässigen Zeichen finden Sie unter [RFC 3454: Vorbereitung von internationalisierten Zeichen folgen ("Stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) für IDNA 2003 und [RFC 5982: den Unicode-Code Punkten und den internationalisierten Domänen Namen für Anwendungen](https://go.microsoft.com/fwlink/?LinkId=231877) für IDNA 2008.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A>-Methode konvertiert alle Bezeichnungs Trennzeichen in vollständige Beendigung (Period, U + 002e). Wenn die Teil Zeichenfolge keine Zeichen außerhalb des US-ASCII-Zeichen Bereichs enthält und keine Zeichen im US-ASCII-Zeichenbereich zulässig sind, gibt die Methode die Teil Zeichenfolge unverändert zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>-Methode verwendet, um einen internationalisierten Domänen Namen in einen Domänen Namen zu konvertieren, der dem IDNA-Standard entspricht. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>-Methode konvertiert dann den standardisierten Domänen Namen zurück in den ursprünglichen Domänen Namen, ersetzt jedoch die ursprünglichen Bezeichnungs Trennzeichen durch das Standard Trennzeichen.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="index" /> ist größer als die Länge von <paramref name="unicode" />.  
  
- oder - 
 <paramref name="index" /> ist größer als die Länge von <paramref name="unicode" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)]unterstützt die <see cref="T:System.Globalization.IdnMapping" />-Klasse je nach verwendetem Betriebssystem verschiedene Versionen des IDNA-Standards: 
: Bei Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)]wird die Version 2008 des IDNA-Standards unterstützt, die von [RFC 5891: Internationalisierte Domänen Namen in Anwendungen (IDNA): Protocol](https://go.microsoft.com/fwlink/?LinkId=231875)beschrieben wird.  
  
-Wenn unter früheren Versionen des Windows-Betriebssystems ausgeführt wird, wird die Version 2003 unterstützt, die von [RFC 3490: internationalisieren von Domänen Namen in Anwendungen (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)beschrieben wird.  
  
Weitere Informationen finden Sie unter [Unicode Technical Standard #46: IDNA Compatibility processing](https://go.microsoft.com/fwlink/?LinkId=232459) für die Unterschiede in der Art und Weise, wie diese Standards bestimmte Zeichensätze verarbeiten.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Hashcode für dieses <see cref="T:System.Globalization.IdnMapping" />-Objekt zurück.</summary>
        <returns>Eine von vier 32-Bit-Konstanten mit Vorzeichen, die von den Eigenschaften eines <see cref="T:System.Globalization.IdnMapping" />-Objekts abgeleitet ist.  Der Rückgabewert hat keine besondere Bedeutung und ist nicht für die Verwendung in einem Hashcodealgorithmus geeignet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben Sie die <xref:System.Globalization.IdnMapping.GetHashCode%2A>-Methode, wenn die Anwendung einen sinnvollen Hash Code Algorithmus implementieren muss.  
  
   
  
## Examples  
 Im folgenden Beispiel wird davon ausgegangen, dass eine einzelne Zeichenfolge mehrere durch Leerzeichen getrennte e-Mail-Adressen enthalten kann Er entfernt den lokalen Teil und das @-Zeichen aus jeder e-Mail-Adresse und übergibt den resultierenden Domänen Namen an den <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> oder <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>-Methode, um einen Punycode-Domänen Namen zu erstellen. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>-Methode konvertiert dann den Namen der Punycode-Domäne wieder in den ursprünglichen Domänen Namen.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodiert eine oder mehrere Domänennamensbezeichnungen, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">Die zu decodierende Zeichenfolge, die aus einem oder mehreren Bezeichnungen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) besteht, codiert nach dem IDNA-Standard.</param>
        <summary>Decodiert eine Zeichenfolge aus einer oder mehreren Domänennamensbezeichnungen, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
        <returns>Die Unicode-Entsprechung der durch den <paramref name="ascii" />-Parameter angegebenen IDNA-Teilzeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Domänen Namen, Bezeichnungen und Bezeichnungs Trennzeichen finden Sie in den Hinweisen für die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>-Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>-Methode verwendet, um ein Array von internationalisierten Domänen Namen in Punycode zu konvertieren. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>-Methode konvertiert dann den Namen der Punycode-Domäne wieder in den ursprünglichen Domänen Namen, ersetzt jedoch die ursprünglichen Bezeichnungs Trennzeichen durch das Standard Trennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">Die zu decodierende Zeichenfolge, die aus einem oder mehreren Bezeichnungen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) besteht, codiert nach dem IDNA-Standard.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="ascii" />, der den Anfang der zu decodierenden Teilzeichenfolge angibt. Der Decodierungsvorgang wird bis zum Ende der <paramref name="ascii" />-Zeichenfolge fortgesetzt.</param>
        <summary>Decodiert eine Teilzeichenfolge aus einer oder mehreren Domänennamensbezeichnungen, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
        <returns>Die Unicode-Entsprechung der durch den <paramref name="ascii" />-Parameter und den <paramref name="index" />-Parameter angegebenen IDNA-Teilzeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Domänen Namen, Bezeichnungen und Bezeichnungs Trennzeichen finden Sie in den Hinweisen für die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>-Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ist kleiner als Null.  
  
- oder - 
 <paramref name="index" /> ist größer als die Länge von <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">Die zu decodierende Zeichenfolge, die aus einem oder mehreren Bezeichnungen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) besteht, codiert nach dem IDNA-Standard.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="ascii" />, der den Anfang der Teilzeichenfolge angibt.</param>
        <param name="count">Die Anzahl von zu konvertierenden Zeichen in der Teilzeichenfolge, die an der durch <paramref name="index" /> in der <paramref name="ascii" />-Zeichenfolge angegebenen Position beginnt.</param>
        <summary>Decodiert eine Teilzeichenfolge einer angegebenen Länge, die eine oder mehrere Domänennamensbezeichnungen enthält, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
        <returns>Die Unicode-Entsprechung der durch den <paramref name="ascii" />-Parameter, den <paramref name="index" />-Parameter und den <paramref name="count" />-Parameter angegebenen IDNA-Teilzeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Domänen Namen, Bezeichnungen und Bezeichnungs Trennzeichen finden Sie in den Hinweisen für die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>-Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="index" /> ist größer als die Länge von <paramref name="ascii" />.  
  
- oder - 
 <paramref name="index" /> ist größer als die Länge von <paramref name="ascii" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in Vorgängen, die von den Membern des aktuellen <see cref="T:System.Globalization.IdnMapping" />-Objekts durchgeführt werden, dem Standard entsprechende oder gelockerte Namenskonventionen verwendet werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn in Vorgängen standardmäßige Namenskonventionen verwendet werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domänen Namen, die auf Standard Benennungs Regeln folgen, bestehen aus einer bestimmten Teilmenge von Zeichen im US-ASCII-Zeichenbereich. Dabei handelt es sich um die Buchstaben A bis Z, die Ziffern 0 bis 9, den Bindestrich (-), den Bindestrich (-) und den Zeichen Zeitraum (.). Die Groß-/Kleinschreibung der Zeichen ist nicht signifikant. Eine gelockerte Benennungs Konvention ermöglicht die Verwendung eines breiteren Bereichs von ASCII-Zeichen, einschließlich des leer Zeichens (u + 0020), des Ausrufezeichens (u + 0021) und des unterstrich Zeichens (u + 005F). Wenn <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> `true`ist, können nur Standard Zeichen in einer Bezeichnung vorkommen, die von der <xref:System.Globalization.IdnMapping.GetAscii%2A>-Methode zurückgegeben wird.  
  
 Standardmäßig ist der Wert der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft `false`, und in einer Bezeichnung ist eine erweiterte Teilmenge von ASCII-Zeichen zulässig.  
  
> [!NOTE]
>  Die <xref:System.Globalization.IdnMapping>-Klasse verhindert, dass die nicht anzeigbaren Zeichen u + 0000 bis u + 001F und u + 007F in Domänen Namen Bezeichnungen unabhängig von der Einstellung der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft verwendet werden. Dieses Verbot verringert das Risiko von Sicherheitsangriffen, wie z. b. Spoofing von Namen.  
  
   
  
## Examples  
 Im folgenden Beispiel werden URLs generiert, die Zeichen im ASCII-Bereich von u + 0000 bis U + 007F enthalten und an die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>-Methode von zwei <xref:System.Globalization.IdnMapping> Objekten weitergeleitet werden. Die <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft eines Objekts ist auf "`true`" festgelegt, und für das andere Objekt ist `false`festgelegt. Die Ausgabe zeigt die Zeichen an, die ungültig sind, wenn die <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>-Eigenschaft `true`, aber gültig ist, wenn Sie `false`ist.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

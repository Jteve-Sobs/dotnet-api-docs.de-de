<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed62e8499764dd5b075b00bc015a4b6e1563ef14" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52193512" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Unterstützt die Verwendung von nicht-ASCII-Zeichen für Internetdomänennamen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Internetdomänennamen besteht aus einem oder mehreren Teilen, durch Bezeichnungstrennzeichen getrennten domänennamensbezeichnungen aufgerufen. Beispielsweise besteht aus der Domäne "www.proseware.com" die Bezeichnungen "Www", "abc" und "com", die durch Punkte getrennt sind. Standard-Domäne-Namen bestehen aus der angegebenen Zeichen im US-ASCII-(oder lateinischen) Zeichenbereich, von U + 0021 bis U + 007E. Um die internetnutzung in Kulturen zu erleichtern, die nicht den US-ASCII-Zeichensatz, die über die Internationalisierung von Domänennamen in Anwendungen (IDNA) verwenden wurde Standard 2003 unterstützen die Einbeziehung von Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs übernommen. Allerdings weiterhin Namenserver und Auflösung des Domänennamens auf Zeichen innerhalb des US-ASCII-Zeichenbereichs basieren.  
  
 Das IDNA-Verfahren verwendet Ihre Punycode-Entsprechungen ein internationalisierten Domänennamens zuordnen, das außerhalb des US-ASCII-Zeichenbereichs, des US-ASCII-Zeichenbereichs von Domain Name System unterstützt Unicode-Zeichen enthält. Das IDNA-Verfahren wird verwendet, um nur Domänennamen verwendet wird, nicht über das Internet übertragene Daten zu konvertieren.  
  
> [!IMPORTANT]
>  In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.IdnMapping> Klasse unterstützt verschiedene Versionen des IDNA-Standards, je nach Betriebssystem verwendet:  
>   
>  -   Bei Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)], unterstützt die Version 2008 des IDNA-Standards, die hier beschriebenen [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protokoll](https://go.microsoft.com/fwlink/?LinkId=231875).  
> -   Wenn in früheren Versionen des Windows-Betriebssystems ausgeführt wird, unterstützt die 2003-Version des Standards, die hier beschriebenen [RFC 3490: über die Internationalisierung Domain Names in Applications (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110).  
>   
>  Finden Sie unter [Unicode Technical Standard #46: Verarbeiten von IDNA-Kompatibilität](https://go.microsoft.com/fwlink/?LinkId=232459) für die auf unterschiedliche Weise behandelt diese Standards bestimmte Gruppen von Zeichen.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> Methode normalisiert einen Domänennamen, konvertiert die normalisierte Namen in eine Darstellung, die aus anzeigbaren Unicode-Zeichen im US-ASCII-Codepunktbereich (U + 0020 bis U + 007E) besteht aus, und stellt eine ASCII-kompatible Codierung (ACE) das Präfix voran (" Xn--") zu jeder Bezeichnung. Die <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> Methode stellt der domänennamensbezeichnungen, die konvertiert, indem die <xref:System.Globalization.IdnMapping.GetAscii%2A> Methode.  
  
 Wenn die Zeichenfolge zu konvertierende der Bezeichnungstrennzeichen enthält IDEOGRAFISCHEN vollständige Beendigung-Zeichen (U + 3002), voller Breite vollständige Beendigung (U + FF0E) und IDEOGRAFISCHEN Punkt halber Breite (U + FF61), die <xref:System.Globalization.IdnMapping.GetAscii%2A> Methode in der Bezeichnungstrennzeichen vollständige Beendigung (Punkt, U + konvertiert 002E). Die <xref:System.Globalization.IdnMapping.GetUnicode%2A> -Methode, wird das ursprüngliche Bezeichnung Trennzeichen jedoch nicht wiederhergestellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> Methode konvertiert ein Array von internationalen Domänennamen in Ihre Punycode-Entsprechungen. Die <xref:System.Globalization.IdnMapping.GetUnicode%2A> Methode klicken Sie dann den Punycode-Domänennamen an den ursprünglichen Domänennamen konvertiert, aber ersetzt den ursprünglichen Bezeichnungstrennzeichen mit dem Trennzeichen standardbeschriftung.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Alle öffentlichen Methoden <see cref="T:System.Globalization.IdnMapping" /> sind threadsicher und können gleichzeitig verwendet werden, von mehreren Threads, solange die <see cref="T:System.Globalization.IdnMapping" /> Eigenschaften der Instanz sind nicht auch gleichzeitig festgelegt.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Globalization.IdnMapping" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> und <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> werden Eigenschaften mit initialisiert `false`. Eine kleine Teilmenge von ASCII-Zeichen als A-Z, 0-9 sowie dem Bindestrich (-) Zeichen (U + 002D), und das Punktzeichen (.) sind im Domänennamen zulässig, aber nicht zugewiesene Codepunkte sind nicht.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in Vorgängen, die von den Membern des aktuellen <see cref="T:System.Globalization.IdnMapping" />-Objekts durchgeführt werden, nicht zugewiesene Codepunkte verwendet werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn in Vorgängen nicht zugewiesene Codepunkte verwendet werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein registrierter Domänenname darf keine nicht zugewiesene Codepunkte enthalten. Daher ist der Standardwert von der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> Eigenschaft `false`. Die IDNA-Spezifikation nicht zugewiesene Codepunkte zulässt, nur in Abfragen für den Abgleich von Zeichenfolgen (d. h. das Nachschlagen des Domain Name). Weitere Informationen zur Verwendung der nicht zugewiesene Codepunkte im Domänennamen finden Sie unter [RFC 3454, "Zur Vorbereitung von internationaler Zeichenfolgen (Stringprep)"](https://go.microsoft.com/fwlink/?LinkId=231873) und [RFC 5891, "Internationalized Domain Names in Applications () IDNA): Protokoll "](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Wenn die <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> Eigenschaft `false`, das Verhalten der Eigenschaft zugeordnet, die auf das zugrunde liegende Betriebssystem abhängig ist. Auf [!INCLUDE[win8](~/includes/win8-md.md)], <xref:System.Globalization.IdnMapping> -Klasse IDNA-2008, basierend auf den Standard Unicode 6.0 entspricht. In früheren Versionen von Windows die <xref:System.Globalization.IdnMapping> Klasse basiert auf dem IDNA-2003, basierend auf Unicode-3. *X*. Manche Codepunkte zu, die nicht zugewiesenen IDNA 2003 waren Zeichen zugewiesen wurden und in 2008 des IDNA unterstützt werden. Beispielsweise wurde U + 0221 in Unicode 4.0 eingeführt. Auf [!INCLUDE[win8](~/includes/win8-md.md)], es wird codiert als "Xn – 6la". In früheren Versionen von Windows, löst eine <xref:System.ArgumentException> Ausnahme.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das angegebene Objekt und das aktuelle <see cref="T:System.Globalization.IdnMapping" />-Objekt gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn das vom <paramref name="obj" />-Parameter angegebene Objekt von <see cref="T:System.Globalization.IdnMapping" /> abgeleitet ist und seine <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft sowie seine <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codiert eine Zeichenfolge aus Domänennamensbezeichnungen, die Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) enthalten. Die Zeichenfolge wird entsprechend dem IDNA-Standard formatiert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">Eine zu konvertierende Eingabezeichenfolge, die aus einer oder mehreren durch Bezeichnungstrennzeichen getrennten Domänennamensbezeichnungen besteht.</param>
        <summary>Codiert eine Zeichenfolge von Domänennamensbezeichnungen, die aus Unicode-Zeichen bestehen, in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich. Die Zeichenfolge wird entsprechend dem IDNA-Standard formatiert.</summary>
        <returns>Die Entsprechung der durch die <paramref name="unicode" />-Parameter angegebene Zeichenfolge, bestehend aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) und formatiert entsprechend des IDNA-Standards.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `unicode` Parameter gibt an, eine Zeichenfolge mit der eine oder mehrere Bezeichnungen, die gültige Unicode-Zeichen bestehen. Die Bezeichnungen werden durch Bezeichnungstrennzeichen getrennt. Die `unicode` Parameter darf nicht mit einem Bezeichnungstrennzeichen beginnen, kann jedoch einschließen und optional mit einem Trennzeichen enden. Bezeichnungstrennzeichen vollständige Beendigung (Punkt, U + 002E), IDEOGRAFISCHER beenden (U + 3002), voller Breite vollständige Beendigung (U + FF0E) und IDEOGRAFISCHEN Punkt (halber Breite U + FF61). Beispielsweise besteht aus der Domäne "www.adatum.com" die Bezeichnungen "Www", "Adatum" und "com", die durch Punkte getrennt sind.  
  
 Eine Bezeichnung kann nicht die folgenden Zeichen enthalten:  
  
-   Unicode-Steuerzeichen von U + 0001 bis U + 001F und U + 007F.  
  
-   Nicht zugewiesene Unicode-Zeichen, wenn der Wert des der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> Eigenschaft `false`.  
  
-   Nicht standardmäßige Zeichen im US-ASCII-Zeichenbereich, z. B. den Speicherplatz (U + 0020), Ausrufezeichen MARKIERT (U + 0021), und NIEDRIGEN (U + 005F)-Zeile-Zeichen, wenn der Wert des der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> Eigenschaft `true`.  
  
-   Zeichen, die von einer bestimmten Version von dem IDNA-Standard nicht zulässig sind. Weitere Informationen zu unzulässigen Zeichen finden Sie unter [RFC 3454: Vorbereitung der internationalen-Zeichenfolgen ("Stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 und [RFC 5982 nur: die Unicode-Codepunkten und Internationalized Domain Names für Anwendungen](https://go.microsoft.com/fwlink/?LinkId=231877) für 2008 des IDNA.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A> -Methode konvertiert alle Bezeichnungstrennzeichen in vollständige Beendigung (Punkt, U + 002E).  
  
 Wenn `unicode` enthält keine Zeichen außerhalb des US-ASCII-Zeichenbereich und keine Zeichen innerhalb des Bereichs der US-ASCII-Zeichen sind nicht zulässig, die Methode gibt `unicode` unverändert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> Methode, um ein Array von konvertieren internationalisierte Domänennamen in Punycode, dies ist eine codierte entspricht, der Zeichen im US-ASCII-Zeichenbereich besteht. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> Methode klicken Sie dann den Punycode-Domänennamen wieder in den ursprünglichen Domänennamen konvertiert, aber ersetzt die ursprüngliche Bezeichnungstrennzeichen mit der standardmäßigen Bezeichnungstrennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <see cref="T:System.Globalization.IdnMapping" /> Klasse unterstützt verschiedene Versionen des IDNA-Standards, je nach Betriebssystem verwendet: 
-Bei einer Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)], unterstützt die Version 2008 des IDNA-Standards, die hier beschriebenen [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protokoll](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
– Wenn in früheren Versionen des Windows-Betriebssystems ausgeführt wird, unterstützt die 2003-Version des Standards, die hier beschriebenen [RFC 3490: über die Internationalisierung Domain Names in Applications (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110).  
  
Finden Sie unter [Unicode Technical Standard #46: Verarbeiten von IDNA-Kompatibilität](https://go.microsoft.com/fwlink/?LinkId=232459) für die auf unterschiedliche Weise behandelt diese Standards bestimmte Gruppen von Zeichen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">Eine zu konvertierende Eingabezeichenfolge, die aus einer oder mehreren durch Bezeichnungstrennzeichen getrennten Domänennamensbezeichnungen besteht.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="unicode" />, der den Anfang der zu konvertierenden Teilzeichenfolge angibt. Der Konvertierungsvorgang wird bis zum Ende der <paramref name="unicode" />-Zeichenfolge fortgesetzt.</param>
        <summary>Codiert eine Teilzeichenfolge Domänennamensbezeichnungen, die Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs enthalten. Die Teilzeichenfolge wird in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich konvertiert und wird entsprechend dem IDNA-Standard formatiert.</summary>
        <returns>Die Entsprechung der durch die <paramref name="unicode" />und <paramref name="index" />-Parameter angegebenen Teilzeichenfolge, bestehend aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) und formatiert entsprechend des IDNA-Standards.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `unicode` und `index` Parameter definieren, eine untergeordnete Zeichenfolge mit der eine oder mehrere Bezeichnungen, die gültige Unicode-Zeichen bestehen. Die Bezeichnungen werden durch Bezeichnungstrennzeichen getrennt. Das erste Zeichen der Teilzeichenfolge darf nicht mit einem Bezeichnungstrennzeichen beginnen kann, jedoch einschließen und optional mit einem Trennzeichen enden. Bezeichnungstrennzeichen vollständige Beendigung (Punkt, U + 002E), IDEOGRAFISCHER beenden (U + 3002), voller Breite vollständige Beendigung (U + FF0E) und IDEOGRAFISCHEN Punkt (halber Breite U + FF61). Beispielsweise besteht aus der Domäne "www.adatum.com" die Bezeichnungen "Www", "Adatum" und "com", die durch Punkte getrennt sind.  
  
 Eine Bezeichnung kann nicht die folgenden Zeichen enthalten:  
  
-   Unicode-Steuerzeichen von U + 0001 bis U + 001F und U + 007F.  
  
-   Nicht zugewiesene Unicode-Zeichen, abhängig vom Wert der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> Eigenschaft.  
  
-   Nicht standardmäßige Zeichen im US-ASCII-Zeichenbereich, z. B. den Speicherplatz (U + 0020), Ausrufezeichen MARKIERT (U + 0021), und mit GERINGEN Zeile (U + 005F)-Zeichen, abhängig vom Wert der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> Eigenschaft.  
  
-   Zeichen, die von einer bestimmten Version von dem IDNA-Standard nicht zulässig sind. Weitere Informationen zu unzulässigen Zeichen finden Sie unter [RFC 3454: Vorbereitung der internationalen-Zeichenfolgen ("Stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 und [RFC 5982 nur: die Unicode-Codepunkten und Internationalized Domain Names für Anwendungen](https://go.microsoft.com/fwlink/?LinkId=231877) für 2008 des IDNA.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A> -Methode konvertiert alle Bezeichnungstrennzeichen in vollständige Beendigung (Punkt, U + 002E).  
  
 Wenn `unicode` enthält keine Zeichen außerhalb des US-ASCII-Zeichenbereich und keine Zeichen innerhalb des Bereichs der US-ASCII-Zeichen sind nicht zulässig, die Methode gibt `unicode` unverändert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird den lokalen Teil und der @-Zeichen aus einer e-Mail-Adresse und übergibt den resultierenden Domänennamen auf die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> Methode, um eine Punycode-Domänennamen erstellen, eine codierte Entsprechung, die aus Zeichen im US-ASCII Bereich von Zeichen. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> Methode klicken Sie dann den Punycode-Domänennamen wieder in den ursprünglichen Domänennamen konvertiert, aber ersetzt die ursprüngliche Bezeichnungstrennzeichen mit der standardmäßigen Bezeichnungstrennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ist kleiner als Null.  
  
- oder -  
 <paramref name="index" /> ist größer als die Länge von <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <see cref="T:System.Globalization.IdnMapping" /> Klasse unterstützt verschiedene Versionen des IDNA-Standards, je nach Betriebssystem verwendet: 
-Bei einer Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)], unterstützt die Version 2008 des IDNA-Standards, die hier beschriebenen [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protokoll](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
– Wenn in früheren Versionen des Windows-Betriebssystems ausgeführt wird, unterstützt die 2003-Version des Standards, die hier beschriebenen [RFC 3490: über die Internationalisierung Domain Names in Applications (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110).  
  
Finden Sie unter [Unicode Technical Standard #46: Verarbeiten von IDNA-Kompatibilität](https://go.microsoft.com/fwlink/?LinkId=232459) für die auf unterschiedliche Weise behandelt diese Standards bestimmte Gruppen von Zeichen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">Eine zu konvertierende Eingabezeichenfolge, die aus einer oder mehreren durch Bezeichnungstrennzeichen getrennten Domänennamensbezeichnungen besteht.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="unicode" />, der den Anfang der Teilzeichenfolge angibt.</param>
        <param name="count">Die Anzahl von zu konvertierenden Zeichen in der Teilzeichenfolge, die an der durch <paramref name="index" /> in der <paramref name="unicode" />-Zeichenfolge angegebenen Position beginnt.</param>
        <summary>Codiert die angegebene Anzahl von Zeichen in einer Teilzeichenfolge von Domänennamensbezeichnungen, die Unicode-Zeichen außerhalb des US-ASCII-Zeichenbereichs enthalten. Die Teilzeichenfolge wird in eine Zeichenfolge aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich konvertiert und wird entsprechend dem IDNA-Standard formatiert.</summary>
        <returns>Die Entsprechung der durch den <paramref name="unicode" />-Parameter, den <paramref name="index" />-Parameter und den <paramref name="count" />-Parameter angegebenen Teilzeichenfolge, bestehend aus anzeigbaren Unicode-Zeichen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) und formatiert entsprechend des IDNA-Standards.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Unicode`, `index`, und `count` Parameter definieren, eine untergeordnete Zeichenfolge mit der eine oder mehrere Bezeichnungen, die gültige Unicode-Zeichen bestehen. Die Bezeichnungen werden durch Bezeichnungstrennzeichen getrennt. Das erste Zeichen der Teilzeichenfolge darf nicht mit einem Bezeichnungstrennzeichen beginnen kann, jedoch einschließen und optional mit einem Trennzeichen enden. Bezeichnungstrennzeichen vollständige Beendigung (Punkt, U + 002E), IDEOGRAFISCHER beenden (U + 3002), voller Breite vollständige Beendigung (U + FF0E) und IDEOGRAFISCHEN Punkt (halber Breite U + FF61). Beispielsweise besteht aus der Domäne "www.adatum.com" die Bezeichnungen "Www", "Adatum" und "com", die durch Punkte getrennt sind.  
  
 Eine Bezeichnung kann nicht die folgenden Zeichen enthalten:  
  
-   Unicode-Steuerzeichen von U + 0001 bis U + 001F und U + 007F.  
  
-   Nicht zugewiesene Unicode-Zeichen, abhängig vom Wert der <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> Eigenschaft.  
  
-   Nicht standardmäßige Zeichen im US-ASCII-Zeichenbereich, z. B. den Speicherplatz (U + 0020), Ausrufezeichen MARKIERT (U + 0021), und mit GERINGEN Zeile (U + 005F)-Zeichen, abhängig vom Wert der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> Eigenschaft.  
  
-   Zeichen, die von einer bestimmten Version von dem IDNA-Standard nicht zulässig sind. Weitere Informationen zu unzulässigen Zeichen finden Sie unter [RFC 3454: Vorbereitung der internationalen-Zeichenfolgen ("Stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 und [RFC 5982 nur: die Unicode-Codepunkten und Internationalized Domain Names für Anwendungen](https://go.microsoft.com/fwlink/?LinkId=231877) für 2008 des IDNA.  
  
 Die <xref:System.Globalization.IdnMapping.GetAscii%2A> -Methode konvertiert alle Bezeichnungstrennzeichen in vollständige Beendigung (Punkt, U + 002E). Wenn die untergeordnete Zeichenfolge keine Zeichen außerhalb des US-ASCII-Zeichenbereichs liegen enthält, und keine Zeichen innerhalb des Bereichs der US-ASCII-Zeichen sind nicht zulässig, wird von der Methode die untergeordnete Zeichenfolge unverändert zurückgegeben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> Methode, um eines internationalisierten Domänennamens einen Domänennamen zu konvertieren, die dem IDNA-Standard entspricht. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> Methode anschließend konvertiert der standardisierten Domänenname wieder in den ursprünglichen Domänennamen, aber ersetzt die ursprüngliche Bezeichnungstrennzeichen mit der standardmäßigen Bezeichnungstrennzeichen.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
- oder -  
 <paramref name="index" /> ist größer als die Länge von <paramref name="unicode" />.  
  
- oder -  
 <paramref name="index" /> ist größer als die Länge von <paramref name="unicode" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <see cref="T:System.Globalization.IdnMapping" /> Klasse unterstützt verschiedene Versionen des IDNA-Standards, je nach Betriebssystem verwendet: 
-Bei einer Ausführung auf [!INCLUDE[win8](~/includes/win8-md.md)], unterstützt die Version 2008 des IDNA-Standards, die hier beschriebenen [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protokoll](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
– Wenn in früheren Versionen des Windows-Betriebssystems ausgeführt wird, unterstützt die 2003-Version des Standards, die hier beschriebenen [RFC 3490: über die Internationalisierung Domain Names in Applications (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110).  
  
Finden Sie unter [Unicode Technical Standard #46: Verarbeiten von IDNA-Kompatibilität](https://go.microsoft.com/fwlink/?LinkId=232459) für die auf unterschiedliche Weise behandelt diese Standards bestimmte Gruppen von Zeichen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Hashcode für dieses <see cref="T:System.Globalization.IdnMapping" />-Objekt zurück.</summary>
        <returns>Eine von vier 32-Bit-Konstanten mit Vorzeichen, die von den Eigenschaften eines <see cref="T:System.Globalization.IdnMapping" />-Objekts abgeleitet ist.  Der Rückgabewert hat keine besondere Bedeutung und ist nicht für die Verwendung in einem Hashcodealgorithmus geeignet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben der <xref:System.Globalization.IdnMapping.GetHashCode%2A> Methode, wenn Ihre Anwendung benötigt, um eine sinnvolle Hashcodealgorithmus zu implementieren.  
  
   
  
## Examples  
 Im folgende Beispiel wird davon ausgegangen, dass eine einzelne Zeichenfolge mehrere e-Mail-Adressen getrennt durch Leerzeichen enthalten kann. Entfernt den lokalen Teil und den @-Zeichen aus jeder e-Mail-Adresse und übergibt den resultierenden Domänennamen den <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> oder <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> Methode, um eine Punycode-Domänennamen erstellen. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> Methode konvertiert die Punycode-Domänennamen klicken Sie dann wieder in den ursprünglichen Domänennamen.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodiert eine oder mehrere Domänennamensbezeichnungen, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">Die zu decodierende Zeichenfolge, die aus einem oder mehreren Bezeichnungen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) besteht, codiert nach dem IDNA-Standard.</param>
        <summary>Decodiert eine Zeichenfolge aus einer oder mehreren Domänennamensbezeichnungen, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
        <returns>Die Unicode-Entsprechung der durch den <paramref name="ascii" />-Parameter angegebenen IDNA-Teilzeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Domänennamen, Bezeichnungen und Bezeichnungstrennzeichen finden Sie unter den Hinweisen zu den <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> Methode konvertiert ein Array von internationalen Domänennamen in Ihre Punycode-Entsprechungen. Die <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> Methode klicken Sie dann den Punycode-Domänennamen wieder in den ursprünglichen Domänennamen konvertiert, aber ersetzt die ursprüngliche Bezeichnungstrennzeichen mit der standardmäßigen Bezeichnungstrennzeichen.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">Die zu decodierende Zeichenfolge, die aus einem oder mehreren Bezeichnungen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) besteht, codiert nach dem IDNA-Standard.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="ascii" />, der den Anfang der zu decodierenden Teilzeichenfolge angibt. Der Decodierungsvorgang wird bis zum Ende der <paramref name="ascii" />-Zeichenfolge fortgesetzt.</param>
        <summary>Decodiert eine Teilzeichenfolge aus einer oder mehreren Domänennamensbezeichnungen, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
        <returns>Die Unicode-Entsprechung der durch den <paramref name="ascii" />-Parameter und den <paramref name="index" />-Parameter angegebenen IDNA-Teilzeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Domänennamen, Bezeichnungen und Bezeichnungstrennzeichen finden Sie unter den Hinweisen zu den <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ist kleiner als Null.  
  
- oder -  
 <paramref name="index" /> ist größer als die Länge von <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">Die zu decodierende Zeichenfolge, die aus einem oder mehreren Bezeichnungen im US-ASCII-Zeichenbereich (U+0020 bis U+007E) besteht, codiert nach dem IDNA-Standard.</param>
        <param name="index">Ein nullbasierter Offset in <paramref name="ascii" />, der den Anfang der Teilzeichenfolge angibt.</param>
        <param name="count">Die Anzahl von zu konvertierenden Zeichen in der Teilzeichenfolge, die an der durch <paramref name="index" /> in der <paramref name="ascii" />-Zeichenfolge angegebenen Position beginnt.</param>
        <summary>Decodiert eine Teilzeichenfolge einer angegebenen Länge, die eine oder mehrere Domänennamensbezeichnungen enthält, die entsprechend des IDNA-Standards codiert sind, in eine Zeichenfolge aus Unicode-Zeichen.</summary>
        <returns>Die Unicode-Entsprechung der durch den <paramref name="ascii" />-Parameter, den <paramref name="index" />-Parameter und den <paramref name="count" />-Parameter angegebenen IDNA-Teilzeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Domänennamen, Bezeichnungen und Bezeichnungstrennzeichen finden Sie unter den Hinweisen zu den <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
- oder -  
 <paramref name="index" /> ist größer als die Länge von <paramref name="ascii" />.  
  
- oder -  
 <paramref name="index" /> ist größer als die Länge von <paramref name="ascii" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> ist auf der Grundlage der <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" />-Eigenschaft, der <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />-Eigenschaft und dem IDNA-Standard ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob in Vorgängen, die von den Membern des aktuellen <see cref="T:System.Globalization.IdnMapping" />-Objekts durchgeführt werden, dem Standard entsprechende oder gelockerte Namenskonventionen verwendet werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn in Vorgängen standardmäßige Namenskonventionen verwendet werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domänennamen, die standard-Benennungsregeln folgen bestehen aus einer bestimmten Teilmenge von Zeichen im US-ASCII-Zeichenbereich. Die Zeichen sind die Buchstaben A bis Z, die Ziffern 0 bis 9, dem Bindestrich (-)-Zeichen (U + 002D) und das Punktzeichen (.). Die Groß-/Kleinschreibung der Zeichen ist nicht signifikant. Gelockerte Namenskonventionen ermöglichen die Verwendung einer breiteren Bereich von-ASCII-Zeichen, einschließlich des Speicherplatzes, der Zeichen (U + 0020), das Ausrufezeichen Zeichen (U + 0021) und den Unterstrich-Zeichen (U + 005F). Wenn <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> ist `true`, nur die Standardzeichen darf in einer Bezeichnung, die vom der <xref:System.Globalization.IdnMapping.GetAscii%2A> Methode.  
  
 Standardmäßig wird der Wert des der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> -Eigenschaft ist `false`, und eine erweiterte Teilmenge von ASCII-Zeichen in eine Bezeichnung zulässig ist.  
  
> [!NOTE]
>  Die <xref:System.Globalization.IdnMapping> Klasse untersagt die Verwendung der darstellbare Zeichen U + 0000 bis U + 001F und U + 007F im Domänennamen "Bezeichnungen" unabhängig von der Einstellung für die <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> Eigenschaft. Dieses Verbot erkannt wird, reduziert das Risiko von Angriffen wie spoofing von Namen.  
  
   
  
## Examples  
 Im folgenden Beispiel generiert URLs, die Zeichen im ASCII-Bereich von U + 0000 bis U + 007F enthalten, und übergibt sie an der <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> Methode zwei <xref:System.Globalization.IdnMapping> Objekte. Ein Objekt verfügt über seine <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> -Eigenschaftensatz auf `true`, und das andere Objekt festgelegt `false`. Die Ausgabe zeigt die Zeichen, die ungültig sind bei der <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> Eigenschaft `true` jedoch gültig, wenn es ist `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4eff52d60057e188207f6f05da94a8ae8b767298" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52206722" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Unterstützt den Strukturvergleich von Auflistungsobjekten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Collections.IStructuralComparable> -Schnittstelle ermöglicht Ihnen, benutzerdefinierte Vergleiche für Member der Auflistung zu implementieren. Das heißt, können Sie definieren, genau Bedeutung für ein Auflistungsobjekt, vorausgehen oder folgen treten in der gleichen Position in der Sortierreihenfolge als ein zweites Auflistungsobjekt. Anschließend können Sie angeben, dass diese Definition mit dem Auflistungstyp verwendet wird, akzeptiert die <xref:System.Collections.IStructuralComparable> Schnittstelle.  
  
 Die Schnittstelle verfügt über einen einzelnen Member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, der bestimmt, ob das aktuelle Auflistungsobjekt kleiner, gleich oder größer als ein zweites Objekt in der Sortierreihenfolge ist. Der Vergleich der die Elemente oder Elemente in der aktuellen Instanz, mit denen in einem zweiten Objekt erfolgt durch ein <xref:System.Collections.IComparer> schnittstellenimplementierung, enthält die Definition von Ihrem benutzerdefinierten Vergleich.  
  
> [!NOTE]
>  Die <xref:System.Collections.IStructuralComparable> Schnittstelle unterstützt nur die strukturelle Vergleiche für Anordnung oder Sortierung. Die <xref:System.Collections.IStructuralEquatable> Schnittstelle unterstützt benutzerdefinierte Vergleiche auf Strukturgleichheit überprüft.  
  
 .NET Framework bietet zwei Standardvergleiche. Eine wird zurückgegeben, indem die <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> Eigenschaft; der andere wird zurückgegeben, durch die <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die generische Tuple-Klassen (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>usw.) und die <xref:System.Array> Klasse bereitstellen, explizite Implementierungen von der <xref:System.Collections.IStructuralComparable> Schnittstelle. Durch Umwandlung (in c#) oder konvertieren (in Visual Basic) der aktuellen Instanz eines Arrays oder das Tupel mit einer <xref:System.Collections.IStructuralComparable> Schnittstelle Wert und Ihre <xref:System.Collections.IComparer> Implementierung als Argument an die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode, Sie können eine benutzerdefinierte Sortierreihenfolge für definieren die Array oder einer Auflistung. Allerdings rufen Sie die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode direkt in den meisten Fällen. Stattdessen die <xref:System.Collections.IStructuralComparable.CompareTo%2A> Methode wird aufgerufen, durch Methoden wie z. B. sortieren <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In diesem Fall definieren Sie Ihre <xref:System.Collections.IComparer> Implementierung und an den Klassenkonstruktor eine Sortierung-Methode oder eine Auflistung des Objekts als Argument übergeben. Die <xref:System.Collections.IStructuralComparable.CompareTo%2A> Methode mit dem benutzerdefinierten Vergleich wird dann automatisch aufgerufen, wenn die Auflistung sortiert wird.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.Tuple%606> Objekte, die Bevölkerungsdaten für drei US-Orte von 1960 bis 2000 enthält. Das Sextupel die erste Komponente ist der Name des Orts. Die verbleibenden fünf Komponenten stellen die Auffüllung in Abständen von zehn Jahren von 1960 auf 2000.  
  
 Die `PopulationComparer` -Klasse stellt eine <xref:System.Collections.IComparer> Implementierung, mit das Array von Sextupeln eine seiner Komponenten sortiert werden können. Zwei Werte werden bereitgestellt, um die `PopulationComparer` Klasse in seinem Konstruktor: die Position der Komponente, die die Sortierreihenfolge definiert, und ein boolescher Wert, der angibt, ob die Tupelobjekte in aufsteigender oder absteigender Reihenfolge sortiert werden sollen.  
  
 Im Beispiel wird dann zeigt die Elemente im Array in der unsortierten Reihenfolge sortiert sie nach der dritten Komponente (die Auffüllung in 1970) und zeigt sie an, und sortiert sie nach der sechsten Komponente (die Bevölkerung im Jahr 2000) und anschließend angezeigt. Beachten Sie, die im Beispiel nicht direkt aufgerufen wird die <xref:System.Collections.IStructuralComparable.CompareTo%2A> Methode. Die Methode aufgerufen wird, implizit von der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> Methode für jedes Tupelobjekt im Array.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <param name="comparer">Ein Objekt, das Member des aktuellen Auflistungsobjekts mit den entsprechenden Membern von <paramref name="other" /> vergleicht.</param>
        <summary>Bestimmt, ob das aktuelle Auflistungsobjekt in der Sortierreihenfolge vor oder nach einem anderen Objekt oder an derselben Position auftritt.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die Beziehung des aktuellen Sammlungsobjekts zu <paramref name="other" /> angibt, in folgender Sortierreihenfolge:<br /> – Bei einem Wert unter 0 steht die aktuelle Instanz vor <paramref name="other" />.<br /> – Bei 0 sind die aktuelle Instanz und <paramref name="other" /> gleich.<br /> – Bei einem Wert größer als 0 folgt die aktuelle Instanz auf <paramref name="other" />.  
  
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> Beschreibung  
 </description></listheader><item><term> -1 
 </term><description> Die aktuelle Instanz tritt vor <paramref name="other" /> auf.  
  
 </description></item><item><term> 0 
 </term><description> Die aktuelle Instanz und <paramref name="other" /> sind gleich.  
  
 </description></item><item><term> 1 
 </term><description> Die aktuelle Instanz folgt auf <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode unterstützt benutzerdefinierte struktureller Vergleich und Sortierung von Arrays und Tupel. Die <xref:System.Collections.IStructuralComparable.CompareTo%2A> Methodenaufrufe der `comparer` des Objekts <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Methode, um einzelne Arrayelemente oder Tupelkomponenten, beginnend mit dem ersten Element oder eine Komponente zu vergleichen. Die einzelnen Aufrufe <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> End und dem <xref:System.Collections.IStructuralComparable.CompareTo%2A> Methode gibt einen Wert zurück, wenn eine der folgenden Bedingungen "true" ist:  
  
-   Die <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Methode gibt-1 zurück.  
  
-   Die <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> -Methode gibt 1 zurück.  
  
-   Die <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Methode für das letzte Element oder eine Komponente in das Objekt aufgerufen wird.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.Tuple%606> Objekte, die Bevölkerungsdaten für drei US-Orte von 1960 bis 2000 enthält. Das Sextupel die erste Komponente ist der Name des Orts. Die verbleibenden fünf Komponenten stellen die Auffüllung in Abständen von zehn Jahren von 1960 auf 2000.  
  
 Die `PopulationComparer` -Klasse stellt eine <xref:System.Collections.IComparer> Implementierung, mit das Array von Sextupeln eine seiner Komponenten sortiert werden können. Zwei Werte werden bereitgestellt, um die `PopulationComparer` Klasse in seinem Konstruktor: die Position der Komponente, die die Sortierreihenfolge definiert und eine <xref:System.Boolean> Wert, der angibt, ob die Tupelobjekte in aufsteigender oder absteigender Reihenfolge sortiert werden sollen.  
  
 Im Beispiel wird dann zeigt die Elemente im Array in der unsortierten Reihenfolge sortiert sie nach der dritten Komponente (die Auffüllung in 1970) und zeigt sie an, und sortiert sie nach der sechsten Komponente (die Bevölkerung im Jahr 2000) und anschließend angezeigt. Beachten Sie, die im Beispiel nicht direkt aufgerufen wird die <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> Implementierung. Die Methode aufgerufen wird, implizit von der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> Methode für jedes Tupelobjekt im Array.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Diese Instanz und <paramref name="other" /> weisen nicht denselben Typ auf.</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>
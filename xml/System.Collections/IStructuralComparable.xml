<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9453bb03072dbb0e96a839cb23cd4e2a2b274978" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69333759" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Unterstützt den Strukturvergleich von Auflistungsobjekten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Collections.IStructuralComparable> -Schnittstelle ermöglicht es Ihnen, angepasste Vergleiche für Auflistungs Member zu implementieren. Das heißt, Sie können genau definieren, was es bedeutet, dass ein Auflistungs Objekt in der Sortierreihenfolge vor oder nach der gleichen Position wie ein zweites Auflistungs Objekt vorangestellt wird. Sie können dann angeben, dass diese Definition mit einem Sammlungstyp verwendet werden soll <xref:System.Collections.IStructuralComparable> , der die-Schnittstelle annimmt.  
  
 Die-Schnittstelle verfügt über einen <xref:System.Collections.IStructuralComparable.CompareTo%2A>einzelnen Member,, der bestimmt, ob das aktuelle Auflistungs Objekt kleiner, gleich oder größer als ein zweites Objekt in der Sortierreihenfolge ist. Der tatsächliche Vergleich der Member oder Elemente in der aktuellen Instanz mit denen in einem zweiten Objekt erfolgt durch eine <xref:System.Collections.IComparer> Schnittstellen Implementierung, die die Definition des benutzerdefinierten Vergleichs enthält.  
  
> [!NOTE]
>  Die <xref:System.Collections.IStructuralComparable> -Schnittstelle unterstützt nur Struktur Vergleiche beim Sortieren oder sortieren. Die <xref:System.Collections.IStructuralEquatable> -Schnittstelle unterstützt benutzerdefinierte Vergleiche für strukturelle Gleichheit.  
  
 Der .NET Framework stellt zwei Standardcomparer bereit. Eine wird von der <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> -Eigenschaft zurückgegeben, die andere wird von der <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> -Eigenschaft zurückgegeben.  
  
 Die generischen tupelklassen<xref:System.Tuple%601>( <xref:System.Tuple%602>, <xref:System.Tuple%603>, usw.) <xref:System.Collections.IStructuralComparable> und die <xref:System.Array> -Klasse stellen explizite Implementierungen der-Schnittstelle bereit. Durch umwandeln (in C#) oder konvertieren (in Visual Basic) der aktuellen Instanz eines Arrays oder Tupels in einen <xref:System.Collections.IStructuralComparable> Schnittstellen <xref:System.Collections.IComparer> Wert und Bereitstellen der Implementierung als Argument für die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode können Sie eine benutzerdefinierte Sortierreihenfolge definieren. für das Array oder die Auflistung. In den meisten Fällen wird die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode jedoch nicht direkt aufgerufen. Stattdessen wird die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode durch Sortiermethoden <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>wie aufgerufen. In diesem Fall definieren Sie die <xref:System.Collections.IComparer> Implementierung und übergeben Sie als Argument an den Klassenkonstruktor einer Sortiermethode oder eines Auflistungs Objekts. Die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode mit dem benutzerdefinierten Vergleich wird dann automatisch aufgerufen, wenn die Auflistung sortiert wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von <xref:System.Tuple%606> -Objekten erstellt, das auffüllungs Daten für drei US-Städte von 1960 bis 2000 enthält. Die erste Komponente des sextupels ist der Name der Stadt. Die verbleibenden fünf Komponenten stellen die Auffüllung in Abständen von 10 Jahren zwischen 1960 und 2000 dar.  
  
 Die `PopulationComparer` -Klasse stellt <xref:System.Collections.IComparer> eine-Implementierung bereit, mit der das Array von sextupel nach einer seiner Komponenten sortiert werden kann. Zwei Werte werden für die `PopulationComparer` -Klasse im Konstruktor bereitgestellt: die Position der Komponente, die die Sortierreihenfolge definiert, und ein boolescher Wert, der angibt, ob die tupelobjekte in aufsteigender oder absteigender Reihenfolge sortiert werden sollen.  
  
 Das Beispiel zeigt dann die Elemente im Array in unsortierten Reihenfolge an, sortiert sie nach der dritten Komponente (die Population in 1970) und zeigt Sie an und sortiert Sie dann nach der sechsten Komponente (die Population in 2000) und zeigt Sie an. Beachten Sie, dass das Beispiel die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode nicht direkt aufruft. Die-Methode wird implizit von der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> -Methode für jedes tupelobjekt im-Array aufgerufen.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <param name="comparer">Ein Objekt, das Member des aktuellen Auflistungsobjekts mit den entsprechenden Membern von <paramref name="other" /> vergleicht.</param>
        <summary>Bestimmt, ob das aktuelle Auflistungsobjekt in der Sortierreihenfolge vor oder nach einem anderen Objekt oder an derselben Position auftritt.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die Beziehung des aktuellen Sammlungsobjekts zu <paramref name="other" /> angibt, in folgender Sortierreihenfolge:<br /> – Bei einem Wert unter 0 steht die aktuelle Instanz vor <paramref name="other" />.<br /> – Bei 0 sind die aktuelle Instanz und <paramref name="other" /> gleich.<br /> – Bei einem Wert größer als 0 folgt die aktuelle Instanz auf <paramref name="other" />.  
  
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> Beschreibung 
 </description></listheader><item><term> -1 
 </term><description> Die aktuelle Instanz tritt vor <paramref name="other" /> auf.  
  
 </description></item><item><term> 0 
 </term><description> Die aktuelle Instanz und <paramref name="other" /> sind gleich.  
  
 </description></item><item><term> 1 
 </term><description> Die aktuelle Instanz folgt auf <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode unterstützt den benutzerdefinierten strukturellen Vergleich und die Sortierung von Array-und tupelobjekten. Die <xref:System.Collections.IStructuralComparable.CompareTo%2A> -Methode ruft `comparer` die- <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Methode des-Objekts auf, um einzelne Array Elemente oder tupelkomponenten zu vergleichen, beginnend mit dem ersten Element oder der Komponente. Die einzelnen Aufrufe von <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> beenden, und <xref:System.Collections.IStructuralComparable.CompareTo%2A> die-Methode gibt einen Wert zurück, wenn eine der folgenden Bedingungen zutrifft:  
  
-   Die <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Methode gibt-1 zurück.  
  
-   Die <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> Methode gibt 1 zurück.  
  
-   Die <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> -Methode wird für das letzte Element oder die Komponente im Auflistungs Objekt aufgerufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von <xref:System.Tuple%606> -Objekten erstellt, das auffüllungs Daten für drei US-Städte von 1960 bis 2000 enthält. Die erste Komponente des sextupels ist der Name der Stadt. Die verbleibenden fünf Komponenten stellen die Auffüllung in Abständen von 10 Jahren zwischen 1960 und 2000 dar.  
  
 Die `PopulationComparer` -Klasse stellt <xref:System.Collections.IComparer> eine-Implementierung bereit, mit der das Array von sextupel nach einer seiner Komponenten sortiert werden kann. Zwei Werte werden für die `PopulationComparer` -Klasse im Konstruktor bereitgestellt: die Position der Komponente, die die Sortierreihenfolge definiert, und ein <xref:System.Boolean> Wert, der angibt, ob die tupelobjekte in aufsteigender oder absteigender Reihenfolge sortiert werden sollen.  
  
 Das Beispiel zeigt dann die Elemente im Array in unsortierten Reihenfolge an, sortiert sie nach der dritten Komponente (die Population in 1970) und zeigt Sie an und sortiert Sie dann nach der sechsten Komponente (die Population in 2000) und zeigt Sie an. Beachten Sie, dass das Beispiel die <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> -Implementierung nicht direkt aufruft. Die-Methode wird implizit von der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> -Methode für jedes tupelobjekt im-Array aufgerufen.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Diese Instanz und <paramref name="other" /> weisen nicht denselben Typ auf.</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IObjectSet&lt;TEntity&gt;" FullName="System.Data.Objects.IObjectSet&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6556b517d0e2c5de4929ed6154ede089fc3cad8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69126789" /></Metadata><TypeSignature Language="C#" Value="public interface IObjectSet&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObjectSet`1&lt;class TEntity&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.IObjectSet`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObjectSet(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IQueryable(Of TEntity)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic interface class IObjectSet : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::Linq::IQueryable&lt;TEntity&gt;" />
  <TypeSignature Language="F#" Value="type IObjectSet&lt;'Entity (requires 'Entity : null)&gt; = interface&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">Der Typ eines von der Abfrage zurückgegebenen Entitätsobjekts.</typeparam>
    <summary>Stellt Funktionen bereit, die es ermöglichen, Änderungen an einem Satz von Datenobjekten vorzunehmen.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddObject(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.IObjectSet`1.AddObject(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddObject (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member AddObject : 'Entity -&gt; unit" Usage="iObjectSet.AddObject entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Das neue Objekt, das dem Satz hinzugefügt werden soll.</param>
        <summary>Benachrichtigt den Satz, dass dem Satz ein Objekt hinzugefügt werden muss, das eine neue Entität darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Änderungen an der Menge sind in einer Enumeration der Menge möglicherweise erst sichtbar, wenn Änderungen an diesem Satz in irgendeiner Weise persistent gespeichert wurden. Dieses Verhalten hängt von der spezifischen Implementierung von <xref:System.Data.Objects.IObjectSet%601>ab.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.IObjectSet`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; unit" Usage="iObjectSet.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Das vorhandene Objekt, das dem Satz hinzugefügt werden soll.</param>
        <summary>Benachrichtigt den Satz, dass dem Satz ein Objekt hinzugefügt werden muss, das eine vorhandene Entität darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Änderungen an der Menge sind in einer Enumeration der Menge möglicherweise erst sichtbar, wenn Änderungen an diesem Satz in irgendeiner Weise persistent gespeichert wurden. Dieses Verhalten hängt von der spezifischen Implementierung von <xref:System.Data.Objects.IObjectSet%601>ab.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteObject(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteObject (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteObject(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member DeleteObject : 'Entity -&gt; unit" Usage="iObjectSet.DeleteObject entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Das vorhandene Objekt, das aus dem Satz gelöscht werden soll.</param>
        <summary>Benachrichtigt den Satz, dass ein Objekt, das eine vorhandene Entität darstellt, aus dem Satz gelöscht werden muss.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Änderungen an der Menge sind in einer Enumeration der Menge möglicherweise erst sichtbar, wenn Änderungen an diesem Satz in irgendeiner Weise persistent gespeichert wurden. Dieses Verhalten hängt von der spezifischen Implementierung von <xref:System.Data.Objects.IObjectSet%601>ab.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Detach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.IObjectSet`1.Detach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Detach : 'Entity -&gt; unit" Usage="iObjectSet.Detach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Das vom Satz zu trennende Objekt.</param>
        <summary>Benachrichtigt den Satz, dass ein Objekt, das eine vorhandene Entität darstellt, vom Satz getrennt werden muss.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Änderungen an der Menge sind in einer Enumeration der Menge möglicherweise erst sichtbar, wenn Änderungen an diesem Satz in irgendeiner Weise persistent gespeichert wurden. Dieses Verhalten hängt von der spezifischen Implementierung von <xref:System.Data.Objects.IObjectSet%601>ab.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

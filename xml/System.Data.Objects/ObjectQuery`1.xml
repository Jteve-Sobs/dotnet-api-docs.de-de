<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="514bbfede80bae94df808a95c56e2a8872b58694" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46674946" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Entitätstyp der Abfrage.</typeparam>
    <summary>Stellt eine typisierte Abfrage für ein Konzeptmodell in einem gegebenen Objektkontext dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die generische <xref:System.Data.Objects.ObjectQuery%601>-Klasse stellt eine Abfrage dar, die eine Auflistung von null oder mehr Objekten eines bestimmten Typs zurückgibt. Der <xref:System.Data.Objects.ObjectContext> muss definiert werden, bevor eine Objektabfrage ausgeführt werden kann. Dieser Kontext stellt die Verbindungs- und Metadateninformationen bereit, die zum Verfassen und Ausführen der Abfrage erforderlich sind. Eine Objektabfrage wird in den folgenden Szenarios ausgeführt:  
  
-   Wenn eine Aktion darauf ausgeführt wird, z. B. während einer `foreach`- (C#) bzw. `For Each`-Enumeration (Visual Basic).  
  
-   Wenn sie zum Füllen einer <xref:System.Collections.Generic.List%601>-Auflistung zugewiesen ist.  
  
-   Wenn die <xref:System.Data.Objects.ObjectQuery%601.Execute%2A>-Methode explizit aufgerufen wird.  
  
 Die Abfrage selbst kann mithilfe einer [!INCLUDE[esql](~/includes/esql-md.md)]-Anweisung oder einer LINQ-Abfrage erstellt werden. Sie kann auch mithilfe der in der Klasse enthaltenen Abfrage-Generator-Methoden inkrementell erstellt werden. In jedem Fall ist das Ergebnis ein neuer <xref:System.Data.Objects.ObjectQuery%601> Instanz, die, wenn Sie explizit ausgeführt oder durchlaufen, sendet die Abfrage an die Datenquelle für die Ausführung und die Ergebnisse zurückgeben.  
  
 Eine <xref:System.Data.Objects.ObjectQuery%601> weist häufig einen Entitätstyp auf, es kann sich jedoch auch um einen <xref:System.Data.Common.DbDataRecord>-Typ bei Projektionen auf einen anonymen Typ oder um einen primitiven Typ wie eine Ganzzahl oder Zeichenfolge handeln. Weitere Informationen finden Sie unter [Objektabfragen](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 Im Beispiel in diesem Thema basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 In dem Beispiel wird veranschaulicht, wie eine Instanz der <xref:System.Data.Objects.ObjectQuery%601>-Klasse erstellt wird.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/9e7d8837-28c5-429d-a824-7bafb59724cf">Entity SQL-Sprache</related>
    <related type="Article" href="http://msdn.microsoft.com/library/641f9b68-9046-47a1-abb0-1c8eaeda0e2d">LINQ to Entities</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Objects.ObjectQuery`1" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.Data.Objects.ObjectQuery%601> kann in solcher Weise initialisiert werden, dass sie ein einzelnes skalares Ergebnis und keine Auflistung von skalaren Ergebnissen darstellt. Einige Erweiterungsmethoden erfordern Auflistungsergebnisse als Eingabe. In diesem Fall wird eine <xref:System.ArgumentException> ausgelöst, wenn eine dieser Methoden aufgerufen wird. Weitere Informationen finden Sie unter [Objektabfragen](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Wenn Ihre Anwendung Entity SQL-Abfragen zur Laufzeit generiert wird, sollten Sie Befehl Länge Einschränkungen der Datenquelle kennen. Entity SQL erzwingt keine Einschränkungen für die Zeitdauer der Befehlstext in Abfragen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte und die Strukturierung der Ergebnisse (Entitätsframework)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">Die [!INCLUDE[esql](~/includes/esql-md.md)]-Abfrage.</param>
        <param name="context">Der <see cref="T:System.Data.Objects.ObjectContext" />, für den die Abfrage ausgeführt werden soll.</param>
        <summary>Erstellt eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz mit dem angegebenen [!INCLUDE[esql](~/includes/esql-md.md)]-Befehl als erste Abfrage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Ihre Anwendung Entity SQL-Abfragen zur Laufzeit generiert wird, sollten Sie Befehl Länge Einschränkungen der Datenquelle kennen. Entity SQL erzwingt keine Einschränkungen für die Zeitdauer der Befehlstext in Abfragen.  
  
   
  
## Examples  
 Im Beispiel in diesem Thema basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In dem Beispiel wird veranschaulicht, wie eine Instanz der <xref:System.Data.Objects.ObjectQuery%601>-Klasse erstellt wird.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">Die [!INCLUDE[esql](~/includes/esql-md.md)]-Abfrage.</param>
        <param name="context">Der <see cref="T:System.Data.Objects.ObjectContext" />, für den die Abfrage ausgeführt werden soll.</param>
        <param name="mergeOption">Gibt an, wie die Entitäten, die mit dieser Abfrage abgerufen werden, mit den Entitäten zusammengeführt werden sollen, die von vorherigen Abfragen für denselben <see cref="T:System.Data.Objects.ObjectContext" /> zurückgegeben wurden.</param>
        <summary>Erstellt eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz mit dem angegebenen [!INCLUDE[esql](~/includes/esql-md.md)]-Befehl als erste Abfrage und der angegebenen Zusammenführungsoption.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Ihre Anwendung Entity SQL-Abfragen zur Laufzeit generiert wird, sollten Sie Befehl Länge Einschränkungen der Datenquelle kennen. Entity SQL erzwingt keine Einschränkungen für die Zeitdauer der Befehlstext in Abfragen.  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Die <xref:System.Data.Objects.ObjectQuery%601> wird mit der angegebenen Abfrage, dem angegebenen <xref:System.Data.Objects.ObjectContext> und der angegebenen <xref:System.Data.Objects.MergeOption> initialisiert.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schränkt die Abfrage auf eindeutige Ergebnisse ein.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Abfrage-Generator-Methode gibt ein <xref:System.Data.Objects.ObjectQuery%601> -Instanz, die mit der ursprünglichen Abfrage entspricht [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) angewendet.  
  
 Die `DISTINCT` Operator kann nicht angewendet werden, um ein Objekt, das eine Zuordnung zu einer nicht vergleichbaren Spalte in der Datenquelle (z. B. Ntext) enthält.  
  
   
  
## Examples  
 Im Beispiel in diesem Thema basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In dem Beispiel wird die <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>-Methode zur Erstellung eines neuen <xref:System.Data.Objects.ObjectQuery%601>-Objekts verwendet. Anschließend wird <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> für das neue <xref:System.Data.Objects.ObjectQuery%601>-Objekt aufgerufen, um die eindeutigen Ergebnisse dieser Abfrage abzurufen.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Eine <see cref="T:System.Data.Objects.ObjectQuery`1" />, die die von der Abfrage auszuschließenden Ergebnisse darstellt.</param>
        <summary>Schränkt die Abfrageergebnisse ein, indem Ergebnisse aufgrund von Ergebnissen einer anderen Objektabfrage ausgeschlossen werden.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [EXCEPT](~/docs/framework/data/adonet/ef/language-reference/except-entity-sql.md) auf Grundlage der angegebenen <paramref name="query" /> festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die angegebene `query` , muss auszuschließende Ergebnisse definiert, werden vom selben Typ oder von einem Typ, die kompatibel mit der <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Definierten Parameter in der angegebenen `query` mit Parametern, die in definierten zusammengeführt werden die <xref:System.Data.Objects.ObjectQuery%601> Instanz. Parameter müssen in der kombinierten <xref:System.Data.Objects.ObjectParameterCollection> eindeutig sein. In der kombinierten Auflistung dürfen sich nicht zwei Parameter mit demselben Namen befinden. Weitere Informationen finden Sie unter [Abfrage-Generator-Methoden](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Die resultierende Abfrage erbt die Verbindung von der <xref:System.Data.Objects.ObjectQuery%601>-Instanz, für die <xref:System.Data.Objects.ObjectQuery%601.Except%2A> aufgerufen wurde.  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In dem Beispiel wird die <xref:System.Data.Objects.ObjectQuery%601.Except%2A>-Methode verwendet, um ein neues <xref:System.Data.Objects.ObjectQuery%601>-Objekt zu erstellen. Anschließend wird das Ergebnis der neuen Abfrage durchlaufen.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="query" />-Parameter ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte und die Strukturierung der Ergebnisse (Entitätsframework)</related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Die beim Ausführen der Abfrage zu verwendende <see cref="T:System.Data.Objects.MergeOption" />. Der Standardwert ist <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
        <summary>Führt die Objektabfrage mit der angegebenen Mergeoption aus.</summary>
        <returns>Ein <see cref="T:System.Data.Objects.ObjectResult`1" />, das eine Auflistung der von dieser Abfrage zurückgegebenen Entitätsobjekte enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standardzusammenführungsoption für Objektabfragen ist <xref:System.Data.Objects.MergeOption.AppendOnly>. Weitere Informationen finden Sie unter [Identitätsauflösung, Zustandsverwaltung und Änderungsnachverfolgung](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Im Beispiel wird ein <xref:System.Data.Objects.ObjectResult%601> von der <xref:System.Data.Objects.ObjectQuery.Execute%2A>-Methode zurückgegeben. Anschließend wird ein Enumerator abgerufen, und die Abfrageergebnisse werden durchlaufen. Abschließend werden der Enumerator und das <xref:System.Data.Objects.ObjectResult%601>-Objekt freigegeben.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Die Schlüsselspalten, nach denen die Ergebnisse gruppiert werden.</param>
        <param name="projection">Die Liste ausgewählter Eigenschaften, mit denen die Projektion definiert wird.</param>
        <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
        <summary>Gruppiert die Abfrageergebnisse nach den angegebenen Kriterien.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz des Typs <see cref="T:System.Data.Common.DbDataRecord" />, die der ursprünglichen Instanz entspricht, für die jedoch [GROUP BY](~/docs/framework/data/adonet/ef/language-reference/group-by-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> Wendet die angegebene, von der `projection` Parameter. Dies bedeutet, dass die von der <xref:System.Data.Objects.ObjectQuery%601>-Methode zurückgegebene <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> stets den Typ <xref:System.Data.Common.DbDataRecord> aufweist. Weitere Informationen finden Sie unter [Objektabfragen](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 In diesem Beispiel wird ein neues <xref:System.Data.Objects.ObjectQuery%601>-Objekt erstellt, das die Ergebnisse der bestehenden Abfrage nach Produktname gruppiert enthält.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]  
  
 In diesem Beispiel gibt einen Satz von geschachtelten Datensätzen, die enthalten die `Contact.LastName` Spalte gruppiert und alphabetisch sortiert nach dem ersten Buchstaben des `Contact.LastName`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="query" />-Parameter ist <see langword="null" /> oder eine leere Zeichenfolge.  
  
- oder -  
Der <paramref name="projection" />-Parameter ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
        <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" /> mit dem definierten Abfragepfad.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abfragepfade können mit Entity SQL- und LINQ-Abfragen verwendet werden.  
  
 Pfade sind allumfassend. Wenn ein Include-Aufruf gibt an, z. B. `Include("Orders.OrderLines")`, nicht nur `OrderLines` werden eingeschlossen werden, sondern auch `Orders`. Weitere Informationen finden Sie unter [laden verbundener Objekte](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1).  
  
 Beim Aufruf der <xref:System.Data.Objects.ObjectQuery%601.Include%2A>-Methode ist der Abfragepfad nur für die zurückgegebene Instanz der <xref:System.Data.Objects.ObjectQuery%601> gültig. Andere Instanzen von <xref:System.Data.Objects.ObjectQuery%601> und der Objektkontext selbst werden nicht beeinflusst.  
  
 Da die <xref:System.Data.Objects.ObjectQuery%601.Include%2A>-Methode das Abfrageobjekt zurückgibt, kann diese Methode mehrmals für eine <xref:System.Data.Objects.ObjectQuery%601> aufgerufen werden, um, wie im folgenden Beispiel, mehrere Pfade für die Abfrage anzugeben:  
  
 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> ist <see langword="empty" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Eine <see cref="T:System.Data.Objects.ObjectQuery`1" />, die die in die Abfrage einzuschließenden Ergebnisse darstellt.</param>
        <summary>Schränkt die Abfrageergebnisse ein, indem nur die Ergebnisse eingeschlossen werden, die in einer anderen Objektabfrage vorhanden sind.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die [INTERSECT](~/docs/framework/data/adonet/ef/language-reference/intersect-entity-sql.md) auf Grundlage der angegebenen <paramref name="query" /> festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die angegebene `query` , Ergebnisse definiert, darf enthalten werden vom selben Typ oder von einem Typ, die kompatibel mit der <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Definierten Parameter in der angegebenen `query` mit Parametern, die in definierten zusammengeführt werden die <xref:System.Data.Objects.ObjectQuery%601> Instanz. Parameter müssen in der kombinierten <xref:System.Data.Objects.ObjectParameterCollection> eindeutig sein. In der kombinierten Auflistung dürfen sich nicht zwei Parameter mit demselben Namen befinden. Weitere Informationen finden Sie unter [Abfrage-Generator-Methoden](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Die resultierende Abfrage erbt die Verbindung von der <xref:System.Data.Objects.ObjectQuery%601>-Instanz, für die die <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A>-Methode aufgerufen wurde.  
  
   
  
## Examples  
 Im Beispiel in diesem Thema basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In diesem Beispiel wird ein neues <xref:System.Data.Objects.ObjectQuery%601>-Objekt erstellt, das die Ergebnisse von zwei anderen Abfragen enthält.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="query" />-Parameter ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen dieser Objektabfrage ab oder legt diesen fest.</summary>
        <value>Ein <see langword="string" />-Wert, der den Namen der <see cref="T:System.Data.Objects.ObjectQuery`1" /> darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Name der Objektabfrage identifiziert beim Erstellen von Abfrage-Generator-Methoden die aktuelle Objektabfrage in der Sequenz nach deren Namen. Der Abfragename ist standardmäßig `it`. Dies kann beim Verweisen auf die aktuelle Sequenz in Joins innerhalb der <xref:System.Data.Objects.ObjectQuery`1.Where*>-Methode oder in der <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>-Methode nützlich sein. Weitere Informationen finden Sie unter [Abfrage-Generator-Methoden](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Wenn die <xref:System.Data.Objects.ObjectQuery%601.Name%2A>-Eigenschaft einer <xref:System.Data.Objects.ObjectQuery%601> festgelegt wird, wird dieser Wert in nachfolgenden Methoden als Alias verwendet.  
  
 Der Wert der <xref:System.Data.Objects.ObjectQuery%601.Name%2A>-Eigenschaft muss mit einem Buchstaben beginnen und kann Buchstaben, Ziffern und Unterstriche enthalten.  
  
   
  
## Examples  
 In diesem Beispiel wird der Name der ersten <xref:System.Data.Objects.ObjectQuery%601> auf "product" festgelegt. Dieser Alias wird in der nachfolgenden <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A>-Methode verwendet. Im Beispiel in diesem Thema basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der dafür angegebene Wert ist ungültig.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">Der Typ des zurückgegebenen <see cref="T:System.Data.Objects.ObjectResult`1" />, wenn die Abfrage mit dem angewendeten Filter ausgeführt wird.</typeparam>
        <summary>Beschränkt die Abfrage auf Ergebnisse eines bestimmten Typs.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [OFTYPE](~/docs/framework/data/adonet/ef/language-reference/oftype-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<xref:System.Data.Objects.ObjectQuery`1.OfType*> wird verwendet, um Abfrageergebnisse nach einer bestimmten Entität oder einem komplexen Typ zu filtern. Dies unterstützt ein konzeptionelles Modell mit objektvererbung. Weitere Informationen finden Sie unter [Entity Data Model: Vererbung](~/docs/framework/data/adonet/entity-data-model-inheritance.md).

Die <xref:System.Data.Objects.ObjectQuery`1.OfType*> Methode kann nur angewendet werden, um eine <xref:System.Data.Objects.ObjectQuery%601> eines Entitätstyps oder komplexen Typ, der im EDM definiert ist.
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">Der angegebene Typ ist ungültig.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">Gewusst wie: Erstellen und Ausführen von Objektabfragen mithilfe der 'Tabelle pro Hierarchie'-Vererbung (Entity Framework)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Die Schlüsselspalten, nach denen die Ergebnisse geordnet werden.</param>
        <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
        <summary>Ordnet die Abfrageergebnisse nach den angegebenen Kriterien.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Sortierung von Ergebnissen in einer geschachtelten Abfrage kann nicht garantiert werden.  
  
 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> sollte stets die letzte Abfrage-Generator-Methode in der Sequenz sein.  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Das Beispiel erstellt ein neues <xref:System.Data.Objects.ObjectQuery%601> Objekt, das die Ergebnisse der bestehenden Abfrage Order by-enthält `ProductID`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="keys" />-Parameter oder der <paramref name="parameters" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="key" /> ist eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">Die Liste ausgewählter Eigenschaften, mit denen die Projektion definiert wird.</param>
        <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
        <summary>Beschränkt die Abfrageergebnisse auf die Eigenschaften, die in der angegebenen Projektion definiert sind.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz des Typs <see cref="T:System.Data.Common.DbDataRecord" />, die der ursprünglichen Instanz entspricht, für die jedoch [SELECT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> Wendet die angegebene, von der `projection` Parameter. Die von der <xref:System.Data.Objects.ObjectQuery%601>-Methode zurückgegebene <xref:System.Data.Objects.ObjectQuery%601.Select%2A> weist stets einen Zeilentyp von <xref:System.Data.Common.DbDataRecord> auf. Verwenden Sie die <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>-Methode, um Werte zurückzugeben, bei denen es sich um einfache Typen, Entitätstypen oder komplexe Typen handelt. Weitere Informationen finden Sie unter [LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md).  
  
 Wenn in der Projektion eine Navigationseigenschaft enthalten ist, enthalten die Abfrageergebnisse eine Auflistung geschachtelter <xref:System.Data.Common.DbDataRecord>-Objekte. Weitere Informationen finden Sie unter [wie: Navigieren von Beziehungen mithilfe von Navigationseigenschaften](http://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057).  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Das Beispiel erstellt ein neues <xref:System.Data.Objects.ObjectQuery%601> , deren Ergebnisse Datensätze, die enthalten sind die `ProductID` -Felder der Ergebnisse dieser Abfrage.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projection" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="parameters" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="projection" /> ist eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType">Der Typ der <see cref="T:System.Data.Objects.ObjectQuery`1" />, die von der <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />-Methode zurückgegeben wird.</typeparam>
        <param name="projection">Die Projektionsliste.</param>
        <param name="parameters">Ein optionaler Satz von Abfrageparametern, die sich beim Analysieren im Gültigkeitsbereich befinden sollten.</param>
        <summary>Beschränkt die Abfrageergebnisse auf die Eigenschaft, die in der Projektion angegeben ist.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz eines Typs, der mit der angegebenen Projektion kompatibel ist. Die zurückgegebene <see cref="T:System.Data.Objects.ObjectQuery`1" /> entspricht der ursprünglichen Instanz, es ist jedoch [SELECT VALUE](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) für sie festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> wird verwendet, um Werte zurückzugeben, bei denen es sich um einfache Typen, Entitätstypen oder komplexe Typen handelt. Die <xref:System.Data.Objects.ObjectQuery%601.Select%2A>-Methode wird für Projektionen verwendet, die anstelle eines Werttyps einen Zeilentyp erfordern. Weitere Informationen finden Sie unter [Objektabfragen](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Die <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> Methode wendet die angegebene, von der `projection` Parameter. Die von der <xref:System.Data.Objects.ObjectQuery%601>-Methode zurückgegebene <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> muss einen Werttyp aufweisen, der mit der Projektion kompatibel ist und dem Typ von <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> entspricht.  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Das Beispiel erstellt ein neues <xref:System.Data.Objects.ObjectQuery%601> , enthält die Ergebnisse, die eine Sequenz von `ProductID` Werte aus den Ergebnissen der vorhandenen Abfrage projiziert.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projection" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="parameters" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="projection" /> ist eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Die Schlüsselspalten, nach denen die Ergebnisse geordnet werden.</param>
        <param name="count">Die Anzahl zu überspringender Ergebnisse. Dabei muss es sich um eine Konstante oder einen Parameterverweis handeln.</param>
        <param name="parameters">Ein optionaler Satz von Abfrageparametern, die sich beim Analysieren im Gültigkeitsbereich befinden sollten.</param>
        <summary>Ordnet die Abfrageergebnisse nach den angegebenen Kriterien und überspringt eine bestimmte Anzahl von Ergebnissen.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) und [SKIP](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md) festgelegt sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>-Methode kann nicht nach der <xref:System.Data.Objects.ObjectQuery%601.Top%2A>-Methode verwendet werden. Bei Verwendung von <xref:System.Data.Objects.ObjectQuery%601.Top%2A> nach <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>, entspricht der Funktionsweise der [Grenzwert](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) -Anweisung eine Klausel.  
  
   
  
## Examples  
 In diesem Beispiel wird fünf `Product` -Objekten auf, nachdem die ersten drei im Abfrageergebnis, sortiert nach `Product.ListPrice`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jedes Argument ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> ist eine leere Zeichenfolge.  
  
- oder -  
 <paramref name="count" /> ist eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator zurück, der die Ergebnisse der Abfrage durchläuft.</summary>
        <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" />-Objekt, mit dem die Ergebnisse durchlaufen werden können.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Aufrufen von <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> veranlasst die Ausführung der Abfrage.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">Die Anzahl der Elemente in den Ergebnissen als Zeichenfolge.</param>
        <param name="parameters">Ein optionaler Satz von Abfrageparametern, die sich beim Analysieren im Gültigkeitsbereich befinden sollten.</param>
        <summary>Beschränkt die Abfrageergebnisse auf eine bestimmte Anzahl von Elementen.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [TOP](~/docs/framework/data/adonet/ef/language-reference/top-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Abfrage nicht sortiert ist, ist <xref:System.Data.Objects.ObjectQuery%601.Top%2A> nicht deterministisch.  
  
 Bei Verwendung der <xref:System.Data.Objects.ObjectQuery%601.Top%2A> Methode nach der <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> -Methode entspricht der Funktionsweise der [Grenzwert](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) -Anweisung eine [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) Klausel.  
  
   
  
## Examples  
 Diese Beispiele beruhen auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 In diesem Beispiel wird eine neue <xref:System.Data.Objects.ObjectQuery%601> erstellt, die die ersten beiden Ergebnisse der bestehenden Abfrage enthält.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]  
  
 In diesem Beispiel wird fünf `Product` -Objekten auf, nachdem die ersten drei im Abfrageergebnis, sortiert nach `Product.ListPrice`. <xref:System.Data.Objects.ObjectQuery%601.Top%2A> statt des [Grenzwert](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) für das Paging.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="count" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="count" /> ist eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Eine <see cref="T:System.Data.Objects.ObjectQuery`1" />, die die hinzuzufügenden Ergebnisse darstellt.</param>
        <summary>Kombiniert die Ergebnisse der Abfrage mit den Ergebnissen einer anderen Objektabfrage ohne Duplikate.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [UNION](~/docs/framework/data/adonet/ef/language-reference/union-entity-sql.md) festgelegt ist, um die Ergebnisse der angegebenen <paramref name="query" /> hinzuzufügen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> Fügt die Ergebnisse des angegebenen `query` ohne Duplikate.  
  
 Die angegebene `query` , die die Ergebnisse, muss definiert werden vom selben Typ oder von einem Typ, der in den Typ dieses höher gestuft werden kann <xref:System.Data.Objects.ObjectQuery%601>. Beispielsweise ist Folgendes gültig da `DiscontinuedProducts` höher gestuft werden können, um `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Im folgenden werden eine Ausnahme ausgelöst, da `Products` nicht heraufgestuft werden, um `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Für eine <xref:System.Data.Objects.ObjectQuery%601> vom Typ <xref:System.Data.Common.DbDataRecord>, die Datensätze in beiden Abfragen müssen die gleiche Anzahl von Spalten und die Typen in den Spalten der der <xref:System.Data.Common.DbDataRecord> des übergebenen `query` muss zu den Datentypen der Spalten in der <xref:System.Data.Common.DbDataRecord> von der <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Definierten Parameter in der angegebenen `query` mit Parametern, die in definierten zusammengeführt werden die <xref:System.Data.Objects.ObjectQuery%601> Instanz. Parameter müssen in der kombinierten <xref:System.Data.Objects.ObjectParameterCollection> eindeutig sein. In der kombinierten Auflistung dürfen sich nicht zwei Parameter mit demselben Namen befinden. Weitere Informationen finden Sie unter [Abfrage-Generator-Methoden](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Die resultierende Abfrage erbt die Verbindung von der <xref:System.Data.Objects.ObjectQuery%601>-Instanz, für die <xref:System.Data.Objects.ObjectQuery%601.Union%2A> aufgerufen wurde.  
  
   
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In dem Beispiel wird die <xref:System.Data.Objects.ObjectQuery%601.Union%2A>-Methode verwendet, um ein neues <xref:System.Data.Objects.ObjectQuery%601>-Objekt zu erstellen.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="query" />-Parameter ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Eine <see cref="T:System.Data.Objects.ObjectQuery`1" />, die die hinzuzufügenden Ergebnisse darstellt.</param>
        <summary>Kombiniert die Ergebnisse der Abfrage mit den Ergebnissen einer anderen Objektabfrage einschließlich aller Duplikate.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [UNION ALL](~/docs/framework/data/adonet/ef/language-reference/union-entity-sql.md) festgelegt ist, um die Ergebnisse der angegebenen <paramref name="query" /> hinzuzufügen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> Fügt die Ergebnisse des angegebenen `query` einschließlich aller Duplikate.  
  
 Die angegebene `query` , die Ergebnisse, muss definiert werden vom selben Typ oder von einem Typ, der in den Typ dieses höher gestuft werden kann <xref:System.Data.Objects.ObjectQuery%601>. Beispielsweise ist Folgendes gültig da `DiscontinuedProducts` höher gestuft werden können, um `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Im folgenden werden eine Ausnahme ausgelöst, da `Products` nicht heraufgestuft werden, um `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Für eine <xref:System.Data.Objects.ObjectQuery%601> vom Typ <xref:System.Data.Common.DbDataRecord>, die Datensätze in beiden Abfragen müssen die gleiche Anzahl von Spalten und die Typen in den Spalten der der <xref:System.Data.Common.DbDataRecord> des übergebenen `query` muss zu den Datentypen der Spalten in der <xref:System.Data.Common.DbDataRecord> von der <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Definierten Parameter in der angegebenen `query` mit Parametern, die in definierten zusammengeführt werden die <xref:System.Data.Objects.ObjectQuery%601> Instanz. Parameter müssen in der kombinierten <xref:System.Data.Objects.ObjectParameterCollection> eindeutig sein. In der kombinierten Auflistung dürfen sich nicht zwei Parameter mit demselben Namen befinden. Weitere Informationen finden Sie unter [Abfrage-Generator-Methoden](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Die resultierende Abfrage erbt die Verbindung von der <xref:System.Data.Objects.ObjectQuery%601>-Instanz, für die <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> aufgerufen wurde.  
  
   
  
## Examples  
 Im Beispiel in diesem Thema basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In dem Beispiel wird die <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>-Methode zur Erstellung eines neuen <xref:System.Data.Objects.ObjectQuery%601>-Objekts verwendet. Anschließend wird die <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A>-Methode für das neue <xref:System.Data.Objects.ObjectQuery%601>-Objekt aufgerufen, um die eindeutigen Ergebnisse dieser Abfrage abzurufen.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="query" />-Parameter ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">Das Filterprädikat.</param>
        <param name="parameters">Null oder mehr Parameter, die in dieser Methode verwendet werden.</param>
        <summary>Beschränkt die Abfrage auf Ergebnisse, die bestimmten Filterkriterien entsprechen.</summary>
        <returns>Eine neue <see cref="T:System.Data.Objects.ObjectQuery`1" />-Instanz, die der ursprünglichen Instanz entspricht, für die jedoch [WHERE](~/docs/framework/data/adonet/ef/language-reference/where-entity-sql.md) festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 In diesem Beispiel basiert auf der [AdventureWorks Sales-Modell](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In diesem Beispiel wird eine neue <xref:System.Data.Objects.ObjectQuery%601> erstellt, die anhand folgender Kriterien gefilterte Ergebnisse der bestehenden Abfrage enthält: `"it.ProductID = 900"`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="parameters" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="predicate" /> ist eine leere Zeichenfolge.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Abfragen von Daten als Objekte (Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="StripLine" FullName="System.Web.UI.DataVisualization.Charting.StripLine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2c872d3d7acb8a3d39274ce76dea2311b47bd453" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36592486" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StripLine extends System.Web.UI.DataVisualization.Charting.ChartElement implements class System.Web.UI.DataVisualization.Charting.IChartMapArea" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.StripLine" />
  <TypeSignature Language="VB.NET" Value="Public Class StripLine&#xA;Inherits ChartElement&#xA;Implements IChartMapArea" />
  <TypeSignature Language="C++ CLI" Value="public ref class StripLine : System::Web::UI::DataVisualization::Charting::ChartElement, System::Web::UI::DataVisualization::Charting::IChartMapArea" />
  <TypeSignature Language="F#" Value="type StripLine = class&#xA;    inherit ChartElement&#xA;    interface IChartMapArea" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataVisualization.Charting.ChartElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.DataVisualization.Charting.IChartMapArea</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("IntervalOffset")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7b9ed-101">Stellt die Bereichsstreifen in einem Diagramm dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7b9ed-101">Represents the strip lines on a chart.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-102">Bereichsstreifen oder Streifen sind horizontale oder vertikale Bereiche, die den Hintergrund eines Diagramms in regelmäßigen oder benutzerdefinierten Abständen schattieren.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-102">Strip lines, or strips, are horizontal or vertical ranges that shade the background of a chart in regular or custom intervals.</span></span> <span data-ttu-id="7b9ed-103">Sie können mithilfe von Bereichsstreifen verwenden:</span><span class="sxs-lookup"><span data-stu-id="7b9ed-103">You can use strip lines to:</span></span>  
  
-   <span data-ttu-id="7b9ed-104">Verbessert die Lesbarkeit für das Suchen nach einzelnen Werten im Diagramm an.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-104">Improve readability for looking up individual values on the chart.</span></span>  
  
-   <span data-ttu-id="7b9ed-105">Verschiedenen Datenpunkte beim Lesen des Diagramms.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-105">Separate data points when reading the chart.</span></span>  
  
-   <span data-ttu-id="7b9ed-106">Termine hervorheben, die in regelmäßigen Abständen auftreten, z. B. um Wochenenddatenpunkte zu identifizieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-106">Highlight dates that occur at regular intervals, for example, to identify weekend data points.</span></span>  
  
-   <span data-ttu-id="7b9ed-107">Markieren Sie einen bestimmten Schlüsselbereich Datenmenge.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-107">Highlight a specific key range of data.</span></span>  
  
-   <span data-ttu-id="7b9ed-108">Fügen Sie einen Schwellenwert-Zeile auf einen bestimmten Konstanten Wert hinzu.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-108">Add a threshold line at a specific constant value.</span></span>  
  
 <span data-ttu-id="7b9ed-109">Ein einzelnes <xref:System.Web.UI.DataVisualization.Charting.StripLine> Objekt entweder gezeichnet werden können einmal oder wiederholt für ein angegebenes Zeitintervall.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-109">A single <xref:System.Web.UI.DataVisualization.Charting.StripLine> object can either be drawn once, or repeatedly, for a given interval.</span></span> <span data-ttu-id="7b9ed-110">Diese Aktion wird gesteuert, indem die <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-110">This action is controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property.</span></span> <span data-ttu-id="7b9ed-111">Wenn der Wert-1 zugewiesen wird, um die <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> -Eigenschaft, die einen Bereichsstreifen Linie gezeichnet wird.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-111">When a value of -1 is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, one strip line will be drawn.</span></span> <span data-ttu-id="7b9ed-112">Wenn ein Wert ungleich NULL zugewiesen wird, um die <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> -Eigenschaft, bei jedem angegebenen Intervall wiederholt ein Bereichsstreifen gezeichnet werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-112">When a non-zero value is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, a strip line will be drawn repeatedly at each given interval.</span></span> <span data-ttu-id="7b9ed-113">Außerdem wird der Speicherort, in ein Bereichsstreifen gezeichnet wird, durch beeinflusst die <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> Eigenschaften des Bereichsstreifens.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-113">The location where a strip line is drawn is also affected by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> properties of the strip line.</span></span>  
  
 <span data-ttu-id="7b9ed-114">Bereichsstreifen sind immer zugeordnet ein <xref:System.Web.UI.DataVisualization.Charting.Axis> Objekt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-114">Strip lines are always associated with an <xref:System.Web.UI.DataVisualization.Charting.Axis> object.</span></span> <span data-ttu-id="7b9ed-115">Sie können zur Entwurfszeit und zur Laufzeit hinzugefügt werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-115">They can be added at both design time and run time.</span></span>  
  
 <span data-ttu-id="7b9ed-116">Zum Hinzufügen einer horizontalen oder vertikalen Zeile um einen Schwellenwert anzuzeigen, legen die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert von 0,0.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-116">To add a horizontal or vertical line to display a threshold, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value of 0.0.</span></span> <span data-ttu-id="7b9ed-117">Dies führt in eine Linie gezeichnet werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-117">This will result in a line being drawn.</span></span> <span data-ttu-id="7b9ed-118">Sie können die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> Eigenschaften für die Farbe, Breite und Art der Linie.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-118">You can use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties for the color, width and style of the line.</span></span> <span data-ttu-id="7b9ed-119">Diagrammhintergrund-Eigenschaften (`Back*`) werden verwendet, wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-119">No chart background properties (`Back*`) are used when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0.</span></span>  
  
 <span data-ttu-id="7b9ed-120">Verwenden der <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> Eigenschaft des Bereichsstreifens einen Bereichsstreifen Text zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-120">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> property of the strip line to associate text with a strip line.</span></span> <span data-ttu-id="7b9ed-121">Die Platzierung und die Ausrichtung des dieser Text können gesteuert werden, indem die <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-121">The placement and orientation of this text can be controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> property.</span></span>  
  
 <span data-ttu-id="7b9ed-122">Wenn mehrere Bereichsstreifen für die gleiche Achse definiert sind, ist es möglich, dass die Bereichsstreifen überschneiden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-122">When multiple strip lines are defined for the same axis, it is possible that the strip lines will overlap.</span></span> <span data-ttu-id="7b9ed-123">Die Z-Reihenfolge der <xref:System.Web.UI.DataVisualization.Charting.StripLine> Objekte richtet sich nach ihrer Reihenfolge des Vorkommens in der <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> Objekt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-123">The Z-order of <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects is determined by their order of occurrence in the <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> object.</span></span> <span data-ttu-id="7b9ed-124">Dies bedeutet, dass das erste Vorkommen zuerst gezeichnet wird; Das zweite Vorkommen wird gezeichnet, zweites, und so weiter.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-124">This means that the first occurrence is drawn first; the second occurrence is drawn second, and so on.</span></span>  
  
 <span data-ttu-id="7b9ed-125">Bereichsstreifen können nicht für die folgenden Diagrammtypen: Kreis-, Ring-, Trichter-, Pyramidendiagramme, Kagi, ThreeLineBreak, PointAndFigure, Polar und Netz.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-125">Strip lines are not supported for the following chart types: Pie, Doughnut, Funnel, Pyramid, Kagi, ThreeLineBreak, PointAndFigure, Polar and Radar.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-126">Im folgenden Codebeispiel wird veranschaulicht, drei Bereichsstreifen-Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-126">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="7b9ed-127">Erste, horizontaler Bereichsstreifen werden in regelmäßigen Abständen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-127">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="7b9ed-128">Zweitens vertikaler Bereichsstreifen werden hinzugefügt, um Wochenenddatenpunkte zu markieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-128">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="7b9ed-129">Schließlich wird ein Bereichsstreifen ohne Wiederholung hinzugefügt, um den Mittelwert der Datenpunkte in der ersten Reihe des Diagramms zu kennzeichnen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-129">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ' Adds a week of data with values between 20 and 35.   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ' Adds repeating horizontal strip lines at intervals of 5.   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()  
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ' Adds strip lines to highlight weekend values.   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ' Adds a horizontal threshold strip line at the mean value of the first series.  
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StripLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StripLine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StripLine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-130">Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-130">Initializes a new instance of the <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-131">Ruft die Hintergrundfarbe des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-131">Gets or sets the background color of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-132">Eine <see cref="T:System.Drawing.Color" />-Struktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-132">A <see cref="T:System.Drawing.Color" /> structure.</span>
          </span>
          <span data-ttu-id="7b9ed-133">Die Standardfarbe ist <see cref="P:System.Drawing.Color.White" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-133">The default color is <see cref="P:System.Drawing.Color.White" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-134">Sie können diese Eigenschaft auf einen beliebigen gültigen ARGB (Alpha, Rot, Grün, Blau) Wert festlegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-134">You can set this property to any valid ARGB (alpha, red, green, blue) value.</span></span>  
  
 <span data-ttu-id="7b9ed-135">Um einen Farbverlauf für den Bereichsstreifen festzulegen, müssen die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-135">To set a gradient for the strip line, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.</span></span>  
  
 <span data-ttu-id="7b9ed-136">Wenn Sie diese Farbe auf "transparent" festlegen – das heißt, den alpha-Wert auf 0 festgelegt – dem Hintergrund des Elements wird keine Farbe zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-136">If you set this color to "transparent"—in other words, set the alpha value to 0—no color will be assigned to the background of the element.</span></span> <span data-ttu-id="7b9ed-137">Daher wird der Hintergrund transparent sein.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-137">As a result, the background will be transparent.</span></span>  
  
 <span data-ttu-id="7b9ed-138">Wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf 0,0 festgelegt ist, wird eine Linie gezeichnet werden und die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Eigenschaft bestimmt die Farbe der Linie, nicht für diese Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-138">If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-139">Im folgenden Codebeispiel wird veranschaulicht, drei Bereichsstreifen-Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-139">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="7b9ed-140">Erste, horizontaler Bereichsstreifen werden in regelmäßigen Abständen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-140">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="7b9ed-141">Zweitens vertikaler Bereichsstreifen werden hinzugefügt, um Wochenenddatenpunkte zu markieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-141">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="7b9ed-142">Schließlich wird ein Bereichsstreifen ohne Wiederholung hinzugefügt, um den Mittelwert der Datenpunkte in der ersten Reihe des Diagramms zu kennzeichnen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-142">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackGradientStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BackGradientStyle As GradientStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::GradientStyle BackGradientStyle { System::Web::UI::DataVisualization::Charting::GradientStyle get(); void set(System::Web::UI::DataVisualization::Charting::GradientStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BackGradientStyle : System.Web.UI.DataVisualization.Charting.GradientStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.GradientEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.GradientStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-143">Ruft die Art des Farbverlaufs des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-143">Gets or sets the gradient style of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-144">Eine <see cref="T:System.Web.UI.DataVisualization.Charting.GradientStyle" />-Enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-144">A <see cref="T:System.Web.UI.DataVisualization.Charting.GradientStyle" /> enumeration.</span>
          </span>
          <span data-ttu-id="7b9ed-145">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.GradientStyle.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-145">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.GradientStyle.None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-146">Die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> Eigenschaft bestimmt, ob ein Diagrammelement einen Farbverlauf sowie die Ausrichtung des Verlaufs, angezeigt wird verwendet.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-146">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.</span></span>  
  
 <span data-ttu-id="7b9ed-147">So verwenden Sie Verlaufsfarben:</span><span class="sxs-lookup"><span data-stu-id="7b9ed-147">To use gradient colors:</span></span>  
  
-   <span data-ttu-id="7b9ed-148">Verwenden der <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Eigenschaft, um die primäre Farbe festzulegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-148">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.</span></span>  
  
-   <span data-ttu-id="7b9ed-149">Verwenden der <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> Eigenschaft, um die sekundäre Farbe festzulegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-149">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.</span></span>  
  
-   <span data-ttu-id="7b9ed-150">Legen Sie diese <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> Eigenschaft das Diagrammelement zu der gewünschten Art des Farbverlaufs.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-150">Set this <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property of the chart element to the desired gradient style.</span></span>  
  
 <span data-ttu-id="7b9ed-151">Diese Eigenschaft gilt nicht wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert von 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-151">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackHatchStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BackHatchStyle As ChartHatchStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartHatchStyle BackHatchStyle { System::Web::UI::DataVisualization::Charting::ChartHatchStyle get(); void set(System::Web::UI::DataVisualization::Charting::ChartHatchStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BackHatchStyle : System.Web.UI.DataVisualization.Charting.ChartHatchStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.HatchStyleEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartHatchStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-152">Ruft die Schraffurart des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-152">Gets or sets the hatching style of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-153">Eine <see cref="T:System.Web.UI.DataVisualization.Charting.ChartHatchStyle" />-Enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-153">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartHatchStyle" /> enumeration.</span>
          </span>
          <span data-ttu-id="7b9ed-154">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.ChartHatchStyle.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-154">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.ChartHatchStyle.None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-155">Die Schraffur besteht aus einer Hintergrundfarbe und über dem Hintergrund gezeichneten Linien verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-155">The hatch pattern consists of a solid background color and lines drawn over the background.</span></span> <span data-ttu-id="7b9ed-156">Die zwei Farben in die Schraffurart werden durch Festlegen der <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-156">The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.</span></span> <span data-ttu-id="7b9ed-157">Diese Eigenschaft gilt nicht wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert von 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-157">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImage">
      <MemberSignature Language="C#" Value="public string BackImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImage" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BackImage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackImage : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ImageValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-158">Ruft das Hintergrundbild des Bereichsstreifens ab oder legt dieses fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-158">Gets or sets the background image of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-159">Ein <see langword="string" />-Wert, der eine Bilddatei-URL darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-159">A <see langword="string" /> value that represents an image file URL.</span>
          </span>
          <span data-ttu-id="7b9ed-160">Der Standardwert ist eine leere Zeichenfolge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-160">The default is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-161">Die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImage%2A> Eigenschaft definiert einen Pfad zu einem Hintergrundbild für viele Diagrammelemente und ist eine absolute oder relative URL.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-161">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImage%2A> property defines a path to a background image for many chart elements, and is an absolute or relative URL.</span></span>  
  
 <span data-ttu-id="7b9ed-162">Um dieses Image zu positionieren, verwenden die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-162">To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties.</span></span>  
  
 <span data-ttu-id="7b9ed-163">Sie können auch angeben, dass eine Farbe durch Festlegen von dem Abbild als "transparent" angezeigt, die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-163">You can also specify that one color will be displayed by the image as "transparent" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property.</span></span>  
  
 <span data-ttu-id="7b9ed-164">Ein Bild kann eine beliebige gültige Grafikdatei unterstützt von .NET Framework, einschließlich der Symbole darstellen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-164">An image can be any valid graphics file supported by .NET Framework, including icons.</span></span>  
  
 <span data-ttu-id="7b9ed-165">Diese Eigenschaft gilt nicht wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert von 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-165">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 <span data-ttu-id="7b9ed-166">Hintergrundbilder haben Vorrang vor anderen Hintergrundeigenschaften, z. B. Verlaufsfarben.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-166">Background images take precedence over other background properties, such as gradient colors.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageAlignment">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageAlignment As ChartImageAlignmentStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartImageAlignmentStyle BackImageAlignment { System::Web::UI::DataVisualization::Charting::ChartImageAlignmentStyle get(); void set(System::Web::UI::DataVisualization::Charting::ChartImageAlignmentStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageAlignment : System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-167">Ruft die Hintergrundbildausrichtung ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-167">Gets or sets the background image alignment.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-168">Ein <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle" />-Enumerationswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-168">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value.</span>
          </span>
          <span data-ttu-id="7b9ed-169">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-169">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-170">Diese Eigenschaft bestimmt die Ausrichtung des Hintergrundbilds für Bereichsstreifen; Es wird nur angewendet, wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> -Eigenschaftensatz auf <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-170">This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>.</span></span>  
  
 <span data-ttu-id="7b9ed-171">Weitere Informationen zu verfügbaren Ausrichtungen, finden Sie unter der <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> Enumerationsthema.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-171">For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageTransparentColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackImageTransparentColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackImageTransparentColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageTransparentColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackImageTransparentColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageTransparentColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-172">Ruft die Farbe für das Hintergrundbild eines Bereichsstreifens ab, das als transparent implementiert wird, oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-172">Gets or sets the color of a strip line background image that will be implemented as transparent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-173">Ein <see cref="T:System.Drawing.Color" />-Wert, der transparent angezeigt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-173">A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-174">Diese Eigenschaft gilt nicht wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert von 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-174">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageWrapMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageWrapMode As ChartImageWrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartImageWrapMode BackImageWrapMode { System::Web::UI::DataVisualization::Charting::ChartImageWrapMode get(); void set(System::Web::UI::DataVisualization::Charting::ChartImageWrapMode value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageWrapMode : System.Web.UI.DataVisualization.Charting.ChartImageWrapMode with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartImageWrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-175">Ruft den Zeichnungsmodus für das Hintergrundbild des Bereichsstreifens ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-175">Gets or sets the drawing mode of the background image of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-176">Eine <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode" />-Ganzzahlenumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-176">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode" /> integer enumeration.</span>
          </span>
          <span data-ttu-id="7b9ed-177">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-177">The default is <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-178">Diese Eigenschaft bestimmt, wie das Bild angezeigt wird. d. h. gekachelt, skalierte usw.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-178">This property determines how the image is displayed; that is, tiled, scaled, and so forth.</span></span>  
  
 <span data-ttu-id="7b9ed-179">Wenn ein Bild skaliert wird, wird es gestreckt werden innerhalb der umschließenden Bereichsstreifen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-179">If an image is scaled, it will be stretched to fit within the bounding strip line.</span></span> <span data-ttu-id="7b9ed-180">Wenn das Bild wird gekachelt, ist, wird es wiederholt gezeichnet, beginnend mit der linken oberen Ecke.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-180">If the image is tiled, it is repeatedly drawn, starting from the top-left corner.</span></span>  
  
 <span data-ttu-id="7b9ed-181">Weitere Informationen über die verfügbaren Wrapping Modi finden Sie unter der <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> Enumerationsthema.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-181">For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic.</span></span>  
  
 <span data-ttu-id="7b9ed-182">Wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> -Eigenschaftensatz auf <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>, der Speicherort, in dem das Bild gezeichnet wird, gemäß der <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> Einstellung der Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-182">If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting.</span></span>  
  
 <span data-ttu-id="7b9ed-183">Diese Eigenschaft gilt nicht wenn <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> auf einen Wert von 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-183">This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackSecondaryColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackSecondaryColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackSecondaryColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackSecondaryColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackSecondaryColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackSecondaryColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-184">Ruft die sekundäre Farbe des Bereichsstreifenhintergrunds ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-184">Gets or sets the secondary color of the strip line background.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-185">Ein <see cref="T:System.Drawing.Color" />-Wert, der für die sekundäre Farbe eines Hintergrunds mit Schraffur- oder Farbverlauffüllung verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-185">A <see cref="T:System.Drawing.Color" /> value used for the secondary color of a background with hatching or gradient fill.</span>
          </span>
          <span data-ttu-id="7b9ed-186">Die Standardfarbe ist <see cref="F:System.Drawing.Color.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-186">The default color is <see cref="F:System.Drawing.Color.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-187">Diese Eigenschaft bestimmt die sekundäre Hintergrundfarbe vieler Diagrammobjekte und wird verwendet, wenn Farbverlauf übernommen werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-187">This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.</span></span>  
  
 <span data-ttu-id="7b9ed-188">Sie können die sekundäre Hintergrundfarbe auf einen beliebigen gültigen ARGB (Alpha, Rot, Grün, Blau) Wert festlegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-188">You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.</span></span>  
  
 <span data-ttu-id="7b9ed-189">Wenn Schraffuren verwendet wird, die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> Eigenschaft bestimmt die Farbe der Linien Schraffurmuster.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-189">If hatching is used, the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property determines the color of the hatching lines.</span></span>  
  
 <span data-ttu-id="7b9ed-190">So verwenden Sie den Farbverlauf für den Hintergrund eines Diagrammelements:</span><span class="sxs-lookup"><span data-stu-id="7b9ed-190">To use gradient colors for the background of a chart element:</span></span>  
  
-   <span data-ttu-id="7b9ed-191">Verwenden der <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Eigenschaft, um die primäre Farbe festzulegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-191">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.</span></span>  
  
-   <span data-ttu-id="7b9ed-192">Verwenden Sie diese <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> Eigenschaft, um die sekundäre Farbe festzulegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-192">Use this <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.</span></span>  
  
-   <span data-ttu-id="7b9ed-193">Legen Sie die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> Eigenschaft, um die gewünschte Art des Farbverlaufs.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-193">Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style.</span></span>  
  
 <span data-ttu-id="7b9ed-194">Diese Eigenschaft gilt nicht wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert von 0,0 festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-194">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BorderColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BorderColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-195">Ruft die Rahmenfarbe eines Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-195">Gets or sets the border color of a strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-196">Ein <see cref="T:System.Drawing.Color" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-196">A <see cref="T:System.Drawing.Color" /> value.</span>
          </span>
          <span data-ttu-id="7b9ed-197">Die Standardfarbe ist <see cref="F:System.Drawing.Color.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-197">The default color is <see cref="F:System.Drawing.Color.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-198">Sie können diese Eigenschaft auf einen beliebigen gültigen ARGB (Alpha, Rot, Grün, Blau) Wert festlegen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-198">You can set this property to any valid ARGB (alpha, red, green, blue) value.</span></span>  
  
 <span data-ttu-id="7b9ed-199">Wenn die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft eine <xref:System.Web.UI.DataVisualization.Charting.StripLine> Objekt auf 0,0 festgelegt ist, wird eine Linie gezeichnet werden und diese Eigenschaft ist und nicht die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Eigenschaft festlegen, bestimmt die Farbe der Linie.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-199">If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderDashStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartDashStyle BorderDashStyle { System::Web::UI::DataVisualization::Charting::ChartDashStyle get(); void set(System::Web::UI::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderDashStyle : System.Web.UI.DataVisualization.Charting.ChartDashStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-200">Ruft die Rahmenart des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-200">Gets or sets the border style of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-201">Ein <see cref="T:System.Web.UI.DataVisualization.Charting.ChartDashStyle" />-Enumerationswert, der die Rahmenart des Bereichsstreifens bestimmt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-201">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-202">Diese Eigenschaft gibt die Linienart für einen Rahmen verwendet.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-202">This property specifies the line style used for a border.</span></span> <span data-ttu-id="7b9ed-203">Die Zeile kann durchgezogen, gepunktet oder eine Variation von ausgefüllt und gepunktet.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-203">The line can be solid, dotted or some variation of solid and dotted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public int BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderWidth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BorderWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BorderWidth : int with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-204">Ruft die Rahmenbreite des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-204">Gets or sets the border width of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-205">Ein <see langword="integer" />-Wert, der die Rahmenbreite in Pixel des Bereichsstreifens bestimmt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-205">An <see langword="integer" /> value that determines the width of the strip line's border, in pixels.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-206">Diese Eigenschaft wird in Pixel gemessen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-206">This property is measured in pixels.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="stripLine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="7b9ed-207">
            <see langword="True" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="False" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-207">
              <see langword="True" /> to release both managed and unmanaged resources; <see langword="False" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b9ed-208">Gibt die von <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-208">Releases the unmanaged resources used by the <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Font" />
      <MemberSignature Language="VB.NET" Value="Public Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Font), "Microsoft Sans Serif, 8pt")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-209">Ruft die für den Bereichsstreifentext verwendete Schriftart ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-209">Gets or sets the font used for the strip line text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-210">Ein <see cref="T:System.Drawing.Font" />-Wert, der die Schriftart des Bereichsstreifentexts darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-210">A <see cref="T:System.Drawing.Font" /> value that represents the font of the strip line text.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-211">Ruft die Farbe des Bereichsstreifentexts ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-211">Gets or sets the color of the strip line text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-212">Ein <see cref="T:System.Drawing.Color" />-Wert, der die Textfarbe eines Bereichsstreifens darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-212">A <see cref="T:System.Drawing.Color" /> value that represents the text color of a strip line.</span>
          </span>
          <span data-ttu-id="7b9ed-213">Der Standardwert ist <see cref="P:System.Drawing.Color.Black" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-213">The default value is <see cref="P:System.Drawing.Color.Black" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-214">Sie können eine beliebige gültige ARGB-Farbe für diese Eigenschaft angeben.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-214">You can specify any valid ARGB color for this property.</span></span> <span data-ttu-id="7b9ed-215">Diese Eigenschaft gilt nur, wenn ein Textwert für den Bereichsstreifen angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-215">This property is only applicable when a text value is specified for the strip line.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-216">Ruft das Intervall für einen Bereichsstreifen ab oder legt dieses fest und bestimmt, ob der Bereichsstreifen einmal oder mehrmals gezeichnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-216">Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-217">Ein <see langword="double" />-Wert, der das Intervall zwischen Bereichsstreifen darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-217">A <see langword="double" /> value that represents the interval between strip lines.</span>
          </span>
          <span data-ttu-id="7b9ed-218">Der Standardwert ist 0,0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-218">The default value is 0.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-219">Beim Festlegen der <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Eigenschaft, um den Wert NULL (0,0), einen Bereichsstreifen werden angezeigt, mit der angegebenen Breite der <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-219">When you set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property.</span></span> <span data-ttu-id="7b9ed-220">Bei Festlegung <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> auf einen anderen Wert als 0 (null), mehrere Bereichsstreifen angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-220">When you set <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> to a value of other than zero, multiple strip lines will be shown.</span></span> <span data-ttu-id="7b9ed-221">Die Einheit für die verwendeten die <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Eigenschaft wird definiert, indem die <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-221">The unit that is used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-222">Im folgenden Codebeispiel wird veranschaulicht, drei Bereichsstreifen-Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-222">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="7b9ed-223">Erste, horizontaler Bereichsstreifen werden in regelmäßigen Abständen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-223">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="7b9ed-224">Zweitens vertikaler Bereichsstreifen werden hinzugefügt, um Wochenenddatenpunkte zu markieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-224">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="7b9ed-225">Schließlich wird ein Bereichsstreifen ohne Wiederholung hinzugefügt, um den Mittelwert der Datenpunkte in der ersten Reihe des Diagramms zu kennzeichnen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-225">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double IntervalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffset : double with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataVisualization.Charting.AxisLabelDateValueConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-226">Ruft den Offset von Rasterlinien, Teilstrichen, Bereichsstreifen und Achsenbezeichnungen ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-226">Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-227">Ein <see langword="double" />-Wert, der den Intervalloffset darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-227">A <see langword="double" /> value that represents the interval offset.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-228">Der Intervalloffset Hilfsteilstriche und Rasterlinien ist nie den Wert des betroffen der <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> Eigenschaft von der <xref:System.Web.UI.DataVisualization.Charting.Axis> Objekt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-228">The interval offset of minor tick marks and grid lines is never affected by the value of the <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> property of the <xref:System.Web.UI.DataVisualization.Charting.Axis> object.</span></span>  
  
 <span data-ttu-id="7b9ed-229">Die <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> Einstellung der Eigenschaft definiert die Maßeinheiten für den Offset.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-229">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> property setting defines the units of measurement of the offset.</span></span>  
  
 <span data-ttu-id="7b9ed-230">Die <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> kann kein negativer Wert sein.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-230">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> can be a negative value.</span></span>  
  
 <span data-ttu-id="7b9ed-231">Der Standardwert ist `Auto` (`0`).</span><span class="sxs-lookup"><span data-stu-id="7b9ed-231">The default value is `Auto` (`0`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-232">Im folgenden Codebeispiel wird veranschaulicht, drei Bereichsstreifen-Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-232">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="7b9ed-233">Erste, horizontaler Bereichsstreifen werden in regelmäßigen Abständen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-233">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="7b9ed-234">Zweitens vertikaler Bereichsstreifen werden hinzugefügt, um Wochenenddatenpunkte zu markieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-234">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="7b9ed-235">Schließlich wird ein Bereichsstreifen ohne Wiederholung hinzugefügt, um den Mittelwert der Datenpunkte in der ersten Reihe des Diagramms zu kennzeichnen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-235">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffsetType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::DateTimeIntervalType IntervalOffsetType { System::Web::UI::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Web::UI::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffsetType : System.Web.UI.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-236">Ruft den Intervalloffsettyp des Bereichsstreifens ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-236">Gets or sets the interval offset type of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-237">Ein <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" />-Enumerationswert, der den Intervalltyp angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-237">A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type.</span>
          </span>
          <span data-ttu-id="7b9ed-238">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-238">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-239">Standardmäßig ist diese Eigenschaft auf festgelegt <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>; der tatsächliche Wert dieser Eigenschaft richtet sich nach der <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-239">By default, this property is set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>; the actual value of this property is determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-240">Im folgenden Codebeispiel wird veranschaulicht, drei Bereichsstreifen-Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-240">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="7b9ed-241">Erste, horizontaler Bereichsstreifen werden in regelmäßigen Abständen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-241">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="7b9ed-242">Zweitens vertikaler Bereichsstreifen werden hinzugefügt, um Wochenenddatenpunkte zu markieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-242">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="7b9ed-243">Schließlich wird ein Bereichsstreifen ohne Wiederholung hinzugefügt, um den Mittelwert der Datenpunkte in der ersten Reihe des Diagramms zu kennzeichnen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-243">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::DateTimeIntervalType IntervalType { System::Web::UI::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Web::UI::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalType : System.Web.UI.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-244">Ruft den Intervalltyp eines <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" />-Objekts ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-244">Gets or sets the interval type of a <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-245">Ein <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" />-Enumerationswert, der den Intervalltyp angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-245">A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type.</span>
          </span>
          <span data-ttu-id="7b9ed-246">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-246">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-247">Intervalltypen festgelegt werden können, um <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>, in diesem Fall der Typ anhängt: die X-Wert oder Y-Wert-Typen der gezeichneten <xref:System.Web.UI.DataVisualization.Charting.DataPoint> Objekte – abhängig von der Achse der <xref:System.Web.UI.DataVisualization.Charting.StripLine> Objekte zu gehören – und die Achsenskalierung.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-247">Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale.</span></span>  
  
 <span data-ttu-id="7b9ed-248">Die <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Eigenschaft bestimmt, wie oft eine Leiste oder Linie gezeichnet wird.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-248">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-249">Im folgenden Codebeispiel wird veranschaulicht, drei Bereichsstreifen-Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-249">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="7b9ed-250">Erste, horizontaler Bereichsstreifen werden in regelmäßigen Abständen hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-250">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="7b9ed-251">Zweitens vertikaler Bereichsstreifen werden hinzugefügt, um Wochenenddatenpunkte zu markieren verweist.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-251">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="7b9ed-252">Schließlich wird ein Bereichsstreifen ohne Wiederholung hinzugefügt, um den Mittelwert der Datenpunkte in der ersten Reihe des Diagramms zu kennzeichnen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-252">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapAreaAttributes">
      <MemberSignature Language="C#" Value="public string MapAreaAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MapAreaAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property MapAreaAttributes As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MapAreaAttributes { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MapAreaAttributes : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.MapAreaAttributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-253">Ruft die Zuordnungsbereichsattribute des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-253">Gets or sets the map area attributes of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-254">Ein <see langword="string" />-Wert, der die Attribute des entsprechenden Zuordnungsbereichs des Diagrammelements darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-254">A <see langword="string" /> value that represents the attributes of the chart element's corresponding map area.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("StripLine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-255">Ruft den Namen des Bereichsstreifens ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-255">Gets the name of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-256">Ein <see langword="string" />-Wert, der den Namen des Bereichsstreifens darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-256">A <see langword="string" /> value that represents the name of the strip line.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostBackValue">
      <MemberSignature Language="C#" Value="public string PostBackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue" />
      <MemberSignature Language="VB.NET" Value="Public Property PostBackValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PostBackValue { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PostBackValue : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.PostBackValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-257">Ruft den Postbackwert ab, der in einem <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" />-Ereignis verarbeitet werden kann, oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-257">Gets or sets the postback value that can be processed on a <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-258">Ein string-Wert, der den an ein <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" />-Ereignis übergebenen Postbackwert darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-258">A string value that represents the postback value that is passed to a <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> event.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StripWidth">
      <MemberSignature Language="C#" Value="public double StripWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StripWidth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property StripWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double StripWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.StripWidth : double with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-259">Ruft die Breite eines Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-259">Gets or sets the width of a strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-260">Ein <see langword="double" />-Wert, der bestimmt, ob ein Streifen oder eine Linie gezeichnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-260">A <see langword="double" /> value that determines whether a strip or a line is drawn.</span>
          </span>
          <span data-ttu-id="7b9ed-261">Der Standardwert ist 0,0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-261">The default value is 0.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-262">Diese Eigenschaft kann nicht auf einen Wert kleiner als 0,0 festgelegt werden, andernfalls wird eine Ausnahme ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-262">This property cannot be set to a value less than 0.0, otherwise an exception will be raised.</span></span>  
  
 <span data-ttu-id="7b9ed-263">Eine Einstellung von 0,0 führt eine Linie gezeichnet werden; Verwenden Sie diese Zeile wird der <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> eigenschafteneinstellungen für die Farbe, Breite und Stil.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-263">A setting of 0.0 will result in a line being drawn; this line will use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> property settings for its color, width and style.</span></span> <span data-ttu-id="7b9ed-264">Keines der `Back*` Eigenschaften in dieser Klasse werden verwendet, wenn der Wert des <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> ist "0,0".</span><span class="sxs-lookup"><span data-stu-id="7b9ed-264">None of the `Back*` properties in this class are utilized when the value of <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is 0.0.</span></span>  
  
 <span data-ttu-id="7b9ed-265">Wenn Sie festlegen, die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft auf einen Wert größer als 0,0 Farbstreifen erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-265">If you set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value greater than 0.0, a strip will be created.</span></span> <span data-ttu-id="7b9ed-266">Die <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> und <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> Eigenschaften gelten nur für den Rahmen des Bereichsstreifens; alle die `Back*` Eigenschaften werden dann verwendet, für die Hintergrundeigenschaften im die Menüleiste aus.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-266">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties only apply to the border of the strip; all of the `Back*` properties are then used for the background properties of the strip.</span></span>  
  
 <span data-ttu-id="7b9ed-267">Wenn der Wert der <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft größer als 0,0 ist, werden die Einheiten von der relevanten Achsenskala bestimmt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-267">If the value of the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is greater than 0.0, the units are determined by the relevant axis scale.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripWidthType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType" />
      <MemberSignature Language="VB.NET" Value="Public Property StripWidthType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::DateTimeIntervalType StripWidthType { System::Web::UI::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Web::UI::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.StripWidthType : System.Web.UI.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-268">Ruft die Maßeinheit für die <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" />-Eigenschaft ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-268">Gets or sets the unit of measurement for the <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-269">Ein <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" />-Enumerationswert, der den Typ der Breite angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-269">A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the width type.</span>
          </span>
          <span data-ttu-id="7b9ed-270">Der Standardwert ist <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-270">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-271">Diese Eigenschaft bestimmt die Einheiten für die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-271">This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property.</span></span> <span data-ttu-id="7b9ed-272">Z. B. um einen Bereichsstreifen zur Darstellung von "eine Woche" festgelegt, Sie diese Eigenschaft auf festlegen <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Weeks> und legen Sie die <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> -Eigenschaft auf einen (1.0).</span><span class="sxs-lookup"><span data-stu-id="7b9ed-272">For example, to set a strip line to represent "one week", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Weeks> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0).</span></span>  
  
 <span data-ttu-id="7b9ed-273">Können Sie den Wert dieser Eigenschaft von ändern <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto> auf eine <xref:System.DateTime> Wert, wenn die relevante Achsenskalierung verwendet eine <xref:System.DateTime> Wert.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-273">You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-274">Ruft den Text für den Bereichsstreifen ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-274">Gets or sets the text for the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-275">Ein <see langword="string" />-Wert, der den Text eines Bereichsstreifens darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-275">A <see langword="string" /> value that represents the text of a strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-276">Verwenden Sie diese Eigenschaft, um einen Bereichsstreifen Text hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-276">Use this property to add text to a strip line.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-277">Im folgenden Codebeispiel wird veranschaulicht, wie eine Schwellenwert Zeile hinzufügen, nachdem das Diagrammsteuerelement, die der Entwurfsoberfläche hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-277">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="7b9ed-278">Das Diagramm verwendet einen Bereichsstreifen ohne Wiederholung, um eine Berechnung des Mittelwerts aller Datenpunkte in einer Reihe anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-278">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlignment As StringAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringAlignment TextAlignment { System::Drawing::StringAlignment get(); void set(System::Drawing::StringAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlignment : System.Drawing.StringAlignment with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Far")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-279">Ruft die Textausrichtung des Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-279">Gets or sets the text alignment of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-280">Ein <see cref="T:System.Drawing.StringAlignment" />-Wert, der die Ausrichtung des Bereichsstreifentexts darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-280">A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the strip line text.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7b9ed-281">Im folgenden Codebeispiel wird veranschaulicht, wie eine Schwellenwert Zeile hinzufügen, nachdem das Diagrammsteuerelement, die der Entwurfsoberfläche hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-281">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="7b9ed-282">Das Diagramm verwendet einen Bereichsstreifen ohne Wiederholung, um eine Berechnung des Mittelwerts aller Datenpunkte in einer Reihe anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-282">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextLineAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextLineAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLineAlignment As StringAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringAlignment TextLineAlignment { System::Drawing::StringAlignment get(); void set(System::Drawing::StringAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextLineAlignment : System.Drawing.StringAlignment with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Near")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-283">Ruft die Textzeilenausrichtung von Bereichsstreifentext ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-283">Gets or sets the text line alignment of strip line text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-284">Ein <see cref="T:System.Drawing.StringAlignment" />-Wert, der die Ausrichtung der Textzeile darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-284">A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the text line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7b9ed-285">Im folgenden Codebeispiel wird veranschaulicht, wie eine Schwellenwert Zeile hinzufügen, nachdem das Diagrammsteuerelement, die der Entwurfsoberfläche hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-285">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="7b9ed-286">Das Diagramm verwendet einen Bereichsstreifen ohne Wiederholung, um eine Berechnung des Mittelwerts aller Datenpunkte in einer Reihe anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-286">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOrientation">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOrientation As TextOrientation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::TextOrientation TextOrientation { System::Web::UI::DataVisualization::Charting::TextOrientation get(); void set(System::Web::UI::DataVisualization::Charting::TextOrientation value); };" />
      <MemberSignature Language="F#" Value="member this.TextOrientation : System.Web.UI.DataVisualization.Charting.TextOrientation with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TextOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-287">Ruft die Textausrichtung ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-287">Gets or sets the text orientation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-288">Ein <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" />-Wert, der die Textausrichtung darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-288">A <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" /> value that represents the alignment of the text orientation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-289">Wenn diese Eigenschaft festgelegt ist, auf den Wert <xref:System.Web.UI.DataVisualization.Charting.TextOrientation.Auto>, der Text wird basierend auf dem Diagrammtyp ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-289">When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation.Auto>, the text is oriented based on the chart type.</span></span> <span data-ttu-id="7b9ed-290">Für alle X-Y Diagrammtypen außer Balken-, Bereichsstreifen für die X-Achse ist der Text horizontal von links nach rechts im unteren Bereich des Bereichsstreifens ausgerichtet.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-290">For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line.</span></span> <span data-ttu-id="7b9ed-291">Bei Balkendiagrammen ist X-Achse Bereichsstreifen Zeilentext ausgerichteten vertikal von oben nach unten rechts des Bereichsstreifens.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-291">For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b9ed-292">Im folgenden Codebeispiel wird veranschaulicht, wie eine Schwellenwert Zeile hinzufügen, nachdem das Diagrammsteuerelement, die der Entwurfsoberfläche hinzugefügt wurde.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-292">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="7b9ed-293">Das Diagramm verwendet einen Bereichsstreifen ohne Wiederholung, um eine Berechnung des Mittelwerts aller Datenpunkte in einer Reihe anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-293">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ToolTip { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.ToolTip" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.ToolTip</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-294">Ruft die QuickInfo eines Bereichsstreifens ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-294">Gets or sets the tooltip of a strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-295">Ein <see langword="string" />-Wert, der die QuickInfo des Bereichsstreifens darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-295">A <see langword="string" /> value that represents the tooltip of the strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-296">Wenn Sie diese Eigenschaft festlegen, eine clientseitige Imagemap wird automatisch erstellt, und ein Zuordnungsbereich wird mit der Title-Attribut, das auf die angegebene QuickInfo-Zeichenfolge festgelegt erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-296">If you set this property, a client-side image map will automatically be created, and a map area will be created with the Title attribute set to the specified tooltip string.</span></span> <span data-ttu-id="7b9ed-297">Der Strukturbereich werden die Dimensionen verwendet werden, die den Bereichsstreifen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-297">The map area will use the dimensions that correspond to the strip line.</span></span>  
  
 <span data-ttu-id="7b9ed-298">Durch Festlegen dieser Eigenschaft hat keine Auswirkungen, wenn die <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> -Eigenschaftensatz auf `false`.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-298">Setting this property will have no effect if the <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> property is set to `false`.</span></span> <span data-ttu-id="7b9ed-299">Der Standardwert ist true.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-299">The default value is true.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public string Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Url" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Url" />
      <MemberSignature Language="VB.NET" Value="Public Property Url As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Url { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Url : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Url" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.Url</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.UrlValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b9ed-300">Ruft die Ziel-URL oder den Ankerpunkt des Bereichsstreifens ab oder legt diese(n) fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-300">Gets or sets the destination URL or anchor point of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b9ed-301">Ein <see langword="string" />-Wert, der die Ziel-URL oder den Ankerpunkt des Bereichsstreifens darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b9ed-301">A <see langword="string" /> value that represents the destination URL or anchor point of the strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b9ed-302">Wenn Sie eine absolute URL verwenden möchten, beginnen Sie den Zeichenfolgenausdruck mit "http://" oder "www.".</span><span class="sxs-lookup"><span data-stu-id="7b9ed-302">To use an absolute URL, start the string expression with either "http://" or "www.".</span></span> <span data-ttu-id="7b9ed-303">Wenn die Zeichenfolge nicht mit einem dieser Präfixe beginnt, wird sie als relative URL behandelt.</span><span class="sxs-lookup"><span data-stu-id="7b9ed-303">If the string does not start with either of these prefixes, it will be treated as a relative URL.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="be9824eaf4168c9ff4b4eca3183c6a81630d850d" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77228595" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Konfigurationseinstellungen dar, mit denen eine Ereignisprotokollquelle auf dem lokalen oder einem Remotecomputer erstellt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Diagnostics.EventSourceCreationData>-Klasse, um eine neue Quelle zum Schreiben lokalisierter Einträge in ein Ereignisprotokoll zu konfigurieren. Es ist nicht erforderlich, diese Klasse zum Lesen aus einem Ereignisprotokoll zu verwenden.  
  
 Diese Klasse definiert die Konfigurationseinstellungen für eine neue Ereignis Quelle und das zugehörige Ereignisprotokoll. Das zugehörige Ereignisprotokoll kann sich auf dem lokalen Computer oder einem Remote Computer befinden. Um eine neue Quelle für ein neues oder vorhandenes Ereignisprotokoll auf dem lokalen Computer zu erstellen, legen Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> und <xref:System.Diagnostics.EventSourceCreationData.Source%2A> eines <xref:System.Diagnostics.EventSourceCreationData> fest, und rufen Sie die <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>-Methode auf. Diese Methode erstellt die Ereignis Quelle, die Sie in der <xref:System.Diagnostics.EventSourceCreationData.Source%2A>-Eigenschaft angeben, und registriert Sie für das in <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>angegebene Ereignisprotokoll. Dieses Verhalten ähnelt der Verwendung der <xref:System.Diagnostics.EventLogInstaller>-Klasse zum Registrieren einer Ereignis Quelle für ein Ereignisprotokoll.  
  
 Verwenden Sie die Methoden <xref:System.Diagnostics.EventLog.WriteEvent%2A> und <xref:System.Diagnostics.EventLog.WriteEntry%2A>, um Ereignisse in ein Ereignisprotokoll zu schreiben. Sie müssen eine Ereignis Quelle angeben, um Ereignisse zu schreiben. vor dem Schreiben des ersten Eintrags mit der Quelle müssen Sie die Ereignis Quelle erstellen und konfigurieren.  
  
 Erstellen Sie die neue Ereignis Quelle während der Installation der Anwendung. Dies ermöglicht es dem Betriebssystem, die Liste der registrierten Ereignis Quellen und deren Konfigurationen zu aktualisieren. Wenn das Betriebssystem die Liste der Ereignis Quellen nicht aktualisiert hat und Sie versuchen, ein Ereignis mit der neuen Quelle zu schreiben, tritt beim Schreibvorgang ein Fehler auf. Sie können eine neue Quelle mithilfe eines <xref:System.Diagnostics.EventLogInstaller>oder mithilfe der <xref:System.Diagnostics.EventLog.CreateEventSource%2A>-Methode konfigurieren. Sie müssen über Administratorrechte auf dem Computer verfügen, um eine neue Ereignis Quelle zu erstellen.  
  
 Sie können eine Ereignis Quelle für ein vorhandenes Ereignisprotokoll oder ein neues Ereignisprotokoll erstellen. Wenn Sie eine neue Quelle für ein neues Ereignisprotokoll erstellen, registriert das System die Quelle für dieses Protokoll, das Protokoll wird jedoch erst erstellt, wenn der erste Eintrag darin geschrieben wird.  
  
 Jede Quelle kann jeweils nur in ein Ereignisprotokoll schreiben. die Anwendung kann jedoch mehrere Quellen zum Schreiben in mehrere Ereignisprotokolle verwenden. Ihre Anwendung benötigt z. b. möglicherweise mehrere Quellen, die für verschiedene Ereignisprotokolle oder andere Ressourcen Dateien konfiguriert sind.  
  
 Wenn Sie die Konfigurationsdetails einer vorhandenen Quelle ändern möchten, müssen Sie die Quelle löschen und Sie dann mit der neuen Konfiguration erstellen. Wenn andere Anwendungen oder Komponenten die vorhandene Quelle verwenden, erstellen Sie eine neue Quelle mit der aktualisierten Konfiguration, anstatt die vorhandene Quelle zu löschen.  
  
 Sie können die Ereignis Quelle mit lokalisierten Ressourcen für die Ereignis Kategorie und die Meldungs Zeichenfolgen registrieren. Die Anwendung kann Ereignisprotokoll Einträge mithilfe von Ressourcen bezeichgern schreiben, anstatt die tatsächliche Zeichenfolge anzugeben. Der Ereignisanzeige verwendet den Ressourcen Bezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Ressourcen Datei zu suchen und anzuzeigen. Sie können eine separate Datei für Ereignis Kategorien, Meldungen und Parameter Einfügungs Zeichenfolgen registrieren, oder Sie können dieselbe Ressourcen Datei für alle drei Zeichen folgen Typen registrieren. Verwenden Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>und <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>, um die Quelle so zu konfigurieren, dass lokalisierte Einträge in das Ereignisprotokoll geschrieben werden. Wenn Ihre Anwendung Zeichen folgen Werte direkt in das Ereignisprotokoll schreibt, müssen Sie diese Eigenschaften nicht festlegen.  
  
 Die Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Die <xref:System.Diagnostics.EventLog.WriteEntry%2A>-Methode schreibt die angegebene Zeichenfolge direkt in das Ereignisprotokoll. Es wird keine lokalisierbare Nachrichten Ressourcen Datei verwendet. Verwenden Sie die <xref:System.Diagnostics.EventLog.WriteEvent%2A>-Methode, um Ereignisse mithilfe einer lokalisierten Nachrichten Ressourcen Datei zu schreiben.  
  
 Wenn Ihre Anwendung Einträge mithilfe von Ressourcen bezeichgern und Zeichen folgen Werten schreibt, müssen Sie zwei separate Quellen registrieren. Konfigurieren Sie z. b. eine Quelle mit Ressourcen Dateien, und verwenden Sie dann diese Quelle in der <xref:System.Diagnostics.EventLog.WriteEvent%2A>-Methode, um Einträge mithilfe von Ressourcen bezeichlern in das Ereignisprotokoll zu schreiben. Erstellen Sie dann eine andere Quelle ohne Ressourcen Dateien, und verwenden Sie diese Quelle in der <xref:System.Diagnostics.EventLog.WriteEntry%2A>-Methode, um Zeichen folgen mithilfe dieser Quelle direkt in das Ereignisprotokoll zu schreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Konfigurations Eigenschaften für eine Ereignis Quelle von Befehlszeilen Argumenten aus festgelegt. Mit den Eingabe Argumenten werden der Name der Ereignis Quelle, der Ereignisprotokoll Name, der Computername und die Ereignis Nachrichten-Ressourcen Datei angegeben. Das Codebeispiel überprüft, ob die Quelle mit einer vorhandenen Ereignis Quelle nicht in Konflikt steht, und erstellt dann die neue Ereignis Quelle für das angegebene Ereignisprotokoll.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Der Name, der im Ereignisprotokoll als Quelle für Einträge registriert werden soll.</param>
        <param name="logName">Der Name des Protokolls, in das Einträge aus der Quelle geschrieben werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.EventSourceCreationData" />-Klasse mit einer angegebenen Ereignisquelle und einem angegebenen Ereignisprotokollnamen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um Einträge in ein Ereignisprotokoll zu schreiben, müssen Sie zuerst eine Ereignis Quelle für das Ereignisprotokoll erstellen. Um eine neue Quelle zu registrieren, initialisieren Sie eine <xref:System.Diagnostics.EventSourceCreationData> Instanz, konfigurieren Sie die Instanzeigenschaften für die Anwendung, und nennen Sie die <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>-Methode. Nachdem die Quelle registriert wurde, können Sie mithilfe der Methoden <xref:System.Diagnostics.EventLog.WriteEvent%2A> oder <xref:System.Diagnostics.EventLog.WriteEntry%2A> Einträge aus der Quelle schreiben.  
  
 Sie können die Ereignis Quelle mit lokalisierten Ressourcen für die Ereignis Kategorie und die Meldungs Zeichenfolgen registrieren. Die Anwendung kann Ereignisprotokoll Einträge mithilfe von Ressourcen bezeichgern schreiben, anstatt die tatsächliche Zeichenfolge anzugeben. Der Ereignisanzeige verwendet den Ressourcen Bezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Ressourcen Datei zu suchen und anzuzeigen. Sie können eine separate Datei für Ereignis Kategorien, Meldungen und Parameter Einfügungs Zeichenfolgen registrieren, oder Sie können dieselbe Ressourcen Datei für alle drei Zeichen folgen Typen registrieren. Verwenden Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>und <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>, um die Quelle so zu konfigurieren, dass lokalisierte Einträge in das Ereignisprotokoll geschrieben werden. Wenn Ihre Anwendung Zeichen folgen Werte direkt in das Ereignisprotokoll schreibt, müssen Sie diese Eigenschaften nicht festlegen.  
  
 Die Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Wenn Ihre Anwendung Einträge mithilfe von Ressourcen bezeichgern und Zeichen folgen Werten schreibt, müssen Sie zwei separate Quellen registrieren. Konfigurieren Sie z. b. eine Quelle mit Ressourcen Dateien, und verwenden Sie dann diese Quelle in der <xref:System.Diagnostics.EventLog.WriteEvent%2A>-Methode, um Einträge mithilfe von Ressourcen bezeichlern in das Ereignisprotokoll zu schreiben. Erstellen Sie dann eine andere Quelle ohne Ressourcen Dateien, und verwenden Sie diese Quelle in der <xref:System.Diagnostics.EventLog.WriteEntry%2A>-Methode, um Zeichen folgen direkt in das Ereignisprotokoll zu schreiben.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für eine <xref:System.Diagnostics.EventSourceCreationData>angezeigt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|Der `source`-Parameter.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|Der `logName`-Parameter.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|Der lokale Computer (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Null|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` in Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` in Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` in Visual Basic).|  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob die Ereignis Quelle mit dem Namen `SampleApplicationSource` auf dem lokalen Computer registriert ist. Wenn die Ereignis Quelle nicht vorhanden ist, wird im Beispiel die Nachrichten Ressourcen Datei für die Quelle festgelegt und die neue Ereignis Quelle erstellt. Schließlich wird im Codebeispiel der lokalisierte Anzeige Name für das Ereignisprotokoll mithilfe des Ressourcen-ID-Werts in `DisplayNameMsgId` und des Ressourcen Dateipfads in `messageFile`festgelegt.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Kategorien in der Kategorieressourcendatei ab oder legt diese fest.</summary>
        <value>Die Anzahl der Kategorien in der Kategorieressourcendatei. Der Standardwert ist 0 (null).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> und <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, um Ereignisse mit lokalisierten Kategorien Zeichenfolgen zu schreiben. Die Ereignisanzeige zeigt die Kategorie für einen Ereignis Eintrag an, wenn Sie beim Schreiben des Ereignisses eine Kategorie angeben. Ereignisprotokoll Kategorien sind Anwendungs definierte Zeichen folgen, die das Filtern von Ereignissen erleichtern, oder weitere Informationen zum Ereignis bereitstellen. Die Anwendung kann z. b. separate Kategorien für verschiedene Komponenten oder verschiedene Vorgänge definieren.  
  
 Ereignis Kategorien sind optional. Wenn Ihre Anwendung keine Kategorien verwendet, legen Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> und <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform SDK-Dokumentation unter [https://msdn.microsoft.com](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob die Ereignis Quelle mit dem Namen `SampleApplicationSource` auf dem lokalen Computer registriert ist. Wenn die Ereignis Quelle nicht vorhanden ist, wird im Beispiel die Nachrichten Ressourcen Datei für die Quelle festgelegt und die neue Ereignis Quelle erstellt. Schließlich wird im Codebeispiel der lokalisierte Anzeige Name für das Ereignisprotokoll mithilfe des Ressourcen-ID-Werts in `DisplayNameMsgId` und des Ressourcen Dateipfads in `messageFile`festgelegt.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft ist auf einen negativen Wert oder einen Wert größer als <see cref="F:System.UInt16.MaxValue" /> festgelegt.</exception>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad der Ressourcendatei ab, die die Kategoriezeichenfolgen für die Quelle enthält, oder legt diesen fest.</summary>
        <value>Der Pfad der Kategorieressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> und <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, um Ereignisse mit lokalisierten Kategorien Zeichenfolgen zu schreiben. Die Ereignisanzeige zeigt die Kategorie für einen Ereignis Eintrag an, wenn Sie beim Schreiben des Ereignisses eine Kategorie angeben. Ereignisprotokoll Kategorien sind Anwendungs definierte Zeichen folgen, die das Filtern von Ereignissen erleichtern, oder weitere Informationen zum Ereignis bereitstellen. Die Anwendung kann z. b. separate Kategorien für verschiedene Komponenten oder verschiedene Vorgänge definieren.  
  
 Ereignis Kategorien sind optional. Wenn Ihre Anwendung keine Kategorien verwendet, legen Sie die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> und <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform SDK-Dokumentation unter [https://msdn.microsoft.com](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob die Ereignis Quelle mit dem Namen `SampleApplicationSource` auf dem lokalen Computer registriert ist. Wenn die Ereignis Quelle nicht vorhanden ist, wird im Beispiel die Nachrichten Ressourcen Datei für die Quelle festgelegt und die neue Ereignis Quelle erstellt. Schließlich wird im Codebeispiel der lokalisierte Anzeige Name für das Ereignisprotokoll mithilfe des Ressourcen-ID-Werts in `DisplayNameMsgId` und des Ressourcen Dateipfads in `messageFile`festgelegt.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Ereignisprotokolls ab, in das von der Quelle Einträge geschrieben werden, oder legt diesen fest.</summary>
        <value>Der Name des Ereignisprotokolls. Dabei kann es sich um einen Anwendungs-, einen System- oder einen benutzerdefinierten Protokollnamen handeln. Der Standardwert ist "Anwendung".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>-Eigenschaft, um das Ereignisprotokoll zu identifizieren, in das Ihre Anwendung Einträge mithilfe der neuen Quelle schreibt. Das Ereignisprotokoll kann ein neues Protokoll oder ein vorhandenes Protokoll sein. Anwendungen und Dienste sollten in das Anwendungsprotokoll oder in ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber sollten in das System Protokoll schreiben. Wenn Sie die <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>-Eigenschaft nicht explizit festlegen, wird im Ereignisprotokoll standardmäßig das Anwendungsprotokoll verwendet.  
  
> [!NOTE]
>  Das Sicherheitsprotokoll ist schreibgeschützt.  
  
 Um ein vorhandenes Protokoll für die neue Quelle als Ziel festzulegen, legen Sie die <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>-Eigenschaft auf den Namen des vorhandenen Ereignis Protokolls fest. Um ein neues Ereignisprotokoll für die Quelle zu erstellen, müssen Sie die <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>-Eigenschaft festlegen. Ereignisprotokollnamen müssen aus druckbaren Zeichen bestehen und dürfen nicht die Zeichen "*", "?" oder "\\" enthalten. Die ersten 8 Zeichen des Ereignisprotokoll namens müssen sich von den ersten 8 Zeichen vorhandener Namen von Ereignisprotokollen auf dem angegebenen Computer unterscheiden.  
  
 Das Betriebssystem speichert Ereignisprotokolle als Dateien. Wenn Sie mit <xref:System.Diagnostics.EventLogInstaller> oder der <xref:System.Diagnostics.EventLog.CreateEventSource%2A>-Methode ein neues Ereignisprotokoll erstellen, wird die zugehörige Datei im Verzeichnis%SystemRoot%\System32\Config auf dem angegebenen Computer gespeichert. Der Dateiname wird festgelegt, indem die ersten 8 Zeichen der <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>-Eigenschaft mit der Dateinamenerweiterung ". evt" angehängt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Konfigurations Eigenschaften für eine Ereignis Quelle von Befehlszeilen Argumenten aus festgelegt. Mit den Eingabe Argumenten werden der Name der Ereignis Quelle, der Ereignisprotokoll Name, der Computername und die Ereignis Nachrichten-Ressourcen Datei angegeben. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Diagnostics.EventSourceCreationData>-Klasse bereitgestellt wird.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Computers ab, auf dem die Ereignisquelle registriert werden soll, oder legt diesen fest.</summary>
        <value>Der Name des Systems, auf dem die Ereignisquelle registriert werden soll. Der Standardwert ist der lokale Computer (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>-Wert darf keine leere Zeichenfolge sein. Wenn der Computername nicht explizit festgelegt ist, wird standardmäßig der lokale Computer (".") verwendet.  
  
 Wenn Sie eine Quelle auf einem Remote Computer registrieren, müssen Sie über Administratorrechte für diesen Computer verfügen, um die Registrierungs Werte mit ausreichenden Berechtigungen zu schreiben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Konfigurations Eigenschaften für eine Ereignis Quelle von Befehlszeilen Argumenten aus festgelegt. Mit den Eingabe Argumenten werden der Name der Ereignis Quelle, der Ereignisprotokoll Name, der Computername und die Ereignis Nachrichten-Ressourcen Datei angegeben. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Diagnostics.EventSourceCreationData>-Klasse bereitgestellt wird.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Computername ist ungültig.</exception>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad der Meldungsressourcendatei ab, die die Meldungsformatzeichenfolgen für die Quelle enthält, oder legt diesen fest.</summary>
        <value>Der Pfad der Meldungsressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>-Eigenschaft, um eine Ereignisprotokoll Quelle zum Schreiben lokalisierter Ereignismeldungen zu konfigurieren. Ereignismeldungen sind Anwendungs definierte Zeichen folgen, die das Ereignis für den Benutzer beschreiben.  
  
 Die Anwendung kann Ereignisprotokoll Einträge mithilfe von Ressourcen bezeichgern schreiben. Ein Ressourcen Bezeichner indiziert eine Nachricht, die sich im <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>befindet. Der Ereignisanzeige verwendet den Ressourcen Bezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Nachrichten Ressourcen Datei zu suchen und anzuzeigen.  
  
 Die Ereignis Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Verwenden Sie die <xref:System.Diagnostics.EventLog.WriteEvent%2A>-Methode, um lokalisierte Einträge für eine mit einer Nachrichten Ressourcen Datei konfigurierte Quelle zu schreiben.  
  
 Wenn Ihre Anwendung Ereignis Meldungs Zeichenfolgen direkt schreibt, anstatt einen Ressourcen Bezeichner in einer lokalisierten Ressourcen Datei zu verwenden, legen Sie die <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>-Eigenschaft nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform SDK-Dokumentation unter [https://msdn.microsoft.com](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob die Ereignis Quelle mit dem Namen `SampleApplicationSource` auf dem lokalen Computer registriert ist. Wenn die Ereignis Quelle nicht vorhanden ist, wird im Beispiel die Nachrichten Ressourcen Datei für die Quelle festgelegt und die neue Ereignis Quelle erstellt. Schließlich wird im Codebeispiel der lokalisierte Anzeige Name für das Ereignisprotokoll mithilfe des Ressourcen-ID-Werts in `DisplayNameMsgId` und des Ressourcen Dateipfads in `messageFile`festgelegt.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad der Ressourcendatei ab, die die Meldungsparameterzeichenfolgen für die Quelle enthält, oder legt diesen fest.</summary>
        <value>Der Pfad der Parameterressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die Eigenschaft <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>, um eine Ereignisprotokoll Quelle zum Schreiben lokalisierter Ereignismeldungen mit eingefügten Parameter Zeichenfolgen zu konfigurieren. Jede lokalisierte Ereignis Nachricht, die in der <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>-Eigenschaft angegeben ist, kann Platzhalter für Einfügezeichen Diese Platzhalter werden verwendet, um die Position und den Ressourcen Bezeichner für eine sprachunabhängige Zeichenfolge innerhalb der Ereignismeldung anzugeben. Der Ereignisanzeige füllt die Platzhalter mithilfe der entsprechenden Zeichen folgen aus dem <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> und formatiert die Ereignisprotokoll Meldung für den lokalisierten Ereignis Eintrag.  
  
 Beispielsweise wird im folgenden Abschnitt einer Nachrichten Textdatei eine Zeichenfolge mit einem Parameter Platzhalter definiert:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 In der Ressourcen Datei des Parameters muss die Einfügezeichenfolge mit dem Ressourcen Bezeichner definiert werden, der dem Platzhalter entspricht, wie unten dargestellt:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 Die Ereignis Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Verwenden Sie die <xref:System.Diagnostics.EventLog.WriteEvent%2A>-Methode, um lokalisierte Einträge für eine mit einer Nachrichten Ressourcen Datei konfigurierte Quelle zu schreiben.  
  
 Wenn Ihre Anwendung Ereignis Meldungs Zeichenfolgen direkt in das Ereignisprotokoll schreibt oder wenn die <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>-Eigenschaft keine Nachrichten mit Platzhalter für die Einfügung von Parametern enthält, legen Sie die <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>-Eigenschaft nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform SDK-Dokumentation unter [https://msdn.microsoft.com](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob die Ereignis Quelle mit dem Namen `SampleApplicationSource` auf dem lokalen Computer registriert ist. Wenn die Ereignis Quelle nicht vorhanden ist, wird im Beispiel die Nachrichten Ressourcen Datei für die Quelle festgelegt und die neue Ereignis Quelle erstellt. Schließlich wird im Codebeispiel der lokalisierte Anzeige Name für das Ereignisprotokoll mithilfe des Ressourcen-ID-Werts in `DisplayNameMsgId` und des Ressourcen Dateipfads in `messageFile`festgelegt.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen. Insbesondere die für den Ressourcen Bezeichner 1004 definierte Nachricht verwendet einen Platzhalter für eine für den Ressourcen Bezeichner 5002 definierte Parameter Zeichenfolge.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen zum Registrieren des Ereignisprotokolls als Ereignisquelle ab oder legt diesen fest.</summary>
        <value>Der Name, der im Ereignisprotokoll als Quelle für Einträge registriert werden soll. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Quellname ist häufig der Name der Anwendung oder der Name einer Komponente innerhalb einer großen Anwendung. Die <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>-Methode verwendet die Eigenschaften <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>und <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>, um Registrierungs Werte auf dem Bereitstellungs Zielcomputer für die neue Quelle und das zugehörige Ereignisprotokoll zu erstellen. Ein neuer Quellen Name darf nicht mit einem vorhandenen Quellnamen oder einem vorhandenen Ereignisprotokoll Namen auf dem Zielcomputer identisch sein.  
  
 Nachdem die Registrierungs Werte für die Quelle erstellt wurden, kann die Anwendung die Quelle zum Schreiben von Einträgen in das konfigurierte Ereignisprotokoll verwenden.  
  
 Jede Quelle kann jeweils nur in ein Ereignisprotokoll schreiben. die Anwendung kann jedoch mehrere Quellen zum Schreiben in mehrere Ereignisprotokolle verwenden. Beispielsweise kann Ihre Anwendung mehrere Quellen erfordern, die für verschiedene Ereignisprotokolle oder andere Ressourcen Dateien konfiguriert sind.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Konfigurations Eigenschaften für eine Ereignis Quelle von Befehlszeilen Argumenten aus festgelegt. Mit den Eingabe Argumenten werden der Name der Ereignis Quelle, der Ereignisprotokoll Name, der Computername und die Ereignis Nachrichten-Ressourcen Datei angegeben. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Diagnostics.EventSourceCreationData>-Klasse bereitgestellt wird.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>

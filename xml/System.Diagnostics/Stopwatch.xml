<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9cf613fcbb229511698e1a6e99faa1275c9d4c74" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37767146" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Gruppe von Methoden und Eigenschaften bereit, mit denen die verstrichene Zeit exakt gemessen werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Diagnostics.Stopwatch> Instanz kann verstrichene Zeit für ein Intervall oder die insgesamt verstrichene Zeit für mehrere Intervalle messen. In einer typischen <xref:System.Diagnostics.Stopwatch> Szenario rufen Sie die <xref:System.Diagnostics.Stopwatch.Start%2A> -Methode schließlich rufen Sie dann die <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode, und klicken Sie dann Sie überprüfen verstrichene Zeit mit der <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Eigenschaft.  
  
 Ein <xref:System.Diagnostics.Stopwatch> Instanz wird entweder ausgeführt wird oder beendet; verwenden Sie <xref:System.Diagnostics.Stopwatch.IsRunning%2A> zum Ermitteln des aktuellen Status des eine <xref:System.Diagnostics.Stopwatch>. Verwenden Sie <xref:System.Diagnostics.Stopwatch.Start%2A> zu beginnen, Messen der verstrichenen Zeit; verwenden Sie <xref:System.Diagnostics.Stopwatch.Stop%2A> zum Messen der verstrichenen Zeit zu beenden. Fragen Sie den Wert der verstrichenen Zeit, über die Eigenschaften <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, oder <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Sie können die Eigenschaften der verstrichenen Zeit Abfragen, während die Instanz ausgeführt wird oder beendet wird. Zwar der verstrichenen Zeit, die Eigenschaften stetigen Anstieg der <xref:System.Diagnostics.Stopwatch> wird ausgeführt; sie konstant bleiben, wenn die Instanz beendet wird.  
  
 Standardmäßig wird die verstrichene Zeit-Wert, der eine <xref:System.Diagnostics.Stopwatch> Instanz gleich die Summe alle Intervalle der gemessene Zeit. Jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Start%2A> beginnt die Zählung mit die kumulative Zeitspanne; jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Stop%2A> endet die Messung des aktuellen Intervalls und friert die kumulierte verstrichene Zeit-Wert. Verwenden der <xref:System.Diagnostics.Stopwatch.Reset%2A> Methode zum Löschen der kumulierte verstrichene Zeit in einer vorhandenen <xref:System.Diagnostics.Stopwatch> Instanz.  
  
 Die <xref:System.Diagnostics.Stopwatch> verstrichene Zeit durch Zählen von Ticks des Zeitgebers im zugrunde liegenden Zeitgebermechanismus misst. Wenn die installierte Hardware und Betriebssystem einen hochauflösenden Leistungsindikator unterstützen, und klicken Sie dann die <xref:System.Diagnostics.Stopwatch> Klasse verwendet, Leistungsindikator zum Messen der verstrichenen Zeit. Andernfalls die <xref:System.Diagnostics.Stopwatch> Klasse verwendet den systemtimer zum Messen der verstrichenen Zeit. Verwenden der <xref:System.Diagnostics.Stopwatch.Frequency> und <xref:System.Diagnostics.Stopwatch.IsHighResolution> Felder, um zu bestimmen, die Genauigkeit und die Auflösung der <xref:System.Diagnostics.Stopwatch> Timing-Implementierung.  
  
 Die <xref:System.Diagnostics.Stopwatch> Klasse unterstützt das Ändern der zeitlichen Steuerung-bezogene Leistungsindikatoren in verwaltetem Code. Insbesondere die <xref:System.Diagnostics.Stopwatch.Frequency> Feld und <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> Methode kann verwendet werden, anstelle der nicht verwalteten Win32-APIs `QueryPerformanceFrequency` und `QueryPerformanceCounter`.  
  
> [!NOTE]
>  Auf einem Multiprozessorcomputer spielt es keine Rolle, welcher Prozessor der Thread ausgeführt wird, auf. Aufgrund von Fehlern im BIOS oder (Hardware Abstraction Layer, HAL), können Sie jedoch andere Ergebnisse auf unterschiedlichen Prozessoren abrufen. Verwenden Sie zum Angeben der Prozessoraffinität für einen Thread die <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Diagnostics.Stopwatch> Klasse, um die Ausführungszeit für eine Anwendung zu bestimmen.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 Das folgende Beispiel zeigt die Verwendung der <xref:System.Diagnostics.Stopwatch> Klasse, um Leistungsdaten zu berechnen.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Stopwatch" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das zurückgegebene <xref:System.Diagnostics.Stopwatch> Instanz beendet, und die Eigenschaft der verstrichenen Zeit der Instanz 0 (null).  
  
 Verwenden der <xref:System.Diagnostics.Stopwatch.Start%2A> Methode damit beginnt, Messen der verstrichenen Zeit mit dem neuen <xref:System.Diagnostics.Stopwatch> Instanz. Verwenden der <xref:System.Diagnostics.Stopwatch.StartNew%2A> Methode zum Initialisieren eines neuen <xref:System.Diagnostics.Stopwatch> -Instanz, und starten Sie ihn sofort.  
  
   
  
## Examples  
 Im folgenden Beispiel initialisiert einen <xref:System.Diagnostics.Stopwatch> Instanz mit einem einfachen Klassenkonstruktor.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die gesamte verstrichene Zeit ab, die von der aktuellen Instanz gemessen wurde.</summary>
        <value>Eine schreibgeschützte <see cref="T:System.TimeSpan" />, die die gesamte, von der aktuellen Instanz gemessene verstrichene Zeit darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einer typischen <xref:System.Diagnostics.Stopwatch> Szenario rufen Sie die <xref:System.Diagnostics.Stopwatch.Start%2A> -Methode schließlich rufen Sie dann die <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode, und klicken Sie dann Sie überprüfen verstrichene Zeit mit der <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Eigenschaft.  
  
 Verwenden der <xref:System.Diagnostics.Stopwatch.Elapsed%2A> die verstrichene Zeit abzurufenden Eigenschaftswert mit <xref:System.TimeSpan> Methoden und Eigenschaften. Beispielsweise können Sie das zurückgegebene formatieren <xref:System.TimeSpan> -Instanz in eine Textdarstellung, oder übergeben Sie sie an eine andere Klasse, die erfordert eine <xref:System.TimeSpan> Parameter.  
  
 Sie können die Eigenschaften Abfragen <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, und <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> während der <xref:System.Diagnostics.Stopwatch> Instanz ist, ausgeführt oder beendet. Zwar der verstrichenen Zeit, die Eigenschaften stetigen Anstieg der <xref:System.Diagnostics.Stopwatch> wird ausgeführt; sie konstant bleiben, wenn die Instanz beendet wird.  
  
 Standardmäßig wird die verstrichene Zeit-Wert, der eine <xref:System.Diagnostics.Stopwatch> Instanz gleich die Summe alle Intervalle der gemessene Zeit. Jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Start%2A> beginnt die Zählung mit die kumulative Zeitspanne; jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Stop%2A> endet die Messung des aktuellen Intervalls und friert die kumulierte verstrichene Zeit-Wert. Verwenden der <xref:System.Diagnostics.Stopwatch.Reset%2A> Methode zum Löschen der kumulierte verstrichene Zeit in einer vorhandenen <xref:System.Diagnostics.Stopwatch> Instanz.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Eigenschaft, um die Ausführungszeit für eine Anwendung zu bestimmen.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die gesamte verstrichene Zeit in Millisekunden ab, die von der aktuellen Instanz gemessen wurde.</summary>
        <value>Eine schreibgeschützte Long-Integer-Zahl, die die Gesamtanzahl der von der aktuellen Instanz gemessenen Millisekunden angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt die verstrichene Zeit, die auf den nächsten Millisekundenwert für die gesamte abgerundet. Verwenden Sie für höhere Genauigkeit Messungen der <xref:System.Diagnostics.Stopwatch.Elapsed%2A> oder <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> Eigenschaften.  
  
 Sie können die Eigenschaften Abfragen <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, und <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> während der <xref:System.Diagnostics.Stopwatch> Instanz ist, ausgeführt oder beendet. Zwar der verstrichenen Zeit, die Eigenschaften stetigen Anstieg der <xref:System.Diagnostics.Stopwatch> wird ausgeführt; sie konstant bleiben, wenn die Instanz beendet wird.  
  
 Standardmäßig wird die verstrichene Zeit-Wert, der eine <xref:System.Diagnostics.Stopwatch> Instanz gleich die Summe alle Intervalle der gemessene Zeit. Jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Start%2A> beginnt die Zählung mit die kumulative Zeitspanne; jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Stop%2A> endet die Messung des aktuellen Intervalls und friert die kumulierte verstrichene Zeit-Wert. Verwenden der <xref:System.Diagnostics.Stopwatch.Reset%2A> Methode zum Löschen der kumulierte verstrichene Zeit in einer vorhandenen <xref:System.Diagnostics.Stopwatch> Instanz.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Diagnostics.Stopwatch> Klasse zum Messen der Leistung von vier verschiedenen Implementierungen für die Analyse einer ganze Zahl aus einer Zeichenfolge. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die gesamte verstrichene Zeit, die von der aktuellen Instanz gemessen wurde, in Zeitgeberintervallen (Ticks) ab.</summary>
        <value>Eine schreibgeschützte Long-Integer-Zahl, die die Gesamtanzahl der von der aktuellen Instanz gemessenen Timerintervalle angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt die Anzahl der verstrichenen Ticks im zugrunde liegenden Zeitgebermechanismus. Ein Tick ist die kleinste Einheit der Zeit, die die <xref:System.Diagnostics.Stopwatch> Timer messen kann. Verwenden der <xref:System.Diagnostics.Stopwatch.Frequency> Feld konvertieren die <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> Wert in eine Anzahl von Sekunden.  
  
 Sie können die Eigenschaften Abfragen <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, und <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> während der <xref:System.Diagnostics.Stopwatch> Instanz ist, ausgeführt oder beendet. Zwar der verstrichenen Zeit, die Eigenschaften stetigen Anstieg der <xref:System.Diagnostics.Stopwatch> wird ausgeführt; sie konstant bleiben, wenn die Instanz beendet wird.  
  
 Standardmäßig wird die verstrichene Zeit-Wert, der eine <xref:System.Diagnostics.Stopwatch> Instanz gleich die Summe alle Intervalle der gemessene Zeit. Jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Start%2A> beginnt die Zählung mit die kumulative Zeitspanne; jeder Aufruf von <xref:System.Diagnostics.Stopwatch.Stop%2A> endet die Messung des aktuellen Intervalls und friert die kumulierte verstrichene Zeit-Wert. Verwenden der <xref:System.Diagnostics.Stopwatch.Reset%2A> Methode zum Löschen der kumulierte verstrichene Zeit in einer vorhandenen <xref:System.Diagnostics.Stopwatch> Instanz.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> Ticks unterscheiden sich von <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Jeder Takt in die <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> Wert darstellt, ein 100-Nanosekunden-Intervall. Jeder Takt in die <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> Wert darstellt, das Zeitintervall, die gleich 1 Sekunde, dividiert durch die <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Diagnostics.Stopwatch> Klasse zum Messen der Leistung von vier verschiedenen Implementierungen für die Analyse einer ganze Zahl aus einer Zeichenfolge. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Frequenz des Timers als Anzahl von Ticks pro Sekunde ab. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Timer-Häufigkeit Gibt an, die Genauigkeit für Timer und die Auflösung. Z. B. Takte eine Timer-Frequenz von 2 Millionen pro Sekunde entspricht eine zeitgeberauflösung von 500 Nanosekunden pro Takt. Das heißt, da eine Sekunde 1 Milliarde Nanosekunden gleich ist, entspricht eine Timer-Frequenz von 2 Millionen Ticks pro Sekunde 2 Millionen Ticks pro 1 Milliarde Nanosekunden, die Ticks pro 500 Nanosekunden 1 noch weiter vereinfacht werden können.  
  
 Die <xref:System.Diagnostics.Stopwatch.Frequency> Wert hängt von der Auflösung des zugrunde liegenden Zeitgebermechanismus. Wenn die installierte Hardware und Betriebssystem einen hochauflösenden Leistungsindikator unterstützen, und klicken Sie dann die <xref:System.Diagnostics.Stopwatch.Frequency> Wert gibt die Häufigkeit dieses Indikators. Andernfalls die <xref:System.Diagnostics.Stopwatch.Frequency> Wert basiert auf der Frequenz des Systemzeitgebers.  
  
 Da die <xref:System.Diagnostics.Stopwatch> Häufigkeit hängt von der installierten Hardware und Betriebssystem, das <xref:System.Diagnostics.Stopwatch.Frequency> Wert konstant bleibt, während das System ausgeführt wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, die Häufigkeit und die Lösung von einem <xref:System.Diagnostics.Stopwatch> Timer. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die aktuelle Anzahl der Ticks im Timermechanismus ab.</summary>
        <returns>Eine Long-Integer-Zahl, die den Tickzählerwert des zugrunde liegenden Timermechanismus angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Diagnostics.Stopwatch> Klasse verwendet einen hochauflösenden Leistungsindikator <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> gibt den aktuellen Wert dieses Indikators. Wenn die <xref:System.Diagnostics.Stopwatch> Klasse verwendet den systemtimer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> gibt das aktuelle <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> Eigenschaft der <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Instanz.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> Methode, um einen Leistungsindikator zu aktualisieren.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob der Timer auf einem hochauflösenden Leistungsindikator basiert. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Timer verwendet, durch die <xref:System.Diagnostics.Stopwatch> Klasse hängt von der Systemhardware und Betriebssystem. <xref:System.Diagnostics.Stopwatch.IsHighResolution> ist `true` Wenn die <xref:System.Diagnostics.Stopwatch> Zeitgeber auf einem hochauflösenden Leistungsindikator basiert. Andernfalls <xref:System.Diagnostics.Stopwatch.IsHighResolution> ist `false`, die angibt, dass die <xref:System.Diagnostics.Stopwatch> Timer basiert auf dem Systemzeitgeber.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, die Häufigkeit und die Lösung von einem <xref:System.Diagnostics.Stopwatch> Timer. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Diagnostics.Stopwatch" />-Zeitgeber ausgeführt wird.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="T:System.Diagnostics.Stopwatch" />-Instanz derzeit ausgeführt wird und die verstrichene Zeit für ein Intervall misst, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Diagnostics.Stopwatch> Instanz beginnt mit einem Aufruf von <xref:System.Diagnostics.Stopwatch.Start%2A> oder <xref:System.Diagnostics.Stopwatch.StartNew%2A>. Die Instanz beendet, die mit einem Aufruf von <xref:System.Diagnostics.Stopwatch.Stop%2A> oder <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Zeitintervallmessung und setzt die verstrichene Zeit auf 0 (null) zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Diagnostics.Stopwatch> -Instanz berechnet und die kumulative Zeitspanne mehrere Zeitintervallen, behält, bis die Instanz zurückgesetzt wird. Verwendung <xref:System.Diagnostics.Stopwatch.Stop%2A> Messung des aktuellen Intervalls zu beenden und den Wert für die kumulative Zeitspanne beizubehalten. Verwendung <xref:System.Diagnostics.Stopwatch.Reset%2A> beliebiges Maß Intervall, in Bearbeitung zu beenden und löschen Sie den Wert für die verstrichene Zeit.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Zeitintervallmessung, setzt die verstrichene Zeit auf 0 (null) zurück, und startet die Messung der verstrichenen Zeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Diagnostics.Stopwatch> -Instanz berechnet und die kumulative Zeitspanne mehrere Zeitintervallen, behält, bis die Instanz zurückgesetzt oder neu gestartet wird. Verwendung <xref:System.Diagnostics.Stopwatch.Stop%2A> Messung des aktuellen Intervalls zu beenden und den Wert für die kumulative Zeitspanne beizubehalten. Verwendung <xref:System.Diagnostics.Stopwatch.Reset%2A> beliebiges Maß Intervall, in Bearbeitung zu beenden und löschen Sie den Wert für die verstrichene Zeit. Verwendung <xref:System.Diagnostics.Stopwatch.Restart%2A> zum Beenden der Messung des aktuellen Intervalls und starten eine neue systemmessung des Intervalls.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Startet den Messvorgang der verstrichenen Zeit für ein Intervall oder nimmt diesen wieder auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einer typischen <xref:System.Diagnostics.Stopwatch> Szenario rufen Sie die <xref:System.Diagnostics.Stopwatch.Start%2A> -Methode schließlich rufen Sie dann die <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode, und klicken Sie dann Sie überprüfen verstrichene Zeit mit der <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Eigenschaft.  
  
 Nach dem Start einer <xref:System.Diagnostics.Stopwatch> Timer misst das aktuelle Intervall, in der verstrichenen Ticks des Zeitgebers, bis die Instanz beendet oder zurückgesetzt wird. Starten einer <xref:System.Diagnostics.Stopwatch> , nicht den Zustand des Zeitgebers ändern oder Zurücksetzen der Eigenschaften der verstrichenen Zeit bereits ausgeführt.  
  
 Wenn eine <xref:System.Diagnostics.Stopwatch> Instanz gemessen, mehr als ein Intervall der <xref:System.Diagnostics.Stopwatch.Start%2A> Methode fortgesetzt wird, messen die Zeit als den aktuellen Wert für die verstrichene Zeit. Ein <xref:System.Diagnostics.Stopwatch> -Instanz berechnet und die kumulative Zeitspanne mehrere Zeitintervallen, behält, bis die Instanz zurückgesetzt wird. Verwenden der <xref:System.Diagnostics.Stopwatch.Reset%2A> Methode vor dem Aufruf <xref:System.Diagnostics.Stopwatch.Start%2A> , deaktivieren Sie die kumulative verstrichene Zeit in einer <xref:System.Diagnostics.Stopwatch> Instanz. Verwenden der <xref:System.Diagnostics.Stopwatch.Restart%2A> Methode, um <xref:System.Diagnostics.Stopwatch.Reset%2A> und <xref:System.Diagnostics.Stopwatch.Start%2A> der <xref:System.Diagnostics.Stopwatch> mit einem einzigen Befehl.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Diagnostics.Stopwatch.Start%2A> Methode, um ein Zeitgeber gestartet, die zur Ausführung einer Anwendung misst.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue <see cref="T:System.Diagnostics.Stopwatch" />-Instanz, legt die Eigenschaft der verstrichenen Zeit auf 0 (null) fest und beginnt mit dem Messen der verstrichenen Zeit.</summary>
        <returns>Eine <see cref="T:System.Diagnostics.Stopwatch" />, die gerade mit dem Messen der verstrichenen Zeit begonnen hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode entspricht dem Aufrufen der <xref:System.Diagnostics.Stopwatch> Konstruktor und dem anschließenden Aufrufen <xref:System.Diagnostics.Stopwatch.Start%2A> auf der neuen Instanz.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Diagnostics.Stopwatch> Klasse zum Messen der Leistung von vier verschiedenen Implementierungen für die Analyse einer ganze Zahl aus einer Zeichenfolge. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet das Messen der verstrichenen Zeit für ein Intervall.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einer typischen <xref:System.Diagnostics.Stopwatch> Szenario rufen Sie die <xref:System.Diagnostics.Stopwatch.Start%2A> -Methode schließlich rufen Sie dann die <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode, und klicken Sie dann Sie überprüfen verstrichene Zeit mit der <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Eigenschaft.  
  
 Die <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode beendet den aktuellen zeitintervallmessung. Beenden einer <xref:System.Diagnostics.Stopwatch> , nicht den Zustand des Zeitgebers ändern oder Zurücksetzen der Eigenschaften der verstrichenen Zeit nicht ausgeführt.  
  
 Wenn eine <xref:System.Diagnostics.Stopwatch> Instanz gemessen, mehr als ein Intervall der <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode entspricht die Messung der verstrichenen Zeit anhalten. Ein nachfolgender Aufruf von <xref:System.Diagnostics.Stopwatch.Start%2A> fortgesetzt wird, messen die Zeit als den aktuellen Wert für die verstrichene Zeit. Verwenden der <xref:System.Diagnostics.Stopwatch.Reset%2A> Methode zum Löschen der kumulativen verstrichene Zeit in einer <xref:System.Diagnostics.Stopwatch> Instanz.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Diagnostics.Stopwatch.Stop%2A> Methode, um einen Zeitgeber zu beenden, die zur Ausführung einer Anwendung misst.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>
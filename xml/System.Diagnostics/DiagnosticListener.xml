<Type Name="DiagnosticListener" FullName="System.Diagnostics.DiagnosticListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8171a1ad4947afe2e9f65d46d4c5319cef2bab41" /><Meta Name="ms.sourcegitcommit" Value="69e0a4b5c467d032ef1590520528c0a541a1787f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/24/2020" /><Meta Name="ms.locfileid" Value="76748213" /></Metadata><TypeSignature Language="C#" Value="public class DiagnosticListener : System.Diagnostics.DiagnosticSource, IDisposable, IObservable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DiagnosticListener extends System.Diagnostics.DiagnosticSource implements class System.IDisposable, class System.IObservable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DiagnosticListener&#xA;Inherits DiagnosticSource&#xA;Implements IDisposable, IObservable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticListener : System::Diagnostics::DiagnosticSource, IDisposable, IObservable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type DiagnosticListener = class&#xA;    inherit DiagnosticSource&#xA;    interface IDisposable&#xA;    interface IObservable&lt;KeyValuePair&lt;string, obj&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.DiagnosticSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IObservable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c3ea6-101">Stellt eine Implementierung der abstrakten <see cref="T:System.Diagnostics.DiagnosticSource" />-Klasse bereit, die einen benannten Ort darstellt, an eine Quelle ihre Informationen (Ereignisse) sendet.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-101">Provides an implementation of the abstract <see cref="T:System.Diagnostics.DiagnosticSource" /> class that represents a named place to which a source sends its information (events).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c3ea6-102">`DiagnosticListener` ist eine notificationsource. Dies bedeutet, dass das zurückgegebene Ergebnis zum Protokollieren von Benachrichtigungen verwendet werden kann. es verfügt jedoch auch über eine <xref:System.Diagnostics.DiagnosticListener.Subscribe%2A>-Methode, sodass Benachrichtigungen beliebig weitergeleitet werden können.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-102">`DiagnosticListener` is a NotificationSource, which means the returned result can be used to  log notifications, but it also has a <xref:System.Diagnostics.DiagnosticListener.Subscribe%2A> method so notifications can be forwarded arbitrarily.</span></span> <span data-ttu-id="c3ea6-103">Daher besteht seine Aufgabe darin, die Dinge vom Producer an alle Listener (Multicasting) weiterzuleiten.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-103">Thus, its job is to forward things from the producer to all the listeners (multi-casting).</span></span> <span data-ttu-id="c3ea6-104">Im Allgemeinen sollten Sie keine eigenen <xref:System.Diagnostics.DiagnosticListener> erstellen, aber die Standardeinstellung verwenden, damit Benachrichtigungen so öffentlich wie möglich sind.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-104">Generally, you should not be making your own <xref:System.Diagnostics.DiagnosticListener> but use the default, so that notifications are as public as possible.</span></span>

<span data-ttu-id="c3ea6-105">Weitere Informationen zu den Klassen <xref:System.Diagnostics.DiagnosticSource> und <xref:System.Diagnostics.DiagnosticListener> finden Sie im [Benutzerhandbuch für diagnosticsource](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-105">For more information on the <xref:System.Diagnostics.DiagnosticSource> and <xref:System.Diagnostics.DiagnosticListener> classes, see [DiagnosticSource User's Guide](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</span></span>

        ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiagnosticListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DiagnosticListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DiagnosticListener : string -&gt; System.Diagnostics.DiagnosticListener" Usage="new System.Diagnostics.DiagnosticListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3ea6-106">Der Name dieses <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-106">The name of this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></param>
        <summary><span data-ttu-id="c3ea6-107">Erstellt einen neuen <see cref="T:System.Diagnostics.DiagnosticListener" />.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-107">Creates a new <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllListeners">
      <MemberSignature Language="C#" Value="public static IObservable&lt;System.Diagnostics.DiagnosticListener&gt; AllListeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IObservable`1&lt;class System.Diagnostics.DiagnosticListener&gt; AllListeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DiagnosticListener.AllListeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AllListeners As IObservable(Of DiagnosticListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property IObservable&lt;System::Diagnostics::DiagnosticListener ^&gt; ^ AllListeners { IObservable&lt;System::Diagnostics::DiagnosticListener ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllListeners : IObservable&lt;System.Diagnostics.DiagnosticListener&gt;" Usage="System.Diagnostics.DiagnosticListener.AllListeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;System.Diagnostics.DiagnosticListener&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3ea6-108">Ruft die Auflistung der Listener für diesen <see cref="T:System.Diagnostics.DiagnosticListener" /> ab.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-108">Gets the collection of listeners for this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="c3ea6-109">Wenn Sie dies abonnieren, erhalten Sie Rückrufe für alle notificationlistener in der AppDomain sowie die in der Vergangenheit aufgetretenen Listener und alle zukünftigen Listener, die in der Zukunft erstellt wurden.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-109">When you subscribe to this, you get callbacks for all NotificationListeners in the appdomain, as well as those that occurred in the past, and all future Listeners created in the future.</span></span>

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="diagnosticListener.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3ea6-110">Gibt die NotificationListeners frei.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-110">Disposes the NotificationListeners.</span></span></summary>
        <remarks><span data-ttu-id="c3ea6-111">Benachrichtigungslistener sind nicht eigenständig, da Sie sich in einer globalen Liste befinden (zur Auffindbarkeit).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-111">Notification listeners do not die on their own because they are in a global list (for discoverability).</span></span> <span data-ttu-id="c3ea6-112">Sie müssen Sie explizit verwerfen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-112">You must dispose of them explicitly.</span></span> <span data-ttu-id="c3ea6-113">Beachten Sie, dass das Verwerfen <c>(bool)</c> -Muster nicht durchgeführt wird, da keine Unterklassen unterstützt werden sollen, die nicht den Status "nicht verwaltet" aufweisen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-113">Note that we do not do the <c>Dispose(bool)</c> pattern because we don't want to support subclasses that have non-managed state.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEnabled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEnabled();" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : unit -&gt; bool" Usage="diagnosticListener.IsEnabled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3ea6-114">Bestimmt, ob registrierte Abonnenten vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-114">Determines whether there are any registered subscribers.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-115"><see langword="true" />, wenn registrierte Abonnenten vorhanden sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-115"><see langword="true" /> if there are any registered subscribers, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="c3ea6-116">Wenn das Setup für die Benachrichtigung teuer ist, können Sie `IsEnabled()` vor dem Ausführen dieses Setups anrufen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-116">If setup for the notification is expensive, you can call `IsEnabled()` before performing this setup.</span></span> <span data-ttu-id="c3ea6-117">Producer können `IsEnabled()` optional aufrufen, bevor Sie <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)> in Leistungs kritischen Teilen der Anwendung aufrufen, um zu bestimmen, ob Listener zum <xref:System.Diagnostics.DiagnosticListener>vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-117">Producers may optionally call `IsEnabled()` before calling <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)> in performance-critical parts of the application to determine whether there are any listeners to the <xref:System.Diagnostics.DiagnosticListener>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public override bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : string -&gt; bool" Usage="diagnosticListener.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary><span data-ttu-id="c3ea6-118">Überprüft, ob der <see cref="T:System.Diagnostics.DiagnosticListener" /> aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-118">Checks whether the <see cref="T:System.Diagnostics.DiagnosticListener" /> is enabled.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-119"><see langword="true" />, wenn Benachrichtigungen aktiviert sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-119"><see langword="true" /> if notifications are enabled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public override bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticListener.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3ea6-120">Der Name des zu überprüfenden Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-120">The name of the event to check.</span></span></param>
        <param name="arg1"><span data-ttu-id="c3ea6-121">Das Objekt, das einen Kontext darstellt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-121">The object that represents a context.</span></span></param>
        <param name="arg2"><span data-ttu-id="c3ea6-122">Das Objekt, das einen Kontext darstellt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-122">The object that represents a context.</span></span></param>
        <summary><span data-ttu-id="c3ea6-123">Überprüft, ob ein Abonnent der Diagnoseereignisse am Empfang von Ereignissen mit diesem Namen interessiert ist.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-123">Checks if any subscriber to the diagnostic events is interested in receiving events with this name.</span></span> <span data-ttu-id="c3ea6-124">Abonnenten geben Ihr Interesse mithilfe eines in <see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" /> bereitgestellten Delegaten an.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-124">Subscribers indicate their interest using a delegate provided in <see cref="Overload:System.Diagnostics.DiagnosticListener.Subscribe" />.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-125"><see langword="true" />, wenn er aktiviert ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-125"><see langword="true" /> if it is enabled, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DiagnosticListener.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Diagnostics.DiagnosticListener.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3ea6-126">Ruft den Namen dieses <see cref="T:System.Diagnostics.DiagnosticListener" /> ab.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-126">Gets the name of this <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></summary>
        <value><span data-ttu-id="c3ea6-127">Der Name des <see cref="T:System.Diagnostics.DiagnosticListener" />-Objekts.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-127">The name of the <see cref="T:System.Diagnostics.DiagnosticListener" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public override void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticListener.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="c3ea6-128">Die Aktivität, die von einem externen Ereignis betroffen ist.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-128">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="c3ea6-129">Ein Objekt, das die ausgehende Anforderung darstellt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-129">An object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="c3ea6-130">Ruft die OnActivityExport-Methode aller Abonnenten auf</span><span class="sxs-lookup"><span data-stu-id="c3ea6-130">Invokes the OnActivityExport method of all the subscribers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public override void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticListener.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="c3ea6-131">Die Aktivität, die von einem externen Ereignis betroffen ist.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-131">The activity affected by an external event.</span></span></param>
        <param name="payload"><span data-ttu-id="c3ea6-132">Ein Objekt, das die eingehende Anforderung darstellt</span><span class="sxs-lookup"><span data-stu-id="c3ea6-132">An object that represents the incoming request.</span></span></param>
        <summary><span data-ttu-id="c3ea6-133">Ruft die OnActivityImport-Methode aller Abonnenten auf</span><span class="sxs-lookup"><span data-stu-id="c3ea6-133">Invokes the OnActivityImport method of all the subscribers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subscribe">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3ea6-134">Diese Methoden ermöglichen das Hinzufügen eines Abonnenten, und einige von Ihnen stellen optionale Ereignisfiltermethoden bereit.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-134">These methods allow adding a subscriber, and some of them provide optional event filtering methods.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe observer" />
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IObservable`1.Subscribe(System.IObserver{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="c3ea6-135">Ein Abonnent.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-135">A subscriber.</span></span></param>
        <summary><span data-ttu-id="c3ea6-136">Fügt einen Abonnenten hinzu.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-136">Adds a subscriber.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-137">Ein Verweis auf eine Schnittstelle, mit der der Listener den Empfang von Benachrichtigungen beenden kann, bevor die <see cref="T:System.Diagnostics.DiagnosticSource" /> das Absenden der Benachrichtigungen abgeschlossen hat.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-137">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Func&lt;string,object,object,bool&gt; isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Func`4&lt;string, object, object, bool&gt; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Func(Of String, Object, Object, Boolean)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer, Func&lt;System::String ^, System::Object ^, System::Object ^, bool&gt; ^ isEnabled);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="c3ea6-138">Ein Abonnent.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-138">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="c3ea6-139">Ein Delegat, der Ereignisse auf der Grundlage ihres Namens und von bis zu zwei Kontextobjekten filtert (die <see langword="null" /> sein können), oder <see langword="null" />, wenn ein Ereignisfilter nicht erwünscht ist.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-139">A delegate that filters events based on their name and up to two context objects (which can be <see langword="null" />), or <see langword="null" /> to if an event filter is not desirable.</span></span></param>
        <summary><span data-ttu-id="c3ea6-140">Fügt einen Abonnenten hinzu und filtert optional Ereignisse auf der Grundlage ihres Namens und von bis zu zwei Kontextobjekten.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-140">Adds a subscriber, and optionally filters events based on their name and up to two context objects.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-141">Ein Verweis auf eine Schnittstelle, mit der der Listener den Empfang von Benachrichtigungen beenden kann, bevor die <see cref="T:System.Diagnostics.DiagnosticSource" /> das Absenden der Benachrichtigungen abgeschlossen hat.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-141">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="c3ea6-142">Wenn `isEnabled` nicht `null`ist, weist dies darauf hin, dass einige Ereignisse nicht interessant sind und für Effizienz übersprungen werden können.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-142">If `isEnabled` is not `null`, it indicates that some events are uninteresting can be skipped for efficiency.</span></span>

<span data-ttu-id="c3ea6-143">Eine bestimmte Instrumentations Site hat die Möglichkeit, eine oder mehrere <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> Überladungen aufzurufenden, in denen Sie den Namen des Ereignisses und bis zu zwei andere Objekte (Instrumentierungs Site spezifisch) als Argumente übergibt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-143">A particular instrumentation site has the option of calling one or more <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> overloads  in which it passes the name of the event and up to two other (instrumentation site specific) objects as arguments.</span></span> <span data-ttu-id="c3ea6-144">Wenn einer dieser <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> Aufrufe erfolgt, wird dieses `isEnabled` Prädikat mit übergebenen Werten aufgerufen (Wenn kürzere über Ladungen verwendet werden, `null` für fehlende Kontext Objekte weitergegeben).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-144">If any of these <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> calls are made then this `isEnabled` predicate is invoked with passed values (if shorter overloads are used, `null` is passed for missing context objects).</span></span>

<span data-ttu-id="c3ea6-145">Dadurch erhält eine bestimmte Instrumentations Site die Möglichkeit, bis zu zwei Informationen an den Abonnenten zu übergeben, um eine ausgereifte, effiziente Filterung durchzuführen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-145">This gives any particular instrumentation site the ability to pass up to two pieces of information to the subscriber to do sophisticated, efficient filtering.</span></span> <span data-ttu-id="c3ea6-146">Dies erfordert eine bessere Kopplung zwischen der Instrumentations Site und dem Abonnenten Code.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-146">This requires more coupling between the instrumentation site and the subscriber code.</span></span>

<span data-ttu-id="c3ea6-147">Es wird erwartet, dass eine bestimmte Instrumentations Site verschiedene über Ladungen von `IsEnabled` für dasselbe Ereignis aufruft und zuerst <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)>aufruft, der den Filter mit zwei `null` Kontext Objekten aufruft.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-147">It is expected that a particular instrumentation site may call different overloads of `IsEnabled` for the same event, first calling <xref:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)>, which calls the filter with two `null` context objects.</span></span> <span data-ttu-id="c3ea6-148">Wenn `isEnabled` `true`zurückgibt, wird erneut mit Kontext Objekten aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-148">If `isEnabled` returns `true`, it calls again with context objects.</span></span> <span data-ttu-id="c3ea6-149">Der `isEnabled` Filter sollte in diesem Sinne entworfen werden.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-149">The `isEnabled` filter should be designed with this in mind.</span></span>

<span data-ttu-id="c3ea6-150">Beachten Sie, dass das `isEnabled`-Prädikat eine optionale Optimierung ist, damit die Instrumentations Site das Einrichten der Nutzlast und das Aufrufen von <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> vermeiden kann, wenn kein Abonnent Sie interessiert.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-150">Note that the `isEnabled` predicate is an optional optimization to allow the instrumentation site to avoid setting up the payload and calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> when no subscriber cares about it.</span></span> <span data-ttu-id="c3ea6-151">Insbesondere die Instrumentations Site hat die Möglichkeit, das <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> Prädikat (ohne Aufruf) zu ignorieren und einfach <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>abzurufen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-151">In particular, the instrumentation site has the option of ignoring the <xref:System.Diagnostics.DiagnosticListener.IsEnabled%2A> predicate (not calling it) and simply calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span></span> <span data-ttu-id="c3ea6-152">Wenn der Abonnent also das Filtern erfordert, muss er sich selbst durchführen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-152">Thus, if the subscriber requires the filtering, it needs to do it itself.</span></span>

<span data-ttu-id="c3ea6-153">Wenn dieser Parameter `null`ist, erfolgt keine Filterung (alle über Ladungen von <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> Rückgabe `true`).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-153">If this parameter is `null`, no filtering is done (all overloads of <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> return `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Predicate&lt;string&gt; isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Predicate`1&lt;string&gt; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Predicate(Of String)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ Subscribe(IObserver&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ observer, Predicate&lt;System::String ^&gt; ^ isEnabled);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Predicate&lt;string&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Predicate&lt;string&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="isEnabled" Type="System.Predicate&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="c3ea6-154">Ein Abonnent.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-154">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="c3ea6-155">Ein Delegat, der Ereignisse auf der Grundlage ihres Namens filtert (<see cref="T:System.String" />).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-155">A delegate that filters events based on their name (<see cref="T:System.String" />).</span></span> <span data-ttu-id="c3ea6-156">Der Delegat sollte <see langword="true" /> zurückgeben, wenn das Ereignis aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-156">The delegate should return <see langword="true" /> if the event is enabled.</span></span></param>
        <summary><span data-ttu-id="c3ea6-157">Fügt einen Abonnenten hinzu und filtert optional Ereignisse auf der Grundlage ihres Namens.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-157">Adds a subscriber, and optionally filters events based on their name.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-158">Ein Verweis auf eine Schnittstelle, mit der der Listener den Empfang von Benachrichtigungen beenden kann, bevor die <see cref="T:System.Diagnostics.DiagnosticSource" /> das Absenden der Benachrichtigungen abgeschlossen hat.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-158">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="c3ea6-159">Wenn `isEnabled` nicht `null`ist, sind einige Ereignisse nicht interessant und können aus Effizienzgründen übersprungen werden.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-159">If `isEnabled` is not `null`, some events are uninteresting and can be skipped for efficiency.</span></span> <span data-ttu-id="c3ea6-160">Das `isEnabled`-Prädikat ist eine optionale Optimierung, damit die Instrumentations Site das Einrichten der Nutzlast und das Aufrufen von <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> vermeiden kann, wenn kein Abonnent Sie interessiert.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-160">The `isEnabled` predicate is an optional optimization to allow the instrumentation site to avoid setting up the payload and calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)> when no subscriber cares about it.</span></span> <span data-ttu-id="c3ea6-161">Insbesondere die Instrumentations Site hat die Möglichkeit, das <xref:System.Diagnostics.DiagnosticListener.IsEnabled> Prädikat (nicht aufrufen) zu ignorieren und einfach <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>abzurufen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-161">In particular the instrumentation site has the option of ignoring the <xref:System.Diagnostics.DiagnosticListener.IsEnabled> predicate (not calling it) and simply calling <xref:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)>.</span></span> <span data-ttu-id="c3ea6-162">Wenn der Abonnent also das Filtern erfordert, muss er sich selbst durchführen.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-162">Thus if the subscriber requires the filtering, it needs to do it itself.</span></span>

<span data-ttu-id="c3ea6-163">Wenn `isEnabled` `null`ist, erfolgt keine Filterung (alle über Ladungen von <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> geben `true`zurück).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-163">If `isEnabled` is `null`, no filtering is done (all overloads of <xref:System.Diagnostics.DiagnosticSource.IsEnabled%2A> return `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public virtual IDisposable Subscribe (IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; observer, Func&lt;string,object,object,bool&gt; isEnabled, Action&lt;System.Diagnostics.Activity,object&gt; onActivityImport = null, Action&lt;System.Diagnostics.Activity,object&gt; onActivityExport = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; observer, class System.Func`4&lt;string, object, object, bool&gt; isEnabled, class System.Action`2&lt;class System.Diagnostics.Activity, object&gt; onActivityImport, class System.Action`2&lt;class System.Diagnostics.Activity, object&gt; onActivityExport) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean},System.Action{System.Diagnostics.Activity,System.Object},System.Action{System.Diagnostics.Activity,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subscribe (observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Func(Of String, Object, Object, Boolean), Optional onActivityImport As Action(Of Activity, Object) = null, Optional onActivityExport As Action(Of Activity, Object) = null) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; -&gt; IDisposable&#xA;override this.Subscribe : IObserver&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; * Func&lt;string, obj, obj, bool&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; * Action&lt;System.Diagnostics.Activity, obj&gt; -&gt; IDisposable" Usage="diagnosticListener.Subscribe (observer, isEnabled, onActivityImport, onActivityExport)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="onActivityImport" Type="System.Action&lt;System.Diagnostics.Activity,System.Object&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="onActivityExport" Type="System.Action&lt;System.Diagnostics.Activity,System.Object&gt;" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="c3ea6-164">Ein Abonnent.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-164">A subscriber.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="c3ea6-165">Ein Delegat, der Ereignisse auf der Grundlage ihres Namens und von bis zu zwei Kontextobjekten filtert (die <see langword="null" /> sein können), oder <see langword="null" />, wenn ein Ereignisfilter nicht erwünscht ist</span><span class="sxs-lookup"><span data-stu-id="c3ea6-165">A delegate that filters events based on their name and up to two context objects (which can be <see langword="null" />), or <see langword="null" /> if an event filter is not desirable.</span></span></param>
        <param name="onActivityImport"><span data-ttu-id="c3ea6-166">Ein Action-Delegat, der die betroffene Aktivität von einem externen Ereignis sowie von einem Objekt, das die eingehende Anforderung darstellt, empfängt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-166">An action delegate that receives the activity affected by an external event and an object that represents the incoming request.</span></span></param>
        <param name="onActivityExport"><span data-ttu-id="c3ea6-167">Ein Action-Delegat, der die betroffene Aktivität von einem externen Ereignis sowie von einem Objekt, das die ausgehende Anforderung darstellt, empfängt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-167">An action delegate that receives the activity affected by an external event and an object that represents the outgoing request.</span></span></param>
        <summary><span data-ttu-id="c3ea6-168">Fügt einen Abonnenten hinzu, filtert optional Ereignisse auf der Grundlage ihres Namens und von bis zu zwei Kontextobjekten, und gibt Methoden an, die aufgerufen werden sollen, wenn Anbieter Aktivitäten von außerhalb des Prozesses importieren oder exportieren.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-168">Adds a subscriber, optionally filters events based on their name and up to two context objects, and specifies methods to call when providers import or export activites from outside the process.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-169">Ein Verweis auf eine Schnittstelle, mit der der Listener den Empfang von Benachrichtigungen beenden kann, bevor die <see cref="T:System.Diagnostics.DiagnosticSource" /> das Absenden der Benachrichtigungen abgeschlossen hat.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-169">A reference to an interface that allows the listener to stop receiving notifications before the <see cref="T:System.Diagnostics.DiagnosticSource" /> has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c3ea6-170">Wenn `isEnabled` ungleich NULL ist, können einige Ereignisse für Effizienz übersprungen werden.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-170">If `isEnabled` is non-null, some events are uninteresting can be skipped for efficiency.</span></span>  

<span data-ttu-id="c3ea6-171">Sie können auch die Methoden ' onactivityimport ' und ' onactivityexport ' angeben, die aufgerufen werden, wenn Anbieter Aktivitäten von außerhalb des Prozesses importieren oder exportieren (z. b. aus HTTP-Anforderungen).</span><span class="sxs-lookup"><span data-stu-id="c3ea6-171">You can also supply 'onActivityImport' and 'onActivityExport' methods that are called when providers importing or export activities from outside the process (for example, from HTTP requests).</span></span> <span data-ttu-id="c3ea6-172">Diese Methoden werden nach dem Importieren oder Exportieren der Aktivität aufgerufen und können verwendet werden, um die Aktivität oder die ausgehende Anforderung zum Hinzufügen von Richtlinien zu ändern.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-172">These methods are called after importing or exporting the activity and can be used to modify the activity or the outgoing request to add policy.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="diagnosticListener.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3ea6-173">Gibt eine Zeichenfolge mit dem Namen dieses DiagnosticListener zurück.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-173">Returns a string with the name of this DiagnosticListener.</span></span></summary>
        <returns><span data-ttu-id="c3ea6-174">Der Name dieses DiagnosticListener.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-174">The name of this DiagnosticListener.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string name, object value);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string name, object value) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (name As String, value As Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ name, System::Object ^ value);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="diagnosticListener.Write (name, value)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="public override void Write (string name, object parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string name, object parameters) cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (name As String, parameters As Object)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ name, System::Object ^ parameters);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="diagnosticListener.Write (name, parameters)" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
        <Parameter Name="parameters" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3ea6-175">Der Name des zu protokollierenden Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-175">The name of the event to log.</span></span></param>
        <param name="value"><span data-ttu-id="c3ea6-176">Ein Objekt, das die Nutzlast für das Ereignis darstellt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-176">An object that represents the payload for the event.</span></span></param>
        <param name="parameters"><span data-ttu-id="c3ea6-177">Ein Objekt, das die Nutzlast für das Ereignis darstellt.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-177">An object that represents the payload for the event.</span></span></param>
        <summary><span data-ttu-id="c3ea6-178">Protokolliert eine Benachrichtigung.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-178">Logs a notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c3ea6-179">Weitere Informationen finden Sie unter der Methode <xref:System.Diagnostics.DiagnosticSource.Write%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c3ea6-179">For more information, see the <xref:System.Diagnostics.DiagnosticSource.Write%2A?displayProperty=nameWithType> method.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

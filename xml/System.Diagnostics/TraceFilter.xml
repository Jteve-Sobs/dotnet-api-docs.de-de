<Type Name="TraceFilter" FullName="System.Diagnostics.TraceFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5888bf7681cd6d6b4f34e2052e251616ff240f27" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69075409" /></Metadata><TypeSignature Language="C#" Value="public abstract class TraceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TraceFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TraceFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceFilter abstract" />
  <TypeSignature Language="F#" Value="type TraceFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Basisklasse für Implementierungen von Ablaufverfolgungsfiltern bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ablauf Verfolgungs Filter können von Ablaufverfolgungslistenern verwendet werden, um eine zusätzliche Ebene der Filterung bereitzustellen Der Ablauf Verfolgungs Filter für einen Ablaufverfolgungslistener finden <xref:System.Diagnostics.TraceListener.Filter%2A> Sie in der-Eigenschaft des-Listener. Ablauf Verfolgungs Schalter bestimmen, ob eine Ablauf Verfolgung an die Ablaufverfolgungslistener gesendet werden soll. Mit Ablauf Verfolgungs filtern können die einzelnen Ablaufverfolgungslistener bestimmen, ob die Ablauf Verfolgung in das zugeordnete Ausgabe Medium geschrieben werden soll. Beispielsweise kann eine Ablauf Verfolgung, die von jedem Ablauf Verfolgungs Filter bestimmt wird, von a <xref:System.Diagnostics.ConsoleTraceListener>, jedoch nicht in das Ereignisprotokoll <xref:System.Diagnostics.EventLogTraceListener>von einer geschrieben werden.  
  
 Filter, die von der <xref:System.Diagnostics.TraceFilter> -Klasse erben, können von Ablaufverfolgungslistenern verwendet werden, die von der-Klasse erben, um die <xref:System.Diagnostics.TraceListener> Ablauf Verfolgung von Ereignissen <xref:System.Diagnostics.TraceFilter>enthält eine einzelne Methode, <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>, die Ereignisdaten annimmt und ein Flag zurückgibt, das angibt, ob das Ereignis verfolgt werden soll.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TraceFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TraceFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.TraceFilter" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldTrace">
      <MemberSignature Language="C#" Value="public abstract bool ShouldTrace (System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldTrace(class System.Diagnostics.TraceEventCache cache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ShouldTrace (cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool ShouldTrace(System::Diagnostics::TraceEventCache ^ cache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ formatOrMessage, cli::array &lt;System::Object ^&gt; ^ args, System::Object ^ data1, cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member ShouldTrace : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] * obj * obj[] -&gt; bool" Usage="traceFilter.ShouldTrace (cache, source, eventType, id, formatOrMessage, args, data1, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="formatOrMessage" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="data1" Type="System.Object" />
        <Parameter Name="data" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="cache">Der <see cref="T:System.Diagnostics.TraceEventCache" />, der Informationen für das Ablaufverfolgungsereignis enthält.</param>
        <param name="source">Der Name der Quelle.</param>
        <param name="eventType">Einer der <see cref="T:System.Diagnostics.TraceEventType" />-Werte, der den Typ des Ereignisses angibt, das die Ablaufverfolgung verursacht hat.</param>
        <param name="id">Eine Ablaufverfolgungs-Bezeichnernummer.</param>
        <param name="formatOrMessage">Entweder das Format, das für das Schreiben eines Arrays von Argumenten verwendet werden soll, die vom <paramref name="args" />-Parameter angegeben werden, oder eine zu schreibende Meldung.</param>
        <param name="args">Ein Array von Argumentobjekten.</param>
        <param name="data1">Ein Ablaufverfolgungs-Datenobjekt.</param>
        <param name="data">Ein Array von Ablaufverfolgungs-Datenobjekten.</param>
        <summary>Bestimmt beim Überschreiben in einer abgeleiteten Klasse, ob der Ablaufverfolgungslistener eine Ablaufverfolgung für das Ereignis durchführen soll.</summary>
        <returns><see langword="true" />, um das angegebene Ereignis zu verfolgen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> -Methode überschrieben wird, um anzugeben, dass die Ablauf Verfolgung auftreten soll, wenn <xref:System.Diagnostics.TraceEventType.Error?displayProperty=nameWithType>der Ablauf Verfolgungs Ereignistyp des Ereignisses gleich ist  
  
 [!code-cpp[System.Diagnostics.TraceFilter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cpp/source.cpp#2)]
 [!code-csharp[System.Diagnostics.TraceFilter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cs/source.cs#2)]
 [!code-vb[System.Diagnostics.TraceFilter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.tracefilter/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementierungen dieser Methode sollten zurückgeben <see langword="true" /> , wenn das Ereignis, das von den bestandenen Parametern angegeben wird, verfolgt werden soll. Andernfalls sollte die-Methode <see langword="false" />zurückgeben. Ein Filter, der nur das passieren von Fehlerereignissen an den Listener zulässt, sollte beispielsweise den <paramref name="eventType" /> -Parameter über <see langword="true" /> prüfen und zurückgeben, wenn die Typ Ebene <see cref="F:System.Diagnostics.TraceEventType.Error" /> des Ablauf Verfolgungs Ereignisses auf oder höher fest <see langword="false" />gelegt ist. andernfalls sollte Sie zurückgeben.  
  
Implementierungen der-Methode sollten <see langword="null" /> für die Behandlung von in den folgenden Parametern vorbereitet werden: <paramref name="formatOrMessage" /> <paramref name="args" />, <paramref name="data1" />, <paramref name="cache" /> <paramref name="data" />, und. Wenn der-Parameterwert <see langword="null" />ist, ist der-Parameter nicht Teil des-Ereignisses. Wenn der <paramref name="args" /> -Parameter beispielsweise ist <see langword="null" />, bedeutet dies, dass das Ereignis keine Argumente hat. Wenn der <paramref name="data" /> -Parameter <see langword="null" />ist, gibt es entweder ein oder kein Datenobjekt. Wenn ein Datenobjekt vorhanden ist, wird es im <paramref name="data1" /> -Parameter gefunden. Der Grund für den Unterschied zwischen einem einzelnen Datenobjekt und einem Array von Datenobjekten ist die Leistung. Es gibt keinen Grund, ein Objekt Array zu erstellen, wenn nur ein Objekt nachverfolgt wird, wie es in der Regel der Fall ist. Wenn der <paramref name="data" /> -Parameter nicht <see langword="null" />ist, <paramref name="data1" /> muss der-Parameter auch <see langword="null" />nicht sein.  
  
Es ist sichergestellt, <paramref name="source" /> dass der- <see langword="null" /> Parameter nicht und keine leere Zeichenfolge ("") ist.  
  
Implementierungen der-Methode können optional die folgenden Ausnahmen auslösen: 
-   <see cref="T:System.ArgumentNullException" />Wenn <paramref name="source" /> ist <see langword="null" />.  
  
-   <see cref="T:System.ArgumentException" />Wenn <paramref name="eventType" /> keiner<see cref="T:System.Diagnostics.TraceEventType" /> der-Werte ist.  
  
-Ausnahmen, die nicht mit der Implementierung der Methode in Zusammenhang stehen. Beispielsweise ein <see cref="T:System.Threading.ThreadAbortException" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

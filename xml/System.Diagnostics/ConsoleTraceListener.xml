<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c3cb6ca76cf168420256ee203732c7ac72a08733" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83975361" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Leitet Ablaufverfolgungs- und Debugausgaben entweder an die Standardausgabe oder an den Standardfehlerstream.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden <xref:System.Diagnostics.ConsoleTraceListener> Sie die-Klasse zum Schreiben von Ablauf Verfolgungs-und Debugmeldungen in die Konsole. Sie können ein-Objekt initialisieren <xref:System.Diagnostics.ConsoleTraceListener> , um Ablauf Verfolgungs Meldungen in den <xref:System.Console.Out%2A?displayProperty=nameWithType> Stream oder in den Stream zu schreiben <xref:System.Console.Error%2A?displayProperty=nameWithType> .  
  
> [!IMPORTANT]
>  <xref:System.IDisposable>-Schnittstelle. Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen. Um den Typ direkt zu löschen, müssen Sie seine- <xref:System.IDisposable.Dispose%2A> Methode in einem-Block aufzurufen `try` / `catch` . Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.  
  
 Wenn die Ablaufverfolgungs-und Debugausgabe aktiviert ist, <xref:System.Diagnostics.ConsoleTraceListener> werden die Nachrichten in den angegebenen <xref:System.Console?displayProperty=nameWithType> Stream geschrieben. Dies ähnelt der Art und Weise, wie Nachrichten mit den <xref:System.Console.Write%2A?displayProperty=nameWithType> Methoden oder geschrieben werden <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> . In einer Konsolenanwendung schreiben die <xref:System.Console?displayProperty=nameWithType> Ausgabe-und Fehler Datenströme Meldungen in das vorhandene Konsolenfenster, oder Sie können die Streams umleiten, um Sie in eine-Instanz zu schreiben <xref:System.IO.TextWriter?displayProperty=nameWithType> .  
  
> [!NOTE]
>  Wenn die Konsole nicht vorhanden ist (wie in einer Windows-basierten Anwendung), werden Nachrichten, die in die Konsole geschrieben werden, nicht angezeigt.  
  
 Fügen Sie der entsprechenden Auflistung ein-Objekt hinzu, <xref:System.Diagnostics.ConsoleTraceListener> <xref:System.Diagnostics.Trace.Listeners%2A> Wenn Sie möchten, dass Nachrichten, die über <xref:System.Diagnostics.Trace> , oder geschrieben werden, <xref:System.Diagnostics.TraceSource> <xref:System.Diagnostics.Debug> in die Konsole geschrieben werden sollen. Darüber hinaus können Sie mit der-Methode oder der-Methode Meldungen direkt in die Konsole schreiben <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> .  
  
> [!NOTE]
>  Die <xref:System.Diagnostics.Debug> Klassen und verwenden <xref:System.Diagnostics.Trace> dieselbe Auflistung, auf die <xref:System.Diagnostics.TraceListenerCollection> über die entsprechenden `Listeners` Eigenschaften zugegriffen wird. Wenn Sie der Auflistung ein-Objekt hinzufügen <xref:System.Diagnostics.ConsoleTraceListener> , indem Sie eine dieser Klassen verwenden, verwendet die andere Klasse automatisch denselben Listener.  
  
 Die meisten Compiler ermöglichen die Ablaufverfolgungs-und Debugausgabe durch bedingte Kompilierungs Flags. Wenn Sie die Ablauf Verfolgung oder das Debuggen nicht aktivieren, werden die Nachrichten, die über die <xref:System.Diagnostics.Debug?displayProperty=nameWithType> Klassen und geschrieben <xref:System.Diagnostics.Trace?displayProperty=nameWithType> werden, tatsächlich ignoriert Die Syntax zum Aktivieren der Ablauf Verfolgung und Debugausgabe ist compilerspezifisch. Wenn Sie andere Compiler als c# oder Visual Basic verwenden, finden Sie in der Dokumentation Ihres Compiler weitere Informationen.  
  
-   Fügen Sie zum Aktivieren des Debuggens in c# das Flag **/d: Debug**zur Compilerbefehlszeile hinzu, wenn Sie den Code kompilieren, oder fügen Sie **#define DEBUG** am Anfang der Datei hinzu. Fügen Sie in Visual Basic das Flag **/d: Debug = true** der Compilerbefehlszeile hinzu.  
  
-   Fügen Sie zum Aktivieren der Ablauf Verfolgung in c# das Flag **/d: Trace** der Compilerbefehlszeile hinzu, wenn Sie den Code kompilieren, oder fügen Sie **#define** Ablauf Verfolgung am Anfang der Datei hinzu. Fügen Sie in Visual Basic das Flag **/d: Trace = true** der Compilerbefehlszeile hinzu.  
  
 Sie können der Auflistung ein- <xref:System.Diagnostics.ConsoleTraceListener> Objekt <xref:System.Diagnostics.Trace.Listeners%2A> in Ihrem Code hinzufügen, oder Sie können der-Auflistung ein- <xref:System.Diagnostics.ConsoleTraceListener> Objekt <xref:System.Diagnostics.Trace.Listeners%2A> über die Anwendungs Konfigurationsdatei hinzufügen. Fügen Sie das- <xref:System.Diagnostics.ConsoleTraceListener> Objekt im Code hinzu, um Nachrichten für einen bestimmten Code Abschnitt oder Ausführungs Pfad zu schreiben. Fügen Sie das- <xref:System.Diagnostics.ConsoleTraceListener> Objekt in der Anwendungs Konfigurationsdatei hinzu, um alle Ablauf Verfolgungs-und Debugmeldungen an die Konsole weiterzuleiten, während die Anwendung  
  
 Um Ablauf Verfolgungs-und Debugmeldungen in der Konsole für einen bestimmten Code Abschnitt zu schreiben, initialisieren <xref:System.Diagnostics.ConsoleTraceListener> Sie ein-Objekt, und fügen Sie es der-Auflistung hinzu <xref:System.Diagnostics.Trace.Listeners%2A> . Instrumentieren Sie den Code Abschnitt, der Nachrichten enthält, mithilfe der <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.Debug> Klassen oder. Entfernen Sie am Ende des Code Abschnitts das <xref:System.Diagnostics.ConsoleTraceListener> -Objekt aus der <xref:System.Diagnostics.Trace.Listeners%2A> -Auflistung, und wenden Sie die- <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> Methode für das-Objekt an <xref:System.Diagnostics.ConsoleTraceListener> .  
  
 Um alle Ablauf Verfolgungs-und Debugmeldungen an die Konsole zu leiten, während die Anwendung ausgeführt wird, fügen Sie <xref:System.Diagnostics.ConsoleTraceListener> der Anwendungs Konfigurationsdatei ein-Objekt hinzu. Bearbeiten Sie die Konfigurationsdatei, die dem Namen der Anwendung entspricht, oder die app.config Datei in einem [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Projekt. Fügen Sie in dieser Datei ein Element für ein ein <xref:System.Diagnostics.ConsoleTraceListener> .  
  
 Im folgenden Beispiel wird der-Auflistung ein- <xref:System.Diagnostics.ConsoleTraceListener> Objekt mit dem Namen hinzugefügt `configConsoleListener` <xref:System.Diagnostics.Trace.Listeners%2A> .  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 Details zum Hinzufügen von Ablaufverfolgungslistenern in der Anwendungs Konfigurationsdatei [ &lt; &gt; finden Sie](/dotnet/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace)unter Listener  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Konsolenanwendung implementiert, die aus einer-Klasse mit zwei öffentlichen Methoden besteht.  
  
 Die `Main` -Methode untersucht die Befehlszeilenargumente und bestimmt, ob die Ablauf Verfolgungs Ausgabe an den Standardfehlerstream oder den Standardausgabestream umgeleitet werden soll. `Main`erstellt und initialisiert ein- <xref:System.Diagnostics.ConsoleTraceListener> Objekt für den angegebenen <xref:System.Console> Ausgabestream und fügt dieses Objekt der Auflistung der Ablaufverfolgungslistener hinzu. Anschließend wird die- `WriteEnvironmentInfoToTrace` Methode aufgerufen, die Details über die ausgeführte Umgebung und die ablaufverfolgungslistenerkonfiguration in die Ausgabe der Ablauf Verfolgung schreibt.  
  
 Wenn die Beispielanwendung ausgeführt wird, werden die Umgebungs-und Konfigurationsdetails der Ablauf Verfolgung durch das-Objekt in den angegebenen Konsolenausgabe Datenstrom geschrieben <xref:System.Diagnostics.ConsoleTraceListener> .  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.ConsoleTraceListener" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.ConsoleTraceListener" />-Klasse, wobei die Ablaufverfolgungsausgabe in den Standardausgabestream geschrieben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert ein- <xref:System.Diagnostics.ConsoleTraceListener> Objekt, um Nachrichten in den Stream zu schreiben <xref:System.Console.Out%2A?displayProperty=nameWithType> . Die zugehörige- <xref:System.Diagnostics.TraceListener.Name%2A> Eigenschaft wird mit einer leeren Zeichenfolge ("") initialisiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Diagnostics.ConsoleTraceListener> -Objekt für den angegebenen <xref:System.Console> Ausgabestream initialisiert und der Auflistung der Ablauf Verfolgungs Listener hinzugefügt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Diagnostics.ConsoleTraceListener> .  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream"><see langword="true" />, um die Ablaufverfolgungs- und Debugausgabe in den Standardfehlerstream zu schreiben. <see langword="false" />, um die Ablaufverfolgungs- und Debugausgabe in den Standardausgabestream zu schreiben.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.ConsoleTraceListener" />-Klasse mit einer Option, die Ablaufverfolgungsausgabe in den Standardausgabestream oder in den Standardfehlerstream zu schreiben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert ein- <xref:System.Diagnostics.ConsoleTraceListener> Objekt, um Nachrichten entweder in den <xref:System.Console.Out%2A?displayProperty=nameWithType> oder den Stream zu schreiben <xref:System.Console.Error%2A?displayProperty=nameWithType> . Die zugehörige- <xref:System.Diagnostics.TraceListener.Name%2A> Eigenschaft wird mit einer leeren Zeichenfolge ("") initialisiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein <xref:System.Diagnostics.ConsoleTraceListener> -Objekt für den angegebenen <xref:System.Console> Ausgabestream initialisiert und der Auflistung der Ablauf Verfolgungs Listener hinzugefügt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Diagnostics.ConsoleTraceListener> .  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt die Ausgabe in den für diesen Ablaufverfolgungslistener angegebenen Datenstrom.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der für diese Instanz angegebene Stream <xref:System.Diagnostics.ConsoleTraceListener> (entweder der <xref:System.Console.Out%2A?displayProperty=nameWithType> Stream oder der <xref:System.Console.Error%2A?displayProperty=nameWithType> Stream) ist geschlossen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

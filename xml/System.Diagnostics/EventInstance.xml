<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f8cdc134f454df49c0ed41822f3890e30740557" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70601622" /></Metadata><TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <TypeSignature Language="F#" Value="type EventInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt sprachneutrale Informationen für einen Ereignisprotokolleintrag dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden <xref:System.Diagnostics.EventInstance> Sie, um einen Ereignisprotokoll Eintrag mit einem Ressourcen Bezeichner und nicht mit einem Zeichen folgen Wert zu schreiben. Zum Schreiben eines Ereignisprotokoll Eintrags initialisieren Sie <xref:System.Diagnostics.EventInstance.InstanceId%2A> die-Eigenschaft, und übergeben Sie <xref:System.Diagnostics.EventLog.WriteEvent%2A> die-Instanz an die-Methode. Der Ereignisanzeige verwendet den Instanzbezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Ressourcen Datei zu suchen und anzuzeigen. Sie müssen die Ereignis Quelle mit der entsprechenden Ressourcen Datei registrieren, bevor Sie Ereignisse mithilfe von Ressourcen bezeichgern schreiben.  
  
 Wenn Sie Ereignisse schreiben, können Sie die <xref:System.Diagnostics.EventInstance.EntryType%2A> -Eigenschaft festlegen, um das Symbol anzugeben, das die Ereignisanzeige für den Eintrag anzeigt. Sie können auch eine <xref:System.Diagnostics.EventInstance.CategoryId%2A> Eigenschaft angeben, um die Kategorie anzugeben, die der Ereignisanzeige für den Eintrag anzeigt.  
  
 Der Ereignisanzeige verwendet die Kategorie zum Filtern von Ereignissen, die von einer Ereignis Quelle geschrieben wurden. Der Ereignisanzeige kann die Kategorie als numerischen Wert anzeigen, oder die Kategorie kann als Ressourcen Bezeichner verwendet werden, um eine lokalisierte Kategoriezeichenfolge anzuzeigen.  
  
 Wenn Sie im Ereignisanzeige lokalisierte Kategoriezeichenfolgen anzeigen möchten, müssen Sie eine mit einer Kategorieressourcendatei konfigurierte Ereignis Quelle verwenden und <xref:System.Diagnostics.EventInstance.CategoryId%2A> auf einen Ressourcen Bezeichner in der Ressourcen Datei der Kategorie festlegen. , Wenn die Ereignis Quelle nicht über eine konfigurierte Kategorieressourcendatei <xref:System.Diagnostics.EventInstance.CategoryId%2A> verfügt, oder die angegebene keine Zeichenfolge in der Ressourcen Datei der Kategorie indiziert, und dann wird im Ereignisanzeige der Wert der numerischen Kategorie für diesen Eintrag angezeigt. Konfigurieren Sie die Kategorieressourcendatei und die Anzahl der Kategoriezeichenfolgen in <xref:System.Diagnostics.EventLogInstaller> der Ressourcen <xref:System.Diagnostics.EventSourceCreationData> Datei mithilfe der-Klasse oder der-Klasse.  
  
 Sie müssen eine Quelle für ein Ereignisprotokoll registrieren, bevor <xref:System.Diagnostics.EventInstance> Sie zum Schreiben eines Ereignisses mit <xref:System.Diagnostics.EventLog.WriteEvent%2A> der-Methode verwenden. Die Quelle muss konfiguriert werden, damit lokalisierte Einträge in das Protokoll geschrieben werden, und die Quelle muss mindestens eine Nachrichten Ressourcen Datei definieren.  
  
 Erstellen Sie die neue Ereignis Quelle während der Installation der Anwendung. Dies ermöglicht es dem Betriebssystem, die Liste der registrierten Ereignis Quellen und deren Konfigurationen zu aktualisieren. Wenn das Betriebssystem die Liste der Ereignis Quellen nicht aktualisiert hat und Sie versuchen, ein Ereignis mit der neuen Quelle zu schreiben, tritt beim Schreibvorgang ein Fehler auf. Sie können eine neue Quelle mithilfe <xref:System.Diagnostics.EventLogInstaller>von oder mithilfe der <xref:System.Diagnostics.EventLog.CreateEventSource%2A> -Methode konfigurieren. Sie müssen über Administratorrechte auf dem Computer verfügen, um eine neue Ereignis Quelle zu erstellen.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignisprotokoll-Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der [http://msdn.microsoft.com](https://msdn.microsoft.com)Platform SDK-Dokumentation unter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Informations Ereignis Eintrag geschrieben und dann erneut verwendet <xref:System.Diagnostics.EventInstance> , um einen Eintrag für ein Warnungs Ereignis in ein vorhandenes Ereignisprotokoll zu schreiben. Der Text der Ereignismeldung wird mithilfe eines Ressourcen Bezeichners in einer Nachrichten Ressourcen Datei angegeben. Im Codebeispiel wird davon ausgegangen, dass die entsprechende Nachrichten Ressourcen Datei für die Quelle registriert wurde.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert mithilfe sprachneutraler Informationen zum Definieren eines Ereignisprotokolleintrags eine neue Instanz der <see cref="T:System.Diagnostics.EventInstance" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">Ein Ressourcenbezeichner, der mit einer in der Meldungsressourcendatei der Ereignisquelle definierten Zeichenfolge übereinstimmt.</param>
        <param name="categoryId">Ein Ressourcenbezeichner, der mit einer in der Kategorieressourcendatei der Ereignisquelle definierten Zeichenfolge übereinstimmt oder gleich 0 (null) ist und damit keine Kategorie für das Ereignis spezifiziert.</param>
        <summary>Initialisiert mithilfe der angegebenen Ressourcenbezeichner für die lokalisierte Meldung und des Kategorietexts des Ereigniseintrags eine neue Instanz der <see cref="T:System.Diagnostics.EventInstance" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um einen Informations Eintrag in ein Ereignisprotokoll zu schreiben, initialisieren <xref:System.Diagnostics.EventInstance> Sie einen, und übergeben <xref:System.Diagnostics.EventLog.WriteEvent%2A> Sie ihn an die-Methode. Legen Sie `instanceId` den auf den Ressourcen Bezeichner der Ereignis Nachricht in der <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> entsprechenden Eigenschaft für die Quelle fest. Legen Sie `categoryId` den Wert auf einen numerischen Kategoriewert oder den Ressourcen Bezeichner der Ereignis <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> Kategorie in der-Eigenschaft für `categoryId` die Quelle fest. Legen Sie auf 0 (null) für keine Ereignis Kategorie fest. Die <xref:System.Diagnostics.EventInstance.EntryType%2A> -Eigenschaft für die neue-Instanz ist <xref:System.Diagnostics.EventLogEntryType.Information> standardmäßig auf festgelegt.  
  
 Der Ereignisanzeige verwendet die Ressourcen Bezeichner, um die entsprechenden Zeichen folgen aus den lokalisierten Ressourcen Dateien für die Quelle anzuzeigen. Sie müssen die Quelle mit den entsprechenden Ressourcen Dateien registrieren, bevor Sie Ereignisse mithilfe von Ressourcen bezeichgern schreiben können.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Informations Ereignis Eintrag geschrieben und dann erneut verwendet <xref:System.Diagnostics.EventInstance> , um einen Eintrag für ein Warnungs Ereignis in ein vorhandenes Ereignisprotokoll zu schreiben. Der Text der Ereignismeldung wird mithilfe eines Ressourcen Bezeichners in einer Nachrichten Ressourcen Datei angegeben. Im Codebeispiel wird davon ausgegangen, dass die entsprechende Nachrichten Ressourcen Datei für die Quelle registriert wurde.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="instanceId" />-Parameter ist ein negativer Wert oder ein Wert größer als <see cref="F:System.UInt32.MaxValue" />.  
  
- oder - 
Der <paramref name="categoryId" />-Parameter ist ein negativer Wert oder ein Wert größer als <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int * System.Diagnostics.EventLogEntryType -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId, entryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">Ein Ressourcenbezeichner, der mit einer in der Meldungsressourcendatei der Ereignisquelle definierten Zeichenfolge übereinstimmt.</param>
        <param name="categoryId">Ein Ressourcenbezeichner, der mit einer in der Kategorieressourcendatei der Ereignisquelle definierten Zeichenfolge übereinstimmt oder gleich 0 (null) ist und damit keine Kategorie für das Ereignis spezifiziert.</param>
        <param name="entryType">Ein <see cref="T:System.Diagnostics.EventLogEntryType" />-Wert, der den Ereignistyp angibt.</param>
        <summary>Initialisiert mithilfe der angegebenen Ressourcenbezeichner für die lokalisierte Meldung und des Kategorietexts des Ereigniseintrags sowie des angegebenen Typs des Ereignisprotokolleintrags eine neue Instanz der <see cref="T:System.Diagnostics.EventInstance" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um einen Eintrag in ein Ereignisprotokoll zu schreiben, initialisieren <xref:System.Diagnostics.EventInstance> Sie einen, und übergeben <xref:System.Diagnostics.EventLog.WriteEvent%2A> Sie ihn an die-Methode. Legen Sie `instanceId` den auf den Ressourcen Bezeichner der Ereignis Nachricht in der <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> entsprechenden Eigenschaft für die Quelle fest. Legen Sie `categoryId` den Wert auf einen numerischen Kategoriewert oder den Ressourcen Bezeichner der Ereignis <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> Kategorie in der-Eigenschaft für `categoryId` die Quelle fest. Legen Sie auf 0 (null) für keine Ereignis Kategorie fest.  
  
 Der Ereignisanzeige verwendet die Ressourcen Bezeichner, um die entsprechenden Zeichen folgen aus den lokalisierten Ressourcen Dateien für die Quelle anzuzeigen. Sie müssen die Quelle mit den entsprechenden Ressourcen Dateien registrieren, bevor Sie Ereignisse mithilfe von Ressourcen bezeichgern schreiben können.  
  
 `entryType` Legen Sie auf einen der vordefinierten Eintrags Typen fest. Der Ereignisanzeige verwendet den Ereignistyp, um zu bestimmen, welches Symbol in der Listenansicht des Ereignis Protokolls angezeigt werden soll.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden zwei Überwachungs Ereignis Einträge in das Ereignisprotokoll `myNewLog`geschrieben. Im Codebeispiel werden eine neue Ereignis Quelle und ein neues Ereignisprotokoll erstellt, wenn Sie auf dem lokalen Computer nicht vorhanden sind. Der Text der Ereignismeldung wird mithilfe eines Ressourcen Bezeichners in einer Ressourcen Datei angegeben.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="entryType" /> ist kein gültiger <see cref="T:System.Diagnostics.EventLogEntryType" />-Wert.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> ist ein negativer Wert oder ein Wert größer als <see cref="F:System.UInt32.MaxValue" />.  
  
- oder - 
 <paramref name="categoryId" /> ist ein negativer Wert oder ein Wert größer als <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryId : int with get, set" Usage="System.Diagnostics.EventInstance.CategoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Ressourcenbezeichner ab, der die anwendungsdefinierte Kategorie des Ereigniseintrags angibt, oder legt diesen fest.</summary>
        <value>Ein numerischer Kategoriewert oder Ressourcenbezeichner, der mit einer in der Kategorieressourcendatei der Ereignisquelle definierten Zeichenfolge übereinstimmt. Der Standardwert ist 0 (null) und bedeutet, dass für den Ereigniseintrag keine Kategorie angezeigt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ereignisprotokoll Kategorien sind Anwendungs definierte Werte, mit denen Ereignisse gefiltert werden oder weitere Informationen zum Ereignis bereitgestellt werden. Die Anwendung kann z. b. separate Kategorien für verschiedene Komponenten oder verschiedene Vorgänge definieren.  
  
 Legen Sie <xref:System.Diagnostics.EventInstance.CategoryId%2A> die-Eigenschaft fest, um die Kategorie anzugeben, die der Ereignisanzeige für den Eintrag anzeigt. Der Ereignisanzeige kann die Kategorie als numerischen Wert anzeigen, oder es kann <xref:System.Diagnostics.EventInstance.CategoryId%2A> als Ressourcen Bezeichner verwendet werden, um eine lokalisierte Kategoriezeichenfolge auf der Grundlage der aktuellen Spracheinstellungen anzuzeigen.  
  
 Wenn Sie im Ereignisanzeige lokalisierte Kategoriezeichenfolgen anzeigen möchten, müssen Sie eine mit einer Kategorieressourcendatei konfigurierte Ereignis Quelle verwenden und <xref:System.Diagnostics.EventInstance.CategoryId%2A> auf einen Ressourcen Bezeichner in der Ressourcen Datei der Kategorie festlegen. , Wenn die Ereignis Quelle nicht über eine konfigurierte Kategorieressourcendatei <xref:System.Diagnostics.EventInstance.CategoryId%2A> verfügt, oder die angegebene keine Zeichenfolge in der Ressourcen Datei der Kategorie indiziert, und dann wird im Ereignisanzeige der Wert der numerischen Kategorie für diesen Eintrag angezeigt.  
  
 Sie müssen die Quelle mit der entsprechenden Ressourcen Datei registrieren, bevor Sie Ereignis Kategorien mithilfe von Ressourcen bezeichgern schreiben. Konfigurieren Sie die Kategorieressourcendatei und die Anzahl der Kategoriezeichenfolgen in <xref:System.Diagnostics.EventLogInstaller> der Ressourcen <xref:System.Diagnostics.EventSourceCreationData> Datei mithilfe der-Klasse oder der-Klasse. Wenn Sie Kategoriezeichenfolgen in einer Ressourcen Datei definieren, müssen die kategorieressourcenbezeichner bis zum konfigurierten <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Eigenschafts Wert nacheinander nummeriert werden, beginnend bei 1.  
  
 Ereignis Kategorien sind optional. Wenn die Anwendung keine Kategorien verwendet, legen Sie <xref:System.Diagnostics.EventInstance.CategoryId%2A> für den Ereignisprotokoll Eintrag nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform [http://msdn.microsoft.com](https://msdn.microsoft.com/)SDK-Dokumentation unter. Ausführliche Informationen zum Definieren von Ereignis Kategorien in Ressourcen Dateien finden Sie im Thema zu den Ereignis Kategorien im Platform SDK.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Informations Ereignis Eintrag geschrieben und dann erneut verwendet <xref:System.Diagnostics.EventInstance> , um einen Eintrag für ein Warnungs Ereignis in ein vorhandenes Ereignisprotokoll zu schreiben. Der Text der Ereignismeldung wird mithilfe eines Ressourcen Bezeichners in einer Nachrichten Ressourcen Datei angegeben. Im Codebeispiel wird davon ausgegangen, dass die entsprechende Nachrichten Ressourcen Datei für die Quelle registriert wurde.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft ist auf einen negativen Wert oder einen Wert größer als <see cref="F:System.UInt16.MaxValue" /> festgelegt.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType with get, set" Usage="System.Diagnostics.EventInstance.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Ereignistyp des Ereignisprotokolleintrags an oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Diagnostics.EventLogEntryType" />-Wert, der den Typ des Ereigniseintrags angibt. Der Standardwert ist <see cref="F:System.Diagnostics.EventLogEntryType.Information" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Ereignis ist von einem einzelnen Typ, der von der Anwendung beim Melden des Ereignisses angegeben wird. Der Ereignisanzeige verwendet den Ereignistyp, um zu bestimmen, welches Symbol in der Listenansicht des Ereignis Protokolls angezeigt werden soll.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Informations Ereignis Eintrag geschrieben und dann erneut verwendet <xref:System.Diagnostics.EventInstance> , um einen Eintrag für ein Warnungs Ereignis in ein vorhandenes Ereignisprotokoll zu schreiben. Der Text der Ereignismeldung wird mithilfe eines Ressourcen Bezeichners in einer Nachrichten Ressourcen Datei angegeben. Im Codebeispiel wird davon ausgegangen, dass die entsprechende Nachrichten Ressourcen Datei für die Quelle registriert wurde.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Die Eigenschaft wurde auf keinen gültigen <see cref="T:System.Diagnostics.EventLogEntryType" />-Wert festgelegt.</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64 with get, set" Usage="System.Diagnostics.EventInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Ressourcenbezeichner ab, der den Meldungstext des Ereigniseintrags bezeichnet, oder legt diesen fest.</summary>
        <value>Ein Ressourcenbezeichner, der mit einer in der Meldungsressourcendatei der Ereignisquelle definierten Zeichenfolge übereinstimmt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.EventInstance.InstanceId%2A> -Eigenschaft identifiziert einen Ereignis Eintrag für eine konfigurierte Ereignis Quelle eindeutig. Für in Nachrichten Ressourcen Dateien definierte Ereignisse <xref:System.Diagnostics.EventInstance.InstanceId%2A> entspricht dem Ressourcen Bezeichner, der aus den Nachrichten Definitions Feldern in der Meldungs Textdatei kompiliert wurde. Die <xref:System.Diagnostics.EventInstance.InstanceId%2A> Anwendung kann lokalisierte Ereignisprotokoll Einträge schreiben, indem auf einen Ressourcen Bezeichner festgelegt wird. Der Ereignisanzeige verwendet den <xref:System.Diagnostics.EventInstance.InstanceId%2A> Ressourcen Bezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Ressourcen Datei zu suchen und anzuzeigen. Sie müssen die Quelle mit der entsprechenden Ressourcen Datei registrieren, bevor Sie Ereignisse mithilfe von Ressourcen bezeichgern schreiben.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignisprotokoll-Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der [http://msdn.microsoft.com](https://msdn.microsoft.com/)Platform SDK-Dokumentation unter. Ausführliche Informationen zu Ereignisprotokoll bezeichlern finden Sie im Thema "Ereignis Bezeichner" im Platform SDK.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein Informations Ereignis Eintrag geschrieben und dann erneut verwendet <xref:System.Diagnostics.EventInstance> , um einen Eintrag für ein Warnungs Ereignis in ein vorhandenes Ereignisprotokoll zu schreiben. Der Text der Ereignismeldung wird mithilfe eines Ressourcen Bezeichners in einer Nachrichten Ressourcen Datei angegeben. Im Codebeispiel wird davon ausgegangen, dass die entsprechende Nachrichten Ressourcen Datei für die Quelle registriert wurde.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft ist auf einen negativen Wert oder einen Wert größer als <see cref="F:System.UInt32.MaxValue" /> festgelegt.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>

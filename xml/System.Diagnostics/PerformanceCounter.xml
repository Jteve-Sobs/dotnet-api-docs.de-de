<Type Name="PerformanceCounter" FullName="System.Diagnostics.PerformanceCounter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dd6d42f93a7390d8889b8e70bd44fdc743df9dd" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37663544" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PerformanceCounter : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PerformanceCounter extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.PerformanceCounter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PerformanceCounter&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class PerformanceCounter sealed : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type PerformanceCounter = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.Diagnostics.PerformanceCounterInstaller))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a Windows NT performance counter component.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.PerformanceCounter> Komponente kann verwendet werden, zum Lesen der vorhandene vordefinierte oder benutzerdefinierte Leistungsindikatoren und veröffentlichen (Schreiben) Leistung Daten für benutzerdefinierte Indikatoren.  
  
 Es gibt zahlreiche vordefinierte Leistungsindikatoren, die in den Windows-Systemmonitor aufgeführt [im Dialogfeld Leistungsindikatoren hinzufügen](http://go.microsoft.com/fwlink/p/?LinkId=257854). Weitere Informationen zu den .NET Framework-Leistungsindikatoren finden Sie unter [Leistungsindikatoren](~/docs/framework/debug-trace-profile/performance-counters.md).  
  
 Dieser Typ implementiert die <xref:System.IDisposable> Schnittstelle. Wenn Sie mit dem Typ haben, sollten Sie es entweder direkt oder indirekt freigeben. Damit des Typs direkt freigegeben werden, rufen Sie die <xref:System.IDisposable.Dispose%2A> -Methode in einer `try` / `catch` Block. Um sie indirekt löschen, verwenden Sie ein Sprachkonstrukt wie `using` (in c#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt "mithilfe von ein-Objekt, das implementiert" IDisposable "" in der <xref:System.IDisposable> schnittstellenthema.  
  
> [!IMPORTANT]
>  In Version 1.0 und 1.1 von .NET Framework erfordert diese Klasse unmittelbaren Aufrufer voll vertrauenswürdig sind. Ab .NET Framework, Version 2.0 wird diese Klasse benötigt <xref:System.Diagnostics.PerformanceCounterPermission> für bestimmte Aktionen. Es wird dringend empfohlen, die <xref:System.Diagnostics.PerformanceCounterPermission> nicht für teilweise vertrauenswürdigen Code erteilt werden.  Die Möglichkeit zum Lesen und Schreiben von Leistungsindikatoren kann Code z. B. das Durchzählen ausgeführten Prozesse und Abrufen von Informationen zu diesen Aktionen.  
>   
>  Darüber hinaus übergibt eine <xref:System.Diagnostics.PerformanceCounter> Objekt, das weniger vertrauenswürdigen Code kann ein Sicherheitsproblem erstellen. Übergeben Sie Zählerobjekte, z. B. eine <xref:System.Diagnostics.PerformanceCounterCategory> oder <xref:System.Diagnostics.PerformanceCounter>zu weniger vertrauenswürdigen Code.  
  
 Um von einem Leistungsindikator zu lesen, erstellen Sie eine Instanz des der <xref:System.Diagnostics.PerformanceCounter> Klasse, legen die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und optional die <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> oder <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> Eigenschaften, und rufen Sie dann die <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> Methode, um eine Leistung Leistungsindikator lesen.  
  
 Zum Veröffentlichen von Leistungsindikatordaten erstellen Sie einen oder mehrere benutzerdefinierte Leistungsindikatoren mithilfe der <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=nameWithType> -Methode, erstellen Sie eine Instanz von der <xref:System.Diagnostics.PerformanceCounter> Klasse, legen die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> und optional <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> oder <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> Eigenschaften und rufen Sie dann die <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, oder <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> Methoden, oder legen die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft, um den Wert von dem benutzerdefinierten Indikatorensatz zu ändern.  
  
> [!NOTE]
>  Die <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, und <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> Methoden Sperren verwenden, um den Zählerwert zu aktualisieren. Dadurch wird den Wert dieses Indikators in mehreren Threads oder mehrerer Prozesse Szenarien, sondern auch führt zu Leistungseinbußen korrekt beizubehalten. Wenn Sie die Genauigkeit nicht benötigen, die interlocked-Operationen zu gewährleisten, können Sie aktualisieren die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft direkt für bis zu einem 5 leistungsverbesserung ein Timeout.  Allerdings möglicherweise in das Multithreadszenarien, einige Updates für der Wert dieses Indikators ignoriert, was zu ungenauen Daten.  
  
 Der Zähler ist der Mechanismus, durch den welche Daten gesammelt werden. Die Registrierung speichert die Namen aller Leistungsindikatoren, von denen jeder zu einem bestimmten Bereich der Systemfunktionalität verknüpft ist. Beispiele hierfür sind die Auslastung des Prozessors, speicherauslastung oder die Anzahl der Bytes, die über eine Netzwerkverbindung empfangen wurden.  
  
 Jeder Leistungsindikator wird durch seinen Namen und den Speicherort eindeutig identifiziert. Auf die gleiche Weise, dass ein Pfad ein Laufwerk, ein Verzeichnis, ein oder mehrere Unterverzeichnisse und einen Dateinamen enthält, werden Leistungsindikatorinformationen mit vier Elementen besteht: der Computer, der Kategorie, die Kategorieinstanz und den Namen des Leistungsindikators.  
  
 Die Informationen zum Leistungsindikator muss enthalten, der Kategorie oder dem Leistungsobjekt, das Daten für die Zählers. Kategorien eines Computers umfassen die physische Komponenten, z. B. Prozessoren, Datenträger und Arbeitsspeicher. Es gibt auch Systemkategorien, z. B. Prozesse und Threads. Jede Kategorie bezieht sich auf eine funktionale Element auf dem Computer, und eine Reihe von standardmäßigen Leistungsindikatoren zugewiesen sind. Diese Objekte sind in der Leistung Objekt Dropdown-Liste im Dialogfeld Leistungsindikatoren hinzufügen in der Windows 2000-Systemmonitor aufgeführt, und müssen Sie sie in der Counter-Pfad einschließen. Leistungsdaten ist nach gruppiert die Kategorie, der sie zugeordnet ist.  
  
 In bestimmten Fällen können mehrere Kopien der gleichen Kategorie vorhanden sein. Z. B. mehrere Prozesse und Threads gleichzeitig ausgeführt werden, und einige Computer enthalten mehr als einem Prozessor. Die Kopien der Kategorie werden Kategorieinstanzen aufgerufen, und jede Instanz verfügt über eine Reihe von standardmäßigen Leistungsindikatoren zugewiesen ist. Wenn eine Kategorie mehr als eine Instanz verfügen kann, muss eine Instanzspezifikation die Leistungsindikator-Informationen enthalten sein.  
  
 Rufen Sie zum Abrufen von Leistungsdaten für die Leistungsindikatoren, die einen ursprünglichen oder vorherigen Wert ist erforderlich, für die Durchführung der erforderlichen Berechnung der <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> zweimal-Methode und verwendet die Informationen zurückgegeben, die Anwendung erforderlich sind.  
  
> [!NOTE]
>  Leistungsindikatorkategorien installiert, mit der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] separaten freigegebenen Arbeitsspeicher mit jeder Leistungsindikatorkategorie, die über einen eigenen Speicherbereich verwenden. Sie können die Größe des separater freigegebener Arbeitsspeicher angeben, indem Sie einen DWORD-Wert mit dem Namen FileMappingSize im Registrierungsschlüssel HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<Kategorienamen >* \ Die Leistung. Die FileMappingSize der Anzahl von gemeinsam genutzten Speicher für die Kategorie festgelegt ist. Die Standardgröße beträgt, Dezimal 131072. Wenn der FileMappingSize-Wert nicht vorhanden ist, ist die `fileMappingSize` -Attributwert für die `performanceCounters` Element in der Datei "Machine.config" angegeben verwendet wird, was zu zusätzlichem Aufwand für die Verarbeitung der Konfiguration-Dateien. Sie können eine leistungsverbesserung für den Anwendungsstart realisieren, durch Festlegen der Größe der Zuordnung in der Registrierung. Weitere Informationen zur Größe Zuordnung finden Sie unter [ &lt;PerformanceCounters&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/performancecounters-element.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Diagnostics.PerformanceCounter> Klasse zum Erstellen und Verwenden einer <xref:System.Diagnostics.PerformanceCounterType.AverageCount64> -Indikatortyp. Im Beispiel werden Kategorien erstellt, Zähler eingerichtet, sammelt Daten aus den Leistungsindikatoren und Aufrufe der <xref:System.Diagnostics.CounterSampleCalculator> Klasse, um die Leistungsindikatordaten zu interpretieren. Die zwischen- und Endergebnisse Ergebnisse werden im Konsolenfenster angezeigt. Weitere Beispiele von anderen Leistungsindikatortypen finden Sie unter den <xref:System.Diagnostics.PerformanceCounterType> Enumeration.  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#1)]
 [!code-csharp[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#1)]
 [!code-vb[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.PerformanceCounterType" />
    <altmember cref="T:System.Diagnostics.CounterCreationData" />
    <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
    <altmember cref="T:System.Diagnostics.CounterSample" />
    <altmember cref="T:System.Diagnostics.CounterSampleCalculator" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Diese Klasse kann nicht von teilweise vertrauenswürdigem Code verwendet werden.</permission>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class, without associating the instance with any system or custom performance counter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung des Konstruktors wird die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaften auf leere Zeichenfolgen (""), und legt die <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> -Eigenschaft auf dem lokalen Computer (".").  
  
 Dieser Konstruktor initialisiert nicht den Leistungsindikator "", damit sie einen vorhandenen Indikator auf dem lokalen Computer nicht die Instanz zugeordnet ist. Um auf einen bestimmten Leistungsindikator verweisen, legen Sie die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und optional der <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> und <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> Eigenschaften vor dem Lesen anderer Eigenschaften oder beim Versuch, eines Leistungsindikators zu lesen. Legen Sie zum Schreiben in einen Leistungsindikator der <xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A> Eigenschaft `false`.  
  
> [!NOTE]
>  Die <xref:System.Security.Permissions.HostProtectionAttribute> auf diesen Member angewendeten-Attribut besitzt den folgenden <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> Eigenschaftswert: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.SharedState>. Das <xref:System.Security.Permissions.HostProtectionAttribute> hat keine Auswirkungen auf Desktopanwendungen (die normalerweise durch Doppelklicken auf ein Symbol, Eingeben eines Befehls oder einer URL in einem Browser gestartet werden). Weitere Informationen finden Sie unter den <xref:System.Security.Permissions.HostProtectionAttribute> Klasse oder [SQL Server-Programmierung und Hostschutzattribute](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Standardinstanz von die <xref:System.Diagnostics.PerformanceCounter> Klasse. Nachdem die Instanz erstellt wurde, die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaftswerte sind Satz und die Ergebnisse eines Aufrufs der <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> Methode angezeigt werden.  
  
 [!code-cpp[PerfCounter#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter/CPP/perfcounter.cpp#1)]
 [!code-csharp[PerfCounter#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter/CS/perfcounter.cs#1)]
 [!code-vb[PerfCounter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter/VB/perfcounter.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounter (string categoryName, string counterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string counterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, counterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounter(System::String ^ categoryName, System::String ^ counterName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounter : string * string -&gt; System.Diagnostics.PerformanceCounter" Usage="new System.Diagnostics.PerformanceCounter (categoryName, counterName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
        <param name="counterName">The name of the performance counter.</param>
        <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category have a single instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameterzeichenfolgen sind nicht in der Groß-/Kleinschreibung beachtet.  
  
 Verwenden Sie diese Überladung, um einen Zähler auf dem lokalen Computer zugreifen, die zu einer Kategorie, enthält die Kategorie eine einzelne Leistungsindikatorinstanz gehört. Wenn Sie versuchen, diesen Konstruktor verwenden, um dies zu zeigen <xref:System.Diagnostics.PerformanceCounter> Instanz auf eine Kategorie, die mehrere Instanzen der Konstruktor löst eine Ausnahme enthält. Diese Überladung kann Zugriff auf alle schreibgeschützten oder Lese-/Schreibzugriff Leistungsindikator, sondern in einem nur-Lese Modus. Ein <xref:System.Diagnostics.PerformanceCounter> -Instanz erstellt wurde, verwenden diese Überladung kann nicht in den Zähler schreiben, selbst wenn der Zähler selbst Lese-/Schreibzugriff verfügt.  
  
 Diese Überladung des Konstruktors wird die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> und <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> Eigenschaften, die die Werte übergeben, legt diese fest der <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> -Eigenschaft auf dem lokalen Computer ".", und legt fest der <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaft auf eine leere Zeichenfolge ("").  
  
 Dieser Konstruktor initialisiert den Leistungsindikator "" und ordnet die Instanz einer vorhandenen (ein System oder einen benutzerdefinierten Indikator) auf dem lokalen Computer. Die Werte, die Sie im übergeben, für die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> und <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> Eigenschaften müssen auf einen vorhandenen Leistungsindikator auf dem lokalen Computer verweisen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="categoryName" /> is an empty string ("").  -or-  <paramref name="counterName" /> is an empty string ("").  -or-  The category specified does not exist.  -or-  The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.  -or-  <paramref name="categoryName" /> and <paramref name="counterName" /> have been localized into different languages.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> or <paramref name="counterName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounter (string categoryName, string counterName, bool readOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string counterName, bool readOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, counterName As String, readOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounter(System::String ^ categoryName, System::String ^ counterName, bool readOnly);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounter : string * string * bool -&gt; System.Diagnostics.PerformanceCounter" Usage="new System.Diagnostics.PerformanceCounter (categoryName, counterName, readOnly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="readOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
        <param name="counterName">The name of the performance counter.</param>
        <param name="readOnly">
          <see langword="true" /> to access the counter in read-only mode (although the counter itself could be read/write); <see langword="false" /> to access the counter in read/write mode.</param>
        <summary>Initializes a new, read-only or read/write instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category contain a single instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameterzeichenfolgen sind nicht in der Groß-/Kleinschreibung beachtet.  
  
 Verwenden Sie diese Überladung, um Zugriff auf einen schreibgeschützten oder Lese-/Schreibzugriff Indikator auf dem lokalen Computer, der zu einer Kategorie, enthält die Kategorie eine einzelne Leistungsindikatorinstanz gehört. Wenn Sie versuchen, diesen Konstruktor verwenden, um dies zu zeigen <xref:System.Diagnostics.PerformanceCounter> Instanz auf eine Kategorie, die mehrere Instanzen der Konstruktor löst eine Ausnahme enthält.  
  
 Diese Überladung des Konstruktors wird die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A> Eigenschaften, die die Werte übergeben, legt diese fest der <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> -Eigenschaft auf dem lokalen Computer ".", und legt fest der <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaft auf eine leere Zeichenfolge ("").  
  
 Dieser Konstruktor initialisiert den Leistungsindikator "" und ordnet die Instanz einer vorhandenen (ein System oder einen benutzerdefinierten Indikator) auf dem lokalen Computer. Die Werte, die Sie im übergeben, für die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> und <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> Eigenschaften müssen auf einen vorhandenen Leistungsindikator auf dem lokalen Computer verweisen. Wenn die Instanz des Leistungsindikators, der Sie zeigen nicht gültig ist, löst das Aufrufen des Konstruktors eine Ausnahme aus.  
  
> [!NOTE]
>  Können Sie diese Überladung verwenden, für die Verbindung zu einem Systemzähler, aber Sie können nicht geschrieben werden zu einem Systemzähler. Daher wird die Festlegung `readOnly` zu `false` beim Herstellen einer Verbindung zu einem Systemzähler führt dazu, dass des Konstruktors eine Ausnahme ausgelöst.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Instanz von der <xref:System.Diagnostics.PerformanceCounter> Klasse. Das Beispiel übergibt in den Kategorienamen, den Namen und eine Flag-Wert, der angibt, dass der Zähler nicht schreibgeschützt ist. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.PerformanceCounter> Klasse.  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#2)]
 [!code-csharp[PerformanceCounterType.AverageCounter64#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#2)]
 [!code-vb[PerformanceCounterType.AverageCounter64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <paramref name="categoryName" /> is an empty string ("").  -or-  The <paramref name="counterName" /> is an empty string ("").  -or-  The category specified does not exist. (if <paramref name="readOnly" /> is <see langword="true" />).  -or-  The category specified is not a .NET Framework custom category (if <paramref name="readOnly" /> is <see langword="false" />).  -or-  The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.  -or-  <paramref name="categoryName" /> and <paramref name="counterName" /> have been localized into different languages.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> or <paramref name="counterName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounter (string categoryName, string counterName, string instanceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string counterName, string instanceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, counterName As String, instanceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounter(System::String ^ categoryName, System::String ^ counterName, System::String ^ instanceName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounter : string * string * string -&gt; System.Diagnostics.PerformanceCounter" Usage="new System.Diagnostics.PerformanceCounter (categoryName, counterName, instanceName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="instanceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
        <param name="counterName">The name of the performance counter.</param>
        <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
        <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified system or custom performance counter and category instance on the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameterzeichenfolgen sind nicht in der Groß-/Kleinschreibung beachtet.  
  
 Diese Überladung des Konstruktors wird die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaften mit den Werten Sie übergeben, und legt sie fest der <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> -Eigenschaft auf dem lokalen Computer ".".  
  
 Dieser Konstruktor initialisiert den Leistungsindikator "" und ordnet die Instanz einer vorhandenen (ein System oder einen benutzerdefinierten Indikator) auf dem lokalen Computer. Die Werte, die Sie im übergeben, für die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaften müssen auf einen vorhandenen Leistungsindikator auf dem lokalen Computer verweisen. Wenn die Instanz des Leistungsindikators, die, der Sie zeigen, nicht gültig ist, löst das Aufrufen des Konstruktors eine Ausnahme aus.  
  
 Diese Überladung kann Zugriff auf alle schreibgeschützten oder Lese-/Schreibzugriff Leistungsindikator, sondern in einem nur-Lese Modus. Ein <xref:System.Diagnostics.PerformanceCounter> -Instanz erstellt wurde, verwenden diese Überladung kann nicht in den Zähler schreiben, selbst wenn der Zähler selbst Lese-/Schreibzugriff verfügt.  
  
 Geben Sie zum Erstellen einer Instanz einer Leistungskategorie ein `instanceName` auf die <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> Konstruktor. Wenn die Kategorieinstanz angegeben `instanceName` ist bereits vorhanden. das neue Objekt wird die vorhandene Kategorieinstanz verweisen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="categoryName" /> is an empty string ("").  -or-  <paramref name="counterName" /> is an empty string ("").  -or-  The category specified is not valid.  -or-  The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.  -or-  <paramref name="instanceName" /> is longer than 127 characters.  -or-  <paramref name="categoryName" /> and <paramref name="counterName" /> have been localized into different languages.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> or <paramref name="counterName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounter (string categoryName, string counterName, string instanceName, bool readOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string counterName, string instanceName, bool readOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, counterName As String, instanceName As String, readOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounter(System::String ^ categoryName, System::String ^ counterName, System::String ^ instanceName, bool readOnly);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounter : string * string * string * bool -&gt; System.Diagnostics.PerformanceCounter" Usage="new System.Diagnostics.PerformanceCounter (categoryName, counterName, instanceName, readOnly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="instanceName" Type="System.String" />
        <Parameter Name="readOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
        <param name="counterName">The name of the performance counter.</param>
        <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
        <param name="readOnly">
          <see langword="true" /> to access a counter in read-only mode; <see langword="false" /> to access a counter in read/write mode.</param>
        <summary>Initializes a new, read-only or read/write instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified system or custom performance counter and category instance on the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameterzeichenfolgen sind nicht in der Groß-/Kleinschreibung beachtet.  
  
 Verwenden Sie diese Überladung auf einen Leistungsindikator in einem schreibgeschützten oder Lese-/Schreibmodus.  
  
 Diese Überladung des Konstruktors wird die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaften mit den Werten Sie übergeben, es und legt die <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> -Eigenschaft auf dem lokalen Computer ".".  
  
 Dieser Konstruktor initialisiert den Leistungsindikator "" und ordnet die Instanz einer vorhandenen (ein System oder einen benutzerdefinierten Indikator) auf dem lokalen Computer. Die Werte, die Sie im übergeben, für die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaften müssen auf einen vorhandenen Leistungsindikator auf dem lokalen Computer verweisen. Wenn die Instanz des Leistungsindikators, der Sie zeigen nicht gültig ist, löst das Aufrufen des Konstruktors eine Ausnahme aus.  
  
> [!NOTE]
>  Können Sie diese Überladung verwenden, für die Verbindung zu einem Systemzähler, aber Sie können nicht geschrieben werden zu einem Systemzähler. Daher wird die Festlegung `readOnly` zu `false` beim Herstellen einer Verbindung zu einem Systemzähler führt dazu, dass des Konstruktors eine Ausnahme ausgelöst.  
  
 Geben Sie zum Erstellen einer Instanz einer Leistungskategorie ein `instanceName` auf die <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> Konstruktor. Wenn die Kategorieinstanz angegeben `instanceName` ist bereits vorhanden. das neue Objekt wird die vorhandene Kategorieinstanz verweisen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="categoryName" /> is an empty string ("").  -or-  <paramref name="counterName" /> is an empty string ("").  -or-  The read/write permission setting requested is invalid for this counter.  -or-  The category specified does not exist (if <paramref name="readOnly" /> is <see langword="true" />).  -or-  The category specified is not a .NET Framework custom category (if <paramref name="readOnly" /> is <see langword="false" />).  -or-  The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.  -or-  <paramref name="instanceName" /> is longer than 127 characters.  -or-  <paramref name="categoryName" /> and <paramref name="counterName" /> have been localized into different languages.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> or <paramref name="counterName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounter (string categoryName, string counterName, string instanceName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string counterName, string instanceName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, counterName As String, instanceName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounter(System::String ^ categoryName, System::String ^ counterName, System::String ^ instanceName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounter : string * string * string * string -&gt; System.Diagnostics.PerformanceCounter" Usage="new System.Diagnostics.PerformanceCounter (categoryName, counterName, instanceName, machineName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="instanceName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
        <param name="counterName">The name of the performance counter.</param>
        <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
        <param name="machineName">The computer on which the performance counter and its associated category exist.</param>
        <summary>Initializes a new, read-only instance of the <see cref="T:System.Diagnostics.PerformanceCounter" /> class and associates it with the specified system or custom performance counter and category instance, on the specified computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameterzeichenfolgen sind nicht in der Groß-/Kleinschreibung beachtet.  
  
 Diese Überladung des Konstruktors wird die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>, und <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> Eigenschaften mit den Werten, die Sie übergeben.  
  
 Dieser Konstruktor initialisiert den Leistungsindikator "" und ordnet die Instanz einer vorhandenen (ein System oder einen benutzerdefinierten Indikator) auf dem angegebenen Computer. Die Werte, die Sie im übergeben, für die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> und <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> Eigenschaften müssen auf einen vorhandenen Leistungsindikator verweisen. Wenn die Instanz des Leistungsindikators, die, der Sie zeigen, nicht gültig ist, löst das Aufrufen des Konstruktors eine Ausnahme aus. Diese Überladung kann Zugriff auf alle schreibgeschützten oder Lese-/Schreibzugriff Leistungsindikator, sondern in einem nur-Lese Modus. Ein <xref:System.Diagnostics.PerformanceCounter> -Instanz erstellt wurde, verwenden diese Überladung kann nicht in den Zähler schreiben, selbst wenn der Zähler selbst Lese-/Schreibzugriff verfügt.  
  
> [!NOTE]
>  Sie können keine remote-Leistungsindikatoren ausführen. Es gibt keine Überladung, die Ihnen ermöglicht, geben Sie eine Instanz Lese-/Schreibzugriff, der die <xref:System.Diagnostics.PerformanceCounter> -Klasse, die eine Verbindung mit einem Remotecomputer herstellt.  
  
 Geben Sie zum Erstellen einer Instanz einer Leistungskategorie ein `instanceName` auf die <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> Konstruktor. Wenn die Kategorieinstanz angegeben `instanceName` ist bereits vorhanden. das neue Objekt wird die vorhandene Kategorieinstanz verweisen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
> [!NOTE]
>  In Windows Vista Wenn der Remotecomputer ein Mitglied einer Arbeitsgruppe ist müssen Sie UAC deaktivieren, sodass das lokale Benutzerkonto nicht gefiltert wird und mit einem Administratorkonto erweitert werden kann. Aus Sicherheitsgründen sollte das Deaktivieren der Benutzerkontensteuerung als letztes Mittel sein. Informationen zum Deaktivieren der Benutzerkontensteuerung finden Sie unter [User Account Control "und" WMI-](http://go.microsoft.com/fwlink/?LinkId=91617).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="categoryName" /> is an empty string ("").  -or-  <paramref name="counterName" /> is an empty string ("").  -or-  The read/write permission setting requested is invalid for this counter.  -or-  The counter does not exist on the specified computer.  -or-  The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.  -or-  <paramref name="instanceName" /> is longer than 127 characters.  -or-  <paramref name="categoryName" /> and <paramref name="counterName" /> have been localized into different languages.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> or <paramref name="counterName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="performanceCounter.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins the initialization of a <see cref="T:System.Diagnostics.PerformanceCounter" /> instance used on a form or by another component. The initialization occurs at runtime.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Entwurf, die Umgebung verwendet diese Methode, um die Initialisierung einer Komponente zu starten, die in einem Formular oder von einer anderen Komponente verwendet wird. Die <xref:System.Diagnostics.PerformanceCounter.EndInit%2A> -Methode beendet die Initialisierung. Mithilfe der <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A> und <xref:System.Diagnostics.PerformanceCounter.EndInit%2A> Methoden wird verhindert, dass die Komponente verwendet werden, bevor er vollständig initialisiert wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryName">
      <MemberSignature Language="C#" Value="public string CategoryName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.CategoryName" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryName : string with get, set" Usage="System.Diagnostics.PerformanceCounter.CategoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.CategoryValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the performance counter category for this performance counter.</summary>
        <value>Der Name der Leistungsindikatorkategorie (Leistungsobjekt) mit der dieser Leistungsindikator zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> wird angezeigt, der `Performance Object` -Feld der Performance Counter-Manager-MMC-Snap-in `Add Counter` Dialogfeld.  
  
 Ein Leistungsindikator überwacht das Verhalten einer Kategorie oder dem Leistungsobjekt, auf einem Computer. Kategorien umfassen die physischen Komponenten (z. B. Prozessoren, Datenträger und Speicher) und Systemobjekte (z. B. Prozesse und Threads). Systemleistungsindikatoren, die auf die gleiche Leistungsobjekt verknüpft sind, werden in einer Kategorie gruppiert, die den allgemeinen Fokus angibt. Beim Erstellen einer Instanz von der <xref:System.Diagnostics.PerformanceCounter> -Klasse, geben Sie zuerst die Kategorie mit dem die Komponente interagieren soll, und wählen Sie dann einen Leistungsindikator aus dieser Kategorie.  
  
 Beispielsweise ist eine Windows-Leistungsindikator-Kategorienamen den Speicher. Systemleistungsindikatoren in dieser Kategorie verfolgen Speicherdaten wie z. B. die Anzahl der Bytes, die verfügbar sind und die Anzahl der Bytes, die zwischengespeichert. Wenn Sie mit den Bytes, die zwischengespeichert werden, in der Anwendung arbeiten möchten, würden, erstellen Sie eine Instanz von der <xref:System.Diagnostics.PerformanceCounter> Komponente, mit der Kategorie Speicher verbinden, und wählen Sie dann den entsprechenden Zähler (in diesem Fall zwischengespeicherten Bytes) aus dieser Kategorie.  
  
 Obwohl auf Ihrem System eine Vielzahl weiterer Indikatorkategorien verfügbar ist, werden die Kategorien, denen Sie wahrscheinlich am häufigsten interagieren werden Cache, Speicher, Objekte, Physikalischer Datenträger, Prozessor, Server, System und Thread.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Standardinstanz von die <xref:System.Diagnostics.PerformanceCounter> Klasse. Nachdem die Instanz erstellt wurde, die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaftswerte sind Satz und die Ergebnisse eines Aufrufs der <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> Methode angezeigt werden.  
  
 [!code-cpp[PerfCounter#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter/CPP/perfcounter.cpp#1)]
 [!code-csharp[PerfCounter#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter/CS/perfcounter.cs#1)]
 [!code-vb[PerfCounter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter/VB/perfcounter.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Diagnostics.PerformanceCounter.CategoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="performanceCounter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the performance counter and frees all the resources allocated by this performance counter instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese zuordnen <xref:System.Diagnostics.PerformanceCounter> Instanz mit einen Leistungsindikator, der auf dem Server, die das System befindet, initialisiert die Instanz, und belegt Speicher aus, um Informationen zum Leistungsindikator-Beispiel enthalten. Die <xref:System.Diagnostics.PerformanceCounter.Close%2A> Methode gibt die vom Objekt reservierten Ressourcen frei.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseSharedResources">
      <MemberSignature Language="C#" Value="public static void CloseSharedResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CloseSharedResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.CloseSharedResources" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CloseSharedResources ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CloseSharedResources();" />
      <MemberSignature Language="F#" Value="static member CloseSharedResources : unit -&gt; unit" Usage="System.Diagnostics.PerformanceCounter.CloseSharedResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Frees the performance counter library shared state allocated by the counters.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CounterHelp">
      <MemberSignature Language="C#" Value="public string CounterHelp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CounterHelp" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.CounterHelp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CounterHelp As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CounterHelp { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CounterHelp : string" Usage="System.Diagnostics.PerformanceCounter.CounterHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("A description describing the counter.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the description for this performance counter.</summary>
        <value>Eine Beschreibung des Elements oder der Menge, die dieser Leistungsindikator misst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Dialogfeld Leistungsindikatoren hinzufügen, der die Leistung Leistungsindikator-Manager-MMC-Snap-in zeigt die <xref:System.Diagnostics.PerformanceCounter.CounterHelp%2A> Text, wenn ein Benutzer wählt einen Indikator aus der Liste der Leistungsindikatoren aus und klickt auf die Schaltfläche "Explain".  
  
 Wenn Sie einen neuen Leistungsindikator erstellen, verwenden Sie die <xref:System.Diagnostics.PerformanceCounter.CounterHelp%2A> Text zum Beschreiben, was der Leistungsindikator überwacht zu liefern, damit der Benutzer kann, ob den Leistungsindikator des Systemmonitors-Anzeige hinzufügen soll.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Diagnostics.PerformanceCounter" /> instance is not associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CounterName">
      <MemberSignature Language="C#" Value="public string CounterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CounterName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.CounterName" />
      <MemberSignature Language="VB.NET" Value="Public Property CounterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CounterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CounterName : string with get, set" Usage="System.Diagnostics.PerformanceCounter.CounterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.CounterNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the performance counter that is associated with this <see cref="T:System.Diagnostics.PerformanceCounter" /> instance.</summary>
        <value>Der Name des Zählers, der i. d. r. die zu messende Menge beschreibt. Dieser Name wird angezeigt in der Liste der Leistungsindikatoren des Leistungsindikator-Manager-MMC-Snap-Ins im Dialogfeld Leistungsindikatoren hinzufügen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie erhalten eine Liste der verfügbaren bereits vorhandenen Leistungsindikatoren aus der Windows-Manager des [im Dialogfeld Leistungsindikatoren hinzufügen](http://go.microsoft.com/fwlink/p/?LinkId=257854).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> Eigenschaft, um eine typische Indikatorname.  
  
 [!code-cpp[PerfCounter#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter/CPP/perfcounter.cpp#1)]
 [!code-csharp[PerfCounter#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter/CS/perfcounter.cs#1)]
 [!code-vb[PerfCounter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter/VB/perfcounter.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Diagnostics.PerformanceCounter.CounterName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      </Docs>
    </Member>
    <Member MemberName="CounterType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounterType CounterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.PerformanceCounterType CounterType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.CounterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CounterType As PerformanceCounterType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::PerformanceCounterType CounterType { System::Diagnostics::PerformanceCounterType get(); };" />
      <MemberSignature Language="F#" Value="member this.CounterType : System.Diagnostics.PerformanceCounterType" Usage="System.Diagnostics.PerformanceCounter.CounterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The type of the counter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the counter type of the associated performance counter.</summary>
        <value>Ein <see cref="T:System.Diagnostics.PerformanceCounterType" /> , die beschreibt wie der Indikator interagiert mit einer überwachungsanwendung und der Art des der darin enthaltenen Werte (z. B. berechnet oder nicht berechnete).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.PerformanceCounterType> Enumeration enthält die Typen von Leistungsindikatoren, mit denen Sie interagieren können. Einige der Indikatortypen darstellen berechnete Werte, wie der Durchschnitt der Zähler Messungen bereit, die im System übernommen hat. Andere Typen stellen Ihren Rohwert bzw. nicht berechneten Werte dar. Die folgende Tabelle zeigt die Leistungsindikatortypen, die Sie am häufigsten interagieren werden.  
  
|Aufgabe des Zählers|PerformanceCounterType Wert|Beispiel|  
|------------------------------|----------------------------------|-------------|  
|Verwalten Sie einen einfachen Zähler für Elemente oder Vorgänge.|`NumberOfItems32`|Die Anzahl der eingegangenen Aufträge als 32-Bit-Ganzzahl, nachverfolgt.|  
|Verwalten Sie einen einfachen Zähler mit höherer Kapazität.|`NumberOfItems64`|Die Anzahl der Bestellungen für einen Standort mit sehr hohen Anzahl nachverfolgt, gespeichert als eine 64-Bit-Ganzzahl.|  
|Verfolgen Sie die Anzahl von Elementen oder Operationen pro Sekunde.|`RateOfCountsPerSecond32`|Überwachung von Aufträgen pro Sekunde empfangen wurden, auf einer Website.|  
|Verfolgen Sie eine höhere Kapazität Anzahl von Elementen oder Operationen pro Sekunde.|`RateOfCountsPerSecond64`|Nachverfolgen von Bestellungen empfangen auf einer Website mit sehr hohen Anzahl pro Sekunde.|  
|Berechnen Sie die durchschnittliche Zeit, um einen Prozess auszuführen oder um ein Element zu verarbeiten.|`AverageTimer32`|Berechnen Sie die durchschnittliche Zeit, die eine Bestellung benötigt wird, verarbeitet werden.|  
  
 Wenn Sie einen Leistungsindikator erstellen, dessen Typ die Verwendung der entsprechenden Basiszählers erfordert, müssen Sie deklarieren, der Zähler und die Basis in die <xref:System.Diagnostics.CounterCreationDataCollection> übergeben Sie in der <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=nameWithType> Methode.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" />.</permission>
        <altmember cref="T:System.Diagnostics.PerformanceCounterType" />
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public long Decrement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Decrement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.Decrement" />
      <MemberSignature Language="VB.NET" Value="Public Function Decrement () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Decrement();" />
      <MemberSignature Language="F#" Value="member this.Decrement : unit -&gt; int64" Usage="performanceCounter.Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Decrements the associated performance counter by one through an efficient atomic operation.</summary>
        <returns>The decremented counter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können nur für benutzerdefinierte Indikatoren schreiben. Alle Systemleistungsindikatoren sind schreibgeschützt.  
  
> [!NOTE]
>  Die <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, und <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> Methoden Sperren verwenden, um den Zählerwert zu aktualisieren. Dadurch wird den Wert dieses Indikators in mehreren Threads oder mehrerer Prozesse Szenarien, sondern auch führt zu Leistungseinbußen korrekt beizubehalten. Wenn Sie die Genauigkeit nicht benötigen, die interlocked-Operationen zu gewährleisten, können Sie aktualisieren die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft direkt für bis zu einem 5 leistungsverbesserung ein Timeout.  Allerdings möglicherweise in das Multithreadszenarien, einige Updates für der Wert dieses Indikators ignoriert, was zu ungenauen Daten.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The counter is read-only, so the application cannot decrement it.  -or-  The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
        <threadsafe>Diese Methode ist threadsicher.</threadsafe>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileMappingSize">
      <MemberSignature Language="C#" Value="public static int DefaultFileMappingSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static int32 DefaultFileMappingSize" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultFileMappingSize As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static int DefaultFileMappingSize;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultFileMappingSize : int" Usage="System.Diagnostics.PerformanceCounter.DefaultFileMappingSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the size, in bytes, of the global memory shared by performance counters. The default size is 524,288 bytes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="performanceCounter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="performanceCounter.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the initialization of a <see cref="T:System.Diagnostics.PerformanceCounter" /> instance that is used on a form or by another component. The initialization occurs at runtime.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Entwurf, die Umgebung, die diese Methode verwendet, um die Initialisierung einer Komponente zu beenden, die in einem Formular oder von einer anderen Komponente verwendet wird. Die <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A> -Methode startet die Initialisierung. Mithilfe der <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A> und <xref:System.Diagnostics.PerformanceCounter.EndInit%2A> Methoden wird verhindert, dass die Komponente verwendet werden, bevor er vollständig initialisiert wurde.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public long Increment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Increment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.Increment" />
      <MemberSignature Language="VB.NET" Value="Public Function Increment () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Increment();" />
      <MemberSignature Language="F#" Value="member this.Increment : unit -&gt; int64" Usage="performanceCounter.Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Increments the associated performance counter by one through an efficient atomic operation.</summary>
        <returns>The incremented counter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können nur für benutzerdefinierte Indikatoren schreiben. Alle Systemleistungsindikatoren sind schreibgeschützt.  
  
> [!NOTE]
>  Die <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, und <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> Methoden Sperren verwenden, um den Zählerwert zu aktualisieren. Dadurch wird den Wert dieses Indikators in mehreren Threads oder mehrerer Prozesse Szenarien, sondern auch führt zu Leistungseinbußen korrekt beizubehalten. Wenn Sie die Genauigkeit nicht benötigen, die interlocked-Operationen zu gewährleisten, können Sie aktualisieren die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft direkt für bis zu einem 5 leistungsverbesserung ein Timeout.  Allerdings möglicherweise in das Multithreadszenarien, einige Updates für der Wert dieses Indikators ignoriert, was zu ungenauen Daten.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The counter is read-only, so the application cannot increment it.  -or-  The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
        <threadsafe>Diese Methode ist threadsicher.</threadsafe>
      </Docs>
    </Member>
    <Member MemberName="IncrementBy">
      <MemberSignature Language="C#" Value="public long IncrementBy (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 IncrementBy(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function IncrementBy (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long IncrementBy(long value);" />
      <MemberSignature Language="F#" Value="member this.IncrementBy : int64 -&gt; int64" Usage="performanceCounter.IncrementBy value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The value to increment by. (A negative value decrements the counter.)</param>
        <summary>Increments or decrements the value of the associated performance counter by a specified amount through an efficient atomic operation.</summary>
        <returns>The new counter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können nur für benutzerdefinierte Indikatoren schreiben. Alle Systemleistungsindikatoren sind schreibgeschützt.  
  
> [!NOTE]
>  Die <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, und <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> Methoden Sperren verwenden, um den Zählerwert zu aktualisieren. Dadurch wird den Wert dieses Indikators in mehreren Threads oder mehrerer Prozesse Szenarien, sondern auch führt zu Leistungseinbußen korrekt beizubehalten. Wenn Sie die Genauigkeit nicht benötigen, die interlocked-Operationen zu gewährleisten, können Sie aktualisieren die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft direkt für bis zu einem 5 leistungsverbesserung ein Timeout.  Allerdings möglicherweise in das Multithreadszenarien, einige Updates für der Wert dieses Indikators ignoriert, was zu ungenauen Daten.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A> -Methode erhöht einen Zähler hinzufügen. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.PerformanceCounter> Klasse.  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64#3](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#3)]
 [!code-csharp[PerformanceCounterType.AverageCounter64#3](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#3)]
 [!code-vb[PerformanceCounterType.AverageCounter64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The counter is read-only, so the application cannot increment it.  -or-  The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikatorkategorie ein, wenn die <see cref="P:System.Diagnostics.PerformanceCounter.ReadOnly" /> Eigenschaft <see langword="false" />. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
        <threadsafe>Diese Methode ist threadsicher.</threadsafe>
      </Docs>
    </Member>
    <Member MemberName="InstanceLifetime">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounterInstanceLifetime InstanceLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.PerformanceCounterInstanceLifetime InstanceLifetime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceLifetime As PerformanceCounterInstanceLifetime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::PerformanceCounterInstanceLifetime InstanceLifetime { System::Diagnostics::PerformanceCounterInstanceLifetime get(); void set(System::Diagnostics::PerformanceCounterInstanceLifetime value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceLifetime : System.Diagnostics.PerformanceCounterInstanceLifetime with get, set" Usage="System.Diagnostics.PerformanceCounter.InstanceLifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterInstanceLifetime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the lifetime of a process.</summary>
        <value>Einer der <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" />-Werte. Die Standardeinstellung ist <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Leistungsindikatorkategorie .NET Framework, Version 1.0 oder 1.1 erstellt wird, verwendet globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
> [!NOTE]
>  Wenn der Wert des der <xref:System.Diagnostics.PerformanceCounter.CounterType%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance>, <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> Wert für der Leistungsindikator muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a member of the <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> enumeration.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> is set after the <see cref="T:System.Diagnostics.PerformanceCounter" /> has been initialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="InstanceName">
      <MemberSignature Language="C#" Value="public string InstanceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstanceName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.InstanceName" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InstanceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceName : string with get, set" Usage="System.Diagnostics.PerformanceCounter.InstanceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.InstanceNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an instance name for this performance counter.</summary>
        <value>Der Name der Instanz der Leistungsindikatorkategorie oder eine leere Zeichenfolge (""), wenn der Zähler ein Einzelinstanzzähler ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Instanznamen müssen weniger als 128 Zeichen lang sein.  
  
 In einigen Fällen werden Kategorien in Instanzen unterteilt, die Daten über mehrere Vorkommen des Objekts zu, die verfolgen auf eine Kategorie bezieht. Instanzen gelten, in die gesamte Kategorie anstelle einer einzelnen Leistungsindikatoren. Jeder Leistungsindikator in einer Kategorie hat jede Instanz, die für die Kategorie definiert. Beispielsweise enthält die Prozesskategorie Instanzen im Leerlauf "und" System. Daher enthält jeder Zähler die Prozesskategorie Daten für jede Instanz, die mit Informationen zu den Leerlaufprozessen oder Systemprozesse.  
  
 Viele Kategorien enthalten keine mehrere Instanzen, sodass Sie diese Eigenschaft leer lassen können, um anzugeben, dass keine Instanz der Kategorie zugeordnet ist.  
  
 Wenn diese <xref:System.Diagnostics.PerformanceCounter> Instanz verweist auf eine nicht benutzerdefinierte Kategorie, Sie können nur den vorhandenen Kategorieinstanzen auswählen. Sie können die neue Kategorieinstanzen nur in benutzerdefinierten Kategorien, erstellen, die diese ermöglichen Ihnen, wie viele Leistungsindikatoren und Kategorie Instanzen definieren, wie Sie benötigen.  
  
 Geben Sie zum Erstellen einer Instanz einer Leistungskategorie ein `instanceName` auf die <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> Konstruktor. Wenn die Kategorieinstanz angegeben `instanceName` ist bereits vorhanden. das neue Objekt wird die vorhandene Kategorieinstanz verweisen.  
  
> [!NOTE]
>  Verwenden Sie nicht die Zeichen "(",")", "#", "\\", oder "/" im Namen Instanz. Wenn eines dieser Zeichen verwendet werden, wird der Leistungskonsole (finden Sie unter [Laufzeit-Profilerstellung](~/docs/framework/debug-trace-profile/runtime-profiling.md)) die Werte von Gruppeninstanzen möglicherweise nicht richtig angezeigt.  
  
 Wenn der Instanzname automatisch generiert wird und möglicherweise die Zeichen enthalten "(",")", "#", "\\", oder "/", verwenden Sie die zeichenzuordnung in der folgenden Tabelle.  
  
|Zeichen|Zugeordnete Zeichen|  
|---------------|----------------------|  
|(|[|  
|)|]|  
|#|_|  
|\|_|  
|/|_|  
  
 Die <xref:System.AppDomain.FriendlyName%2A> Eigenschaft der <xref:System.AppDomain> Objekt abgerufen, von der <xref:System.AppDomain.CurrentDomain%2A?displayProperty=nameWithType> -Eigenschaft ist eine häufige Ursache für den Instanznamen, die ungültige Zeichen enthalten kann.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Standardinstanz von die <xref:System.Diagnostics.PerformanceCounter> Klasse. Nachdem die Instanz erstellt wurde, die <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, und <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> Eigenschaftswerte sind Satz und die Ergebnisse eines Aufrufs der <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> Methode angezeigt werden.  
  
 [!code-cpp[PerfCounter#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter/CPP/perfcounter.cpp#1)]
 [!code-csharp[PerfCounter#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter/CS/perfcounter.cs#1)]
 [!code-vb[PerfCounter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter/VB/perfcounter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.PerformanceCounter.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(".")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("What's the machine name format?")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the computer name for this performance counter</summary>
        <value>Der Server, auf dem der Leistungsindikator sowie die ihm zugeordnete Kategorie befinden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können Werte nur für Leistungsindikatoren, die befinden schreiben, auf dem lokalen Computer. Sie können jedoch Werte von Leistungsindikatoren lesen und von einem beliebigen, die Computer im Unternehmen für die Sie Zugriffsberechtigungen haben.  
  
 Beim Festlegen der <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> Eigenschaft, um auf einem Remotecomputer befindet, zeigen die <xref:System.Diagnostics.PerformanceCounter> Instanz versucht, den Zähler auf diesem Computer öffnen. Wenn der Zähler nicht vorhanden ist, löst das Festlegen dieser Eigenschaft eine Ausnahme aus.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.PerformanceCounter.MachineName" /> format is invalid.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
      </Docs>
    </Member>
    <Member MemberName="NextSample">
      <MemberSignature Language="C#" Value="public System.Diagnostics.CounterSample NextSample ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Diagnostics.CounterSample NextSample() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.NextSample" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSample () As CounterSample" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::CounterSample NextSample();" />
      <MemberSignature Language="F#" Value="member this.NextSample : unit -&gt; System.Diagnostics.CounterSample" Usage="performanceCounter.NextSample " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.CounterSample</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains a counter sample, and returns the raw, or uncalculated, value for it.</summary>
        <returns>A <see cref="T:System.Diagnostics.CounterSample" /> that represents the next raw value that the system obtains for this counter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird in der Regel für die Leistungsindikatoren verwendet, die nicht berechneten Werte enthalten.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Diagnostics.PerformanceCounter.NextSample%2A> Methode zum Abrufen der nächsten nicht berechneten Werts eines Leistungsindikators. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.PerformanceCounter> Klasse.  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64#3](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#3)]
 [!code-csharp[PerformanceCounterType.AverageCounter64#3](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#3)]
 [!code-vb[PerformanceCounterType.AverageCounter64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="NextValue">
      <MemberSignature Language="C#" Value="public float NextValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 NextValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.NextValue" />
      <MemberSignature Language="VB.NET" Value="Public Function NextValue () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float NextValue();" />
      <MemberSignature Language="F#" Value="member this.NextValue : unit -&gt; single" Usage="performanceCounter.NextValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains a counter sample and returns the calculated value for it.</summary>
        <returns>The next calculated value that the system obtains for this counter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Wenn der berechnete Wert eines Zählers bei Lesevorgängen für zwei Leistungsindikator abhängig ist, gibt der erste Lesevorgang 0,0 zurück. Zurücksetzen der Performance Counter Eigenschaften um einen anderen Indikator anzugeben, erstellen einen neuen Leistungsindikator entspricht, und der erste Lesevorgang mit den neuen Eigenschaften gibt 0,0 zurück. Die empfohlene Verzögerungszeit zwischen den Aufrufen der <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> Methode ist eine Sekunde, um den Zähler auf den nächsten inkrementellen Lesevorgang führen zu ermöglichen.  
  
> [!NOTE]
>  Um Leistungsindikatoren zu lesen, müssen Sie über Administratorrechte verfügen. Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein <xref:System.Diagnostics.PerformanceCounterType.ElapsedTime> Leistungsindikator und verwendet die <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> Methode, um die Werte des Zählers für einen bestimmten Zeitraum anzuzeigen.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The instance is not correctly associated with a performance counter.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RawValue">
      <MemberSignature Language="C#" Value="public long RawValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RawValue" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.RawValue" />
      <MemberSignature Language="VB.NET" Value="Public Property RawValue As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RawValue { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.RawValue : int64 with get, set" Usage="System.Diagnostics.PerformanceCounter.RawValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The raw value of the counter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the raw, or uncalculated, value of this counter.</summary>
        <value>Der Rohwert des Zählers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Indikatortyp eine 32-Bit-Größe ist aus, und Sie versuchen, diese Eigenschaft auf einen Wert festzulegen, die zu groß ist, schneidet die Eigenschaft den Wert auf 32 Bits ab. Wenn Sie einen benutzerdefinierten Leistungsindikator auf dem lokalen Computer zu lesen, verwenden die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft anstelle eines berechneten Werts kann erheblich bessere Leistung in Szenarien, in denen der unformatierte Wert ausreichend erstellen.  
  
 Wenn der Zähler, die Sie lesen schreibgeschützt ist, beim Abrufen der <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft Beispiele für den Leistungsindikator zum Zeitpunkt, die die Eigenschaft aufgerufen wird. Diese Aktion ist gleichbedeutend mit einem ersten Aufruf an die <xref:System.Diagnostics.PerformanceCounter.NextSample%2A> Methode. Wenn Sie später Aufrufen <xref:System.Diagnostics.PerformanceCounter.NextSample%2A>, können Sie Berechnungen für beide Aufrufe zurückgegebenen Werte ausführen.  
  
 Da Systemleistungsindikatoren schreibgeschützt sind, können Sie abrufen, jedoch nicht deren unformatierte Werte festgelegt werden.  
  
> [!NOTE]
>  Die <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, und <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> Methoden Sperren verwenden, um den Zählerwert zu aktualisieren. Dadurch wird den Wert dieses Indikators in mehreren Threads oder mehrerer Prozesse Szenarien, sondern auch führt zu Leistungseinbußen korrekt beizubehalten. Wenn Sie die Genauigkeit nicht benötigen, die interlocked-Operationen zu gewährleisten, können Sie aktualisieren die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> Eigenschaft direkt für bis zu einem 5 leistungsverbesserung ein Timeout.  Allerdings möglicherweise in das Multithreadszenarien, einige Updates für der Wert dieses Indikators ignoriert, was zu ungenauen Daten.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista, Windows XP Professional X64 64 oder Windows Server 2003 müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst nicht, Ihre Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista zu erweitern hinzu, um die Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista werden die Berechtigungen eines Benutzers über die Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Diagnostics.CounterSample> Klasse, um den Wert der an die <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> -Eigenschaft für einen Leistungsindikator.  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#1)]
 [!code-csharp[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#1)]
 [!code-vb[PerformanceCounterType.AverageCounter64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">You are trying to set the counter's raw value, but the counter is read-only.  -or-  The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Code that is executing without administrative privileges attempted to read a performance counter.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounter.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Diagnostics.PerformanceCounter.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The accessability level of the counter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this <see cref="T:System.Diagnostics.PerformanceCounter" /> instance is in read-only mode.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="T:System.Diagnostics.PerformanceCounter" /> Instanz befindet sich im schreibgeschützten Modus (auch wenn der Zähler selbst ein benutzerdefinierter .NET Framework-Leistungsindikator ist); <see langword="false" /> , wenn es sich im Lese-/Schreibmodus befindet. Der Standardwert ist der Wert, der durch den Konstruktor festgelegt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für einen Indikator System <xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A> sollten Sie stets `true`. Sie können nicht zu einem Systemzähler schreiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveInstance">
      <MemberSignature Language="C#" Value="public void RemoveInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounter.RemoveInstance" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveInstance ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveInstance();" />
      <MemberSignature Language="F#" Value="member this.RemoveInstance : unit -&gt; unit" Usage="performanceCounter.RemoveInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes the category instance specified by the <see cref="T:System.Diagnostics.PerformanceCounter" /> object <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName" /> property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können eine Instanz nur für einen benutzerdefinierten Indikator entfernen. Alle Systemleistungsindikatoren sind schreibgeschützt, damit versucht wird, eine davon entfernen eine Ausnahme auslöst.  
  
> [!NOTE]
>  Um eine mögliche Racebedingung zu vermeiden, wenn die Freigabe des gemeinsam genutzten Speicher freigegeben wird, es wird empfohlen, die <xref:System.Diagnostics.PerformanceCounter.RemoveInstance%2A> -Methode aufgerufen werden, aus der <xref:System.AppDomain.DomainUnload> -Ereignishandler.  
  
 Geben Sie zum Erstellen einer Instanz einer Leistungskategorie ein `instanceName` auf die <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> Konstruktor. Wenn die Kategorieinstanz angegeben `instanceName` ist bereits vorhanden. das neue Objekt wird die vorhandene Kategorieinstanz verweisen.  
  
> [!NOTE]
>  Wenn der Wert für die <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> -Eigenschaft ist <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Process> und die Leistungsindikatorkategorie wurde mit .NET Framework, Version 1.0 oder 1.1, erstellt ein <xref:System.InvalidOperationException> ausgelöst. Leistungsindikatorkategorien, die mit früheren Versionen erstellten verwenden Sie globale freigegebene Speicher und der Wert für <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> muss <xref:System.Diagnostics.PerformanceCounterInstanceLifetime.Global>. Wenn die Kategorie von Anwendungen unter der Versionen 1.0 oder 1.1 von .NET Framework nicht verwendet wird, löschen und neu erstellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This counter is read-only, so any instance that is associated with the category cannot be removed.  -or-  The instance is not correctly associated with a performance counter.  -or-  The <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> property is set to <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" /> when using global shared memory.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Schreiben von Leistungsindikator-Kategorienamen. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
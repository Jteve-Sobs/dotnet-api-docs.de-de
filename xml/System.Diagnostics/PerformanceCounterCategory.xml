<Type Name="PerformanceCounterCategory" FullName="System.Diagnostics.PerformanceCounterCategory">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7aef01809af018ffc683e3b14dd1ccd6a253c08f" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52210698" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PerformanceCounterCategory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PerformanceCounterCategory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.PerformanceCounterCategory" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PerformanceCounterCategory" />
  <TypeSignature Language="C++ CLI" Value="public ref class PerformanceCounterCategory sealed" />
  <TypeSignature Language="F#" Value="type PerformanceCounterCategory = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt ein Leistungsobjekt dar, das eine Kategorie von Leistungsindikatoren definiert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Erstellen oder Löschen einen Leistungsindikator erfordert die Synchronisierung des zugrunde liegenden Code mithilfe ein benanntes Mutex. Wenn eine Anwendung mit weit reichenden Berechtigungen den benannten Mutex gesperrt wurde, versucht, die zum Erstellen oder Löschen einen Leistungsindikator bewirkt, dass die Anwendung nicht mehr reagiert, bis die Sperre aufgehoben wird. Um dieses Problem zu vermeiden, erteilen Sie niemals <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> Berechtigung für nicht vertrauenswürdigen Code. Darüber hinaus <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> Berechtigung möglicherweise andere Berechtigungen umgangen werden kann und sollte nur sehr vertrauenswürdigen Code erteilt werden.  
  
 Die <xref:System.Diagnostics.PerformanceCounterCategory> Instanz <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> Eigenschaft wird im Feld Leistungsobjekt aus, das im Dialogfeld "Add Counter" der Performance-Viewer-Anwendung angezeigt.  
  
 Die <xref:System.Diagnostics.PerformanceCounterCategory> Klasse bietet mehrere Methoden für die Interaktion mit Indikatoren und Kategorien auf dem Computer. Die <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> Methoden können Sie benutzerdefinierte Kategorien definieren. Die <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> Methode bietet eine Möglichkeit, die Kategorien vom Computer entfernen. Die <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> Methode können Sie zum Anzeigen der Liste der Kategorien, während <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A> Ruft alle-Indikator und-Instanz Daten, die einer einzigen Kategorie zugeordnet.  
  
 Ein Leistungsindikator veröffentlicht Leistungsdaten zu einer Anwendung. Kategorien umfassen die physischen Komponenten (z. B. Prozessoren, Datenträger und Speicher) und Systemobjekte (z. B. Prozesse und Threads). Systemleistungsindikatoren, die auf die gleiche Leistungsobjekt verknüpft sind, werden in einer Kategorie gruppiert, die den allgemeinen Fokus angibt. Beim Erstellen einer Instanz von der <xref:System.Diagnostics.PerformanceCounter> -Klasse, geben Sie zuerst die Kategorie mit dem die Komponente interagieren soll, und wählen Sie dann einen Leistungsindikator aus dieser Kategorie.  
  
 Beispielsweise ist eine Windows-Leistungsindikator-Kategorienamen den Speicher. Systemleistungsindikatoren in dieser Kategorie verfolgen Speicherdaten wie z. B. die Anzahl der Bytes, die verfügbar sind und die Anzahl der Bytes, die zwischengespeichert. Wenn Sie mit den Bytes, die zwischengespeichert werden, in der Anwendung arbeiten möchten, würden, erstellen Sie eine Instanz von der <xref:System.Diagnostics.PerformanceCounter> Komponente, mit der Kategorie Speicher verbinden, und wählen Sie dann den entsprechenden Zähler (in diesem Fall zwischengespeicherten Bytes) aus dieser Kategorie.  
  
 Obwohl auf Ihrem System eine Vielzahl weiterer Indikatorkategorien verfügbar ist, werden die Kategorien, denen Sie wahrscheinlich am häufigsten interagieren werden Cache, Speicher, Objekte, Physikalischer Datenträger, Prozessor, Server, System und Thread.  
  
> [!IMPORTANT]
>  Die <xref:System.Diagnostics.PerformanceCounter.RemoveInstance%2A> -Methode in der die <xref:System.Diagnostics.PerformanceCounter> Klasse gibt des Zählers und frei, wenn die Option für die Wiederverwendung für diese Kategorie ausgewählt ist, wird die Instanz des Indikators wiederverwendet werden. Dies kann eine Racebedingung führen, wenn ein anderer Prozess oder sogar einen anderen Teil des Codes versucht, die in der Counter-Instanz zu schreiben.  
  
> [!NOTE]
>  Es wird dringend empfohlen, dass neue Leistungsindikatorkategorien erstellt werden, während der Installation der Anwendung, nicht während der Ausführung der Anwendung. Dadurch wird die Zeit für das Betriebssystem, um die Liste der registrierten Leistungsindikatorkategorien zu aktualisieren. Wenn die Liste nicht aktualisiert worden sind, schlägt der Versuch, verwenden Sie die Kategorie fehl.  
  
> [!NOTE]
>  Leistungsindikatorkategorien installiert, mit der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] separaten freigegebenen Arbeitsspeicher mit jeder Leistungsindikatorkategorie, die über einen eigenen Speicherbereich verwenden. Sie können die Größe des separater freigegebener Arbeitsspeicher angeben, indem Sie einen DWORD-Wert mit dem Namen FileMappingSize im Registrierungsschlüssel HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<Kategorienamen >* \ Die Leistung. Die FileMappingSize der Anzahl von gemeinsam genutzten Speicher für die Kategorie festgelegt ist. Die Standardgröße beträgt, Dezimal 131072. Wenn der FileMappingSize-Wert nicht vorhanden ist, ist die `fileMappingSize` -Attributwert für die `performanceCounters` Element in der Datei "Machine.config" angegeben verwendet wird, was zu zusätzlichem Aufwand für die Verarbeitung der Konfiguration-Dateien. Sie können eine leistungsverbesserung für den Anwendungsstart realisieren, durch Festlegen der Größe der Zuordnung in der Registrierung. Weitere Informationen zur Größe Zuordnung finden Sie unter [ &lt;PerformanceCounters&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/performancecounters-element.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounter> und die zugehörige <xref:System.Diagnostics.PerformanceCounterCategory> vorhanden sind, auf dem lokalen Computer oder einem anderen Computer. Wenn diese Objekte nicht auf dem lokalen Computer vorhanden sind, erstellt das Beispiel optional. Er verwendet den <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> Methode, um zu bestimmen, ob die <xref:System.Diagnostics.PerformanceCounterCategory> vorhanden ist.  Wenn die <xref:System.Diagnostics.PerformanceCounterCategory> ist nicht vorhanden und kein Leistungsindikator-Name angegeben ist oder wenn der Computer auf einem Remotecomputer befindet, beendet das Beispiel.  
  
 Wenn eine <xref:System.Diagnostics.PerformanceCounter> Name angegeben wird, im Beispiel wird die <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> Methode und das Ergebnis für den Benutzer angezeigt. Wenn die <xref:System.Diagnostics.PerformanceCounter> ist nicht vorhanden, der Benutzer zu löschen und neu erstellen kann der <xref:System.Diagnostics.PerformanceCounterCategory> mit dem neuen <xref:System.Diagnostics.PerformanceCounter>. Wenn der Benutzer der Fall ist, die Kategorie wird gelöscht mit der <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> Methode.  
  
 Falls angefordert, das Beispiel erstellt jetzt die neue <xref:System.Diagnostics.PerformanceCounterCategory> und <xref:System.Diagnostics.PerformanceCounter> mithilfe der <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> Methode. Wenn ein Instanzname angegeben ist, wird im Beispiel wird die <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> Methode und das Ergebnis wird angezeigt.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.Class/CS/perfcountercatcreateexist.cs#27)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.Class/VB/perfcountercatcreateexist.vb#27)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.PerformanceCounter" />
    <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
    <altmember cref="T:System.Diagnostics.CounterSample" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounterCategory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounterCategory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Klasse, lässt die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft leer und legt die <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />-Eigenschaft auf den lokalen Computer fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> Eigenschaft muss festgelegt werden, vor dem Zuordnen dieser <xref:System.Diagnostics.PerformanceCounterCategory> -Instanz mit dem Leistungsobjekt aus, das auf dem Server. Andernfalls wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird akzeptiert eine <xref:System.Diagnostics.PerformanceCounterCategory> und einen Computernamen über die Befehlszeile.  Erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> mithilfe der Überladung des Konstruktors für die Anzahl von Parametern angegeben, dann werden die Eigenschaften angezeigt.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatctor.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatctor.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounterCategory (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounterCategory(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounterCategory : string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="new System.Diagnostics.PerformanceCounterCategory categoryName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der Leistungsindikatorkategorie oder des Leistungsobjekts, der bzw. dem diese <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Instanz zugeordnet werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Klasse, legt die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft auf den angegebenen Wert und die <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />-Eigenschaft auf den lokalen Computer fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird akzeptiert eine <xref:System.Diagnostics.PerformanceCounterCategory> und einen Computernamen über die Befehlszeile. Erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> mithilfe der Überladung des Konstruktors, der für die Anzahl von bereitgestellten Parametern geeignet ist, dann werden deren Eigenschaften.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatctor.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatctor.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" /> ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Informationen zu Auftragskategorien, z. B. den Namen der Kategorie. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounterCategory (string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounterCategory(System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounterCategory : string * string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="new System.Diagnostics.PerformanceCounterCategory (categoryName, machineName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der Leistungsindikatorkategorie oder des Leistungsobjekts, der bzw. dem diese <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Instanz zugeordnet werden soll.</param>
        <param name="machineName">Der Computer, auf dem die Leistungsindikatorkategorie und die zugeordneten Indikatoren vorhanden sind.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Klasse und legt die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft und die <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />-Eigenschaft auf die angegebenen Werte fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird akzeptiert eine <xref:System.Diagnostics.PerformanceCounterCategory> und einen Computernamen über die Befehlszeile. Erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> mithilfe der Überladung des Konstruktors, der für die Anzahl von bereitgestellten Parametern geeignet ist, dann werden deren Eigenschaften.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatctor.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatctor.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" /> ist eine leere Zeichenfolge ("").  
  
- oder -  
Die Syntax für <paramref name="machineName" /> ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Informationen zu Auftragskategorien, z. B. den Namen des Computers und Kategorie. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CategoryHelp">
      <MemberSignature Language="C#" Value="public string CategoryHelp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryHelp" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryHelp As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryHelp { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryHelp : string" Usage="System.Diagnostics.PerformanceCounterCategory.CategoryHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Hilfetext zu dieser Kategorie ab.</summary>
        <value>Eine Beschreibung des Leistungsobjekts, das von dieser Kategorie gemessen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> mit der <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor>. Sie fordert den Benutzer zu der <xref:System.Diagnostics.PerformanceCounterCategory> und Computernamen, legt dann die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> und <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> Eigenschaften aus den eingegebenen Werten. Es zeigt dann die Werte der <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A>, und <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> Eigenschaften, oder es wird eine Fehlermeldung angezeigt, wenn die <xref:System.Diagnostics.PerformanceCounterCategory> kann nicht zugegriffen werden.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatProps.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatprops.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft ist <see langword="null" />. Der Kategoriename muss vor dem Abrufen der Hilfe für die Kategorie festgelegt werden.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.CounterHelp" />
      </Docs>
    </Member>
    <Member MemberName="CategoryName">
      <MemberSignature Language="C#" Value="public string CategoryName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryName : string with get, set" Usage="System.Diagnostics.PerformanceCounterCategory.CategoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Leistungsobjekts ab, das diese Kategorie definiert, oder legt diesen fest.</summary>
        <value>Der Name der Leistungsindikatorkategorie oder des Leistungsobjekts, der bzw. dem diese <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Instanz zugeordnet werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> mit der <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor>. Sie fordert den Benutzer zu der <xref:System.Diagnostics.PerformanceCounterCategory> und Computernamen, legt dann die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> und <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> Eigenschaften aus den eingegebenen Werten. Es zeigt dann die Werte der <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A>, und <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> Eigenschaften, oder es wird eine Fehlermeldung angezeigt, wenn die <xref:System.Diagnostics.PerformanceCounterCategory> kann nicht zugegriffen werden.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatProps.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatprops.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> ist <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CategoryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounterCategoryType CategoryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.PerformanceCounterCategoryType CategoryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.CategoryType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryType As PerformanceCounterCategoryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::PerformanceCounterCategoryType CategoryType { System::Diagnostics::PerformanceCounterCategoryType get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryType : System.Diagnostics.PerformanceCounterCategoryType" Usage="System.Diagnostics.PerformanceCounterCategory.CategoryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategoryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der Leistungsindikatorkategorie ab.</summary>
        <value>Einer der <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryType%2A> Eigenschaft gibt an, ob die <xref:System.Diagnostics.PerformanceCounterCategory> Objekt kann mehrere Instanzen haben. Die möglichen Werte sind <xref:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance>, <xref:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance>, oder <xref:System.Diagnostics.PerformanceCounterCategoryType.Unknown>.  
  
 Es gibt zwei Arten von Leistungsindikatorkategorien: Einzelinstanzen und Mehrinstanzen. Standardmäßig ist eine Kategorie Einzel-Instanz aus, wenn es erstellt wird und mit mehreren Instanzen wird, wenn eine andere Instanz hinzugefügt wird. Kategorien werden erstellt, wenn eine Anwendung wird eingerichtet, und Instanzen zur Laufzeit hinzugefügt werden. In der .NET Framework-Versionen 1.0 und 1.1 ist es nicht notwendig zu wissen, ob eine Leistungsindikatorkategorie mit mehreren Instanzen ist oder Einzel-Instanz. In der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], <xref:System.Diagnostics.PerformanceCounterCategoryType> Enumeration wird verwendet, um anzugeben, ob ein Leistungsindikator mehrere Instanzen haben kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CounterExists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob ein angegebener Zähler in einer bestimmten Kategorie registriert ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CounterExists">
      <MemberSignature Language="C#" Value="public bool CounterExists (string counterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CounterExists(string counterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CounterExists (counterName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CounterExists(System::String ^ counterName);" />
      <MemberSignature Language="F#" Value="member this.CounterExists : string -&gt; bool" Usage="performanceCounterCategory.CounterExists counterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterName">Der Name des gesuchten Leistungsindikators.</param>
        <summary>Bestimmt, ob der angegebene Zähler in dieser Kategorie registriert ist. Dies wird durch die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft und die <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />-Eigenschaft angegeben.</summary>
        <returns>
          <see langword="true" />, wenn der Zähler in der Kategorie registriert ist, die durch die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft und die <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />-Eigenschaft angegeben wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen festlegen, die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> Eigenschaft, bevor diese Methode aufrufen. Andernfalls wird eine Ausnahme ausgelöst.  
  
 Wenn Sie nicht festgelegt haben die <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> -Eigenschaft, diese Methode verwendet den lokalen Computer (".").  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounter> vorhanden ist. Wird ein Kategoriename, Indikatorname und Name des Computers von der Befehlszeile aus, wenn sie angegeben sind. Erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> Objekt mit dem entsprechenden <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor%2A>. Anschließend wird mithilfe der <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%28System.String%29> Methode, um zu bestimmen, ob das angegebene <xref:System.Diagnostics.PerformanceCounter> vorhanden ist, und informiert den Benutzer.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatobjexists.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatobjcountexists.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="counterName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft wurde nicht festgelegt.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CounterExists">
      <MemberSignature Language="C#" Value="public static bool CounterExists (string counterName, string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CounterExists(string counterName, string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CounterExists (counterName As String, categoryName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CounterExists(System::String ^ counterName, System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member CounterExists : string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.CounterExists (counterName, categoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterName">Der Name des gesuchten Leistungsindikators.</param>
        <param name="categoryName">Der Name der Leistungsindikatorkategorie oder des Leistungsobjekts, der bzw. dem der angegebene Leistungsindikator zugeordnet ist.</param>
        <summary>Bestimmt, ob der angegebene Indikator in der angegebenen Kategorie auf dem lokalen Computer registriert ist.</summary>
        <returns>
          <see langword="true" />, wenn der Zähler in der angegebenen Kategorie auf dem lokalen Computer registriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounter> vorhanden ist. Wird ein Kategoriename, Indikatorname und Name des Computers von der Befehlszeile aus, wenn sie angegeben sind. Überladungen der statischen verwendet die <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> Methode, um zu bestimmen, ob das angegebene <xref:System.Diagnostics.PerformanceCounter> Name vorhanden ist, der <xref:System.Diagnostics.PerformanceCounterCategory>. Die Überladung wird ausgewählt, basierend auf, ob ein Computername bereitgestellt wird.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatcounterexists.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatcountexists.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.  
  
- oder -  
<paramref name="counterName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" /> ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.InvalidOperationException">Der Kategorienname ist nicht vorhanden.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CounterExists">
      <MemberSignature Language="C#" Value="public static bool CounterExists (string counterName, string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CounterExists(string counterName, string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CounterExists (counterName As String, categoryName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CounterExists(System::String ^ counterName, System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member CounterExists : string * string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.CounterExists (counterName, categoryName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterName">Der Name des gesuchten Leistungsindikators.</param>
        <param name="categoryName">Der Name der Leistungsindikatorkategorie oder des Leistungsobjekts, der bzw. dem der angegebene Leistungsindikator zugeordnet ist.</param>
        <param name="machineName">Der Name des Computers, auf dem die Leistungsindikatorkategorie und die zugeordneten Zähler vorhanden sind.</param>
        <summary>Bestimmt, ob der angegebene Indikator in der angegebenen Kategorie auf einem Remotecomputer registriert ist.</summary>
        <returns>
          <see langword="true" />, wenn der Zähler in der angegebenen Kategorie auf dem angegebenen Computer registriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounter> vorhanden ist. Wird ein Kategoriename, Indikatorname und Name des Computers von der Befehlszeile aus, wenn sie angegeben sind. Überladungen der statischen verwendet die <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> Methode, um zu bestimmen, ob das angegebene <xref:System.Diagnostics.PerformanceCounter> Name vorhanden ist, der <xref:System.Diagnostics.PerformanceCounterCategory>. Die Überladung wird ausgewählt, basierend auf, ob ein Computername bereitgestellt wird.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatcounterexists.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatcountexists.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.  
  
- oder -  
<paramref name="counterName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" /> ist eine leere Zeichenfolge ("").  
  
- oder -  
<paramref name="machineName" /> ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Der Kategorienname ist nicht vorhanden.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registriert eine benutzerdefinierte Leistungsindikatorkategorie und mindestens einen Zähler im System.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.CounterCreationDataCollection counterData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, class System.Diagnostics.CounterCreationDataCollection counterData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, counterData As CounterCreationDataCollection) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::Diagnostics::CounterCreationDataCollection ^ counterData);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * System.Diagnostics.CounterCreationDataCollection -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, counterData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use another overload that uses PerformanceCounterCategoryType instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="categoryHelp" Type="System.String" />
        <Parameter Name="counterData" Type="System.Diagnostics.CounterCreationDataCollection" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der benutzerdefinierten Leistungsindikatorkategorie, die erstellt und im System registriert werden soll.</param>
        <param name="categoryHelp">Eine Beschreibung der benutzerdefinierten Kategorie.</param>
        <param name="counterData">Eine <see cref="T:System.Diagnostics.CounterCreationDataCollection" />, die die als Bestandteil der neuen Kategorie zu erstellenden Zähler angibt.</param>
        <summary>Registriert die benutzerdefinierte Leistungsindikatorkategorie, die die angegebenen Zähler enthält, auf dem lokalen Computer.</summary>
        <returns>Eine <see cref="T:System.Diagnostics.PerformanceCounterCategory" />, die der neuen benutzerdefinierten Kategorie oder dem Leistungsobjekt zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounterCategory> Objekt mit dem Namen "Orders" vorhanden ist. Wenn nicht, erstellt die <xref:System.Diagnostics.PerformanceCounterCategory> -Objekt unter Verwendung einer <xref:System.Diagnostics.CounterCreationDataCollection> -Objekt, das zwei Leistungsindikatoren enthält.  
  
 [!code-cpp[PerfCounter_ccd#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter_ccd/CPP/ccd.cpp#1)]
 [!code-csharp[PerfCounter_ccd#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/CS/ccd.cs#1)]
 [!code-vb[PerfCounter_ccd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter_ccd/VB/ccd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein in der <paramref name="counterData" />-Auflistung angegebener Zählername ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder -  
Ein in der <paramref name="counterData" />-Auflistung angegebener Zähler ist bereits vorhanden.  
  
- oder -  
Die Syntax des <paramref name="counterName" />-Parameters ist ungültig. Sie enthält möglicherweise umgekehrte Schrägstriche ("\\") oder ist länger als 80 Zeichen.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="categoryName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Kategorie ist auf dem lokalen Computer bereits vorhanden.  
  
- oder -  
Das Layout der <paramref name="counterData" />-Auflistung ist bezüglich der Basiszähler falsch. Auf einen Zähler des Typs <see langword="AverageCount64" />, <see langword="AverageTimer32" />, <see langword="CounterMultiTimer" />, <see langword="CounterMultiTimerInverse" />, <see langword="CounterMultiTimer100Ns" />, <see langword="CounterMultiTimer100NsInverse" />, <see langword="RawFraction" />, <see langword="SampleFraction" /> oder <see langword="SampleCounter" /> muss unmittelbar einer der Basiszählertypen folgen (<see langword="AverageBase" />, <see langword="MultiBase" />, <see langword="RawBase" /> oder <see langword="SampleBase" />).</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">zum Durchführen von Verwaltungsaufgaben auf Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.PerformanceCounterCategoryType categoryType, System.Diagnostics.CounterCreationDataCollection counterData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, valuetype System.Diagnostics.PerformanceCounterCategoryType categoryType, class System.Diagnostics.CounterCreationDataCollection counterData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, categoryType As PerformanceCounterCategoryType, counterData As CounterCreationDataCollection) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::Diagnostics::PerformanceCounterCategoryType categoryType, System::Diagnostics::CounterCreationDataCollection ^ counterData);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * System.Diagnostics.PerformanceCounterCategoryType * System.Diagnostics.CounterCreationDataCollection -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, categoryType, counterData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="categoryHelp" Type="System.String" />
        <Parameter Name="categoryType" Type="System.Diagnostics.PerformanceCounterCategoryType" />
        <Parameter Name="counterData" Type="System.Diagnostics.CounterCreationDataCollection" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der benutzerdefinierten Leistungsindikatorkategorie, die erstellt und im System registriert werden soll.</param>
        <param name="categoryHelp">Eine Beschreibung der benutzerdefinierten Kategorie.</param>
        <param name="categoryType">Einer der <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" />-Werte.</param>
        <param name="counterData">Eine <see cref="T:System.Diagnostics.CounterCreationDataCollection" />, die die als Bestandteil der neuen Kategorie zu erstellenden Zähler angibt.</param>
        <summary>Registriert die benutzerdefinierte Leistungsindikatorkategorie, die die angegebenen Zähler enthält, auf dem lokalen Computer.</summary>
        <returns>Eine <see cref="T:System.Diagnostics.PerformanceCounterCategory" />, die der neuen benutzerdefinierten Kategorie oder dem Leistungsobjekt zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `categoryType` Parameter gibt an, ob die Leistungsindikatorkategorie Einzel-Instanz oder mit mehreren Instanzen. Standardmäßig ist eine Kategorie Einzel-Instanz aus, wenn es erstellt wird und mit mehreren Instanzen wird, wenn eine andere Instanz hinzugefügt wird. Kategorien werden erstellt, wenn eine Anwendung wird eingerichtet, und Instanzen zur Laufzeit hinzugefügt werden. In der .NET Framework-Versionen 1.0 und 1.1 ist es nicht notwendig zu wissen, ob eine Leistungsindikatorkategorie mit mehreren Instanzen ist oder Einzel-Instanz. In der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], <xref:System.Diagnostics.PerformanceCounterCategoryType> Enumeration wird verwendet, um anzugeben, ob ein Leistungsindikator mehrere Instanzen haben kann.  
  
 Leistungsindikatorkategorien installiert, mit der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] separaten freigegebenen Arbeitsspeicher mit jeder Leistungsindikatorkategorie, die über einen eigenen Speicherbereich verwenden.  Sie können die Größe des separater freigegebener Arbeitsspeicher angeben, indem Sie einen DWORD-Wert mit dem Namen FileMappingSize im Registrierungsschlüssel HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<Kategorienamen >* \ Die Leistung. Die FileMappingSize der Anzahl von gemeinsam genutzten Speicher für die Kategorie festgelegt ist. Die Standardgröße beträgt, Dezimal 131072. Wenn der FileMappingSize-Wert nicht vorhanden ist, ist die `fileMappingSize` -Attributwert für die `performanceCounters` Element in der Datei "Machine.config" angegeben verwendet wird, was zu zusätzlichem Aufwand für die Verarbeitung der Konfiguration-Dateien. Sie können eine leistungsverbesserung für den Anwendungsstart realisieren, durch Festlegen der Größe der Zuordnung in der Registrierung.  
  
> [!NOTE]
>  Es wird dringend empfohlen, dass neue Leistungsindikatorkategorien erstellt werden, während der Installation der Anwendung, nicht während der Ausführung der Anwendung. Dadurch wird die Zeit für das Betriebssystem, um die Liste der registrierten Leistungsindikatorkategorien zu aktualisieren. Wenn die Liste nicht aktualisiert worden sind, schlägt der Versuch, verwenden Sie die Kategorie fehl.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Verwendung der <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> Methode. Das Beispiel zeigt, wie eine benutzerdefinierte Leistungsindikatorkategorie mit mehreren Instanzen, für die Anzahl der Aufträge pro Sekunde erstellt wird.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategoryType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategoryType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein in der <paramref name="counterData" />-Auflistung angegebener Zählername ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder -  
Ein in der <paramref name="counterData" />-Auflistung angegebener Zähler ist bereits vorhanden.  
  
- oder -  
 Die Syntax für <paramref name="counterName" /> ist ungültig. Sie enthält möglicherweise umgekehrte Schrägstriche ("\\") oder ist länger als 80 Zeichen.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="counterData" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="categoryType" />-Wert liegt außerhalb des Bereichs der folgenden Werte: <see langword="MultiInstance" />, <see langword="SingleInstance" />, oder <see langword="Unknown" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Kategorie ist auf dem lokalen Computer bereits vorhanden.  
  
- oder -  
Das Layout der <paramref name="counterData" />-Auflistung ist bezüglich der Basiszähler falsch. Auf einen Zähler des Typs <see langword="AverageCount64" />, <see langword="AverageTimer32" />, <see langword="CounterMultiTimer" />, <see langword="CounterMultiTimerInverse" />, <see langword="CounterMultiTimer100Ns" />, <see langword="CounterMultiTimer100NsInverse" />, <see langword="RawFraction" />, <see langword="SampleFraction" /> oder <see langword="SampleCounter" /> muss unmittelbar einer der Basiszählertypen folgen (<see langword="AverageBase" />, <see langword="MultiBase" />, <see langword="RawBase" /> oder <see langword="SampleBase" />).</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">zum Durchführen von Verwaltungsaufgaben auf Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, string counterName, string counterHelp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, string counterName, string counterHelp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, counterName As String, counterHelp As String) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::String ^ counterName, System::String ^ counterHelp);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, counterName, counterHelp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use another overload that uses PerformanceCounterCategoryType instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="categoryHelp" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="counterHelp" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der benutzerdefinierten Leistungsindikatorkategorie, die erstellt und im System registriert werden soll.</param>
        <param name="categoryHelp">Eine Beschreibung der benutzerdefinierten Kategorie.</param>
        <param name="counterName">Der Name eines neuen Indikators vom Typ <see langword="NumberOfItems32" />, der als Bestandteil der neuen Kategorie erstellt werden soll.</param>
        <param name="counterHelp">Eine Beschreibung des Zählers, der der neuen benutzerdefinierten Kategorie zugeordnet ist.</param>
        <summary>Registriert eine benutzerdefinierte Leistungsindikatorkategorie, die einen einzelnen Indikator vom Typ <see langword="NumberOfItems32" /> enthält, auf dem lokalen Computer.</summary>
        <returns>Eine <see cref="T:System.Diagnostics.PerformanceCounterCategory" />, die der neuen Systemkategorie oder dem Leistungsobjekt zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> und einzelne <xref:System.Diagnostics.PerformanceCounter> mit Hilfetext für jeden, der mit der <xref:System.Diagnostics.PerformanceCounterCategory.Create%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> Methode.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatcreate.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatcreate.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="counterName" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder -  
Der von <paramref name="counterName" /> angegebene Zähler ist bereits vorhanden.  
  
- oder -  
 Die Syntax für <paramref name="counterName" /> ist ungültig. Sie enthält möglicherweise umgekehrte Schrägstriche ("\\") oder ist länger als 80 Zeichen.</exception>
        <exception cref="T:System.InvalidOperationException">Die Kategorie ist auf dem lokalen Computer bereits vorhanden.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="counterHelp" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">zum Durchführen von Verwaltungsaufgaben auf Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.CounterHelp" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.PerformanceCounterCategoryType categoryType, string counterName, string counterHelp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, valuetype System.Diagnostics.PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, categoryType As PerformanceCounterCategoryType, counterName As String, counterHelp As String) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::Diagnostics::PerformanceCounterCategoryType categoryType, System::String ^ counterName, System::String ^ counterHelp);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * System.Diagnostics.PerformanceCounterCategoryType * string * string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, categoryType, counterName, counterHelp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="categoryHelp" Type="System.String" />
        <Parameter Name="categoryType" Type="System.Diagnostics.PerformanceCounterCategoryType" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="counterHelp" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der benutzerdefinierten Leistungsindikatorkategorie, die erstellt und im System registriert werden soll.</param>
        <param name="categoryHelp">Eine Beschreibung der benutzerdefinierten Kategorie.</param>
        <param name="categoryType">Einer der <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" />-Werte, der angibt, ob die Kategorie <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance" />, <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance" /> oder <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown" /> ist.</param>
        <param name="counterName">Der Name eines neuen Zählers, der als Bestandteil der neuen Kategorie erstellt werden soll.</param>
        <param name="counterHelp">Eine Beschreibung des Zählers, der der neuen benutzerdefinierten Kategorie zugeordnet ist.</param>
        <summary>Registriert die benutzerdefinierte Leistungsindikatorkategorie, die einen einzelnen Indikator vom Typ <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" /> enthält, auf dem lokalen Computer.</summary>
        <returns>Eine <see cref="T:System.Diagnostics.PerformanceCounterCategory" />, die der neuen Systemkategorie oder dem Leistungsobjekt zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `categoryType` Parameter gibt an, ob die Leistungsindikatorkategorie Einzel-Instanz oder mit mehreren Instanzen. Standardmäßig ist eine Kategorie Einzel-Instanz aus, wenn es erstellt wird und mit mehreren Instanzen wird, wenn eine andere Instanz hinzugefügt wird. Kategorien werden erstellt, wenn eine Anwendung wird eingerichtet, und Instanzen zur Laufzeit hinzugefügt werden. In der .NET Framework-Versionen 1.0 und 1.1 ist es nicht notwendig zu wissen, ob eine Leistungsindikatorkategorie mit mehreren Instanzen ist oder Einzel-Instanz. In der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], <xref:System.Diagnostics.PerformanceCounterCategoryType> Enumeration wird verwendet, um anzugeben, ob ein Leistungsindikator mehrere Instanzen haben kann.  
  
 Leistungsindikatorkategorien installiert, mit der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] separaten freigegebenen Arbeitsspeicher mit jeder Leistungsindikatorkategorie, die über einen eigenen Speicherbereich verwenden. Sie können die Größe des separater freigegebener Arbeitsspeicher angeben, indem Sie einen DWORD-Wert mit dem Namen FileMappingSize im Registrierungsschlüssel HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<Kategorienamen >* \ Die Leistung. Die FileMappingSize der Anzahl von gemeinsam genutzten Speicher für die Kategorie festgelegt ist. Die Standardgröße beträgt, Dezimal 131072. Wenn der FileMappingSize-Wert nicht vorhanden ist, ist die `fileMappingSize` -Attributwert für die `performanceCounters` Element in der Datei "Machine.config" angegeben verwendet wird, was zu zusätzlichem Aufwand für die Verarbeitung der Konfiguration-Dateien. Sie können eine leistungsverbesserung für den Anwendungsstart realisieren, durch Festlegen der Größe der Zuordnung in der Registrierung.  
  
> [!NOTE]
>  Es wird dringend empfohlen, dass neue Leistungsindikatorkategorien erstellt werden, während der Installation der Anwendung, nicht während der Ausführung der Anwendung. Dadurch wird die Zeit für das Betriebssystem, um die Liste der registrierten Leistungsindikatorkategorien zu aktualisieren. Wenn die Liste nicht aktualisiert worden sind, schlägt der Versuch, verwenden Sie die Kategorie fehl.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Verwendung der <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> Methode. Das Beispiel zeigt, wie Sie eine benutzerdefinierte, einzelne Instanz der Leistungsindikatorkategorie zu erstellen.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategoryType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategoryType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="counterName" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder -  
Der von <paramref name="counterName" /> angegebene Zähler ist bereits vorhanden.  
  
- oder -  
 Die Syntax für <paramref name="counterName" /> ist ungültig. Sie enthält möglicherweise umgekehrte Schrägstriche ("\\") oder ist länger als 80 Zeichen.</exception>
        <exception cref="T:System.InvalidOperationException">Die Kategorie ist auf dem lokalen Computer bereits vorhanden.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryName" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="counterHelp" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">zum Durchführen von Verwaltungsaufgaben auf Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (categoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.Diagnostics.PerformanceCounterCategory.Delete categoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der zu löschenden benutzerdefinierten Leistungsindikatorkategorie.</param>
        <summary>Entfernt die Kategorie und die zugeordneten Indikatoren vom lokalen Computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können nur benutzerdefinierte Leistungsindikatorkategorien aus dem System gelöscht. Einen Leistungsindikator kann nicht aus einer Kategorie gelöscht werden. Klicken Sie dazu die Kategorie löschen und neu erstellen mit den Leistungsindikatoren, die Sie beibehalten möchten. Um eine Ausnahme zu vermeiden, vergewissern Sie sich, dass die Kategorie vorhanden ist, bevor Sie versuchen, ihn zu löschen.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> -Methode zum Löschen einer <xref:System.Diagnostics.PerformanceCounterCategory> und <xref:System.Diagnostics.PerformanceCounter> darin enthaltenen Objekte.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatDelete.cs#6)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatdelete.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="categoryName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Die Syntax des <paramref name="categoryName" />-Parameters ist ungültig. Sie enthält möglicherweise umgekehrte Schrägstriche ("\\") oder ist länger als 80 Zeichen.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.InvalidOperationException">Die Kategorie ist keine benutzerdefinierte Kategorie und kann daher nicht gelöscht werden.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob die Kategorie im System registriert ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (categoryName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.Exists categoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der gesuchten Leistungsindikatorkategorie.</param>
        <summary>Bestimmt, ob die Kategorie auf dem lokalen Computer registriert ist.</summary>
        <returns>
          <see langword="true" />, wenn die Kategorie registriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> Methode kann dazu führen, einen beträchtlichen Leistungseinbußen während für die Verfügbarkeit aller Leistungsindikatoren auf dem Computer aktiviert sind. Wenn Sie nur in einen Leistungsindikator schreiben, können Sie die globale Suche für Leistungsindikatoren vermeiden, durch den Leistungsindikator erstellen, wenn die Anwendung installiert ist, und vorausgesetzt, der Kategorie vorhanden ist, wenn der Zugriff auf den Indikator. Es gibt keine Möglichkeit die Performance Counter-Suche zu vermeiden, beim Lesen von Leistungsindikatoren.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounterCategory> Objekt mit dem Namen "Orders" vorhanden ist. Wenn nicht, erstellt die <xref:System.Diagnostics.PerformanceCounterCategory> -Objekt unter Verwendung einer <xref:System.Diagnostics.CounterCreationDataCollection> -Objekt, das zwei Leistungsindikatoren enthält.  
  
 [!code-cpp[PerfCounter_ccd#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter_ccd/CPP/ccd.cpp#1)]
 [!code-csharp[PerfCounter_ccd#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/CS/ccd.cs#1)]
 [!code-vb[PerfCounter_ccd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter_ccd/VB/ccd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="categoryName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" />-Parameter ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (categoryName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member Exists : string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.Exists (categoryName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">Der Name der gesuchten Leistungsindikatorkategorie.</param>
        <param name="machineName">Der Name des Computers, auf dem die Kategorie gesucht wird.</param>
        <summary>Bestimmt, ob die Kategorie auf dem angegebenen Computer registriert ist.</summary>
        <returns>
          <see langword="true" />, wenn die Kategorie registriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> Methode kann dazu führen, einen beträchtlichen Leistungseinbußen während für die Verfügbarkeit aller Leistungsindikatoren auf dem Computer aktiviert sind. Wenn Sie nur in einen Leistungsindikator schreiben, können Sie die globale Suche für Leistungsindikatoren vermeiden, durch den Leistungsindikator erstellen, wenn die Anwendung installiert ist, und vorausgesetzt, der Kategorie vorhanden ist, wenn der Zugriff auf den Indikator. Es gibt keine Möglichkeit die Performance Counter-Suche zu vermeiden, beim Lesen von Leistungsindikatoren.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgende Beispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounterCategory> Objekt mit dem Namen `Orders` vorhanden ist. Im Beispiel wird erstellt, wenn er nicht vorhanden ist, die <xref:System.Diagnostics.PerformanceCounterCategory> -Objekt unter Verwendung einer <xref:System.Diagnostics.CounterCreationDataCollection> -Objekt, das zwei Leistungsindikatoren enthält.  
  
 [!code-cpp[PerfCounter_ccd#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter_ccd/CPP/ccd.cpp#1)]
 [!code-csharp[PerfCounter_ccd#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/CS/ccd.cs#1)]
 [!code-vb[PerfCounter_ccd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter_ccd/VB/ccd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="categoryName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder -  
Der <paramref name="machineName" />-Parameter ist ungültig.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.IO.IOException">Der Netzwerkpfad kann nicht gefunden werden.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.  
  
- oder -  
Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCategories">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine Liste der auf einem Computer registrierten Leistungsindikatorkategorien ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCategories">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory[] GetCategories ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory[] GetCategories() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCategories" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCategories () As PerformanceCounterCategory()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::PerformanceCounterCategory ^&gt; ^ GetCategories();" />
      <MemberSignature Language="F#" Value="static member GetCategories : unit -&gt; System.Diagnostics.PerformanceCounterCategory[]" Usage="System.Diagnostics.PerformanceCounterCategory.GetCategories " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Liste der auf dem lokalen Computer registrierten Leistungsindikatorkategorien ab.</summary>
        <returns>Ein Array von <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Objekten, das die auf dem lokalen Computer registrierten Kategorien angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> Methode, um ein Array von zurückzugeben <xref:System.Diagnostics.PerformanceCounterCategory> Objekte aus dem lokalen Computer oder einem angegebenen Computer. Konvertiert die <xref:System.Diagnostics.PerformanceCounterCategory> Array in ein Array von Kategorienamen, die sortiert und für den Benutzer angezeigt. Die <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> Überladung ausgewählt ist, abhängig, ob ein Computername angegeben wurde.  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountergetcat.cpp#2)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountergetcat.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcat.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="GetCategories">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory[] GetCategories (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory[] GetCategories(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCategories (machineName As String) As PerformanceCounterCategory()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::PerformanceCounterCategory ^&gt; ^ GetCategories(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetCategories : string -&gt; System.Diagnostics.PerformanceCounterCategory[]" Usage="System.Diagnostics.PerformanceCounterCategory.GetCategories machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">Der zu durchsuchende Computer.</param>
        <summary>Ruft eine Liste der auf dem angegebenen Computer registrierten Leistungsindikatorkategorien ab.</summary>
        <returns>Ein Array von <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Objekten, das die auf dem angegebenen Computer registrierten Kategorien angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie die Kategorien auf dem lokalen Computer mit einer anderen Überladung aus, oder übergeben Sie "." als die `machineName` Parameter.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> Methode, um ein Array von zurückzugeben <xref:System.Diagnostics.PerformanceCounterCategory> Objekte aus dem lokalen Computer oder einem angegebenen Computer. Konvertiert die <xref:System.Diagnostics.PerformanceCounterCategory> Array in ein Array von Kategorienamen, die sortiert und für den Benutzer angezeigt. Die <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> Überladung ausgewählt ist, abhängig, ob ein Computername angegeben wurde.  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountergetcat.cpp#2)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountergetcat.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcat.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="machineName" />-Parameter ist ungültig.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCounters">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine Liste der Zähler in dieser Leistungsindikatorkategorie ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCounters">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounter[] GetCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.PerformanceCounter[] GetCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCounters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCounters () As PerformanceCounter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Diagnostics::PerformanceCounter ^&gt; ^ GetCounters();" />
      <MemberSignature Language="F#" Value="member this.GetCounters : unit -&gt; System.Diagnostics.PerformanceCounter[]" Usage="performanceCounterCategory.GetCounters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Liste von Indikatoren in einer Leistungsindikatorkategorie ab, die genau eine Instanz enthält.</summary>
        <returns>Ein Array von <see cref="T:System.Diagnostics.PerformanceCounter" />-Objekten, das die Zähler angibt, die dieser Leistungsindikatorkategorie mit einzelner Instanz zugeordnet sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Leistungsobjektinstanzen, finden Sie unter den <xref:System.Diagnostics.PerformanceCounter> Übersicht über die Klasse.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel ruft eine Liste mit den <xref:System.Diagnostics.PerformanceCounter> Objekte in einer <xref:System.Diagnostics.PerformanceCounterCategory>. Es erstellt zunächst einen <xref:System.Diagnostics.PerformanceCounterCategory> mit dem entsprechenden Konstruktor abhängig, ob ein Computername angegeben wurde. Anschließend werden mithilfe der <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> Methode, um ein Array von zurückzugeben <xref:System.Diagnostics.PerformanceCounter> Objekte, die Auswahl der <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> Grundlage, dass die Überladung gibt an, ob ein Instanzname angegeben wurde.  
  
 Dies <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters> -Überladung schlägt fehl, es sei denn, es mit einer Kategorie Einzel-Instanz verwendet wird.  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountercatgetcount.cpp#4)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountercatgetcount.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcount.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Kategorie ist keine einzelne Instanz.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.InvalidOperationException">Die Kategorie hat keine zugeordnete Instanz.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="GetCounters">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounter[] GetCounters (string instanceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.PerformanceCounter[] GetCounters(string instanceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCounters (instanceName As String) As PerformanceCounter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Diagnostics::PerformanceCounter ^&gt; ^ GetCounters(System::String ^ instanceName);" />
      <MemberSignature Language="F#" Value="member this.GetCounters : string -&gt; System.Diagnostics.PerformanceCounter[]" Usage="performanceCounterCategory.GetCounters instanceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounter[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">Die Leistungsobjektinstanz, für die die Liste der zugeordneten Indikatoren abgerufen werden soll.</param>
        <summary>Ruft eine Liste von Indikatoren in einer Leistungsindikatorkategorie ab, die mindestens eine Instanz enthält.</summary>
        <returns>Ein Array von <see cref="T:System.Diagnostics.PerformanceCounter" />-Objekten, das die Zähler angibt, die der angegebenen Objektinstanz dieser Leistungsindikatorkategorie zugeordnet sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um eine Einzelinstanz-Kategorie darzustellen, übergeben Sie eine leere Zeichenfolge ("") für die `instanceName` Parameter.  
  
 Weitere Informationen zu Leistungsobjektinstanzen, finden Sie unter den <xref:System.Diagnostics.PerformanceCounter> Übersicht über die Klasse.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel ruft eine Liste mit den <xref:System.Diagnostics.PerformanceCounter> Objekte in einer <xref:System.Diagnostics.PerformanceCounterCategory>. Es erstellt zunächst einen <xref:System.Diagnostics.PerformanceCounterCategory> mit dem entsprechenden Konstruktor abhängig, ob ein Computername angegeben wurde. Anschließend werden mithilfe der <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> Methode, um ein Array von zurückzugeben <xref:System.Diagnostics.PerformanceCounter> Objekte, die Auswahl der <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> Grundlage, dass die Überladung gibt an, ob ein Instanzname angegeben wurde.  
  
 Dies <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%28System.String%29> -Überladung schlägt fehl, es sei denn, es mit einer Kategorie verwendet wird, die Instanzen enthält.  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountercatgetcount.cpp#4)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountercatgetcount.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcount.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="instanceName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft für diese <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Instanz wurde nicht festgelegt.  
  
- oder -  
Die Kategorie enthält nicht die durch den <paramref name="instanceName" />-Parameter angegebene Instanz.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="GetInstanceNames">
      <MemberSignature Language="C#" Value="public string[] GetInstanceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetInstanceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstanceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetInstanceNames();" />
      <MemberSignature Language="F#" Value="member this.GetInstanceNames : unit -&gt; string[]" Usage="performanceCounterCategory.GetInstanceNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die Liste der Leistungsobjektinstanzen ab, die dieser Kategorie zugeordnet sind.</summary>
        <returns>Ein Array von Zeichenfolgen, das die Namen der Leistungsobjektinstanzen darstellt, die dieser Kategorie zugeordnet sind, oder, wenn die Kategorie nur eine Leistungsobjektinstanz enthält, ein Array mit einzelnem Eintrag, das eine leere Zeichenfolge ("") enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel ruft eine Liste mit den <xref:System.Diagnostics.PerformanceCounter> Objekte in einer <xref:System.Diagnostics.PerformanceCounterCategory>. Es erstellt zunächst einen <xref:System.Diagnostics.PerformanceCounterCategory> Objekt, mit dem entsprechenden Konstruktor abhängig, ob ein Computername angegeben wurde. Anschließend werden im Beispiel <xref:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames%2A> zurückzugebenden die Instanznamen als ein Array von <xref:System.String>, die sortiert und angezeigt.  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountercatgetinst.cpp#6)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountercatgetinst.cs#6)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetinst.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft ist <see langword="null" />. Die Eigenschaft wurde möglicherweise nicht festgelegt.  
  
- oder -  
Die Kategorie hat keine zugeordnete Instanz.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InstanceExists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob die Kategorie die angegebene Leistungsobjektinstanz enthält.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InstanceExists">
      <MemberSignature Language="C#" Value="public bool InstanceExists (string instanceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InstanceExists(string instanceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InstanceExists (instanceName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InstanceExists(System::String ^ instanceName);" />
      <MemberSignature Language="F#" Value="member this.InstanceExists : string -&gt; bool" Usage="performanceCounterCategory.InstanceExists instanceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">Die gesuchte Leistungsobjektinstanz in dieser Leistungsindikatorkategorie.</param>
        <summary>Bestimmt, ob die angegebene Leistungsobjektinstanz in der Kategorie vorhanden ist, die durch die <see cref="T:System.Diagnostics.PerformanceCounterCategory" />-Eigenschaft dieses <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Objekts bezeichnet wird.</summary>
        <returns>
          <see langword="true" />, wenn die Kategorie die angegebene Leistungsobjektinstanz enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung der <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> nicht `static`. Sie müssen Sie erstellen eine <xref:System.Diagnostics.PerformanceCounterCategory> Objekt und Festlegen der <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> Eigenschaft.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt, ob eine <xref:System.Diagnostics.PerformanceCounter> Instanz vorhanden ist, in einem <xref:System.Diagnostics.PerformanceCounterCategory>. Es erstellt zunächst einen <xref:System.Diagnostics.PerformanceCounterCategory> Objekt, mit dem entsprechenden Konstruktor abhängig, ob ein Computername angegeben wurde. Anschließend werden im Beispiel <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%28System.String%29> zu bestimmen, ob die angegebene Instanz vorhanden ist, wird der Benutzer darüber informiert. Wenn kein Instanzname angegeben wird, wird im Beispiel wird der Standardname für die Einzel-Instanz verwendet.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcounterobjinstexists.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatobjinstexists.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft ist <see langword="null" />. Die Eigenschaft wurde möglicherweise nicht festgelegt.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="instanceName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="InstanceExists">
      <MemberSignature Language="C#" Value="public static bool InstanceExists (string instanceName, string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InstanceExists(string instanceName, string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstanceExists (instanceName As String, categoryName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool InstanceExists(System::String ^ instanceName, System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member InstanceExists : string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.InstanceExists (instanceName, categoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">Die gesuchte Leistungsobjektinstanz.</param>
        <param name="categoryName">Die zu durchsuchende Leistungsindikatorkategorie.</param>
        <summary>Bestimmt, ob die angegebene Kategorie auf dem lokalen Computer die angegebene Leistungsobjektinstanz enthält.</summary>
        <returns>
          <see langword="true" />, wenn die Kategorie die angegebene Leistungsobjektinstanz enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist nicht möglich, um zu bestimmen, ob eine Instanz eines Leistungsobjekts auf einem Computer vorhanden ist, ohne Angabe einer bestimmten Kategorie gesucht werden soll.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel verwendet die statische Überladungen der <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> um zu bestimmen, ob der angegebene <xref:System.Diagnostics.PerformanceCounter> Instanz vorhanden ist, der <xref:System.Diagnostics.PerformanceCounterCategory>. Die Überladung wird ausgewählt, basierend auf, ob ein Computername angegeben ist. Wenn kein Instanzname angegeben wird, wird im Beispiel wird der Standardname für die Einzel-Instanz verwendet.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatinstexists.cs#10)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatinstexists.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="instanceName" />-Parameter ist <see langword="null" />.  
  
- oder -  
Der <paramref name="categoryName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" />-Parameter ist eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="InstanceExists">
      <MemberSignature Language="C#" Value="public static bool InstanceExists (string instanceName, string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InstanceExists(string instanceName, string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstanceExists (instanceName As String, categoryName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool InstanceExists(System::String ^ instanceName, System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member InstanceExists : string * string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.InstanceExists (instanceName, categoryName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">Die gesuchte Leistungsobjektinstanz.</param>
        <param name="categoryName">Die zu durchsuchende Leistungsindikatorkategorie.</param>
        <param name="machineName">Der Name des Computers, auf dem das Paar von Kategorieinstanzen gesucht werden soll.</param>
        <summary>Bestimmt, ob eine angegebene Kategorie auf dem angegebenen Computer die angegebene Leistungsobjektinstanz enthält.</summary>
        <returns>
          <see langword="true" />, wenn die Kategorie die angegebene Leistungsobjektinstanz enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist nicht möglich, um zu bestimmen, ob eine Instanz eines Leistungsobjekts auf einem Computer vorhanden ist, ohne Angabe einer bestimmten Kategorie gesucht werden soll.  
  
 Sie können "." auf den lokalen Computer anzugeben.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel verwendet die statische Überladungen der <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> um zu bestimmen, ob der angegebene <xref:System.Diagnostics.PerformanceCounter> Instanz vorhanden ist, der <xref:System.Diagnostics.PerformanceCounterCategory>. Die Überladung wird ausgewählt, basierend auf, ob ein Computername angegeben ist. Wenn kein Instanzname angegeben wird, wird im Beispiel wird der Standardname für die Einzel-Instanz verwendet.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatinstexists.cs#10)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatinstexists.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="instanceName" />-Parameter ist <see langword="null" />.  
  
- oder -  
Der <paramref name="categoryName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="categoryName" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder -  
Der <paramref name="machineName" />-Parameter ist ungültig.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.PerformanceCounterCategory.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Computers ab, auf dem diese Kategorie vorhanden ist, oder legt diesen fest.</summary>
        <value>Der Name des Computers, auf dem die Leistungsindikatorkategorie und die zugeordneten Zähler vorhanden sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> mit der <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor> Konstruktor. Sie fordert den Benutzer zu der <xref:System.Diagnostics.PerformanceCounterCategory> und den Computernamen, legt dann die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> und <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> Eigenschaften aus den eingegebenen Werten. Es zeigt dann die Werte der <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A>, und <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> Eigenschaften, oder es wird eine Fehlermeldung angezeigt, wenn die <xref:System.Diagnostics.PerformanceCounterCategory> kann nicht zugegriffen werden.  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatProps.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatprops.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Syntax für <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> ist ungültig.</exception>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">für das Lesen von Leistungsindikatorkategorien. Zugeordnete Enumeration: <see cref="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read" /></permission>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="ReadCategory">
      <MemberSignature Language="C#" Value="public System.Diagnostics.InstanceDataCollectionCollection ReadCategory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.InstanceDataCollectionCollection ReadCategory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCategory () As InstanceDataCollectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::InstanceDataCollectionCollection ^ ReadCategory();" />
      <MemberSignature Language="F#" Value="member this.ReadCategory : unit -&gt; System.Diagnostics.InstanceDataCollectionCollection" Usage="performanceCounterCategory.ReadCategory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.InstanceDataCollectionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest sämtliche Daten für Indikator- und Leistungsobjektinstanzen, die dieser Leistungsindikatorkategorie zugeordnet sind.</summary>
        <returns>Eine <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" />, die die Daten für Zähler- und Leistungsobjektinstanzen für die Kategorie enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen festlegen, die <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> Eigenschaft vor dem Aufruf <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A>.  
  
 Lesen die gesamte Kategorie auf einmal werden so effizient wie das Lesen der eines einzelnen Indikator aufgrund der Art und Weise, dass das System die Daten bereitstellt.  
  
> [!NOTE]
>  Zum Lesen von Leistungsindikatoren in Windows Vista und höher, Windows XP Professional X64 64 und Windows Server 2003, müssen Sie Mitglied der Gruppe Systemmonitorbenutzer sein oder über Administratorrechte verfügen.  
>   
>  Fügen Sie selbst hinzu, erhöhen die Berechtigungen für den Zugriff auf Leistungsindikatoren in Windows Vista und höheren Versionen nicht, um der Gruppe "Systemmonitorbenutzer" hinzu.  
>   
>  Unter Windows Vista (und höher) werden die Berechtigungen eines Benutzers von der Benutzerkontensteuerung (User Account Control, UAC) bestimmt. Als Mitglied der integrierten Administratorgruppe sind Ihnen zwei Zugriffstoken für die Laufzeit zugewiesen: ein Standardbenutzertoken und ein Administratorzugriffstoken. Standardmäßig verwenden Sie die Standardbenutzerrolle. Zum Ausführen des Codes, die Leistungsindikatoren zugreift, müssen Sie zuerst Ihre Berechtigungen von Standardbenutzer auf Administrator erhöhen. Dazu starten Sie eine Anwendung, indem Sie mit der rechten Maustaste auf das Anwendungssymbol klicken und angeben, dass Sie die Anwendung als Administrator ausführen möchten.   
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Diagnostics.PerformanceCounterCategory> für einen angegebenen <xref:System.Diagnostics.PerformanceCounterCategory> Name. Dann wird <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A> zurückzugebenden ein <xref:System.Diagnostics.InstanceDataCollectionCollection> , enthält die Instanzdaten für alle Instanzen von der <xref:System.Diagnostics.PerformanceCounter> Objekte innerhalb der <xref:System.Diagnostics.PerformanceCounterCategory>.  
  
 [!code-csharp[System.Diagnostics.InstanceData.CopyTo#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.InstanceData.CopyTo/CS/instdatacopyto.cs#6)]
 [!code-vb[System.Diagnostics.InstanceData.CopyTo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.InstanceData.CopyTo/VB/instdatacopyto.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />-Eigenschaft ist <see langword="null" />. Die Eigenschaft wurde möglicherweise nicht festgelegt.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler beim Aufruf einer zugrunde liegenden System-API.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Ohne Administratorrechte ausgeführter Code hat versucht, einen Leistungsindikator zu lesen.</exception>
        <altmember cref="T:System.Diagnostics.InstanceDataCollectionCollection" />
        <altmember cref="T:System.Diagnostics.InstanceDataCollection" />
        <altmember cref="T:System.Diagnostics.InstanceData" />
      </Docs>
    </Member>
  </Members>
</Type>
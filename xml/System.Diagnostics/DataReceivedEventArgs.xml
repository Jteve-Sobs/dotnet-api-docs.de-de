<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e7655343d40e61ca7e3b58503194d11eb904502" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83528135" /></Metadata><TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DataReceivedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DataReceivedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Diagnostics.Process" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Diagnostics.Process.OutputDataReceived" />-Ereignis und das <see cref="E:System.Diagnostics.Process.ErrorDataReceived" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die umgeleiteten <xref:System.Diagnostics.Process.StandardOutput%2A> oder <xref:System.Diagnostics.Process.StandardError%2A> Streamausgabe eines Prozesses asynchron zu erfassen, müssen Sie eine Methode erstellen, die die umgeleiteten Datenstrom Ausgabe Ereignisse behandelt. Die Ereignishandlermethode wird aufgerufen, wenn der Prozess in den umgeleiteten Stream schreibt. Der Ereignis Delegat ruft den Ereignishandler mit einer Instanz von <xref:System.Diagnostics.DataReceivedEventArgs>auf. Die <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>-Eigenschaft enthält die Textzeile, die der Prozess in den umgeleiteten Stream geschrieben hat.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie asynchrone Lesevorgänge für den umgeleiteten <xref:System.Diagnostics.Process.StandardOutput%2A> Stream des `sort`-Befehls durchgeführt werden. Der `sort`-Befehl ist eine Konsolenanwendung, die Texteingaben liest und sortiert.  
  
 Im Beispiel wird ein Ereignis Delegat für den `SortOutputHandler` Ereignishandler erstellt und dem <xref:System.Diagnostics.Process.OutputDataReceived>-Ereignis zugeordnet. Der Ereignishandler empfängt Textzeilen aus dem umgeleiteten <xref:System.Diagnostics.Process.StandardOutput%2A> Stream, formatiert den Text und schreibt den Text auf den Bildschirm.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Data { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : string" Usage="System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeile von Zeichen ab, die in einen umgeleiteten <see cref="T:System.Diagnostics.Process" />-Ausgabestream geschrieben wurde.</summary>
        <value>Die Zeile, die von einem zugeordneten <see cref="T:System.Diagnostics.Process" /> in seinen umgeleiteten <see cref="P:System.Diagnostics.Process.StandardOutput" />-Stream oder <see cref="P:System.Diagnostics.Process.StandardError" />-Stream geschrieben wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die <xref:System.Diagnostics.Process.StandardOutput%2A> oder <xref:System.Diagnostics.Process.StandardError%2A> Datenstrom einer <xref:System.Diagnostics.Process> an den Ereignishandler umleiten, wird jedes Mal ein Ereignis ausgelöst, wenn der Prozess eine Zeile in den umgeleiteten Datenstrom schreibt. Die <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>-Eigenschaft ist die Zeile, die der <xref:System.Diagnostics.Process> in den umgeleiteten Ausgabestream geschrieben hat. Der Ereignishandler kann die <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>-Eigenschaft verwenden, um die Prozess Ausgabe zu filtern oder die Ausgabe an einen alternativen Speicherort zu schreiben. Beispielsweise können Sie einen Ereignishandler erstellen, in dem alle Fehlerausgabe Zeilen in einer bestimmten Fehlerprotokoll Datei gespeichert werden.  
  
 Eine Zeile ist als Sequenz von Zeichen, gefolgt von einem Zeilenvorschub ("\n") oder einem Wagen Rücklauf, auf den unmittelbar ein Zeilenvorschub gefolgt ist ("\r\n") definiert. Die Zeilenzeichen werden mithilfe der standardmäßigen ANSI-Codepage des Systems codiert. Die <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>-Eigenschaft schließt den abschließenden Wagen Rücklauf oder Zeilenvorschub nicht ein.  
  
 Wenn der umgeleitete Stream geschlossen ist, wird eine NULL-Zeile an den Ereignishandler gesendet. Stellen Sie sicher, dass der Ereignishandler die <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> Eigenschaft entsprechend überprüft, bevor Sie darauf zugreifen. Beispielsweise können Sie die statische-Methode <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> verwenden, um die <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>-Eigenschaft im Ereignishandler zu validieren.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht einen einfachen Ereignishandler, der dem <xref:System.Diagnostics.Process.OutputDataReceived>-Ereignis zugeordnet ist. Der Ereignishandler empfängt Textzeilen aus dem umgeleiteten <xref:System.Diagnostics.Process.StandardOutput%2A> Stream, formatiert den Text und schreibt den Text auf den Bildschirm.  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

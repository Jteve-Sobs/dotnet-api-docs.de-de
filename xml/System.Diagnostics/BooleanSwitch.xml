<Type Name="BooleanSwitch" FullName="System.Diagnostics.BooleanSwitch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b58e7d34a5fb79c78b3d636524b0f55025244987" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48707829" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BooleanSwitch : System.Diagnostics.Switch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BooleanSwitch extends System.Diagnostics.Switch" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.BooleanSwitch" />
  <TypeSignature Language="VB.NET" Value="Public Class BooleanSwitch&#xA;Inherits Switch" />
  <TypeSignature Language="C++ CLI" Value="public ref class BooleanSwitch : System::Diagnostics::Switch" />
  <TypeSignature Language="F#" Value="type BooleanSwitch = class&#xA;    inherit Switch" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Switch</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.SwitchLevel(typeof(System.Boolean))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Bietet einen EIN/AUS-Schalter, der die Debugging- und Ablaufverfolgungsausgabe steuert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können einen booleschen Ablaufverfolgungsschalter verwenden, aktivieren oder Deaktivieren von Nachrichten basierend auf ihrer Wichtigkeit. Verwenden der <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Eigenschaft, um den aktuellen Wert des Schalters abzurufen.  
  
 Können Sie aktivieren oder Deaktivieren einer <xref:System.Diagnostics.BooleanSwitch> über die Konfigurationsdatei der Anwendung und dann mit der konfigurierten <xref:System.Diagnostics.BooleanSwitch> Wert in der Anwendung. Alternativ können Sie erstellen eine <xref:System.Diagnostics.BooleanSwitch> in den Code, und legen die <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Eigenschaft direkt auf einen bestimmten Abschnitt des Codes zu instrumentieren.  
  
 So konfigurieren Sie eine <xref:System.Diagnostics.BooleanSwitch>, bearbeiten Sie die Konfigurationsdatei, die den Namen der Anwendung entspricht. In dieser Datei können Sie hinzufügen oder entfernen einen Switch, legen Sie den Wert eines Schalters oder löschen Alles, was die Switches zuvor von der Anwendung festgelegt. Die Konfigurationsdatei sollte wie im folgenden Beispiel formatiert werden.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="1"/>  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
 Diese Beispiel-Konfigurationsabschnitt definiert einen <xref:System.Diagnostics.BooleanSwitch> mit der <xref:System.Diagnostics.Switch.DisplayName%2A> -Eigenschaft auf festgelegt `mySwitch` und die <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Wert festgelegt wird, um `true`. In Ihrer Anwendung können Sie den konfigurierten Schalterwert durch das Erstellen einer <xref:System.Diagnostics.BooleanSwitch> mit dem gleichen Namen, wie im folgenden Codebeispiel gezeigt.  
  
 [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic BooleanSwitch.BooleanSwitch Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CS/remarks.cs#2)]
 [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/VB/remarks.vb#2)]  
  
 In der Standardeinstellung die <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Eigenschaft mit der angegebene Wert in der Konfigurationsdatei festgelegt ist. Konfigurieren Sie den Schalter, mit dem Wert 0 Festlegen der <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Eigenschaft `false`; konfigurieren Sie den Schalter mit einem Wert ungleich NULL Festlegen der <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Eigenschaft `true`. Wenn die <xref:System.Diagnostics.BooleanSwitch> Konstruktor ersten Switcheinstellungen in der Konfigurationsdatei nicht finden kann die <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> von dem neuen Switch-Eigenschaftensatz auf `false` standardmäßig.  
  
 Ablaufverfolgung oder Debuggen, um einen Schalter verwenden, müssen Sie aktivieren. Die folgende Syntax ist compilerspezifisch. Wenn Sie den Compiler als C#- oder Visual Basic verwenden, finden Sie in der Dokumentation zum Compiler.  
  
-   Fügen Sie zum Debuggen in c# aktivieren die `/d:DEBUG` Flag, um die Befehlszeile des Compilers beim Kompilieren des Codes, oder Sie fügen `#define DEBUG` am Anfang der Datei. Fügen Sie in Visual Basic die `/d:DEBUG=True` Flag zur Befehlszeile Compilers.  
  
-   Fügen Sie zum Aktivieren der Ablaufverfolgung in c# die `/d:TRACE` Flag, um die Befehlszeile des Compilers beim Kompilieren des Codes hinzufügen oder `#define TRACE` am Anfang der Datei. Fügen Sie in Visual Basic die `/d:TRACE=True` Flag zur Befehlszeile Compilers.  
  
> [!NOTE]
>  Diese debug und Trace-Compilerschalter sind nicht erforderlich, bei Verwendung der <xref:System.Diagnostics.BooleanSwitch> Klasse isoliert. Sie müssen nur in Verbindung mit <xref:System.Diagnostics.Trace> oder <xref:System.Diagnostics.Debug> Methoden, die bedingt kompiliert werden.  
  
 Weitere Informationen zum Instrumentieren der Anwendung finden Sie unter <xref:System.Diagnostics.Debug> und <xref:System.Diagnostics.Trace>. Weitere Informationen zum Konfigurieren und Verwenden von Trace-Schalter finden Sie unter [Ablaufverfolgungsschalter](~/docs/framework/debug-trace-profile/trace-switches.md).  
  
> [!NOTE]
>  Sie können zur Verbesserung der Leistung machen <xref:System.Diagnostics.BooleanSwitch> Mitglieder `static` in Ihrer Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Diagnostics.BooleanSwitch> und verwendet Sie den Schalter, um zu ermitteln, ob eine Fehlermeldung ausgegeben. Sie erstellen Sie den Switch auf Klassenebene. Die `Main` Methode übergibt, um seinen Standort `MyMethod`, die eine Fehlermeldung ausgegeben und, in dem der Fehler aufgetreten ist.  
  
 [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CS/source.cs#1)]
 [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.BooleanSwitch" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BooleanSwitch (string displayName, string description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (displayName As String, description As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BooleanSwitch(System::String ^ displayName, System::String ^ description);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.BooleanSwitch : string * string -&gt; System.Diagnostics.BooleanSwitch" Usage="new System.Diagnostics.BooleanSwitch (displayName, description)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">Der Name, der auf einer Benutzeroberfläche angezeigt werden soll.</param>
        <param name="description">Die Beschreibung des Schalters.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.BooleanSwitch" />-Klasse mit dem angegebenen Anzeigenamen und der angegebenen Beschreibung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Erstellung einer <xref:System.Diagnostics.BooleanSwitch>, `displayName` Parameter wird verwendet, um die anfängliche Switcheinstellungen zu suchen. Wenn der Konstruktor nicht starteinstellungen, finden die <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> -Eigenschaftensatz auf `false` (deaktiviert).  
  
 Die Ebene der festlegen Ihrer <xref:System.Diagnostics.BooleanSwitch>, bearbeiten Sie die Konfigurationsdatei auf den Namen der Anwendung entspricht. In dieser Datei können Sie einen Switch hinzufügen, und legen Sie den Wert, einen Schalter entfernen oder deaktivieren Sie alle Switches, die zuvor von der Anwendung festgelegt. Die Konfigurationsdatei sollte wie im folgenden Beispiel formatiert werden:  
  
```xml  
<configuration>  
    <system.diagnostics>  
       <switches>  
          <add name="mySwitch" value="10" />  
          <add name="myNewSwitch" value="20" />  
          <remove name="mySwitch" />  
          <clear/>  
       </switches>  
    </system.diagnostics>  
 </configuration>  
```  
  
> [!NOTE]
>  Die erstellten Schalter muss `static`.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Diagnostics.BooleanSwitch> und verwendet Sie den Schalter, um zu ermitteln, ob eine Fehlermeldung ausgegeben. Der Switch wird auf der Klassenebene erstellt. Die `Main` Methode übergibt, um seinen Standort `MyMethod`, die eine Fehlermeldung ausgegeben und, in dem der Fehler aufgetreten ist.  
  
 [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CS/source.cs#1)]
 [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BooleanSwitch (string displayName, string description, string defaultSwitchValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string description, string defaultSwitchValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (displayName As String, description As String, defaultSwitchValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BooleanSwitch(System::String ^ displayName, System::String ^ description, System::String ^ defaultSwitchValue);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.BooleanSwitch : string * string * string -&gt; System.Diagnostics.BooleanSwitch" Usage="new System.Diagnostics.BooleanSwitch (displayName, description, defaultSwitchValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="defaultSwitchValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">Der Name, der auf der Benutzeroberfläche angezeigt werden soll.</param>
        <param name="description">Die Beschreibung des Schalters.</param>
        <param name="defaultSwitchValue">Der Standardwert des Schalters.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.BooleanSwitch" />-Klasse mit dem angegebenen Anzeigenamen, der angegebenen Beschreibung und dem angegebenen Standardschalterwert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `displayName` Parameter wird verwendet, um den Wert festlegen die <xref:System.Diagnostics.Switch.DisplayName%2A> -Eigenschaft, und die `description` Parameter wird verwendet, um den Wert festlegen die <xref:System.Diagnostics.Switch.Description%2A> Eigenschaft. Die `defaultSwitchValue` Parameter als Feld gespeichert und zum Initialisieren der <xref:System.Diagnostics.Switch.Value%2A> Eigenschaft beim ersten. Weitere Informationen zu den Konstruktor verwenden, finden Sie unter den <xref:System.Diagnostics.BooleanSwitch.%23ctor%28System.String%2CSystem.String%29> Konstruktor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.BooleanSwitch.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Diagnostics.BooleanSwitch.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Schalter aktiviert oder deaktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn der Schalter aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Feld ist standardmäßig auf festgelegt `false` (deaktiviert). Um die Schalter zu aktivieren, weisen Sie dieses Feld den Wert der `true`. Um den Schalter deaktivieren, weisen Sie den Wert `false`.  Der Wert dieser Eigenschaft wird durch den Wert der Eigenschaft der Basisklasse bestimmt <xref:System.Diagnostics.Switch.SwitchSetting%2A>.  
  
> [!NOTE]
>  Diese Methode verwendet die <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> Kennzeichen, um zu verhindern, dass vor nicht vertrauenswürdigem Code aufgerufen wird, nur der unmittelbaren Aufrufer ist erforderlich, damit <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> Berechtigung. Wenn der Code aus teilweise vertrauenswürdigem Code aufgerufen werden kann, übergeben die Benutzereingabe in nicht <xref:System.Runtime.InteropServices.Marshal> -Klassenmethoden, ohne Überprüfung.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Diagnostics.BooleanSwitch> und verwendet Sie den Schalter, um zu ermitteln, ob eine Fehlermeldung ausgegeben. Der Switch wird auf der Klassenebene erstellt. Die `Main` Methode übergibt, um seinen Standort `MyMethod`, die druckt eine Fehlermeldung und den Speicherort, in dem der Fehler aufgetreten ist.  
  
 [!code-cpp[Classic BooleanSwitch.Enabled Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.Enabled Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BooleanSwitch.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.Enabled Example/CS/source.cs#1)]
 [!code-vb[Classic BooleanSwitch.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.Enabled Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die richtige Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für den Betrieb mit nicht verwaltetem Code. Anforderungswert <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnValueChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValueChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.BooleanSwitch.OnValueChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValueChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValueChanged();" />
      <MemberSignature Language="F#" Value="override this.OnValueChanged : unit -&gt; unit" Usage="booleanSwitch.OnValueChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob der neue Wert der <see cref="P:System.Diagnostics.Switch.Value" />-Eigenschaft als boolescher Wert analysiert werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.BooleanSwitch.OnValueChanged%2A> Methode bestimmt, ob der neue Wert eine gültige Zeichenfolgendarstellung eines booleschen Werts ("false" oder "true") ist. Wenn also die-Methode legt die <xref:System.Diagnostics.Switch.SwitchSetting%2A> Eigenschaft auf 0 oder 1.  Andernfalls die Basismethode wird aufgerufen, die konvertiert des Zeichenfolgenwerts in einen ganzzahligen Wert an, die dann verwendet wird, Festlegen der <xref:System.Diagnostics.Switch.SwitchSetting%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
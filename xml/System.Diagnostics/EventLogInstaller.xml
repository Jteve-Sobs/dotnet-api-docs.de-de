<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="daaccdd7e7aa2f0d40f6ad9d127bb1d9a7b2f01a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70454956" /></Metadata><TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht Ihnen das Installieren und Konfigurieren eines Ereignisprotokolls, das die Anwendung während der Ausführung liest bzw. in das sie schreibt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird von der Datei " [installutil. exe" (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) bei der Installation eines Ereignis Protokolls verwendet. <xref:System.Diagnostics.EventLogInstaller> Die <xref:System.Diagnostics.EventLogInstaller> -Klasse kann Ereignisprotokolle nur auf dem lokalen Computer installieren.  
  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller> die-Klasse, wenn Ihre Anwendung in ein Ereignisprotokoll schreibt. es ist nicht erforderlich, einen Ereignisprotokoll-Installer zu verwenden, damit Ihre Anwendung aus einem Ereignisprotokoll liest. Anwendungen und Dienste sollten in das Anwendungsprotokoll oder in ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber sollten in das System Protokoll schreiben.  
  
> [!NOTE]
>  Das Sicherheitsprotokoll ist schreibgeschützt.  
  
 Das Installationsprogramm erstellt die Ereignis Quelle, die Sie in <xref:System.Diagnostics.EventLogInstaller.Source%2A> der-Eigenschaft angeben, und registriert Sie für das <xref:System.Diagnostics.EventLogInstaller.Log%2A> Ereignisprotokoll, das in der-Eigenschaft angegeben ist. Dieses Verhalten ähnelt dem Aufrufen <xref:System.Diagnostics.EventLog.CreateEventSource%2A> von für die <xref:System.Diagnostics.EventLog> Komponente.  
  
 Verwenden Sie <xref:System.Diagnostics.EventLog.WriteEvent%2A> die <xref:System.Diagnostics.EventLog.WriteEntry%2A> Methoden und, um Ereignisse in ein Ereignisprotokoll zu schreiben. Sie müssen eine Ereignis Quelle angeben, um Ereignisse zu schreiben. vor dem Schreiben des ersten Eintrags mit der Quelle müssen Sie die Ereignis Quelle erstellen und konfigurieren.  
  
 Erstellen Sie die neue Ereignis Quelle während der Installation der Anwendung. Dies ermöglicht es dem Betriebssystem, die Liste der registrierten Ereignis Quellen und deren Konfigurationen zu aktualisieren. Wenn das Betriebssystem die Liste der Ereignis Quellen nicht aktualisiert hat und Sie versuchen, ein Ereignis mit der neuen Quelle zu schreiben, tritt beim Schreibvorgang ein Fehler auf. Sie können eine neue Quelle mithilfe <xref:System.Diagnostics.EventLogInstaller>von oder mithilfe der <xref:System.Diagnostics.EventLog.CreateEventSource%2A> -Methode konfigurieren. Sie müssen über Administratorrechte auf dem Computer verfügen, um eine neue Ereignis Quelle zu erstellen.  
  
 Sie können eine Ereignis Quelle für ein vorhandenes Ereignisprotokoll oder ein neues Ereignisprotokoll erstellen. Wenn Sie eine neue Quelle für ein neues Ereignisprotokoll erstellen, registriert das System die Quelle für dieses Protokoll, das Protokoll wird jedoch erst erstellt, wenn der erste Eintrag darin geschrieben wird.  
  
 Erstellen Sie zum Installieren eines Ereignis Protokolls eine projektinstallerklasse, die von <xref:System.Configuration.Install.Installer>erbt, und <xref:System.ComponentModel.RunInstallerAttribute> legen Sie für die `true`-Klasse auf fest. Erstellen Sie in Ihrem Projekt einen <xref:System.Diagnostics.EventLogInstaller> für jedes Ereignisprotokoll, in das Ihre Anwendung schreiben soll, und fügen Sie die Instanz Ihrer projektinstallerklasse hinzu.  
  
 Wenn die Datei " [installutil. exe" (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) aufgerufen wird, wird <xref:System.ComponentModel.RunInstallerAttribute>die untersucht. Wenn dies der `true`Fall ist, installiert das Tool alle Elemente in <xref:System.Configuration.Install.Installer.Installers%2A> der Auflistung, die mit dem Projekt Installationsprogramm verknüpft sind. Wenn  <xref:System.ComponentModel.RunInstallerAttribute> den Wert hat, ignoriert das Tool das Projekt Installationsprogramm. `false`  
  
 Sie ändern andere Eigenschaften von <xref:System.Diagnostics.EventLogInstaller> entweder vor oder nach dem Hinzufügen der Instanz <xref:System.Configuration.Install.Installer.Installers%2A> zur-Auflistung Ihres projektinstallers, aber bevor das Installer-Tool ausgeführt wird. Sie müssen die <xref:System.Diagnostics.EventLogInstaller.Source%2A> -Eigenschaft festlegen, wenn Ihre Anwendung in das Ereignisprotokoll schreibt.  
  
 Verwenden <xref:System.Diagnostics.EventLogInstaller> Sie, um eine neue Quelle für ein neues oder vorhandenes Ereignisprotokoll zu registrieren <xref:System.Diagnostics.EventLogInstaller> . verwenden Sie nicht, um eine vorhandene Quelle zu ändern. Die <xref:System.Diagnostics.EventLogInstaller> -Klasse ändert die Konfigurations Eigenschaften einer vorhandenen Quelle nicht so, dass Sie den angegebenen Installations Eigenschaften entspricht. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> -Methode löst eine Ausnahme aus <xref:System.Diagnostics.EventLogInstaller.Source%2A> , wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. <xref:System.Diagnostics.EventLogInstaller.Source%2A> <xref:System.Diagnostics.EventLogInstaller.Log%2A> Die- <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode registriert die Quelle nicht, wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der bereits für das gleiche Ereignisprotokoll registriert ist, das in der-Eigenschaft angegeben ist.  
  
 Sie können die Ereignis Quelle mit lokalisierten Ressourcen Dateien für die Ereignis Kategorie und die Meldungs Zeichenfolgen registrieren. Die Anwendung kann Ereignisprotokoll Einträge mithilfe von Ressourcen bezeichgern schreiben, anstatt die tatsächliche Zeichenfolge anzugeben. Der Ereignisanzeige verwendet den Ressourcen Bezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Ressourcen Datei zu suchen und anzuzeigen. Sie können eine separate Datei für Ereignis Kategorien, Meldungen und Parameter Einfügungs Zeichenfolgen registrieren, oder Sie können dieselbe Ressourcen Datei für alle drei Zeichen folgen Typen registrieren. Verwenden Sie <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>die <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>Eigenschaften <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>,, <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> und, um die Quelle so zu konfigurieren, dass lokalisierte Einträge in das Ereignisprotokoll geschrieben werden. Wenn die Zeichen folgen Werte von der Anwendung direkt in das Ereignisprotokoll geschrieben werden, müssen Sie diese Eigenschaften nicht festlegen.  
  
 Die Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Wenn Ihre Anwendung Einträge mithilfe von Ressourcen bezeichgern und Zeichen folgen Werten schreibt, müssen Sie zwei separate Quellen registrieren. Konfigurieren Sie z. b. eine Quelle mit Ressourcen Dateien, und verwenden Sie dann diese <xref:System.Diagnostics.EventLog.WriteEvent%2A> Quelle in der-Methode, um Einträge mithilfe von Ressourcen bezeichlern in das Ereignisprotokoll zu schreiben. Erstellen Sie eine andere Quelle ohne Ressourcen Dateien, und verwenden Sie dann diese <xref:System.Diagnostics.EventLog.WriteEntry%2A> Quelle in der-Methode, um Zeichen folgen mithilfe dieser Quelle direkt in das Ereignisprotokoll zu schreiben.  
  
 In der Regel werden die Methoden der <xref:System.Diagnostics.EventLogInstaller> -Klasse nicht innerhalb Ihres Codes aufgerufen. Sie werden in der Regel nur von "installutil. exe" aufgerufen. Das Tool ruft während des <xref:System.Diagnostics.EventLogInstaller.Install%2A> Installationsvorgangs automatisch die-Methode auf. Es sichert ggf. Fehler, indem die <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> -Methode für das Objekt aufgerufen wird, das die Ausnahme generiert hat.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Installations Eigenschaften für eine neue Ereignis Quelle festgelegt. Im Codebeispiel werden der Quell Name und der Name des Ereignis Protokolls festgelegt und <xref:System.Diagnostics.EventLogInstaller> der <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung hinzugefügt.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
    <related type="Article" href="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (Installer-Tool)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.EventLogInstaller" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Kategorien in der Kategorieressourcendatei ab oder legt diese fest.</summary>
        <value>Die Anzahl der Kategorien in der Kategorieressourcendatei. Der Standardwert ist 0 (null).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> die <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> -Eigenschaft und die-Eigenschaft, um Ereignisse mit lokalisierten Kategorieinstanz Die Ereignisanzeige zeigt die Kategorie für einen Ereignis Eintrag an, wenn Sie beim Schreiben des Ereignisses eine Kategorie angeben. Ereignisprotokoll Kategorien sind Anwendungs definierte Zeichen folgen, die das Filtern von Ereignissen erleichtern, oder das Bereitstellen von Informationen zu einem Ereignis. Die Anwendung kann z. b. separate Kategorien für verschiedene Komponenten oder verschiedene Vorgänge definieren.  
  
 Ereignis Kategorien sind optional. Wenn die Anwendung keine Kategorien verwendet, legen Sie die-Eigenschaft <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> und <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> die-Eigenschaft nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform [http://msdn.microsoft.com](https://msdn.microsoft.com/)SDK-Dokumentation unter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Installations Eigenschaften für eine neue Ereignis Quelle festgelegt. Im Codebeispiel werden der Name der Ereignis Quelle, der Ereignisprotokoll Name und die Ressourcen Datei für den lokalisierten Ereignis Text festgelegt.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad der Ressourcendatei ab, die die Kategoriezeichenfolgen für die Quelle enthält, oder legt diesen fest.</summary>
        <value>Der Pfad der Kategorieressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> die <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> -Eigenschaft und die-Eigenschaft, um Ereignisse mit lokalisierten Kategorieinstanz Die Ereignisanzeige zeigt die Kategorie für einen Ereignis Eintrag an, wenn Sie beim Schreiben des Ereignisses eine Kategorie angeben. Ereignisprotokoll Kategorien sind Anwendungs definierte Zeichen folgen, die das Filtern von Ereignissen erleichtern, oder das Bereitstellen von Informationen zu einem Ereignis. Die Anwendung kann z. b. separate Kategorien für verschiedene Komponenten oder verschiedene Vorgänge enthalten.  
  
 Ereignis Kategorien sind optional. Wenn die Anwendung keine Kategorien verwendet, legen Sie die-Eigenschaft <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> und <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> die-Eigenschaft nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform [http://msdn.microsoft.com](https://msdn.microsoft.com/)SDK-Dokumentation unter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Installations Eigenschaften für eine neue Ereignis Quelle festgelegt. Im Codebeispiel werden der Name der Ereignis Quelle, der Ereignisprotokoll Name und die Ressourcen Datei für den lokalisierten Ereignis Text festgelegt.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Eine <see cref="T:System.ComponentModel.IComponent" />, die als Vorlage für den <see cref="T:System.Diagnostics.EventLogInstaller" /> verwendet werden soll.</param>
        <summary>Kopiert die Eigenschaftswerte einer <see cref="T:System.Diagnostics.EventLog" />-Komponente, die bei der Installation für ein Ereignisprotokoll benötigt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die vom `component` -Parameter angegebene Komponente muss ein <xref:System.Diagnostics.EventLog>sein. andernfalls wird eine Ausnahme ausgelöst.  
  
 In der Regel wird die-Methode <xref:System.Diagnostics.EventLogInstaller> von nicht innerhalb Ihres Codes aufgerufen. Sie werden in der Regel nur von [installutil. exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md)aufgerufen. <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A>wird von InstallUtil. exe verwendet, um die Eigenschaftswerte für <xref:System.Diagnostics.EventLogInstaller> den auf die Werte eines vorhandenen <xref:System.Diagnostics.EventLog>festzulegen.  
  
 Wenn die <xref:System.Diagnostics.EventLog.Log%2A> der- <xref:System.Diagnostics.EventLog.Log%2A>  Klasse, die über mittelt wird, eine leere Zeichenfolge ("") ist, müssen Sie die-Eigenschaft auf einen gültigen Wert festlegen, bevor das Installationsprogramm ausgeführt wird. <xref:System.Diagnostics.EventLog>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die angegebene Komponente ist kein <see cref="T:System.Diagnostics.EventLog" />.  
  
- oder - 
Die <see cref="P:System.Diagnostics.EventLog.Log" />-Eigenschaft oder die <see cref="P:System.Diagnostics.EventLog.Source" />-Eigenschaft der angegebenen Komponente ist entweder <see langword="null" /> oder leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Ein <see cref="T:System.Collections.IDictionary" />, in dem die zum Ausführen eines Rollback- oder Deinstallationsvorgangs erforderlichen Daten gespeichert werden.</param>
        <summary>Führt die Installation durch und schreibt Ereignisprotokollinformationen in die Registrierung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> -Methode schreibt Ereignisprotokoll Informationen in die Registrierung und verknüpft das Ereignisprotokoll mit einem Protokoll, das durch die <xref:System.Diagnostics.EventLogInstaller.Log%2A> -Eigenschaft angegeben wird. Wenn das Protokoll nicht bereits vorhanden ist (und eine Quelle angegeben ist), <xref:System.Diagnostics.EventLogInstaller.Install%2A> wird von ein Protokoll erstellt, dem die neue Quelle zugeordnet wird.  
  
 In der Regel wird die-Methode <xref:System.Diagnostics.EventLogInstaller> von nicht innerhalb Ihres Codes aufgerufen. Sie werden in der Regel nur von [installutil. exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md)aufgerufen. Das Tool ruft während des <xref:System.Diagnostics.EventLogInstaller.Install%2A> Installationsvorgangs automatisch die-Methode auf, um Registrierungsinformationen zu schreiben, die dem installierten Ereignisprotokoll zugeordnet sind. Die Installation ist transaktional. Wenn während der Installation ein Fehler bei einer Installationsprojekt Komponente aufgetreten ist, wird für alle zuvor installierten Komponenten ein Rollback zu ihren Vorinstallations Zuständen ausgeführt. Dies wird durch Aufrufen der- <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Methode jeder Komponente erreicht.  
  
 Verwenden <xref:System.Diagnostics.EventLogInstaller> Sie, um eine neue Quelle für ein neues oder vorhandenes Ereignisprotokoll zu registrieren <xref:System.Diagnostics.EventLogInstaller> . verwenden Sie nicht, um eine vorhandene Quelle zu ändern. Die <xref:System.Diagnostics.EventLogInstaller> -Klasse ändert die Konfigurations Eigenschaften einer vorhandenen Quelle nicht so, dass Sie den angegebenen Installations Eigenschaften entspricht. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> -Methode löst eine Ausnahme aus <xref:System.Diagnostics.EventLogInstaller.Source%2A> , wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> -Methode überspringt das Registrieren der Quelle <xref:System.Diagnostics.EventLogInstaller.Source%2A> , wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der bereits für dasselbe Ereignis <xref:System.Diagnostics.EventLogInstaller.Log%2A> Protokoll registriert ist, das in der-Eigenschaft angegeben ist.  
  
 Die Installationsroutine einer Anwendung verwendet die- <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> Eigenschaft des Project Installers, um automatisch Informationen zu den Komponenten zu verwalten, die bereits installiert wurden. Diese Zustandsinformationen, die <xref:System.Diagnostics.EventLogInstaller.Install%2A> `stateSaver` als Parameter an übergeben werden, werden fortlaufend aktualisiert, wenn das Tool alle <xref:System.Diagnostics.EventLogInstaller>installiert. In der Regel ist es nicht erforderlich, dass der Code diese Zustandsinformationen explizit ändert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der in der <see cref="P:System.Diagnostics.EventLogInstaller.Source" />-Eigenschaft angegebene Name wurde bereits für ein anderes Ereignisprotokoll registriert.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Das zu vergleichende Installationsprogramm.</param>
        <summary>Ermittelt, ob das Installationsprogramm und ein anderes angegebenes Installationsprogramm auf dieselbe Quelle verweisen.</summary>
        <returns><see langword="true" />, wenn dieses Installationsprogramm und das durch den <paramref name="otherInstaller" />-Parameter angegebene Installationsprogramm dieselbe Quelle installieren oder deinstallieren würden, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel wird die-Methode <xref:System.Diagnostics.EventLogInstaller> von nicht innerhalb Ihres Codes aufgerufen. Sie werden in der Regel nur vom Installationsprogramm ("installutil. exe") aufgerufen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Protokolls ab, für das die Quelle festgelegt werden soll, oder legt diesen fest.</summary>
        <value>Der Name des Protokolls. Dabei kann es sich um einen Anwendungs-, einen System- oder einen benutzerdefinierten Protokollnamen handeln. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Diagnostics.EventLogInstaller.Log%2A> -Eigenschaft verwenden, um die in der <xref:System.Diagnostics.EventLogInstaller.Source%2A> -Eigenschaft angegebene Quelle entweder einem vorhandenen Protokoll oder einem neuen Protokoll auf dem lokalen Computer zuzuordnen. Die Datei " [installutil. exe" (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) verwendet diese Informationen, um die Quelle dem Protokoll in der Registrierung des Computers zuzuordnen. Anwendungen und Dienste sollten in das Anwendungsprotokoll oder in ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber sollten in das System Protokoll schreiben.  
  
 Um Einträge in ein Ereignisprotokoll zu schreiben, müssen Sie eine Quelle erstellen und Sie mit einem Ereignisprotokoll registrieren. Eine Ereignis Quelle kann jeweils nur in ein Protokoll schreiben. Das Installationsprogramm verwendet den Wert <xref:System.Diagnostics.EventLogInstaller.Source%2A> der-Eigenschaft, um die Anwendung im Ereignisprotokoll als gültige Quelle für Einträge zu registrieren. Wenn Sie vor dem Ausführen des Installationsprogramms keinen Protokollnamen angeben, wird die Quelle vom Installationsprogramm im Anwendungsprotokoll registriert. Wenn Sie eine neue Quelle und ein vorhandenes Protokoll angeben, erstellt das Installationsprogramm eine neue Ereignis Quelle und ordnet Sie dem von Ihnen angegebenen Protokoll zu. Wenn Sie sowohl eine neue als auch ein neues Protokoll angeben, ordnet das Installationsprogramm die neue Quelle dem neuen Protokoll in der Registrierung zu. das Protokoll wird jedoch erst erstellt, wenn der erste Eintrag darin geschrieben wird.  
  
 Das Betriebssystem speichert Ereignisprotokolle als Dateien. Wenn Sie oder <xref:System.Diagnostics.EventLogInstaller> die <xref:System.Diagnostics.EventLog.CreateEventSource%2A> -Methode zum Erstellen eines neuen Ereignis Protokolls verwenden, wird die zugehörige Datei im Verzeichnis%SystemRoot%\System32\Config auf dem angegebenen Computer gespeichert. Der Dateiname wird festgelegt, indem die ersten 8 Zeichen der <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft mit der Dateinamenerweiterung ". evt" angehängt werden.  
  
 Verwenden <xref:System.Diagnostics.EventLogInstaller> Sie, um eine neue Quelle für ein neues oder vorhandenes Ereignisprotokoll zu registrieren <xref:System.Diagnostics.EventLogInstaller> . verwenden Sie nicht, um eine vorhandene Quelle zu ändern. Die <xref:System.Diagnostics.EventLogInstaller> -Klasse ändert die Konfigurations Eigenschaften einer vorhandenen Quelle nicht so, dass Sie den angegebenen Installations Eigenschaften entspricht. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> -Methode löst eine Ausnahme aus <xref:System.Diagnostics.EventLogInstaller.Source%2A> , wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. <xref:System.Diagnostics.EventLogInstaller.Source%2A> <xref:System.Diagnostics.EventLogInstaller.Log%2A> Die- <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode registriert die Quelle nicht, wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der bereits für das gleiche Ereignisprotokoll registriert ist, das in der-Eigenschaft angegeben ist.  
  
 Ausführlichere Informationen zum Verhalten von Ereignisprotokollen und Quellen finden Sie in der <xref:System.Diagnostics.EventLog> -Klassen Dokumentation für die <xref:System.Diagnostics.EventLog.Log%2A> -und- <xref:System.Diagnostics.EventLog.Source%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad der Ressourcendatei ab, die die Meldungsformatzeichenfolgen für die Quelle enthält, oder legt diesen fest.</summary>
        <value>Der Pfad der Meldungsressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> die-Eigenschaft, um eine Ereignisprotokoll Quelle zum Schreiben lokalisierter Ereignismeldungen zu konfigurieren. Ereignismeldungen sind Anwendungs definierte Zeichen folgen, die das Ereignis für den Benutzer beschreiben.  
  
 Die Anwendung kann Ereignisprotokoll Einträge mithilfe von Ressourcen bezeichgern schreiben. Ein Ressourcen Bezeichner indiziert eine Nachricht, die <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>sich in befindet. Der Ereignisanzeige verwendet den Ressourcen Bezeichner, um die entsprechende Zeichenfolge anhand der aktuellen Spracheinstellungen in der lokalisierten Ressourcen Datei zu suchen und anzuzeigen.  
  
 Die Ereignis Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Verwenden Sie <xref:System.Diagnostics.EventLog.WriteEvent%2A> die-Methode, um lokalisierte Einträge für eine mit einer Nachrichten Ressourcen Datei konfigurierte Quelle zu schreiben.  
  
 Wenn Ihre Anwendung Ereignis Meldungs Zeichenfolgen direkt schreibt, anstatt einen Ressourcen Bezeichner in einer lokalisierten Ressourcen Datei zu verwenden <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> , legen Sie die-Eigenschaft nicht fest.  
  
 Wenn es <xref:System.Diagnostics.EventLog.MachineName%2A> sich bei der Eigenschaft nicht um die ID des lokalen Computers handelt ("."), geht der .NET Framework davon aus, dass sich die Ressourcen Datei auf einem Remote Computer befindet. Wenn der <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> Eigenschafts Wert einen Laufwerk Buchstaben enthält, wird davon ausgegangen, dass sich die Ressourcen \\Datei auf dem \\<\>MachineName\\< Laufwerk\>$ Freigabe befindet \\(z. b. "\Server". \c $). Wenn der Wert die Zeichenfolge% systemroot% enthält, wird davon ausgegangen, dass sich die Ressourcen \\Datei auf der \\<\>MachineName \\\admin $-Freigabe befindet (z. b. \server\admin $).  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform [http://msdn.microsoft.com](https://msdn.microsoft.com/)SDK-Dokumentation unter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Installations Eigenschaften für eine neue Ereignis Quelle festgelegt. Im Codebeispiel werden der Name der Ereignis Quelle, der Ereignisprotokoll Name und die Ressourcen Datei für den lokalisierten Ereignis Text festgelegt.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfad der Ressourcendatei ab, die die Meldungsparameterzeichenfolgen für die Quelle enthält, oder legt diesen fest.</summary>
        <value>Der Pfad der Ressourcendatei der Meldungsparameter. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> die-Eigenschaft, um eine Ereignisprotokoll Quelle zum Schreiben lokalisierter Ereignismeldungen mit eingefügten Parameter Zeichenfolgen zu konfigurieren Jede lokalisierte Ereignis Nachricht, die <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> in der-Eigenschaft angegeben ist, kann Platzhalter für Einfügezeichen Diese Platzhalter werden verwendet, um die Position und den Ressourcen Bezeichner für eine sprachunabhängige Zeichenfolge innerhalb der Ereignismeldung anzugeben. Der-Ereignisanzeige ersetzt die Platzhalter durch die entsprechenden Zeichen <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> Folgen aus der und formatiert die Ereignisprotokoll Meldung für den lokalisierten Ereignis Eintrag.  
  
 Beispielsweise wird im folgenden Abschnitt einer Nachrichten Textdatei eine Zeichenfolge mit einem Parameter Platzhalter definiert:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 In der Ressourcen Datei des Parameters muss die Einfügezeichenfolge mit dem Ressourcen Bezeichner definiert werden, der dem Platzhalter entspricht, wie unten dargestellt:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 Die Ereignis Quelle muss entweder zum Schreiben lokalisierter Einträge oder zum Schreiben direkter Zeichen folgen konfiguriert werden. Verwenden Sie <xref:System.Diagnostics.EventLog.WriteEvent%2A> die-Methode, um lokalisierte Einträge für eine mit einer Nachrichten Ressourcen Datei konfigurierte Quelle zu schreiben.  
  
 Wenn Ihre Anwendung Ereignis Meldungs Zeichenfolgen direkt in das Ereignisprotokoll schreibt oder <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> wenn keine Nachrichten mit Platzhalter für die Einfügung von para <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> Metern enthält, legen Sie die-Eigenschaft nicht fest.  
  
 Ausführliche Informationen zum Definieren von Ereignismeldungen und zum Aufbauen von Ereignis Ressourcen Dateien finden Sie im Thema "Nachrichten Compiler" in der Platform [http://msdn.microsoft.com](https://msdn.microsoft.com/)SDK-Dokumentation unter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Installations Eigenschaften für eine neue Ereignis Quelle festgelegt. Im Codebeispiel werden der Name der Ereignis Quelle, der Ereignisprotokoll Name und die Ressourcen Datei für den lokalisierten Ereignis Text festgelegt.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Im Codebeispiel wird die folgende Meldungs Textdatei verwendet, die in die Ressourcen Bibliothek EventLogMsgs. dll integriert ist. Eine Meldungs Textdatei ist die Quelle, aus der die Nachrichten Ressourcen Datei erstellt wird. Die Meldungs Textdatei definiert die Ressourcen Bezeichner und den Text für die Kategorie, die Ereignismeldung und die Parameter Einfügezeichenfolgen. Insbesondere die für den Ressourcen Bezeichner 1004 definierte Nachricht verwendet einen Platzhalter für eine für den Ressourcen Bezeichner 5002 definierte Parameter Zeichenfolge.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein <see cref="T:System.Collections.IDictionary" />, das Informationen über den Zustand enthält, in dem sich der Computer vor der Installation befand.</param>
        <summary>Versetzt den Computer durch Rollback der Ereignisprotokollinformationen, die von der Installationsprozedur in die Registrierung geschrieben wurden, in den Zustand vor der Installation zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> -Methode macht die Auswirkungen <xref:System.Diagnostics.EventLogInstaller.Install%2A> der-Methode unerledigt. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>wird aufgerufen, wenn die Installation einer Komponente im Installationsprojekt fehlschlägt. Mit <xref:System.Diagnostics.EventLogInstaller.Install%2A> der-Methode werden die Eigenschaften für ein Ereignisprotokoll und eine Ereignis Quelle erstellt oder festgelegt. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>löscht entweder das Ereignisprotokoll und die Quelle oder setzt die Eigenschaften einer bereits vorhandenen Quelle auf die Werte vor der Installation zurück.  
  
 In der Regel wird die-Methode <xref:System.Diagnostics.EventLogInstaller> von nicht innerhalb Ihres Codes aufgerufen. Sie werden in der Regel nur von [installutil. exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md)aufgerufen. Das Tool Ruft die <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> -Methode auf, wenn diese oder eine andere Komponente nicht installiert werden konnte, um alle Änderungen rückgängig zu machen, die der Installationsvorgang bereits vorgenommen hat.  
  
 Die Installationsroutine einer Anwendung verwendet die- <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> Eigenschaft des Project Installers, um automatisch Informationen zu den Komponenten zu verwalten, die bereits installiert wurden. Diese Zustandsinformationen, die <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> `savedState` als Parameter an übergeben werden, werden fortlaufend aktualisiert, wenn <xref:System.Diagnostics.EventLogInstaller>das Tool ein Rollback ausführt. In der Regel ist es nicht erforderlich, dass der Code diese Zustandsinformationen explizit ändert.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den im Protokoll zu registrierenden Namen der Quelle ab oder legt diesen fest.</summary>
        <value>Der Name, der im Ereignisprotokoll als Quelle für Einträge registriert werden soll. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ereignis Quelle gibt an, was das Ereignis protokolliert. Häufig handelt es sich um den Namen der Anwendung oder den Namen einer Komponente innerhalb einer großen Anwendung.  
  
 Das Installationsprogramm verwendet den Wert <xref:System.Diagnostics.EventLogInstaller.Source%2A> der-Eigenschaft, um die Anwendung im Ereignisprotokoll als gültige Quelle für Einträge zu registrieren. Ein neuer Quellen Name darf nicht mit einem vorhandenen Quellnamen oder einem vorhandenen Ereignisprotokoll Namen identisch sein. Jede Quelle kann jeweils nur in ein Ereignisprotokoll schreiben. die Anwendung kann jedoch mehrere Quellen zum Schreiben in mehrere Ereignisprotokolle verwenden. Beispielsweise kann Ihre Anwendung mehrere Quellen erfordern, die für verschiedene Ereignisprotokolle oder andere Ressourcen Dateien konfiguriert sind.  
  
 Anwendungen und Dienste sollten in das Anwendungsprotokoll oder in ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber sollten in das System Protokoll schreiben. Wenn Sie vor dem Ausführen des Installationsprogramms keinen Protokollnamen angeben, wird die Quelle vom Installationsprogramm im Anwendungsprotokoll registriert. Wenn Sie den Namen eines Protokolls angeben, das nicht vorhanden ist, registriert das System die <xref:System.Diagnostics.EventLogInstaller.Source%2A> in diesem Protokoll, das Protokoll wird jedoch erst erstellt, wenn der erste Eintrag darin geschrieben wird.  
  
 Verwenden <xref:System.Diagnostics.EventLogInstaller> Sie, um eine neue Quelle für ein neues oder vorhandenes Ereignisprotokoll zu registrieren <xref:System.Diagnostics.EventLogInstaller> . verwenden Sie nicht, um eine vorhandene Quelle zu ändern. Die <xref:System.Diagnostics.EventLogInstaller> -Klasse ändert die Konfigurations Eigenschaften einer vorhandenen Quelle nicht so, dass Sie den angegebenen Installations Eigenschaften entspricht. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> -Methode löst eine Ausnahme aus <xref:System.Diagnostics.EventLogInstaller.Source%2A> , wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. <xref:System.Diagnostics.EventLogInstaller.Source%2A> <xref:System.Diagnostics.EventLogInstaller.Log%2A> Die- <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode registriert die Quelle nicht, wenn die-Eigenschaft mit einem Quellnamen übereinstimmt, der bereits für das gleiche Ereignisprotokoll registriert ist, das in der-Eigenschaft angegeben ist.  
  
 Ausführlichere Informationen zum Verhalten von Ereignisprotokollen und Quellen finden Sie in der <xref:System.Diagnostics.EventLog> -Klassen Dokumentation für die <xref:System.Diagnostics.EventLog.Log%2A> -und- <xref:System.Diagnostics.EventLog.Source%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein <see cref="T:System.Collections.IDictionary" />, das Informationen über den Zustand enthält, in dem sich der Computer vor der Installation befand.</param>
        <summary>Entfernt eine Installation durch Entfernen der Ereignisprotokollinformationen aus der Registrierung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> -Eigenschafts `Remove`Wert ist <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> , löscht die-Methode die Quelle und das zugehörige Protokoll, das <xref:System.Diagnostics.EventLogInstaller.Log%2A> vom <xref:System.Diagnostics.EventLogInstaller.Source%2A> Installationsprogramm erstellt wurde, wenn die-Eigenschaft und die-Eigenschaft die Erstellung eines neuen Ereignis Protokolls und einer neuen Quelle  
  
 In der Regel werden die-Methoden von <xref:System.Diagnostics.EventLogInstaller> nicht innerhalb Ihres Codes aufgerufen. Sie werden in der Regel nur von [installutil. exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) im Deinstallations Modus aufgerufen. Das Tool ruft automatisch die <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> -Methode auf, um die Teile des Systems, die von der Installation betroffen waren, auf Ihre Vorinstallations Zustände wiederherzustellen. Dies schließt das Löschen von Registrierungsinformationen ein, die dem Ereignisprotokoll zugeordnet sind, das deinstalliert wird.  
  
 Die Deinstallations Routine einer Anwendung verwendet die- <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> Eigenschaft des Project Installers, um automatisch Informationen zu den Komponenten zu verwalten, die bereits deinstalliert wurden. Diese Zustandsinformationen, die <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> `savedState` als Parameter an übergeben werden, werden fortlaufend aktualisiert, wenn das Tool die einzelnen <xref:System.Diagnostics.EventLogInstaller>Installationen deinstalliert. In der Regel ist es nicht erforderlich, dass der Code diese Zustandsinformationen explizit ändert.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see href="https://docs.microsoft.com/dotnet/framework/tools/installutil-exe-installer-tool">Installutil.exe (Installer-Tool)</see> das Ereignisprotokoll löschen oder zum Zeitpunkt der Deinstallation im installierten Zustand belassen soll, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Configuration.Install.UninstallAction" />-Werte, der angibt, in welchem Zustand das Ereignisprotokoll bei der Deinstallation des <see cref="T:System.Diagnostics.EventLog" /> belassen werden soll. Die Standardeinstellung ist <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein Ereignisprotokoll installieren, können Sie es optional mit einem vorhandenen Protokoll verbinden. Wenn Sie dies tun, müssen Sie entscheiden, ob das Protokoll in seinen Zustand vor der Installation zurückkehren oder im aktuellen Zustand nach der Installation verbleiben soll. Wenn Sie sich dafür entscheiden, das Ereignisprotokoll in den Zustand vor der Installation zurückzusetzen, werden Änderungen an den Ereignisprotokoll Einträgen bei der Installation nicht wieder hergestellt. Sie können nur die Eigenschaften des Ereignis Protokolls, die dem <xref:System.Diagnostics.EventLogInstaller> zugeordnet sind, zu ihren Vorinstallations Werten zurücksetzen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> enthält einen ungültigen Wert. Die einzigen gültigen Werte für diese Eigenschaft sind <see langword="Remove" /> und <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

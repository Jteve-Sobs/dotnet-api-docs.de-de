<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1091290e6287ab94abf270331c98acf4108d8af6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37663968" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Allows you to install and configure an event log that your application reads from or writes to when running.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.EventLogInstaller> dient der [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) bei der Installation ein Ereignisprotokoll. Die <xref:System.Diagnostics.EventLogInstaller> Klasse kann Ereignisprotokolle nur auf dem lokalen Computer installieren.  
  
 Verwenden Sie die <xref:System.Diagnostics.EventLogInstaller> Klasse, wenn die Anwendung in ein Ereignisprotokoll schreibt; es ist nicht erforderlich, um ein Ereignisprotokoll-Installationsprogramm für Ihre Anwendung zu verwenden, um aus einem Ereignisprotokoll lesen. Anwendungen und Dienste müssen in das Anwendungsprotokoll oder ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber müssen in das Systemprotokoll schreiben.  
  
> [!NOTE]
>  Das Sicherheitsprotokoll ist schreibgeschützt.  
  
 Das Installationsprogramm erstellt die Ereignisquelle, die Sie, in angeben der <xref:System.Diagnostics.EventLogInstaller.Source%2A> -Eigenschaft aus und registriert, die sie für das Ereignisprotokoll in angegebenen <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft. Dieses Verhalten ist vergleichbar mit einem Aufruf <xref:System.Diagnostics.EventLog.CreateEventSource%2A> auf die <xref:System.Diagnostics.EventLog> Komponente.  
  
 Verwenden der <xref:System.Diagnostics.EventLog.WriteEvent%2A> und <xref:System.Diagnostics.EventLog.WriteEntry%2A> Methoden zum Schreiben von Ereignissen in ein Ereignisprotokoll. Sie müssen eine Ereignisquelle zum Schreiben von Ereignissen angeben. Sie müssen erstellen und konfigurieren die Ereignisquelle, vor dem Schreiben des ersten Eintrags mit der Quelle.  
  
 Erstellen Sie die neue Ereignisquelle, während der Installation der Anwendung. Dadurch wird die Zeit für das Betriebssystem, um die Liste der registrierten Ereignisquellen und deren Konfigurationen zu aktualisieren. Wenn das Betriebssystem nicht die Liste der unterstützten Ereignisquellen aktualisiert wurde, und Sie versuchen, ein Ereignis mit den neuen Quellserver, Schreiben der Write-Vorgang fehl. Sie können konfigurieren, einer neuen Datenquelle mithilfe einer <xref:System.Diagnostics.EventLogInstaller>, oder die <xref:System.Diagnostics.EventLog.CreateEventSource%2A> Methode. Sie müssen über Administratorrechte verfügen, auf dem Computer, um eine neue Ereignisquelle zu erstellen.  
  
 Sie können eine Ereignisquelle für ein vorhandenes oder ein neues Ereignisprotokoll erstellen. Wenn Sie eine neue Quelle für ein neues Ereignisprotokoll erstellen, registriert das System die Quelle für das Protokoll geschrieben, aber das Protokoll wird nicht erstellt werden, bis der erste Eintrag darin geschrieben wird.  
  
 Um ein Ereignisprotokoll zu installieren, erstellen Sie eine Installer-Klasse, die von erbt <xref:System.Configuration.Install.Installer>, und legen Sie die <xref:System.ComponentModel.RunInstallerAttribute> für die Klasse `true`. Erstellen Sie in Ihrem Projekt eine <xref:System.Diagnostics.EventLogInstaller> für jedes Ereignis-Protokoll, dass Ihre Anwendung schreiben und fügen Sie die Instanz der Installer-Klasse.  
  
 Wenn die [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) ist aufgerufen wird, überprüft er die <xref:System.ComponentModel.RunInstallerAttribute>. Ist dies `true`, installiert das Tool alle Elemente in der <xref:System.Configuration.Install.Installer.Installers%2A> -Auflistung, die mit dem Projektinstallationsprogramm zugewiesen sind. Wenn <xref:System.ComponentModel.RunInstallerAttribute> ist `false`, ignoriert das Tool das Projektinstallationsprogramm.  
  
 Sie ändern, andere Eigenschaften des ein <xref:System.Diagnostics.EventLogInstaller> entweder vor oder nach dem Hinzufügen der Instanz, die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung des Projektinstallationsprogramms, aber bevor das Installationstool ausgeführt wird. Sie müssen festlegen, die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft, wenn Ihre Anwendung in das Ereignisprotokoll geschrieben werden.  
  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller> zum Registrieren einer neuen Quelle für ein neues oder vorhandenes Ereignisprotokoll; verwenden Sie keine <xref:System.Diagnostics.EventLogInstaller> zum Ändern einer vorhandenen Quelle. Die <xref:System.Diagnostics.EventLogInstaller> Klasse ändert sich nicht auf die Eigenschaften einer vorhandenen Datenquelle entsprechend die angegebenen Installationseigenschaften. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode löst eine Ausnahme aus, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode nicht die Datenquelle registriert, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der bereits für das gleiche, im angegebenen Ereignisprotokoll registriert ist die <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft.  
  
 Sie können die Ereignisquelle mit lokalisierten Ressourcendateien für die Kategorie und Meldungszeichenfolgen registrieren. Ihre Anwendung kann Einträge im Ereignisprotokoll mithilfe der Ressourcen-IDs, statt die tatsächliche Zeichenfolge zu schreiben. Die Ereignisanzeige verwendet die Ressourcen-ID zum Suchen und Anzeigen der entsprechenden Zeichenfolge aus der lokalisierten Ressourcendatei, die basierend auf aktuellen spracheinstellungen. Sie können eine separate Datei für Ereigniskategorien, Meldungen und Parameter einfügen-Zeichenfolgen registrieren, oder Sie können die gleichen Ressourcendatei für alle drei Typen von Zeichenfolgen. Verwenden der <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, und <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> Eigenschaften zum Konfigurieren von der Quelle zum Schreiben lokalisierter Einträge in das Ereignisprotokoll geschrieben. Wenn die Anwendung die Zeichenfolgenwerte direkt in das Ereignisprotokoll schreibt, müssen Sie nicht zum Festlegen dieser Eigenschaften.  
  
 Die Quelle muss zum Schreiben lokalisierter Einträge oder für das Schreiben von direkter Zeichenfolgen konfiguriert werden. Wenn Ihre Anwendung mit Ressourcen-IDs und Zeichenfolgenwerte Einträge schreibt, müssen Sie zwei verschiedene Informationsquellen registrieren. Z. B. eine Quelle mit Ressourcendateien konfigurieren und verwenden Sie dann diese Quelle in die <xref:System.Diagnostics.EventLog.WriteEvent%2A> Methode, um die Einträge mithilfe der Ressourcen-IDs in das Ereignisprotokoll zu schreiben. Erstellen Sie eine andere Quelle ohne Ressourcendateien und verwenden dann diese Quelle in die <xref:System.Diagnostics.EventLog.WriteEntry%2A> -Methode zum Schreiben von Zeichenfolgen direkt in das Ereignisprotokoll, die mithilfe dieser Quelle.  
  
 In der Regel rufen Sie nicht die Methoden der <xref:System.Diagnostics.EventLogInstaller> -Klasse aus dem Code heraus, die sie in der Regel nur von Installutil.exe aufgerufen werden. Das Tool ruft automatisch die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode während der Installation. Fehler behoben, bei Bedarf durch Aufrufen der <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> -Methode für das Objekt, das die Ausnahme generiert hat.  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Eigenschaften für eine neue Ereignisquelle fest. Im Codebeispiel wird der Source-Name und Name des Ereignisprotokolls festgelegt, und fügt die <xref:System.Diagnostics.EventLogInstaller> auf die <xref:System.Configuration.Install.Installer.Installers%2A> Auflistung.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogInstaller" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of categories in the category resource file.</summary>
        <value>Die Anzahl der Kategorien in der Kategorieressourcendatei. Der Standardwert ist 0 (null).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> und <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> Eigenschaften zum Schreiben von Ereignissen mit lokalisierte Kategoriezeichenfolgen. Die Ereignisanzeige zeigt die Kategorie für einen Ereigniseintrag, wenn Sie eine Kategorie angeben, wenn Sie das Ereignis schreiben. Ereignisprotokoll-Kategorien sind anwendungsdefinierte Zeichenfolgen, die Hilfe Ereignisse gefiltert werden soll, oder geben Sie Informationen für ein Ereignis. Beispielsweise kann die Anwendung separate Kategorien für die unterschiedlichen Komponenten oder verschiedene Vorgänge definieren.  
  
 Ereigniskategorien sind optional. Wenn Ihre Anwendung keine Kategorien verwendet werden, legen Sie keine der <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> und <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> Eigenschaften.  
  
 Weitere Informationen zum Definieren von ereignismeldungen, und Erstellen von Ressourcendateien, zum Ereignis finden Sie unter im Thema "Meldungs-Compiler" in der Platform SDK-Dokumentation unter [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Eigenschaften für eine neue Ereignisquelle fest. Im Codebeispiel wird der Name der Ereignisquelle Ereignisprotokollnamen für Ereignis und Ressourcendatei für lokalisierte Ereignistext.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Das Codebeispiel verwendet die folgende Meldung-Textdatei, die Ressourcenbibliothek EventLogMsgs.dll integriert. Eine Nachricht Text-Datei ist die Quelle, aus der Meldungsressourcendatei erstellt wird. Die Nachricht-Text-Datei definiert die Ressourcen-IDs und der Text für die Kategorie, ereignismeldung und Parameter einfügen-Zeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the resource file that contains category strings for the source.</summary>
        <value>Der Pfad des der Kategorieressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> und <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> Eigenschaften zum Schreiben von Ereignissen mit lokalisierte Kategoriezeichenfolgen. Die Ereignisanzeige zeigt die Kategorie für einen Ereigniseintrag aus, wenn Sie eine Kategorie angeben, wenn Sie das Ereignis schreiben. Ereignisprotokoll-Kategorien sind anwendungsdefinierte Zeichenfolgen, die Hilfe Ereignisse gefiltert werden soll, oder geben Sie Informationen zu einem Ereignis. Die Anwendung kann z. B. separate Kategorien für die unterschiedlichen Komponenten oder andere Vorgänge verfügen.  
  
 Ereigniskategorien sind optional. Wenn Ihre Anwendung keine Kategorien verwendet werden, legen Sie keine der <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> und <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> Eigenschaften.  
  
 Weitere Informationen zum Definieren von ereignismeldungen, und Erstellen von Ressourcendateien, zum Ereignis finden Sie unter im Thema "Meldungs-Compiler" in der Platform SDK-Dokumentation unter [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Eigenschaften für eine neue Ereignisquelle fest. Im Codebeispiel wird der Name der Ereignisquelle Ereignisprotokollnamen für Ereignis und Ressourcendatei für lokalisierte Ereignistext.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Das Codebeispiel verwendet die folgende Meldung-Textdatei, die Ressourcenbibliothek EventLogMsgs.dll integriert. Eine Nachricht Text-Datei ist die Quelle, aus der Meldungsressourcendatei erstellt wird. Die Nachricht-Text-Datei definiert die Ressourcen-IDs und der Text für die Kategorie, ereignismeldung und Parameter einfügen-Zeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">An <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Diagnostics.EventLogInstaller" />.</param>
        <summary>Copies the property values of an <see cref="T:System.Diagnostics.EventLog" /> component that are required at installation time for an event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Komponente, die gemäß der `component` Parameter muss ein <xref:System.Diagnostics.EventLog>ist, andernfalls wird eine Ausnahme ausgelöst.  
  
 In der Regel rufen Sie nicht die Methoden der <xref:System.Diagnostics.EventLogInstaller> aus im Code auf; sie werden in der Regel aufgerufen nur durch die [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> wird verwendet, von Installutil.exe, legen Sie die Eigenschaftswerte für die <xref:System.Diagnostics.EventLogInstaller> auf die Werte eines vorhandenen <xref:System.Diagnostics.EventLog>.  
  
 Wenn die <xref:System.Diagnostics.EventLog.Log%2A> von der <xref:System.Diagnostics.EventLog> , übergeben, ist eine leere Zeichenfolge (""), müssen Sie festlegen, die <xref:System.Diagnostics.EventLog.Log%2A> Eigenschaft auf einen gültigen Wert vor der Ausführung des Installationsprogramms.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified component is not an <see cref="T:System.Diagnostics.EventLog" />.  -or-  The <see cref="P:System.Diagnostics.EventLog.Log" /> or <see cref="P:System.Diagnostics.EventLog.Source" /> property of the specified component is either <see langword="null" /> or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a rollback or uninstall operation.</param>
        <summary>Performs the installation and writes event log information to the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode schreibt Ereignisprotokollinformationen in die Registrierung, und ein Protokoll, das angegeben wird im Ereignisprotokoll ordnet die <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft. Wenn das Protokoll noch nicht vorhanden (und eine Quelle angegeben), <xref:System.Diagnostics.EventLogInstaller.Install%2A> erstellt ein Protokoll und die neue Quelle mit dieser verknüpft.  
  
 In der Regel rufen Sie nicht die Methoden der <xref:System.Diagnostics.EventLogInstaller> aus im Code auf; sie werden in der Regel aufgerufen nur durch die [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md). Das Tool ruft automatisch die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode während des Installationsvorgangs Informationen in der Registrierung zu schreiben, die das Ereignisprotokoll, die Installation zugeordnet ist. Die Installation ist transaktional, daher liegt ein Fehler von einer beliebigen Komponente während der Installation, alle zuvor installierten Komponenten, die vor der Installation zurückgesetzt werden. Dies erfolgt durch Aufrufen von jeder Komponente <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Methode.  
  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller> zum Registrieren einer neuen Quelle für ein neues oder vorhandenes Ereignisprotokoll; verwenden Sie keine <xref:System.Diagnostics.EventLogInstaller> zum Ändern einer vorhandenen Quelle. Die <xref:System.Diagnostics.EventLogInstaller> Klasse ändert sich nicht auf die Eigenschaften einer vorhandenen Datenquelle entsprechend die angegebenen Installationseigenschaften. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode löst eine Ausnahme aus, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode überspringt, registrieren die Quelle aus, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der bereits für das gleiche, im angegebenen Ereignisprotokoll registriert ist die <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft.  
  
 Eine Anwendung die Installationsroutine verwendet des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> Eigenschaft für die automatische Verwaltung von Informationen zu den Komponenten, die bereits installiert wurden. Diese Statusinformationen, die an <xref:System.Diagnostics.EventLogInstaller.Install%2A> als die `stateSaver` -Parameter wird fortlaufend aktualisiert werden, da das Tool jeweils installiert <xref:System.Diagnostics.EventLogInstaller>. In der Regel ist es nicht erforderlich, damit der Code explizit diese Zustandsinformationen zu ändern.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The platform the installer is trying to use is not Windows NT 4.0 or later.</exception>
        <exception cref="T:System.ArgumentException">The name specified in the <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> property is already registered for a different event log.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">The installer to compare.</param>
        <summary>Determines whether an installer and another specified installer refer to the same source.</summary>
        <returns>
          <see langword="true" /> if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter would install or uninstall the same source; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel rufen Sie nicht die Methoden der <xref:System.Diagnostics.EventLogInstaller> aus im Code auf; sie werden in der Regel aufgerufen nur durch das Installationstool (Installutil.exe).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the log to set the source to.</summary>
        <value>Der Name des Protokolls. Dies kann die Anwendung, System oder ein benutzerdefinierter Protokollname sein. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie die <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft die Quelle zuordnen, Sie in geben, der <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft mit einem vorhandenen Protokoll oder ein neues Protokoll auf dem lokalen Computer. Die [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) verwendet diese Informationen, um das Protokoll in der Registrierung des Computers die Quelle zuzuordnen. Anwendungen und Dienste müssen in das Anwendungsprotokoll oder ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber müssen in das Systemprotokoll schreiben.  
  
 Um Einträge in ein Ereignisprotokoll zu schreiben, müssen Sie eine Datenquelle erstellen und registrieren Sie ihn mit einem Ereignisprotokoll. Eine Ereignisquelle kann zu einem Zeitpunkt nur ein Protokoll schreiben. Das Installationsprogramm verwendet den Wert der <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft, um Ihre Anwendung mit dem Ereignisprotokoll als gültige Quelle für Einträge zu registrieren. Wenn Sie einen Protokollnamen vor dem Ausführen der Installer nicht angeben, registriert das Installationsprogramm Ihrer Quelle in das Anwendungsprotokoll. Wenn Sie eine neue Quelle und ein vorhandenes Protokoll angeben, wird das Installationsprogramm erstellt eine neue Ereignisquelle und verknüpft es mit dem Protokoll, das Sie angeben. Wenn Sie sowohl eine neue Quelle und ein neues Protokoll angeben, das Installationsprogramm wird die neue Quelle für das neue Protokoll in der Registrierung, aber das Protokoll wird nicht erstellt werden, bis der erste Eintrag darin geschrieben wird.  
  
 Das Betriebssystem speichert Ereignisprotokolle als Dateien. Bei Verwendung von <xref:System.Diagnostics.EventLogInstaller> oder <xref:System.Diagnostics.EventLog.CreateEventSource%2A> Methode erstellen Sie ein neues Ereignisprotokoll, die zugehörige Datei befindet sich im Verzeichnis %SystemRoot%\System32\Config auf dem angegebenen Computer. Der Dateiname wird festgelegt, durch die ersten 8 Zeichen Anhängen der <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft mit der Erweiterung "EVT".  
  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller> zum Registrieren einer neuen Quelle für ein neues oder vorhandenes Ereignisprotokoll; verwenden Sie keine <xref:System.Diagnostics.EventLogInstaller> zum Ändern einer vorhandenen Quelle. Die <xref:System.Diagnostics.EventLogInstaller> Klasse ändert sich nicht auf die Eigenschaften einer vorhandenen Datenquelle entsprechend die angegebenen Installationseigenschaften. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode löst eine Ausnahme aus, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode nicht die Datenquelle registriert, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der bereits für das gleiche, im angegebenen Ereignisprotokoll registriert ist die <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft.  
  
 Ausführlichere Informationen über das Verhalten von Ereignisprotokollen und Datenquellen finden Sie unter den <xref:System.Diagnostics.EventLog> Dokumentation für die Klasse der <xref:System.Diagnostics.EventLog.Log%2A> und <xref:System.Diagnostics.EventLog.Source%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the resource file that contains message formatting strings for the source.</summary>
        <value>Der Pfad der Meldungsressourcendatei. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> Eigenschaft so konfigurieren Sie eine Ereignisprotokollquelle zum Schreiben lokalisierter ereignismeldungen. Ereignismeldungen sind anwendungsdefinierte Zeichenfolgen, die das Ereignis an den Benutzer zu beschreiben.  
  
 Die Anwendung kann mithilfe von Ressourcenbezeichnern Einträge im Ereignisprotokoll schreiben. Ein Ressourcenbezeichner indiziert eine Nachricht befindet sich in der <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. Die Ereignisanzeige verwendet die Ressourcen-ID zum Suchen und Anzeigen der entsprechenden Zeichenfolge aus der lokalisierten Ressourcendatei, die basierend auf aktuellen spracheinstellungen.  
  
 Die Ereignisquelle muss konfiguriert werden, oder zum Schreiben lokalisierter Einträge als auch für das Schreiben von direkter Zeichenfolgen. Verwenden der <xref:System.Diagnostics.EventLog.WriteEvent%2A> Methode zum Schreiben lokalisierter Einträge für eine Datenquelle mit einer Meldungsressourcendatei konfiguriert.  
  
 Wenn die Anwendung Meldungs-Ereignis direkt, schreibt anstatt eine Ressourcen-ID in einer lokalisierten Ressourcendatei, stellen Sie keine der <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> Eigenschaft.  
  
 Wenn die <xref:System.Diagnostics.EventLog.MachineName%2A> Eigenschaft ist nicht als Bezeichner für den lokalen Computer ("."), .NET Framework wird davon ausgegangen, dass die Ressourcendatei auf einem Remotecomputer ist. Wenn die <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> Eigenschaftswert einen Laufwerkbuchstaben enthält, wird davon ausgegangen, dass die Ressourcendatei auf den \\ \\< Machinename\>\\< Laufwerk\>$-Freigabe (z. B. \\\server \c$). Wenn der Wert der Zeichenfolge % systemroot% enthält, die Ressourcendatei wird als auf die \\ \\< Machinename\>\admin$ befindet (z. B. \\\server\admin$).  
  
 Weitere Informationen zum Definieren von ereignismeldungen, und Erstellen von Ressourcendateien, zum Ereignis finden Sie unter im Thema "Meldungs-Compiler" in der Platform SDK-Dokumentation unter [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Eigenschaften für eine neue Ereignisquelle fest. Im Codebeispiel wird der Name der Ereignisquelle Ereignisprotokollnamen für Ereignis und Ressourcendatei für lokalisierte Ereignistext.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Das Codebeispiel verwendet die folgende Meldung-Textdatei, die Ressourcenbibliothek EventLogMsgs.dll integriert. Eine Nachricht Text-Datei ist die Quelle, aus der Meldungsressourcendatei erstellt wird. Die Nachricht-Text-Datei definiert die Ressourcen-IDs und der Text für die Kategorie, ereignismeldung und Parameter einfügen-Zeichenfolgen.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the resource file that contains message parameter strings for the source.</summary>
        <value>Der Pfad der Meldungsressourcendatei der Parameter. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> Eigenschaft so konfigurieren Sie eine Ereignisprotokollquelle zum Schreiben lokalisierter ereignismeldungen mit eingefügten Parameterzeichenfolgen. Jede lokalisierte ereignismeldung angegeben, der <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> -Eigenschaft kann ein Platzhalter für die einfügen-Zeichenfolgen enthalten. Diese Platzhalter werden verwendet, um die Position und die Ressourcen-ID für eine sprachunabhängige-Zeichenfolge in der ereignismeldung anzugeben. Die Ereignisanzeige ersetzt die Platzhalter durch die entsprechenden Zeichenfolgen aus der <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> und formatiert die Meldung im Ereignisprotokoll für den lokalisierten Ereigniseintrag.  
  
 Im folgende Abschnitt eine Nachricht Text-Datei definiert z. B. eine Zeichenfolge mit einem Parameterplatzhalter für:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 In der Ressourcendatei der Parameter muss die Einfügezeichenfolge mit der Ressourcen-ID, die den Platzhalter, entspricht, definiert werden, wie unten dargestellt:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 Die Ereignisquelle muss konfiguriert werden, oder zum Schreiben lokalisierter Einträge als auch für das Schreiben von direkter Zeichenfolgen. Verwenden der <xref:System.Diagnostics.EventLog.WriteEvent%2A> Methode zum Schreiben lokalisierter Einträge für eine Datenquelle mit einer Meldungsressourcendatei konfiguriert.  
  
 Wenn die Anwendung die Nachricht Ereigniszeichenfolgen direkt in das Ereignisprotokoll schreibt, oder wenn Ihre <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> enthält keine Nachrichten mit Platzhaltern für Parameter einfügen, stellen Sie keine der <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> Eigenschaft.  
  
 Weitere Informationen zum Definieren von ereignismeldungen, und Erstellen von Ressourcendateien, zum Ereignis finden Sie unter im Thema "Meldungs-Compiler" in der Platform SDK-Dokumentation unter [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Das folgende Codebeispiel legt die Eigenschaften für eine neue Ereignisquelle fest. Im Codebeispiel wird der Name der Ereignisquelle Ereignisprotokollnamen für Ereignis und Ressourcendatei für lokalisierte Ereignistext.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 Das Codebeispiel verwendet die folgende Meldung-Textdatei, die Ressourcenbibliothek EventLogMsgs.dll integriert. Eine Nachricht Text-Datei ist die Quelle, aus der Meldungsressourcendatei erstellt wird. Die Nachricht-Text-Datei definiert die Ressourcen-IDs und der Text für die Kategorie, ereignismeldung und Parameter einfügen-Zeichenfolgen. Die Nachricht, die für Ressourcen-ID 1004 definierten verwendet einen Platzhalter für ein Zeichenfolgenparameter, der für den Ressourcenbezeichner 5002 definiert.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</param>
        <summary>Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Methode macht die Auswirkungen der <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> wird aufgerufen, wenn die Installation der Komponenten in das Projekt für die Installation fehlschlägt. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode erstellt, oder legt die Eigenschaften für ein Ereignisprotokoll und die Ereignisquelle. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Löscht das Ereignisprotokoll und die Quelle oder die Eigenschaften einer vorhandenen Quelle auf die Werte vor der Installation zurückgesetzt.  
  
 In der Regel rufen Sie nicht die Methoden der <xref:System.Diagnostics.EventLogInstaller> aus im Code auf; sie werden in der Regel aufgerufen nur durch die [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md). Das Tool Ruft die <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Methode, wenn dieser oder einer anderen Komponente fehlgeschlagen ist, installieren, um alle Änderungen rückgängig zu machen, die bereits während des Installationsvorgangs vorgenommen hat.  
  
 Eine Anwendung die Installationsroutine verwendet des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> Eigenschaft für die automatische Verwaltung von Informationen zu den Komponenten, die bereits installiert wurden. Diese Statusinformationen, die an <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> als die `savedState` -Parameter wird fortlaufend aktualisiert werden, da das Tool führt ein einzelnen <xref:System.Diagnostics.EventLogInstaller>. In der Regel ist es nicht erforderlich, damit der Code explizit diese Zustandsinformationen zu ändern.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source name to register with the log.</summary>
        <value>Der Name, der im Ereignisprotokoll als Quelle für Einträge zu registrieren. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ereignisquelle gibt an, wodurch das Ereignis protokolliert. Es ist häufig der Name der Anwendung oder den Namen einer Komponente innerhalb einer großen Anwendung.  
  
 Das Installationsprogramm verwendet den Wert der <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft, um Ihre Anwendung mit dem Ereignisprotokoll als gültige Quelle für Einträge zu registrieren. Ein neuen Quellennamen kann nicht den Datenquellennamen einer vorhandenen oder einem vorhandenen Ereignisprotokollnamen überein. Jede Quelle kann zu einem Zeitpunkt nur ein Ereignisprotokoll schreiben. Allerdings kann die Anwendung auf mehreren Quellen verwenden, zum Schreiben in verschiedenen Ereignisprotokollen. Z. B. möglicherweise die Anwendung mehrere Quellen für unterschiedliche Ereignisprotokolle oder andere Ressourcendateien konfiguriert.  
  
 Anwendungen und Dienste müssen in das Anwendungsprotokoll oder ein benutzerdefiniertes Protokoll schreiben. Gerätetreiber müssen in das Systemprotokoll schreiben. Wenn Sie einen Protokollnamen vor dem Ausführen der Installer nicht angeben, registriert das Installationsprogramm Ihrer Quelle in das Anwendungsprotokoll. Wenn Sie den Namen eines Protokolls, die nicht vorhanden ist angeben, registriert das System die <xref:System.Diagnostics.EventLogInstaller.Source%2A> in das Protokoll geschrieben, aber das Protokoll wird nicht erstellt werden, bis der erste Eintrag darin geschrieben wird.  
  
 Verwenden Sie <xref:System.Diagnostics.EventLogInstaller> zum Registrieren einer neuen Quelle für ein neues oder vorhandenes Ereignisprotokoll; verwenden Sie keine <xref:System.Diagnostics.EventLogInstaller> zum Ändern einer vorhandenen Quelle. Die <xref:System.Diagnostics.EventLogInstaller> Klasse ändert sich nicht auf die Eigenschaften einer vorhandenen Datenquelle entsprechend die angegebenen Installationseigenschaften. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode löst eine Ausnahme aus, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der für ein anderes Ereignisprotokoll auf dem Computer registriert ist. Die <xref:System.Diagnostics.EventLogInstaller.Install%2A> Methode nicht die Datenquelle registriert, wenn die <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaft einen Quellnamen entspricht, der bereits für das gleiche, im angegebenen Ereignisprotokoll registriert ist die <xref:System.Diagnostics.EventLogInstaller.Log%2A> Eigenschaft.  
  
 Ausführlichere Informationen über das Verhalten von Ereignisprotokollen und Datenquellen finden Sie unter den <xref:System.Diagnostics.EventLog> Dokumentation für die Klasse der <xref:System.Diagnostics.EventLog.Log%2A> und <xref:System.Diagnostics.EventLog.Source%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</param>
        <summary>Removes an installation by removing event log information from the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> Eigenschaftswert ist `Remove`, <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> -Methode löscht die Quelle und das zugeordnete Protokoll aus, die das Installationsprogramm erstellt, wenn die <xref:System.Diagnostics.EventLogInstaller.Log%2A> und <xref:System.Diagnostics.EventLogInstaller.Source%2A> Eigenschaften angegeben, die Erstellung ein neues Ereignisprotokoll und die Quelle.  
  
 In der Regel rufen Sie nicht die Methoden der <xref:System.Diagnostics.EventLogInstaller> aus im Code auf; sie werden in der Regel aufgerufen nur durch die [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md) im Deinstallationsmodus. Das Tool ruft automatisch die <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> Methode, um die Teile des Systems wiederherzustellen, die von der Installation vor der Installation betroffen sind. Dies umfasst das Löschen der Registrierungsinformationen, die das Ereignisprotokoll, die Deinstallation zugeordnet ist.  
  
 Deinstallieren Sie eine Anwendung die routinemäßige verwendet des Projektinstallationsprogramms <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> Eigenschaft für die automatische Verwaltung von Informationen zu den Komponenten, die bereits deinstalliert wurden. Diese Statusinformationen, die an <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> als die `savedState` -Parameter wird fortlaufend aktualisiert werden, da das Tool mit jeder deinstalliert <xref:System.Diagnostics.EventLogInstaller>. In der Regel ist es nicht erforderlich, damit der Code explizit diese Zustandsinformationen zu ändern.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) should remove the event log or leave it in its installed state at uninstall time.</summary>
        <value>Eines der <see cref="T:System.Configuration.Install.UninstallAction" /> Werte, der angibt, welchem Zustand das Ereignisprotokoll bei lassen die <see cref="T:System.Diagnostics.EventLog" /> deinstalliert wird. Die Standardeinstellung ist <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein Ereignisprotokoll installieren, können Sie optional in einem vorhandenen Protokoll verbinden. Wenn Sie dies tun, müssen Sie entscheiden, ob das Protokoll zurückgegeben, die in den Zustand vor der Installation oder in seinem aktuellen Zustand nach der Installation bleiben soll. Wenn Sie festlegen, das Ereignisprotokoll in den Zustand vor der Installation zurückgeben ob, werden Änderungen an der Einträge im Ereignisprotokoll während der Installation nicht wiederhergestellt werden. Sie können nur die Eigenschaften des Ereignisprotokolls, die zugeordnet werden Zurücksetzen der <xref:System.Diagnostics.EventLogInstaller> auf die Werte vor der Installation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contains an invalid value. The only valid values for this property are <see langword="Remove" /> and <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
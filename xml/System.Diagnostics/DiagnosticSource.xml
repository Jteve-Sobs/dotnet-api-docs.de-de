<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca0175415a9b3efa6744d302dadd2224067d1ce1" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75137846" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Eine abstrakte Klasse, die das Instrumentieren von Code für die Protokollierung umfangreicher Datennutzlasten zur Produktionszeit für die Nutzung innerhalb des instrumentierten Prozesses ermöglicht.</summary>
    <remarks>Weitere Informationen finden Sie [im Benutzerhandbuch für diagnosticsource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine Instanz der <see cref="T:System.Diagnostics.DiagnosticSource" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des geschriebenen Ereignisses.</param>
        <summary>Überprüft, ob das Benachrichtigungsereignis aktiviert ist.</summary>
        <returns><see langword="true" /> wenn das Benachrichtigungsereignis aktiviert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

Wenn das Setup für die Benachrichtigung aufwendig ist, können Sie "isaktivierte" vor dem Ausführen dieses Setups anrufen. Consumer sollten nicht davon ausgehen, dass Sie nur Benachrichtigungen erhalten, für die isaktivierte "true" ist. Allerdings ist es für Producer optional, diese API aufzurufen. Der Name muss mit dem übereinstimmen, der an <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />übermittelt wurde.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des geschriebenen Ereignisses.</param>
        <param name="arg1">Ein Objekt, das den zusätzlichen Kontext für „IsEnabled“ darstellt. Consumer sollten den Empfang von <see langword="null" /> erwarten, was darauf hinweisen kann, dass der Hersteller eine reine IsEnabled(string)-Zeichenfolge aufgerufen hat, um zu prüfen, ob der Consumer für derartige Ereignisse überhaupt Benachrichtigungen empfangen möchte. Auf dieser Grundlage ruft der Hersteller möglicherweise erneut IsEnabled(string, object, object) mit einem Kontext ungleich <see langword="null" /> auf.</param>
        <param name="arg2">Optional. Ein Objekt, das den zusätzlichen Kontext für „IsEnabled“ darstellt. <see langword="null" /> standardmäßig. Consumer sollten den Empfang von <see langword="null" /> erwarten, was darauf hinweisen kann, dass der Hersteller eine reine IsEnabled(string)-Zeichenfolge aufgerufen hat oder der Hersteller den gesamten erforderlichen Kontext in <paramref name="arg1" /> übergeben hat.</param>
        <summary>Überprüft, ob das Benachrichtigungsereignis aktiviert ist.</summary>
        <returns><see langword="true" /> wenn das Benachrichtigungsereignis aktiviert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
Wenn das Setup für die Benachrichtigung aufwendig ist, können Sie diese Methode anrufen und Kontext bereitstellen, bevor Sie das Setup durchführen.
          
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Die Aktivität, die von einem externen Ereignis betroffen ist.</param>
        <param name="payload">Ein Objekt, das die ausgehende Anforderung darstellt.</param>
        <summary>Überträgt den Status von einer Aktivität auf außerhalb des Prozesses stattfindende Ereignisse oder Vorgänge, wie z.B. eine ausgehende HTTP-Anfrage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Wenn sich eine Instrumentierungs Site an einem Ort befindet, an dem Aktivitäten den Prozess verlassen (z. b. ausgehende HTTP-Anforderungen), möchte dieser Standort den Status von der-Aktivität an die ausgehende Anforderung übertragen.

Soweit dies möglich ist, sollte dies von der Instrumentations Site erfolgen, weil ein Vertrag zwischen einem <xref:System.Diagnostics.Activity> und der Anforderung zum Übermitteln von Anforderungen an der Instrumentations Site vorliegt.   Die Instrumentations Site kann die Richtlinie jedoch nicht verarbeiten (z. b. ob Aktivitäts Informationen aus Kompatibilitätsgründen in einem älteren Format deaktiviert oder geschrieben werden sollen).
Hierfür muss die Instrumentierungs Site einen Rückruf an das Protokollierungs System durchsuchen und diese zum Auflösen von Richtlinien auffordern. Dies ist der Zweck der `OnActivityExport` Methode.

Die `OnActivityExport`-Methode erhält die <xref:System.Diagnostics.Activity> und ein Nutz Last Objekt, das die ausgehende Anforderung darstellt. Ein <xref:System.Diagnostics.DiagnosticSource> Abonnent hat dann die Möglichkeit, die ausgehende Anforderung zu aktualisieren, bevor Sie gesendet wird.
 
Beachten Sie, dass diese Methode selten an Instrumentations Standorten verwendet wird (nur die Standorte, die sich an einer ausgehenden Prozess Grenze befinden).   Darüber hinaus ist die Standard Richtlinie, die von der Instrumentations Site durchführt (z. b. zum Übertragen des gesamten Aktivitäts Zustands in einer bestimmten ausgehenden Konvention), in der Regel in Ordnung. Bei dieser Methode handelt es sich nur um Fälle, in denen ein Problem vorliegt. Diese Methode sollte daher nur sehr selten verwendet werden und ist in erster Linie für die Symetrie mit `OnActivityImport` und der zukünftigen Absicherung.

Beachten Sie, dass `payload` hier als <xref:System.Object> typisiert ist, aber eine bestimmte Instrumentierungs Site und ein Abonnent den Typ der Nutzlast kennen und diese ggf. umwandeln und decodieren.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Die Aktivität, die von einem externen Ereignis betroffen ist.</param>
        <param name="payload">Eine Nutzlast, die die eingehende Anforderung darstellt.</param>
        <summary>Überträgt den Status von außerhalb des Prozesses stattfindenden Ereignissen oder Vorgängen, wie z.B. einer eingehenden Anfrage, auf eine Aktivität.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Wenn eine Instrumentierungs Site eine neue Aktivität als Reaktion auf ein Ereignis außerhalb des Prozesses erstellt, z. b. eine HTTP-Eingabe Anforderung), ermöglicht die-Methode der-`OnActivityImport`, dass diese Website eine neue Aktivität erstellen und den Status von der eingehenden Anforderung an die-Aktivität übertragen soll. 

Soweit dies möglich ist, sollte dies von der Instrumentations Site erfolgen, da es einen Vertrag zwischen dem <xref:System.Diagnostics.Activity> und der Anforderung zum Einfügen von Daten an der Instrumentations Site gibt.   Die Instrumentations Site kann die Richtlinie jedoch nicht verarbeiten. (Wenn z. b. die Stichprobenentnahme durchgeführt wird, genau welche Anforderungen sollten angenommen werden?) In diesen Fällen muss die Instrumentations Site einen Rückruf an das Protokollierungs System durchsetzen und ihn auffordern, Richtlinien aufzulösen (z. b. um zu entscheiden, ob das "Sampling"-Bit der Aktivität festgelegt werden soll). Dies ist der Zweck der `OnActivityImport` Methode. Ihm wird die-Aktivität sowie ein Nutz Last Objekt zugewiesen, das die incomminganforderung darstellt. Die Abonnenten der <xref:System.Diagnostics.DiagnosticSource> haben dann die Möglichkeit, diese Aktivität wie gewünscht zu aktualisieren. 

Diese Methode wird nur selten an Instrumentations Standorten verwendet (nur die Standorte, die sich auf der Prozess Grenze befinden), und die Instrumentierungs Site implementiert eine Standard Richtlinie (die Aktivität wird auf *irgendeine* Weise festgelegt). Daher ist es nicht erforderlich, diese Methode außer Kraft zu setzen, wenn diese Standard Richtlinie in Ordnung ist. Anders ausgedrückt: Diese Methode sollte in sehr seltenen Fällen (aber häufig wichtig) überschrieben werden.

Beachten Sie, dass `payload` hier als <xref:System.Object> typisiert ist, aber eine bestimmte Instrumentierungs Site und ein Abonnent den Typ der Nutzlast kennen und daher bei Bedarf umwandeln und decodieren.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Die <see cref="T:System.Diagnostics.Activity" />, die gestartet werden soll.</param>
        <param name="args">Ein Objekt, das den Wert darstellt, der als Nutzlast für das Ereignis übergeben wird.</param>
        <summary>Startet eine <see cref="T:System.Diagnostics.Activity" /> und schreibt ein Startereignis.</summary>
        <returns>Die gestartete Aktivität zur komfortablen Verkettung.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
           
In der <xref:System.Diagnostics.Activity> werden die logische Operation, der Kontext und die übergeordnete Beziehung beschrieben. der aktuelle <xref:System.Diagnostics.Activity> fließt durch die Vorgangs Verarbeitung.

Diese Methode startet die angegebene <xref:System.Diagnostics.Activity>, verwaltet eine globale <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> und <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType> Aktivität für die angegebene <xref:System.Diagnostics.Activity>und benachrichtigt Consumer, dass ein neuer <xref:System.Diagnostics.Activity> gestartet wurde. Consumer können auf <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> zugreifen, um Kontext und/oder eine Erweiterung der Telemetrie hinzuzufügen.

Producer können zusätzliche Details an den Consumer in der Nutzlast übergeben.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="activity">Die zu beendende Aktivität.</param>
        <param name="args">Ein Objekt, das den Wert darstellt, der als Nutzlast für das Ereignis übergeben wird.</param>
        <summary>Beendet die angegebene <see cref="T:System.Diagnostics.Activity" />, behält die globale <see cref="P:System.Diagnostics.Activity.Current" />-Aktivität bei und benachrichtigt Consumer, dass die <see cref="T:System.Diagnostics.Activity" /> beendet wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Producer können zusätzliche Details an den Consumer in der Nutzlast übergeben.

Consumer können auf <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> zugreifen, um Kontext und/oder eine Erweiterung der Telemetrie hinzuzufügen.


         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des geschriebenen Ereignisses.</param>
        <param name="value">Ein Objekt, das den Wert darstellt, der als Nutzlast für das Ereignis übergeben wird. Dies ist häufig ein anonymer Typ, der mehrere untergeordnete Werte enthält.</param>
        <summary>Stellt eine generische Möglichkeit zum Protokollieren komplexer Nutzlasten zur Verfügung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Jeder Benachrichtigung wird ein Name zugewiesen, der Sie identifiziert, sowie ein Objekt (in der Regel ein anonymer Typ), der beliebige Informationen bereitstellt, die an die Benachrichtigung übergeben werden.  

`name` sollte kurz sein. Verwenden Sie keinen voll qualifizierten Namen, es sei denn, Sie müssen die Mehrdeutigkeit vermeiden, da `name` global eindeutig sein müssen. In der Regel sind " *componentname. EventName*", wobei " *componentname* " und " *EventName* " Zeichen folgen mit weniger als 10 Zeichen sind, eine gute Gefährdung.

Benachrichtigungs Namen dürfen keine `.` enthalten, da Komponentennamen Punkte aufweisen und beide Punkte zu Mehrdeutigkeit führen. Wir empfehlen, dass Sie stattdessen `_` verwenden.

Angenommen, die Listener verwenden die Präfixen von Zeichen folgen, um Gruppen zu filtern. Daher ist es eine bewährte Vorgehensweise, eine Hierarchie von Komponentennamen zu haben.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ConditionalAttribute" FullName="System.Diagnostics.ConditionalAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52d16acc2fc86862af9bda2108dce8bd399b5141" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37664462" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ConditionalAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ConditionalAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConditionalAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConditionalAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConditionalAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ConditionalAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="55c20-101">Zeigt den Compilern an, dass ein Methodenaufruf oder ein Attribut ignoriert werden soll, wenn kein angegebenes bedingtes Kompilierungssymbol definiert ist.</span>
      <span class="sxs-lookup">
        <span data-stu-id="55c20-101">Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55c20-102">Sie können anwenden, die <xref:System.Diagnostics.ConditionalAttribute> -Attribut auf Methoden und Klassen.</span><span class="sxs-lookup"><span data-stu-id="55c20-102">You can apply the <xref:System.Diagnostics.ConditionalAttribute> attribute to methods and classes.</span></span> <span data-ttu-id="55c20-103">Allerdings ist die Verwendung für Klassen gilt nur für Typen, die abgeleitet sind <xref:System.Attribute>.</span><span class="sxs-lookup"><span data-stu-id="55c20-103">However, its use on classes is valid only for types that are derived from <xref:System.Attribute>.</span></span> <span data-ttu-id="55c20-104"><xref:System.Diagnostics.ConditionalAttribute> entweder ignoriert oder erzeugt eine compilerwarnung oder eine Fehlermeldung angezeigt, wenn Sie es in einen anderen Typ anwenden.</span><span class="sxs-lookup"><span data-stu-id="55c20-104"><xref:System.Diagnostics.ConditionalAttribute> either will be ignored or will produce a compiler warning or error message if you apply it to any other type.</span></span>  
  
 <span data-ttu-id="55c20-105">Anwenden von <xref:System.Diagnostics.ConditionalAttribute> an eine Methode zeigt den Compilern an, dass ein Aufruf der Methode nicht in Microsoft kompiliert werden soll intermediate Language (MSIL), wenn die bedingte Kompilierung Symboldateien, die zugeordnet wird <xref:System.Diagnostics.ConditionalAttribute> definiert ist.</span><span class="sxs-lookup"><span data-stu-id="55c20-105">Applying <xref:System.Diagnostics.ConditionalAttribute> to a method indicates to compilers that a call to the method should not be compiled into Microsoft intermediate language (MSIL) unless the conditional compilation symbol that is associated with <xref:System.Diagnostics.ConditionalAttribute> is defined.</span></span> <span data-ttu-id="55c20-106">Sie erhalten einen Kompilierungsfehler in Visual Studio, wenn Sie dieses Attribut auf eine Methode anwenden, die nicht "void" zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="55c20-106">You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void.</span></span> <span data-ttu-id="55c20-107">Anwenden von <xref:System.Diagnostics.ConditionalAttribute> auf ein Attribut gibt an, dass das Attribut nicht in Metadaten ausgegeben werden soll, es sei denn, das Symbol für bedingte Kompilierung definiert ist.</span><span class="sxs-lookup"><span data-stu-id="55c20-107">Applying <xref:System.Diagnostics.ConditionalAttribute> to an attribute indicates that the attribute should not be emitted to metadata unless the conditional compilation symbol is defined.</span></span> <span data-ttu-id="55c20-108">Keine Argumente an die Methode übergeben oder-Attribut sind weiterhin als Typ vom Compiler überprüft.</span><span class="sxs-lookup"><span data-stu-id="55c20-108">Any arguments passed to the method or attribute are still type-checked by the compiler.</span></span>  
  
 <span data-ttu-id="55c20-109">Sie können die folgenden Verfahren verwenden, um Symbole für bedingte Kompilierung definieren:</span><span class="sxs-lookup"><span data-stu-id="55c20-109">You can use the following techniques to define conditional compilation symbols:</span></span>  
  
-   <span data-ttu-id="55c20-110">Verwenden Sie die Befehlszeilen-Compileroptionen. z. B. **/ define: DEBUG**.</span><span class="sxs-lookup"><span data-stu-id="55c20-110">Use compiler command-line options; for example, **/define:DEBUG**.</span></span>  
  
-   <span data-ttu-id="55c20-111">Verwenden von Umgebungsvariablen in der Shell des Betriebssystems; z. B. **Festlegen von Debug-= 1**.</span><span class="sxs-lookup"><span data-stu-id="55c20-111">Use environment variables in the operating system shell; for example, **set DEBUG=1**.</span></span>  
  
-   <span data-ttu-id="55c20-112">Verwenden Sie im Quellcode Pragmas; Definieren Sie die Kompilierungsvariable beispielsweise wie folgt:</span><span class="sxs-lookup"><span data-stu-id="55c20-112">Use pragmas in the source code; for example, define the compilation variable as follows:</span></span>  
  
    ```csharp  
    #define DEBUG  
    ```  
  
    ```vb  
    #Const DEBUG=True  
    ```  
  
     <span data-ttu-id="55c20-113">Um die Variable aufzuheben, verwenden Sie folgende Schritte aus:</span><span class="sxs-lookup"><span data-stu-id="55c20-113">To undefine the variable, use the following:</span></span>  
  
    ```csharp  
    #undef DEBUG  
    ```  
  
    ```vb  
    #Const DEBUG=False  
    ```  
  
 <span data-ttu-id="55c20-114">Compiler, die mit der Common Language Specification (CLS) kompatibel sind berechtigt, ignorieren <xref:System.Diagnostics.ConditionalAttribute>.</span><span class="sxs-lookup"><span data-stu-id="55c20-114">Compilers that comply with the Common Language Specification (CLS) are permitted to ignore <xref:System.Diagnostics.ConditionalAttribute>.</span></span> <span data-ttu-id="55c20-115">Die C#-, Visual Basic und C++-Compiler unterstützen <xref:System.Diagnostics.ConditionalAttribute>; JScript-Compiler das Attribut nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="55c20-115">The C#, Visual Basic, and C++ compilers support <xref:System.Diagnostics.ConditionalAttribute>; the JScript compiler does not support the attribute.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="55c20-116">In Visual Basic die `AddressOf` Operator wird durch dieses Attribut nicht beeinflusst.</span><span class="sxs-lookup"><span data-stu-id="55c20-116">In Visual Basic, the `AddressOf` operator is not affected by this attribute.</span></span> <span data-ttu-id="55c20-117">Z. B. `Call CType(AddressOf delegate, Action)` immer ruft `delegate`, obwohl `Call delegate()` möglicherweise nicht.</span><span class="sxs-lookup"><span data-stu-id="55c20-117">For example, `Call CType(AddressOf delegate, Action)` always invokes `delegate`, although `Call delegate()` might not.</span></span>  
  
 <span data-ttu-id="55c20-118"><xref:System.Diagnostics.ConditionalAttribute> gilt für die Methoden, die in definierten die <xref:System.Diagnostics.Debug> und <xref:System.Diagnostics.Trace> Klassen.</span><span class="sxs-lookup"><span data-stu-id="55c20-118"><xref:System.Diagnostics.ConditionalAttribute> is applied to the methods that are defined in the <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes.</span></span>  
  
 <span data-ttu-id="55c20-119">Weitere Informationen zur Verwendung von Attributen finden Sie unter [Attribute](~/docs/standard/attributes/index.md).</span><span class="sxs-lookup"><span data-stu-id="55c20-119">For more information about how to use attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="55c20-120">Das folgende Beispiel veranschaulicht die Verwendung von <xref:System.Diagnostics.ConditionalAttribute>.</span><span class="sxs-lookup"><span data-stu-id="55c20-120">The following example demonstrates the use of <xref:System.Diagnostics.ConditionalAttribute>.</span></span> <span data-ttu-id="55c20-121">Im Beispiel wird davon ausgegangen, dass die Bedingung definiert wird, mit der **/ define** -Compileroption.</span><span class="sxs-lookup"><span data-stu-id="55c20-121">The example assumes that the condition is defined with the **/define** compiler option.</span></span> <span data-ttu-id="55c20-122">Sie können unterschiedliche Ergebnisse abrufen, indem Sie die Compileroption ändern.</span><span class="sxs-lookup"><span data-stu-id="55c20-122">You can obtain different results by changing the compiler option.</span></span> <span data-ttu-id="55c20-123">Sie können optional die Bedingungen definieren, mit Pragmas im Beispielcode identifiziert werden, wie Compileroptionen.</span><span class="sxs-lookup"><span data-stu-id="55c20-123">You can optionally define the conditions by using pragmas in the sample code instead of identifying them as compiler options.</span></span>  
  
 [!code-csharp[ConditionalAttributeSample1#7](~/samples/snippets/csharp/VS_Snippets_CLR/ConditionalAttributeSample1/CS/cas.cs#7)]
 [!code-vb[ConditionalAttributeSample1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConditionalAttributeSample1/VB/cas.vb#7)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalAttribute (string conditionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string conditionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conditionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConditionalAttribute(System::String ^ conditionString);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConditionalAttribute : string -&gt; System.Diagnostics.ConditionalAttribute" Usage="new System.Diagnostics.ConditionalAttribute conditionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conditionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="conditionString">
          <span data-ttu-id="55c20-124">Eine Zeichenfolge, die das dem Attribut zugeordnete Symbol für die bedingte Kompilierung angibt, bei dem die Groß-/Kleinschreibung beachtet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="55c20-124">A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="55c20-125">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.ConditionalAttribute" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="55c20-125">Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="55c20-126">Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Diagnostics.ConditionalAttribute.%23ctor%2A> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="55c20-126">The following example demonstrates how to use the <xref:System.Diagnostics.ConditionalAttribute.%23ctor%2A> constructor.</span></span> <span data-ttu-id="55c20-127">In diesem Beispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Diagnostics.ConditionalAttribute> Klasse.</span><span class="sxs-lookup"><span data-stu-id="55c20-127">This example is part of a larger example provided for the <xref:System.Diagnostics.ConditionalAttribute> class.</span></span>  
  
 [!code-csharp[ConditionalAttributeSample1#8](~/samples/snippets/csharp/VS_Snippets_CLR/ConditionalAttributeSample1/CS/cas.cs#8)]
 [!code-vb[ConditionalAttributeSample1#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConditionalAttributeSample1/VB/cas.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionString">
      <MemberSignature Language="C#" Value="public string ConditionString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConditionString" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ConditionalAttribute.ConditionString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConditionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConditionString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConditionString : string" Usage="System.Diagnostics.ConditionalAttribute.ConditionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="55c20-128">Ruft das dem <see cref="T:System.Diagnostics.ConditionalAttribute" />-Attribut zugeordnete Symbol für die bedingte Kompilierung ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="55c20-128">Gets the conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="55c20-129">Eine Zeichenfolge, die das dem <see cref="T:System.Diagnostics.ConditionalAttribute" />-Attribut zugeordnete Symbol für die bedingte Kompilierung angibt, bei dem die Groß-/Kleinschreibung beachtet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="55c20-129">A string that specifies the case-sensitive conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55c20-130">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="55c20-130">This property is read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
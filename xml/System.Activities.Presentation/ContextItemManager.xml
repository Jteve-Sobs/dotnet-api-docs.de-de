<Type Name="ContextItemManager" FullName="System.Activities.Presentation.ContextItemManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eaa9b5e96f6ae120233c50d74a1ae45793470978" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39835964" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ContextItemManager : System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.ContextItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ContextItemManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Activities.Presentation.ContextItem&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ContextItemManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ContextItemManager&#xA;Implements IEnumerable(Of ContextItem)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextItemManager abstract : System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::ContextItem ^&gt;" />
  <TypeSignature Language="F#" Value="type ContextItemManager = class&#xA;    interface seq&lt;ContextItem&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.ContextItem&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine Klasse dar, die einen Satz von Kontextelementen verwaltet, die im Bearbeitungskontext des Designers veröffentlicht wurden. Diese Klasse ist abstrakt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes im <xref:System.Activities.Presentation.ContextItem> enthaltene <xref:System.Activities.Presentation.ContextItemManager> stellt einen Teil des flüchtigen Zustands in einem <xref:System.Activities.Presentation.WorkflowDesigner> dar.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContextItemManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ContextItemManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Activities.Presentation.ContextItemManager" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type itemType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type itemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (itemType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ itemType);" />
      <MemberSignature Language="F#" Value="abstract member Contains : Type -&gt; bool" Usage="contextItemManager.Contains itemType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="itemType">Der Typ des Elements, für den die Überprüfung durchgeführt wird.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse einen Wert zurück, der angibt, ob der Element-Manager ein Element vom angegebenen Typ enthält.</summary>
        <returns>
          <see langword="true" />, wenn der Kontext eine Instanz des angegebenen Elementtyps enthält, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="itemType" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TItemType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TItemType&gt; () where TItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;(class System.Activities.Presentation.ContextItem) TItemType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TItemType As ContextItem) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TItemType&gt;&#xA; where TItemType : System::Activities::Presentation::ContextItem bool Contains();" />
      <MemberSignature Language="F#" Value="member this.Contains : unit -&gt; bool (requires 'ItemType :&gt; System.Activities.Presentation.ContextItem)" Usage="contextItemManager.Contains " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TItemType">Der Typ des Elements, für den die Überprüfung durchgeführt wird.</typeparam>
        <summary>Gibt einen Wert zurück, der angibt, ob der Element-Manager ein Element vom angegebenen Typ enthält.</summary>
        <returns>
          <see langword="true" />, wenn der Kontext eine Instanz des angegebenen Elementtyps enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese generische Methode ruft die abstrakte <xref:System.Activities.Presentation.ContextItemManager.Contains%2A>-Methode auf, die implementiert werden muss, damit diese Methode die Funktion zum Überprüfen von Typen bereitstellen kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;System.Activities.Presentation.ContextItem&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Activities.Presentation.ContextItem&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of ContextItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;System::Activities::Presentation::ContextItem ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Activities.Presentation.ContextItem&gt;" Usage="contextItemManager.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Activities.Presentation.ContextItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Listet beim Überschreiben in einer abgeleiteten Klasse die Kontextelemente im Bearbeitungskontext auf. Diese Enumeration schließt vorherige Ebenen ein, es sei denn, der Enumerator trifft auf eine isolierte Ebene.</summary>
        <returns>Gibt das <see cref="T:System.Collections.Generic.IEnumerator`1" />-Element zurück, das eine Enumeration von Kontextelementen enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberSignature Language="F#" Value="static member GetTarget : Delegate -&gt; obj" Usage="System.Activities.Presentation.ContextItemManager.GetTarget callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback">Der Rückruf für das gewünschte Ziel.</param>
        <summary>Stellt eine Hilfsmethode dar, die das Zielobjekt für einen Delegaten zurückgibt. Wenn der Delegat als Proxy für einen generischen Delegaten erstellt wurde, gibt diese Methode anstelle des Proxys das ursprüngliche Objekt zurück.</summary>
        <returns>Gibt ein <see cref="T:System.Object" />-Element zurück, das das Zielobjekt des Rückrufs enthält.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract System.Activities.Presentation.ContextItem GetValue (Type itemType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Activities.Presentation.ContextItem GetValue(class System.Type itemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetValue(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (itemType As Type) As ContextItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Activities::Presentation::ContextItem ^ GetValue(Type ^ itemType);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : Type -&gt; System.Activities.Presentation.ContextItem" Usage="contextItemManager.GetValue itemType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.ContextItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="itemType">Der Typ des Elements, das zurückgegeben werden soll.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse eine Instanz des angeforderten Elementtyps zurück. Falls kein Kontextelement mit dem jeweiligen Typ vorhanden ist, wird ein leeres Element erstellt.</summary>
        <returns>Gibt ein <see cref="T:System.Activities.Presentation.ContextItem" /> zurück, das ein Kontextelement des angeforderten Typs enthält. Falls kein Element im Kontext für diesen Typ vorhanden ist, wird ein Standardelement erstellt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="itemType" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue&lt;TItemType&gt;">
      <MemberSignature Language="C#" Value="public TItemType GetValue&lt;TItemType&gt; () where TItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TItemType GetValue&lt;(class System.Activities.Presentation.ContextItem) TItemType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue(Of TItemType As ContextItem) () As TItemType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TItemType&gt;&#xA; where TItemType : System::Activities::Presentation::ContextItem TItemType GetValue();" />
      <MemberSignature Language="F#" Value="member this.GetValue : unit -&gt; 'ItemType (requires 'ItemType :&gt; System.Activities.Presentation.ContextItem)" Usage="contextItemManager.GetValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItemType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TItemType">Der Typ des Elements, das zurückgegeben werden soll.</typeparam>
        <summary>Gibt eine Instanz des angeforderten Elementtyps zurück. Falls kein Kontextelement mit dem jeweiligen Typ vorhanden ist, wird ein leeres Element erstellt.</summary>
        <returns>Gibt ein <see cref="T:System.Activities.Presentation.ContextItem" /> zurück, das ein Kontextelement des angeforderten Typs enthält. Falls kein Element im Kontext für diesen Typ vorhanden ist, wird ein Standardelement erstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese generische Methode ruft die abstrakte <xref:System.Activities.Presentation.ContextItemManager.GetValue%2A>-Methode auf, die implementiert werden muss, damit diese Methode die Funktion zum Abrufen des Typs bereitstellen kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyItemChanged">
      <MemberSignature Language="C#" Value="protected static void NotifyItemChanged (System.Activities.Presentation.EditingContext context, System.Activities.Presentation.ContextItem item, System.Activities.Presentation.ContextItem previousItem);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void NotifyItemChanged(class System.Activities.Presentation.EditingContext context, class System.Activities.Presentation.ContextItem item, class System.Activities.Presentation.ContextItem previousItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.NotifyItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem,System.Activities.Presentation.ContextItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub NotifyItemChanged (context As EditingContext, item As ContextItem, previousItem As ContextItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void NotifyItemChanged(System::Activities::Presentation::EditingContext ^ context, System::Activities::Presentation::ContextItem ^ item, System::Activities::Presentation::ContextItem ^ previousItem);" />
      <MemberSignature Language="F#" Value="static member NotifyItemChanged : System.Activities.Presentation.EditingContext * System.Activities.Presentation.ContextItem * System.Activities.Presentation.ContextItem -&gt; unit" Usage="System.Activities.Presentation.ContextItemManager.NotifyItemChanged (context, item, previousItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.Presentation.EditingContext" />
        <Parameter Name="item" Type="System.Activities.Presentation.ContextItem" />
        <Parameter Name="previousItem" Type="System.Activities.Presentation.ContextItem" />
      </Parameters>
      <Docs>
        <param name="context">Der verwendete <see cref="T:System.Activities.Presentation.EditingContext" />.</param>
        <param name="item">Die neue <see cref="T:System.Activities.Presentation.ContextItem" />.</param>
        <param name="previousItem">Der vorherige <see cref="T:System.Activities.Presentation.ContextItem" />.</param>
        <summary>Stellt eine Hilfsmethode dar, die die geschützte <see cref="M:System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)" />-Methode aufruft.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="context" />, <paramref name="item" /> oder <paramref name="previousItem" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberSignature Language="F#" Value="static member RemoveCallback : Delegate * Delegate -&gt; Delegate" Usage="System.Activities.Presentation.ContextItemManager.RemoveCallback (existing, toRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing">Der vorhandene Delegat.</param>
        <param name="toRemove">Der Delegat, der aus <c>existing</c> entfernt werden soll.</param>
        <summary>Stellt eine Hilfsmethode dar, die Delegatenentfernungen durchführt und Delegaten entpackt, die als Proxys für generische Rückrufe fungieren.</summary>
        <returns>Gibt das <see cref="T:System.Delegate" />-Element zurück, das den neuen Delegaten enthält, der <paramref name="existing" /> zugewiesen werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode in den Implementierungen der <xref:System.Activities.Presentation.ContextItemManager.Unsubscribe%2A>-Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (System.Activities.Presentation.ContextItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(class System.Activities.Presentation.ContextItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.SetValue(System.Activities.Presentation.ContextItem)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetValue (value As ContextItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Activities::Presentation::ContextItem ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : System.Activities.Presentation.ContextItem -&gt; unit" Usage="contextItemManager.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Activities.Presentation.ContextItem" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert, der im <see cref="T:System.Activities.Presentation.ContextItem" /> festgelegt werden soll.</param>
        <summary>Legt beim Überschreiben in einer abgeleiteten Klasse ein Kontextelement auf den angegebenen Wert fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Übergeben Sie keine `null` Wert. Um ein <xref:System.Activities.Presentation.ContextItem>-Element auf einen leeren Wert festzulegen, erstellen Sie mithilfe eines Standardkonstruktors eine Instanz des Elements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type contextItemType, System.Activities.Presentation.SubscribeContextCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type contextItemType, class System.Activities.Presentation.SubscribeContextCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (contextItemType As Type, callback As SubscribeContextCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ contextItemType, System::Activities::Presentation::SubscribeContextCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : Type * System.Activities.Presentation.SubscribeContextCallback -&gt; unit" Usage="contextItemManager.Subscribe (contextItemType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextItemType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback" />
      </Parameters>
      <Docs>
        <param name="contextItemType">Der Elementtyp, den Sie abonnieren möchten.</param>
        <param name="callback">Der <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />, der aufgerufen wird, wenn sich <c>contextItemType</c> ändert.</param>
        <summary>Fügt beim Überschreiben in einer abgeleiteten Klasse einen Ereignisrückruf zurück, der aufgerufen wird, wenn sich ein Kontextelement mit dem angegebenen Elementtyp ändert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contextItemType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TContextItemType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TContextItemType&gt; (System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt; callback) where TContextItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;(class System.Activities.Presentation.ContextItem) TContextItemType&gt;(class System.Activities.Presentation.SubscribeContextCallback`1&lt;!!TContextItemType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Subscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TContextItemType As ContextItem) (callback As SubscribeContextCallback(Of TContextItemType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContextItemType&gt;&#xA; where TContextItemType : System::Activities::Presentation::ContextItem void Subscribe(System::Activities::Presentation::SubscribeContextCallback&lt;TContextItemType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Subscribe : System.Activities.Presentation.SubscribeContextCallback&lt;'ContextItemType (requires 'ContextItemType :&gt; System.Activities.Presentation.ContextItem)&gt; -&gt; unit (requires 'ContextItemType :&gt; System.Activities.Presentation.ContextItem)" Usage="contextItemManager.Subscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContextItemType">Der Elementtyp, den Sie abonnieren möchten.</typeparam>
        <param name="callback">Ein <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" />, der aufgerufen wird, wenn sich <c>contextItemType</c> ändert.</param>
        <summary>Fügt einen Ereignisrückruf hinzu, der aufgerufen wird, wenn sich ein Kontextelement mit dem angegebenen Typ ändert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contextItemType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Listet die Kontextelemente im Bearbeitungskontext auf.</summary>
        <returns>Gibt <see cref="T:System.Collections.IEnumerator" />zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type contextItemType, System.Activities.Presentation.SubscribeContextCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type contextItemType, class System.Activities.Presentation.SubscribeContextCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (contextItemType As Type, callback As SubscribeContextCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ contextItemType, System::Activities::Presentation::SubscribeContextCallback ^ callback);" />
      <MemberSignature Language="F#" Value="abstract member Unsubscribe : Type * System.Activities.Presentation.SubscribeContextCallback -&gt; unit" Usage="contextItemManager.Unsubscribe (contextItemType, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextItemType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback" />
      </Parameters>
      <Docs>
        <param name="contextItemType">Der Typ des Kontextelements, aus dem der Rückruf entfernt werden soll.</param>
        <param name="callback">Das zu entfernende <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />-Element.</param>
        <summary>Entfernt beim Überschreiben in einer abgeleiteten Klasse ein Abonnement.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TContextItemType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TContextItemType&gt; (System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt; callback) where TContextItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;(class System.Activities.Presentation.ContextItem) TContextItemType&gt;(class System.Activities.Presentation.SubscribeContextCallback`1&lt;!!TContextItemType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Unsubscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TContextItemType As ContextItem) (callback As SubscribeContextCallback(Of TContextItemType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContextItemType&gt;&#xA; where TContextItemType : System::Activities::Presentation::ContextItem void Unsubscribe(System::Activities::Presentation::SubscribeContextCallback&lt;TContextItemType&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Unsubscribe : System.Activities.Presentation.SubscribeContextCallback&lt;'ContextItemType (requires 'ContextItemType :&gt; System.Activities.Presentation.ContextItem)&gt; -&gt; unit (requires 'ContextItemType :&gt; System.Activities.Presentation.ContextItem)" Usage="contextItemManager.Unsubscribe callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContextItemType">Der Typ des Kontextelements, aus dem der Rückruf entfernt werden soll.</typeparam>
        <param name="callback">Das zu entfernende <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" />-Element.</param>
        <summary>Entfernt ein Abonnement.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
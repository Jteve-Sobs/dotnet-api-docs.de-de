<Type Name="MutexAccessRule" FullName="System.Security.AccessControl.MutexAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="313112efdeb91fcd55dc04055f79ffed899e1803" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86753558" /></Metadata><TypeSignature Language="C#" Value="public sealed class MutexAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MutexAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.MutexAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MutexAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class MutexAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type MutexAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Gruppe von Zugriffsrechten dar, die einem Benutzer oder einer Gruppe gewährt oder verweigert werden. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der- <xref:System.Security.AccessControl.MutexAccessRule> Klasse handelt es sich um einen Satz von Klassen, die der .NET Framework für die Verwaltung der Windows-Zugriffs Steuerungs Sicherheit auf benannten systemmutexen bereitstellt. Eine Übersicht über diese Klassen und deren Beziehung zu den zugrunde liegenden Windows-Zugriffs Steuerungsstrukturen finden Sie unter <xref:System.Security.AccessControl.MutexSecurity> .  
  
> [!NOTE]
>  Die Windows-Zugriffs Steuerungs Sicherheit ist nur für benannte systemmutexen sinnvoll. Wenn ein- <xref:System.Threading.Mutex> Objekt ein lokales Mutex darstellt, ist die Zugriffs Steuerung irrelevant.  
  
 Zum Abrufen einer Liste der zurzeit auf einen benannten Mutex angewendeten Regeln verwenden Sie die <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> -Methode, um ein <xref:System.Security.AccessControl.MutexSecurity> -Objekt abzurufen, und verwenden Sie dann die- <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> Methode, um eine Auflistung von- <xref:System.Security.AccessControl.MutexAccessRule> Objekten abzurufen.  
  
 <xref:System.Security.AccessControl.MutexAccessRule> Objekte ordnen nicht eins zu eins mit Zugriffs Steuerungs Einträgen in der zugrunde liegenden Zugriffs Steuerungs Liste (DACL) zu. Wenn Sie den Satz aller Zugriffsregeln für einen Mutex abrufen, enthält die Gruppe die Mindestanzahl von Regeln, die derzeit erforderlich sind, um alle Zugriffs Steuerungs Einträge auszudrücken.  
  
> [!NOTE]
>  Die zugrunde liegenden Zugriffs Steuerungs Einträge ändern sich, wenn Sie Regeln anwenden und entfernen. Die Informationen in den Regeln werden nach Möglichkeit zusammengeführt, um die kleinste Anzahl von Zugriffs Steuerungs Einträgen beizubehalten. Wenn Sie also die aktuelle Liste der Regeln lesen, sieht Sie möglicherweise nicht genau wie die Liste aller von Ihnen hinzugefügten Regeln aus.  
  
 Verwenden <xref:System.Security.AccessControl.MutexAccessRule> Sie-Objekte, um die Zugriffsrechte anzugeben, die einem Benutzer oder einer Gruppe gestattet oder verweigert werden. Ein- <xref:System.Security.AccessControl.MutexAccessRule> Objekt stellt immer entweder den zulässigen Zugriff oder verweigerten Zugriff dar, nie beides.  
  
 Um eine Regel auf einen benannten Systemmutex anzuwenden, verwenden Sie die- <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> Methode, um das-Objekt zu erhalten <xref:System.Security.AccessControl.MutexSecurity> . Ändern Sie das <xref:System.Security.AccessControl.MutexSecurity> Objekt, indem Sie die zugehörigen Methoden zum Hinzufügen der Regel verwenden, und verwenden Sie dann die- <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> Methode, um das Sicherheits Objekt erneut anzufügen.  
  
> [!IMPORTANT]
>  Änderungen, die Sie an einem-Objekt vornehmen, <xref:System.Security.AccessControl.MutexSecurity> wirken sich nicht auf die Zugriffsebenen des benannten Mutex aus, bis Sie die- <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> Methode aufrufen, um das geänderte Sicherheits Objekt dem benannten Mutex zuzuweisen.  
  
 <xref:System.Security.AccessControl.MutexAccessRule> Objekte sind unveränderlich. Die Sicherheit für einen Mutex wird mithilfe der Methoden der- <xref:System.Security.AccessControl.MutexSecurity> Klasse geändert, um Regeln hinzuzufügen oder zu entfernen. in diesem Fall werden die zugrunde liegenden Zugriffs Steuerungs Einträge geändert.  
  
> [!NOTE]
>  Die Sicherheit von Synchronisierungs Objekten wird für Windows 98 oder Windows Millennium Edition nicht unterstützt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Erstellung und Verwendung von- <xref:System.Security.AccessControl.MutexAccessRule> Objekten veranschaulicht. Im Beispiel wird ein <xref:System.Security.AccessControl.MutexSecurity> -Objekt erstellt, Regeln hinzugefügt, die verschiedene Rechte für den aktuellen Benutzer zulassen und verweigern, und das resultierende paar von Regeln wird angezeigt. Das Beispiel ermöglicht dann neue Rechte für den aktuellen Benutzer und zeigt das Ergebnis an, das anzeigt, dass die neuen Rechte mit der vorhandenen Regel zusammengeführt werden <xref:System.Security.AccessControl.AccessControlType.Allow> .  
  
> [!NOTE]
>  In diesem Beispiel wird das Sicherheits Objekt nicht an ein-Objekt angefügt <xref:System.Threading.Mutex> . Beispiele zum Anfügen von Sicherheits Objekten finden Sie unter <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> und <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> .  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.MutexSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.AccessControl.MutexAccessRule" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.MutexRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As MutexRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::MutexRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.MutexRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.MutexAccessRule" Usage="new System.Security.AccessControl.MutexAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Der Benutzer oder die Gruppe, für den bzw. die die Regel gilt. Muss vom Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> oder einem Typ wie etwa<see cref="T:System.Security.Principal.NTAccount" /> sein, der in den <see cref="T:System.Security.Principal.SecurityIdentifier" />-Typ konvertiert werden kann.</param>
        <param name="eventRights">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.MutexRights" />-Werten, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <param name="type">Einer der <see cref="T:System.Security.AccessControl.AccessControlType" />-Werte, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.AccessControl.MutexAccessRule" />-Klasse und gibt den Benutzer oder die Gruppe an, für den bzw. die die Regel gilt. Außerdem werden die Zugriffsrechte angegeben und ob diese gewährt oder verweigert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um auf einen zu warten <xref:System.Threading.Mutex> (durch Aufrufen der- <xref:System.Threading.WaitHandle.WaitOne%2A> ,-oder- <xref:System.Threading.WaitHandle.WaitAny%2A> <xref:System.Threading.WaitHandle.WaitAll%2A> Methode), muss ein Benutzer über <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> Zugriff verfügen. Um den Mutex freizugeben, <xref:System.Threading.Mutex.ReleaseMutex%2A> muss der Benutzer über Zugriff verfügen, indem er die-Methode aufrufen <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> gibt einen ungültigen Wert an.  
  
- oder - 
 <paramref name="type" /> gibt einen ungültigen Wert an.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="eventRights" /> ist 0 (null).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> ist weder vom Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> noch von einem Typ wie etwa <see cref="T:System.Security.Principal.NTAccount" />, der in den Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> konvertiert werden kann.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexAccessRule (string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.MutexRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As MutexRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexAccessRule(System::String ^ identity, System::Security::AccessControl::MutexRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexAccessRule : string * System.Security.AccessControl.MutexRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.MutexAccessRule" Usage="new System.Security.AccessControl.MutexAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Der Name des Benutzers oder der Gruppe, für den bzw. die die Regel gilt.</param>
        <param name="eventRights">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.MutexRights" />-Werten, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <param name="type">Einer der <see cref="T:System.Security.AccessControl.AccessControlType" />-Werte, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.AccessControl.MutexAccessRule" />-Klasse und gibt den Namen des Benutzers oder der Gruppe an, für den bzw. die die Regel gilt. Außerdem werden die Zugriffsrechte angegeben und ob diese gewährt oder verweigert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um auf einen zu warten <xref:System.Threading.Mutex> (durch Aufrufen der- <xref:System.Threading.WaitHandle.WaitOne%2A> ,-oder- <xref:System.Threading.WaitHandle.WaitAny%2A> <xref:System.Threading.WaitHandle.WaitAll%2A> Methode), muss ein Benutzer über <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> Zugriff verfügen. Um den Mutex freizugeben, <xref:System.Threading.Mutex.ReleaseMutex%2A> muss der Benutzer über Zugriff verfügen, indem er die-Methoden aufrufen <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> .  
  
 Dieser Konstruktor entspricht dem Erstellen eines <xref:System.Security.Principal.NTAccount> -Objekts, indem `identity` an den <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> -Konstruktor übergeben und das neu erstellte- <xref:System.Security.Principal.NTAccount> Objekt an den- <xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29> Konstruktor übergeben wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie dieser Konstruktor zum Erstellen von-Objekten verwendet wird <xref:System.Security.AccessControl.MutexAccessRule> . Im Beispiel wird ein <xref:System.Security.AccessControl.MutexSecurity> -Objekt erstellt, Regeln hinzugefügt, die verschiedene Rechte für den aktuellen Benutzer zulassen und verweigern, und das resultierende paar von Regeln wird angezeigt. Das Beispiel ermöglicht dann neue Rechte für den aktuellen Benutzer und zeigt das Ergebnis an, das anzeigt, dass die neuen Rechte mit der vorhandenen Regel zusammengeführt werden <xref:System.Security.AccessControl.AccessControlType.Allow> .  
  
> [!NOTE]
>  In diesem Beispiel wird das Sicherheits Objekt nicht an ein-Objekt angefügt <xref:System.Threading.Mutex> . Beispiele zum Anfügen von Sicherheits Objekten finden Sie unter <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> und <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> .  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> gibt einen ungültigen Wert an.  
  
- oder - 
 <paramref name="type" /> gibt einen ungültigen Wert an.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> ist 0 (null).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="identity" /> ist eine Zeichenfolge der Länge 0 (null).  
  
- oder - 
 <paramref name="identity" /> ist länger als 512 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="MutexRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexRights MutexRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.MutexRights MutexRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexAccessRule.MutexRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MutexRights As MutexRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::MutexRights MutexRights { System::Security::AccessControl::MutexRights get(); };" />
      <MemberSignature Language="F#" Value="member this.MutexRights : System.Security.AccessControl.MutexRights" Usage="System.Security.AccessControl.MutexAccessRule.MutexRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die von der Zugriffsregel gewährten oder verweigerten Rechte ab.</summary>
        <value>Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.MutexRights" />-Werten, mit denen die in der Zugriffsregel gewährten oder verweigerten Rechte angegeben werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexAccessRule> Objekte sind unveränderlich. Sie können eine neue Zugriffs Regel erstellen, die einen anderen Benutzer, andere Rechte oder ein anderes darstellt <xref:System.Security.AccessControl.AccessControlType> , aber Sie können eine vorhandene Zugriffs Regel nicht ändern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.Security.AccessControl.MutexAccessRule.MutexRights%2A> Eigenschaft zum Anzeigen der Rechte in dem Satz von Regeln veranschaulicht, der in einem-Objekt enthalten ist <xref:System.Security.AccessControl.MutexSecurity> . Im Beispiel wird ein <xref:System.Security.AccessControl.MutexSecurity> -Objekt erstellt, Regeln hinzugefügt, die verschiedene Rechte für den aktuellen Benutzer zulassen und verweigern, und das resultierende paar von Regeln wird angezeigt. Das Beispiel ermöglicht dann neue Rechte für den aktuellen Benutzer und zeigt das Ergebnis an, das anzeigt, dass die neuen Rechte mit der vorhandenen Regel zusammengeführt werden <xref:System.Security.AccessControl.AccessControlType.Allow> .  
  
> [!NOTE]
>  In diesem Beispiel wird das Sicherheits Objekt nicht an ein-Objekt angefügt <xref:System.Threading.Mutex> . Beispiele zum Anfügen von Sicherheits Objekten finden Sie unter <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> und <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> .  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GenericAce.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bf341882e41e147ec58db477d9d36d41dfb4f4ab.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf341882e41e147ec58db477d9d36d41dfb4f4ab</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.GenericAce">
          <source>Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.</source>
          <target state="translated">Stellt einen ACE (Access Control Entry, Zugriffssteuerungseintrag) dar und ist die Basisklasse für alle anderen ACE-Klassen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.GenericAce">
          <source>An ACE contains both an ACE header and a binary blob.</source>
          <target state="translated">Ein ACE enthält einen ACE-Header und eine binäre Blob.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.GenericAce">
          <source>The header contains information about the type of the ACE, various flags, and the size of the binary blob.</source>
          <target state="translated">Der Header enthält Informationen über den Typ des ACE, verschiedene Flags und die Größe des binären BLOBs.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.AceFlags">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AceFlags" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Ruft die Instanz von <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AceFlags" /&gt;</ph> ab, die diesem <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt zugeordnet ist, oder legt diese fest.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.AceFlags">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AceFlags" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Die Instanz von <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AceFlags" /&gt;</ph>, die diesem <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.AceFlags">
          <source>An <ph id="ph1">&lt;xref:System.Security.AccessControl.AceFlags&gt;</ph> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE).</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Security.AccessControl.AceFlags&gt;</ph> Objekt enthält Flags, die Angaben zu Vererbung, Vererbungsweitergabe und überwachungsbedingungen für ein Zugriffssteuerungseintrag (ACE).</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.AceType">
          <source>Gets the type of this Access Control Entry (ACE).</source>
          <target state="translated">Ruft den Typ für diesen ACE (Access Control Entry, Zugriffssteuerungseintrag) ab.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.AceType">
          <source>The type of this ACE.</source>
          <target state="translated">Der Typ für diesen ACE.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.AuditFlags">
          <source>Gets the audit information associated with this Access Control Entry (ACE).</source>
          <target state="translated">Ruft die diesem ACE (Access Control Entry, Zugriffssteuerungseintrag) zugeordneten Überwachungsinformationen ab.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.AuditFlags">
          <source>The audit information associated with this Access Control Entry (ACE).</source>
          <target state="translated">Die diesem ACE (Access Control Entry, Zugriffssteuerungseintrag) zugeordneten Überwachungsinformationen.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.BinaryLength">
          <source>Gets the length, in bytes, of the binary representation of the current <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Ruft die Länge der binären Darstellung des aktuellen <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekts (in Bytes) ab.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.BinaryLength">
          <source>This length should be used before marshaling the ACL into a binary array with the <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)" /&gt;</ph> method.</source>
          <target state="translated">Diese Länge muss vor dem Marshallen der ACL in ein binäres Array mit der <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)" /&gt;</ph>-Methode verwendet werden.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.BinaryLength">
          <source>The length, in bytes, of the binary representation of the current <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Die Länge der binären Darstellung des aktuellen <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekts (in Bytes).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.Copy">
          <source>Creates a deep copy of this Access Control Entry (ACE).</source>
          <target state="translated">Erstellt eine Tiefenkopie von diesem ACE (Access Control Entry, Zugriffssteuerungseintrag).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.Copy">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object that this method creates.</source>
          <target state="translated">Das von dieser Methode erstellte <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)">
          <source>The binary data from which to create the new <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Die binären Daten, aus denen das neue <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt erstellt werden soll.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)">
          <source>The offset at which to begin unmarshaling.</source>
          <target state="translated">Der Offset, bei dem mit dem Rückgängigmachen des Marshallens begonnen werden soll.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object from the specified binary data.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt aus den angegebenen binären Daten.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object this method creates.</source>
          <target state="translated">Das von dieser Methode erstellte <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object to compare to the current <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt, das mit dem aktuellen <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt verglichen werden soll.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Bestimmt, ob das angegebene <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt mit dem aktuellen <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt identisch ist.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object is equal to the current <ph id="ph3">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn das angegebene <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt gleich dem aktuellen <ph id="ph3">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt ist, andernfalls <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source>The byte array into which the contents of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> is marshaled.</source>
          <target state="translated">Das Bytearray, in das der Inhalt von <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> gemarshallt wird.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source>The offset at which to start marshaling.</source>
          <target state="translated">Der Offset, bei dem das Marshallen begonnen werden soll.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source>Marshals the contents of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object into the specified byte array beginning at the specified offset.</source>
          <target state="translated">Marshallt den Inhalt des <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekts in das angegebene Bytearray, wobei beim angegebenen Offset begonnen wird.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is negative or too high to allow the entire <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAcl" /&gt;</ph> to be copied into <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ist negativ oder zu hoch, um den gesamten <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAcl" /&gt;</ph> in <ph id="ph3">&lt;paramref name="array" /&gt;</ph> zu kopieren.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetHashCode">
          <source>Serves as a hash function for the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> class.</source>
          <target state="translated">Fungiert als eine Hashfunktion für die <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetHashCode">
          <source>The  <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.GenericAce.GetHashCode" /&gt;</ph> method is suitable for use in hashing algorithms and data structures like a hash table.</source>
          <target state="translated">Sie können die <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.GenericAce.GetHashCode" /&gt;</ph>-Methode in Hashalgorithmen und Datenstrukturen wie Hashtabellen verwenden.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object.</source>
          <target state="translated">Ein Hashcode für das aktuelle <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.InheritanceFlags">
          <source>Gets flags that specify the inheritance properties of this Access Control Entry (ACE).</source>
          <target state="translated">Ruft Flags ab, die die Vererbungseigenschaften für diesen ACE (Access Control Entry, Zugriffssteuerungseintrag) angeben.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.InheritanceFlags">
          <source>Flags that specify the inheritance properties of this ACE.</source>
          <target state="translated">Flags, die die Vererbungseigenschaften für diesen ACE angeben.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.IsInherited">
          <source>Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.</source>
          <target state="translated">Ruft einen booleschen Wert ab, der angibt, ob dieser ACE (Access Control Entry, Zugriffssteuerungseintrag) geerbt oder explizit festgelegt wird.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.IsInherited">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this ACE is inherited; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn dieser ACE geerbt wird, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object to compare.</source>
          <target state="translated">Das erste zu vergleichende <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> to compare.</source>
          <target state="translated">Der zweite zu vergleichende <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> objects are considered equal.</source>
          <target state="translated">Bestimmt, ob die angegebenen <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekte als gleich betrachtet werden.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> objects are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die beiden <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekte gleich sind, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Security.AccessControl.GenericAce.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Die entsprechende Methode für diesen Operator ist <ph id="ph1">&lt;xref:System.Security.AccessControl.GenericAce.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> object to compare.</source>
          <target state="translated">Das erste zu vergleichende <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> to compare.</source>
          <target state="translated">Der zweite zu vergleichende <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> objects are considered unequal.</source>
          <target state="translated">Bestimmt, ob die angegebenen <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekte als ungleich betrachtet werden.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> objects are unequal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die beiden <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>-Objekte nicht identisch sind, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Security.AccessControl.GenericAce.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Die entsprechende Methode für diesen Operator ist <ph id="ph1">&lt;xref:System.Security.AccessControl.GenericAce.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.GenericAce.PropagationFlags">
          <source>Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).</source>
          <target state="translated">Ruft Flags ab, die die Eigenschaften der Vererbungsweitergabe für diesen ACE (Access Control Entry, Zugriffssteuerungseintrag) angeben.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.GenericAce.PropagationFlags">
          <source>Flags that specify the inheritance propagation properties of this ACE.</source>
          <target state="translated">Flags, die die Eigenschaften der Vererbungsweitergabe für diesen ACE angeben.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
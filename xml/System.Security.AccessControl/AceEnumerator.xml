<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a7c6f803cc6702ecdb2fee55f8d9ec35963de12" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78833634" /></Metadata><TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type AceEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="4844a-101">Bietet die Möglichkeit, die Zugriffssteuerungseinträge (ACEs) in einer Zugriffssteuerungsliste (ACL) zu durchlaufen.</span><span class="sxs-lookup"><span data-stu-id="4844a-101">Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Security.AccessControl.GenericAce" Usage="System.Security.AccessControl.AceEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4844a-102">Ruft das aktuelle Element in der <see cref="T:System.Security.AccessControl.GenericAce" />-Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="4844a-102">Gets the current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span> <span data-ttu-id="4844a-103">Diese Eigenschaft ruft die typfreundliche Version des Objekts ab.</span><span class="sxs-lookup"><span data-stu-id="4844a-103">This property gets the type-friendly version of the object.</span></span></summary>
        <value><span data-ttu-id="4844a-104">Das aktuelle Element in der <see cref="T:System.Security.AccessControl.GenericAce" />-Auflistung.</span><span class="sxs-lookup"><span data-stu-id="4844a-104">The current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="aceEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4844a-105">Setzt den Enumerator auf das nächste Element der <see cref="T:System.Security.AccessControl.GenericAce" />-Auflistung.</span><span class="sxs-lookup"><span data-stu-id="4844a-105">Advances the enumerator to the next element of the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></summary>
        <returns><span data-ttu-id="4844a-106"><see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</span><span class="sxs-lookup"><span data-stu-id="4844a-106"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4844a-107">Nach dem Erstellen eines Enumerators oder nach einem aufzurufenden <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>-Methode wird ein Enumerator vor dem ersten Element der Auflistung positioniert, und der Enumerator wird durch den ersten Aufrufe der <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>-Methode auf das erste Element der Auflistung verschoben.</span><span class="sxs-lookup"><span data-stu-id="4844a-107">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method moves the enumerator over the first element of the collection.</span></span>  
  
 <span data-ttu-id="4844a-108">Nachdem das Ende der Auflistung überschritten wurde, geben nachfolgende Aufrufe von <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> `false` zurück, bis <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="4844a-108">After the end of the collection is passed, subsequent calls to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="4844a-109">Ein Enumerator bleibt gültig, solange die Auflistung unverändert ist.</span><span class="sxs-lookup"><span data-stu-id="4844a-109">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4844a-110">Wenn Änderungen, z. b. das Hinzufügen, ändern oder Löschen von Elementen, an der Auflistung vorgenommen werden, wird der Enumerator unwiederbringlich ungültig, und beim nächsten <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> oder <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> wird ein <xref:System.InvalidOperationException>ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="4844a-110">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4844a-111">Die Sammlung wurde nach der Erstellung des Enumerators geändert.</span><span class="sxs-lookup"><span data-stu-id="4844a-111">The collection was modified after the enumerator was created.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="aceEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4844a-112">Legt den Enumerator auf seine anfängliche Position vor dem ersten Element in der <see cref="T:System.Security.AccessControl.GenericAce" />-Auflistung fest.</span><span class="sxs-lookup"><span data-stu-id="4844a-112">Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4844a-113">Ein Enumerator bleibt gültig, solange die Auflistung unverändert ist.</span><span class="sxs-lookup"><span data-stu-id="4844a-113">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4844a-114">Wenn, z. b. das Hinzufügen, ändern oder Löschen von Elementen, an der Auflistung vorgenommen werden, wird der Enumerator unwiederbringlich ungültig, und der nächste <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> aufrufungs-oder <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> Methode löst eine <xref:System.InvalidOperationException></span><span class="sxs-lookup"><span data-stu-id="4844a-114">If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method throws an <xref:System.InvalidOperationException></span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4844a-115">Die Sammlung wurde nach der Erstellung des Enumerators geändert.</span><span class="sxs-lookup"><span data-stu-id="4844a-115">The collection was modified after the enumerator was created.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="4844a-116">Alle Aufrufe von <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> müssen denselben Status für den Enumerator aufweisen.</span><span class="sxs-lookup"><span data-stu-id="4844a-116">All calls to <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> must result in the same state for the enumerator.</span></span> <span data-ttu-id="4844a-117">Die bevorzugte Implementierung besteht darin, den Enumerator vor dem ersten Element an den Anfang der Auflistung zu verschieben.</span><span class="sxs-lookup"><span data-stu-id="4844a-117">The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</span></span> <span data-ttu-id="4844a-118">Dadurch wird der Enumerator ungültig, wenn die Auflistung seit der Erstellung des Enumerators geändert wurde, was mit <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> und <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />konsistent ist.</span><span class="sxs-lookup"><span data-stu-id="4844a-118">This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> and <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4844a-119">Ruft das aktuelle Element in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="4844a-119">Gets the current element in the collection.</span></span></summary>
        <value><span data-ttu-id="4844a-120">Das aktuelle Element in der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="4844a-120">The current element in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4844a-121">Nachdem ein Enumerator erstellt wurde oder nachdem der <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>-Methode aufgerufen wurde, müssen Sie die <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>-Methode aufzurufen, um den Enumerator vor dem Lesen des Werts von <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>auf das erste Element der Auflistung zu setzen. Andernfalls ist <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="4844a-121">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; otherwise, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="4844a-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> löst auch eine Ausnahme aus, wenn der letzte aufrufungs <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> `false`zurückgegeben hat, was das Ende der Auflistung angibt.</span><span class="sxs-lookup"><span data-stu-id="4844a-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="4844a-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> verschiebt die Position des Enumerators nicht, und aufeinanderfolgende Aufrufe an <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> geben dasselbe Objekt zurück, bis entweder <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> oder <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="4844a-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="4844a-124">Ein Enumerator bleibt gültig, solange die Auflistung unverändert ist.</span><span class="sxs-lookup"><span data-stu-id="4844a-124">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4844a-125">Wenn Änderungen, z. b. das Hinzufügen, ändern oder Löschen von Elementen, an der Auflistung vorgenommen werden, wird der Enumerator unwiederbringlich ungültig, und beim nächsten <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> oder <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> wird ein <xref:System.InvalidOperationException>ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="4844a-125">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="4844a-126">Wenn die Auflistung zwischen <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> und <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>geändert wird, gibt <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> das Element zurück, auf das Sie festgelegt ist, auch wenn der Enumerator bereits ungültig gemacht wurde.</span><span class="sxs-lookup"><span data-stu-id="4844a-126">If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4844a-127">Die Sammlung wurde nach der Erstellung des Enumerators geändert.</span><span class="sxs-lookup"><span data-stu-id="4844a-127">The collection was modified after the enumerator was created.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

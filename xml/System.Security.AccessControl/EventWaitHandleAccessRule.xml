<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f9b17a084af70636af63ec9df06b2f24148e87e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489994" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Gruppe von Zugriffsrechten dar, die einem Benutzer oder einer Gruppe gewährt oder verweigert werden. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Klasse wird zu einem Satz von Klassen, die die .NET Framework bietet für die Verwaltung von Windows-zugriffssteuerungssicherheit benanntes Systemereignisse. Einen Überblick über diese Klassen und deren Beziehungen zu den zugrunde liegenden Windows Zugriffssteuerungsstrukturen finden Sie unter <xref:System.Security.AccessControl.EventWaitHandleSecurity>.  
  
> [!NOTE]
>  Windows-zugriffssteuerungssicherheit ist nur sinnvoll bei benanntes Systemereignisse. Wenn ein <xref:System.Threading.EventWaitHandle> -Objekt stellt ein lokales Ereignis dar, die Zugriffssteuerung ist irrelevant.  
  
 Verwenden Sie zum Abrufen einer Liste der derzeit auf ein benanntes Ereignis angewendeten Regeln die <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> Methode zum Abrufen einer <xref:System.Security.AccessControl.EventWaitHandleSecurity> -Objekts und anschließendes Verwenden seiner <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> Methode zum Abrufen einer Auflistung von <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Objekte.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Objekte zuordnen nicht eins zu eins Zugriffssteuerungseinträge in der zugrunde liegenden besitzverwalteten Zugriffssteuerungsliste (DACL). Wenn Sie den Satz von alle Zugriffsregeln für ein Ereignis erhalten, enthält der Satz die minimale Anzahl von Regeln, die derzeit erforderlich, um alle Zugriffssteuerungseinträge.  
  
> [!NOTE]
>  Die zugrunde liegenden Zugriffssteuerungseinträge ändern, da Sie Regeln anwenden oder entfernen. Die in Regeln nach Möglichkeit zusammengeführt, um die kleinste Anzahl von Zugriffssteuerungseinträgen zu gewährleisten. Daher, wenn Sie die aktuelle Liste der Regeln abrufen, es sieht möglicherweise nicht genau wie die Liste aller Regeln, die Sie hinzugefügt haben.  
  
 Verwendung <xref:System.Security.AccessControl.EventWaitHandleAccessRule> -Objekten, die Zugriffsrechte gewähren oder verweigern einem Benutzer oder Gruppe angeben. Ein <xref:System.Security.AccessControl.EventWaitHandleAccessRule> -Objekt immer stellt der Zugriff erlaubt oder verweigert den Zugriff auf niemals beide.  
  
 Verwenden Sie zum Anwenden einer Regelsatzes auf ein benanntes Systemereignis der <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> Methode zum Abrufen der <xref:System.Security.AccessControl.EventWaitHandleSecurity> Objekt. Ändern der <xref:System.Security.AccessControl.EventWaitHandleSecurity> -Objekt mithilfe seiner Methoden zum Hinzufügen der Regelnamens, und klicken Sie dann die <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> Methode, um das Sicherheitsobjekt erneut anzufügen.  
  
> [!IMPORTANT]
>  Änderungen an einer <xref:System.Security.AccessControl.EventWaitHandleSecurity> Objekt wirken sich nicht auf die Zugriffsebenen der das benannte Ereignis erst nach dem Aufruf der <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> Methode, um das benannte Ereignis das geänderte Sicherheitsobjekt zuweisen.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> -Objekte sind unveränderlich. Sicherheit für ein Ereignis mit den Methoden der geändert wird die <xref:System.Security.AccessControl.EventWaitHandleSecurity> Klasse zum Hinzufügen oder Entfernen von Regeln, wie in diesem Fall werden die zugrunde liegenden Zugriffssteuerungseinträge geändert.  
  
> [!NOTE]
>  Sicherheit auf Synchronisierungsobjekte ist Windows 98 oder Windows Millennium Edition nicht unterstützt.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Erstellung und Verwendung von <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Objekte. Das Beispiel erstellt eine <xref:System.Security.AccessControl.EventWaitHandleSecurity> -Objekt, fügt die Regeln, die zulassen und verweigern verschiedene Rechte für den aktuellen Benutzer hinzu und zeigt das resultierende Paar von Regeln. Anschließend können Sie neue Rechte für den aktuellen Benutzer und das Ergebnis wird angezeigt, dass der neuen Rechte mit dem vorhandenen zusammengeführt werden <xref:System.Security.AccessControl.AccessControlType.Allow> Regel.  
  
> [!NOTE]
>  In diesem Beispiel wird das Sicherheitsobjekt, nicht angefügt ein <xref:System.Threading.EventWaitHandle> Objekt. Beispiele, die Sicherheitsobjekte angefügt werden, finden Sie <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> und <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Der Benutzer oder die Gruppe, für den bzw. die die Regel gilt. Muss vom Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> oder einem Typ wie etwa<see cref="T:System.Security.Principal.NTAccount" /> sein, der in den <see cref="T:System.Security.Principal.SecurityIdentifier" />-Typ konvertiert werden kann.</param>
        <param name="eventRights">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.EventWaitHandleRights" />-Werten, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <param name="type">Einer der <see cref="T:System.Security.AccessControl.AccessControlType" />-Werte, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />-Klasse und gibt den Benutzer oder die Gruppe an, für den bzw. die die Regel gilt. Außerdem werden die Zugriffsrechte angegeben und ob diese gewährt oder verweigert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Warten auf ein <xref:System.Threading.EventWaitHandle> (durch Aufrufen der <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> oder <xref:System.Threading.WaitHandle.WaitAll%2A> Methode), Benutzer benötigen <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> Zugriff. Signalisieren ein Ereignisses durch Aufrufen der <xref:System.Threading.EventWaitHandle.Set%2A> -Methode, oder es in den nicht signalisierten Zustand zurückzusetzen, durch den Aufruf der <xref:System.Threading.EventWaitHandle.Reset%2A> -Methode, die ein Benutzer besitzen muss <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> Zugriff. Signalisiert ein <xref:System.Threading.EventWaitHandle> Objekt, und klicken Sie dann darauf warten, durch Aufrufen der <xref:System.Threading.WaitHandle.SignalAndWait%2A> -Methode, ein Benutzer benötigt die <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> und <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> Zugriff.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> gibt einen ungültigen Wert an.  
  
 - oder -   
  
 <paramref name="type" /> gibt einen ungültigen Wert an.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="eventRights" /> ist 0 (null).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> ist weder vom Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> noch von einem Typ wie etwa <see cref="T:System.Security.Principal.NTAccount" />, der in den Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> konvertiert werden kann.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Der Name des Benutzers oder der Gruppe, für den bzw. die die Regel gilt.</param>
        <param name="eventRights">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.EventWaitHandleRights" />-Werten, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <param name="type">Einer der <see cref="T:System.Security.AccessControl.AccessControlType" />-Werte, mit denen angegeben wird, ob die Rechte gewährt oder verweigert werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />-Klasse und gibt den Namen des Benutzers oder der Gruppe an, für den bzw. die die Regel gilt. Außerdem werden die Zugriffsrechte angegeben und ob diese gewährt oder verweigert werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Warten auf ein <xref:System.Threading.EventWaitHandle> (durch Aufrufen der <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> oder <xref:System.Threading.WaitHandle.WaitAll%2A> Methode), Benutzer benötigen <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> Zugriff. Signalisieren ein Ereignisses durch Aufrufen der <xref:System.Threading.EventWaitHandle.Set%2A> -Methode, oder es in den nicht signalisierten Zustand zurückzusetzen, durch den Aufruf der <xref:System.Threading.EventWaitHandle.Reset%2A> -Methode, die ein Benutzer besitzen muss <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> Zugriff. Signalisiert ein <xref:System.Threading.EventWaitHandle> Objekt, und klicken Sie dann darauf warten, durch Aufrufen der <xref:System.Threading.WaitHandle.SignalAndWait%2A> -Methode, ein Benutzer benötigt die <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> und <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> Zugriff.  
  
 Dieser Konstruktor entspricht dem Erstellen eine <xref:System.Security.Principal.NTAccount> -Objekts und durch übergeben `identity` auf die <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> -Konstruktor übergeben und die neu erstellte <xref:System.Security.Principal.NTAccount> -Objekt an die <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> Konstruktor.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Konstruktors zum Erstellen <xref:System.Security.AccessControl.EventWaitHandleAccessRule> Objekte. Das Beispiel erstellt eine <xref:System.Security.AccessControl.EventWaitHandleSecurity> -Objekt, fügt die Regeln, die zulassen und verweigern verschiedene Rechte für den aktuellen Benutzer hinzu und zeigt das resultierende Paar von Regeln. Anschließend können Sie neue Rechte für den aktuellen Benutzer und das Ergebnis wird angezeigt, dass der neuen Rechte mit dem vorhandenen zusammengeführt werden <xref:System.Security.AccessControl.AccessControlType.Allow> Regel.  
  
> [!NOTE]
>  In diesem Beispiel wird das Sicherheitsobjekt, nicht angefügt ein <xref:System.Threading.EventWaitHandle> Objekt. Beispiele, die Sicherheitsobjekte angefügt werden, finden Sie <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> und <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> gibt einen ungültigen Wert an.  
  
 - oder -   
  
 <paramref name="type" /> gibt einen ungültigen Wert an.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> ist 0 (null).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="identity" /> ist eine Zeichenfolge mit der Länge 0 (null).  
  
 - oder -   
  
 <paramref name="identity" /> ist länger als 512 Zeichen.</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die von der Zugriffsregel gewährten oder verweigerten Rechte ab.</summary>
        <value>Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.EventWaitHandleRights" />-Werten, mit denen die in der Zugriffsregel gewährten oder verweigerten Rechte angegeben werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> -Objekte sind unveränderlich. Sie können eine neue Zugriffsregel darstellt, ein anderer Benutzer, unterschiedliche Rechte oder ein anderes erstellen <xref:System.Security.AccessControl.AccessControlType>, aber eine vorhandene Access-Regel kann nicht geändert werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> Eigenschaft, um die Berechtigungen angezeigt werden, in den Satz von Regeln einer <xref:System.Security.AccessControl.EventWaitHandleSecurity> Objekt. Das Beispiel erstellt eine <xref:System.Security.AccessControl.EventWaitHandleSecurity> -Objekt, fügt die Regeln, die zulassen und verweigern verschiedene Rechte für den aktuellen Benutzer hinzu und zeigt das resultierende Paar von Regeln. Anschließend können Sie neue Rechte für den aktuellen Benutzer und das Ergebnis wird angezeigt, dass der neuen Rechte mit dem vorhandenen zusammengeführt werden <xref:System.Security.AccessControl.AccessControlType.Allow> Regel.  
  
> [!NOTE]
>  In diesem Beispiel wird das Sicherheitsobjekt, nicht angefügt ein <xref:System.Threading.EventWaitHandle> Objekt. Beispiele, die Sicherheitsobjekte angefügt werden, finden Sie <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> und <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
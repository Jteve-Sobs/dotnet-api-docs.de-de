<Type Name="DrawingAttributes" FullName="System.Windows.Ink.DrawingAttributes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e66ff00aeda68de049dc62ee3ae3829eca8e9a96" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52228061" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingAttributes extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.DrawingAttributes" />
  <TypeSignature Language="VB.NET" Value="Public Class DrawingAttributes&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class DrawingAttributes : System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type DrawingAttributes = class&#xA;    interface INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Gibt die Darstellung eines <see cref="T:System.Windows.Ink.Stroke" /> an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> -Eigenschaft an Einstellungen, z. B. Farbe, Breite, Transparenz und die Form des Tablettstifts Tipps für eine <xref:System.Windows.Ink.Stroke>.  
  
 Verwenden der <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> -Eigenschaft an die Zeichnungsattribute für die Striche, die hinzugefügt werden, um eine <xref:System.Windows.Controls.InkCanvas>. Nur Striche, die nach dem hinzugefügt werden die <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> durchlaufen, die aktualisierten Attribute Änderung anzeigen. Die Darstellung der Striche, die bereits auf dem <xref:System.Windows.Controls.InkCanvas> wird nicht geändert.  
  
 Eine Liste der anfänglichen Eigenschaftenwerte für eine Instanz der <xref:System.Windows.Ink.DrawingAttributes>-Klasse finden Sie im <xref:System.Windows.Ink.DrawingAttributes>-Konstruktor.  
  
<a name="xamlTextUsage_DrawingAttributes"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Klasse wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte zum Simulieren der Verwendung von Stift und einen Textmarker auf dem gleichen <xref:System.Windows.Controls.InkCanvas>. Im Beispiel wird vorausgesetzt, das Stammelement in der XAML-Datei ist eine <xref:System.Windows.Controls.DockPanel> namens `root`. Außerdem wird vorausgesetzt, dass es ist ein <xref:System.Windows.Controls.Button> aufgerufen `switchHighlighter` und die <xref:System.Windows.Controls.Primitives.ButtonBase.Click> Ereignis an den Ereignishandler, die in diesem Beispiel definierte verbunden ist.  
  
 [!code-csharp[DrawingAttributes#3](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#3)]
 [!code-vb[DrawingAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawingAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Ink.DrawingAttributes" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden anfängliche Eigenschaftswerte für eine Instanz der <xref:System.Windows.Ink.DrawingAttributes>-Klasse aufgeführt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Windows.Ink.DrawingAttributes.Color%2A>|Schwarz|  
|<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.Height%2A>|2 geräteunabhängigen Pixeln (DIP)|  
|<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>|<xref:System.Windows.Ink.StylusTip.Ellipse?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>|<xref:System.Windows.Media.Matrix.Identity%2A?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.Width%2A>|DIP-ADRESSE 2|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyData">
      <MemberSignature Language="C#" Value="public void AddPropertyData (Guid propertyDataId, object propertyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPropertyData(valuetype System.Guid propertyDataId, object propertyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPropertyData (propertyDataId As Guid, propertyData As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPropertyData(Guid propertyDataId, System::Object ^ propertyData);" />
      <MemberSignature Language="F#" Value="member this.AddPropertyData : Guid * obj -&gt; unit" Usage="drawingAttributes.AddPropertyData (propertyDataId, propertyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
        <Parameter Name="propertyData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die der benutzerdefinierten Eigenschaft zuzuordnende <see cref="T:System.Guid" />.</param>
        <param name="propertyData">Der Wert der benutzerdefinierten Eigenschaft. <paramref name="propertyData" /> muss vom Typ <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> oder ein Array dieser Datentypen sein. Es darf jedoch kein Array vom Typ <see cref="T:System.String" /> sein.</param>
        <summary>Fügt dem <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt eine benutzerdefinierte Eigenschaft hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Ink.DrawingAttributes.AddPropertyData%2A> Methode können Sie benutzerdefinierte Eigenschaften zum Hinzufügen einer <xref:System.Windows.Ink.DrawingAttributes> Objekt. Dies ist nützlich, wenn Sie eigene Striche rendern und zusätzlichen Informationen bereitstellen möchten.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt das Hinzufügen, und rufen Sie eine benutzerdefinierte Eigenschaft aus der <xref:System.Windows.Ink.DrawingAttributes> Objekt. Das Beispiel fügt eine Eigenschaft, der angibt, ob die <xref:System.Windows.Ink.DrawingAttributes> Objekt ist ein Stift oder ein Textmarker. Der Code in die `ChangeColors_Click` Ereignishandler rendert eine neue Farbe für Striche auf der <xref:System.Windows.Controls.InkCanvas> , verwenden die <xref:System.Windows.Ink.DrawingAttributes> Objekt `inkDA`. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> mit dem Namen `inkCanvas1`, und es gibt zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte, die mit dem Namen `inkDA`, und `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyData" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" /> ist eine leere <see cref="T:System.Guid" />.  
  
- oder -  
 <paramref name="propertyData" /> ist keiner der im Abschnitt <see langword="Parameters" /> aufgelisteten zulässigen Datentypen.</exception>
      </Docs>
    </Member>
    <Member MemberName="AttributeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event AttributeChanged As PropertyDataChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Ink::PropertyDataChangedEventHandler ^ AttributeChanged;" />
      <MemberSignature Language="F#" Value="member this.AttributeChanged : System.Windows.Ink.PropertyDataChangedEventHandler " Usage="member this.AttributeChanged : System.Windows.Ink.PropertyDataChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn eine Eigenschaft im <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel verarbeitet die <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> Ereignis. In diesem Beispiel wird vorausgesetzt, dass eine <xref:System.Windows.Ink.DrawingAttributes> Objekt mit dem Namen `inkDA` und dass die <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> Ereignis an den Ereignishandler, die in diesem Beispiel definierte verbunden ist.  
  
 [!code-csharp[DrawingAttributes#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#6)]
 [!code-vb[DrawingAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Ink.DrawingAttributes Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Ink.DrawingAttributes Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DrawingAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Ink::DrawingAttributes ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.Ink.DrawingAttributes&#xA;override this.Clone : unit -&gt; System.Windows.Ink.DrawingAttributes" Usage="drawingAttributes.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.DrawingAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kopiert das <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</summary>
        <returns>Eine Kopie des <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Ink.DrawingAttributes.Clone%2A> Methode erstellt ein neues <xref:System.Windows.Ink.DrawingAttributes> -Objekt und füllt sie mit den gleichen Werten wie das aktuelle Objekt. Benutzerdefinierten Eigenschaften werden ebenfalls kopiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Kopieren einer <xref:System.Windows.Ink.DrawingAttributes> Objekt.  
  
 [!code-csharp[DrawingAttributes#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#8)]
 [!code-vb[DrawingAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Color Color { System::Windows::Media::Color get(); void set(System::Windows::Media::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Windows.Media.Color with get, set" Usage="System.Windows.Ink.DrawingAttributes.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Farbe eines <see cref="T:System.Windows.Ink.Stroke" /> ab oder legt diese fest.</summary>
        <value>Die Farbe eines <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_Color"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.Color%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsPropertyData">
      <MemberSignature Language="C#" Value="public bool ContainsPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsPropertyData (propertyDataId As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsPropertyData(Guid propertyDataId);" />
      <MemberSignature Language="F#" Value="member this.ContainsPropertyData : Guid -&gt; bool" Usage="drawingAttributes.ContainsPropertyData propertyDataId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" />, die im <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt gesucht werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob der angegebene Eigenschaftendatenbezeichner im <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt enthalten ist.</summary>
        <returns>
          <see langword="true" />, wenn der angegebene Eigenschaftendatenbezeichner im <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt enthalten ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt das Hinzufügen, und rufen Sie eine benutzerdefinierte Eigenschaft aus der <xref:System.Windows.Ink.DrawingAttributes> Objekt. Das Beispiel fügt eine Eigenschaft, der angibt, ob die <xref:System.Windows.Ink.DrawingAttributes> Objekt ist ein Stift oder ein Textmarker. Die `ChangeColors_Click` Ereignishandler ändert alle Striche, die gestellt wurden, auf die <xref:System.Windows.Controls.InkCanvas> mit einer <xref:System.Windows.Ink.DrawingAttributes> aufgerufen `inkDA` auf eine neue Farbe. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> mit dem Namen `inkCanvas1`, und es gibt zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte, die mit dem Namen `inkDA`, und `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="drawingAttributes.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">Das <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt, das mit dem aktuellen <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das angegebene <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt mit dem aktuellen <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt identisch ist.</summary>
        <returns>
          <see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte sind gleich, wenn die folgenden Eigenschaften gleich sind:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
> [!NOTE]
>  Die <xref:System.Windows.Ink.DrawingAttributes.Equals%2A> Methode überprüft nicht die benutzerdefinierten Eigenschaften hinsichtlich ihrer Gleichheit.  
  
   
  
## Examples  
 Im folgende Beispiel werden zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte auf Gleichheit. Da die <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, und <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaften `attributes1` und `attributes2` festgelegt auf die gleichen Werte, die Meldung "Die Zeichnungsattribute sind gleich" angezeigt wird.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#12](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#12)]
[!code-vb[DrawingAttributes#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FitToCurve">
      <MemberSignature Language="C#" Value="public bool FitToCurve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitToCurve" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberSignature Language="VB.NET" Value="Public Property FitToCurve As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FitToCurve { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FitToCurve : bool with get, set" Usage="System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob zum Rendern des <see cref="T:System.Windows.Ink.Stroke" /> die Bézierglättung verwendet wird.</summary>
        <value>
          <see langword="true" />, um die Bézierglättung zum Rendern des <see cref="T:System.Windows.Ink.Stroke" /> zu verwenden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_FitToCurve"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="drawingAttributes.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Object" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyData">
      <MemberSignature Language="C#" Value="public object GetPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyData (propertyDataId As Guid) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyData(Guid propertyDataId);" />
      <MemberSignature Language="F#" Value="member this.GetPropertyData : Guid -&gt; obj" Usage="drawingAttributes.GetPropertyData propertyDataId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" />, die der abzurufenden benutzerdefinierten Eigenschaft zugeordnet ist.</param>
        <summary>Ruft den Wert der benutzerdefinierten Eigenschaft ab, die der angegebenen <see cref="T:System.Guid" /> zugeordnet ist.</summary>
        <returns>Der Wert der benutzerdefinierten Eigenschaft, die der angegebenen <see cref="T:System.Guid" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> Methode, um benutzerdefinierte Eigenschaften, um hinzufügen eine <xref:System.Windows.Ink.DrawingAttributes> Objekt. <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> Gibt den Standardwert für die integrierte Eigenschaft zurück, wenn ein Wert nicht festgelegt wurde.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt das Hinzufügen, und rufen Sie eine benutzerdefinierte Eigenschaft aus der <xref:System.Windows.Ink.DrawingAttributes> Objekt. Das Beispiel fügt eine Eigenschaft, der angibt, ob die <xref:System.Windows.Ink.DrawingAttributes> Objekt ist ein Stift oder ein Textmarker. Der Code in die `ChangeColors_Click` Ereignishandler rendert eine neue Farbe für Striche auf der <xref:System.Windows.Controls.InkCanvas> , verwenden die <xref:System.Windows.Ink.DrawingAttributes> Objekt `inkDA`. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> mit dem Namen `inkCanvas1`, und es gibt zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte, die mit dem Namen `inkDA`, und `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" /> ist keiner benutzerdefinierten Eigenschaft des <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekts zugeordnet.</exception>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyDataIds">
      <MemberSignature Language="C#" Value="public Guid[] GetPropertyDataIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetPropertyDataIds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyDataIds () As Guid()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Guid&gt; ^ GetPropertyDataIds();" />
      <MemberSignature Language="F#" Value="member this.GetPropertyDataIds : unit -&gt; Guid[]" Usage="drawingAttributes.GetPropertyDataIds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die GUIDs der benutzerdefinierten Eigenschaften zurück, die der <see cref="T:System.Windows.Ink.StrokeCollection" /> zugeordnet sind.</summary>
        <returns>Ein Array vom Typ <see cref="T:System.Guid" />, das die Eigenschaftendatenbezeichner darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die GUIDs für die integrierten Eigenschaften der <xref:System.Windows.Ink.DrawingAttributes> Klasse befinden sich in der <xref:System.Windows.Ink.DrawingAttributeIds> Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die Daten aus Eigenschaftenbezeichner der <xref:System.Windows.Ink.DrawingAttributes> Objekt. In diesem Beispiel wird vorausgesetzt, dass eine <xref:System.Windows.Ink.DrawingAttributes> namens `inkDA` deklariert wurde.  
  
 [!code-csharp[DrawingAttributes#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#7)]
 [!code-vb[DrawingAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.Ink.DrawingAttributes.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Höhe des Tablettstifts ab, die zum Zeichnen des <see cref="T:System.Windows.Ink.Stroke" /> verwendet wird, oder legt diese fest.</summary>
        <value>Der Wert, der die Höhe des Tablettstifts angibt, die zum Zeichnen des <see cref="T:System.Windows.Ink.Stroke" /> verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgenden Faktoren beeinflussen die Höhe und Breite des eine <xref:System.Windows.Ink.Stroke> beim Rendern, aber nicht den Wert von der <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft.  
  
-   Die Menge des Drucks auf den Tablettstift, der bei der <xref:System.Windows.Ink.Stroke> gezeichnet wird.  
  
-   Der Wert der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>-Eigenschaft.  
  
 Setzen Sie die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft auf 0 geräteunabhängige Pixel (DIP), wird es in 2-DIP-Adresse geändert.  
  
<a name="xamlTextUsage_Height"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />-Eigenschaft ist kleiner als <see cref="F:System.Double.Epsilon" /> oder <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorePressure">
      <MemberSignature Language="C#" Value="public bool IgnorePressure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePressure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnorePressure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnorePressure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnorePressure : bool with get, set" Usage="System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob die Stärke eines gerenderten <see cref="T:System.Windows.Ink.Stroke" /> dem angewendeten Druck entsprechend geändert wird.</summary>
        <value>
          <see langword="true" />, um anzugeben, dass die Stärke des Strichs einheitlich ist. <see langword="false" />, um anzugeben, dass sich die Stärke eines gerenderten <see cref="T:System.Windows.Ink.Stroke" /> erhöht, wenn der Druck erhöht wird. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_IgnorePressure"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighlighter">
      <MemberSignature Language="C#" Value="public bool IsHighlighter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHighlighter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHighlighter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHighlighter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHighlighter : bool with get, set" Usage="System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob der <see cref="T:System.Windows.Ink.Stroke" /> wie ein Textmarker aussieht.</summary>
        <value>
          <see langword="true" />, um den <see cref="T:System.Windows.Ink.Stroke" /> als Textmarker zu rendern, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> -Eigenschaftensatz auf `true`, <xref:System.Windows.Ink.Stroke> ist leicht transparent, wodurch die darunter liegenden Striche angezeigt werden.  
  
<a name="xamlTextUsage_IsHighlighter"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public static readonly double MaxHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeight As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxHeight;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeight : double" Usage="System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den größten für die <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />-Eigenschaft zulässigen Wert an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MaxHeight> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässige ist die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft. Hierzu, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt der <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public static readonly double MaxWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidth As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxWidth;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidth : double" Usage="System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den größten für die <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />-Eigenschaft zulässigen Wert an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MaxWidth> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässige ist die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft. Hierzu, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt der <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public static readonly double MinHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeight As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinHeight;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeight : double" Usage="System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den kleinsten für die <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />-Eigenschaft zulässigen Wert an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MinHeight> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässige ist die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft. Hierzu, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt der <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public static readonly double MinWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidth As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinWidth;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidth : double" Usage="System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den kleinsten für die <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />-Eigenschaft zulässigen Wert an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MinWidth> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässige ist die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft. Hierzu, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt der <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAttributeChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttributeChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAttributeChanged (e As PropertyDataChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAttributeChanged(System::Windows::Ink::PropertyDataChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeChanged : System.Windows.Ink.PropertyDataChangedEventArgs -&gt; unit&#xA;override this.OnAttributeChanged : System.Windows.Ink.PropertyDataChangedEventArgs -&gt; unit" Usage="drawingAttributes.OnAttributeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen.  
  
 Mit der <xref:System.Windows.Ink.DrawingAttributes.OnAttributeChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> rufen Sie in einer abgeleiteten Klasse die <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> Methode für die Basisklasse, um sicherzustellen, dass registrierte Delegaten das Ereignis zu empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::ComponentModel::PropertyChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="drawingAttributes.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">EventArgs</param>
        <summary>Tritt ein, wenn sich eine <see cref="T:System.Windows.Ink.DrawingAttributes" />-Eigenschaft ändert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyDataChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyDataChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyDataChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyDataChanged (e As PropertyDataChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyDataChanged(System::Windows::Ink::PropertyDataChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyDataChanged : System.Windows.Ink.PropertyDataChangedEventArgs -&gt; unit&#xA;override this.OnPropertyDataChanged : System.Windows.Ink.PropertyDataChangedEventArgs -&gt; unit" Usage="drawingAttributes.OnPropertyDataChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen.  
  
 Mit der <xref:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Beim Überschreiben von <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> rufen Sie in einer abgeleiteten Klasse die <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> Methode für die Basisklasse, um sicherzustellen, dass registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (first As DrawingAttributes, second As DrawingAttributes) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Ink::DrawingAttributes ^ first, System::Windows::Ink::DrawingAttributes ^ second);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Ink.DrawingAttributes * System.Windows.Ink.DrawingAttributes -&gt; bool" Usage="first = second" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">Das erste zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <param name="second">Das zweite zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <summary>Bestimmt, ob die angegebenen <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekte gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte sind gleich, wenn die folgenden Eigenschaften gleich sind:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  Die <xref:System.Windows.Ink.DrawingAttributes.op_Equality%2A> Methode überprüft nicht die benutzerdefinierten Eigenschaften hinsichtlich ihrer Gleichheit.  
  
 Die entsprechende Methode für diesen Operator <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 Im folgende Beispiel werden zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte auf Gleichheit. Da die <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, und <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaften `attributes1` und `attributes2` festgelegt auf die gleichen Werte, die Meldung "Die Zeichnungsattribute sind gleich" angezeigt wird.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#11](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#11)]
[!code-vb[DrawingAttributes#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (first As DrawingAttributes, second As DrawingAttributes) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Ink::DrawingAttributes ^ first, System::Windows::Ink::DrawingAttributes ^ second);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Ink.DrawingAttributes * System.Windows.Ink.DrawingAttributes -&gt; bool" Usage="System.Windows.Ink.DrawingAttributes.op_Inequality (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">Das erste zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <param name="second">Das zweite zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <summary>Bestimmt, ob die angegebenen <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekte ungleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Objekte ungleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte sind nicht gleich, wenn die folgenden Eigenschaften nicht gleich sind:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  Die <xref:System.Windows.Ink.DrawingAttributes.op_Inequality%2A> Methode überprüft nicht die benutzerdefinierten Eigenschaften hinsichtlich ihrer Gleichheit.  
  
 Die entsprechende Methode für diesen Operator ist, das die Negation des <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 Im folgende Beispiel werden zwei <xref:System.Windows.Ink.DrawingAttributes> -Objekte auf Ungleichheit. Da die <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, und <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaften `attributes1` und `attributes2` festgelegt auf die gleichen Werte, die Meldung "Die Zeichnungsattribute sind gleich" angezeigt wird.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#13](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#13)]
[!code-vb[DrawingAttributes#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDataChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyDataChanged As PropertyDataChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Ink::PropertyDataChangedEventHandler ^ PropertyDataChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyDataChanged : System.Windows.Ink.PropertyDataChangedEventHandler " Usage="member this.PropertyDataChanged : System.Windows.Ink.PropertyDataChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der <see cref="T:System.Windows.Ink.StrokeCollection" /> benutzerdefinierte Eigenschaftendaten hinzugefügt oder aus dieser entfernt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel ist Teil einer benutzerdefinierten Strich, der einen dreidimensionalen Effekt zeichnen können. Der Strich definiert und speichert eine benutzerdefinierte Eigenschaft namens `Shadowed`, gehört der <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>. Wenn die `Shadowed` eigenschaftsänderungen, die <xref:System.Windows.Ink.DrawingAttributes.PropertyDataChanged> -Ereignishandler ruft die <xref:System.Windows.Ink.Stroke.OnInvalidated%2A> -Methode, die zu zeichnenden Strichs bewirkt, dass.  
  
 [!code-csharp[StrokeCollectionShadow#1](~/samples/snippets/csharp/VS_Snippets_Wpf/StrokeCollectionShadow/CSharp/CustomRenderedStroke.cs#1)]
 [!code-vb[StrokeCollectionShadow#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StrokeCollectionShadow/VisualBasic/CustomRenderedStroke.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyData">
      <MemberSignature Language="C#" Value="public void RemovePropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemovePropertyData (propertyDataId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemovePropertyData(Guid propertyDataId);" />
      <MemberSignature Language="F#" Value="member this.RemovePropertyData : Guid -&gt; unit" Usage="drawingAttributes.RemovePropertyData propertyDataId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" />, die der zu entfernenden benutzerdefinierten Eigenschaft zugeordnet ist.</param>
        <summary>Entfernt die benutzerdefinierte Eigenschaft, die der angegebenen <see cref="T:System.Guid" /> zugeordnet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie So entfernen Sie eine benutzerdefinierte Eigenschaft aus einem <xref:System.Windows.Ink.DrawingAttributes> Objekt.  
  
 [!code-csharp[DrawingAttributes#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#9)]
 [!code-vb[DrawingAttributes#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" /> ist keiner benutzerdefinierten Eigenschaft des <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekts zugeordnet.</exception>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="StylusTip">
      <MemberSignature Language="C#" Value="public System.Windows.Ink.StylusTip StylusTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Ink.StylusTip StylusTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberSignature Language="VB.NET" Value="Public Property StylusTip As StylusTip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Ink::StylusTip StylusTip { System::Windows::Ink::StylusTip get(); void set(System::Windows::Ink::StylusTip value); };" />
      <MemberSignature Language="F#" Value="member this.StylusTip : System.Windows.Ink.StylusTip with get, set" Usage="System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.StylusTip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Form des Tablettstifts ab, die zum Zeichnen des <see cref="T:System.Windows.Ink.Stroke" /> verwendet wird, oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Windows.Ink.StylusShape" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_StylusTip"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusTipTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Matrix StylusTipTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix StylusTipTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property StylusTipTransform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Matrix StylusTipTransform { System::Windows::Media::Matrix get(); void set(System::Windows::Media::Matrix value); };" />
      <MemberSignature Language="F#" Value="member this.StylusTipTransform : System.Windows.Media.Matrix with get, set" Usage="System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Media.Matrix" /> ab oder legt diese fest, die die Transformation angibt, die für die Tablettstiftspitze ausgeführt werden soll.</summary>
        <value>Eine <see cref="T:System.Windows.Media.Matrix" />, die die Transformation angibt, die für die Tablettstiftspitze ausgeführt werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> Eigenschaft drehen, neigen oder die Tablettstiftspitze zu skalieren.  
  
<a name="xamlTextUsage_StylusTipTransform"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die auf <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> festgelegte Matrix ist keine invertierbare Matrix.  
  
- oder -  
Die <see cref="P:System.Windows.Media.Matrix.OffsetX" />-Eigenschaft oder die <see cref="P:System.Windows.Media.Matrix.OffsetY" />-Eigenschaft der Matrix ist nicht 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <MemberSignature Language="C#" Value="event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.System#ComponentModel#INotifyPropertyChanged#PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.Ink.DrawingAttributes.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite des Tablettstifts ab, die zum Zeichnen des <see cref="T:System.Windows.Ink.Stroke" /> verwendet wird, oder legt diese fest.</summary>
        <value>Die Breite des Tablettstifts, die zum Zeichnen des <see cref="T:System.Windows.Ink.Stroke" /> verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgenden Faktoren beeinflussen die Höhe und Breite des eine <xref:System.Windows.Ink.Stroke> beim Rendern, aber nicht den Wert von der <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft.  
  
-   Die Menge des Drucks auf den Tablettstift, der bei der <xref:System.Windows.Ink.Stroke> gezeichnet wird.  
  
-   Der Wert der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>-Eigenschaft.  
  
 Setzen Sie die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft auf 0 geräteunabhängige Pixel (DIP), wird es in 2-DIP-Adresse geändert.  
  
<a name="xamlTextUsage_Width"></a>   
## <a name="xaml-text-usage"></a>XAML-Text-Nutzung  
 Diese Eigenschaft wird nicht in der Regel in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass Ihre Anwendung eine <xref:System.Windows.Controls.InkCanvas> namens `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter den <xref:System.Windows.Ink.DrawingAttributes> Übersicht über die Klasse.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />-Eigenschaft ist kleiner als <see cref="F:System.Double.Epsilon" /> oder <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
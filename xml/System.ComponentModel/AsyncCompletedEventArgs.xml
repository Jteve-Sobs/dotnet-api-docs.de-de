<Type Name="AsyncCompletedEventArgs" FullName="System.ComponentModel.AsyncCompletedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ebb4d3fb0dafb991d8bb54596968710aaa5b1bd0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37694940" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsyncCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type AsyncCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ea99c-101">Provides data for the *MethodName*<see langword="Completed" /> event.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ea99c-101">Provides data for the *MethodName*<see langword="Completed" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea99c-102">Bei Verwendung eine Klasse, die implementiert die [Übersicht über ereignisbasierte asynchrone Muster](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), die Klasse stellt eine *MethodName* `Completed` Ereignis.</span><span class="sxs-lookup"><span data-stu-id="ea99c-102">If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event.</span></span> <span data-ttu-id="ea99c-103">Wenn Sie eine Instanz von Hinzufügen der <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> delegieren auf das Ereignis erhalten Sie Informationen über das Ergebnis des asynchronen Vorgängen in der <xref:System.ComponentModel.AsyncCompletedEventArgs> Parameter der entsprechenden Ereignishandler-Methode.</span><span class="sxs-lookup"><span data-stu-id="ea99c-103">If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.</span></span>  
  
 <span data-ttu-id="ea99c-104">Der Clientanwendung Ereignishandlerdelegaten sehen die <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Eigenschaft, um zu bestimmen, ob die asynchrone Aufgabe abgebrochen wurde.</span><span class="sxs-lookup"><span data-stu-id="ea99c-104">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.</span></span>  
  
 <span data-ttu-id="ea99c-105">Der Clientanwendung Ereignishandlerdelegaten sehen die <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> Eigenschaft, um zu bestimmen, ob während der Ausführung der asynchronen Aufgabe eine Ausnahme aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="ea99c-105">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.</span></span>  
  
 <span data-ttu-id="ea99c-106">Wenn die Klasse mehrere asynchrone Methoden oder mehrere Aufrufe derselben asynchronen Methode unterstützt, können Sie bestimmen, welche Aufgabe ausgelöst hat die *MethodName* `Completed` Ereignis anhand des Werts, der die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="ea99c-106">If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="ea99c-107">Muss Ihr Code zum Nachverfolgen dieser Tokens, die als Aufgaben-IDs bezeichnet werden, wie die zugehörigen asynchrone Aufgaben starten und abschließen.</span><span class="sxs-lookup"><span data-stu-id="ea99c-107">Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea99c-108">Das folgende Codebeispiel veranschaulicht die Verwendung einer <xref:System.ComponentModel.AsyncOperation> zum Nachverfolgen der Lebensdauer der asynchronen Vorgänge an.</span><span class="sxs-lookup"><span data-stu-id="ea99c-108">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="ea99c-109">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> Klasse.</span><span class="sxs-lookup"><span data-stu-id="ea99c-109">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="ea99c-110">
        <para>Klassen, die das ereignisbasierte asynchrone Muster folgen, können Ereignisse an alert Clients über den Status ausstehender asynchroner Vorgänge auslösen. Wenn die Klasse bietet eine * MethodName *<see langword="Completed" /> Ereignis können Sie die <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> Clients über das Ergebnis der asynchronen Vorgänge informieren.  Sie möchten möglicherweise für die Kommunikation mit Clients mehr Informationen über das Ergebnis eines asynchronen Vorgangs als ein <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> verfügt. In diesem Fall können Sie eine eigene Klasse von Ableiten der <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> Klasse, und geben Sie zusätzliche private Instanzvariablen und entsprechende schreibgeschützte öffentliche Eigenschaften. Rufen Sie die <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> Methode vor der Rückgabe den Wert der Eigenschaft, falls der Vorgang wurde abgebrochen, oder ein Fehler aufgetreten ist.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="ea99c-110">
          <para>Classes that follow the Event-based Asynchronous Pattern can raise events to alert clients about the status of pending asynchronous operations. If the class provides a *MethodName*<see langword="Completed" /> event, you can use the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> to tell clients about the outcome of asynchronous operations.  You may want to communicate to clients more information about the outcome of an asynchronous operation than an <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> accommodates. In this case, you can derive your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class and provide additional private instance variables and corresponding read-only public properties. Call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value, in case the operation was canceled or an error occurred.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ea99c-111">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-111">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ea99c-112">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-112">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception error, bool cancelled, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (error As Exception, cancelled As Boolean, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs(Exception ^ error, bool cancelled, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.AsyncCompletedEventArgs : Exception * bool * obj -&gt; System.ComponentModel.AsyncCompletedEventArgs" Usage="new System.ComponentModel.AsyncCompletedEventArgs (error, cancelled, userState)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
        <Parameter Name="cancelled" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="error">
          <span data-ttu-id="ea99c-113">Any error that occurred during the asynchronous operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-113">Any error that occurred during the asynchronous operation.</span>
          </span>
        </param>
        <param name="cancelled">
          <span data-ttu-id="ea99c-114">A value indicating whether the asynchronous operation was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-114">A value indicating whether the asynchronous operation was canceled.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="ea99c-115">The optional user-supplied state object passed to the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-115">The optional user-supplied state object passed to the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea99c-116">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-116">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public bool Cancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancelled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Cancelled : bool" Usage="System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea99c-117">Gets a value indicating whether an asynchronous operation has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-117">Gets a value indicating whether an asynchronous operation has been canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ea99c-118">
            <see langword="true" /> Wenn der Hintergrundvorgang abgebrochen wurde; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-118">
              <see langword="true" /> if the background operation has been canceled; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ea99c-119">Die Standardeinstellung ist <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-119">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea99c-120">Wenn die <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Eigenschaft `true`, der asynchrone Vorgang wurde unterbrochen.</span><span class="sxs-lookup"><span data-stu-id="ea99c-120">When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted.</span></span>  
  
 <span data-ttu-id="ea99c-121">Ereignishandlerdelegaten für die Client-Anwendung sollte überprüfen die <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Eigenschaft, bevor Sie Zugriff auf Eigenschaften in einer Klasse abgeleitet <xref:System.ComponentModel.AsyncCompletedEventArgs>ist, andernfalls löst die Eigenschaft eine <xref:System.InvalidOperationException> , wenn der asynchrone Vorgang war unterbrochen.</span><span class="sxs-lookup"><span data-stu-id="ea99c-121">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea99c-122">Im folgenden Codebeispiel wird veranschaulicht, die mit einem <xref:System.ComponentModel.AsyncOperation> zum Nachverfolgen der Lebensdauer der asynchronen Vorgänge an.</span><span class="sxs-lookup"><span data-stu-id="ea99c-122">The following code example demonstrates the using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="ea99c-123">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> Klasse.</span><span class="sxs-lookup"><span data-stu-id="ea99c-123">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ea99c-124">
            <para>Wenn Sie die schreibgeschützten Eigenschaften in einer abgeleiteten Klasse angeben, müssen Sie unbedingt Aufrufen der <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> Methode. Dadurch wird verhindert, dass Clients den Zugriff auf Eigenschaften, die möglicherweise nicht aufgrund eines Fehlers bei der asynchrone Vorgang gültig sind.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-124">
              <para>If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method. This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Exception Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Error" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Error As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Error { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : Exception" Usage="System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea99c-125">Gets a value indicating which error occurred during an asynchronous operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-125">Gets a value indicating which error occurred during an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ea99c-126">Ein <see cref="T:System.Exception" /> Instanz, wenn während eines asynchronen Vorgangs ein Fehler aufgetreten ist andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-126">An <see cref="T:System.Exception" /> instance, if an error occurred during an asynchronous operation; otherwise <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea99c-127">Wenn eine Ausnahme während einer asynchronen Operation ausgelöst wird, weist die Klasse die Ausnahme, die <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="ea99c-127">If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property.</span></span> <span data-ttu-id="ea99c-128">Ereignishandlerdelegaten für die Client-Anwendung sollte überprüfen die <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> Eigenschaft, bevor Sie Zugriff auf Eigenschaften in einer Klasse abgeleitet <xref:System.ComponentModel.AsyncCompletedEventArgs>ist, andernfalls löst die Eigenschaft eine <xref:System.Reflection.TargetInvocationException> mit seiner <xref:System.Exception.InnerException%2A> Eigenschaft enthalten eine Ein Verweis auf <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.</span><span class="sxs-lookup"><span data-stu-id="ea99c-128">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.</span></span>  
  
 <span data-ttu-id="ea99c-129">Der Wert des der <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> Eigenschaft `null` , wenn der Vorgang abgebrochen wurde.</span><span class="sxs-lookup"><span data-stu-id="ea99c-129">The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea99c-130">Das folgende Codebeispiel veranschaulicht die Verwendung einer <xref:System.ComponentModel.AsyncOperation> zum Nachverfolgen der Lebensdauer der asynchronen Vorgänge an.</span><span class="sxs-lookup"><span data-stu-id="ea99c-130">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="ea99c-131">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> Klasse.</span><span class="sxs-lookup"><span data-stu-id="ea99c-131">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ea99c-132">
            <para>Wenn Sie die schreibgeschützten Eigenschaften in einer abgeleiteten Klasse angeben, müssen Sie unbedingt Aufrufen der <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> -Methode in der Implementierung. Dadurch wird verhindert, dass Clients den Zugriff auf Eigenschaften, die möglicherweise nicht aufgrund eines Fehlers bei der asynchrone Vorgang gültig sind.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-132">
              <para>If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method in your property implementation. This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="RaiseExceptionIfNecessary">
      <MemberSignature Language="C#" Value="protected void RaiseExceptionIfNecessary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseExceptionIfNecessary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseExceptionIfNecessary ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseExceptionIfNecessary();" />
      <MemberSignature Language="F#" Value="member this.RaiseExceptionIfNecessary : unit -&gt; unit" Usage="asyncCompletedEventArgs.RaiseExceptionIfNecessary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ea99c-133">Raises a user-supplied exception if an asynchronous operation failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-133">Raises a user-supplied exception if an asynchronous operation failed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ea99c-134">Das folgende Codebeispiel veranschaulicht die Verwendung <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> Eigenschaften der Klasse abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="ea99c-134">The following code example demonstrates using <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> in derived class properties.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#6)]
[!code-vb[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ea99c-135">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-135">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ea99c-136">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property has been set by the asynchronous operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-136">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property has been set by the asynchronous operation.</span>
          </span>
          <span data-ttu-id="ea99c-137">The <see cref="P:System.Exception.InnerException" /> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-137">The <see cref="P:System.Exception.InnerException" /> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="ea99c-138">
            <para>Wenn Sie eine eigene Klasse von abgeleitet haben die <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> -Klasse, die schreibgeschützten Eigenschaften sollten Aufrufen der <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> Methode vor der Rückgabe den Wert der Eigenschaft. Wenn die von der Komponente asynchrone weist Worker-Code eine Ausnahme der <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> -Eigenschaft, oder legt ihn fest der <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> Eigenschaft <see langword="true" />, die Eigenschaft wird eine Ausnahme ausgelöst, wenn ein Client versucht, dessen Wert zu lesen. Dadurch wird verhindert, dass Clients den Zugriff auf Eigenschaften, die möglicherweise nicht aufgrund eines Fehlers bei der asynchrone Vorgang gültig sind.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-138">
              <para>If you have derived your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class, your read-only properties should call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value. If the component's asynchronous worker code assigns an exception to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property or sets the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property to <see langword="true" />, the property will raise an exception if a client tries to read its value. This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="UserState">
      <MemberSignature Language="C#" Value="public object UserState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserState : obj" Usage="System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea99c-139">Gets the unique identifier for the asynchronous task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-139">Gets the unique identifier for the asynchronous task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ea99c-140">Ein Objektverweis, der die asynchrone Aufgabe eindeutig identifiziert werden kann; andernfalls <see langword="null" /> Wenn kein Wert festgelegt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea99c-140">An object reference that uniquely identifies the asynchronous task; otherwise, <see langword="null" /> if no value has been set.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea99c-141">Wenn eine Klasse mehrere asynchrone Methoden oder mehrere Aufrufe einer einzigen Methode unterstützt, können Sie bestimmen, welche Aufgabe ausgelöst hat die *MethodName* `Completed` Ereignis anhand des Werts, der die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="ea99c-141">If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="ea99c-142">Ihr Code verfolgt müssen diese Token, die als Aufgaben-IDs bezeichnet werden, wie die zugehörigen asynchrone Aufgaben starten und abschließen.</span><span class="sxs-lookup"><span data-stu-id="ea99c-142">Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
 <span data-ttu-id="ea99c-143">Der Wert dieser Eigenschaft wird während der ursprüngliche Aufruf der asynchronen Methode festgelegt, die die Aufgabe gestartet.</span><span class="sxs-lookup"><span data-stu-id="ea99c-143">The value of this property is set during the original call to the asynchronous method that started the task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea99c-144">Das folgende Codebeispiel veranschaulicht die Verwendung einer <xref:System.ComponentModel.AsyncOperation> zum Nachverfolgen der Lebensdauer der asynchronen Vorgänge an.</span><span class="sxs-lookup"><span data-stu-id="ea99c-144">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="ea99c-145">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> Klasse.</span><span class="sxs-lookup"><span data-stu-id="ea99c-145">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
  </Members>
</Type>
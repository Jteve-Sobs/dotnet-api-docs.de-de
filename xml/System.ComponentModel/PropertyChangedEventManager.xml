<Type Name="PropertyChangedEventManager" FullName="System.ComponentModel.PropertyChangedEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40b3fff48a14b1489ca74bdcdf7e3617bf883247" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82411441" /></Metadata><TypeSignature Language="C#" Value="public class PropertyChangedEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyChangedEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.PropertyChangedEventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyChangedEventManager&#xA;Inherits WeakEventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyChangedEventManager : System::Windows::WeakEventManager" />
  <TypeSignature Language="F#" Value="type PropertyChangedEventManager = class&#xA;    inherit WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine <see cref="T:System.Windows.WeakEventManager" />-Implementierung bereit, damit Sie mit dem Muster für "schwache Ereignislistener" Listener für das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis anfügen können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um Listener in diesem Muster zu sein, müssen die Listenerobjekte <xref:System.Windows.IWeakEventListener>implementieren. Sie müssen <xref:System.Windows.IWeakEventListener> für die Klasse, die die Quelle der Ereignisse ist, nicht implementieren.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddHandler (source As INotifyPropertyChanged, handler As EventHandler(Of PropertyChangedEventArgs), propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddHandler(System::ComponentModel::INotifyPropertyChanged ^ source, EventHandler&lt;System::ComponentModel::PropertyChangedEventArgs ^&gt; ^ handler, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member AddHandler : System.ComponentModel.INotifyPropertyChanged * EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.AddHandler (source, handler, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="propertyName" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, das das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis auslöst.</param>
        <param name="handler">Der Delegat. der das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis behandelt.</param>
        <param name="propertyName">Der Name der für <paramref name="source" /> vorhandenen Eigenschaft, die auf Änderungen überwacht werden soll. Legen Sie diese auf <see cref="F:System.String.Empty" /> fest, um eine "beliebige Eigenschaft" anzugeben.</param>
        <summary>Fügt den angegebenen Ereignishandler hinzu, der aufgerufen wird, wenn die angegebene Quelle das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis für die angegebene Eigenschaft auslöst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um den Ereignishandler anzugeben, den Sie zum Abonnieren des <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Ereignisses verwenden möchten. Wenn Sie diese Methode verwenden, muss das Listener-Objekt die <xref:System.Windows.IWeakEventListener>-Schnittstelle nicht implementieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handler" /> ist <see langword="null" /></exception>
        <exception cref="T:System.NotSupportedException">Mehr als eine Methode wird dem <paramref name="handler" /> zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddListener (source As INotifyPropertyChanged, listener As IWeakEventListener, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddListener(System::ComponentModel::INotifyPropertyChanged ^ source, System::Windows::IWeakEventListener ^ listener, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member AddListener : System.ComponentModel.INotifyPropertyChanged * System.Windows.IWeakEventListener * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.AddListener (source, listener, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt mit dem Ereignis.</param>
        <param name="listener">Das Objekt, das als Listener hinzugefügt werden soll.</param>
        <param name="propertyName">Der Name der für <paramref name="source" /> vorhandenen Eigenschaft, die auf Änderungen überwacht werden soll. Legen Sie diese auf <see cref="F:System.String.Empty" /> fest, um eine "beliebige Eigenschaft" anzugeben.</param>
        <summary>Fügt den angegebenen Listener der Liste von Listenern in der angegebenen Quelle hinzu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="propertyChangedEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues Objekt zurück, mit dem Listener zu dem <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis hinzugefügt werden.</summary>
        <returns>Ein neues Objekt, mit dem Listener zum <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis hinzugefügt werden.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected override bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="override this.Purge : obj * obj * bool -&gt; bool" Usage="propertyChangedEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">Quellobjekt, aus dem alle Listener entfernt werden sollen.</param>
        <param name="data">Die zu bereinigenden Daten. Erwartet wird ein <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
        <param name="purgeAll">Legen Sie dies auf <see langword="true" />, um das Überwachen zu beenden und alle Daten vollständig zu entfernen.</param>
        <summary>Entfernt nicht mehr aktive Listener aus den Daten für die bereitgestellte Quelle.</summary>
        <returns><see langword="true" />, wenn einige Einträge entfernt wurden, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveHandler (source As INotifyPropertyChanged, handler As EventHandler(Of PropertyChangedEventArgs), propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveHandler(System::ComponentModel::INotifyPropertyChanged ^ source, EventHandler&lt;System::ComponentModel::PropertyChangedEventArgs ^&gt; ^ handler, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member RemoveHandler : System.ComponentModel.INotifyPropertyChanged * EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.RemoveHandler (source, handler, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="propertyName" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, das das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis auslöst.</param>
        <param name="handler">Der Delegat. der das <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignis behandelt.</param>
        <param name="propertyName">Der Name der für <paramref name="source" /> vorhandenen Eigenschaft, die nicht mehr auf Änderungen überwacht werden soll. Legen Sie diese auf <see cref="F:System.String.Empty" /> fest, um eine "beliebige Eigenschaft" anzugeben.</param>
        <summary>Entfernt den angegebenen Ereignishandler aus der angegebenen Quelle.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handler" /> ist <see langword="null" /></exception>
        <exception cref="T:System.NotSupportedException">Mehr als eine Methode wird dem <paramref name="handler" /> zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveListener (source As INotifyPropertyChanged, listener As IWeakEventListener, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveListener(System::ComponentModel::INotifyPropertyChanged ^ source, System::Windows::IWeakEventListener ^ listener, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member RemoveListener : System.ComponentModel.INotifyPropertyChanged * System.Windows.IWeakEventListener * string -&gt; unit" Usage="System.ComponentModel.PropertyChangedEventManager.RemoveListener (source, listener, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt, aus dem der Listener entfernt werden soll.</param>
        <param name="listener">Der zu entfernende Listener.</param>
        <param name="propertyName">Der Name der für <paramref name="source" /> vorhandenen Eigenschaft, die nicht mehr auf Änderungen überwacht werden soll. Legen Sie diese auf <see cref="F:System.String.Empty" /> fest, um eine "beliebige Eigenschaft" anzugeben.</param>
        <summary>Entfernt den angegebenen Listener aus der Liste der Listener in der bereitgestellten Quelle.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StartListening : obj -&gt; unit" Usage="propertyChangedEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt, für das die Überwachung von <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> gestartet werden soll.</param>
        <summary>Beginnt die Überwachung des <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignisses für die bereitgestellte Quelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dadurch wird keine Eigenschaft angegeben. Nachdem der Ereignis-Manager gestartet wurde, wird für alle Eigenschaften der Quelle <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Benachrichtigung aktiviert.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.StopListening : obj -&gt; unit" Usage="propertyChangedEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, für das die Überwachung von <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> beendet werden soll.</param>
        <summary>Beendet die Überwachung des <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />-Ereignisses für die bereitgestellte Quelle.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
  </Members>
</Type>

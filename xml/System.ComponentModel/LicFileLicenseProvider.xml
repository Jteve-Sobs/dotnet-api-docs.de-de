<Type Name="LicFileLicenseProvider" FullName="System.ComponentModel.LicFileLicenseProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="895d13dfe6e02ce781fa4d84753d807e3b03eaf7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37691719" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LicFileLicenseProvider extends System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicFileLicenseProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LicFileLicenseProvider&#xA;Inherits LicenseProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicFileLicenseProvider : System::ComponentModel::LicenseProvider" />
  <TypeSignature Language="F#" Value="type LicFileLicenseProvider = class&#xA;    inherit LicenseProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.LicenseProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="38609-101">Stellt eine Implementierung eines <see cref="T:System.ComponentModel.LicenseProvider" /> bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="38609-101">Provides an implementation of a <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      </span>
      <span data-ttu-id="38609-102">Die Funktionsweise des Lizenzgebers weist große Ähnlichkeit mit der des Standardlizenzierungsmodells von Microsoft .NET Framework auf.</span>
      <span class="sxs-lookup">
        <span data-stu-id="38609-102">The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38609-103">Die <xref:System.ComponentModel.LicFileLicenseProvider> bietet <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> und <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="38609-103">The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods.</span></span> <span data-ttu-id="38609-104">Die <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methode bestimmt, ob die <xref:System.ComponentModel.License.LicenseKey%2A> abgerufen, indem die <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> Methode gültig ist.</span><span class="sxs-lookup"><span data-stu-id="38609-104">The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid.</span></span> <span data-ttu-id="38609-105">Wenn Sie von dieser Klasse erben, können Sie überschreiben die <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methode, um Ihre eigene Validierungslogik bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="38609-105">When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.</span></span>  
  
 <span data-ttu-id="38609-106">Diese Klasse vorhanden ist, um ähnliche Funktionalität wie Lizenzierung COM-Lizenzierung bereitzustellen und Textdateien-Lizenz verwendet.</span><span class="sxs-lookup"><span data-stu-id="38609-106">This class exists to provide similar licensing functionality to COM licensing and uses text license files.</span></span>  
  
 <span data-ttu-id="38609-107">Weitere Informationen zur Lizenzierung finden Sie unter [Vorgehensweise: Lizenz-Komponenten und Steuerelementen](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span><span class="sxs-lookup"><span data-stu-id="38609-107">For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38609-108">Das folgende Beispiel erstellt ein lizenziertes Steuerelement mithilfe der <xref:System.ComponentModel.LicenseManager.Validate%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="38609-108">The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="38609-109">Er verwendet <xref:System.ComponentModel.LicFileLicenseProvider> für die Lizenz-Manager.</span><span class="sxs-lookup"><span data-stu-id="38609-109">It uses <xref:System.ComponentModel.LicFileLicenseProvider> for the license manager.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseManager" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LicFileLicenseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LicFileLicenseProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="38609-110">Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicFileLicenseProvider" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-110">Initializes a new instance of the <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="protected virtual string GetKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetKey(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetKey : Type -&gt; string&#xA;override this.GetKey : Type -&gt; string" Usage="licFileLicenseProvider.GetKey type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="38609-111">Der Objekttyp, der den Schlüssel zurückgeben soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-111">The object type to return the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38609-112">Gibt einen Schlüssel für den angegebenen Typ zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-112">Returns a key for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38609-113">Eine Bestätigung, dass der <paramref name="type" />-Parameter lizenziert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-113">A confirmation that the <paramref name="type" /> parameter is licensed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetLicense">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.License GetLicense(class System.ComponentModel.LicenseContext context, class System.Type type, object instance, bool allowExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::License ^ GetLicense(System::ComponentModel::LicenseContext ^ context, Type ^ type, System::Object ^ instance, bool allowExceptions);" />
      <MemberSignature Language="F#" Value="override this.GetLicense : System.ComponentModel.LicenseContext * Type * obj * bool -&gt; System.ComponentModel.License" Usage="licFileLicenseProvider.GetLicense (context, type, instance, allowExceptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="allowExceptions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="38609-114">Ein <see cref="T:System.ComponentModel.LicenseContext" />, der angibt, wo Sie das lizenzierte Objekt verwenden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-114">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="38609-115">Ein <see cref="T:System.Type" />, der die Komponente darstellt, die die <see cref="T:System.ComponentModel.License" /> anfordert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-115">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="38609-116">Ein Objekt, das die <see cref="T:System.ComponentModel.License" /> anfordert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-116">An object that requests the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <param name="allowExceptions">
          <span data-ttu-id="38609-117">
            <see langword="true" />, wenn eine <see cref="T:System.ComponentModel.LicenseException" /> ausgelöst werden soll, sobald einer Komponente keine Lizenz erteilt werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-117">
              <see langword="true" /> if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when a component cannot be granted a license; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38609-118">Gibt eine ggf. verfügbare Lizenz für die Instanz der Komponente zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-118">Returns a license for the instance of the component, if one is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38609-119">Ein gültiges <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-119">A valid <see cref="T:System.ComponentModel.License" />.</span>
          </span>
          <span data-ttu-id="38609-120">Wenn diese Methode keine gültige <see cref="T:System.ComponentModel.License" /> oder keinen gültigen <paramref name="context" />-Parameter findet, wird <see langword="null" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-120">If this method cannot find a valid <see cref="T:System.ComponentModel.License" /> or a valid <paramref name="context" /> parameter, it returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38609-121">Zur Entwurfszeit die <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> Methode sucht nach einer Lizenzdatei namens `myClassName.LIC`, wobei `myClassName` ist die <xref:System.Type.FullName%2A> des zu erstellenden Komponente.</span><span class="sxs-lookup"><span data-stu-id="38609-121">At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create.</span></span> <span data-ttu-id="38609-122">Diese Datei muss sich im selben Verzeichnis wie die DLL-Datei, die die Komponente enthält.</span><span class="sxs-lookup"><span data-stu-id="38609-122">This file must be in the same directory as the .dll file that contains the component.</span></span>  
  
 <span data-ttu-id="38609-123">Diese Methode überprüft als Nächstes die erste Zeile der Lizenzdatei für einen Schlüssel im angegebenen die <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="38609-123">Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method.</span></span> <span data-ttu-id="38609-124">Wenn der Schlüssel gültig ist, wird diese Zeile als verwendet die <xref:System.ComponentModel.License.LicenseKey%2A>.</span><span class="sxs-lookup"><span data-stu-id="38609-124">If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyValid">
      <MemberSignature Language="C#" Value="protected virtual bool IsKeyValid (string key, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsKeyValid(string key, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsKeyValid(System::String ^ key, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsKeyValid : string * Type -&gt; bool&#xA;override this.IsKeyValid : string * Type -&gt; bool" Usage="licFileLicenseProvider.IsKeyValid (key, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="38609-125">Der zu überprüfende <see cref="P:System.ComponentModel.License.LicenseKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-125">The <see cref="P:System.ComponentModel.License.LicenseKey" /> to check.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="38609-126">Ein <see cref="T:System.Type" />, der die Komponente darstellt, die die <see cref="T:System.ComponentModel.License" /> anfordert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-126">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38609-127">Bestimmt, ob der durch die <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />-Methode abgerufene Schlüssel für den angegebenen Typ gültig ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-127">Determines whether the key that the <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> method retrieves is valid for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38609-128">
            <see langword="true" />, wenn der Schlüssel ein gültiger <see cref="P:System.ComponentModel.License.LicenseKey" /> für den angegebenen Typ ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-128">
              <see langword="true" /> if the key is a valid <see cref="P:System.ComponentModel.License.LicenseKey" /> for the specified type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38609-129">Diese Methode überprüft die Schlüssel auf den Ausdruck: " `myClassName is a licensed component.` ", wobei `myClassName` ist die <xref:System.Type.FullName%2A> der Komponente erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="38609-129">This method checks the key against the phrase: " `myClassName is a licensed component.` ", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="38609-130">
            <para>Wenn Sie von dieser Klasse erben, können Sie diese Methode, um Ihre eigene Validierungslogik bereitstellen überschreiben.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="38609-130">
              <para>When you inherit from this class, you can override this method to provide your own validation logic.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>
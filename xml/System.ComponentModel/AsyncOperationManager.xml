<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d537a631acc29e0b6705fa138904ba2710465dff" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86776887" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Nebenläufigkeitsverwaltung für Klassen bereit, die asynchrone Methodenaufrufe unterstützen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Ihre Klasse ein asynchrones Verhalten gemäß der [Übersicht über das ereignisbasierte asynchrone Muster](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview)bereitstellen muss, treten einige Probleme bei der Parallelitäts Verwaltung auf. Unter diesen Voraussetzungen muss sichergestellt werden, dass Ereignishandler in einem Thread oder Kontext aufgerufen werden, der für das Anwendungsmodell geeignet ist (z. b. Windows Forms Anwendungen, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] Anwendungen, Konsolen Anwendungen usw.). <xref:System.ComponentModel.AsyncOperationManager>Bietet eine bequeme Möglichkeit zum Erstellen einer Klasse, die unter allen Anwendungs Modellen, die von unterstützt werden, ordnungsgemäß ausgeführt wird [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] .  
  
 Die- <xref:System.ComponentModel.AsyncOperationManager> Klasse verfügt über eine Methode, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> , die eine zurückgibt, die <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> verwendet werden kann, um die Dauer einer bestimmten asynchronen Aufgabe zu verfolgen. Die <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> für eine Aufgabe kann verwendet werden, um Clients zu warnen, wenn eine Aufgabe abgeschlossen ist. Sie kann auch verwendet werden, um Statusaktualisierungen und inkrementelle Ergebnisse zu veröffentlichen, ohne den Vorgang zu beenden.  
  
 Weitere Informationen zum Implementieren von asynchronen Klassen finden Sie unter [Implementieren des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.ComponentModel.AsyncOperationManager> Klasse zum Erstellen einer Klasse veranschaulicht, die asynchrone Vorgänge für ein beliebiges Anwendungsmodell unterstützt. Es zeigt, wie eine Klasse implementiert wird, die eine Zahl testet, um zu bestimmen, ob Sie eine Primzahl ist. Diese Berechnung kann zeitaufwändig sein, sodass Sie in einem separaten Thread erfolgt. Fortschrittsberichte, inkrementelle Ergebnisse und Abschluss Benachrichtigungen werden von der- <xref:System.ComponentModel.AsyncOperation> Klasse behandelt, wodurch sichergestellt wird, dass die Ereignishandler des Clients im richtigen Thread oder Kontext aufgerufen werden.  
  
 Eine vollständige Code Auflistung finden Sie unter Gewusst [wie: Implementieren einer Komponente, die das ereignisbasierte asynchrone Muster unterstützt](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Eine vollständige Code Auflistung eines Client Formulars finden Sie unter Gewusst [wie: Implementieren eines Clients des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern">Implementieren des ereignisbasierten asynchronen Entwurfsmusters</related>
    <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">Empfohlene Vorgehensweise für das verwaltete Threading</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object? userSuppliedState);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Ein Objekt, das dazu verwendet wird, einem bestimmten asynchronen Vorgang einen Bestandteil des Clientzustands, z. B. eine Aufgaben-ID, zuzuordnen.</param>
        <summary>Gibt für die Überwachung der Dauer eines bestimmten asynchronen Vorgangs eine <see cref="T:System.ComponentModel.AsyncOperation" /> zurück.</summary>
        <returns>Eine <see cref="T:System.ComponentModel.AsyncOperation" />, die Sie verwenden können, um die Dauer eines asynchronen Methodenaufrufs zu verfolgen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> -Methode gibt einen zurück <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , den Sie verwenden können, um die Dauer eines bestimmten asynchronen Vorgangs zu verfolgen und das Anwendungsmodell zu benachrichtigen, wenn der Vorgang abgeschlossen ist. Sie können Sie auch verwenden, um Statusaktualisierungen und inkrementelle Ergebnisse zu veröffentlichen, ohne den Vorgang zu beenden. Das <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> marshallt diese Aufrufe ordnungsgemäß in den entsprechenden Thread oder Kontext für das Anwendungsmodell.  
  
 Wenn Sie eine Klasse implementieren, die das ereignisbasierte asynchrone Muster unterstützt, sollte die Klasse <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> jedes Mal aufrufen, wenn Ihre *MethodName* - `Async` Methode aufgerufen wird. Die Client Anwendung, die Aufrufe an die-Methode ausführt, kann den- `userSuppliedState` Parameter verwenden, um jeden Aufruf eindeutig zu identifizieren, um Ereignisse zu unterscheiden, die während der Ausführung des asynchronen Vorgangs ausgelöst werden.  
  
> [!CAUTION]
>  Client Code muss einen eindeutigen Wert für den `userSuppliedState` Parameter angeben. Nicht eindeutige Aufgaben-IDs können dazu führen, dass Ihre Implementierung den Fortschritt und andere Ereignisse falsch meldet. Der Code sollte eine nicht eindeutige Aufgaben-ID überprüfen und eine auslösen, <xref:System.ArgumentException?displayProperty=nameWithType> Wenn eine solche ID erkannt wird.  
  
 Der Code sollte alle <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> von zurückgegebenen nachverfolgen <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> und das-Objekt im entsprechenden zugrunde liegenden asynchronen Vorgang verwenden, um Updates zu veröffentlichen und den Vorgang zu beenden. Diese Nachverfolgung kann so einfach sein wie das Übergeben von <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> als Parameter zwischen Delegaten. In anspruchsvolleren Entwürfen kann Ihre Klasse eine Auflistung von- <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Objekten verwalten und Objekte hinzufügen, wenn Tasks gestartet werden, und Sie entfernen, wenn Aufgaben abgeschlossen oder abgebrochen werden. Diese Vorgehensweise ermöglicht es Ihnen, auf eindeutige Parameterwerte zu überprüfen `userSuppliedState` , und ist die Methode, die Sie beim Arbeiten mit Klassen verwenden sollten, die mehrere gleichzeitige Aufrufe unterstützen.  
  
 Weitere Informationen zum Implementieren von asynchronen Klassen finden Sie unter [Implementieren des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Methode zum Erstellen eines <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> zum Nachverfolgen der Dauer von asynchronen Vorgängen veranschaulicht. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.ComponentModel.AsyncOperationManager> .  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern">Implementieren des ereignisbasierten asynchronen Entwurfsmusters</related>
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">Empfohlene Vorgehensweise für das verwaltete Threading</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Synchronisierungskontext für den asynchronen Vorgang ab oder legt diesen fest.</summary>
        <value>Der Synchronisierungskontext für den asynchronen Vorgang.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Implementierung ist die frei Thread Implementierung.  
  
 Ein Thread sollte die- <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> Eigenschaft auf festlegen, `null` um die frei Hand threadfactory freizugeben, wenn er abgeschlossen ist. andernfalls wird die zugehörige Factory nie verworfen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

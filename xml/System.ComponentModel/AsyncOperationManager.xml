<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0758038abe314d7edf4ae6dd21fb9aae6a993bd" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898422" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Parallelitätsverwaltung für Klassen bereit, die asynchrone Methodenaufrufe unterstützen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Ihre Klasse, um asynchrones Verhalten entsprechend bereitzustellen muss der [Übersicht über ereignisbasierte asynchrone Muster](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), wird eine Anzahl von Parallelitätsprobleme auftreten. Dazu gehört die Anforderung, um sicherzustellen, dass der Ereignishandler aufgerufen werden, auf einem Thread oder Kontext, der für das Anwendungsmodell geeignet ist (z. B. Windows Forms-Anwendungen [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] Anwendungen, konsolenanwendungen und So weiter). Die <xref:System.ComponentModel.AsyncOperationManager> bietet eine bequeme Möglichkeit zum Erstellen einer Klasse, die unter allen unterstützten von Anwendungsmodellen ordnungsgemäß ausgeführt werden kann die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 Die <xref:System.ComponentModel.AsyncOperationManager> -Klasse verfügt über eine Methode, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, gibt ein <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , die verwendet werden kann, um die Dauer eines bestimmten asynchronen Tasks nachzuverfolgen. Die <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> für eine Aufgabe Warnungs-Clients verwendet werden kann, wenn eine Aufgabe abgeschlossen ist. Sie können auch verwendet werden, um Statusupdates und inkrementelle Ergebnisse bereitstellen, ohne dass den Vorgang beendet.  
  
 Weitere Informationen zu asynchrone Klassen implementieren, finden Sie unter [Implementieren des ereignisbasierten asynchronen Entwurfsmusters](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.ComponentModel.AsyncOperationManager> Klasse, um eine Klasse erstellen, die asynchrone Vorgänge für jedem beliebigen Anwendungsmodell unterstützt. Es veranschaulicht das implementieren eine Klasse, die überprüft, eine Zahl ein, um zu bestimmen, ob sie eine Primzahl ist. Diese Berechnung kann zeitaufwendig sein, damit es in einem separaten Thread ausgeführt wird. Ausgeführte Berichte, inkrementelle Ergebnisse und abschlussbenachrichtigungen erfolgt durch die <xref:System.ComponentModel.AsyncOperation> -Klasse, die stellt sicher, dass die Ereignishandler des Clients auf den richtigen Thread oder Kontext aufgerufen werden.  
  
 Eine vollständige codeauflistung finden Sie unter [Vorgehensweise: Übersicht über ereignisbasierte asynchrone Muster](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Eine vollständige codeauflistung eines Client-Formulars, finden Sie unter [Vorgehensweise: Implementieren eines Clients des ereignisbasierten asynchronen Musters](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implementieren des ereignisbasierten asynchronen Entwurfsmusters</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Empfohlene Vorgehensweise für das verwaltete Threading</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Ein Objekt, das dazu verwendet wird, einem bestimmten asynchronen Vorgang einen Bestandteil des Clientzustands, z. B. eine Aufgaben-ID, zuzuordnen.</param>
        <summary>Gibt für die Überwachung der Dauer eines bestimmten asynchronen Vorgangs eine <see cref="T:System.ComponentModel.AsyncOperation" /> zurück.</summary>
        <returns>Eine <see cref="T:System.ComponentModel.AsyncOperation" />, die Sie verwenden können, um die Dauer eines asynchronen Methodenaufrufs zu verfolgen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Methode gibt ein <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , die Sie verwenden können, um die Dauer eines bestimmten asynchronen Vorgangs nachzuverfolgen und das Anwendungsmodell zu warnen, wenn der Vorgang abgeschlossen ist. Sie können es auch verwenden, um Statusupdates und inkrementelle Ergebnisse bereitstellen, ohne dass den Vorgang beendet. Die <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> marshallt diese Aufrufe an den entsprechenden Thread oder Kontext für das Anwendungsmodell ordnungsgemäß.  
  
 Wenn Sie eine Klasse, die das ereignisbasierte asynchrone Muster unterstützt implementieren, sollte Ihre Klasse nicht aufrufen <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> jedes Mal Ihre *MethodName* `Async` Methode wird aufgerufen. Die Clientanwendung, mit der Aufrufe der Methode, können die `userSuppliedState` Parameter zur eindeutigen Identifizierung von jedem Aufruf, um Ereignisse während der Ausführung des asynchronen Vorgangs zu unterscheiden.  
  
> [!CAUTION]
>  Geben Sie Clientcode muss einen eindeutigen Wert für die `userSuppliedState` Parameter. Nicht eindeutige Aufgaben-IDs kann dazu führen, dass Ihre Implementierung, um Fortschritt und andere Ereignisse nicht ordnungsgemäß zu melden. Der Code sollte für eine nicht eindeutige Aufgaben-ID überprüfen und löst eine <xref:System.ArgumentException?displayProperty=nameWithType> eine erkannt wird.  
  
 Der Code nachverfolgen muss jede <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> zurückgegebenes <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> und verwenden Sie das Objekt in den entsprechenden zugrunde liegenden asynchronen Vorgang zum Veröffentlichen von Updates, und beenden den Vorgang. Diese Überwachung kann so einfach sein wie übergeben die <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> als Parameter zwischen Delegaten. In anspruchsvolleren Designs, kann die Klasse eine Auflistung von verwalten <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Objekten, Hinzufügen von Objekten aus, wenn Tasks gestartet werden, und entfernt werden, wenn Aufgaben abgeschlossen oder abgebrochen werden. Dieser Ansatz ermöglicht Ihnen, zu prüfen, eindeutige `userSuppliedState` Parameter Werte ein, und ist die Methode, die Sie beim Arbeiten mit Klassen, die mehrere gleichzeitige Aufrufe unterstützt verwenden sollten.  
  
 Weitere Informationen zu asynchrone Klassen implementieren, finden Sie unter [Implementieren des ereignisbasierten asynchronen Entwurfsmusters](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Methode zum Erstellen einer <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> für die Überwachung der Dauer von asynchronen Vorgängen. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.ComponentModel.AsyncOperationManager> Klasse.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implementieren des ereignisbasierten asynchronen Entwurfsmusters</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Empfohlene Vorgehensweise für das verwaltete Threading</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Synchronisierungskontext für den asynchronen Vorgang ab oder legt diesen fest.</summary>
        <value>Der Synchronisierungskontext für den asynchronen Vorgang.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standardimplementierung ist die Freethread-Implementierung.  
  
 Ein Thread festlegen, sollten die <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> Eigenschaft `null` Freethread-Factory freigegeben, wenn dies geschehen ist, andernfalls die werkseinstellungen wird nie freigegeben werden.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">zum Festlegen des Synchronisierungskontexts. Anforderungswert: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Zugeordnete Zustand:</permission>
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperationManager.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5606bfa8ffd9f758de42817a0e4e7eaf9e11c8260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">606bfa8ffd9f758de42817a0e4e7eaf9e11c8260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Provides concurrency management for classes that support asynchronous method calls.</source>
          <target state="translated">Stellt Nebenläufigkeitsverwaltung für Klassen bereit, die asynchrone Methodenaufrufe unterstützen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This class cannot be inherited.</source>
          <target state="translated">Diese Klasse kann nicht vererbt werden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>If your class needs to provide asynchronous behavior according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you will encounter a number of concurrency management issues.</source>
          <target state="translated">Wenn Ihre Klasse, um asynchrones Verhalten gemäß bereitzustellen muss der <bpt id="p1">[</bpt>Übersicht über ereignisbasierte asynchrone Muster<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, tritt eine Anzahl von Problemen mit der Parallelität.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, console applications, and so on).</source>
          <target state="translated">Dazu gehört die Anforderung, stellen Sie sicher, dass der Ereignishandler aufgerufen werden, auf einen Thread oder Kontext, der für das Anwendungsmodell geeignet ist (z. B. Windows Forms-Anwendungen <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> Anwendungen, konsolenanwendungen und So weiter).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> provides a convenient way to create a class that runs properly under all application models supported by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> bietet eine einfache Möglichkeit, eine Klasse erstellen, die ordnungsgemäß unter allen unterstützten von Anwendungsmodellen führt die <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class has one method, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that can be used to track the duration of a particular asynchronous task.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> -Klasse verfügt über eine Methode, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, welche gibt eine <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> , die verwendet werden kann, um die Dauer einer bestimmten asynchronen Aufgabe nachzuverfolgen.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for a task can be used to alert clients when a task completes.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> für eine Aufgabe an alert Clients verwendet werden kann, wenn eine Aufgabe abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It can also be used to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">Sie können auch verwendet werden, um statusaktualisierungen und inkrementelle Ergebnisse bereitstellen, ohne dass den Vorgang beendet.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu asynchrone Klassen implementieren, finden Sie unter <bpt id="p1">[</bpt>das ereignisbasierte asynchrone Muster implementieren<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class to create a class that supports asynchronous operations for any application model.</source>
          <target state="translated">Das folgende Codebeispiel veranschaulicht die Verwendung der <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> Klasse, um eine Klasse erstellen, die asynchrone Vorgänge für jedes beliebige Anwendungsmodell unterstützt.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It shows how to implement a class that tests a number to determine whether it is prime.</source>
          <target state="translated">Es wird gezeigt, wie eine Klasse implementieren, die eine Zahl ein, um zu bestimmen, ob Primzahl testet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This calculation can be time consuming, so it is done on a separate thread.</source>
          <target state="translated">In dieser Berechnung kann zeitaufwändig sein, sodass es in einem separaten Thread ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Progress reports, incremental results, and completion notifications are handled by the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class, which ensures that the client's event handlers are called on the proper thread or context.</source>
          <target state="translated">Statusberichte, inkrementelle Ergebnisse und Abschluss Benachrichtigungen behandelt, durch die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> -Klasse, die sicherstellt, dass die Ereignishandler des Clients auf den richtigen Thread oder Kontext aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">Eine vollständige Codebeispiel finden Sie unter <bpt id="p1">[</bpt>wie: implementieren eine Komponente, die das ereignisbasierte asynchrone Muster unterstützt<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Eine vollständige Codeliste eines Formulars Client finden Sie unter <bpt id="p1">[</bpt>Vorgehensweise: Implementieren eines Clients des ereignisbasierten asynchronen Musters<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</source>
          <target state="translated">Ein Objekt, das dazu verwendet wird, einem bestimmten asynchronen Vorgang einen Bestandteil des Clientzustands, z. B. eine Aufgaben-ID, zuzuordnen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> for tracking the duration of a particular asynchronous operation.</source>
          <target state="translated">Gibt für die Überwachung der Dauer eines bestimmten asynchronen Vorgangs eine <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> zurück.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> that you can use to track the duration of an asynchronous method invocation.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph>, die Sie verwenden können, um die Dauer eines asynchronen Methodenaufrufs zu verfolgen.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> Methode gibt ein <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> , die Sie verwenden können, um die Dauer eines bestimmten asynchronen Vorgangs nachzuverfolgen und um das Anwendungsmodell zu warnen, wenn der Vorgang abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>You can also use it to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">Sie können es auch verwenden, um statusaktualisierungen und inkrementelle Ergebnisse bereitstellen, ohne dass den Vorgang beendet.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> will correctly marshal these calls to the appropriate thread or context for the application model.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> marshallt diese Aufrufe an den entsprechenden Thread oder Kontext für das Anwendungsmodell ordnungsgemäß.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> each time your <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`Async`</ph> method is called.</source>
          <target state="translated">Wenn Sie eine Klasse, die das ereignisbasierte asynchrone Muster unterstützt implementieren, sollte Ihre Klasse nicht aufrufen <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> jedes Mal Ihre <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph2">`Async`</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The client application that makes calls to the method can use the <ph id="ph1">`userSuppliedState`</ph> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</source>
          <target state="translated">Können Sie die Clientanwendung, die Aufrufe der Methode stellt der <ph id="ph1">`userSuppliedState`</ph> Parameter zur eindeutigen Identifizierung jeder Aufruf, um Ereignisse, die ausgelöst wird, während der Ausführung des asynchronen Vorgangs zu unterscheiden.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Client code must provide a unique value for the <ph id="ph1">`userSuppliedState`</ph> parameter.</source>
          <target state="translated">Clientcode bereitstellen, muss einen eindeutigen Wert für die <ph id="ph1">`userSuppliedState`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">Nicht eindeutige Aufgaben-IDs kann dazu führen, dass Ihre Implementierung fälschlicherweise Berichte zu Fortschritt und andere Ereignisse erstellt.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should check for a non-unique task ID and throw an <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> if one is detected.</source>
          <target state="translated">Der Code sollte für eine nicht eindeutige Aufgaben-ID überprüfen und lösen eine <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> eine erkannt wird.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should track every <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> returned by <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</source>
          <target state="translated">Code nachverfolgen muss jede <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> zurückgegebenes <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> und verwenden Sie das Objekt in den entsprechenden zugrunde liegenden asynchronen Vorgang, um Updates nach dem und beenden den Vorgang.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This tracking can be as simple as passing the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> as a parameter among delegates.</source>
          <target state="translated">Dieses Nachverfolgen kann so einfach wie das Übergeben der <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> als Parameter für den Delegaten.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>In more sophisticated designs, your class can maintain a collection of <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</source>
          <target state="translated">In anspruchsvolleren Entwürfe kann die Klasse eine Auflistung von verwalten <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> Objekten, Hinzufügen von Objekten aus, wenn Tasks gestartet werden, und Sie sie entfernen, wenn Aufgaben abgeschlossen oder abgebrochen werden.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This approach allows you to check for unique <ph id="ph1">`userSuppliedState`</ph> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</source>
          <target state="translated">Diese Vorgehensweise ermöglicht es Ihnen zu suchende eindeutige <ph id="ph1">`userSuppliedState`</ph> Parameter Werte, und stellt die Methode, die Sie beim Arbeiten mit Klassen, die mehrere gleichzeitige Aufrufe unterstützt verwenden sollten.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu asynchrone Klassen implementieren, finden Sie unter <bpt id="p1">[</bpt>das ereignisbasierte asynchrone Muster implementieren<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for tracking the duration of asynchronous operations.</source>
          <target state="translated">Das folgende Codebeispiel veranschaulicht die Verwendung der <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> Methode zum Erstellen einer <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> für die Überwachung der Dauer von asynchronen Vorgängen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Gets or sets the synchronization context for the asynchronous operation.</source>
          <target state="translated">Ruft den Synchronisierungskontext für den asynchronen Vorgang ab oder legt diesen fest.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The synchronization context for the asynchronous operation.</source>
          <target state="translated">Der Synchronisierungskontext für den asynchronen Vorgang.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The default implementation is the free-threaded implementation.</source>
          <target state="translated">Die standardmäßige Implementierung ist die Freethread-Implementierung.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>A thread should set the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> property to <ph id="ph2">`null`</ph> to release the free-threaded factory when it is done, or else its factory will never be disposed.</source>
          <target state="translated">Ein Thread festlegen, sollten die <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> Eigenschaft, um <ph id="ph2">`null`</ph> freizugeben Freethread-Factory erfolgt, da andernfalls die Factory wird nie freigegeben werden.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>for setting the synchronization context.</source>
          <target state="translated">zum Festlegen des Synchronisierungskontexts.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">"Demand"-Wert: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Associated state:</source>
          <target state="translated">Zugeordneten Zustand:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
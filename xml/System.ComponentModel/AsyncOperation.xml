<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff3d7e18aacd92709247b9bbd68b85c70ac72a70" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86733891" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Verfolgt die Lebensdauer eines asynchronen Vorgangs.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine Klasse gemäß der [Übersicht über das ereignisbasierte asynchrone Muster](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview)implementieren, müssen Sie möglicherweise die Lebensdauer der einzelnen asynchronen Vorgänge, die für eine Instanz der Klasse aufgerufen werden, nachverfolgen. Die- <xref:System.ComponentModel.AsyncOperation> Klasse stellt Methoden bereit, um den Fortschritt einer asynchronen Aufgabe zu verfolgen und zu melden.  
  
 In der folgenden Liste sind die Verwendungsmöglichkeiten eines <xref:System.ComponentModel.AsyncOperation> Objekts aufgeführt:  
  
-   Um Status-und Zwischenergebnisse an den Client zu melden, wenden Sie sich an den <xref:System.ComponentModel.AsyncOperation.Post%2A> asynchronen Workercode.  
  
-   Um anzugeben, dass eine asynchrone Aufgabe abgeschlossen wurde, oder um eine ausstehende asynchrone Aufgabe abzubrechen, rufen Sie auf <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> .  
  
 Die Klasse sollte ein <xref:System.ComponentModel.AsyncOperation> Objekt für jede asynchrone Aufgabe abrufen, indem aufgerufen wird, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> Wenn die einzelnen Aufgaben gestartet werden. Um dem Client die Unterscheidung einzelner asynchroner Aufgaben zu ermöglichen, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> nimmt einen Parameter für ein eindeutiges vom Client bereitgestelltes Token an, das zur- <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> Eigenschaft wird. Sie kann dann vom Client Code verwendet werden, um die asynchrone Aufgabe zu identifizieren, die Status-oder Beendigungs Ereignisse aufhebt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung eines- <xref:System.ComponentModel.AsyncOperation> Objekts zum Nachverfolgen der Lebensdauer von asynchronen Vorgängen veranschaulicht. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> .  
  
 Eine vollständige Code Auflistung finden Sie unter Gewusst [wie: Implementieren einer Komponente, die das ereignisbasierte asynchrone Muster unterstützt](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Eine vollständige Code Auflistung eines Client Formulars finden Sie unter Gewusst [wie: Implementieren eines Clients des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Implementierer müssen sicher <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> stellen <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> , dass die Aufrufe und asynchron ausgeführt werden, damit Klassen Bibliotheks Anbieter sich nicht auf potenzielle Stapel Überläufe beziehen müssen, wenn Sie ein asynchrones Verhalten in einem bestimmten Anwendungsmodell annehmen, das synchron ist.  
  
Weitere Informationen zum Implementieren von asynchronen Klassen finden Sie unter [Implementieren des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">Empfohlene Vorgehensweise für das verwaltete Threading</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Gewusst wie: Implementieren einer Komponente, die das ereignisbasierte asynchrone Muster unterstützt</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet den asynchronen Vorgang.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Lebensdauer eines asynchronen Vorgangs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft die- <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> Methode auf, um die Lebensdauer eines asynchronen Vorgangs zu beenden. Nachdem diese Methode für eine bestimmte Aufgabe aufgerufen wurde, wird von Aufrufen der entsprechenden-Methode <xref:System.ComponentModel.AsyncOperation> eine Ausnahme ausgelöst.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> wurde vorher für diese Aufgabe aufgerufen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object? arg);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Ein <see cref="T:System.Threading.SendOrPostCallback" />-Objekt, das den am Ende des Vorgangs aufzurufenden Delegaten umschließt.</param>
        <param name="arg">Ein Argument für den Delegaten, der im <paramref name="d" />-Parameter enthalten ist.</param>
        <summary>Ruft einen Delegaten auf dem Thread oder Kontext auf, der für das Anwendungsmodell geeignet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.ComponentModel.AsyncOperation.Post%2A> Methode ruft den vom-Parameter angegebenen Delegaten auf, `arg` ohne dass die Lebensdauer des asynchronen Vorgangs beendet wird.  
  
 Sie können die- <xref:System.ComponentModel.AsyncOperation.Post%2A> Methode so oft wie gewünscht aufzurufen, während die Lebensdauer des asynchronen Vorgangs nicht durch einen-Befehl beendet wurde <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> . Sie können die-Methode verwenden, um den Fortschritt oder Zwischenergebnisse an Clients zu melden.  
  
 Der-Parameter umschließt den Delegaten `d` , den Sie aufrufen möchten, wenn Sie ein Update über den Status der asynchronen Aufgabe bereitstellen möchten. Das- <xref:System.ComponentModel.AsyncOperation> Objekt stellt sicher, dass der Delegat für den Thread oder Kontext aufgerufen wird, der für das Anwendungsmodell geeignet ist. Die-Methode kann optional ein Ereignis mit einer Statusänderung, einem Status Update oder neu verfügbaren inkrementellen Ergebnissen von Clients benachrichtigen.  
  
 Der- `arg` Parameter sollte verwendet werden, um den Zustand an den Delegaten zu übergeben, der vom-Parameter umschließt `d` Möglicherweise handelt es sich um einen Verweis auf einen <xref:System.ComponentModel.AsyncOperation> , oder es handelt sich um ein- <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> Objekt. Es kann wünschenswert sein, eine eigene Klasse von abzuleiten <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> , um zusätzlichen Zustands Speicher bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.ComponentModel.AsyncOperation.Post%2A> -Methode zum Melden des Fortschritts und der inkrementellen Ergebnisse eines asynchronen Vorgangs veranschaulicht. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> .  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />-Methode wurde zuvor für diese Aufgabe aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Vererber müssen den <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> Aufruf asynchron machen, damit Klassen Bibliotheks Anbieter sich nicht auf potenzielle Stapel Überläufe beziehen müssen, wenn Sie asynchron annehmen, aber ein bestimmtes Anwendungsmodell synchron ist.  
  
 <block subset="none" type="note"><para>  
 Konsolenanwendungen führen keine Synchronisierung von <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />-Aufrufen durch. Das kann dazu führen, dass <see langword="ProgressChanged" />-Ereignisse nicht in der richtigen Reihenfolge ausgelöst werden. Wenn Sie eine serialisierte Ausführung von <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />-Aufrufen wünschen, implementieren und installieren Sie eine <see cref="T:System.Threading.SynchronizationContext" />-Klasse.  
  
</para></block>  
  
 Weitere Informationen zum Implementieren von asynchronen Klassen finden Sie unter [Implementieren des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">Empfohlene Vorgehensweise für das verwaltete Threading</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Gewusst wie: Implementieren einer Komponente, die das ereignisbasierte asynchrone Muster unterstützt</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object? arg);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Ein <see cref="T:System.Threading.SendOrPostCallback" />-Objekt, das den am Ende des Vorgangs aufzurufenden Delegaten umschließt.</param>
        <param name="arg">Ein Argument für den Delegaten, der im <paramref name="d" />-Parameter enthalten ist.</param>
        <summary>Beendet die Lebensdauer eines asynchronen Vorgangs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft die- <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> Methode auf, um die Lebensdauer eines asynchronen Vorgangs zu beenden. Nachdem diese Methode für eine bestimmte Aufgabe aufgerufen wurde, wird von Aufrufen des entsprechenden <xref:System.ComponentModel.AsyncOperation> Objekts eine Ausnahme ausgelöst.  
  
 Der `d` -Parameter umschließt den Delegaten, der von der-Klasse aufgerufen werden soll, wenn die Lebensdauer der Aufgabe aufgrund von Abschluss, Abbruch oder Fehler der Aufgabe beendet wird. Das- <xref:System.ComponentModel.AsyncOperation> Objekt stellt sicher, dass der Delegat für den Thread oder Kontext aufgerufen wird, der für das Anwendungsmodell geeignet ist. Der Delegat kann optional ein Ereignis, das Clients benachrichtigt, dass die Lebensdauer der asynchronen Aufgabe beendet wurde.  
  
 Der- `arg` Parameter wird verwendet, um Zustandsinformationen an den Abschluss Delegaten zu übergeben `d` . Sie können ein <xref:System.ComponentModel.AsyncOperation> Objekt oder ein <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> Objekt als Parameterwert verwenden. Wenn Sie zusätzlichen Zustands Speicher bereitstellen möchten, können Sie alternativ eine Instanz einer Klasse verwenden, die Sie von der- <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> Klasse ableiten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> Methode zum Beenden der Lebensdauer eines asynchronen Vorgangs veranschaulicht. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> .  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> wurde vorher für diese Aufgabe aufgerufen.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Vererber müssen den <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> Aufruf asynchron machen, damit Klassen Bibliotheks Anbieter sich nicht auf potenzielle Stapel Überläufe beziehen müssen, wenn Sie asynchron annehmen, aber ein bestimmtes Anwendungsmodell synchron ist. Die Methode sollte als "Ende der Lebensdauer" interpretiert werden, was bedeutet, dass die Implementierung für das Anwendungsmodell geeignet ist. Beispielsweise Dekrement ASP.net die Anzahl der ausstehenden asynchronen Vorgänge. Dadurch sollte auch der Vorgang in einen Zustand versetzt werden, in dem alle nachfolgenden Aufrufe an den Vorgang fehlschlagen, da er nun abgeschlossen ist.  
  
Weitere Informationen zum Implementieren von asynchronen Klassen finden Sie unter [Implementieren des ereignisbasierten asynchronen Musters](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">Empfohlene Vorgehensweise für das verwaltete Threading</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Gewusst wie: Implementieren einer Komponente, die das ereignisbasierte asynchrone Muster unterstützt</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Threading.SynchronizationContext" />-Objekt ab, das an den Konstruktor übergeben wurde.</summary>
        <value>Das <see cref="T:System.Threading.SynchronizationContext" />-Objekt, das an den Konstruktor übergeben wurde.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="C#" Value="public object? UserSuppliedState { get; }" FrameworkAlternate="net-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, das für die eindeutige Identifikation eines asynchronen Vorgangs verwendet wird, oder legt dieses fest.</summary>
        <value>Das Zustandsobjekt, das an den asynchronen Methodenaufruf übergeben wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Klasse mehrere asynchrone Methoden oder mehrere Aufrufe einer einzelnen asynchronen Methode unterstützt, benötigen Clients eine Möglichkeit, um zu bestimmen, welche asynchrone Aufgabe Ereignisse aufhebt. Ihre `MethodNameAsync` Methode sollte einen Parameter vom Typ annehmen <xref:System.Object> , der als Aufgaben-ID fungiert. Diese Task-ID wird verwendet, wenn Sie die <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> Methode, aufrufen. Dadurch wird die Task-ID des Clients einem bestimmten Aufruf des asynchronen Vorgangs zugeordnet. Diese Task-ID wird der-Implementierung über die-Eigenschaft zur Verfügung gestellt <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> .  
  
> [!CAUTION]
>  Der Client Code muss darauf achten, einen eindeutigen Wert für die-Eigenschaft bereitzustellen <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> . Nicht eindeutige Aufgaben-IDs können dazu führen, dass Ihre Implementierung den Fortschritt und andere Ereignisse falsch meldet. Der Code sollte eine nicht eindeutige Aufgaben-ID überprüfen und eine, <xref:System.ArgumentException> Wenn eine solche festgestellt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> von zum Nachverfolgen der Lebensdauer von asynchronen Vorgängen veranschaulicht. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> .  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">Empfohlene Vorgehensweise für das verwaltete Threading</related>
        <related type="Article" href="/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview">Übersicht über ereignisbasierte asynchrone Muster</related>
      </Docs>
    </Member>
  </Members>
</Type>

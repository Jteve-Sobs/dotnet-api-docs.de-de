<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NestedContainer.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a124ee078be65668efae6c08b17c83ac01930fb7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a124ee078be65668efae6c08b17c83ac01930fb7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.NestedContainer">
          <source>Provides the base implementation for the <ph id="ph1">&lt;see cref="T:System.ComponentModel.INestedContainer" /&gt;</ph> interface, which enables containers to have an owning component.</source>
          <target state="translated">Stellt die Basisimplementierung für die <ph id="ph1">&lt;see cref="T:System.ComponentModel.INestedContainer" /&gt;</ph>-Schnittstelle bereit, die es Containern ermöglicht, über eine besitzende Komponente zu verfügen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> class is a simple implementation of the <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> Klasse ist eine einfache Implementierung der <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> -Schnittstelle, die eine Komponente definiert, die logisch 0 oder mehr Komponenten enthält und von einer übergeordneten Komponente gehört.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The behavior of nested containers differs from a standard <ph id="ph1">&lt;xref:System.ComponentModel.Container&gt;</ph> in a number of ways, including the following:</source>
          <target state="translated">Das Verhalten von geschachtelten Containern unterscheidet sich von einer standardmäßigen <ph id="ph1">&lt;xref:System.ComponentModel.Container&gt;</ph> eine Reihe von Möglichkeiten, u. a. folgende:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Site characteristics such as <ph id="ph1">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> are routed through the owning component’s site.</source>
          <target state="translated">Merkmale wie Standort <ph id="ph1">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> werden durch die besitzende Komponente Standort weitergeleitet.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The site’s <ph id="ph1">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.</source>
          <target state="translated">Der Website <ph id="ph1">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> Eigenschaft ist ein qualifizierter Name, der die besitzende Komponente Namen gefolgt von einem Punkt (.) und den Namen der untergeordneten Komponente enthält.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> provides support for the <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> as a service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> bietet Unterstützung für die <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> als Dienst.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>When the owning component is disposed, the container is disposed as well.</source>
          <target state="translated">Wenn die besitzende Komponente gelöscht wird, wird der Container als auch verworfen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>In addition, designers treat nested containers differently.</source>
          <target state="translated">Darüber hinaus behandelt Designer geschachtelter Container unterschiedlich.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>A designer host is only interested in one container—the one associated with the host.</source>
          <target state="translated">Ein Designerhost ist nur in einem Container Interesse – eine mit dem Host zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.</source>
          <target state="translated">Aus diesem Grund Komponente hinzufügen und Entfernen von Ereignissen werden nicht ausgelöst, wenn eine Komponente hinzugefügt oder aus einem geschachtelten Container entfernt wird.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.</source>
          <target state="translated">Da Dienste durch die geschachtelten Container übergeben werden, sind jedoch Komponentenänderungsereignisse ausgelöst, wenn eine Komponente in einem geschachtelten Container geändert wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.</source>
          <target state="translated">Diese Deltadatei in ereignisüberwachung wirkt sich auch zum Rückgängigmachen bereit; diese ist eng mit der Serialisierung verbunden ist.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The standard undo engine uses <ph id="ph1">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> to track changes made to components.</source>
          <target state="translated">Das standardmäßige Rückgängigmodul verwendet die <ph id="ph1">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> zum Nachverfolgen von Änderungen an den Komponenten.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.</source>
          <target state="translated">Wenn das Modul "Rückgängig" einen Namen für eine Komponente über den Verweisdienst ermitteln kann, wird das Modul alle Änderungen für die jeweilige Komponente ignoriert.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.</source>
          <target state="translated">Der Dienst erkennt automatisch Änderungen an den darin enthaltenen Komponenten nur, wenn sie als öffentliche schreibgeschützte Eigenschaften mit demselben Namen in ihren Besitzer verfügbar gemacht werden.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Otherwise, the developer must pass component change events up to the owner.</source>
          <target state="translated">Andernfalls muss der Entwickler Komponentenänderungsereignisse bis zu der Besitzer übergeben.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>For example, if a nested component’s <ph id="ph1">`Text`</ph> property is resurfaced on its owning component as an <ph id="ph2">`Address`</ph> property, when the <ph id="ph3">`Text`</ph> property is changed, a property change must be programmatically made for the corresponding <ph id="ph4">`Address`</ph> property or else that change will not be tracked by undo.</source>
          <target state="translated">Angenommen, einer geschachtelte Komponente <ph id="ph1">`Text`</ph> Eigenschaft wird auf der besitzenden Komponente als auftaucht ein <ph id="ph2">`Address`</ph> Eigenschaft, wenn die <ph id="ph3">`Text`</ph> -Eigenschaft geändert wird, die Änderung einer Eigenschaft muss programmgesteuert vorgenommen werden, für den entsprechenden <ph id="ph4">`Address`</ph> Eigenschaft, da sonst die Änderung wird nicht von "Rückgängig" nachverfolgt werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns this nested container.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>, die den geschachtelten Container besitzt.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.NestedContainer" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.ComponentModel.NestedContainer" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>This constructor enlists in its owner's <ph id="ph1">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> event so that the nested container's <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> method will automatically be called.</source>
          <target state="translated">Dieser Konstruktor trägt sich in dessen Besitzers <ph id="ph1">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> Ereignis, damit die geschachtelten Containers <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> Methode wird automatisch aufgerufen.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> to create a site for.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>, für die eine Site erstellt werden soll.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The name to assign to <bpt id="p1">&lt;c&gt;</bpt>component<ept id="p1">&lt;/c&gt;</ept>, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to skip the name assignment.</source>
          <target state="translated">Der Name, der <bpt id="p1">&lt;c&gt;</bpt>component<ept id="p1">&lt;/c&gt;</ept> zugewiesen werden soll, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Namenszuweisung übersprungen werden soll.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>Creates a site for the component within the container.</source>
          <target state="translated">Erstellt eine Site für die Komponente im Container.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The newly created <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>.</source>
          <target state="translated">Der neu erstellte <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>If the <ph id="ph1">`name`</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.ComponentModel.IComponent&gt;</ph> is added to the nested container without an identifying name.</source>
          <target state="translated">Wenn die <ph id="ph1">`name`</ph> Parameter ist <ph id="ph2">`null`</ph>die <ph id="ph3">&lt;xref:System.ComponentModel.IComponent&gt;</ph> die geschachtelten Container ohne einen kennzeichnenden Namen hinzugefügt wird.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source><ph id="ph1">&lt;paramref name="component" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="component" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <ph id="ph2">&lt;see langword="false" /&gt;</ph>, um ausschließlich nicht verwaltete Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>Releases the resources used by the nested container.</source>
          <target state="translated">Gibt die vom geschachtelten Container verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Diese Methode wird aufgerufen, der öffentlich <ph id="ph1">`Dispose()`</ph> Methode und die <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> Ruft die geschützte <ph id="ph2">`Dispose(Boolean)`</ph> Methode mit dem <ph id="ph3">`disposing`</ph> Parametersatz auf <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> Ruft <ph id="ph2">`Dispose`</ph> mit <ph id="ph3">`disposing`</ph> festgelegt <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> references.</source>
          <target state="translated">Wenn die <ph id="ph1">`disposing`</ph> Parameter ist "true", gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte, die von diesem <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> Verweise.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Diese Methode ruft die <ph id="ph1">`Dispose()`</ph>-Methode aller Objekte auf, auf die verwiesen wird.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> kann von anderen Objekten mehrmals aufgerufen werden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Zum Überschreiben <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> Achten Sie darauf, dass Sie nicht auf Objekte verweisen, die einen früheren Aufruf freigegeben wurden <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen zum Implementieren <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Implementieren einer Dispose-Methode<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Weitere Informationen zu <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> und <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> und <bpt id="p2">[</bpt>Überschreiben der Finalize-Methode<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the service to retrieve.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> des abzurufenden Dienstes.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>Gets the service object of the specified type, if it is available.</source>
          <target state="translated">Ruft das Dienstobjekt des angegebenen Typs ab, sofern es verfügbar ist.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that implements the requested service, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the service cannot be resolved.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das den angeforderten Dienst implementiert, oder <ph id="ph2">&lt;see langword="null" /&gt;</ph>, wenn der Dienst nicht ermittelt werden kann.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>This method overrides the <ph id="ph1">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Diese Methode überschreibt die <ph id="ph1">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>This implementation only resolves requests for the <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> services.</source>
          <target state="translated">Diese Implementierung löst nur Anforderungen für die <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> und <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> Dienste.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>Gets the owning component for this nested container.</source>
          <target state="translated">Ruft die besitzende Komponente für diesen geschachtelten Container ab.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns this nested container.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>, die den geschachtelten Container besitzt.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>The owning component is the characteristic that differentiates nested containers from ordinary containers.</source>
          <target state="translated">Die besitzende Komponente ist das Merkmal, das geschachtelte Container von gewöhnlichen Containern unterscheidet.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>Gets the name of the owning component.</source>
          <target state="translated">Ruft den Namen der besitzenden Komponente ab.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>The name of the owning component.</source>
          <target state="translated">Der Name der besitzenden Komponente.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>This property may be overridden to provide a custom owner name.</source>
          <target state="translated">Diese Eigenschaft kann überschrieben werden, um einen benutzerdefinierten Besitzernamen bereitzustellen.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>The default implementation searches the owner's site for <ph id="ph1">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> and calls <ph id="ph2">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> if there is no nested site.</source>
          <target state="translated">Die standardmäßige Implementierung sucht des Besitzers der Website für <ph id="ph1">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> und ruft <ph id="ph2">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, oder <ph id="ph3">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> Wenn keine geschachtelten Standort vorhanden ist.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>If neither is available, this property returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Wenn keiner verfügbar ist, gibt diese Eigenschaft <ph id="ph1">`null`</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
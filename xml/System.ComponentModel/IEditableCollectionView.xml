<Type Name="IEditableCollectionView" FullName="System.ComponentModel.IEditableCollectionView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8453b65ce24181f0257beb671b88d6d7c4bd8726" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82468121" /></Metadata><TypeSignature Language="C#" Value="public interface IEditableCollectionView" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEditableCollectionView" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.IEditableCollectionView" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEditableCollectionView" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEditableCollectionView" />
  <TypeSignature Language="F#" Value="type IEditableCollectionView = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert von einer <see cref="T:System.Windows.Data.CollectionView" /> implementierte Methoden und Eigenschaften, um Bearbeitungsfunktionen für eine Auflistung bereitzustellen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Auflistungs Ansicht die <xref:System.ComponentModel.IEditableCollectionView>-Schnittstelle implementiert, können Sie die zugrunde liegende Auflistung direkt ändern, sofern Änderungen vorgenommen werden können, indem Sie die Methoden und Eigenschaften verwenden, die <xref:System.ComponentModel.IEditableCollectionView> verfügbar macht, unabhängig vom Typ der Auflistung.  
  
 Die Typen <xref:System.Windows.Controls.ItemCollection>, <xref:System.Windows.Data.BindingListCollectionView>und <xref:System.Windows.Data.ListCollectionView> sind die Typen, die mit [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ausgeliefert werden, die von <xref:System.Windows.Data.CollectionView>erben.  Diese Typen implementieren auch die <xref:System.ComponentModel.IEditableCollectionView>, sodass Sie eine Auflistung bearbeiten können, die einen dieser Typen verwendet.  <xref:System.Windows.Controls.ItemCollection>insbesondere häufig verwendet, da die <xref:System.Windows.Controls.ItemsControl.Items%2A?displayProperty=nameWithType>-Eigenschaft eine <xref:System.Windows.Controls.ItemCollection>ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein Element einer Auflistung hinzugefügt wird, indem Methoden verwendet werden, die durch <xref:System.ComponentModel.IEditableCollectionView>definiert werden.  Diese Anwendung zeigt eine Liste der zu verkaufenden Elemente an und bietet dem Benutzer die Möglichkeit, ein Element hinzuzufügen, zu bearbeiten oder zu entfernen.  Wenn der Benutzer ein Element hinzufügt oder bearbeitet, fordert ein Formular den Benutzer zur Eingabe eines neuen Elements auf.  Wenn der Benutzer das Formular sendet, wird das Element an die Auflistung übergeben.  Wenn der Benutzer das Formular abbricht, wird das Element verworfen. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public object AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNew () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddNew();" />
      <MemberSignature Language="F#" Value="abstract member AddNew : unit -&gt; obj" Usage="iEditableCollectionView.AddNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fügt der Auflistung ein neues Element hinzu.</summary>
        <returns>Das neue Element, das der Auflistung hinzugefügt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen von <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> wird eine Transaktion zum Hinzufügen gestartet.  Sie sollten <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> oder <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> zum Beenden der Transaktion "hinzufügen" anrufen. Ein neues Element wird immer in der Auflistungs Ansicht angezeigt. Alle Filter-, Sortier-oder Gruppierungsfunktionen, die auf die Sicht angewendet werden, werden auf das neue Element angewendet, wenn <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> aufgerufen wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Windows.Window> erstellt, die den Benutzer auffordert, ein neues Element hinzuzufügen.  Anschließend wird <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> aufgerufen, um ein neues-Objekt zu erstellen und die <xref:System.Windows.FrameworkElement.DataContext%2A> des <xref:System.Windows.Window> auf dieses Objekt festgelegt. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNew">
      <MemberSignature Language="C#" Value="public bool CanAddNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanAddNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanAddNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanAddNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanAddNew : bool" Usage="System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Auflistung ein neues Element hinzugefügt werden kann.</summary>
        <value><see langword="true" />, wenn der Auflistung ein neues Element hinzugefügt werden kann, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.ComponentModel.IEditableCollectionView> kann ein neues Element hinzufügen, wenn Folgendes zutrifft:  
  
-   Der zugrunde liegenden Auflistung kann ein Element hinzugefügt werden.  Wenn die Auflistung z. b. schreibgeschützt ist, wird <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> `false`.  
  
-   Der <xref:System.ComponentModel.IEditableCollectionView> kann ein Objekt vom Typ erstellen, das sich in der Auflistung befindet.  Wenn die Auflistung z. b. vom Typ <xref:System.Collections.ObjectModel.ObservableCollection%601>ist, muss die <xref:System.ComponentModel.IEditableCollectionView> in der Lage sein, ein Objekt vom Typ `T`zu erstellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird überprüft, ob der Auflistung ein Element hinzugefügt werden kann.  Wenn <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> `false`ist, wird dem Benutzer im Beispiel mitgeteilt, dass kein Element hinzugefügt werden kann.  Andernfalls wird ein Formular angezeigt, mit dem der Benutzer aufgefordert wird, ein neues Element hinzuzufügen. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCancelEdit">
      <MemberSignature Language="C#" Value="public bool CanCancelEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanCancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCancelEdit { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanCancelEdit : bool" Usage="System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistungsansicht ausstehende Änderungen verwerfen und die ursprünglichen Werte eines bearbeiteten Objekts wiederherstellen kann.</summary>
        <value><see langword="true" />, wenn die Auflistungsansicht ausstehende Änderungen verwerfen und die ursprünglichen Werte eines bearbeiteten Objekts wiederherstellen kann, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> ist `true`, wenn die Sicht das Konzept von "ausstehende Änderungen" für das aktuell bearbeitete Element unterstützt.   Eine Auflistungs Ansicht kann z. b. `true` zurückgeben, wenn das bearbeiteten Element <xref:System.ComponentModel.IEditableObject>implementiert, oder wenn die Sicht Informationen über den Zustand des Elements enthält, das für das Rollback von Änderungen verwendet werden kann. <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> ist `false`, wenn die Sicht Änderungen an einem Objekt nicht rückgängig machen kann.  Rufen Sie in diesem Fall <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> auf, um zu bewirken, dass die Ansicht den Bearbeitungs Zustand verlässt, und stellen Sie die Logik bereit, um die Änderungen am bearbeiteten Objekt zurückzusetzen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A>, um zu überprüfen, ob die ursprünglichen Werte des bearbeiteten Elements wieder hergestellt werden können, bevor <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>aufgerufen wird.  Wenn die Werte nicht wieder hergestellt werden können, müssen Sie hierfür zusätzliche Logik bereitstellen.  Wenn dies der Fall sein kann, werden die Werte wieder hergestellt, wenn im Beispiel <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>aufgerufen wird.   Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberSignature Language="F#" Value="abstract member CancelEdit : unit -&gt; unit" Usage="iEditableCollectionView.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Transaktion zum Bearbeiten und stellt, wenn möglich, den ursprünglichen Wert des Elements wieder her.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> legt <xref:System.ComponentModel.IEditableCollectionView.CurrentEditItem%2A> auf `null` fest und bewirkt, dass die Auflistungs Ansicht den Bearbeitungs Zustand verlässt.  Wenn <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> `true`ist, stellt <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> auch die ursprünglichen Werte des bearbeiteten Objekts wieder her.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A>, um zu überprüfen, ob die ursprünglichen Werte des bearbeiteten Elements wieder hergestellt werden können, bevor <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>aufgerufen wird.  Wenn die Werte nicht wieder hergestellt werden können, müssen Sie hierfür zusätzliche Logik bereitstellen.  Wenn dies der Fall sein kann, werden die Werte wieder hergestellt, wenn im Beispiel <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>aufgerufen wird. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelNew">
      <MemberSignature Language="C#" Value="public void CancelNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelNew();" />
      <MemberSignature Language="F#" Value="abstract member CancelNew : unit -&gt; unit" Usage="iEditableCollectionView.CancelNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Transaktion zum Hinzufügen und verwirft das ausstehende neue Element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Formular angezeigt, in dem der Benutzer aufgefordert wird, ein neues Element hinzuzufügen.  Wenn der Benutzer das Formular sendet, ruft das Beispiel <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> auf, um das Element der Auflistung hinzuzufügen.  Wenn der Benutzer das Formular abbricht, ruft das Beispiel <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> auf, um das Element zu verwerfen. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemove">
      <MemberSignature Language="C#" Value="public bool CanRemove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRemove" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRemove As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRemove { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRemove : bool" Usage="System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Element aus der Auflistung entfernt werden kann.</summary>
        <value><see langword="true" />, wenn ein Element aus der Auflistung entfernt werden kann, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> ist `false`, wenn die zugrunde liegende Sammlung schreibgeschützt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> aufgerufen, um zu überprüfen, ob ein Element aus der Auflistung entfernt werden kann.  Wenn ein Element entfernt werden kann, wird der Benutzer im Beispiel aufgefordert, die Aktion zu bestätigen, und es werden <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> aufgerufen, wenn der Benutzer auf **Ja**klickt. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public void CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitEdit();" />
      <MemberSignature Language="F#" Value="abstract member CommitEdit : unit -&gt; unit" Usage="iEditableCollectionView.CommitEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Transaktion zum Bearbeiten und speichert die ausstehenden Änderungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Formular erstellt, das den Benutzer auffordert, ein vorhandenes Element zu bearbeiten.  Wenn der Benutzer das Formular sendet, ruft das Beispiel <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> auf, um die Änderungen in der Auflistung zu speichern.  Wenn der Benutzer das Formular abbricht, ruft das Beispiel <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> auf, um die Änderungen zu verwerfen. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitNew">
      <MemberSignature Language="C#" Value="public void CommitNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitNew();" />
      <MemberSignature Language="F#" Value="abstract member CommitNew : unit -&gt; unit" Usage="iEditableCollectionView.CommitNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Beendet die Transaktion zum Hinzufügen und speichert das ausstehende neue Element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Filter-, Sortier-oder Gruppierungs Vorgänge, die auf die <xref:System.Windows.Data.CollectionView> angewendet werden, werden auf das neue Element angewendet, wenn <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> aufgerufen wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Formular angezeigt, in dem der Benutzer aufgefordert wird, ein neues Element hinzuzufügen.  Wenn der Benutzer das Formular sendet, ruft das Beispiel <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> auf, um das Element der Auflistung hinzuzufügen.  Wenn der Benutzer das Formular abbricht, ruft das Beispiel <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> auf, um das Element zu verwerfen. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAddItem">
      <MemberSignature Language="C#" Value="public object CurrentAddItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentAddItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentAddItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentAddItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentAddItem : obj" Usage="System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element ab, das während der aktuellen Hinzufügetransaktion hinzugefügt wird.</summary>
        <value>Das Element, das hinzugefügt wird, wenn <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /><see langword="true" /> ist, andernfalls <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentEditItem">
      <MemberSignature Language="C#" Value="public object CurrentEditItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentEditItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentEditItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentEditItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentEditItem : obj" Usage="System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element in der Auflistung ab, das gerade bearbeitet wird.</summary>
        <value>Das Element in der Auflistung, die gerade bearbeitet wird, wenn <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> gleich <see langword="true" /> ist, andernfalls <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItem">
      <MemberSignature Language="C#" Value="public void EditItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditItem(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EditItem (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EditItem(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member EditItem : obj -&gt; unit" Usage="iEditableCollectionView.EditItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Das zu bearbeitende Element.</param>
        <summary>Startet eine Transaktion zum Bearbeiten des angegebenen Elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Formular erstellt, das den Benutzer auffordert, ein vorhandenes Element zu bearbeiten.  Wenn der Benutzer das Formular sendet, werden die Änderungen an die Auflistung übergeben.  Wenn der Benutzer das Formular abbricht, werden die Änderungen verworfen. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddingNew">
      <MemberSignature Language="C#" Value="public bool IsAddingNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddingNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAddingNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAddingNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAddingNew : bool" Usage="System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob gerade eine Transaktion zum Hinzufügen ausgeführt wird.</summary>
        <value><see langword="true" />, wenn momentan eine Transaktion zum Hinzufügen ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie beginnen mit dem Hinzufügen einer Transaktion, indem Sie <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> aufrufen und die Transaktion hinzufügen beenden, indem Sie <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> oder <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A>aufrufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditingItem">
      <MemberSignature Language="C#" Value="public bool IsEditingItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditingItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEditingItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEditingItem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEditingItem : bool" Usage="System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob gerade eine Transaktion zum Bearbeiten ausgeführt wird.</summary>
        <value><see langword="true" />, wenn aktuell eine Transaktion zum Bearbeiten ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie beginnen eine Bearbeitungs Transaktion, indem Sie <xref:System.ComponentModel.IEditableCollectionView.EditItem%2A> aufrufen und die Transaktion beenden, indem Sie <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> oder <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>aufrufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewItemPlaceholderPosition">
      <MemberSignature Language="C#" Value="public System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property NewItemPlaceholderPosition As NewItemPlaceholderPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::NewItemPlaceholderPosition NewItemPlaceholderPosition { System::ComponentModel::NewItemPlaceholderPosition get(); void set(System::ComponentModel::NewItemPlaceholderPosition value); };" />
      <MemberSignature Language="F#" Value="member this.NewItemPlaceholderPosition : System.ComponentModel.NewItemPlaceholderPosition with get, set" Usage="System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.NewItemPlaceholderPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Position des neuen Elementplatzhalters in der Auflistungsansicht ab oder legt diese fest.</summary>
        <value>Einer der Enumerationswerte, der die Position des neuen Elementplatzhalters in der Auflistungsansicht angibt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit" Usage="iEditableCollectionView.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Das zu entfernende Element.</param>
        <summary>Entfernt das angegebene Element aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `item` nicht in der Auflistung ist, führt <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> keine Aktion aus.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> aufgerufen, um zu überprüfen, ob ein Element aus der Auflistung entfernt werden kann.  Wenn ein Element entfernt werden kann, wird der Benutzer im Beispiel aufgefordert, die Aktion zu bestätigen, und es werden <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> aufgerufen, wenn der Benutzer auf **Ja**klickt. Das gesamte Beispiel finden Sie unter [Ändern einer Sammlung mit dem IEditableCollectionView-Beispiel](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit" Usage="iEditableCollectionView.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die Position des zu entfernenden Elements.</param>
        <summary>Entfernt das Element an der angegebenen Position aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index` ist relativ zur Auflistungs Ansicht, nicht zur Auflistung.  Wenn die Auflistung z. b. 10 Elemente enthält und die Sicht eine <xref:System.ComponentModel.ICollectionView.Filter%2A> hat, sodass 7 Elemente angezeigt werden, sind die gültigen Werte `index` 0 bis 6.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> ist kleiner als 0 oder größer als die Anzahl von Elementen in der Auflistungsansicht.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

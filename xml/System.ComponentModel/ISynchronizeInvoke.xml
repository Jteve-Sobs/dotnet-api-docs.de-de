<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="89029ee04645326089681c9c6cbecc31dd4ae85f" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70460086" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht das synchrone oder asynchrone Ausführen eines Delegaten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.ISynchronizeInvoke> -Schnittstelle bietet synchrone und asynchrone Kommunikation zwischen Objekten über das Auftreten eines Ereignisses. Objekte, die diese Schnittstelle implementieren, können eine Benachrichtigung erhalten, dass ein Ereignis aufgetreten ist, und Sie können auf Abfragen über das Ereignis reagieren. Auf diese Weise können Clients sicherstellen, dass eine Anforderung verarbeitet wurde, bevor Sie eine nachfolgende Anforderung übermitteln, die von der Ausführung der ersten Anforderung abhängig ist.  
  
 Die <xref:System.ComponentModel.ISynchronizeInvoke> -Klasse bietet zwei Möglichkeiten, einen Prozess aufzurufen:  
  
1.  Asynchron, mithilfe der <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> -Methode. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>startet einen Prozess und wird dann sofort zurückgegeben. Verwenden <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> Sie, um zu warten, bis <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> der von gestartete Prozess abgeschlossen ist.  
  
2.  Synchron, mithilfe der <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> -Methode. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>startet einen Prozess, wartet, bis er abgeschlossen ist, und gibt dann zurück. Verwenden <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Sie, wenn der Haupt Thread des-Steuer Elements vom aufrufenden Thread abweicht, um den Aufruf an den richtigen Thread zu Mars Hallen.  
  
> [!NOTE]
>  Das <xref:System.Security.Permissions.HostProtectionAttribute> auf diese Klasse angewendete-Attribut <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> besitzt den folgenden <xref:System.Security.Permissions.HostProtectionResource.Synchronization> -Eigenschafts Wert: &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. Das <xref:System.Security.Permissions.HostProtectionAttribute> hat keine Auswirkungen auf Desktopanwendungen (die normalerweise durch Doppelklicken auf ein Symbol, Eingeben eines Befehls oder einer URL in einem Browser gestartet werden). Weitere Informationen finden Sie unter der <xref:System.Security.Permissions.HostProtectionAttribute> -Klasse oder [SQL Server-Programmier-und Host Schutz Attributen](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">Ein <see cref="T:System.Delegate" /> einer Methode, der über dieselbe Anzahl Parameter desselben Typs verfügt, die in <paramref name="args" /> enthalten sind.</param>
        <param name="args">Ein Array vom Typ <see cref="T:System.Object" />, das als Argument an die angegebene Methode übergeben werden soll. Dies kann <see langword="null" /> sein, wenn keine Argumente benötigt werden.</param>
        <summary>Führt den Delegaten asynchron für den Thread aus, der dieses Objekt erstellt hat.</summary>
        <returns>Eine <see cref="T:System.IAsyncResult" />-Schnittstelle, die die durch Aufrufen dieser Methode gestartete asynchrone Operation darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `method` Delegat wird auf dem Thread ausgeführt, der das-Objekt erstellt hat, und nicht <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> auf dem Thread, in dem aufgerufen wurde.  
  
 Der Delegat wird asynchron aufgerufen, und diese Methode wird sofort zurückgegeben. Sie können diese Methode von einem beliebigen Thread aus abrufen. Wenn Sie den Rückgabewert von einem Prozess benötigen, der mit dieser Methode gestartet <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> wurde, wird aufgerufen, um den Wert abzurufen.  
  
 Wenn Sie den Delegaten synchron aufzurufen müssen, verwenden Sie <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> stattdessen die-Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Eine <see cref="T:System.IAsyncResult" />-Schnittstelle, die die durch einen Aufruf von <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> gestartete asynchrone Operation darstellt.</param>
        <summary>Wartet, bis der durch einen Aufruf von <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> gestartete Prozess abgeschlossen ist, und gibt anschließend den vom Prozess generierten Wert zurück.</summary>
        <returns>Ein <see cref="T:System.Object" />, das den durch die asynchrone Operation generierten Rückgabewert darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft den Rückgabewert des asynchronen Vorgangs ab, der durch <xref:System.IAsyncResult> die von dieser Schnittstelle bestandene-Methode dargestellt wird. Wenn der asynchrone Vorgang nicht abgeschlossen wurde, wartet diese Methode, bis das Ergebnis verfügbar ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">Ein <see cref="T:System.Delegate" />, der eine aufzurufende Methode im Threadkontext für das Steuerelement enthält.</param>
        <param name="args">Ein Array vom Typ <see cref="T:System.Object" />, das die an die angegebene Methode zu übergebenden Argumente darstellt. Dies kann <see langword="null" /> sein, wenn keine Argumente benötigt werden.</param>
        <summary>Führt den Delegaten synchron für den Thread aus, der dieses Objekt erstellt hat, und marshallt den Aufruf in den erstellenden Thread.</summary>
        <returns>Ein <see cref="T:System.Object" />, das den Rückgabewert des aufgerufenen Delegaten darstellt, oder <see langword="null" />, wenn der Delegat keinen Wert zurückgibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>Gegensatz dazu wird diese Methode synchron ausgeführt, d. h., Sie wartet, bis der Prozess abgeschlossen ist, bevor Sie zurückkehrt. Während des Aufrufens ausgelösten Ausnahmen werden an den Aufrufer zurückgegeben.  
  
 Verwenden Sie diese Methode, wenn Sie eine Methode von einem anderen Thread aufrufen, um den Aufruf an den richtigen Thread zu Mars Hallen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Aufrufer <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> beim Aufruf eines Objekts aufrufen muss, das diese Schnittstelle implementiert.</summary>
        <value><see langword="true" />, wenn der Aufrufer <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> aufrufen muss, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft bestimmt, ob der Aufrufer aufrufen <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> muss, wenn Methodenaufrufe an ein Objekt durchführen, das diese Schnittstelle implementiert. Solche Objekte werden an einen bestimmten Thread gebunden und sind nicht Thread sicher. Wenn Sie eine Methode von einem anderen Thread aufrufen, müssen Sie die- <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Methode verwenden, um den Aufruf an den richtigen Thread zu Mars Hallen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

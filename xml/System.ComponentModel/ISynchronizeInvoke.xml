<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISynchronizeInvoke.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac5648d586e03aebeb7db72bd148861e02bc6f37.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac5648d586e03aebeb7db72bd148861e02bc6f37</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Provides a way to synchronously or asynchronously execute a delegate.</source>
          <target state="translated">Ermöglicht das synchrone oder asynchrone Ausführen eines Delegaten.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> -Schnittstelle enthält synchrone und asynchrone Kommunikation zwischen Objekten über das Eintreten eines Ereignisses.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</source>
          <target state="translated">Objekte, die diese Schnittstelle implementieren, können Benachrichtigung erhalten, die ein Ereignis aufgetreten ist, und auf Abfragen über das Ereignis reagieren.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</source>
          <target state="translated">Auf diese Weise können Clients sicherstellen, dass eine Anforderung verarbeitet wurde, bevor sie eine nachfolgende Anforderung senden, die bei Abschluss des ersten abhängig ist.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> class provides two ways to invoke a process:</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> Klasse bietet zwei Möglichkeiten, um einen Prozess aufzurufen:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Asynchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">Asynchron ausgeführt wird, mithilfe der <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> starts a process and then returns immediately.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> Startet einen Prozess aus, und klicken Sie dann sofort beendet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to wait until the process started by <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completes.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> zu warten, bis der Prozess gestartet, indem <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Synchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">Synchron, mithilfe der <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> starts a process, waits until it completes, and then returns.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> Startet einen Prozess wartet, bis er abgeschlossen wurde und dann zurück.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> bei der Hauptthread des Steuerelements Thread unterscheidet sich von der aufrufende Thread den Aufruf an den richtigen Thread zu marshallen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attribute applied to this class has the following <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> property value: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> auf diese Klasse angewendete Attribut verfügt über die folgenden <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> Eigenschaftswert: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</source>
          <target state="translated">Das <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> hat keine Auswirkungen auf Desktopanwendungen (die normalerweise durch Doppelklicken auf ein Symbol, Eingeben eines Befehls oder einer URL in einem Browser gestartet werden).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> class or <bpt id="p1">[</bpt>SQL Server Programming and Host Protection Attributes<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter der <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> Klasse oder <bpt id="p1">[</bpt>SQL Server-Programmierung und Hostschutzattribute<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> to a method that takes parameters of the same number and type that are contained in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> einer Methode, der über dieselbe Anzahl Parameter desselben Typs verfügt, die in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> enthalten sind.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to pass as arguments to the given method.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das als Argument an die angegebene Methode übergeben werden soll.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Dies kann <ph id="ph1">&lt;see langword="null" /&gt;</ph> sein, wenn keine Argumente benötigt werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>Asynchronously executes the delegate on the thread that created this object.</source>
          <target state="translated">Führt den Delegaten asynchron für den Thread aus, der dieses Objekt erstellt hat.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling this method.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Schnittstelle, die die durch Aufrufen dieser Methode gestartete asynchrone Operation darstellt.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The <ph id="ph1">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> was called.</source>
          <target state="translated">Die <ph id="ph1">`method`</ph> Delegaten für den Thread, der der objekterstellung nicht auf dem Thread auf dem ausgeführt wird <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">Der Delegat wird asynchron aufgerufen, und diese Methode wird sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call this method from any thread.</source>
          <target state="translated">Sie können diese Methode von jedem Thread aufrufen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need the return value from a process started with this method, call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to get the value.</source>
          <target state="translated">Wenn den Rückgabewert von einem Prozess mit dieser Methode gestartet werden sollen, rufen <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> , den Wert abzurufen.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need to call the delegate synchronously, use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method instead.</source>
          <target state="translated">Wenn Sie den Delegaten synchron aufrufen müssen, verwenden Sie die <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> Methode stattdessen.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Schnittstelle, die die durch einen Aufruf von <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> gestartete asynchrone Operation darstellt.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>Waits until the process started by calling <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> completes, and then returns the value generated by the process.</source>
          <target state="translated">Wartet, bis der durch einen Aufruf von <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> gestartete Prozess abgeschlossen ist, und gibt anschließend den vom Prozess generierten Wert zurück.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value generated by the asynchronous operation.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das den durch die asynchrone Operation generierten Rückgabewert darstellt.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>This method gets the return value of the asynchronous operation represented by the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passed by this interface.</source>
          <target state="translated">Diese Methode ruft den Rückgabewert des asynchronen Vorgangs, dargestellt durch die <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> von dieser Schnittstelle übergeben.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>If the asynchronous operation has not completed, this method will wait until the result is available.</source>
          <target state="translated">Wenn der asynchrone Vorgang nicht abgeschlossen wurde, wird diese Methode warten, bis das Ergebnis verfügbar ist.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> that contains a method to call, in the context of the thread for the control.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph>, der eine aufzurufende Methode im Threadkontext für das Steuerelement enthält.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the arguments to pass to the given method.</source>
          <target state="translated">Ein Array vom Typ <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das die an die angegebene Methode zu übergebenden Argumente darstellt.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Dies kann <ph id="ph1">&lt;see langword="null" /&gt;</ph> sein, wenn keine Argumente benötigt werden.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</source>
          <target state="translated">Führt den Delegaten synchron für den Thread aus, der dieses Objekt erstellt hat, und marshallt den Aufruf in den erstellenden Thread.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value from the delegate being invoked, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das den Rückgabewert des aufgerufenen Delegaten darstellt, oder <ph id="ph2">&lt;see langword="null" /&gt;</ph>, wenn der Delegat keinen Wert zurückgibt.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Unlike <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, this method operates synchronously, that is, it waits until the process completes before returning.</source>
          <target state="translated">Im Gegensatz zu <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, diese Methode erfolgt synchron, d. h. es wartet, bis alle Vorgänge vor der Rückgabe abgeschlossen.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Exceptions raised during the call are propagated back to the caller.</source>
          <target state="translated">Während des Aufrufs ausgelöste Ausnahmen werden zurück an den Aufrufer weitergegeben.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Use this method when calling a method from a different thread to marshal the call to the proper thread.</source>
          <target state="translated">Verwenden Sie diese Methode beim Aufrufen einer Methode von einem anderen Thread, um den Aufruf an den richtigen Thread zu marshallen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Gets a value indicating whether the caller must call <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> when calling an object that implements this interface.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob der Aufrufer <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> beim Aufruf eines Objekts aufrufen muss, das diese Schnittstelle implementiert.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the caller must call <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Aufrufer <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> aufrufen muss, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>This property determines whether the caller must call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when making method calls to an object that implements this interface.</source>
          <target state="translated">Diese Eigenschaft bestimmt, ob der Anrufer muss <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> Wenn Methodenaufrufe an ein Objekt, das diese Schnittstelle implementiert.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Such objects are bound to a specific thread and are not thread-safe.</source>
          <target state="translated">Solche Objekte sind für einen bestimmten Thread gebunden, und es sind nicht threadsicher.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>If you are calling a method from a different thread, you must use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method to marshal the call to the proper thread.</source>
          <target state="translated">Wenn Sie eine Methode aus einem anderen Thread aufrufen, müssen Sie verwenden die <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> Methode, um den Aufruf an den richtigen Thread zu marshallen.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
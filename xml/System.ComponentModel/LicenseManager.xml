<Type Name="LicenseManager" FullName="System.ComponentModel.LicenseManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="661debeda369fef96603a9a84e197478c4586e07" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77230991" /></Metadata><TypeSignature Language="C#" Value="public sealed class LicenseManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LicenseManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicenseManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LicenseManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicenseManager sealed" />
  <TypeSignature Language="F#" Value="type LicenseManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bf1c6-101">Stellt Eigenschaften und Methoden bereit, um einer Komponente eine Lizenz hinzuzufügen und eine <see cref="T:System.ComponentModel.LicenseProvider" />-Klasse zu verwalten.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-101">Provides properties and methods to add a license to a component and to manage a <see cref="T:System.ComponentModel.LicenseProvider" />.</span></span> <span data-ttu-id="bf1c6-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-103">Die <xref:System.ComponentModel.LicenseManager>-Klasse stellt die folgenden `static` Eigenschaften bereit: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> und <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-103">The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span></span> <span data-ttu-id="bf1c6-104">Die-Klasse stellt außerdem die folgenden `static` Methoden bereit: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>und <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-104">The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span></span>  
  
 <span data-ttu-id="bf1c6-105">Wenn Sie eine Komponente erstellen, die Sie lizenzieren möchten, müssen Sie die folgenden Schritte ausführen:</span><span class="sxs-lookup"><span data-stu-id="bf1c6-105">When you create a component that you want to license, you must do the following:</span></span>  
  
1.  <span data-ttu-id="bf1c6-106">Geben Sie die <xref:System.ComponentModel.LicenseProvider> an, indem Sie die Komponente mit einer <xref:System.ComponentModel.LicenseProviderAttribute>markieren.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-106">Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.</span></span>  
  
2.  <span data-ttu-id="bf1c6-107">Ruft <xref:System.ComponentModel.LicenseManager.Validate%2A> oder <xref:System.ComponentModel.LicenseManager.IsValid%2A> im Konstruktor der Komponente auf.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-107">Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component.</span></span> <span data-ttu-id="bf1c6-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> löst eine <xref:System.ComponentModel.LicenseException> aus, wenn versucht wird, eine Instanz ohne gültige Lizenz zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license.</span></span> <span data-ttu-id="bf1c6-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> löst keine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.</span></span>  
  
3.  <span data-ttu-id="bf1c6-110">Ruft <xref:System.ComponentModel.License.Dispose%2A> für jede Lizenz auf, die gewährt wird, wenn die Komponente verworfen oder fertiggestellt wird.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-110">Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.</span></span>  
  
 <span data-ttu-id="bf1c6-111">Weitere Informationen zur Lizenzierung finden Sie unter Gewusst [wie: Lizenzieren von Komponenten und Steuerelementen](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/fe8b1eh9(v=vs.120)).</span><span class="sxs-lookup"><span data-stu-id="bf1c6-111">For more information on licensing, see [How to: License Components and Controls](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/fe8b1eh9(v=vs.120)).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf1c6-112">Im folgenden Codebeispiel wird mithilfe der <xref:System.ComponentModel.LicenseManager.Validate%2A>-Methode ein lizenziertes Steuerelement erstellt.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-112">The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="bf1c6-113">Er verwendet eine <xref:System.ComponentModel.LicenseProvider>, die von der <xref:System.ComponentModel.LicFileLicenseProvider>-Klasse implementiert wird.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-113">It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateWithContext">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bf1c6-114">Erstellt eine Instanz eines Objekttyps mit einem Lizenzkontext.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-114">Creates an instance of an object type with a license context.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-115">Eine <see cref="T:System.Type" />-Klasse, die den zu erstellenden Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-115">A <see cref="T:System.Type" /> that represents the type to create.</span></span></param>
        <param name="creationContext"><span data-ttu-id="bf1c6-116">Eine <see cref="T:System.ComponentModel.LicenseContext" />-Klasse, die angibt, wann Sie die lizenzierte Instanz verwenden können.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-116">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span></span></param>
        <summary><span data-ttu-id="bf1c6-117">Erstellt eine Instanz des angegebenen Typs, wenn ein Kontext angegeben ist, in dem Sie die lizenzierte Instanz verwenden können.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-117">Creates an instance of the specified type, given a context in which you can use the licensed instance.</span></span></summary>
        <returns><span data-ttu-id="bf1c6-118">Eine Instanz des angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-118">An instance of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-119">Die <xref:System.ComponentModel.LicenseContext>, die Sie als `creationContext`-Parameter angeben, wird als <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> für die Lebensdauer dieses <xref:System.ComponentModel.License>verwendet.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-119">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="bf1c6-120">Die <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>-Methode blockiert alle anderen Threads im <xref:System.AppDomain> daran, die <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>zu ändern, sodass sich <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> als atomarer Vorgang Verhalten kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-120">The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext * obj[] -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-121">Eine <see cref="T:System.Type" />-Klasse, die den zu erstellenden Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-121">A <see cref="T:System.Type" /> that represents the type to create.</span></span></param>
        <param name="creationContext"><span data-ttu-id="bf1c6-122">Eine <see cref="T:System.ComponentModel.LicenseContext" />-Klasse, die angibt, wann Sie die lizenzierte Instanz verwenden können.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-122">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span></span></param>
        <param name="args"><span data-ttu-id="bf1c6-123">Ein Array vom Typ <see cref="T:System.Object" />, das die Argumente für den Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-123">An array of type <see cref="T:System.Object" /> that represents the arguments for the type.</span></span></param>
        <summary><span data-ttu-id="bf1c6-124">Erstellt eine Instanz des angegebenen Typs mit den angegebenen Argumenten, wenn ein Kontext vorhanden ist, in dem Sie die lizenzierte Instanz verwenden können.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-124">Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</span></span></summary>
        <returns><span data-ttu-id="bf1c6-125">Eine Instanz des angegebenen Typs mit dem angegebenen Array von Argumenten.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-125">An instance of the specified type with the given array of arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-126">Die <xref:System.ComponentModel.LicenseContext>, die Sie als `creationContext`-Parameter angeben, wird als <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> für die Lebensdauer dieses <xref:System.ComponentModel.License>verwendet.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-126">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="bf1c6-127">Diese Methode verhindert, dass alle anderen Threads im <xref:System.AppDomain> die <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>ändern, sodass <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> sich als atomarer Vorgang verhält.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-127">This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseContext CurrentContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ComponentModel.LicenseContext CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentContext As LicenseContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseContext ^ CurrentContext { System::ComponentModel::LicenseContext ^ get(); void set(System::ComponentModel::LicenseContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.ComponentModel.LicenseContext with get, set" Usage="System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf1c6-128">Ruft die aktuelle <see cref="T:System.ComponentModel.LicenseContext" />-Klasse ab, die angibt, wann Sie das lizenzierte Objekt verwenden können, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-128">Gets or sets the current <see cref="T:System.ComponentModel.LicenseContext" />, which specifies when you can use the licensed object.</span></span></summary>
        <value><span data-ttu-id="bf1c6-129">Eine <see cref="T:System.ComponentModel.LicenseContext" />-Klasse, die angibt, wann Sie das lizenzierte Objekt verwenden können.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-129">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-130">Wenn der Benutzer eine gültige <xref:System.ComponentModel.License>anfordert, muss der Benutzer den Kontext, in dem die <xref:System.ComponentModel.License> gültig ist, an die <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType>-Methode übergeben.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-130">When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="bf1c6-131">Die von dieser Eigenschaft zurückgegebene <xref:System.ComponentModel.LicenseContext> sollte an alle <xref:System.ComponentModel.LicenseProvider> Klassen übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-131">The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bf1c6-132">Die <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />-Eigenschaft ist gegenwärtig gesperrt und kann nicht geändert werden.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-132">The <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property is currently locked and cannot be changed.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsLicensed">
      <MemberSignature Language="C#" Value="public static bool IsLicensed (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLicensed(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLicensed(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsLicensed : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsLicensed type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-133">Die <see cref="T:System.Type" />-Klasse, für die eine gültige Lizenz gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-133">The <see cref="T:System.Type" /> to find a valid license for.</span></span></param>
        <summary><span data-ttu-id="bf1c6-134">Gibt zurück, ob der angegebene Typ über eine gültige Lizenz verfügt.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-134">Returns whether the given type has a valid license.</span></span></summary>
        <returns><span data-ttu-id="bf1c6-135"><see langword="true" />, wenn der angegebene Typ lizenziert ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-135"><see langword="true" /> if the given type is licensed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsValid">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bf1c6-136">Bestimmt, ob eine gültige Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-136">Determines whether a valid license can be granted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-137">Die <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die <see cref="T:System.ComponentModel.License" />-Klasse anfordert.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-137">A <see cref="T:System.Type" /> that represents the type of object that requests the <see cref="T:System.ComponentModel.License" />.</span></span></param>
        <summary><span data-ttu-id="bf1c6-138">Bestimmt, ob für den angegebenen Typ eine gültige Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-138">Determines whether a valid license can be granted for the specified type.</span></span></summary>
        <returns><span data-ttu-id="bf1c6-139"><see langword="true" />, wenn eine gültige Lizenz erteilt werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-139"><see langword="true" /> if a valid license can be granted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-140">Die <xref:System.ComponentModel.LicenseManager.IsValid%2A>-Methode gibt `true` zurück, wenn der Typ entweder nicht lizenziert ist oder lizenziert und die Lizenz gültig ist.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-140">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid.</span></span>  
  
 <span data-ttu-id="bf1c6-141">Diese Methode löst keine <xref:System.ComponentModel.LicenseException> aus, wenn Sie keinen gültigen <xref:System.ComponentModel.License>erteilen kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-141">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="bf1c6-142">Die <xref:System.ComponentModel.LicenseManager.Validate%2A>-Methode löst Ausnahmen aus.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-142">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type, object instance, [out] class System.ComponentModel.License&amp; license) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type, System::Object ^ instance, [Runtime::InteropServices::Out] System::ComponentModel::License ^ % license);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type * obj * License -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid (type, instance, license)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="license" Type="System.ComponentModel.License" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-143">Eine <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die Lizenz anfordert.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-143">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <param name="instance"><span data-ttu-id="bf1c6-144">Ein Objekt vom angegebenen Typ oder einem Typ, der vom angegebenen Typ abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-144">An object of the specified type or a type derived from the specified type.</span></span></param>
        <param name="license"><span data-ttu-id="bf1c6-145">Eine <see cref="T:System.ComponentModel.License" />-Klasse, die eine gültige Lizenz darstellt, oder <see langword="null" />, wenn keine gültige Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-145">A <see cref="T:System.ComponentModel.License" /> that is a valid license, or <see langword="null" /> if a valid license cannot be granted.</span></span></param>
        <summary><span data-ttu-id="bf1c6-146">Bestimmt, ob für die angegebene Instanz des Typs eine gültige Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-146">Determines whether a valid license can be granted for the specified instance of the type.</span></span> <span data-ttu-id="bf1c6-147">Diese Methode erstellt eine gültige <see cref="T:System.ComponentModel.License" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-147">This method creates a valid <see cref="T:System.ComponentModel.License" />.</span></span></summary>
        <returns><span data-ttu-id="bf1c6-148"><see langword="true" />, wenn eine gültige <see cref="T:System.ComponentModel.License" />-Klasse aufgerufen werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-148"><see langword="true" /> if a valid <see cref="T:System.ComponentModel.License" /> can be granted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-149">Die <xref:System.ComponentModel.LicenseManager.IsValid%2A>-Methode gibt `true` zurück, wenn der `type`-Parameter nicht lizenziert ist, oder wenn er lizenziert ist und der `license`-Parameter gültig ist.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-149">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.</span></span>  
  
 <span data-ttu-id="bf1c6-150">Diese Methode löst keine <xref:System.ComponentModel.LicenseException> aus, wenn Sie keinen gültigen <xref:System.ComponentModel.License>erteilen kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-150">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="bf1c6-151">Die <xref:System.ComponentModel.LicenseManager.Validate%2A>-Methode löst Ausnahmen aus.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-151">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 <span data-ttu-id="bf1c6-152">Wenn der `license`-Parameter nach diesem Aufruf nicht `null` wird, muss das Objekt, das nach einem <xref:System.ComponentModel.License> fragt, die Lizenz verwerfen, indem die <xref:System.ComponentModel.License.Dispose%2A>-Methode aufgerufen wird, wenn das Objekt verworfen oder fertiggestellt wird.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-152">If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="LockContext">
      <MemberSignature Language="C#" Value="public static void LockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member LockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.LockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser"><span data-ttu-id="bf1c6-153">Das Objekt, dessen aktuellen Kontext Sie sperren möchten.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-153">The object whose current context you want to lock.</span></span></param>
        <summary><span data-ttu-id="bf1c6-154">Verhindert Änderungen an der aktuellen <see cref="T:System.ComponentModel.LicenseContext" />-Klasse des angegebenen Objekts.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-154">Prevents changes being made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-155">Verwenden Sie die <xref:System.ComponentModel.LicenseContext>, um die <xref:System.ComponentModel.License> eines Objekts zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-155">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="bf1c6-156">Diese Methode sperrt die <xref:System.ComponentModel.LicenseContext>, wodurch verhindert wird, dass die <xref:System.ComponentModel.License> abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-156">This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bf1c6-157">Der Kontext ist bereits gesperrt.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-157">The context is already locked.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnlockContext">
      <MemberSignature Language="C#" Value="public static void UnlockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnlockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnlockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnlockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member UnlockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.UnlockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser"><span data-ttu-id="bf1c6-158">Das Objekt, dessen aktuellen Kontext Sie entsperren möchten.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-158">The object whose current context you want to unlock.</span></span></param>
        <summary><span data-ttu-id="bf1c6-159">Ermöglicht Änderungen an der aktuellen <see cref="T:System.ComponentModel.LicenseContext" />-Klasse des angegebenen Objekts.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-159">Allows changes to be made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-160">Verwenden Sie die <xref:System.ComponentModel.LicenseContext>, um die <xref:System.ComponentModel.License> eines Objekts zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-160">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="bf1c6-161">Diese Methode entsperrt die <xref:System.ComponentModel.LicenseContext>, sodass der <xref:System.ComponentModel.License> abgerufen werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-161">This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bf1c6-162">Der <paramref name="contextUser" />-Parameter stellt einen anderen Benutzer dar als den in einem vorherigen Aufruf der <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />-Methode angegebenen Benutzer.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-162"><paramref name="contextUser" /> represents a different user than the one specified in a previous call to <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UsageMode">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseUsageMode UsageMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ComponentModel.LicenseUsageMode UsageMode" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.UsageMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UsageMode As LicenseUsageMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseUsageMode UsageMode { System::ComponentModel::LicenseUsageMode get(); };" />
      <MemberSignature Language="F#" Value="member this.UsageMode : System.ComponentModel.LicenseUsageMode" Usage="System.ComponentModel.LicenseManager.UsageMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseUsageMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf1c6-163">Ruft die <see cref="T:System.ComponentModel.LicenseUsageMode" />-Enumeration ab, die angibt, wann Sie das lizenzierte Objekt für die <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />-Eigenschaft verwenden können.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-163">Gets the <see cref="T:System.ComponentModel.LicenseUsageMode" /> which specifies when you can use the licensed object for the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span></span></summary>
        <value><span data-ttu-id="bf1c6-164">Einer der <see cref="T:System.ComponentModel.LicenseUsageMode" />-Werte, wie in der <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />-Eigenschaft angegeben.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-164">One of the <see cref="T:System.ComponentModel.LicenseUsageMode" /> values, as specified in the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-165">Wenn diese Eigenschaft einen <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> Wert nicht finden kann, wird <xref:System.ComponentModel.LicenseUsageMode.Runtime>zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-165">If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.LicenseManager.CurrentContext" />
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bf1c6-166">Bestimmt, ob eine Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-166">Determines whether a license can be granted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Validate(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Validate : Type -&gt; unit" Usage="System.ComponentModel.LicenseManager.Validate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-167">Eine <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die Lizenz anfordert.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-167">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <summary><span data-ttu-id="bf1c6-168">Bestimmt, ob für den angegebenen Typ eine Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-168">Determines whether a license can be granted for the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-169">Diese Methode löst eine <xref:System.ComponentModel.LicenseException> aus, wenn ein gültiger <xref:System.ComponentModel.License> nicht erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-169">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="bf1c6-170">Die <xref:System.ComponentModel.LicenseManager.IsValid%2A>-Methode löst keine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-170">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException"><span data-ttu-id="bf1c6-171">Eine <see cref="T:System.ComponentModel.License" />-Klasse kann nicht aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-171">A <see cref="T:System.ComponentModel.License" /> cannot be granted.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.License Validate (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.License Validate(class System.Type type, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::License ^ Validate(Type ^ type, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Validate : Type * obj -&gt; System.ComponentModel.License" Usage="System.ComponentModel.LicenseManager.Validate (type, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="bf1c6-172">Eine <see cref="T:System.Type" />-Klasse, die den Typ des Objekts darstellt, das die Lizenz anfordert.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-172">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <param name="instance"><span data-ttu-id="bf1c6-173">Eine <see cref="T:System.Object" />-Klasse vom angegebenen Typ oder einem Typ, der vom angegebenen Typ abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-173">An <see cref="T:System.Object" /> of the specified type or a type derived from the specified type.</span></span></param>
        <summary><span data-ttu-id="bf1c6-174">Bestimmt, ob für die Instanz des angegebenen Typs eine Lizenz erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-174">Determines whether a license can be granted for the instance of the specified type.</span></span></summary>
        <returns><span data-ttu-id="bf1c6-175">Ein gültiges <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-175">A valid <see cref="T:System.ComponentModel.License" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf1c6-176">Diese Methode löst eine <xref:System.ComponentModel.LicenseException> aus, wenn ein gültiger <xref:System.ComponentModel.License> nicht erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-176">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="bf1c6-177">Die <xref:System.ComponentModel.LicenseManager.IsValid%2A>-Methode löst keine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-177">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 <span data-ttu-id="bf1c6-178">Alle Objekte, die eine <xref:System.ComponentModel.License> anfordern, müssen die Lizenz verwerfen, indem Sie die <xref:System.ComponentModel.License.Dispose%2A>-Methode aufrufen, wenn das Objekt verworfen oder fertiggestellt wird.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-178">All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException"><span data-ttu-id="bf1c6-179">Der Typ ist lizenziert, aber es konnte keine <see cref="T:System.ComponentModel.License" />-Klasse aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="bf1c6-179">The type is licensed, but a <see cref="T:System.ComponentModel.License" /> cannot be granted.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>

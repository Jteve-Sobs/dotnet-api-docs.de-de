<Type Name="INotifyPropertyChanged" FullName="System.ComponentModel.INotifyPropertyChanged">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1bfb53c43181aef54ccab022760c9828f63522d5" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51916677" /></Metadata><TypeSignature Language="C#" Value="public interface INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="VB.NET" Value="Public Interface INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public interface class INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type INotifyPropertyChanged = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Benachrichtigt Clients, dass sich ein Eigenschaftswert geändert hat.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.INotifyPropertyChanged> Schnittstelle wird verwendet, um Clients, die in der Regel binden Clients benachrichtigen, dass ein Eigenschaftswert geändert wurde.  
  
 Betrachten Sie beispielsweise eine `Person` Objekt eine Eigenschaft namens `FirstName`. Generische Eigenschaft-änderungsbenachrichtigung, zu der `Person` Typ implementiert die <xref:System.ComponentModel.INotifyPropertyChanged> -Schnittstelle und löst eine <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Ereignis beim `FirstName` geändert wird.  
  
 Für die änderungsbenachrichtigung in der eine Bindung zwischen einem gebundenen Client und einer Datenquelle auftreten sollten entweder der gebundene Typ auf:  
  
-   Implementieren der <xref:System.ComponentModel.INotifyPropertyChanged> -Schnittstelle (bevorzugt).  
  
-   Geben Sie ein Change-Ereignis, für jede Eigenschaft des gebundenen Typen aus.  
  
 Tun Sie nicht beide.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren der <xref:System.ComponentModel.INotifyPropertyChanged> Schnittstelle. Wenn Sie dieses Beispiel ausführen, werden Sie feststellen, dass die Grenze <xref:System.Windows.Forms.DataGridView> Steuerelement wird die Änderung in der Datenquelle wiedergibt, ohne dass die Bindung, die zurückgesetzt werden.  
  
 Wenn Sie das `CallerMemberName`-Attribut verwenden, müssen Aufrufe der `NotifyPropertyChanged`-Methode den Eigenschaftennamen nicht als Zeichenfolgenargument angeben. Weitere Informationen finden Sie unter [Aufruferinformationen](https://msdn.microsoft.com/library/9cb2b8c0-c4f6-44b8-9c90-38948455b373).  
  
 Ersetzen Sie den Code in Ihre Form1, durch den folgenden Code ein, und ändern Sie den Namespace auf den Namen des Projekts. Als Alternative können Sie Ihr Projekt mit dem Namespacenamen unten benennen, bei der Erstellung.  
  
```csharp  
using System;  
using System.Collections.Generic;  
using System.ComponentModel;  
using System.Drawing;  
using System.Runtime.CompilerServices;  
using System.Windows.Forms;  
  
// Either change the following namespace to the name of your project,   
// or name your project with the following name when you create it.  
namespace TestNotifyPropertyChangedCS  
{  
    // This form demonstrates using a BindingSource to bind  
    // a list to a DataGridView control. The list does not  
    // raise change notifications. However the DemoCustomer type   
    // in the list does.  
    public partial class Form1 : Form  
    {  
        // This button causes the value of a list element to be changed.  
        private Button changeItemBtn = new Button();  
  
        // This DataGridView control displays the contents of the list.  
        private DataGridView customersDataGridView = new DataGridView();  
  
        // This BindingSource binds the list to the DataGridView control.  
        private BindingSource customersBindingSource = new BindingSource();  
  
        public Form1()  
        {  
            InitializeComponent();  
  
            // Set up the "Change Item" button.  
            this.changeItemBtn.Text = "Change Item";  
            this.changeItemBtn.Dock = DockStyle.Bottom;  
            this.changeItemBtn.Click +=  
                new EventHandler(changeItemBtn_Click);  
            this.Controls.Add(this.changeItemBtn);  
  
            // Set up the DataGridView.  
            customersDataGridView.Dock = DockStyle.Top;  
            this.Controls.Add(customersDataGridView);  
  
            this.Size = new Size(400, 200);  
        }  
  
        private void Form1_Load(object sender, EventArgs e)  
        {  
            // Create and populate the list of DemoCustomer objects  
            // which will supply data to the DataGridView.  
            BindingList<DemoCustomer> customerList = new BindingList<DemoCustomer>();  
            customerList.Add(DemoCustomer.CreateNewCustomer());  
            customerList.Add(DemoCustomer.CreateNewCustomer());  
            customerList.Add(DemoCustomer.CreateNewCustomer());  
  
            // Bind the list to the BindingSource.  
            this.customersBindingSource.DataSource = customerList;  
  
            // Attach the BindingSource to the DataGridView.  
            this.customersDataGridView.DataSource =  
                this.customersBindingSource;  
  
        }  
  
        // Change the value of the CompanyName property for the first   
        // item in the list when the "Change Item" button is clicked.  
        void changeItemBtn_Click(object sender, EventArgs e)  
        {  
            // Get a reference to the list from the BindingSource.  
            BindingList<DemoCustomer> customerList =  
                this.customersBindingSource.DataSource as BindingList<DemoCustomer>;  
  
            // Change the value of the CompanyName property for the   
            // first item in the list.  
            customerList[0].CustomerName = "Tailspin Toys";  
            customerList[0].PhoneNumber = "(708)555-0150";  
        }  
  
    }  
  
    // This is a simple customer class that   
    // implements the IPropertyChange interface.  
    public class DemoCustomer : INotifyPropertyChanged  
    {  
        // These fields hold the values for the public properties.  
        private Guid idValue = Guid.NewGuid();  
        private string customerNameValue = String.Empty;  
        private string phoneNumberValue = String.Empty;  
  
        public event PropertyChangedEventHandler PropertyChanged;  
  
        // This method is called by the Set accessor of each property.  
        // The CallerMemberName attribute that is applied to the optional propertyName  
        // parameter causes the property name of the caller to be substituted as an argument.  
        private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")  
        {  
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }  
  
        // The constructor is private to enforce the factory pattern.  
        private DemoCustomer()  
        {  
            customerNameValue = "Customer";  
            phoneNumberValue = "(312)555-0100";  
        }  
  
        // This is the public factory method.  
        public static DemoCustomer CreateNewCustomer()  
        {  
            return new DemoCustomer();  
        }  
  
        // This property represents an ID, suitable  
        // for use as a primary key in a database.  
        public Guid ID  
        {  
            get  
            {  
                return this.idValue;  
            }  
        }  
  
        public string CustomerName  
        {  
            get  
            {  
                return this.customerNameValue;  
            }  
  
            set  
            {  
                if (value != this.customerNameValue)  
                {  
                    this.customerNameValue = value;  
                    NotifyPropertyChanged();  
                }  
            }  
        }  
  
        public string PhoneNumber  
        {  
            get  
            {  
                return this.phoneNumberValue;  
            }  
  
            set  
            {  
                if (value != this.phoneNumberValue)  
                {  
                    this.phoneNumberValue = value;  
                    NotifyPropertyChanged();  
                }  
            }  
        }  
    }  
}  
```  
  
```vb  
Imports System  
Imports System.Collections.Generic  
Imports System.ComponentModel  
Imports System.Drawing  
Imports System.Runtime.CompilerServices  
Imports System.Windows.Forms  
  
' This form demonstrates using a BindingSource to bind  
' a list to a DataGridView control. The list does not  
' raise change notifications. However the DemoCustomer type   
' in the list does.  
  
Public Class Form1  
    Inherits System.Windows.Forms.Form  
    ' This button causes the value of a list element to be changed.  
    Private changeItemBtn As New Button()  
  
    ' This DataGridView control displays the contents of the list.  
    Private customersDataGridView As New DataGridView()  
  
    ' This BindingSource binds the list to the DataGridView control.  
    Private customersBindingSource As New BindingSource()  
  
    Public Sub New()  
        InitializeComponent()  
  
        ' Set up the "Change Item" button.  
        Me.changeItemBtn.Text = "Change Item"  
        Me.changeItemBtn.Dock = DockStyle.Bottom  
        AddHandler Me.changeItemBtn.Click, AddressOf changeItemBtn_Click  
        Me.Controls.Add(Me.changeItemBtn)  
  
        ' Set up the DataGridView.  
        customersDataGridView.Dock = DockStyle.Top  
        Me.Controls.Add(customersDataGridView)  
  
        Me.Size = New Size(400, 200)  
    End Sub  
  
    Private Sub Form1_Load(ByVal sender As System.Object, _  
        ByVal e As System.EventArgs) Handles Me.Load  
  
        ' Create and populate the list of DemoCustomer objects  
        ' which will supply data to the DataGridView.  
        Dim customerList As New BindingList(Of DemoCustomer)  
  
        customerList.Add(DemoCustomer.CreateNewCustomer())  
        customerList.Add(DemoCustomer.CreateNewCustomer())  
        customerList.Add(DemoCustomer.CreateNewCustomer())  
  
        ' Bind the list to the BindingSource.  
        Me.customersBindingSource.DataSource = customerList  
  
        ' Attach the BindingSource to the DataGridView.  
        Me.customersDataGridView.DataSource = Me.customersBindingSource  
    End Sub  
  
    ' This event handler changes the value of the CompanyName  
    ' property for the first item in the list.  
    Private Sub changeItemBtn_Click(ByVal sender As Object, ByVal e As EventArgs)  
        ' Get a reference to the list from the BindingSource.  
        Dim customerList As BindingList(Of DemoCustomer) = _  
            CType(customersBindingSource.DataSource, BindingList(Of DemoCustomer))  
  
        ' Change the value of the CompanyName property for the   
        ' first item in the list.  
        customerList(0).CustomerName = "Tailspin Toys"  
        customerList(0).PhoneNumber = "(708)555-0150"  
    End Sub  
End Class  
  
' This class implements a simple customer type   
' that implements the IPropertyChange interface.  
  
Public Class DemoCustomer  
    Implements INotifyPropertyChanged  
  
    ' These fields hold the values for the public properties.  
    Private idValue As Guid = Guid.NewGuid()  
    Private customerNameValue As String = String.Empty  
    Private phoneNumberValue As String = String.Empty  
  
    Public Event PropertyChanged As PropertyChangedEventHandler _  
        Implements INotifyPropertyChanged.PropertyChanged  
  
    ' This method is called by the Set accessor of each property.  
    ' The CallerMemberName attribute that is applied to the optional propertyName  
    ' parameter causes the property name of the caller to be substituted as an argument.  
    Private Sub NotifyPropertyChanged(<CallerMemberName()> Optional ByVal propertyName As String = Nothing)  
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))  
    End Sub  
  
    ' The constructor is private to enforce the factory pattern.  
    Private Sub New()  
        customerNameValue = "Customer"  
        phoneNumberValue = "(312)555-0100"  
    End Sub  
  
    ' This is the public factory method.  
    Public Shared Function CreateNewCustomer() As DemoCustomer  
        Return New DemoCustomer()  
    End Function  
  
    ' This property represents an ID, suitable  
    ' for use as a primary key in a database.  
    Public ReadOnly Property ID() As Guid  
        Get  
            Return Me.idValue  
        End Get  
    End Property  
  
    Public Property CustomerName() As String  
        Get  
            Return Me.customerNameValue  
        End Get  
  
        Set(ByVal value As String)  
            If Not (value = customerNameValue) Then  
                Me.customerNameValue = value  
                NotifyPropertyChanged()  
            End If  
        End Set  
    End Property  
  
    Public Property PhoneNumber() As String  
        Get  
            Return Me.phoneNumberValue  
        End Get  
  
        Set(ByVal value As String)  
            If Not (value = phoneNumberValue) Then  
                Me.phoneNumberValue = value  
                NotifyPropertyChanged()  
            End If  
        End Set  
    End Property  
End Class  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Event PropertyChanged As PropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn sich ein Eigenschaftswert ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Ereignis kann darauf hinweisen, alle Eigenschaften des Objekts wurden geändert, indem Sie entweder `null` oder <xref:System.String.Empty?displayProperty=nameWithType> als der Name der Eigenschaft in der <xref:System.ComponentModel.PropertyChangedEventArgs>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren der <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Ereignis die <xref:System.ComponentModel.INotifyPropertyChanged> Schnittstelle.  
  
 [!code-csharp[System.ComponentModel.IPropertyChangeExample#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.IPropertyChangeExample/CS/Form1.cs#9)]
 [!code-vb[System.ComponentModel.IPropertyChangeExample#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.IPropertyChangeExample/VB/Form1.vb#9)]
    
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyChangedEventArgs" />
      </Docs>
    </Member>
  </Members>
</Type>
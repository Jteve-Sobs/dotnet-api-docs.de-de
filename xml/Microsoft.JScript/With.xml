<Type Name="With" FullName="Microsoft.JScript.With">
  <TypeSignature Language="C#" Value="public sealed class With : Microsoft.JScript.AST" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit With extends Microsoft.JScript.AST" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.With" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class With&#xA;Inherits AST" />
  <TypeSignature Language="C++ CLI" Value="public ref class With sealed : Microsoft::JScript::AST" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.JScript.AST</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4ee5e-101">Stellt die <see langword="with" />-Anweisung dar.</span><span class="sxs-lookup"><span data-stu-id="4ee5e-101">Represents the <see langword="with" /> statement.</span></span> <span data-ttu-id="4ee5e-102">Diese Klasse gehört zur Kategorie für abstrakte Syntaxstrukturen.</span><span class="sxs-lookup"><span data-stu-id="4ee5e-102">This class belongs to the abstract syntax tree category.</span></span></summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
    <altmember cref="T:Microsoft.JScript.Globals" />
  </Docs>
  <Members>
    <Member MemberName="JScriptWith">
      <MemberSignature Language="C#" Value="public static object JScriptWith (object withOb, Microsoft.JScript.Vsa.VsaEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object JScriptWith(object withOb, class Microsoft.JScript.Vsa.VsaEngine engine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.With.JScriptWith(System.Object,Microsoft.JScript.Vsa.VsaEngine)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JScriptWith (withOb As Object, engine As VsaEngine) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ JScriptWith(System::Object ^ withOb, Microsoft::JScript::Vsa::VsaEngine ^ engine);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withOb" Type="System.Object" />
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
      </Parameters>
      <Docs>
        <param name="withOb"><span data-ttu-id="4ee5e-103">Das Standardobjekt.</span><span class="sxs-lookup"><span data-stu-id="4ee5e-103">The default object.</span></span></param>
        <param name="engine"><span data-ttu-id="4ee5e-104">Ein Verweis auf das Skriptmodul.</span><span class="sxs-lookup"><span data-stu-id="4ee5e-104">A reference to the scripting engine.</span></span></param>
        <summary><span data-ttu-id="4ee5e-105">Richtet das Standardobjekt für einen <see langword="with" />-Anweisungsblock ein, indem dieses dem Bereichsstapel hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="4ee5e-105">Establishes the default object for a <see langword="with" /> statement block by adding it to the scope stack.</span></span></summary>
        <returns>
          <span data-ttu-id="4ee5e-106"><paramref name="withOb" />, konvertiert in ein Objekt.</span><span class="sxs-lookup"><span data-stu-id="4ee5e-106"><paramref name="withOb" /> converted to an object.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.Globals" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="66e914a30fcef7a41bbb9be46f214cbcc40fd42e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39832496" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert Methoden zur Auswertung von Ausdrücken und Analyse von Zeichenfolgen. Diese Schnittstelle wird typischerweise von einem Objekt implementiert, das einen Codeblock darstellt, und meist von einem Debugger aufgerufen. Diese Schnittstelle bietet zusätzliche Funktionen, die von einem IActiveScript-Host benötigt werden.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wertet bei Implementierung in einer Klasse den Block, den Ausdruck oder die Anweisung aus, der bzw. die durch das Codeelement dargestellt wird, und gibt den Wert zurück. Wird normalerweise von einem Debugger aufgerufen, der einen Ausdruck auswerten muss (z. B. in einem Überwachungsfenster). Für Ausdrücke ist der Wert das Ergebnis des Ausdrucks. Für Blöcke und Anweisungen ist der Ausdruck der letzte vom Block oder der Anweisung berechnete Ausdruck.</summary>
        <returns>Gibt einen Wert zurück, der die Auswertung der Anweisung, des Ausdrucks oder des Block darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass die <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> Methode entspricht funktionell dem <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> Methode. Nur die Marshalling Attribute unterscheiden sich. Diese Version der Schnittstelle ermöglicht es, einen nicht verwalteten Debugger zum Abrufen des Rückgabewert als ein `IUnknown` Zeiger anstelle eines `VARIANT`.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string *  *  *  *  *  -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32" RefType="out" />
        <Parameter Name="arguments" Type="System.String" RefType="out" />
        <Parameter Name="returnType" Type="System.String" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine wohlgeformte benannte Haltepunktzeichenfolge, die eine Funktion, eine optionale Argumentliste und einen optionalen IL-Offset ausgibt.</param>
        <param name="functionName">Ein out-Parameter, der den Namen der aus der analysierten Eingabezeichenfolge ausgegebenen Funktion zurückgibt, oder die leere Zeichenfolge, wenn die Eingabezeichenfolge nicht wohlgeformt ist.</param>
        <param name="nargs">Ein out-Parameter, der die Anzahl der Argumenten in der optionalen Argumentliste zurückgibt. Gibt 0 (null) zurück, wenn keine Argumentliste vorhanden ist, oder wenn die Zeichenfolge nicht wohlgeformt ist.</param>
        <param name="arguments">Ein out-Parameter, der eine durch Leerzeichen getrennte Liste aller Argumenttypen in der Argumentliste zurückgibt, oder eine leere Zeichenfolge, wenn die Argumentliste fehlt oder die Eingabezeichenfolge nicht wohlgeformt ist.</param>
        <param name="returnType">Ein out-Parameter, der eine Zeichenfolge zurückgibt, die den Rückgabetyp der in der Eingabe genannten Funktion enthält, oder die leere Zeichfolge, wenn der Rückgabetyp fehlt oder die Eingabezeichenfolge nicht wohlgeformt ist.</param>
        <param name="offset">Eine long-Ganzzahl ohne Vorzeichen, die den IL-Offset aus der Eingabezeichenfolge angibt, oder 0, wenn kein IL-Offset vorhanden ist oder die Zeichenfolge nicht wohlgeformt war.</param>
        <summary>Analysiert bei Implementierung in einer Klasse Zeichenfolgen und gibt die aus der Analyse resultierenden Informationen zurück. Diese Methode wird normalerweise von einem Debugger aufgerufen, der Informationen zu einem als <see langword="string" /> dargestellten Haltepunkt analysieren muss. Für den Debugger wurde möglicherweise vom Benutzer ein Haltepunkt im Format *Funktionsname-Argumente-ILOffset* eingegeben. Eine benannte Haltepunktzeichenfolge kann ein komplexes Format besitzen, z.B. <c>F.B(C.D[], int, arg : double ) : C.Abc + 123.</c> Die Parameterliste und der IL-Offset sind optional.</summary>
        <returns>Gibt <see langword="true" /> zurück, wenn der benannte Haltepunkt erfolgreich analysiert wird; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="PeerResolver" FullName="System.ServiceModel.PeerResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fda55d2dc47eb9b0549d78f23f1f270804159402" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39747756" /></Metadata><TypeSignature Language="C#" Value="public abstract class PeerResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PeerResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.PeerResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PeerResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeerResolver abstract" />
  <TypeSignature Language="F#" Value="type PeerResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="09b5b-101">Gibt einen Basistyp an, der verwendet wird, um den Vertrag für die Registrierung und Auflösung einer Peermesh-ID zu den Endpunktadressen von Knoten im Mesh zu definieren.</span><span class="sxs-lookup"><span data-stu-id="09b5b-101">Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09b5b-102">Diese Klasse ist die Basisklasse zur Implementierung benutzerdefinierter Peernamensresolver.</span><span class="sxs-lookup"><span data-stu-id="09b5b-102">This class is the base class for the implementation of custom peer name resolvers.</span></span> <span data-ttu-id="09b5b-103">Ein Peernamensresolver ist ein Ermittlungsdienst, der von Peerkanälen zum Suchen von Peerknoten in einem Peermesh verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="09b5b-103">A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh.</span></span> <span data-ttu-id="09b5b-104">Außerdem wird er verwendet, um einen Knoten in einem Peermesh zu registrieren, wodurch der Peerknoten erkannt und im Peermesh verfügbar wird.</span><span class="sxs-lookup"><span data-stu-id="09b5b-104">It is also used to "register" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PeerResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PeerResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="09b5b-105">Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.PeerResolver" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="09b5b-105">Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolver" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanShareReferrals">
      <MemberSignature Language="C#" Value="public abstract bool CanShareReferrals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShareReferrals" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanShareReferrals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanShareReferrals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanShareReferrals : bool" Usage="System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="09b5b-106">Ruft ab, ob der Peernamensresolver Verweise freigegeben kann.</span><span class="sxs-lookup"><span data-stu-id="09b5b-106">Gets whether the peer name resolver can share referrals.</span></span></summary>
        <value><span data-ttu-id="09b5b-107">True, wenn der Peernamensresolver Verweise freigegeben kann, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="09b5b-107">If true, the peer name resolver can share referrals; if false, it cannot.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Channels.Binding binding, class System.ServiceModel.Description.ClientCredentials credentials, valuetype System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Channels::Binding ^ binding, System::ServiceModel::Description::ClientCredentials ^ credentials, System::ServiceModel::PeerResolvers::PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit&#xA;override this.Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit" Usage="peerResolver.Initialize (address, binding, credentials, referralPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="credentials" Type="System.ServiceModel.Description.ClientCredentials" />
        <Parameter Name="referralPolicy" Type="System.ServiceModel.PeerResolvers.PeerReferralPolicy" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="09b5b-108">Die <see cref="T:System.ServiceModel.EndpointAddress" />, die die neue Endpunktadresse dieser Peerresolverinstanz enthält.</span><span class="sxs-lookup"><span data-stu-id="09b5b-108"><see cref="T:System.ServiceModel.EndpointAddress" /> that contains the new endpoint address of this peer resolver instance.</span></span></param>
        <param name="binding"><span data-ttu-id="09b5b-109">Die <see cref="T:System.ServiceModel.Channels.Binding" />, die die neue Netzwerkbindung für diesen Peerresolver angibt.</span><span class="sxs-lookup"><span data-stu-id="09b5b-109"><see cref="T:System.ServiceModel.Channels.Binding" /> that specifies the new network binding for this peer resolver.</span></span></param>
        <param name="credentials"><span data-ttu-id="09b5b-110">Die <see cref="T:System.ServiceModel.Description.ClientCredentials" />, die die neuen Clientanmeldeinformationen für diesen Peerresolver angeben.</span><span class="sxs-lookup"><span data-stu-id="09b5b-110"><see cref="T:System.ServiceModel.Description.ClientCredentials" /> that specifies the new client credentials for this peer resolver.</span></span></param>
        <param name="referralPolicy"><span data-ttu-id="09b5b-111">Die <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />, die die neue Verweisrichtlinie für diesen Peerresolver angibt.</span><span class="sxs-lookup"><span data-stu-id="09b5b-111"><see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" /> that specifies the new referral policy for this peer resolver.</span></span></param>
        <summary><span data-ttu-id="09b5b-112">Initialisiert die aktuelle Peerresolverinstanz mit der angegebenen Endpunktadresse und den angegebenen Einstellungen.</span><span class="sxs-lookup"><span data-stu-id="09b5b-112">Initializes the current peer resolver instance with the new supplied endpoint address and settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09b5b-113">Mit dieser Methode wird lediglich die vorhandene Peerresolverinstanz initialisiert, aber keine neue erstellt.</span><span class="sxs-lookup"><span data-stu-id="09b5b-113">This method simply initializes the existing peer resolver instance; it does not create a new one.</span></span> <span data-ttu-id="09b5b-114">Um einen neuen Peerresolver zu erstellen, rufen Sie die CreatePeerResolver-Methode für das entsprechende Bindungselement auf (beispielsweise <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).</span><span class="sxs-lookup"><span data-stu-id="09b5b-114">To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Register(string meshId, class System.ServiceModel.PeerNodeAddress nodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Register (meshId As String, nodeAddress As PeerNodeAddress, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Register(System::String ^ meshId, System::ServiceModel::PeerNodeAddress ^ nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Register : string * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; obj" Usage="peerResolver.Register (meshId, nodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="nodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId"><span data-ttu-id="09b5b-115">Die ID des Peermeshs, in dem der Peerknoten registriert werden soll.</span><span class="sxs-lookup"><span data-stu-id="09b5b-115">The ID of the peer mesh in which the peer node is to be registered.</span></span></param>
        <param name="nodeAddress"><span data-ttu-id="09b5b-116">Die <see cref="T:System.ServiceModel.PeerNodeAddress" />, die im Peermesh registriert werden soll.</span><span class="sxs-lookup"><span data-stu-id="09b5b-116">The <see cref="T:System.ServiceModel.PeerNodeAddress" /> to be registered with the peer mesh.</span></span></param>
        <param name="timeout"><span data-ttu-id="09b5b-117">Die Zeit, die gewartet werden soll, bevor der Versuch einer Registrierung im Peermesh abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="09b5b-117">The length of time to wait for success before aborting the attempt to register with the peer mesh.</span></span> <span data-ttu-id="09b5b-118">Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="09b5b-118">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="09b5b-119">Registriert eine <see cref="T:System.ServiceModel.PeerNodeAddress" /> in einem bestimmten Peermesh.</span><span class="sxs-lookup"><span data-stu-id="09b5b-119">Registers a <see cref="T:System.ServiceModel.PeerNodeAddress" /> for a specific peer mesh.</span></span></summary>
        <returns><span data-ttu-id="09b5b-120">Ein <see cref="T:System.Object" />, das die Registrierungs-ID darstellt.</span><span class="sxs-lookup"><span data-stu-id="09b5b-120">An <see cref="T:System.Object" /> that represents the registration ID.</span></span> <span data-ttu-id="09b5b-121">Dieses Registrierungs-ID-Objekt wird an die <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />-Methode und die <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />-Methode übergeben.</span><span class="sxs-lookup"><span data-stu-id="09b5b-121">This registration ID object is passed to the <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> and <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" /> methods.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt; Resolve (string meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ServiceModel.PeerNodeAddress&gt; Resolve(string meshId, int32 maxAddresses, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Resolve (meshId As String, maxAddresses As Integer, timeout As TimeSpan) As ReadOnlyCollection(Of PeerNodeAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ServiceModel::PeerNodeAddress ^&gt; ^ Resolve(System::String ^ meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string * int * TimeSpan -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;" Usage="peerResolver.Resolve (meshId, maxAddresses, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="maxAddresses" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId"><span data-ttu-id="09b5b-122">Die Mesh-ID des Peermeshs, in dem die <see cref="T:System.ServiceModel.PeerNodeAddress" />-Objekte abgerufen werden sollen, die Knoten im Peermesh darstellen.</span><span class="sxs-lookup"><span data-stu-id="09b5b-122">The mesh ID of the peer mesh within which the <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects representing participating nodes are to be obtained.</span></span></param>
        <param name="maxAddresses"><span data-ttu-id="09b5b-123">Die Anzahl zurückzugebender Endpunktadressen.</span><span class="sxs-lookup"><span data-stu-id="09b5b-123">The number of endpoint addresses to return.</span></span></param>
        <param name="timeout"><span data-ttu-id="09b5b-124">Die Zeit, die gewartet werden soll, bevor der Versuch einer Auflösung der Endpunktadressen im Peermesh abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="09b5b-124">The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh.</span></span> <span data-ttu-id="09b5b-125">Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="09b5b-125">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="09b5b-126">Löst die angegebene Mesh-ID in null oder mehr Endpunktadressen von Knoten im Peermesh auf.</span><span class="sxs-lookup"><span data-stu-id="09b5b-126">Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.</span></span></summary>
        <returns><span data-ttu-id="09b5b-127">Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, die <see cref="T:System.ServiceModel.PeerNodeAddress" />-Objekte enthält, die Knoten im Peermesh darstellen.</span><span class="sxs-lookup"><span data-stu-id="09b5b-127">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects representing nodes participating in the peer mesh.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public abstract void Unregister (object registrationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unregister(object registrationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unregister (registrationId As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unregister(System::Object ^ registrationId, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Unregister : obj * TimeSpan -&gt; unit" Usage="peerResolver.Unregister (registrationId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId"><span data-ttu-id="09b5b-128">Eine Registrierungs-ID für den Knoten, der durch einen vorherigen Aufruf von <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="09b5b-128">A registration ID for the node obtained by a previous call to <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />.</span></span></param>
        <param name="timeout"><span data-ttu-id="09b5b-129">Die Zeit, die gewartet werden soll, bevor der Versuch einer Entfernung der Registrierung aus dem Peermesh abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="09b5b-129">The length of time to wait for a successful removal of the registration from the peer mesh.</span></span> <span data-ttu-id="09b5b-130">Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="09b5b-130">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="09b5b-131">Entfernt den Registrierungseintrag für einen Knoten aus einem Peermesh.</span><span class="sxs-lookup"><span data-stu-id="09b5b-131">Removes the registration entry for a node from a peer mesh.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09b5b-132">Eine Registrierungs-ID ist ein Peerresolvertoken, das mindestens das Tupel einer Peerknoten-ID und die Mesh-ID darstellt.</span><span class="sxs-lookup"><span data-stu-id="09b5b-132">A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID.</span></span> <span data-ttu-id="09b5b-133">Dieser ID-Wert muss durch einen vorherigen Aufruf von <xref:System.ServiceModel.PeerResolver.Register%2A> abgerufen worden sein.</span><span class="sxs-lookup"><span data-stu-id="09b5b-133">This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.</span></span>  
  
 <span data-ttu-id="09b5b-134"><xref:System.ServiceModel.PeerResolver.Unregister%2A> wird in zwei Fällen aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="09b5b-134"><xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:</span></span>  
  
-   <span data-ttu-id="09b5b-135">Wenn der <xref:System.ServiceModel.PeerNode> das Peermesh verlässt (normalerweise nachdem der letzte zugeordnete Peerkanal oder Diensthost beendet wurde).</span><span class="sxs-lookup"><span data-stu-id="09b5b-135">When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).</span></span>  
  
-   <span data-ttu-id="09b5b-136">Wenn der <xref:System.ServiceModel.PeerNode> keine verfügbaren Endpunktadressen anderer Knoten im Peermesh finden kann.</span><span class="sxs-lookup"><span data-stu-id="09b5b-136">When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh.</span></span> <span data-ttu-id="09b5b-137">Dadurch ist der <xref:System.ServiceModel.PeerNode> nicht mehr erreichbar und versucht einen Aufruf von <xref:System.ServiceModel.PeerResolver.Unregister%2A>, um seine Registrierung aus dem <xref:System.ServiceModel.PeerResolver> zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="09b5b-137">As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>.</span></span> <span data-ttu-id="09b5b-138">Wenn nach der Deregistrierung andere Peerknoten im Mesh verfügbar werden, kann der Knoten sich selbst wieder registrieren, indem er <xref:System.ServiceModel.PeerResolver.Register%2A> aufruft und eine neue Registrierungs-ID abruft.</span><span class="sxs-lookup"><span data-stu-id="09b5b-138">If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(object registrationId, class System.ServiceModel.PeerNodeAddress updatedNodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Update (registrationId As Object, updatedNodeAddress As PeerNodeAddress, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Update(System::Object ^ registrationId, System::ServiceModel::PeerNodeAddress ^ updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; unit" Usage="peerResolver.Update (registrationId, updatedNodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="updatedNodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId"><span data-ttu-id="09b5b-139">Ein Registrierungs-ID-Token für den Knoten, der durch einen vorherigen Aufruf von <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="09b5b-139">A registration ID token for the node, obtained by a previous call to <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /></span></span></param>
        <param name="updatedNodeAddress"><span data-ttu-id="09b5b-140">Die aktualisierte Endpunktadresse (und andere Multihoming-IP-Adressen).</span><span class="sxs-lookup"><span data-stu-id="09b5b-140">The updated endpoint address (and other multihoming IP addresses).</span></span></param>
        <param name="timeout"><span data-ttu-id="09b5b-141">Die Zeit, die gewartet werden soll, bevor der Versuch einer Aktualisierung der Knotenregistrierung im Peermesh abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="09b5b-141">The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh.</span></span> <span data-ttu-id="09b5b-142">Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="09b5b-142">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="09b5b-143">Aktualisiert die <see cref="T:System.ServiceModel.PeerNodeAddress" /> für einen Knoten, der in einem bestimmten Peermesh registriert ist.</span><span class="sxs-lookup"><span data-stu-id="09b5b-143">Updates the <see cref="T:System.ServiceModel.PeerNodeAddress" /> for a node registered with a specific peer mesh.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09b5b-144"><xref:System.ServiceModel.PeerResolver.Update%2A> wird aufgerufen, wenn sich die <xref:System.ServiceModel.PeerNode>-Adresse auf dem lokalen Computer ändert.</span><span class="sxs-lookup"><span data-stu-id="09b5b-144"><xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
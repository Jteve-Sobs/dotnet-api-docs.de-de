<Type Name="PeerResolver" FullName="System.ServiceModel.PeerResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9dd9752005bc1aec2508941678feacbd2753c1ac" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36609769" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PeerResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PeerResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.PeerResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PeerResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeerResolver abstract" />
  <TypeSignature Language="F#" Value="type PeerResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt einen Basistyp an, der verwendet wird, um den Vertrag für die Registrierung und Auflösung einer Peermesh-ID zu den Endpunktadressen von Knoten im Mesh zu definieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse ist die Basisklasse zur Implementierung benutzerdefinierter Peernamensresolver. Ein Peernamensresolver ist ein Ermittlungsdienst, der von Peerkanälen zum Suchen von Peerknoten in einem Peermesh verwendet wird. Außerdem wird er verwendet, um einen Knoten in einem Peermesh zu registrieren, wodurch der Peerknoten erkannt und im Peermesh verfügbar wird.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PeerResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PeerResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.PeerResolver" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanShareReferrals">
      <MemberSignature Language="C#" Value="public abstract bool CanShareReferrals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShareReferrals" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanShareReferrals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanShareReferrals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanShareReferrals : bool" Usage="System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob der Peernamensresolver Verweise freigegeben kann.</summary>
        <value>True, wenn der Peernamensresolver Verweise freigegeben kann, andernfalls false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Channels.Binding binding, class System.ServiceModel.Description.ClientCredentials credentials, valuetype System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Channels::Binding ^ binding, System::ServiceModel::Description::ClientCredentials ^ credentials, System::ServiceModel::PeerResolvers::PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit&#xA;override this.Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit" Usage="peerResolver.Initialize (address, binding, credentials, referralPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="credentials" Type="System.ServiceModel.Description.ClientCredentials" />
        <Parameter Name="referralPolicy" Type="System.ServiceModel.PeerResolvers.PeerReferralPolicy" />
      </Parameters>
      <Docs>
        <param name="address">Die <see cref="T:System.ServiceModel.EndpointAddress" />, die die neue Endpunktadresse dieser Peerresolverinstanz enthält.</param>
        <param name="binding">Die <see cref="T:System.ServiceModel.Channels.Binding" />, die die neue Netzwerkbindung für diesen Peerresolver angibt.</param>
        <param name="credentials">Die <see cref="T:System.ServiceModel.Description.ClientCredentials" />, die die neuen Clientanmeldeinformationen für diesen Peerresolver angeben.</param>
        <param name="referralPolicy">Die <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />, die die neue Verweisrichtlinie für diesen Peerresolver angibt.</param>
        <summary>Initialisiert die aktuelle Peerresolverinstanz mit der angegebenen Endpunktadresse und den angegebenen Einstellungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode wird lediglich die vorhandene Peerresolverinstanz initialisiert, aber keine neue erstellt. Um einen neuen Peerresolver zu erstellen, rufen Sie die CreatePeerResolver-Methode für das entsprechende Bindungselement auf (beispielsweise <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Register(string meshId, class System.ServiceModel.PeerNodeAddress nodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Register (meshId As String, nodeAddress As PeerNodeAddress, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Register(System::String ^ meshId, System::ServiceModel::PeerNodeAddress ^ nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Register : string * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; obj" Usage="peerResolver.Register (meshId, nodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="nodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId">Die ID des Peermeshs, in dem der Peerknoten registriert werden soll.</param>
        <param name="nodeAddress">Die <see cref="T:System.ServiceModel.PeerNodeAddress" />, die im Peermesh registriert werden soll.</param>
        <param name="timeout">Die Zeit, die gewartet werden soll, bevor der Versuch einer Registrierung im Peermesh abgebrochen wird. Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</param>
        <summary>Registriert eine <see cref="T:System.ServiceModel.PeerNodeAddress" /> in einem bestimmten Peermesh.</summary>
        <returns>Ein <see cref="T:System.Object" />, das die Registrierungs-ID darstellt. Dieses Registrierungs-ID-Objekt wird an die <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />-Methode und die <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />-Methode übergeben.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt; Resolve (string meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ServiceModel.PeerNodeAddress&gt; Resolve(string meshId, int32 maxAddresses, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Resolve (meshId As String, maxAddresses As Integer, timeout As TimeSpan) As ReadOnlyCollection(Of PeerNodeAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ServiceModel::PeerNodeAddress ^&gt; ^ Resolve(System::String ^ meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string * int * TimeSpan -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;" Usage="peerResolver.Resolve (meshId, maxAddresses, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="maxAddresses" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId">Die Mesh-ID des Peermeshs, in dem die <see cref="T:System.ServiceModel.PeerNodeAddress" />-Objekte abgerufen werden sollen, die Knoten im Peermesh darstellen.</param>
        <param name="maxAddresses">Die Anzahl zurückzugebender Endpunktadressen.</param>
        <param name="timeout">Die Zeit, die gewartet werden soll, bevor der Versuch einer Auflösung der Endpunktadressen im Peermesh abgebrochen wird. Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</param>
        <summary>Löst die angegebene Mesh-ID in null oder mehr Endpunktadressen von Knoten im Peermesh auf.</summary>
        <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, die <see cref="T:System.ServiceModel.PeerNodeAddress" />-Objekte enthält, die Knoten im Peermesh darstellen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public abstract void Unregister (object registrationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unregister(object registrationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unregister (registrationId As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unregister(System::Object ^ registrationId, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Unregister : obj * TimeSpan -&gt; unit" Usage="peerResolver.Unregister (registrationId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId">Eine Registrierungs-ID für den Knoten, der durch einen vorherigen Aufruf von <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> abgerufen wurde.</param>
        <param name="timeout">Die Zeit, die gewartet werden soll, bevor der Versuch einer Entfernung der Registrierung aus dem Peermesh abgebrochen wird. Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</param>
        <summary>Entfernt den Registrierungseintrag für einen Knoten aus einem Peermesh.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Registrierungs-ID ist ein Peerresolvertoken, das mindestens das Tupel einer Peerknoten-ID und die Mesh-ID darstellt. Dieser ID-Wert muss durch einen vorherigen Aufruf von <xref:System.ServiceModel.PeerResolver.Register%2A> abgerufen worden sein.  
  
 <xref:System.ServiceModel.PeerResolver.Unregister%2A> wird in zwei Fällen aufgerufen:  
  
-   Wenn der <xref:System.ServiceModel.PeerNode> das Peermesh verlässt (normalerweise nachdem der letzte zugeordnete Peerkanal oder Diensthost beendet wurde).  
  
-   Wenn der <xref:System.ServiceModel.PeerNode> keine verfügbaren Endpunktadressen anderer Knoten im Peermesh finden kann. Dadurch ist der <xref:System.ServiceModel.PeerNode> nicht mehr erreichbar und versucht einen Aufruf von <xref:System.ServiceModel.PeerResolver.Unregister%2A>, um seine Registrierung aus dem <xref:System.ServiceModel.PeerResolver> zu entfernen. Wenn nach der Deregistrierung andere Peerknoten im Mesh verfügbar werden, kann der Knoten sich selbst wieder registrieren, indem er <xref:System.ServiceModel.PeerResolver.Register%2A> aufruft und eine neue Registrierungs-ID abruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(object registrationId, class System.ServiceModel.PeerNodeAddress updatedNodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Update (registrationId As Object, updatedNodeAddress As PeerNodeAddress, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Update(System::Object ^ registrationId, System::ServiceModel::PeerNodeAddress ^ updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; unit" Usage="peerResolver.Update (registrationId, updatedNodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="updatedNodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId">Ein Registrierungs-ID-Token für den Knoten, der durch einen vorherigen Aufruf von <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> abgerufen wurde.</param>
        <param name="updatedNodeAddress">Die aktualisierte Endpunktadresse (und andere Multihoming-IP-Adressen).</param>
        <param name="timeout">Die Zeit, die gewartet werden soll, bevor der Versuch einer Aktualisierung der Knotenregistrierung im Peermesh abgebrochen wird. Wenn der Versuch fehlschlägt, wird <see cref="T:System.TimeoutException" /> für den Peer ausgelöst.</param>
        <summary>Aktualisiert die <see cref="T:System.ServiceModel.PeerNodeAddress" /> für einen Knoten, der in einem bestimmten Peermesh registriert ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.PeerResolver.Update%2A> wird aufgerufen, wenn sich die <xref:System.ServiceModel.PeerNode>-Adresse auf dem lokalen Computer ändert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
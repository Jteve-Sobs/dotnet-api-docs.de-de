<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICommunicationObject.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5864e880f75f69ec7b5b1eaad2fa2a42f3c1377ea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">864e880f75f69ec7b5b1eaad2fa2a42f3c1377ea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</source>
          <target state="translated">Definiert den Vertrag für den Computer im Grundzustand für alle kommunikationsorientierten Objekte im System, darunter Kanäle, Kanal-Manager, Factorys, Listener und Verteiler sowie Diensthosts.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> interface defines:</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>-Schnittstelle definiert Folgendes:</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A set of open, close and abort methods for initiating state transitions:</source>
          <target state="translated">Einen Satz geöffneter, geschlossener und abgebrochener Methoden zur Initialisierung von Zustandsübergängen:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Asynchronous versions of the open and close methods:</source>
          <target state="translated">Asynchrone Versionen der Öffnen- und Schließen-Methoden:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A set of events that provide notifications of state transitions:</source>
          <target state="translated">Einen Ereignissatz, der Benachrichtigungen über Zustandsübergänge bereitstellt:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A common <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph> property for inspecting the state of an object</source>
          <target state="translated">Eine allgemeine <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph>-Eigenschaft zur Überprüfung des Objektzustands</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>Causes a communication object to transition immediately from its current state into the closed state.</source>
          <target state="translated">Bewirkt, dass ein Kommunikationsobjekt unmittelbar vom aktuellen Zustand in den geschlossenen Zustand übergeht.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>This method indicates that any unfinished work should be ignored or ungracefully terminated before returning.</source>
          <target state="translated">Diese Methode gibt an, dass unerledigte Aufgaben ignoriert oder vor dem Zurückgeben nicht ordnungsgemäß beendet werden sollen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> method can be used to cancel any outstanding operations, including outstanding calls to <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph>-Methode kann zum Abbrechen von ausstehenden Vorgängen verwendet werden, einschließlich ausstehender Aufrufe von <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>To gracefully transition an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state call <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Für einen ordnungsgemäßen Übergang eines <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> vom <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand zum <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand müssen Sie <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> aufrufen.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">Startet einen asynchronen Vorgang, um ein Kommunikationsobjekt zu schließen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">Mit dieser Methode kann ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß vom <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand übergehen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">Versionen mit und ohne explizites Timeout werden bereitgestellt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>-Delegat, der die Benachrichtigung über den Abschluss des asynchronen Schließvorgangs empfängt.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
          <target state="translated">Ein von der Anwendung angegebenes Objekt, das dem asynchronen Schließvorgang zugeordnete Statusinformationen enthält.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">Startet einen asynchronen Vorgang, um ein Kommunikationsobjekt zu schließen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous close operation.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Einstellung, die auf den asynchronen Schließvorgang verweist.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">Mit dieser Methode kann ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß von einem beliebigen Zustand, mit Ausnahme des <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustands, in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand übergehen.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">Mit der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph>-Methode können unerledigte Aufgaben vor der Rückgabe abgeschlossen werden.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Schließen Sie z.&amp;#160;B. den Versand von gepufferten Nachrichten ab.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> wurde für ein Objekt im <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand aufgerufen.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The default timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">Das standardmäßige Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> ordnungsgemäß geschlossen werden konnte.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>-Wert, der angibt, welcher Zeitraum für den Sendevorgang bleibt, bevor ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>-Delegat, der die Benachrichtigung über den Abschluss des asynchronen Schließvorgangs empfängt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
          <target state="translated">Ein von der Anwendung angegebenes Objekt, das dem asynchronen Schließvorgang zugeordnete Statusinformationen enthält.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to close a communication object with a specified timeout.</source>
          <target state="translated">Startet einen asynchronen Vorgang, um ein Kommunikationsobjekt mit einem festgelegten Timeout zu schließen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous close operation.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Einstellung, die auf den asynchronen Schließvorgang verweist.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state with in a specified interval of time.</source>
          <target state="translated">Mit dieser Methode kann ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß und in einem angegebenen Zeitraum von einem beliebigen Zustand, mit Ausnahme des <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustands, in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand übergehen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">Mit der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph>-Methode können unerledigte Aufgaben vor der Rückgabe abgeschlossen werden.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Schließen Sie z.&amp;#160;B. den Versand von gepufferten Nachrichten ab.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> wurde für ein Objekt im <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand aufgerufen.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">Das festgelegte Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> ordnungsgemäß geschlossen werden konnte.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">Startet einen asynchronen Vorgang, um ein Kommunikationsobjekt zu schließen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until its transition to the <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state is completed or fails.</source>
          <target state="translated">Aufgrund der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph>-Methode nimmt <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand an, den es beibehält, bis der Übergang in den <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand abgeschlossen oder fehlgeschlagen ist.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">Versionen mit und ohne explizites Timeout werden bereitgestellt.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>-Delegat, der die Benachrichtigung erhält, dass der asynchrone Öffnungsvorgang abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
          <target state="translated">Ein durch die Anwendung festgelegtes Objekt, das dem asynchronen Öffnungsvorgang zugeordnete Zustandsinformationen enthält.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to open a communication object.</source>
          <target state="translated">Startet einen asynchronen Vorgang, um ein Kommunikationsobjekt zu öffnen.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous open operation.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Wert, der auf den asynchronen Öffnungsvorgang verweist.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Wenn ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> instanziiert wird, hat es zuerst den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand kann das Objekt konfiguriert werden (so können beispielsweise Eigenschaften eingerichtet oder Ereignisse registriert werden), es kann jedoch noch nicht zum Versenden und Empfangen von Nachrichten verwendet werden.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Aufgrund der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph>-Methode nimmt <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand an, in dem es verbleibt, bis der Öffnungsvorgang erfolgreich war, die Zeit für den Öffnungsvorgang überschritten wird oder der Vorgang ganz fehlschlägt und das Objekt einen Fehler aufweist oder <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen wird.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand kann <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> verwendet werden (beispielsweise können Nachrichten empfangen werden), es ist jedoch nicht mehr konfigurierbar.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> kann nicht geöffnet werden und hat den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand angenommen.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Das standardmäßige Öffnungstimeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph>-Zustand annehmen konnte. Es hat jetzt den <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>-Wert, der angibt, welcher Zeitraum für den Sendevorgang bleibt, bevor ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>-Delegat, der die Benachrichtigung erhält, dass der asynchrone Öffnungsvorgang abgeschlossen wurde.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
          <target state="translated">Ein durch die Anwendung festgelegtes Objekt, das dem asynchronen Öffnungsvorgang zugeordnete Zustandsinformationen enthält.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to open a communication object within a specified interval of time.</source>
          <target state="translated">Startet einen asynchronen Vorgang, um ein Kommunikationsobjekt innerhalb eines festgelegten Zeitraums zu öffnen.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous open operation.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>-Wert, der auf den asynchronen Öffnungsvorgang verweist.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Wenn ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> instanziiert wird, hat es zuerst den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand kann das Objekt konfiguriert werden (so können beispielsweise Eigenschaften eingerichtet oder Ereignisse registriert werden), es kann jedoch noch nicht zum Versenden und Empfangen von Nachrichten verwendet werden.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Aufgrund der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph>-Methode nimmt <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand an, in dem es verbleibt, bis der Öffnungsvorgang erfolgreich war, die Zeit für den Öffnungsvorgang überschritten wird oder der Vorgang ganz fehlschlägt und das Objekt einen Fehler aufweist oder <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen wird.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand kann <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> verwendet werden (beispielsweise können Nachrichten empfangen werden), es ist jedoch nicht mehr konfigurierbar.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> kann nicht geöffnet werden und hat den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand angenommen.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Das festgelegte Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph>-Zustand annehmen konnte. Es weist jetzt den <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand auf.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">Der Vorgang muss eine <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> auslösen, wenn das angegebene <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> überschritten wird.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">Bewirkt, dass ein Kommunikationsobjekt vom aktuellen Zustand in den geschlossenen Zustand übergeht.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">Bewirkt, dass ein Kommunikationsobjekt vom aktuellen Zustand in den geschlossenen Zustand übergeht.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">Mit dieser Methode kann ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß vom <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand übergehen.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">Mit der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>-Methode können unerledigte Aufgaben vor der Rückgabe abgeschlossen werden.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Schließen Sie z.&amp;#160;B. den Versand von gepufferten Nachrichten ab.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
          <target state="translated">Das <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> nimmt den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph>-Zustand an und behält ihn bei, bis der Übergang in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> wird zurückgegeben, sobald der <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand erreicht wird.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If the default close timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to close gracefully, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Wenn das standardmäßige Schließen-Timeout verstreicht, bevor <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß geschlossen wurde, wird <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> für ein <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> im <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand oder <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph>-Zustand aufgerufen wird, wird <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> für ein <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> im <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph>-Zustand oder <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand aufgerufen wird, wird der Aufruf sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Es gibt auch eine asynchrone Version der Schließmethode, die durch den Aufruf von <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> initiiert wird und durch den Aufruf von <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> abgeschlossen wird.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> wurde für ein Objekt im <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand aufgerufen.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The default close timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">Das standardmäßige Schließen-Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> ordnungsgemäß geschlossen werden konnte.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>-Wert, der angibt, welcher Zeitraum für den Sendevorgang bleibt, bevor ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">Bewirkt, dass ein Kommunikationsobjekt vom aktuellen Zustand in den geschlossenen Zustand übergeht.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state within a specified interval of time.</source>
          <target state="translated">Mit dieser Methode kann ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß und in einem angegebenen Zeitraum vom <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand übergehen.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">Mit der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>-Methode können unerledigte Aufgaben vor der Rückgabe abgeschlossen werden.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Schließen Sie z.&amp;#160;B. den Versand von gepufferten Nachrichten ab.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
          <target state="translated">Das <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> nimmt den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph>-Zustand an und behält ihn bei, bis der Übergang in den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> wird zurückgegeben, sobald der <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand erreicht wird.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If the timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to gracefully close, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Wenn das Timeout verstreicht, bevor <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> ordnungsgemäß geschlossen werden kann, wird <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> für ein <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> im <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand oder <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph>-Zustand aufgerufen wird, wird <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
          <target state="translated">Wenn <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> für ein <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> im <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph>-Zustand oder <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand aufgerufen wird, wird der Aufruf sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Es gibt auch eine asynchrone Version der Schließmethode, die durch den Aufruf von <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> initiiert wird und durch den Aufruf von <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> abgeschlossen wird.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> wurde für ein Objekt im <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand aufgerufen.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">Das Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> ordnungsgemäß geschlossen werden konnte.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">Der Vorgang muss eine <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> auslösen, wenn das angegebene <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> überschritten wird.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Closed">
          <source>Occurs when the communication object completes its transition from the closing state into the closed state.</source>
          <target state="translated">Tritt ein, sobald der Übergang des Kommunikationsobjekts vom Schließen-Zustand in den Geschlossen-Zustand abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Closing">
          <source>Occurs when the communication object first enters the closing state.</source>
          <target state="translated">Tritt ein, sobald das Kommunikationsobjekt den Schließzustand annimmt.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ServiceModel.ICommunicationObject.Closing">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method is invoked.</source>
          <target state="translated">Dieses Ereignis tritt ein, sobald der Übergang des Kommunikationsobjekts vom <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand in den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>-Zustand startet oder unmittelbar nachdem die <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>-Methode bzw. die <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph>-Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> method.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, das von einem Aufruf der <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph>-Methode zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>Completes an asynchronous operation to close a communication object.</source>
          <target state="translated">Beendet einen asynchronen Vorgang, um ein Kommunikationsobjekt zu schließen.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> wurde für ein Objekt im <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand aufgerufen.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">Das Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> ordnungsgemäß geschlossen werden konnte.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" /&gt;</ph> method.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, das von einem Aufruf der <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" /&gt;</ph>-Methode zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>Completes an asynchronous operation to open a communication object.</source>
          <target state="translated">Beendet einen asynchronen Vorgang, um ein Kommunikationsobjekt zu öffnen.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> kann nicht geöffnet werden und hat den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand angenommen.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Das Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph>-Zustand annehmen konnte. Es hat jetzt den <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Faulted">
          <source>Occurs when the communication object first enters the faulted state.</source>
          <target state="translated">Tritt ein, sobald das Kommunikationsobjekt den Fehlerzustand annimmt.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
          <target state="translated">Bewirkt den Übergang eines Kommunikationsobjekts aus dem Erstellt-Zustand in den Geöffnet-Zustand.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">Versionen mit und ohne explizites Timeout werden bereitgestellt.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
          <target state="translated">Bewirkt den Übergang eines Kommunikationsobjekts aus dem Erstellt-Zustand in den Geöffnet-Zustand.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Wenn ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> instanziiert wird, hat es zuerst den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand kann das Objekt konfiguriert werden (so können beispielsweise Eigenschaften eingerichtet oder Ereignisse registriert werden), es kann jedoch noch nicht zum Versenden und Empfangen von Nachrichten verwendet werden.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Aufgrund der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph>-Methode nimmt <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand an, in dem es verbleibt, bis der Öffnungsvorgang erfolgreich war, die Zeit für den Öffnungsvorgang überschritten wird oder der Vorgang ganz fehlschlägt und das Objekt einen Fehler aufweist oder <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen wird.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand kann <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> verwendet werden (beispielsweise können Nachrichten empfangen werden), es ist jedoch nicht mehr konfigurierbar.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
          <target state="translated">Es gibt auch eine asynchrone Version der Öffnungsmethode, die durch den Aufruf von <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> initiiert wird und durch den Aufruf von <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph> abgeschlossen wird.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> kann nicht geöffnet werden und hat den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand angenommen.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Das standardmäßige Öffnungstimeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph>-Zustand annehmen konnte. Es hat jetzt den <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>-Wert, der angibt, welcher Zeitraum für den Sendevorgang bleibt, bevor ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</source>
          <target state="translated">Bewirkt den Übergang eines Kommunikationsobjekts innerhalb eines angegebenen Zeitraums vom Erstellt-Zustand in den Geöffnet-Zustand.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Wenn ein <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> instanziiert wird, hat es zuerst den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand kann das Objekt konfiguriert werden (so können beispielsweise Eigenschaften eingerichtet oder Ereignisse registriert werden), es kann jedoch noch nicht zum Versenden und Empfangen von Nachrichten verwendet werden.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Aufgrund der <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph>-Methode nimmt <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> den <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>-Zustand an, in dem es verbleibt, bis der Öffnungsvorgang erfolgreich war, die Zeit für den Öffnungsvorgang überschritten wird oder der Vorgang ganz fehlschlägt und das Objekt einen Fehler aufweist oder <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> abgebrochen wird.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">Im <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand kann <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> verwendet werden (beispielsweise können Nachrichten empfangen werden), es ist jedoch nicht mehr konfigurierbar.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
          <target state="translated">Es gibt auch eine asynchrone Version der Öffnungsmethode, die durch den Aufruf von <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> initiiert wird und durch den Aufruf von <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph> abgeschlossen wird.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> kann nicht geöffnet werden und hat den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand angenommen.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Das festgelegte Timeout ist verstrichen, bevor <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> den <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph>-Zustand annehmen konnte. Es weist jetzt den <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>-Zustand auf.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">Der Vorgang muss eine <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> auslösen, wenn das angegebene <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> überschritten wird.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Opened">
          <source>Occurs when the communication object completes its transition from the opening state into the opened state.</source>
          <target state="translated">Tritt ein, sobald der Übergang des Kommunikationsobjekts vom Öffnungszustand in den Geöffnet-Zustand abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Opening">
          <source>Occurs when the communication object first enters the opening state.</source>
          <target state="translated">Tritt ein, sobald das Kommunikationsobjekt den Öffnungszustand annimmt.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ServiceModel.ICommunicationObject.Opening">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method is invoked.</source>
          <target state="translated">Dieses Ereignis tritt ein, sobald der Übergang des Kommunikationsobjekts vom <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>-Zustand in den <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>-Zustand startet oder unmittelbar nachdem die <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph>-Methode bzw. die <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph>-Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>Gets the current state of the communication-oriented object.</source>
          <target state="translated">Ruft den aktuellen Zustand des kommunikationsorientierten Objekts ab.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>The value of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationState" /&gt;</ph> of the object.</source>
          <target state="translated">Der Wert für <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationState" /&gt;</ph> des Objekts.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>The main communication states available to an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> are:</source>
          <target state="translated">Die folgenden Hauptkommunikationszustände für <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> sind verfügbar:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>There are also transitory states that such an object can occupy when transitioning between the first three main states:</source>
          <target state="translated">Es gibt auch Übergangszustände, die ein solches Objekt beim Übergang zwischen den ersten drei Hauptzuständen aufweisen kann:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>This <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> defines the states that are valid for all communication-oriented objects in the system, including channels, listeners, the channel and listener factories, and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> definiert die Zustände, die für kommunikationsorientierte Objekte im System zulässig sind, darunter Kanäle, Listener, die Kanal- und Listenerfactorys und die <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>-Klasse.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
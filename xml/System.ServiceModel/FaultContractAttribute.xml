<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9feb5725b1686f65d52105d54bdeb30c4502a94b" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83932448" /></Metadata><TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt SOAP-Fehler an, die zurückgegeben werden, wenn bei einem Dienstvorgang ein Verarbeitungsfehler auftritt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Markieren Sie einen Vorgang mit dem <xref:System.ServiceModel.FaultContractAttribute>-Attribut, um eine oder mehrere bestimmte Ausnahmebedingungen zu deklarieren, die der WSDL-Beschreibung (Web Service Description Language) des Dienst Vorgangs als explizite SOAP-Fehlermeldungen hinzugefügt werden, die vom Vorgang zurückgegeben werden.  
  
 In allen verwalteten Anwendungen werden Verarbeitungsfehler durch <xref:System.Exception>-Objekte dargestellt. In SOAP-basierten Anwendungen, wie z. b. Windows Communication Foundation (WCF)-Anwendungen, übermitteln Dienst Methoden Verarbeitungsfehler Informationen mithilfe von SOAP-Fehlermeldungen. Da WCF-Anwendungen unter beiden fehlersystem Typen ausgeführt werden, müssen alle an den Client gesendeten verwalteten Ausnahme Informationen von Ausnahmen in SOAP-Fehler konvertiert werden. Sie können die Standard-Dienstausnahmeverhalten verwenden oder aber ausdrücklich steuern, ob und wie Ausnahmen zu Fehlernachrichten zugewiesen werden. Eine Übersicht über Ausnahmen und SOAP-Fehler in WCF-Anwendungen finden Sie unter [angeben und behandeln von Fehlern in Verträgen und Diensten](/dotnet/framework/wcf/specifying-and-handling-faults-in-contracts-and-services).  
  
 Es wird empfohlen, dass Dienst Vorgänge mithilfe des <xref:System.ServiceModel.FaultContractAttribute> formal alle SOAP-Fehler angeben, die ein Client im normalen Verlauf eines Vorgangs erwarten kann. Es wird außerdem empfohlen, dass nur die Informationen, die ein Client erhalten muss, in einem SOAP-Fehler zurückgegeben werden, um die Offenlegung von Informationen möglichst gering zu halten.  
  
-   Die <xref:System.ServiceModel.FaultContractAttribute.Action%2A>-Eigenschaft steuert die Aktion der Fehlermeldung.  
  
-   Die <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A>-Eigenschaft ruft den Typ des in der Fehlermeldung serialisierten Detail Objekts ab.  
  
-   Die Eigenschaften <xref:System.ServiceModel.FaultContractAttribute.Name%2A> und <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> steuern den Namen bzw. Namespace der Fehlermeldung.  
  
-   Der <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> der angibt, ob für die Fehlermeldung eine Schutz Ebene festgelegt wurde, und wenn dies der Fall ist, steuert die <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>-Eigenschaft diese Ebene des Schutzes.  
  
> [!CAUTION]
>  Wenn eine Fehlermeldung vertrauliche Informationen enthält, die zu Sicherheitsproblemen führen können, wird dringend empfohlen, dass die <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>-Eigenschaft festgelegt wird.  
  
-   Wenn Sie die <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> explizit auf <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> oder <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>festgelegt haben, müssen Sie eine Bindung mit aktivierter Sicherheit mithilfe der <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType>-Eigenschaft der Bindung verwenden, oder es wird eine Ausnahme ausgelöst.  
  
-   Wählen Sie eine Bindung aus, die Sicherheit aktiviert, und legen Sie im Vertrag keine <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>-Eigenschaft fest, werden alle Daten verschlüsselt und signiert.  
  
-   Wenn Sie eine Bindung auswählen, für die keine Sicherheit aktiviert ist (z. b. wenn die <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> standardmäßig deaktiviert ist) und die <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> nicht explizit festgelegt ist, wird keine der Anwendungsdaten geschützt.  
  
 In vielen Szenarios ist das Festlegen von <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> auf <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> für Fehlermeldungen ausreichend. Weitere Informationen finden Sie Untergrund Legendes zu [Schutz Ebenen](/dotnet/framework/wcf/understanding-protection-level).  
  
 Um einen angegebenen Fehler von einem mit <xref:System.ServiceModel.FaultContractAttribute>markierten Vorgang zurückzugeben, lösen Sie eine <xref:System.ServiceModel.FaultException%601> aus (wobei der Typparameter die serialisierbaren Fehlerinformationen darstellt), wenn die verwaltete Ausnahme während des Vorgangs auftritt. WCF-Client Anwendungen übersetzen den SOAP-Fehler als denselben Typ, der in der Client Implementierung ausgelöst wurde, also als <xref:System.ServiceModel.FaultException%601> (wobei der typeparameter die serialisierbaren Fehlerinformationen ist). Der <xref:System.ServiceModel.FaultContractAttribute> kann nur zum Angeben von SOAP-Fehlern für bidirektionale Dienst Vorgänge und für asynchrone Vorgangs Paare verwendet werden. unidirektionale Vorgänge unterstützen keine SOAP-Fehler und unterstützen daher <xref:System.ServiceModel.FaultContractAttribute>nicht.  
  
> [!NOTE]
>  Sie können zur Übermittlung von Fehlerinformationen jeden serialisierbaren Typ verwenden. Die einzige Einschränkung in dieser Version von WCF besteht darin, dass die in einem <xref:System.ServiceModel.FaultContractAttribute> angegebenen Typen vom <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>serialisierbar sein müssen. Informationen zur Serialisierungsunterstützung, die der <xref:System.Runtime.Serialization.DataContractSerializer> bereitstellt, finden Sie unter [Data Contract Serializer](/dotnet/framework/wcf/feature-details/data-contract-serializer).  
  
 Um z. b. anzugeben, dass Clients einen SOAP-Fehler erwarten können, der eine <xref:System.Int32>enthält, platzieren Sie den Typparameter in der <xref:System.ServiceModel.FaultContractAttribute> für Ihre Dienst Methode.  
  
> [!NOTE]
>  In den folgenden Codebeispielen werden die <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>-, <xref:System.ServiceModel.FaultContractAttribute.Name%2A>-oder <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A>-Eigenschaften nicht festgelegt.  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 Lösen Sie dann in der Dienst Methode eine neue <xref:System.ServiceModel.FaultException%601> aus, wobei der Typparameter der Typ ist, der die Fehlerinformationen enthält (im obigen Fall ein <xref:System.Int32>). Beispiel:  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 Das vorherige Beispiel ist sehr einfach. fast alle Informationen können mithilfe eines <xref:System.Int32?displayProperty=nameWithType> Codes übermittelt werden, sodass dieser Detailtyp nicht besonders nützlich ist. In der Regel geben WCF-Anwendungen SOAP-Fehler mit Detail Typen an, die für die Fehler Informationsanforderungen des Clients spezifisch sind. Ein komplexeres Beispiel finden Sie im Beispielabschnitt.  
  
> [!NOTE]
>  Wenn Sie einen <xref:System.ServiceModel.FaultException%601> angeben, bei dem der Typparameter ein <xref:System.String?displayProperty=nameWithType>ist, wird der Zeichen folgen Wert der Detail Eigenschaft in der Client Anwendung zugewiesen. Clients können diese Zeichenfolge nicht abrufen, indem Sie die <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType>-Methode aufrufen. Damit der Zeichenfolgewert zurückgegeben wird, wenn die Clientanwendung <xref:System.Exception.ToString%2A?displayProperty=nameWithType> aufruft, lösen Sie im Vorgang eine <xref:System.ServiceModel.FaultException?displayProperty=nameWithType>-Ausnahme aus, und übergeben Sie die Zeichenfolge dem Konstruktor.  
  
 Um das Verhalten der Anwendung explizit zu steuern, wenn eine Ausnahme oder eine <xref:System.ServiceModel.FaultException%601> ausgelöst wird, implementieren Sie die <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType>-Schnittstelle in einem <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> oder <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, und weisen Sie Sie der <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>-Eigenschaft zu. <xref:System.ServiceModel.Dispatcher.IErrorHandler> ermöglicht es Ihnen, den generierten SOAP-Fehler explizit zu steuern und zurück an den Client zu senden.  
  
 Um das Debuggen zu vereinfachen, legen Sie die <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> auf `true` im Code fest, oder Sie können die <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> in einer Anwendungs Konfigurationsdatei verwenden. Bei Aktivierung gibt der Dienst automatisch Ausnahmeinformationen an den Aufrufer zurück. Diese Fehler werden dem Client als <xref:System.ServiceModel.FaultException> Ausnahmen angezeigt.  
  
> [!IMPORTANT]
>  Da verwaltete Ausnahmen interne Anwendungsinformationen verfügbar machen können, kann das Festlegen von <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> oder <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> auf `true` den WCF-Clients das Abrufen von Informationen über interne Dienst Vorgangs Ausnahmen, einschließlich personenbezogener oder anderer sensibler Informationen, ermöglichen.  
>   
>  Daher wird die Festlegung von <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> für <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> oder `true` nur für das vorübergehende Debuggen einer Dienstanwendung empfohlen. Außerdem beinhaltet die WSDL für eine Methode, die nicht behandelte verwaltete Ausnahmen auf diese Weise zurückgibt, keinen Vertrag für die <xref:System.ServiceModel.FaultException%601> vom Typ <xref:System.String>. Clients müssen die Möglichkeit eines unbekannten SOAP-Fehlers erwarten (zurückgegeben an WCF-Clients als <xref:System.ServiceModel.FaultException?displayProperty=nameWithType>-Objekte), um die Debuginformationen ordnungsgemäß abzurufen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mit dem <xref:System.ServiceModel.FaultContractAttribute> angegeben werden kann, dass der `SampleMethod`-Vorgang einen SOAP-Fehler mit dem Detailtyp `GreetingFault` zurückgeben kann.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 Das folgende Codebeispiel zeigt, dass WCF-Clients von `ISampleService` diesen SOAP-Fehler als <xref:System.ServiceModel.FaultException%601> vom Typ `GreetingFault`erleben.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">Der serialisierbare Typ, der Fehlerinformationen für den Aufrufer enthält.</param>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.ServiceModel.FaultContractAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Konstruktor wird üblicherweise durch Anwendung des Attributs auf eine Dienstmethode und Angabe eines Typs als Argument im Attribut ausgeführt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mit dem <xref:System.ServiceModel.FaultContractAttribute> angegeben werden kann, dass der `SampleMethod`-Vorgang einen SOAP-Fehler mit dem Detailtyp `GreetingFault` zurückgeben kann.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Das <paramref name="detailType" />-Argument lautet <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Aktion der SOAP-Fehlernachricht ab, die als Bestandteil des Vorgangsvertrags angegeben wurde, oder legt sie fest.</summary>
        <value>Der Wert der Aktion für die SOAP-Fehlernachricht.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zur Steuerung der Aktion der SOAP-Fehlernachricht verwenden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ eines serialisierbaren Objekts ab, das Fehlerinformationen enthält.</summary>
        <value>Der Typ, der die serialisierbare Fehlerklasse darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mit dem <xref:System.ServiceModel.FaultContractAttribute> angegeben werden kann, dass der `SampleMethod`-Vorgang einen SOAP-Fehler mit dem Detailtyp `GreetingFault` zurückgeben kann.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der SOAP-Fehlernachricht eine Sicherheitsebene zugewiesen wurde.</summary>
        <value><see langword="true" />, wenn die Fehlernachricht über eine Sicherheitsebene verfügt, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A>-Eigenschaft, um anzugeben, ob die SOAP-Fehlermeldung verschlüsselt, signiert oder beides sein muss. Weitere Informationen finden Sie in der <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>-Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Namen der Fehlernachricht in WSDL (Web Services Description Language) fest.</summary>
        <value>Der Name der Fehlermeldung. Standardmäßig wird der Name des als Fehlerdetail verwendeten Typs verwendet.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namespace des SOAP-Fehlers ab oder legt diesen fest.</summary>
        <value>Der Namespace des SOAP-Fehlers.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Sicherheitsebene an, die der SOAP-Fehler von der Bindung fordert.</summary>
        <value>Einer der <see cref="T:System.Net.Security.ProtectionLevel" />-Werte. Der Standardwert lautet <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Geben Sie mit der <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType>-Eigenschaft an, wie stark die Bindung beim Senden des SOAP-Fehlers verschlüsseln, signieren oder verschlüsseln und signieren muss. Nach Möglichkeit sollte der Fehler eines Vorgangs ausdrücklich über die Sicherheitsebenenanforderungen im Vertrag entscheiden. Die Standardschutz Ebene ist <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>. Dies bedeutet, dass die von Ihnen definierte SOAP-Fehlermeldung keine Verschlüsselung oder eine digitale Signatur erfordert (obwohl ihre Bindung diese Unterstützung bereitstellen kann, wenn Sie dafür konfiguriert ist). Wenn eine Fehlermeldung vertrauliche Informationen enthält, die zu Sicherheitsproblemen führen können, wird dringend empfohlen, dass die <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>-Eigenschaft auf <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>festgelegt ist. Weitere Informationen zu Sicherheitsproblemen finden Sie Untergrund Legendes zu [Schutz Ebenen](/dotnet/framework/wcf/understanding-protection-level).  
  
 Das Sicherheitsverhalten während der Laufzeit ist die Kombination der Sicherheitsebeneneigenschaften, die über eine hierarchische Struktur verfügen. Mit der Festlegung des äußersten Werts wird die Standardeinstellung für alle engeren Bereiche festgelegt, es sei denn, es wird ausdrücklich ein anderer Wert für einen engeren Bereich definiert. In diesem Fall bleibt der äußere Wert der Standardwert für alle engeren Bereiche mit Ausnahme des ausdrücklich festgelegten Werts.  
  
 Wenn <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> z. b. auf <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> festgelegt ist und keine anderen engeren Bereiche über Einstellungen der Schutz Ebene verfügen, werden alle Nachrichten in einem Vorgangs Vertrag verschlüsselt und signiert, einschließlich der Fehlermeldungen. Wenn für einen dieser Vorgänge jedoch die <xref:System.ServiceModel.OperationContractAttribute> auf <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>festgelegt ist, werden die Nachrichten für diesen Vorgang signiert, alle anderen Nachrichten im Vertrag werden jedoch verschlüsselt und signiert, einschließlich der Fehlermeldungen.  
  
 Die Bereiche, für die diese Werte festgelegt wurden:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 Die <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType>-Eigenschaft für <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 Die <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType>-Eigenschaft für <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Wenn im Vertrag nicht ausdrücklich eine Schutzebene festgelegt ist und die zugrunde liegende Bindung Sicherheitsfunktionen (auf der Transport- oder Nachrichtenebene) unterstützt, ist die effektive Schutzebene für den gesamten Vertrag <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Wenn die Bindung keine Sicherheitsfunktionen (wie beispielsweise <xref:System.ServiceModel.BasicHttpBinding>) unterstützt, ist die effektive <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> für den gesamten Vertrag <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>. Im Ergebnis können Clients abhängig von der Endpunktbindung unterschiedlichen Nachrichten- oder Transportebenenschutz auch dann anfordern, wenn im Vertrag <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> angegeben ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="OperationContextScope" FullName="System.ServiceModel.OperationContextScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40f9d7eb2a12aa6aeb7c0ce6a9da8e1e44c42c67" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37451815" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContextScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContextScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContextScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContextScope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContextScope sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type OperationContextScope = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="4aebb-101">Erstellt einen Block, in dessen Bereich sich ein <see cref="T:System.ServiceModel.OperationContext" />-Objekt befindet.</span><span class="sxs-lookup"><span data-stu-id="4aebb-101">Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4aebb-102">Verwenden Sie die <xref:System.ServiceModel.OperationContextScope>-Klasse zur Erstellung eines Bereichs für ein bestimmtes <xref:System.ServiceModel.OperationContext>-Objekt oder einen Bereich für ein neues <xref:System.ServiceModel.OperationContext>-Objekt mit einem angegebenen <xref:System.ServiceModel.IContextChannel>-Objekt.</span><span class="sxs-lookup"><span data-stu-id="4aebb-102">Use the <xref:System.ServiceModel.OperationContextScope> class to create a scope for a specific <xref:System.ServiceModel.OperationContext> object or a scope for a new <xref:System.ServiceModel.OperationContext> object using a specified <xref:System.ServiceModel.IContextChannel> object.</span></span> <span data-ttu-id="4aebb-103">Ein <xref:System.ServiceModel.OperationContextScope> kann in einem Windows Communication Foundation (WCF)-Dienst oder die WCF-Clientanwendung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="4aebb-103">An <xref:System.ServiceModel.OperationContextScope> can be used in a Windows Communication Foundation (WCF) service or WCF client application.</span></span>  
  
 <span data-ttu-id="4aebb-104">Sobald das <xref:System.ServiceModel.OperationContextScope>-Objekt den aktuellen Vorgangskontext hergestellt hat, können Sie den <xref:System.ServiceModel.OperationContext> zu Folgendem verwenden:</span><span class="sxs-lookup"><span data-stu-id="4aebb-104">Once the <xref:System.ServiceModel.OperationContextScope> object has established the current operation context, you can use the <xref:System.ServiceModel.OperationContext> to:</span></span>  
  
-   <span data-ttu-id="4aebb-105">Greifen Sie auf eingehende und ausgehenden Nachrichtenheader und andere Eigenschaften zu, und ändern Sie sie.</span><span class="sxs-lookup"><span data-stu-id="4aebb-105">Access and modify incoming and outgoing message headers and other properties.</span></span>  
  
-   <span data-ttu-id="4aebb-106">Greifen Sie auf die Laufzeit, einschließlich Verteiler, Host, Kanal und Erweiterungen zu.</span><span class="sxs-lookup"><span data-stu-id="4aebb-106">Access the runtime, including dispatchers, the host, channel, and extensions.</span></span>  
  
-   <span data-ttu-id="4aebb-107">Greifen Sie auf andere Kontexttypen zu, wie zum Beispiel Sicherheit, Instanz und Anforderungskontexte.</span><span class="sxs-lookup"><span data-stu-id="4aebb-107">Access other types of contexts, such as security, instance, and request contexts.</span></span>  
  
-   <span data-ttu-id="4aebb-108">Greifen Sie auf den dem <xref:System.ServiceModel.OperationContext>-Objekt zugeordneten Kanal oder (wenn der Kanal <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType> implementiert) die Sitzungs-ID des zugeordneten Kanals zu.</span><span class="sxs-lookup"><span data-stu-id="4aebb-108">Access the channel associated with the <xref:System.ServiceModel.OperationContext> object or (if the channel implements <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) the associated channel's session identifier.</span></span>  
  
 <span data-ttu-id="4aebb-109">Wenn ein <xref:System.ServiceModel.OperationContextScope> erstellt wurde, wird der aktuelle <xref:System.ServiceModel.OperationContext> gespeichert, und der neue <xref:System.ServiceModel.OperationContext> wird von der <xref:System.ServiceModel.OperationContext.Current%2A>-Eigenschaft zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="4aebb-109">When an <xref:System.ServiceModel.OperationContextScope> is created, the current <xref:System.ServiceModel.OperationContext> is stored and the new <xref:System.ServiceModel.OperationContext> becomes the one returned by the <xref:System.ServiceModel.OperationContext.Current%2A> property.</span></span> <span data-ttu-id="4aebb-110">Wenn der <xref:System.ServiceModel.OperationContextScope> verworfen wird, wird der ursprüngliche <xref:System.ServiceModel.OperationContext> wiederhergestellt.</span><span class="sxs-lookup"><span data-stu-id="4aebb-110">When the <xref:System.ServiceModel.OperationContextScope> is disposed, the original <xref:System.ServiceModel.OperationContext> is restored.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="4aebb-111">Verwenden Sie nicht das asynchrone Muster der "await" innerhalb eines Blocks OperationContextScope.</span><span class="sxs-lookup"><span data-stu-id="4aebb-111">Do not use the asynchronous "await" pattern within a OperationContextScope block.</span></span> <span data-ttu-id="4aebb-112">Bei der die Fortsetzung wird in einem anderen Thread ausgeführt werden kann, und OperationContextScope wird, bestimmten Thread.</span><span class="sxs-lookup"><span data-stu-id="4aebb-112">When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</span></span> <span data-ttu-id="4aebb-113">Bei Bedarf zum Aufrufen von "await" für einen asynchronen Aufruf, verwenden Sie es außerhalb des Blocks OperationContextScope.</span><span class="sxs-lookup"><span data-stu-id="4aebb-113">If you need to call "await" for an async call, use it outside of the OperationContextScope block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4aebb-114">Im nachstehenden Beispiel ist dargestellt, wie mit dem <xref:System.ServiceModel.OperationContextScope> ein neuer Kontext in einer Clientanwendung erstellt und der ausgehenden Nachricht ein benutzerdefinierter Header hinzugefügt werden kann.</span><span class="sxs-lookup"><span data-stu-id="4aebb-114">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#3](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#3)]
 [!code-vb[OperationContextScope#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4aebb-115">Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.OperationContextScope" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="4aebb-115">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContextScope : System.ServiceModel.IContextChannel -&gt; System.ServiceModel.OperationContextScope" Usage="new System.ServiceModel.OperationContextScope channel" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="4aebb-116">Der bei der Erstellung des Bereichs für einen neuen <see cref="T:System.ServiceModel.OperationContext" /> zu verwendende Kanal.</span><span class="sxs-lookup"><span data-stu-id="4aebb-116">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</span></span></param>
        <summary><span data-ttu-id="4aebb-117">Initalisiert eine neue Instanz der <see cref="T:System.ServiceModel.OperationContextScope" />-Klasse, die mit dem angegebenen <see cref="T:System.ServiceModel.IContextChannel" /> einen neuen <see cref="T:System.ServiceModel.OperationContext" /> für den Bereich erstellt.</span><span class="sxs-lookup"><span data-stu-id="4aebb-117">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4aebb-118">Verwenden Sie den <xref:System.ServiceModel.OperationContextScope.%23ctor%2A>-Konstruktor zur Erstellung eines neuen <xref:System.ServiceModel.OperationContext> für einen Clientkanal, mit dem ausgehende Nachrichtenheader hinzugefügt oder geändert werden können, eingehende Nachrichtenheader gelesen werden können oder auf andere Laufzeiteigenschaften des <xref:System.ServiceModel.OperationContext> zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="4aebb-118">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a new <xref:System.ServiceModel.OperationContext> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <xref:System.ServiceModel.OperationContext>.</span></span>  
  
 <span data-ttu-id="4aebb-119">Die der <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType>-Eigenschaft des neu erstellten <xref:System.ServiceModel.OperationContext> hinzugefügten Headers werden nur auf den Kanal angewendet, der an den <xref:System.ServiceModel.OperationContextScope.%23ctor%2A>-Konstruktor übergeben wurde.</span><span class="sxs-lookup"><span data-stu-id="4aebb-119">The headers added to the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> property of the newly created <xref:System.ServiceModel.OperationContext> apply only to the channel that was passed to the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor.</span></span> <span data-ttu-id="4aebb-120">Erstellt der Benutzer einen neuen Kanal innerhalb dieses Bereichs, werden die Header nicht auf Nachrichten angewendet, die an den neuen Kanal gesendet werden.</span><span class="sxs-lookup"><span data-stu-id="4aebb-120">If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4aebb-121">Im nachstehenden Beispiel ist dargestellt, wie mit dem <xref:System.ServiceModel.OperationContextScope> ein neuer Kontext in einer Clientanwendung erstellt werden kann, um der ausgehenden Nachricht einen benutzerdefinierten Header hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="4aebb-121">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application in order to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.OperationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.OperationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::OperationContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContextScope : System.ServiceModel.OperationContext -&gt; System.ServiceModel.OperationContextScope" Usage="new System.ServiceModel.OperationContextScope context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4aebb-122">Der aktive <see cref="T:System.ServiceModel.OperationContext" /> im erstellten Bereich.</span><span class="sxs-lookup"><span data-stu-id="4aebb-122">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</span></span></param>
        <summary><span data-ttu-id="4aebb-123">Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.OperationContextScope" />-Klasse zur Erstellung eines Bereichs für das angegebene <see cref="T:System.ServiceModel.OperationContext" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="4aebb-123">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4aebb-124">Verwenden Sie den <xref:System.ServiceModel.OperationContextScope.%23ctor%2A>-Konstruktor zur Erstellung eines Codeblocks, der das angegebene <xref:System.ServiceModel.OperationContextScope>-Objekt als aktuellen Bereich enthält.</span><span class="sxs-lookup"><span data-stu-id="4aebb-124">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a code block within which the specified <xref:System.ServiceModel.OperationContextScope> object is the current scope.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="operationContextScope.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4aebb-125">Stellt den ursprünglichen <see cref="T:System.ServiceModel.OperationContext" /> wieder als aktiven Kontext her und verwendet das <see cref="T:System.ServiceModel.OperationContextScope" />-Objekt wieder.</span><span class="sxs-lookup"><span data-stu-id="4aebb-125">Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
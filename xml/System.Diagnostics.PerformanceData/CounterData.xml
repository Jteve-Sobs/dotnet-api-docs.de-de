<Type Name="CounterData" FullName="System.Diagnostics.PerformanceData.CounterData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1b5fa4b1fce6ba8070913cd1a8ed5ef265b8bdff" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48750586" /></Metadata><TypeSignature Language="C#" Value="public sealed class CounterData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CounterData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.PerformanceData.CounterData" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CounterData" />
  <TypeSignature Language="C++ CLI" Value="public ref class CounterData sealed" />
  <TypeSignature Language="F#" Value="type CounterData = class" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält die unformatierten Daten für einen Indikator.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=nameWithType> Eigenschaft gibt eine Instanz dieser Klasse zurück.  
  
 Diese Klasse stellt eine threadsichere Methoden zum Lesen und Schreiben von Daten bereit.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public void Decrement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Decrement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterData.Decrement" />
      <MemberSignature Language="VB.NET" Value="Public Sub Decrement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Decrement();" />
      <MemberSignature Language="F#" Value="member this.Decrement : unit -&gt; unit" Usage="counterData.Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verringert den Leistungsindikatorwert um 1.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sicher verringert den Leistungsindikatorwert für Anwendungen mit mehreren Threads.  
  
 Aufrufen, um den Leistungsindikatorwert um einen bestimmten Wert zu verringern, die <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> Methode, und legen die `value` Parameter, um eine negative Zahl.  
  
 Verwenden Sie zum Festlegen des Wert dieses Indikators die <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public void Increment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Increment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterData.Increment" />
      <MemberSignature Language="VB.NET" Value="Public Sub Increment ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Increment();" />
      <MemberSignature Language="F#" Value="member this.Increment : unit -&gt; unit" Usage="counterData.Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erhöht den Leistungsindikatorwert um 1.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode erhöht sich den Wert dieses Indikators für Anwendungen mit mehreren Threads sicher.  
  
 Verwenden Sie zum Festlegen des Wert dieses Indikators die <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> Eigenschaft.  
  
 Um den Leistungsindikatorwert um einen bestimmten Wert zu erhöhen, rufen die <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementBy">
      <MemberSignature Language="C#" Value="public void IncrementBy (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IncrementBy(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IncrementBy (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IncrementBy(long value);" />
      <MemberSignature Language="F#" Value="member this.IncrementBy : int64 -&gt; unit" Usage="counterData.IncrementBy value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert, um den der Leistungsindikatorwert erhöht werden soll. Der Inkrementwert kann negativ oder positiv sein.</param>
        <summary>Erhöht den Leistungsindikatorwert um den angegebenen Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode erhöht sich den Wert dieses Indikators für Anwendungen mit mehreren Threads sicher.  
  
 Verwenden Sie zum Festlegen des Wert dieses Indikators die <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> Eigenschaft.  
  
 Um den Leistungsindikatorwert um 1 erhöhen möchten, rufen die <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawValue">
      <MemberSignature Language="C#" Value="public long RawValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RawValue" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceData.CounterData.RawValue" />
      <MemberSignature Language="VB.NET" Value="Public Property RawValue As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RawValue { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.RawValue : int64 with get, set" Usage="System.Diagnostics.PerformanceData.CounterData.RawValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt die unformatierten Leistungsindikatordaten fest oder ruft sie ab.</summary>
        <value>Die unformatierten Indikatordaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist nicht threadsicher und eignet sich für Singlethread-Zugriff. Verwenden Sie für den Zugriff auf die Indikatordaten mit mehreren Threads, die <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public long Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Value" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceData.CounterData.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Value { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Value : int64 with get, set" Usage="System.Diagnostics.PerformanceData.CounterData.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt die Leistungsindikatordaten fest oder ruft sie ab.</summary>
        <value>Die Indikatordaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt sicheren Zugriff auf die Indikatordaten für Anwendungen mit mehreren Threads bereit. Wenn die Leistung von Bedeutung ist, verwenden Sie die <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> Eigenschaft, aber die <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> Eigenschaft ist nicht threadsicher.  
  
 Beachten Sie, dass die <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> Eigenschaft ist nicht threadsicher, die in .NET Framework 3.5.  
  
 Um den Zählerwert zu erhöhen, sollten Sie verwenden die <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> oder <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> Methode.  
  
   
  
## Examples  
 Ein Beispiel finden Sie unter <xref:System.Diagnostics.PerformanceData>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
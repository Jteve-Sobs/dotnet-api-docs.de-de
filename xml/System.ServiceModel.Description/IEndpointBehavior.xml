<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27ddbb56d79419428abfb7efa275855acbbb7722" /><Meta Name="ms.sourcegitcommit" Value="2b78f05b0c6fa92adaf5e1dfe5a50388f952efe7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/02/2019" /><Meta Name="ms.locfileid" Value="71808930" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementiert Methoden, die verwendet werden können, um das Laufzeitverhalten eines Endpunkts in einer Dienst- oder Clientanwendung zu erweitern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementiert die <xref:System.ServiceModel.Description.IEndpointBehavior>-Schnittstelle, um Aspekte der Endpunkt-weiten Ausführung auf Anwendungsebene für Client- oder Dienstanwendungen zu ändern, zu überprüfen oder zu erweitern.  
  
-   Verwenden Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A>-Methode, um benutzerdefinierte Daten zur Laufzeit zu übergeben, die bewirken, dass Bindungen benutzerdefiniertes Verhalten unterstützen.  
  
-   Verwenden Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A>-Methode, um in einer Clientanwendung Erweiterungen eines Endpunkts zu ändern, zu überprüfen oder ihm Erweiterungen hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>-Methode, um in einer Dienstanwendung Erweiterungen einer Endpunkt-weiten Ausführung zu ändern, zu überprüfen oder ihr hinzuzufügen.  
  
-   Verwenden Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>-Methode, um zu prüfen, ob <xref:System.ServiceModel.Description.ServiceEndpoint> bestimmte Anforderungen erfüllt. Dies kann zur Prüfung verwendet werden, ob für einen Endpunkt eine bestimmte Konfigurationseinstellung aktiviert wurde und ob er bestimmte Funktionen und andere Anforderungen unterstützt.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior>-Objekte können jede dieser Methoden nutzen, jedoch ist häufig nur eine Methode von Bedeutung; in einem solchen Fall geben die nicht verwendeten Methoden Werte ohne Durchführung einer Aktion zurück.  
  
> [!NOTE]
>  Alle <xref:System.ServiceModel.Description.IEndpointBehavior>-Methoden übergeben ein <xref:System.ServiceModel.Description.ServiceEndpoint>-Objekt als Parameter. Dieser Parameter dient nur für die Prüfung; wenn Sie das <xref:System.ServiceModel.Description.ServiceEndpoint>-Objekt ändern, ist das Ausführungsverhalten nicht definiert.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior>-Objekte werden in der Regel verwendet, um auf die verschiedenen Eigenschaften der Objekte <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> und <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> in einer Dienstanwendung und <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> und <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> in einer Clientanwendung zuzugreifen. Außerdem können Sie auf die Eigenschaften von Duplexclients und -diensten mithilfe der <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType>-Eigenschaft bzw. der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>-Eigenschaft zugreifen.  
  
 Eine Beschreibung der verschiedenen verfügbaren Eigenschaften und Anpassungen finden Sie unter [Erweitern von Service Host und der Dienstmodell Ebene](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Nachdem eine Anpassung festgelegt wurde (und die Anpassungs Schnittstelle bei Bedarf implementiert wurde) und die <xref:System.ServiceModel.Description.IEndpointBehavior> entschieden wurde, ist der geeignete Anpassungsbereich. die Anpassung muss in die Windows Communication Foundation (WCF) eingefügt werden. Runtime durch Implementieren von <xref:System.ServiceModel.Description.IEndpointBehavior> und Hinzufügen des Endpunkt Verhaltens zur Laufzeit.  
  
 Es gibt zwei Möglichkeiten, das Verhalten der Laufzeit hinzuzufügen:  
  
-   Fügen Sie das benutzerdefinierte Endpunktverhalten den <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A>-Eigenschaften vor dem Öffnen des Diensthosts (in einer Dienstanwendung) bzw. der Kanalfactory (in einer Clientanwendung) hinzu.  
  
-   Konfigurieren Sie das Verhalten mithilfe einer Anwendungskonfigurationsdatei. Weitere Informationen finden Sie unter [&lt;verhaltextensions @ no__t-2](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Um eine Dienstanpassungsaufgabe auszuführen, muss das entsprechende <xref:System.ServiceModel.Description.IEndpointBehavior>-Objekt der <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType>-Eigenschaft vor der Erstellung der Dienstlaufzeit hinzugefügt werden, was erfolgt, wenn die <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType>-Methode für <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> aufgerufen wird. Um eine Clientanpassungsaufgabe auszuführen, muss das <xref:System.ServiceModel.Description.IEndpointBehavior>-Objekt der <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType>-Eigenschaft hinzugefügt werden, bevor die <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>-Methode bzw. die <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType>-Methode für <xref:System.ServiceModel.ChannelFactory%601> aufgerufen wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung eines Endpunktverhaltens gezeigt, mit der ein <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>-Objekt in eine Dienstanwendung einfügt wird. In diesem Beispiel implementiert die `EndpointBehaviorMessageInspector`-Klasse <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>, um die eingehende und ausgehende Nachricht zu prüfen, außerdem die <xref:System.ServiceModel.Description.IEndpointBehavior>-Schnittstelle, um die Inspektorklasse in das Inspektionssystem für alle Endpunkte einzufügen, für die das Verhalten gilt, und das <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, um das Nachrichteninspektorverhalten mithilfe einer Anwendungskonfigurationsdatei zu aktivieren.  
  
 Der erste Schritt ist die Implementierung des Nachrichteninspektors.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>-Methode zum Hinzufügen des Nachrichteninspektors zur <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Im folgenden Codebeispiel wird eine Implementierung von <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> gezeigt, mit der die Verwendung des Nachrichteninspektorverhaltens anhand einer Konfigurationsdatei ermöglicht wird.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Schließlich zeigt die folgende Konfigurationsdatei, wie das vorangehende Beispiel in der Konfiguration verwendet werden kann.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">Der zu verändernde Endpunkt.</param>
        <param name="bindingParameters">Die Objekte, die von Bindungselementen zur Unterstützung des Verhaltens benötigt werden.</param>
        <summary>Wird implementiert, um Daten zur Laufzeit an Bindungen zu übergeben und damit benutzerdefiniertes Verhalten zu unterstützen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A>-Methode, um den Bindungselementen zusätzliche Objekte bereitzustellen, die sie zur Unterstützung des Endpunktverhaltens benötigen. Wenn hier Bindungsparameter hinzugefügt werden, können diese Objekte beim Erstellen des Kanallisteners oder der Kanalfactory von der Bindung gefunden werden. In der Regel implementieren Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A>-Methode, um Informationen zum Endpunkt an ein benutzerdefiniertes Bindungselement zu übergeben, damit ein unterstützender Kanal korrekt erstellt werden kann. Geben Sie keinen Wert zurück, wenn keine Änderungen erforderlich sind.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Der Endpunkt, der angepasst werden soll.</param>
        <param name="clientRuntime">Die Clientlaufzeit, die angepasst werden soll.</param>
        <summary>Implementiert eine Änderung oder Erweiterung des Clients in einem Endpunkt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A>-Methode, um benutzerdefinierte Erweiterungen für alle Nachrichten eines Endpunkts oder für einen bestimmten Vorgang zur Clientlaufzeit hinzuzufügen bzw. sie zu ändern oder anzuzeigen. Ausführliche Informationen über Anpassungsmöglichkeiten bei Clientlaufzeitobjekten finden Sie unter <xref:System.ServiceModel.Dispatcher.ClientRuntime> und <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Die <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A>-Methode sollte <xref:System.NotImplementedException> auslösen, wenn das Verhalten nur zur Verwendung in einer Dienstanwendung vorgesehen ist.  
  
 Da andere Verhalten unter Umständen bereits einige Vorgänge der Laufzeit hinzugefügt oder aus ihr entfernt haben, ist nicht gewährleistet, dass die Anzahl der in der Beschreibung enthaltenen Vorgänge mit der Anzahl der <xref:System.ServiceModel.Dispatcher.DispatchOperation>-Objekte in der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>-Eigenschaft übereinstimmt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Der Endpunkt, der den Vertrag verfügbar macht.</param>
        <param name="endpointDispatcher">Der Endpunktverteiler, der geändert oder erweitert werden soll.</param>
        <summary>Implementiert eine Änderung oder eine Erweiterung des Diensts in einem Endpunkt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>-Methode, um die Dienstlaufzeit für alle Nachrichten oder bestimmte Vorgänge in einem Endpunkt anzuzeigen, zu ändern oder zu erweitern. Ausführliche Informationen über Anpassungsmöglichkeiten in Dienstanwendungen finden Sie unter <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> und <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Die <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>-Methode sollte eine <xref:System.NotImplementedException>-Ausnahme auslösen, wenn das Verhalten nur zur Verwendung in einer Clientanwendung vorgesehen ist.  
  
 Bei Verwendung eines Rückrufvertrags (ein Vorgang in jeder Richtung) können in der Beschreibung zwei Vorgänge mit dem gleichen Namen vorhanden sein. Wenn Sie Vorgänge mehrmals ausführen, müssen die Nachrichtenrichtung der Endpunkt-<xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> und die Richtung, die von der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, übereinstimmen.  
  
 Da andere Verhalten unter Umständen bereits einige Vorgänge hinzugefügt oder aus der Laufzeit entfernt haben, ist zudem nicht gewährleistet, dass die Anzahl der in der Beschreibung enthaltenen Vorgänge mit der Anzahl der <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>-Objekte, die in der <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType>-Eigenschaft enthalten sind, übereinstimmt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung eines Endpunktverhaltens gezeigt, mit der ein <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>-Objekt in eine Dienstanwendung einfügt wird. In diesem Beispiel implementiert die `EndpointBehaviorMessageInspector`-Klasse <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>, um die eingehende und ausgehende Nachricht zu prüfen, außerdem die <xref:System.ServiceModel.Description.IEndpointBehavior>-Schnittstelle, um die Inspektorklasse in das Inspektionssystem für alle Endpunkte einzufügen, für die das Verhalten gilt, und das <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, um das Nachrichteninspektorverhalten mithilfe einer Anwendungskonfigurationsdatei zu aktivieren.  
  
 Der erste Schritt ist die Implementierung des Nachrichteninspektors.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>-Methode zum Hinzufügen des Nachrichteninspektors zur <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>-Eigenschaft veranschaulicht.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Im folgenden Codebeispiel wird eine Implementierung von <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> gezeigt, mit der die Verwendung des Nachrichteninspektorverhaltens anhand einer Konfigurationsdatei ermöglicht wird.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Schließlich zeigt die folgende Konfigurationsdatei, wie das vorangehende Beispiel in der Konfiguration verwendet werden kann.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Der zu überprüfende Endpunkt.</param>
        <summary>Implementieren Sie dies, um zu prüfen, ob der Endpunkt bestimmte Kriterien erfüllt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>-Methode, um die Struktur zu untersuchen, mit der Kriterien überprüft werden. Es ist nicht erforderlich, Anpassungen in <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> oder <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> durchzuführen, um diese Methode zu verwenden. Wenn die Validierung des Endpunkts erfolgreich ist, werden Werte zurückgegeben, andernfalls wird eine Ausnahme ausgelöst.  
  
 Die <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>-Methode kann zum Beispiel zur Überprüfung verwendet werden, ob alle Endpunkte eine genehmigte Unternehmensbindung verwenden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

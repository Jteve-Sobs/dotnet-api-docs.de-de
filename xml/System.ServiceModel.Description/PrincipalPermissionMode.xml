<Type Name="PrincipalPermissionMode" FullName="System.ServiceModel.Description.PrincipalPermissionMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e9e06b4e82b4acfd77ca62ee0b2033cc0eec418f" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51876058" /></Metadata><TypeSignature Language="C#" Value="public enum PrincipalPermissionMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PrincipalPermissionMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.PrincipalPermissionMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum PrincipalPermissionMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class PrincipalPermissionMode" />
  <TypeSignature Language="F#" Value="type PrincipalPermissionMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Legt den Modus für Autorisierungsprüfungen fest, wenn das <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute" /> zum Steuern des Zugriffs auf eine Methode verwendet wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Anwenden des <xref:System.Security.Permissions.PrincipalPermissionAttribute>s auf eine Methode wird mit diesem Modus festgelegt, welche Rollen beim Autorisieren des Zugriffs verwendet werden sollen. Standardmäßig verwendet das Attribut Windows-Gruppen (wie `Administrator` oder `Users`) zum Festlegen der Rolle, der der Benutzer angehören muss.  
  
 Um den Modus programmgesteuert festzulegen, müssen Sie eine Instanz der `ServiceHost`-Klasse erstellen, dann das <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in der Verhaltensauflistung suchen und den <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> auf die geeignete Enumeration festlegen. Im folgenden Beispiel wird die Eigenschaft, um UseAspNetRoles.  
  
 [!code-csharp[PrincipalPermissionMode#1](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#1)]
 [!code-vb[PrincipalPermissionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#1)]  
  
 Sie können auch das Verhalten in der Konfiguration festlegen, durch das Hinzufügen einer [ &lt;ServiceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) auf die [ &lt;ServiceBehaviors&gt; ](~/docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md) von einer Konfigurationsdatei, wie im folgenden Code gezeigt.  
  
 [!code-csharp[PrincipalPermissionMode#10](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#10)]
 [!code-vb[PrincipalPermissionMode#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#10)]  
  
 Die Enumeration beeinflusst, wie das <xref:System.Security.Permissions.PrincipalPermissionAttribute>-Attribut einen Benutzer autorisiert, wenn sie auf eine Methode angewendet wird. Im folgenden Beispiel wird das Attribut auf eine Methode angewendet und außerdem gefordert, dass der Benutzer der Benutzergruppe auf dem Computer angehört. Dieser Code funktioniert nur, wenn <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> auf `UseWindowsGroup` (die Standardeinstellung) festgelegt ist.  
  
 [!code-csharp[PrincipalPermissionMode#2](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#2)]
 [!code-vb[PrincipalPermissionMode#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#2)]  
  
## <a name="useaspnetroles"></a>UseAspNetRoles  
 Der UseAspNetRoles-Wert ist für alle anmeldeinformationentypen verwendet. In diesem Modus können Windows Communication Foundation (WCF) auf den ASP.NET-Rollenanbieter zu verwenden, um autorisierungsentscheidungen zu treffen.  
  
 Wenn die Anmeldeinformationen für einen Dienst von einem X.509-Zertifikat bereitgestellt werden, können Sie die `Name`-Eigenschaft von <xref:System.Security.Permissions.PrincipalPermissionAttribute> auf eine Zeichenfolge festlegen, die aus den verketteten Werten des Betreff- und Fingerabdruckfelds besteht, wie in folgendem Beispiel gezeigt.  
  
 [!code-csharp[PrincipalPermissionMode#3](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#3)]
 [!code-vb[PrincipalPermissionMode#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#3)]  
  
 Die verkettete Zeichenfolge besteht aus den Betreff- und Fingerabdruckwerten, die durch ein Semikolon und ein Leerzeichen voneinander getrennt werden.  
  
 Es ist auch möglich, dass das Betrefffeld eines Zertifikats auf eine NULL-Zeichenfolge festgelegt wird. In diesem Fall können Sie die `Name`-Eigenschaft auf ein Semikolon, gefolgt von einem Leerzeichen und dem Fingerabdruck, festlegen, wie in folgendem Beispiel gezeigt.  
  
 [!code-csharp[PrincipalPermissionMode#4](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#4)]
 [!code-vb[PrincipalPermissionMode#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#4)]  
  
 Wenn ein ASP.NET-Rollenanbieter vorhanden ist, können Sie die <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>-Eigenschaft auf eine Rolle in der Datenbank festlegen. Standardmäßig wird die Datenbank durch <xref:System.Web.Security.SqlRoleProvider> dargestellt. Sie können auch einen benutzerdefinierten Rollenanbieter mit der <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A>-Eigenschaft der <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>-Klasse festlegen. Im folgenden Code wird die Rolle auf `Administrators` festgelegt. Beachten Sie, dass der Rollenanbieter das Benutzerkonto dieser Rolle zuordnen muss.  
  
 [!code-csharp[PrincipalPermissionMode#13](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#13)]
 [!code-vb[PrincipalPermissionMode#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#13)]  
  
 Weitere Informationen zu den ASP.NET-Rollenanbieter, finden Sie unter [so wird's gemacht: Verwenden von Rollen-Manager in ASP.NET 2.0](https://go.microsoft.com/fwlink/?LinkId=96692).  
  
 Weitere Informationen zur Verwendung von WCF und des Rollenanbieters finden Sie unter [Vorgehensweise: Verwenden des ASP.NET-Rollenanbieters mit einem Dienst](~/docs/framework/wcf/feature-details/how-to-use-the-aspnet-role-provider-with-a-service.md).  
  
## <a name="custom"></a>Benutzerdefiniert  
 Wenn die Eigenschaft auf Custom festgelegt ist, müssen Sie auch angeben, auf eine benutzerdefinierte Klasse, die implementiert die <xref:System.IdentityModel.Policy.IAuthorizationPolicy> Klasse. Diese Klasse stellt die `IPrincipal`-Darstellung des Aufrufers in der <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A>-Auflistung bereit. Sie muss die `IPrincipal`-Instanz in der Eigenschaftenauflistung unter Verwendung des Zeichenfolgeschlüssels "Principal" speichern, wie im folgenden Beispiel gezeigt.  
  
```  
evaluationContext.Properties["Principal"]=new CustomPrincipal(identity);  
```  
  
## <a name="background"></a>Hintergrund  
 Mit der rollenbasierten Sicherheit in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] können Anwendungen Autorisierungen durch Code angeben. Durch Angeben des Bedarfs für <xref:System.Security.Permissions.PrincipalPermission> muss <xref:System.Threading.Thread.CurrentPrincipal%2A> der Anforderung für `PrincipalPermission` entsprechen. Beispiel: Der Benutzer muss sich in einer bestimmten Rolle oder Gruppe befinden. Andernfalls ist der Thread nicht berechtigt, den Code auszuführen, wodurch eine Ausnahme ausgelöst wird. WCF bietet eine Reihe von <xref:System.ServiceModel.Description.PrincipalPermissionMode> Auswahl an die <xref:System.Threading.Thread.CurrentPrincipal%2A> basierend auf <xref:System.Security.SecurityContext> entsprechend.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie UseAspNetRoles angeben.  
  
 [!code-csharp[PrincipalPermissionMode#7](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#7)]
 [!code-vb[PrincipalPermissionMode#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#7)]  
  
 Das folgende Beispiel zeigt, wie Sie benutzerdefinierte angeben.  
  
 [!code-csharp[PrincipalPermissionMode#8](~/samples/snippets/csharp/VS_Snippets_CFX/principalpermissionmode/cs/source.cs#8)]
 [!code-vb[PrincipalPermissionMode#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/principalpermissionmode/vb/source.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Always">
      <MemberSignature Language="C#" Value="Always" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode Always = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.Always" />
      <MemberSignature Language="VB.NET" Value="Always" />
      <MemberSignature Language="C++ CLI" Value="Always" />
      <MemberSignature Language="F#" Value="Always = 4" Usage="System.ServiceModel.Description.PrincipalPermissionMode.Always" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Ermöglicht es dem Benutzer, immer eine benutzerdefinierte <see cref="T:System.Security.Principal.IPrincipal" />-Klasse für <see cref="P:System.Threading.Thread.CurrentPrincipal" /> anzugeben.</summary>
      </Docs>
    </Member>
    <Member MemberName="Custom">
      <MemberSignature Language="C#" Value="Custom" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode Custom = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.Custom" />
      <MemberSignature Language="VB.NET" Value="Custom" />
      <MemberSignature Language="C++ CLI" Value="Custom" />
      <MemberSignature Language="F#" Value="Custom = 3" Usage="System.ServiceModel.Description.PrincipalPermissionMode.Custom" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Ermöglicht es dem Benutzer, eine benutzerdefinierte <see cref="T:System.Security.Principal.IPrincipal" />-Klasse für <see cref="P:System.Threading.Thread.CurrentPrincipal" /> anzugeben.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.ServiceModel.Description.PrincipalPermissionMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><see cref="P:System.Threading.Thread.CurrentPrincipal" /> wird nicht festgelegt.</summary>
      </Docs>
    </Member>
    <Member MemberName="UseAspNetRoles">
      <MemberSignature Language="C#" Value="UseAspNetRoles" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode UseAspNetRoles = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles" />
      <MemberSignature Language="VB.NET" Value="UseAspNetRoles" />
      <MemberSignature Language="C++ CLI" Value="UseAspNetRoles" />
      <MemberSignature Language="F#" Value="UseAspNetRoles = 2" Usage="System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><see cref="P:System.Threading.Thread.CurrentPrincipal" /> wird basierend auf dem [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]-Rollenanbieter (<see cref="T:System.Web.Security.RoleProvider" />) festgelegt.</summary>
      </Docs>
    </Member>
    <Member MemberName="UseWindowsGroups">
      <MemberSignature Language="C#" Value="UseWindowsGroups" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Description.PrincipalPermissionMode UseWindowsGroups = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups" />
      <MemberSignature Language="VB.NET" Value="UseWindowsGroups" />
      <MemberSignature Language="C++ CLI" Value="UseWindowsGroups" />
      <MemberSignature Language="F#" Value="UseWindowsGroups = 1" Usage="System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.PrincipalPermissionMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><see cref="P:System.Threading.Thread.CurrentPrincipal" /> wird basierend auf Windows (<see cref="T:System.Security.Principal.WindowsPrincipal" />) festgelegt. Wenn die Benutzeridentität nicht einem Windows-Konto zugeordnet ist, wird ein anonymer Windows-Modus verwendet.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
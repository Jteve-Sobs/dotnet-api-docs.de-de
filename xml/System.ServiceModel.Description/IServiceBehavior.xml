<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0a4e8c5f3fffe6e99d8bc2a49451c67e14f4d1a" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78748952" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Mechanismus bereit, um benutzerdefinierte Erweiterungen für einen gesamten Dienst zu ändern oder einzufügen, einschließlich <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementiert <xref:System.ServiceModel.Description.IServiceBehavior>, um Aspekte der dienstweiten Ausführung auf Anwendungsebene zu ändern, zu überprüfen oder zu erweitern:  
  
-   Verwenden Sie die <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>-Methode zum Ändern von Eigenschaftenwerten zur Laufzeit oder zum Einfügen von benutzerdefinierten Erweiterungsobjekten, wie Fehlerhandler, Nachrichten- oder Parameterinterceptoren, Sicherheitserweiterungen und anderen benutzerdefinierten Erweiterungsobjekten.  
  
-   Verwenden Sie die- <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> Methode, um die Beschreibung zu untersuchen, bevor Windows Communication Foundation (WCF) den ausführenden Dienst erstellt, um zu bestätigen, dass er ordnungsgemäß ausgeführt  
  
-   Verwenden Sie die <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>-Methode, um benutzerdefinierte Informationen zum Dienst an ein Bindungselement zu übergeben, damit der Dienst korrekt unterstützt werden kann.  
  
 <xref:System.ServiceModel.Description.IServiceBehavior>-Objekte können jede dieser Methoden nutzen, jedoch ist häufig nur eine Methode von Bedeutung; in einem solchen Fall geben die nicht verwendeten Methoden keinen Wert zurück.  
  
> [!NOTE]
>  Alle <xref:System.ServiceModel.Description.IServiceBehavior>-Methoden übergeben <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType>-Objekte und <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>-Objekte als Parameter. Der <xref:System.ServiceModel.Description.ServiceDescription>-Parameter dient nur zur Prüfung; wenn Sie diese Objekte ändern, ist das Ausführungsverhalten nicht definiert.  
  
 Um eine Anpassungsaufgabe auszuführen, muss das entsprechende <xref:System.ServiceModel.Description.IServiceBehavior>-Objekt der <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>-Eigenschaft vor der Erstellung der Dienstlaufzeit hinzugefügt werden. Hierfür gibt es drei Möglichkeiten:  
  
-   Das benutzerdefinierte Dienstverhalten wird der <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>-Eigenschaft programmgesteuert hinzugefügt, und zwar bevor die <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType>-Methode für das <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>-Objekt aufgerufen wird.  
  
-   Ein benutzerdefiniertes Attribut wird erstellt, das <xref:System.ServiceModel.Description.IServiceBehavior> implementiert und dazu verwendet wird, zu ändernde Dienstklassen zu markieren. Wenn ein- <xref:System.ServiceModel.ServiceHost> Objekt erstellt wird, verwendet WCF Reflektion, um die Attribute für den Diensttyp zu ermitteln. Wenn ein Attribut <xref:System.ServiceModel.Description.IServiceBehavior> implementiert, wird es der Verhaltensauflistung für <xref:System.ServiceModel.Description.ServiceDescription> hinzugefügt.  
  
-   Erweitern Sie die <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>-Klasse, um die Spezifikation des Verhaltens in einer Anwendung oder Computerkonfigurationsdatei zu unterstützen. Im Abschnitt mit Beispielen finden Sie weitere Informationen.  
  
 Beispiele für Dienst Verhaltensweisen in WCF sind das <xref:System.ServiceModel.ServiceBehaviorAttribute> -Attribut, das-Attribut, das <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType> <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> -und das- <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> Verhalten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein in einer Anwendungskonfigurationsdatei angegebenes Dienstverhalten verwendet wird, um einen benutzerdefinierten Fehlerhandler in eine Dienstanwendung einzufügen. In diesem Beispiel fängt der Fehlerhandler alle Ausnahmen ab und wandelt sie in einen benutzerdefinierten `GreetingFault`-SOAP-Fehler um, der dann an den Client zurückgegeben wird.  
  
 Mit der folgenden <xref:System.ServiceModel.Description.IServiceBehavior>-Implementierung werden keine Bindungsparameterobjekte hinzugefügt, wird das benutzerdefinierte <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType>-Objekte jeder <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>-Eigenschaft hinzugefügt und überprüft, dass jeder Vorgang des Diensts, auf den das Dienstverhalten angewendet wird, über ein <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> des Typs `GreetingFault` verfügt.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 In diesem Beispiel implementiert die Verhaltensklasse auch <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, wodurch das Dienstverhalten mithilfe einer Anwendungskonfigurationsdatei eingefügt werden kann, wie folgendes Codebeispiel zeigt.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (serviceDescription As ServiceDescription, serviceHostBase As ServiceHostBase, endpoints As Collection(Of ServiceEndpoint), bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Die Beschreibung des Diensts.</param>
        <param name="serviceHostBase">Der Host des Diensts.</param>
        <param name="endpoints">Die Dienstendpunkte.</param>
        <param name="bindingParameters">Benutzerdefinierte Objekte, auf die Bindungselemente Zugriff haben.</param>
        <summary>Bietet die Möglichkeit, benutzerdefinierte Daten an Bindungselemente zu übergeben, um die Vertragsimplementierung zu unterstützen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>-Methode, um benutzerdefinierte Datenobjekte der `parameters`-Auflistung hinzuzufügen, mit der Bindungselemente zusätzliche Informationen zur Unterstützung des Vertrags abrufen können.  
  
 Diese Methode wird einmal für jede abgehörte URI aufgerufen. Wenn der Dienst beispielsweise vier Endpunkte hat und zwei über die gleiche abgehörte URI verfügen, wird diese Methode drei Mal aufgerufen. Der Grund dafür ist, dass die `bindingParameters` jeden Kanalstapel als Ziel haben und ein Kanalstapel für jede abgehörte URI besteht. Da alle Aufrufe diese Endpunkte an dieser abgehörten URI empfangen, rufen zwei Aufrufe jeweils einen <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> ab, und ein Aufruf ruft eine Auflistung von zwei <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>-Objekten ab.  
  
> [!NOTE]
>  Alle <xref:System.ServiceModel.Description.IServiceBehavior>-Methoden übergeben <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType>-Objekte und <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>-Objekte als Parameter. Der <xref:System.ServiceModel.Description.ServiceDescription>-Parameter dient nur zur Prüfung und zum Einfügen von Anpassungen; wenn Sie diese Objekte anderweitig ändern, ist das Ausführungsverhalten nicht definiert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDispatchBehavior (serviceDescription As ServiceDescription, serviceHostBase As ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Die Dienstbeschreibung.</param>
        <param name="serviceHostBase">Der Host, der gerade erstellt wird.</param>
        <summary>Stellt die Funktion zum Ausführen von Eigenschaftswerten zur Laufzeit oder zum Einfügen von benutzerdefinierten Erweiterungsobjekten, wie Fehlerhandler, Nachrichten- oder Parameterinterceptoren, Sicherheitserweiterungen und anderen benutzerdefinierten Erweiterungsobjekten, bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementiert die <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>-Methode, um das zu erstellende <xref:System.ServiceModel.ServiceHostBase>-Objekt zu prüfen oder zu ändern, damit benutzerdefinierte Ausführungsszenarien unterstützt werden.  
  
> [!NOTE]
>  Alle <xref:System.ServiceModel.Description.IServiceBehavior>-Methoden übergeben <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType>-Objekte und <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>-Objekte als Parameter. Der <xref:System.ServiceModel.Description.ServiceDescription>-Parameter dient nur zur Prüfung und zum Einfügen von Anpassungen; wenn Sie diese Objekte anderweitig ändern, ist das Ausführungsverhalten nicht definiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein in einer Anwendungskonfigurationsdatei angegebenes Dienstverhalten verwendet wird, um einen benutzerdefinierten Fehlerhandler in eine Dienstanwendung einzufügen. In diesem Beispiel fängt der Fehlerhandler alle Ausnahmen ab und wandelt sie in einen benutzerdefinierten `GreetingFault`-SOAP-Fehler um, der dann an den Client zurückgegeben wird.  
  
 Mit der folgenden <xref:System.ServiceModel.Description.IServiceBehavior>-Implementierung werden keine Bindungsparameterobjekte hinzugefügt, wird das benutzerdefinierte <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType>-Objekte jeder <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>-Eigenschaft hinzugefügt und überprüft, dass jeder Vorgang des Diensts, auf den das Dienstverhalten angewendet wird, über ein <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> des Typs `GreetingFault` verfügt.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 In diesem Beispiel implementiert die Verhaltensklasse auch <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, wodurch das Dienstverhalten mithilfe einer Anwendungskonfigurationsdatei eingefügt werden kann, wie folgendes Codebeispiel zeigt.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (serviceDescription As ServiceDescription, serviceHostBase As ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Die Dienstbeschreibung.</param>
        <param name="serviceHostBase">Der Diensthost, der gerade erstellt wird.</param>
        <summary>Stellt die Funktion zur Verfügung, mit der der Diensthost und die Dienstbeschreibung geprüft werden können, um sicherzustellen, dass der Dienst erfolgreich ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>-Methode, um zu prüfen, ob der aktuelle Dienst ordnungsgemäß anhand des Szenarios ausgeführt werden kann.  
  
> [!NOTE]
>  Alle <xref:System.ServiceModel.Description.IServiceBehavior>-Methoden übergeben <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType>-Objekte und <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType>-Objekte als Parameter. Der <xref:System.ServiceModel.Description.ServiceDescription>-Parameter dient nur zur Prüfung und zum Einfügen von Anpassungen; wenn Sie diese Objekte anderweitig ändern, ist das Ausführungsverhalten nicht definiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein in einer Anwendungskonfigurationsdatei angegebenes Dienstverhalten verwendet wird, um einen benutzerdefinierten Fehlerhandler in eine Dienstanwendung einzufügen. In diesem Beispiel fängt der Fehlerhandler alle Ausnahmen ab und wandelt sie in einen benutzerdefinierten `GreetingFault`-SOAP-Fehler um, der dann an den Client zurückgegeben wird.  
  
 Mit der folgenden <xref:System.ServiceModel.Description.IServiceBehavior>-Implementierung werden keine Bindungsparameterobjekte hinzugefügt, wird das benutzerdefinierte <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType>-Objekte jeder <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>-Eigenschaft hinzugefügt und überprüft, dass jeder Vorgang des Diensts, auf den das Dienstverhalten angewendet wird, über ein <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> des Typs `GreetingFault` verfügt.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 In diesem Beispiel implementiert die Verhaltensklasse auch <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, wodurch das Dienstverhalten mithilfe einer Anwendungskonfigurationsdatei eingefügt werden kann, wie folgendes Codebeispiel zeigt.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

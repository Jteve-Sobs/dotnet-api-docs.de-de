<Type Name="CompositionContext" FullName="System.Composition.CompositionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8da8af6525e0cfada701e23cf6d29cd9faa63e4f" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75145464" /></Metadata><TypeSignature Language="C#" Value="public abstract class CompositionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CompositionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.CompositionContext" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CompositionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionContext abstract" />
  <TypeSignature Language="F#" Value="type CompositionContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Runtime</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
    <AssemblyVersion>1.0.35.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="144c7-101">Stellt Methoden zum Abrufen von Exporten aus der Komposition bereit.</span><span class="sxs-lookup"><span data-stu-id="144c7-101">Provides methods to retrieve exports from the composition.</span></span></summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CompositionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CompositionContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="144c7-102">Initialisiert eine neue Instanz der <see cref="T:System.Composition.CompositionContext" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="144c7-102">Initializes a new instance of the <see cref="T:System.Composition.CompositionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="144c7-103">Beachten Sie, dass dieser Konstruktor geschützt ist. Sie kann nur von Klassen aufgerufen werden, die von der <see cref="T:System.Composition.CompositionContext"/>-Klasse abgeleitet sind.</span><span class="sxs-lookup"><span data-stu-id="144c7-103">Note that this constructor is protected; it can only be called by classes derived from the <see cref="T:System.Composition.CompositionContext"/> class.</span></span> 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public object GetExport (System.Composition.Hosting.Core.CompositionContract contract);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExport(class System.Composition.Hosting.Core.CompositionContract contract) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport(System.Composition.Hosting.Core.CompositionContract)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport (contract As CompositionContract) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExport(System::Composition::Hosting::Core::CompositionContract ^ contract);" />
      <MemberSignature Language="F#" Value="member this.GetExport : System.Composition.Hosting.Core.CompositionContract -&gt; obj" Usage="compositionContext.GetExport contract" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="144c7-104">Der zu entsprechende Vertrag</span><span class="sxs-lookup"><span data-stu-id="144c7-104">The contract to match.</span></span></param>
        <summary><span data-ttu-id="144c7-105">Ruft den Export ab, der mit dem angegebenen Vertrag übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="144c7-105">Retrieves the export that matches the specified contract.</span></span></summary>
        <returns><span data-ttu-id="144c7-106">Der exportierte Wert.</span><span class="sxs-lookup"><span data-stu-id="144c7-106">The exported value.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-107">Für <paramref name="contract" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-107">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public object GetExport (Type exportType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExport(class System.Type exportType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport (exportType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExport(Type ^ exportType);" />
      <MemberSignature Language="F#" Value="member this.GetExport : Type -&gt; obj" Usage="compositionContext.GetExport exportType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="144c7-108">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-108">The type to match.</span></span></param>
        <summary><span data-ttu-id="144c7-109">Ruft den Export ab, der mit dem angegebenen Typen übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="144c7-109">Retrieves the export that matches the specified type.</span></span></summary>
        <returns><span data-ttu-id="144c7-110">Der exportierte Wert.</span><span class="sxs-lookup"><span data-stu-id="144c7-110">The exported value.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-111">Für <paramref name="exportType" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-111">No export was found for <paramref name="exportType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public object GetExport (Type exportType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExport(class System.Type exportType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport (exportType As Type, contractName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExport(Type ^ exportType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : Type * string -&gt; obj" Usage="compositionContext.GetExport (exportType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="144c7-112">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-112">The type to match.</span></span></param>
        <param name="contractName"><span data-ttu-id="144c7-113">Der Name, mit dem eine Übereinstimmung gefunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-113">The name to match.</span></span></param>
        <summary><span data-ttu-id="144c7-114">Ruft den Export ab, der mit dem angegebenen Namen und Typen übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="144c7-114">Retrieves the export that matches the specified name and type.</span></span></summary>
        <returns><span data-ttu-id="144c7-115">Der exportierte Wert.</span><span class="sxs-lookup"><span data-stu-id="144c7-115">The exported value.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-116">Für <paramref name="exportType" /> und <paramref name="contractName" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-116">No export was found for <paramref name="exportType" /> and <paramref name="contractName" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public TExport GetExport&lt;TExport&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TExport GetExport&lt;TExport&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of TExport) () As TExport" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; TExport GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; 'Export" Usage="compositionContext.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TExport</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="144c7-117">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-117">The type to match.</span></span></typeparam>
        <summary><span data-ttu-id="144c7-118">Ruft den Export ab, der mit dem angegebenen generischen Typparameter übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="144c7-118">Retrieves the export that matches the specified generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="144c7-119">Der exportierte Wert.</span><span class="sxs-lookup"><span data-stu-id="144c7-119">The exported value.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-120">Für <typeparamref name="TExport" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-120">No export was found for <typeparamref name="TExport" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public TExport GetExport&lt;TExport&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TExport GetExport&lt;TExport&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of TExport) (contractName As String) As TExport" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; TExport GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; 'Export" Usage="compositionContext.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TExport</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="144c7-121">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-121">The type to match.</span></span></typeparam>
        <param name="contractName"><span data-ttu-id="144c7-122">Der Name, mit dem eine Übereinstimmung gefunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-122">The name to match.</span></span></param>
        <summary><span data-ttu-id="144c7-123">Ruft den Export ab, der mit dem angegebenen generischen Typparameter und Vertragsnamen übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="144c7-123">Retrieves the export that matches the specified generic type parameter and contract name.</span></span></summary>
        <returns><span data-ttu-id="144c7-124">Der exportierte Wert.</span><span class="sxs-lookup"><span data-stu-id="144c7-124">The exported value.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-125">Für <typeparamref name="TExport" /> und <paramref name="contractName" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-125">No export was found for <typeparamref name="TExport" /> and <paramref name="contractName" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetExports (Type exportType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetExports(class System.Type exportType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (exportType As Type) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetExports(Type ^ exportType);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type -&gt; seq&lt;obj&gt;" Usage="compositionContext.GetExports exportType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="144c7-126">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-126">The type to match.</span></span></param>
        <summary><span data-ttu-id="144c7-127">Ruft eine Collection aller Exporte ab, die mit dem angegebenen Typen übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="144c7-127">Retrieves a collection of all exports that match the specified type.</span></span></summary>
        <returns><span data-ttu-id="144c7-128">Eine Auflistung von exportierten Werten.</span><span class="sxs-lookup"><span data-stu-id="144c7-128">A collection of exported values.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-129">Für <paramref name="exportType" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-129">No exports were found for <paramref name="exportType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetExports (Type exportType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetExports(class System.Type exportType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (exportType As Type, contractName As String) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetExports(Type ^ exportType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * string -&gt; seq&lt;obj&gt;" Usage="compositionContext.GetExports (exportType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="144c7-130">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-130">The type to match.</span></span></param>
        <param name="contractName"><span data-ttu-id="144c7-131">Der Name, mit dem eine Übereinstimmung gefunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-131">The name to match.</span></span></param>
        <summary><span data-ttu-id="144c7-132">Ruft alle Exporte ab, die mit dem angegebenen Vertragsnamen und Typ übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="144c7-132">Retrieves all exports that match the specified contract name and type.</span></span></summary>
        <returns><span data-ttu-id="144c7-133">Eine Auflistung von exportierten Werten.</span><span class="sxs-lookup"><span data-stu-id="144c7-133">A collection of exported values.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-134">Für <paramref name="exportType" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-134">No exports were found for <paramref name="exportType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TExport&gt; GetExports&lt;TExport&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TExport&gt; GetExports&lt;TExport&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of TExport) () As IEnumerable(Of TExport)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TExport&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;'Export&gt;" Usage="compositionContext.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TExport&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="144c7-135">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-135">The type to match.</span></span></typeparam>
        <summary><span data-ttu-id="144c7-136">Ruft alle Exporte ab, die mit dem angegebenen generischen Typparameter übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="144c7-136">Retrieves all exports that match the specified generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="144c7-137">Eine Auflistung von exportierten Werten.</span><span class="sxs-lookup"><span data-stu-id="144c7-137">A collection of exported values.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-138">Für <typeparamref name="TExport" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-138">No exports were found for <typeparamref name="TExport" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TExport&gt; GetExports&lt;TExport&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TExport&gt; GetExports&lt;TExport&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of TExport) (contractName As String) As IEnumerable(Of TExport)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TExport&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;'Export&gt;" Usage="compositionContext.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TExport&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="144c7-139">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-139">The type to match.</span></span></typeparam>
        <param name="contractName"><span data-ttu-id="144c7-140">Der Name, mit dem eine Übereinstimmung gefunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-140">The name to match.</span></span></param>
        <summary><span data-ttu-id="144c7-141">Ruft alle Exporte ab, die mit dem angegebenen generischen Typparameter und Vertragsnamen übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="144c7-141">Retrieves all exports that match the specified generic type parameter and contract name.</span></span></summary>
        <returns><span data-ttu-id="144c7-142">Eine Auflistung von exportierten Werten.</span><span class="sxs-lookup"><span data-stu-id="144c7-142">A collection of exported values.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-143">Für <typeparamref name="TExport" /> und <paramref name="contractName" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-143">No exports were found for <typeparamref name="TExport" /> and <paramref name="contractName" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public abstract bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="abstract member TryGetExport : System.Composition.Hosting.Core.CompositionContract * obj -&gt; bool" Usage="compositionContext.TryGetExport (contract, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="144c7-144">Der zu entsprechende Vertrag</span><span class="sxs-lookup"><span data-stu-id="144c7-144">The contract to match.</span></span></param>
        <param name="export"><span data-ttu-id="144c7-145">Wenn diese Methode zurückgegeben wird, enthält sie den übereinstimmenden Export oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-145">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="144c7-146">Gibt den Export zurück, der dem angegebenen Vertrag entspricht, oder gibt <see langword="null" /> zurück, wenn keine Übereinstimmung gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="144c7-146">Returns the export that matches the specified contract, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="144c7-147"><see langword="true" />, wenn ein Export gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-147"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-148">Für <paramref name="contract" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-148">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public bool TryGetExport (Type exportType, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport(class System.Type exportType, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport(System.Type,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport (exportType As Type, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExport(Type ^ exportType, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : Type * obj -&gt; bool" Usage="compositionContext.TryGetExport (exportType, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="144c7-149">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-149">The type to match.</span></span></param>
        <param name="export"><span data-ttu-id="144c7-150">Wenn diese Methode zurückgegeben wird, enthält sie den übereinstimmenden Export oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-150">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="144c7-151">Gibt den Export zurück, der dem angegebenen Typ entspricht, oder gibt <see langword="null" /> zurück, wenn keine Übereinstimmung gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="144c7-151">Returns the export that matches the specified type, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="144c7-152"><see langword="true" />, wenn ein Export gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-152"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-153">Für <paramref name="contract" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-153">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public bool TryGetExport (Type exportType, string contractName, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport(class System.Type exportType, string contractName, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport (exportType As Type, contractName As String, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExport(Type ^ exportType, System::String ^ contractName, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : Type * string * obj -&gt; bool" Usage="compositionContext.TryGetExport (exportType, contractName, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="144c7-154">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-154">The type to match.</span></span></param>
        <param name="contractName"><span data-ttu-id="144c7-155">Der Name, mit dem eine Übereinstimmung gefunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-155">The name to match.</span></span></param>
        <param name="export"><span data-ttu-id="144c7-156">Wenn diese Methode zurückgegeben wird, enthält sie den übereinstimmenden Export oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-156">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="144c7-157">Gibt den Export zurück, der dem angegebenen Vertragsnamen und Typ entspricht, oder gibt <see langword="null" /> zurück, wenn keine Übereinstimmung gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="144c7-157">Returns the export that matches the specified contract name and type, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="144c7-158"><see langword="true" />, wenn ein Export gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-158"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-159">Für <paramref name="contract" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-159">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetExport&lt;TExport&gt; (out TExport export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport&lt;TExport&gt;([out] !!TExport&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport(Of TExport) (ByRef export As TExport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; bool TryGetExport([Runtime::InteropServices::Out] TExport % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : 'Export -&gt; bool" Usage="compositionContext.TryGetExport export" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="export" Type="TExport" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="144c7-160">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-160">The type to match.</span></span></typeparam>
        <param name="export"><span data-ttu-id="144c7-161">Wenn diese Methode zurückgegeben wird, enthält sie den übereinstimmenden Export oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-161">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="144c7-162">Gibt den Export zurück, der dem angegebenen genersichen Typparameter Vertragsnamen entspricht, oder gibt <see langword="null" /> zurück, wenn keine Übereinstimmung gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="144c7-162">Returns the export that matches the specified generic type parameter, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="144c7-163"><see langword="true" />, wenn ein Export gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-163"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-164">Für <paramref name="contract" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-164">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetExport&lt;TExport&gt; (string contractName, out TExport export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport&lt;TExport&gt;(string contractName, [out] !!TExport&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport(Of TExport) (contractName As String, ByRef export As TExport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; bool TryGetExport(System::String ^ contractName, [Runtime::InteropServices::Out] TExport % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : string * 'Export -&gt; bool" Usage="compositionContext.TryGetExport (contractName, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
        <AssemblyVersion>1.0.35.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="export" Type="TExport" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="144c7-165">Der Typ, mit der eine Übereinstimmung vorliegen soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-165">The type to match.</span></span></typeparam>
        <param name="contractName"><span data-ttu-id="144c7-166">Der Name, mit dem eine Übereinstimmung gefunden werden soll.</span><span class="sxs-lookup"><span data-stu-id="144c7-166">The name to match.</span></span></param>
        <param name="export"><span data-ttu-id="144c7-167">Wenn diese Methode zurückgegeben wird, enthält sie den übereinstimmenden Export oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-167">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="144c7-168">Gibt den Export zurück, der dem angegebenen generischen Typparameter und Vertragsnamen entspricht, oder gibt <see langword="null" /> zurück, wenn keine Übereinstimmung gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="144c7-168">Returns the export that matches the specified generic type parameter and contract name, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="144c7-169"><see langword="true" />, wenn ein Export gefunden wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="144c7-169"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="144c7-170">Für <paramref name="contract" /> wurde kein Export gefunden.</span><span class="sxs-lookup"><span data-stu-id="144c7-170">No export was found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

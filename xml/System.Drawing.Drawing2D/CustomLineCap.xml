<Type Name="CustomLineCap" FullName="System.Drawing.Drawing2D.CustomLineCap">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5c75a608ce54c941da40e7941b926a057ce5265" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30409904" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CustomLineCap : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomLineCap extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.CustomLineCap" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomLineCap&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomLineCap : MarshalByRefObject, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Kapselt ein benutzerdefiniertes Linienende ein.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Linienenden werden am Anfang und Ende von Linien und Kurven gezeichnet GDI + verwendet <xref:System.Drawing.Pen> Objekte. GDI + unterstützt mehrere vordefinierte Cap-Stile und außerdem ermöglicht es Benutzern, ihre eigenen Cap-Stile definieren. Diese Klasse dient zum Erstellen von benutzerdefinierten Cap Stilen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Drawing.Drawing2D.CustomLineCap>-Klasse veranschaulicht. In diesem Beispiel fügen Sie den Code in einem Windows Form ausgeführt. Behandeln des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignis, und rufen `DrawCaps` aus des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignisbehandlungsmethode, übergeben `e` als <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.Misc3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Misc3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Klasse mit dem angegebenen Umriss und der angegebenen Füllung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath fillPath, class System.Drawing.Drawing2D.GraphicsPath strokePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fillPath As GraphicsPath, strokePath As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomLineCap(System::Drawing::Drawing2D::GraphicsPath ^ fillPath, System::Drawing::Drawing2D::GraphicsPath ^ strokePath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fillPath" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="strokePath" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="fillPath">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />-Objekt, das die Füllung des benutzerdefinierten Endes definiert.</param>
        <param name="strokePath">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />-Objekt, das den Umriss des benutzerdefinierten Endes definiert.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Klasse mit dem angegebenen Umriss und der angegebenen Füllung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.CustomLineCap> verwendet die Füllmodus "Auflösung" unabhängig von der Füllmodus für den Vorgang angegeben.  
  
 Die `fillPath` und `strokePath` Parameter können nicht gleichzeitig verwendet werden. Ein Parameter muss einen null-Wert übergeben werden. Wenn Sie keinen der Parameter einen null-Wert übergeben wird `fillPath` werden ignoriert. Wenn `strokePath` ist `null`, `fillPath` sollten die negative y-Achse abfangen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Drawing.Drawing2D.CustomLineCap.%23ctor%2A> Konstruktor. Um dieses Beispiel auszuführen, fügen Sie den Code in einem Windows Form. Behandeln des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignis, und rufen `DrawCaps` aus des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignisbehandlungsmethode, übergeben `e` als <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.Misc3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Misc3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath fillPath, class System.Drawing.Drawing2D.GraphicsPath strokePath, valuetype System.Drawing.Drawing2D.LineCap baseCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fillPath As GraphicsPath, strokePath As GraphicsPath, baseCap As LineCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomLineCap(System::Drawing::Drawing2D::GraphicsPath ^ fillPath, System::Drawing::Drawing2D::GraphicsPath ^ strokePath, System::Drawing::Drawing2D::LineCap baseCap);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fillPath" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="strokePath" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="baseCap" Type="System.Drawing.Drawing2D.LineCap" />
      </Parameters>
      <Docs>
        <param name="fillPath">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />-Objekt, das die Füllung des benutzerdefinierten Endes definiert.</param>
        <param name="strokePath">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />-Objekt, das den Umriss des benutzerdefinierten Endes definiert.</param>
        <param name="baseCap">Das Linienende, aus dem das benutzerdefinierte Ende erstellt werden soll.</param>
        <summary>Initialisiert aus der angegebenen vorhandenen <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Enumeration eine neue Instanz der <see cref="T:System.Drawing.Drawing2D.LineCap" />-Klasse mit dem angegebenen Umriss und der angegebenen Füllung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.CustomLineCap> verwendet die Füllmodus "Auflösung" unabhängig von der Füllmodus für den Vorgang angegeben.  
  
 Die `fillPath` und `strokePath` Parameter können nicht gleichzeitig verwendet werden. Ein Parameter muss einen null-Wert übergeben werden. Wenn Sie keinen der Parameter einen null-Wert übergeben wird `fillPath` werden ignoriert. Wenn `strokePath` ist `null`, `fillPath` sollten die negative y-Achse abfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap, float baseInset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath fillPath, class System.Drawing.Drawing2D.GraphicsPath strokePath, valuetype System.Drawing.Drawing2D.LineCap baseCap, float32 baseInset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fillPath As GraphicsPath, strokePath As GraphicsPath, baseCap As LineCap, baseInset As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomLineCap(System::Drawing::Drawing2D::GraphicsPath ^ fillPath, System::Drawing::Drawing2D::GraphicsPath ^ strokePath, System::Drawing::Drawing2D::LineCap baseCap, float baseInset);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fillPath" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="strokePath" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="baseCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="baseInset" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="fillPath">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />-Objekt, das die Füllung des benutzerdefinierten Endes definiert.</param>
        <param name="strokePath">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />-Objekt, das den Umriss des benutzerdefinierten Endes definiert.</param>
        <param name="baseCap">Das Linienende, aus dem das benutzerdefinierte Ende erstellt werden soll.</param>
        <param name="baseInset">Der Abstand zwischen dem Ende und der Linie.</param>
        <summary>Initialisiert aus der angegebenen vorhandenen <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Enumeration eine neue Instanz der <see cref="T:System.Drawing.Drawing2D.LineCap" />-Klasse mit dem angegebenen Umriss, der angegebenen Füllung und der angegebenen Absenkung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.CustomLineCap> verwendet die Füllmodus "Auflösung" unabhängig von der Füllmodus für den Vorgang angegeben.  
  
 Die `fillPath` und `strokePath` Parameter können nicht gleichzeitig verwendet werden. Ein Parameter muss einen null-Wert übergeben werden. Wenn Sie keinen der Parameter einen null-Wert übergeben wird `fillPath` werden ignoriert. Wenn `strokePath` ist `null`, `fillPath` sollten die negative y-Achse abfangen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap BaseCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap BaseCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.CustomLineCap.BaseCap" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap BaseCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Drawing.Drawing2D.LineCap" />-Enumeration ab, auf der dieses <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> basiert, oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Drawing.Drawing2D.LineCap" />-Enumeration, auf der dieses <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> basiert.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseInset">
      <MemberSignature Language="C#" Value="public float BaseInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 BaseInset" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.CustomLineCap.BaseInset" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseInset As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float BaseInset { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Abstand zwischen dem Ende und der Linie ab oder legt diesen fest.</summary>
        <value>Der Abstand zwischen dem Anfang des Endes und dem Ende der Linie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine genaue Kopie von dieser <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />.</summary>
        <returns>Das von dieser Methode erstellte <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />, umgewandelt in ein Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Control.Paint> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt ein benutzerdefiniertes Linienende mithilfe der <xref:System.Drawing.Drawing2D.GraphicsPath> Objekt.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.CustomLineCap> Objekt `firstCap`unter Verwendung der <xref:System.Drawing.Drawing2D.GraphicsPath> erstellte Objekt.  
  
-   Erstellt einen Klon des `firstCap` mithilfe der <xref:System.Drawing.Drawing2D.CustomLineCap.Clone%2A> Methode.  
  
-   Richtet die <xref:System.Drawing.Pen.CustomStartCap%2A> und <xref:System.Drawing.Pen.CustomEndCap%2A> Eigenschaften der <xref:System.Drawing.Pen> -Objekt, und verwendet den Stift, einer Zeile und die benutzerdefinierte Caps auf dem Bildschirm gezeichnet werden soll.  
  
```vb  
Public Sub CloneExample(e As PaintEventArgs)  
 Dim points As Point() = New Point(- 5, - 5) New Point(0, 0) _  
 New Point(5, - 5)  
 Dim capPath As New GraphicsPath()  
 ' Create a Path and add two lines to it,  
 ' forming a custom line cap.  
 capPath.AddLines(points)  
 ' Create a CustomLineCap object.  
 Dim firstCap As New CustomLineCap(Nothing, capPath)  
 ' Create a copy of firstCap.  
 Dim secondCap As CustomLineCap = CType(firstCap.Clone(), _  
 CustomLineCap)  
 ' Create a Pen object.  
 Dim pen As New Pen(Color.Black, 3F)  
 'Set up the line.  
 Dim point1 As New Point(20, 20)  
 Dim point2 As New Point(100, 100)  
 ' Set up the caps.  
 pen.CustomStartCap = firstCap  
 pen.CustomEndCap = secondCap  
 ' Draw the line and caps to the screen.  
 e.Graphics.DrawLine(pen, point1, point2)  
 End Sub  
```  
  
```csharp  
private void CloneExample(PaintEventArgs e)  
 {  
 // Create a Path and add two lines to it,  
 // forming a custom line cap.  
 Point[] points =  
 {  
 new Point(-5, -5),  
 new Point(0, 0),  
 new Point(5, -5)  
 };  
 GraphicsPath capPath = new GraphicsPath();  
 capPath.AddLines(points);  
 // Create a CustomLineCap object.  
 CustomLineCap firstCap = new CustomLineCap(null, capPath);  
 // Create a copy of firstCap.  
 CustomLineCap secondCap = (CustomLineCap)firstCap.Clone();  
 // Create a Pen object.  
 Pen pen = new Pen(Color.Black, 3.0f);  
 // Set up the line.  
 Point point1 = new Point(20, 20);  
 Point point2 = new Point(100, 100);  
 // Set up the caps.  
 pen.CustomStartCap = firstCap;  
 pen.CustomEndCap = secondCap;  
 // Draw the line and caps to the screen.  
 e.Graphics.DrawLine(pen, point1, point2);  
 }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von diesem <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufrufen von <xref:System.IDisposable.Dispose%2A> können die von diesem verwendeten Ressourcen <xref:System.Drawing.Drawing2D.CustomLineCap> Objekt für andere Zwecke neu reserviert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CustomLineCap ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!CustomLineCap ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einem <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor das <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> von der Garbage Collection freigegeben wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStrokeCaps">
      <MemberSignature Language="C#" Value="public void GetStrokeCaps (out System.Drawing.Drawing2D.LineCap startCap, out System.Drawing.Drawing2D.LineCap endCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetStrokeCaps([out] valuetype System.Drawing.Drawing2D.LineCap&amp; startCap, [out] valuetype System.Drawing.Drawing2D.LineCap&amp; endCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetStrokeCaps (ByRef startCap As LineCap, ByRef endCap As LineCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetStrokeCaps([Runtime::InteropServices::Out] System::Drawing::Drawing2D::LineCap % startCap, [Runtime::InteropServices::Out] System::Drawing::Drawing2D::LineCap % endCap);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap&amp;" RefType="out" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startCap">Die <see cref="T:System.Drawing.Drawing2D.LineCap" />-Enumeration, die am Anfang einer Linie innerhalb dieses Endes verwendet wird.</param>
        <param name="endCap">Die <see cref="T:System.Drawing.Drawing2D.LineCap" />-Enumeration, die am Ende einer Linie innerhalb dieses Endes verwendet wird.</param>
        <summary>Ruft die Enden für Linienanfang und -ende dieses benutzerdefinierten Endes ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps%2A>-Methode veranschaulicht. Um dieses Beispiel auszuführen, fügen Sie den Code in einem Windows Form. Behandeln des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignis, und rufen `DrawCaps` aus des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignisbehandlungsmethode, übergeben `e` als <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.Misc3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Misc3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeCaps">
      <MemberSignature Language="C#" Value="public void SetStrokeCaps (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeCaps(valuetype System.Drawing.Drawing2D.LineCap startCap, valuetype System.Drawing.Drawing2D.LineCap endCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetStrokeCaps (startCap As LineCap, endCap As LineCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetStrokeCaps(System::Drawing::Drawing2D::LineCap startCap, System::Drawing::Drawing2D::LineCap endCap);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap" />
      </Parameters>
      <Docs>
        <param name="startCap">Die <see cref="T:System.Drawing.Drawing2D.LineCap" />-Enumeration, die am Anfang einer Linie innerhalb dieses Endes verwendet wird.</param>
        <param name="endCap">Die <see cref="T:System.Drawing.Drawing2D.LineCap" />-Enumeration, die am Ende einer Linie innerhalb dieses Endes verwendet wird.</param>
        <summary>Legt die Enden für Linienanfang und -ende dieses benutzerdefinierten Endes fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps%2A>-Methode veranschaulicht. Um dieses Beispiel auszuführen, fügen Sie den Code in einem Windows Form. Behandeln des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignis, und rufen `DrawCaps` aus des Formulars <xref:System.Windows.Forms.Control.Paint> Ereignisbehandlungsmethode, übergeben `e` als <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.Misc3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Misc3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StrokeJoin">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineJoin StrokeJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineJoin StrokeJoin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.CustomLineCap.StrokeJoin" />
      <MemberSignature Language="VB.NET" Value="Public Property StrokeJoin As LineJoin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineJoin StrokeJoin { System::Drawing::Drawing2D::LineJoin get(); void set(System::Drawing::Drawing2D::LineJoin value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Drawing.Drawing2D.LineJoin" />-Enumeration ab, die bestimmt, wie die Linien miteinander verbunden werden, aus denen dieses <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Objekt besteht.</summary>
        <value>Die <see cref="T:System.Drawing.Drawing2D.LineJoin" />-Enumeration, die dieses <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Objekt zum Verbinden von Linien verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt eine <xref:System.Drawing.Drawing2D.LineJoin> -Enumeration, die zum Verbinden von Linien und Kurven, aus denen der gestrichelt Pfad verwendet wird <xref:System.Drawing.Drawing2D.CustomLineCap> Objekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthScale">
      <MemberSignature Language="C#" Value="public float WidthScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 WidthScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale" />
      <MemberSignature Language="VB.NET" Value="Public Property WidthScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float WidthScale { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Betrag ab, um den dieses Objekt der <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />-Klasse in Bezug auf die Breite des <see cref="T:System.Drawing.Pen" />-Objekts skaliert wird, oder legt diesen fest.</summary>
        <value>Der Betrag, um den das Ende skaliert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt das Vielfache, der die Stiftbreite, mit der die Größe des benutzerdefinierten Endes multipliziert. Z. B. ist gleich 1 ist diese Eigenschaft, die benutzerdefinierte initialenbreite ist 10, die Höhe wird 5 und wird eine Linie mit einem Stift mit einer Breite von 3, klicken Sie dann die Abdeckung gezeichneten 30 Einheiten breit und 15 Einheiten hoch. Wenn diese Eigenschaft auf 3 bewirkt, dass die Abdeckung gezeichneten 90 Einheiten, die Breite und Höhe von 45 Einheiten ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ImpersonateOnSerializingReplyMessageProperty" FullName="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0518959968b4850dba4427c49820ee3c4cb9f15b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36612873" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ImpersonateOnSerializingReplyMessageProperty : System.ServiceModel.Channels.IMessageProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImpersonateOnSerializingReplyMessageProperty extends System.Object implements class System.ServiceModel.Channels.IMessageProperty" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />
  <TypeSignature Language="VB.NET" Value="Public Class ImpersonateOnSerializingReplyMessageProperty&#xA;Implements IMessageProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImpersonateOnSerializingReplyMessageProperty : System::ServiceModel::Channels::IMessageProperty" />
  <TypeSignature Language="F#" Value="type ImpersonateOnSerializingReplyMessageProperty = class&#xA;    interface IMessageProperty" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IMessageProperty</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Eine Hilfsprogrammklasse, um während des Serialisierung des Texts der Antwortnachricht einen Identitätswechsels zu aktivieren.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.IMessageProperty CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.IMessageProperty CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCopy () As IMessageProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ServiceModel::Channels::IMessageProperty ^ CreateCopy();" />
      <MemberSignature Language="F#" Value="abstract member CreateCopy : unit -&gt; System.ServiceModel.Channels.IMessageProperty&#xA;override this.CreateCopy : unit -&gt; System.ServiceModel.Channels.IMessageProperty" Usage="impersonateOnSerializingReplyMessageProperty.CreateCopy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.Channels.IMessageProperty.CreateCopy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IMessageProperty</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der Message-Eigenschaft.</summary>
        <returns>Die Kopie der Nachrichteneigenschaft.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public static string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Nachrichteneigenschaft ab.</summary>
        <value>Der Name der Nachrichten-Eigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartImpersonation">
      <MemberSignature Language="C#" Value="public void StartImpersonation (out IDisposable impersonationContext, out System.Security.Principal.IPrincipal originalPrincipal, out bool isThreadPrincipalSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartImpersonation([out] class System.IDisposable&amp; impersonationContext, [out] class System.Security.Principal.IPrincipal&amp; originalPrincipal, [out] bool&amp; isThreadPrincipalSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.StartImpersonation(System.IDisposable@,System.Security.Principal.IPrincipal@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartImpersonation (ByRef impersonationContext As IDisposable, ByRef originalPrincipal As IPrincipal, ByRef isThreadPrincipalSet As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartImpersonation([Runtime::InteropServices::Out] IDisposable ^ % impersonationContext, [Runtime::InteropServices::Out] System::Security::Principal::IPrincipal ^ % originalPrincipal, [Runtime::InteropServices::Out] bool % isThreadPrincipalSet);" />
      <MemberSignature Language="F#" Value="member this.StartImpersonation :  *  *  -&gt; unit" Usage="impersonateOnSerializingReplyMessageProperty.StartImpersonation (impersonationContext, originalPrincipal, isThreadPrincipalSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="impersonationContext" Type="System.IDisposable&amp;" RefType="out" />
        <Parameter Name="originalPrincipal" Type="System.Security.Principal.IPrincipal&amp;" RefType="out" />
        <Parameter Name="isThreadPrincipalSet" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="impersonationContext">Diese Methode gibt den Identitätswechselkontext zurück. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <param name="originalPrincipal">Enthält nach dem Beenden dieser Methode den ursprünglichen Prinzipal für den Thread vor dem Aufrufen dieser Methode. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <param name="isThreadPrincipalSet">Enthält nach Beenden dieser Methode einen Wert, der angibt, ob der Prinzipal von dieser Methode auf den Thread festgelegt wurde. Dieser Parameter gibt <see langword="false" /> zurück, wenn der Vorgangskontext zum Imitieren nicht verfügbar war. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <summary>Startet den Identitätswechsel mit dem Kontext des Aufrufers, wenn der Identitätswechsel für den Dienst aktiviert ist und legt den entsprechenden Prinzipal für den Thread gemäß der Dienstkonfiguration fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopImpersonation">
      <MemberSignature Language="C#" Value="public void StopImpersonation (IDisposable impersonationContext, System.Security.Principal.IPrincipal originalPrincipal, bool isThreadPrincipalSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopImpersonation(class System.IDisposable impersonationContext, class System.Security.Principal.IPrincipal originalPrincipal, bool isThreadPrincipalSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.StopImpersonation(System.IDisposable,System.Security.Principal.IPrincipal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopImpersonation (impersonationContext As IDisposable, originalPrincipal As IPrincipal, isThreadPrincipalSet As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopImpersonation(IDisposable ^ impersonationContext, System::Security::Principal::IPrincipal ^ originalPrincipal, bool isThreadPrincipalSet);" />
      <MemberSignature Language="F#" Value="member this.StopImpersonation : IDisposable * System.Security.Principal.IPrincipal * bool -&gt; unit" Usage="impersonateOnSerializingReplyMessageProperty.StopImpersonation (impersonationContext, originalPrincipal, isThreadPrincipalSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="impersonationContext" Type="System.IDisposable" />
        <Parameter Name="originalPrincipal" Type="System.Security.Principal.IPrincipal" />
        <Parameter Name="isThreadPrincipalSet" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="impersonationContext">Der wiederherzustellende Identitätswechselkontext.</param>
        <param name="originalPrincipal">Der ursprüngliche Prinzipal, der für den Thread festgelegt werden soll.</param>
        <param name="isThreadPrincipalSet">Ein Wert, der angibt, ob der Threadprinzipal während des Identitätswechsels festgelegt wurde. <see langword="true" />, wenn der Prinzipal festgelegt wurde, andernfalls <see langword="false" />.</param>
        <summary>Stellt den Identitätswechsel wieder her und legt den angegebenen ursprünglichen Prinzipal für den Thread fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryGet">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />-Eigenschaft aus der angegebenen Nachricht oder den Meldungseigenschaften ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public static bool TryGet (System.ServiceModel.Channels.Message message, out System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGet(class System.ServiceModel.Channels.Message message, [out] class System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGet(System::ServiceModel::Channels::Message ^ message, [Runtime::InteropServices::Out] System::ServiceModel::Security::ImpersonateOnSerializingReplyMessageProperty ^ % property);" />
      <MemberSignature Language="F#" Value="static member TryGet : System.ServiceModel.Channels.Message *  -&gt; bool" Usage="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet (message, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="property" Type="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="message">Die Nachricht, aus der die Eigenschaft extrahiert werden soll.</param>
        <param name="property">Enthält nach dem Beenden dieser Methode die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />-Eigenschaft, die aus der Nachricht extrahiert wird.</param>
        <summary>Ruft die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />-Eigenschaft der angegebenen Nachricht ab.</summary>
        <returns>
          <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public static bool TryGet (System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGet(class System.ServiceModel.Channels.MessageProperties properties, [out] class System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGet (properties As MessageProperties, ByRef property As ImpersonateOnSerializingReplyMessageProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGet(System::ServiceModel::Channels::MessageProperties ^ properties, [Runtime::InteropServices::Out] System::ServiceModel::Security::ImpersonateOnSerializingReplyMessageProperty ^ % property);" />
      <MemberSignature Language="F#" Value="static member TryGet : System.ServiceModel.Channels.MessageProperties *  -&gt; bool" Usage="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet (properties, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.ServiceModel.Channels.MessageProperties" />
        <Parameter Name="property" Type="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="properties">Das Meldungseigenschaftenobjekt, aus dem die Eigenschaft zu extrahieren ist.</param>
        <param name="property">Enthält nach dem Beenden dieser Methode die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />-Eigenschaft, die aus der Nachricht extrahiert wird.</param>
        <summary>Ruft die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />-Eigenschaft vom angegebenen <see cref="T:System.ServiceModel.Channels.MessageProperties" />-Objekt ab.</summary>
        <returns>
          <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
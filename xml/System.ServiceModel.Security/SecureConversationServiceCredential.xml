<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="185684a83acafb2c3f829a18fe5352be0e197322" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34313810" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Einstellungen für Anmeldeinformationen für einen sicheren Konversationsdienst bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zu sicheren Konversationen gehört der Austausch mehrerer Nachrichten und die Verwendung eines Sicherheitskontexttoken (Security Context Token, SCT), um die Sicherheit zu gewährleisten. Das SCT wird während der Lebensdauer der Kommunikationssitzung von den kommunizierenden Parteien gemeinsam genutzt. Ein Dienst kann zwei verschiedene Arten von SCTs ausgeben:  
  
-   Das erste ist ein sitzungsbasiertes SCT, das eine eindeutige Kennung enthält. Meldungen enthalten lediglich die Kennung, und der Dienst verwaltet einen Cache für die Statuszuordnung, der die SCT-Kennungen und Inhalte (wie Ansprüche, Sicherheitsschlüssel usw.) zuordnet. Ein gut konzipierter Client muss einen SCT-Abbruch senden, um den Dienst bei der Optimierung der Cacheressourcen zu unterstützen. Wenn Sie diese Klasse durch Aufruf von <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> instantiieren, wenn der `requireCancellation`-Parameter auf `true` gesetzt ist, wird das SCT auf diese Art und Weise ausgegeben.  
  
-   Das zweite ist ein in sich abgeschlossenes SCT, das sich in einem Cookie auf dem Client befindet. Dieses SCT enthält die gesamten Statusinformationen und erfordert daher weder eine Statusverwaltung durch den Dienst noch einen SCT-Abbruch durch den Client. Dies wird manchmal als "Cookiemodus"-SCT bezeichnet. Da das SCT die gesamten Statusinformationen enthält, ist es größer als im sitzungsbasierten Fall. Mit sitzungsbasierten SCTs speichert der Dienst einen Großteil der Statusinformationen. Da das SCT jedoch in sich abgeschlossen ist, kann es während der gesamten Lebensdauer des Dienstes verwendet werden und bleibt auch beim Herunterfahren und Neustart des Dienstes bestehen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der <see cref="T:System.Type" />-Ansprüche für die Cookieserialisierung ab.</summary>
        <value>Eine Auflistung der <see cref="T:System.Type" />-Ansprüche für die Cookieserialisierung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um Ansprüche in SCT-Cookies zu serialisieren, verwendet Windows Communication Foundation (WCF) <xref:System.Runtime.Serialization.DataContractSerializer> als Standard. Da die anspruchsressource erweiterbar ist, können mit WCF eine Liste bekannter Ressourcentypen bereitstellen. Dadurch wird der <xref:System.Runtime.Serialization.DataContractSerializer> während der Deserialisierung der Ansprüche im Cookie unterstützt, sodass die ursprünglichen stark typisierten Objekte zurückgegeben werden können.  
  
   
  
## Examples  
 Der folgende Code zeigt, wie diese Eigenschaft abgerufen wird.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen benutzerdefinierten <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> zum Codieren und Decodieren der Cookieserialisierung ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />-Objekt, das eine Anpassung von <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im "Cookiemodus" gibt ein Dienst ein Sicherheitskontexttoken (SCT) in Form eines Cookies an den Client aus, sodass kein Sicherheitsstatus verwaltet werden muss. Der Client sendet das Cookie in der Anforderungsmeldung zurück, sodass der Dienst weiß, wie der Schutz der Anforderungsmeldung aufgehoben werden kann und wie die Meldung geprüft werden kann. Da das SCT oft über ein nicht sicheres Netzwerk gesendet wird, muss es geschützt werden.  
  
 Windows Communication Foundation (WCF) verwendet standardmäßig die <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> Klasse, um das Cookie mithilfe von Data Protection API (DPAPI) geschützt. Damit DPAPI in einer Webfarmumgebung funktioniert, müssen alle Backenddienste mit demselben Domänenbenutzerkonto ausgeführt werden. Anders ausgedrückt: bei einem WebHosted-Dienst muss der Internet Information Services (IIS)-Workerprozess so konfiguriert werden, dass er als Domänenbenutzer ausgeführt wird.  
  
 Mit dieser Eigenschaft können Sie einen angepassten <xref:System.ServiceModel.Security.SecurityStateEncoder> zum Verschlüsseln und Entschlüsseln des Cookies verwenden und sind nicht auf DPAPI angewiesen.  
  
   
  
## Examples  
 Der folgende Code zeigt, wie diese Eigenschaft festgelegt wird.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
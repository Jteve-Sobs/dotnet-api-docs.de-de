<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eacd1a5ec4707b956c3ddb1c43f6451deba47c3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69303565" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht es verwalteten gespeicherten Prozeduren, die prozessintern in einer SQL Server-Datenbank ausgeführt werden, Ergebnisse an den Aufrufer zurückzugeben. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Instanz dieser Klasse wird verwalteten gespeicherten Prozeduren über die <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> -Eigenschaft <xref:Microsoft.SqlServer.Server.SqlContext> der-Klasse zur Verfügung gestellt.  
  
   
  
## Examples  
 Im folgenden Beispiel werden <xref:System.Data.SqlClient.SqlConnection> und <xref:System.Data.SqlClient.SqlCommand> verwendet, um Zeilen aus einer Datenquelle in einer gespeicherten Prozedur auszuwählen. Im Beispiel wird dann ein <xref:Microsoft.SqlServer.Server.SqlPipe> -Befehl verwendet, um den Befehl auszuführen und die Ergebnisse an den Client zurückzusenden.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Das auszuführende <see cref="T:System.Data.SqlClient.SqlCommand" />-Objekt.</param>
        <summary>Führt den als Parameter übergebenen Befehl aus und sendet die Ergebnisse an den Client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zusätzlich zu den tatsächlichen Ergebnissen werden auch andere Meldungen und Fehler direkt an den Client gesendet.  
  
 Ausgabeparameter und Rückgabewerte werden nicht an den Client gesendet. Diese sind für den Aufrufer über die Parameters-Auflistung des Command-Objekts verfügbar.  
  
 Wenn der Befehl nicht an eine Prozess interne Verbindung gebunden ist, wird eine <xref:System.InvalidOperationException> ausgelöst. Diese Methode wird nicht bei Befehlen unterstützt, die an prozessexterne Verbindungen gebunden sind.  
  
 Wenn das <xref:System.Data.SqlClient.SqlCommand> gesendete Objekt Fehler enthält, werden Ausnahmen an die Pipe gesendet. es wird jedoch auch eine Kopie an den aufrufenden verwalteten Code gesendet. Wenn der aufrufenden Code die Ausnahme nicht abfängt, wird der Stapel in den Transact-SQL-Code übermittelt und in der Ausgabe zweimal angezeigt. Wenn der aufrufende Code die Ausnahme abfängt, wird der Fehler weiterhin angezeigt, es gibt jedoch keinen doppelten Fehler.  
  
   
  
## Examples  
 Im folgenden Beispiel werden <xref:System.Data.SqlClient.SqlConnection> und <xref:System.Data.SqlClient.SqlCommand> verwendet, um Zeilen aus einer Datenquelle in einer gespeicherten Prozedur auszuwählen. Im Beispiel wird dann ein <xref:Microsoft.SqlServer.Server.SqlPipe> -Befehl verwendet, um den Befehl auszuführen und die Ergebnisse an den Client zurückzusenden.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Diese Methode wird nicht bei Befehlen unterstützt, die an prozessexterne Verbindungen gebunden sind.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Modus der <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> das Senden einzelner Resultsets zurück an den Client zulässt. Diese Eigenschaft ist schreibgeschützt.</summary>
        <value><see langword="true" />, wenn die <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />-Methode aufgerufen wurde und der Modus der <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> das Senden einzelner Resultsets zurück an den Client zulässt, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sendet Ergebnisse direkt an den Client oder den aktuellen Ausgabeconsumer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die **Send** -Methode sendet Daten direkt an den Client oder Aufrufer. In der Regel ist dies der Client, der die Ausgabe der **Pipe** -Methode verwendet, aber im Fall von gespeicherten CLR-Prozeduren kann der Ausgabeconsumer auch eine gespeicherte Prozedur sein. Beispielsweise ruft <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> prozedur1 mit dem Befehls Text "EXEC Procedure2" auf. Procedure2 ist auch eine verwaltete gespeicherte Prozedur. Wenn Procedure2 jetzt aufruft <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, wird die Zeile an Procedure1 Reader und nicht an den Client gesendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Das an den Client gesendete einzeilige Resultset: ein <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />-Objekt.</param>
        <summary>Sendet ein Resultset mit einer Zeile direkt an den Client oder aktuellen Ausgabeconsumer.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Das mehrzeilige Resultset, das an den Client gesendet werden soll: ein <see cref="T:System.Data.SqlClient.SqlDataReader" />-Objekt.</param>
        <summary>Sendet ein Resultset mit mehreren Zeilen direkt an den Client oder aktuellen Ausgabeconsumer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das <xref:System.Data.SqlClient.SqlDataReader> Objekt, das als Parameter übergeben wird, verborgene Spalten aufweist, werden diese Spalten nicht an das Resultset weitergegeben, das an den Client gesendet wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die an den Client zu sendende Meldungszeichenfolge.</param>
        <summary>Sendet eine Zeichenfolgenmeldung direkt an den Client oder aktuellen Ausgabeconsumer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Meldungs Zeichenfolge wird als Informations Meldung an den Client gesendet. Client Anwendungen können Nachrichten über verschiedene Mechanismen lauschen, abhängig von der verwendeten API (Application Programming Interface) für den Datenzugriff. Wenn der Client z. b. ADO.NET verwendet, werden die Nachrichten über <xref:System.Data.SqlClient.SqlConnection.InfoMessage> das-Ereignis übertragen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> -Methode verwendet, um eine Nachrichten Zeichenfolge direkt an den Client zu senden.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <paramref name="message" /> ist länger als 4.000 Zeichen.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Markiert das Ende eines Resultsets und setzt die <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />-Instanz auf den Ausgangszustand zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwaltete gespeicherte Prozeduren können Resultsets an Clients senden, die <xref:System.Data.SqlClient.SqlDataReader>keine implementieren. Diese Methode ermöglicht es gespeicherten <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> Prozeduren zusammen mit und <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, benutzerdefinierte Resultsets an den Client zu senden.  
  
   
  
## Examples  
 Im folgenden Beispiel werden ein neues <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData>und ein erstellt. Anschließend markiert das Beispiel den Anfang eines Resultsets mithilfe der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> -Methode, sendet mithilfe der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> -Methode Datensätze mit Beispiel Daten an den Client zurück und markiert das Ende des Resultsets <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> mit der-Methode.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />-Methode wurde zuvor nicht aufgerufen.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Ein <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />-Objekt mit den Spaltenwerten für die Zeile, die an den Client gesendet werden sollen. Das Schema für den Datensatz muss mit dem Schema in den Metadaten des an die <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />-Methode übergebenen <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> übereinstimmen.</param>
        <summary>Sendet eine einzelne Datenzeile an den Client zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwaltete gespeicherte Prozeduren können Resultsets an Clients senden, die <xref:System.Data.SqlClient.SqlDataReader>keine implementieren. Diese Methode ermöglicht es gespeicherten <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> Prozeduren zusammen mit und <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, benutzerdefinierte Resultsets an den Client zu senden.  
  
 Die <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> -Methode sendet eine einzelne Daten Zeile an den Client zurück. Zeilen können anschließend an den Aufrufer zurückgegeben <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>werden, indem aufgerufen wird, einmal für jede gesendete Zeile. Nachdem alle Zeilen gesendet wurden, ist ein Aufrufe <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> der-Methode erforderlich, um das Ende des Resultsets zu markieren.  
  
   
  
## Examples  
 Im folgenden Beispiel werden ein neues <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData>und ein erstellt. Anschließend markiert das Beispiel den Anfang eines Resultsets mithilfe der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> -Methode, sendet mithilfe der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> -Methode Datensätze mit Beispiel Daten an den Client zurück und markiert das Ende des Resultsets <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> mit der-Methode.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />-Methode wurde zuvor nicht aufgerufen.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Ein <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />-Objekt, aus dem Metadaten extrahiert werden, mit denen das Resultset beschrieben wird.</param>
        <summary>Kennzeichnet den Anfang eines an den Client zurückgesendeten Resultsets und erstellt mit dem Datensatzparameter die Metadaten zur Beschreibung des Resultsets.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwaltete gespeicherte Prozeduren können Resultsets an Clients senden, die <xref:System.Data.SqlClient.SqlDataReader>keine implementieren. Diese Methode ermöglicht es gespeicherten <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Prozeduren zusammen mit und <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, benutzerdefinierte Resultsets an den Client zu senden.  
  
 Die <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> -Methode kennzeichnet den Anfang eines Resultsets und verwendet den Record-Parameter, um die Metadaten zu erstellen, die das Resultset beschreiben. Alle nachfolgenden Zeilen, die mit der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> -Methode gesendet werden, müssen dieser Metadatendefinition entsprechen.  
  
 Beachten Sie, dass <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>nach dem <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Aufruf <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> von nur und aufgerufen werden können. Jede andere Methode in derselben Instanz von <xref:Microsoft.SqlServer.Server.SqlPipe> löst eine <xref:System.InvalidOperationException>aus. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>setzt <xref:Microsoft.SqlServer.Server.SqlPipe> auf den Ausgangszustand zurück, in dem andere Methoden aufgerufen werden können.  
  
 Wenn die Steuerung aus der CLR-Ausführung zu Transact-SQL zurückkehrt, versuchen Sie nicht, eine statische oder lokale Variable zu verwenden, die mit dem CLR-Speicher initialisiert wurde. Speichern Sie z. b. keine Instanz von in der Process-Klasse, die `SQLDataRecord`verwendet wird, nachdem die Steuerung von CLR zurückgegeben wurde. Eine Ausnahme ist die `SQLMetaData` in Process-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel werden ein neues <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData>und ein erstellt. Anschließend markiert das Beispiel den Anfang eines Resultsets mithilfe der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> -Methode, sendet mithilfe der <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> -Methode Datensätze mit Beispiel Daten an den Client zurück und markiert das Ende des Resultsets <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> mit der-Methode.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="record" /> enthält keine Spalten oder wurde nicht initialisiert.</exception>
        <exception cref="T:System.InvalidOperationException">Eine andere Methode als <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> oder <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> wurde nach der <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />-Methode aufgerufen.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>

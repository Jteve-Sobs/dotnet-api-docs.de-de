<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef8c011695a45cf43197dda699d3ad988ba9a430" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70571501" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt eine benutzerdefinierte Implementierung für die Serialisierung und Deserialisierung benutzerdefinierter Typen (User-Defined Type, UDT) und benutzerdefinierter Aggregate bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Benutzerdefinierte Typen (User-Defined Types, UDTs) und benutzerdefinierte Aggregate sind erforderlich, um ein Speicherformat zu definieren <xref:Microsoft.SqlServer.Server.Format>, bei dem es sich entweder um handelt.`Native` oder <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` ermöglicht es SQL Server, die Serialisierung und Deserialisierung automatisch zu verarbeiten, aber das Format weist Einschränkungen hinsichtlich der Art von Typen auf, die Sie verarbeiten kann. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` ermöglicht es benutzerdefinierten Typen und Aggregaten, ihre eigene Serialisierung zu verarbeiten. Benutzerdefinierte Typen und Aggregate müssen mit <xref:Microsoft.SqlServer.Server.Format>markiert werden.`UserDefined` im-Attribut `SqlUserDefinedAggregate` <xref:Microsoft.SqlServer.Server.IBinarySerialize> oder im-Attribut muss und die-Schnittstelle implementieren. `SqlUserDefinedType`  
  
 Beachten Sie, dass die Gesamtgröße jeder Instanz selbst bei der benutzerdefinierten Serialisierung unter dem maximal zulässigen Limit liegen muss, derzeit 8000 Bytes.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">Der <see cref="T:System.IO.BinaryReader" />-Stream, aus dem das Objekt deserialisiert wird.</param>
        <summary>Generiert einen benutzerdefinierten Typ (UDT) oder ein benutzerdefiniertes Aggregat aus seiner Binärform.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> -Methode muss das-Objekt mithilfe der von der <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> -Methode geschriebenen Informationen wiederherstellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Implementierung <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> der-Methode eines UDT veranschaulicht, die einen <xref:System.IO.BinaryReader> verwendet, um einen zuvor persistenten UDT zu deserialisieren. In diesem Beispiel wird davon ausgegangen, dass der UDT über `StringValue` zwei `DoubleValue`Daten Eigenschaften verfügt: und.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">Der <see cref="T:System.IO.BinaryWriter" />-Stream, in den der UDT oder das benutzerdefinierte Aggregat serialisiert wird.</param>
        <summary>Konvertiert einen benutzerdefinierten Typ (UDT) oder ein benutzerdefiniertes Aggregat in seine Binärform, sodass er/es behalten werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schreiben Sie genügend Informationen in den binären Stream, damit <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> die Methode den UDT oder das benutzerdefinierte Aggregat wiederherstellen kann.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Implementierung <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> der-Methode eines UDT, der einen <xref:System.IO.BinaryWriter> verwendet, um den UDT im benutzerdefinierten Binärformat zu serialisieren. Der Zweck des Auffüll Zeichens NULL besteht darin sicherzustellen, dass der Zeichen folgen Wert vollständig vom doppelten Wert getrennt ist, sodass ein UDT im Transact-SQL-Code mit einem anderen verglichen wird, Zeichen folgen Bytes mit Zeichen folgen Bytes verglichen werden und doppelte Bytes mit Double verglichen werden. Satz.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="SqlTriggerContext" FullName="Microsoft.SqlServer.Server.SqlTriggerContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="143e9584233a39a7dd01915e9d96960c5e11cf62" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30338374" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlTriggerContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlTriggerContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlTriggerContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlTriggerContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlTriggerContext sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Kontextinformationen über den ausgelösten Trigger bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die bereitgestellten Kontextinformationen umfassen den Typ der Aktion, die den Trigger ausgelöst wird, verursacht hat, welche Spalten in einem Updatevorgang und im Falle einer Datendefinitionssprache (DDL) Triggers, einer EventData-XML-Struktur geändert wurden (siehe "Transact-SQL Referenz"in der Onlinedokumentation zu SQL Server), die den auslösenden Vorgang beschreibt.  
  
 Eine Instanz von <xref:Microsoft.SqlServer.Server.SqlTriggerContext> steht über den <xref:Microsoft.SqlServer.Server.SqlContext> Klasse, wenn der Code, innerhalb eines Triggers durch ausgeführt wird die <xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine <xref:Microsoft.SqlServer.Server.SqlTriggerContext> Objekt verwendet wird, um festzustellen, wo ein <xref:Microsoft.SqlServer.Server.TriggerAction.Insert> Aktion aufgetreten ist. Wenn eine Zeile eingefügt wurde die `user`Tabelle, den Benutzernamen und den tatsächlichen Namen werden aus der eingefügten Zeile abgerufen und dann hinzugefügt, um die **UserNameAudit** Tabelle.  
  
 [!code-csharp[DataWorks SqlTriggerContext Sample#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlTriggerContext Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlTriggerContext Sample#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlTriggerContext Sample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlTriggerContext.ColumnCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Spalten in der an den Trigger gebundenen Datentabelle ab. Diese Eigenschaft ist schreibgeschützt.</summary>
        <value>Die Anzahl der Spalten in der an den Trigger gebundenen Datentabelle als ganze Zahl.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlTriggerContext.ColumnCount%2A> Eigenschaft ist nützlich, um zu bestimmen, die maximale Ordnungszahl, <xref:Microsoft.SqlServer.Server.SqlTriggerContext.IsUpdatedColumn%2A> für einen bestimmten Triggeraufruf ermöglicht.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventData">
      <MemberSignature Language="C#" Value="public System.Data.SqlTypes.SqlXml EventData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlTypes.SqlXml EventData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlTriggerContext.EventData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventData As SqlXml" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlTypes::SqlXml ^ EventData { System::Data::SqlTypes::SqlXml ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlTypes.SqlXml</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Ereignisdaten für eine bestimmte Aktion ab, die den Trigger ausgelöst hat.</summary>
        <value>Die Ereignisdaten der Aktion, die den Trigger ausgelöst hat, als <see cref="T:System.Data.SqlTypes.SqlXml" />, wenn weitere Informationen verfügbar sind, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Informationen sind für Trigger Data Definition Language (DDL) verfügbar. Es sind keine Informationen über diese Eigenschaft für Trigger Data Manipulation Language (DML, Datenbearbeitungssprache) verfügbar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpdatedColumn">
      <MemberSignature Language="C#" Value="public bool IsUpdatedColumn (int columnOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsUpdatedColumn(int32 columnOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlTriggerContext.IsUpdatedColumn(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUpdatedColumn (columnOrdinal As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsUpdatedColumn(int columnOrdinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnOrdinal">Die nullbasierte Ordnungszahl der Spalte.</param>
        <summary>Gibt <see langword="true" /> zurück, wenn eine Spalte bei einer INSERT-Anweisung oder einer UPDATE-Anweisung geändert wurde.</summary>
        <returns>
          <see langword="true" />, wenn die Spalte bei einem INSERT-Vorgang oder einem UPDATE-Vorgang geändert wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wird im Kontext eines Triggers aufgerufen, wenn der Wert der <see cref="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction" />-Eigenschaft nicht <see langword="Insert" /> oder <see langword="Update" /> ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="TriggerAction">
      <MemberSignature Language="C#" Value="public Microsoft.SqlServer.Server.TriggerAction TriggerAction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.SqlServer.Server.TriggerAction TriggerAction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TriggerAction As TriggerAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::SqlServer::Server::TriggerAction TriggerAction { Microsoft::SqlServer::Server::TriggerAction get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.TriggerAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, welche Aktion den Trigger ausgelöst hat.</summary>
        <value>Die Aktion, die den Trigger ausgelöst hat, als eine <see cref="T:Microsoft.SqlServer.Server.TriggerAction" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt einen Audit-Trigger. Wenn ein <xref:Microsoft.SqlServer.Server.TriggerAction.Insert> oder <xref:Microsoft.SqlServer.Server.TriggerAction.Delete> Aktion aufgetreten ist, werden die betroffenen Zeilen aus den Tabellen INSERTED und DELETED abgerufen.  
  
 [!code-csharp[DataWorks SqlTriggerContext Sample#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlTriggerContext Sample/CS/source.cs#2)]
 [!code-vb[DataWorks SqlTriggerContext Sample#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlTriggerContext Sample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
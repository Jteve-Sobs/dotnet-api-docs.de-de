<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32bc4bb9e15257bd0e0354a58210c82b2b416c6f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37477893" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Informationen über den Status und die Daten bereit, die aus einem <see cref="Overload:System.Net.NetworkInformation.Ping.Send" />-Vorgang oder einem <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />-Vorgang resultieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping> Klasse versucht, eine Internet Control Message Protocol (ICMP)-Echoanfrage zu einem Remotecomputer zu senden und Empfangen von Informationen aus den Computer über ein ICMP-echoantwortmeldung. Die <xref:System.Net.NetworkInformation.Ping> Klasse verwendet Instanzen der <xref:System.Net.NetworkInformation.PingReply> Klasse die Rückgabe von Informationen über den Vorgang, z. B. seinen Status und die Zeitdauer für die Anforderung senden und Empfangen der Antwort.  
  
 Die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden geben Instanzen zurück. die <xref:System.Net.NetworkInformation.PingReply> -Klasse direkt. Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden zurückgeben einer <xref:System.Net.NetworkInformation.PingReply> in die <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Methode <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Parameter. Die <xref:System.Net.NetworkInformation.PingReply> erfolgt über die <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> Eigenschaft.  
  
 Wenn der Wert des <xref:System.Net.NetworkInformation.PingReply.Status%2A> ist nicht <xref:System.Net.NetworkInformation.IPStatus.Success>, Sie sollten nicht verwenden, die Rückgabewerte der <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> oder <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> Eigenschaften. Die <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> Eigenschaft gibt NULL zurück, die <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> Eigenschaft gibt ein leeres Array, und die <xref:System.Net.NetworkInformation.PingReply.Options%2A> -Eigenschaft zurück `null`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung <xref:System.Net.NetworkInformation.Ping> Klasse, um eine ICMP-Echoanfrage synchron gesendet und der Antwort angezeigt.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Adresse des Hosts ab, der die ICMP (Internet Control Message Protocol)-Echoantwort sendet.</summary>
        <value>Eine <see cref="T:System.Net.IPAddress" />, die das Ziel für die ICMP-Echomeldung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.PingReply.Address%2A> von zurückgegeben der <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladungen können von einem böswilligen Remotecomputer stammen. Verbinden Sie nicht mit dem Remotecomputer an. Verwenden Sie DNS, um die IP-Adresse des Computers zu bestimmen, zu dem Sie eine Verbindung herstellen möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel sendet eine ICMP-Echoanfrage synchron und zeigt den Wert dieser Eigenschaft.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den in einer ICMP (Internet Control Message Protocol)-Echoantwortmeldung empfangenen Datenpuffer ab.</summary>
        <value>Ein <see cref="T:System.Byte" />-Array mit den in einer ICMP-Echoantwortmeldung empfangenen Daten, oder ein leeres Array, wenn keine Antwort empfangen wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Datenpuffer gesendet werden, mit der ICMP-Echoanfrage ist an den Absender in der Echoantwort zurückgegeben, sodass die Roundtrip-Reisezeit für ein Paket mit einer bekannten Größe berechnet werden kann. Im Datenpuffer, in Kombination mit der <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> aus, kann verwendet werden, um die maximale Übertragungseinheit für den Netzwerkpfad zwischen den Quell- und Ziel zu ermitteln. Weitere Informationen finden Sie unter "Traceroute" im RFC 1574, Abschnitt 3.2 unter [ https://www.ietf.org ](https://www.ietf.org).  
  
 Die verwendete Standardpuffer <xref:System.Net.NetworkInformation.Ping.Send%2A> und <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 32 Bytes an Daten enthält.  
  
   
  
## Examples  
 Im folgenden Codebeispiel sendet eine ICMP-Echoanfrage synchron und zeigt die Größe des Puffers, die von dieser Eigenschaft zurückgegeben.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Optionen zum Übertragen der Antwort auf eine ICMP (Internet Control Message Protocol)-Echoanfrage ab.</summary>
        <value>Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das die Gültigkeitsdauer (TTL) und Fragmentierungsdirektive zum Übertragen der Antwort enthält, wenn <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> den Wert <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> aufweist, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Gültigkeitsdauer (TTL) definiert die Anzahl der Häufigkeit, mit der ein Paket bei der Übertragung zwischen der Quelle und Ziel Knoten weitergeleitet werden können. Wenn die Anzahl der Weiterleitung, auch bekannt als Hops, der für die Gültigkeitsdauer (TTL) angegebenen Wert überschreitet, wird das Paket als unzustellbar erachtet und wird verworfen.  
  
 Die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> in der ICMP-Echo Request steuert die Paketfragmentierung angegebenen Wert. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` und die Paketgröße überschreitet die maximale Übertragungseinheit des Netzwerkpfads vom Paket, das Paket verworfen und die <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> Fehler wird zurückgegeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel sendet eine ICMP-Echoanfrage synchron und zeigt die Werte, die in gespeicherten der <xref:System.Net.NetworkInformation.PingOptions> von dieser Eigenschaft zurückgegebenen Objekts.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Millisekunden ab, die zum Senden einer ICMP-Echoanfrage (Internet Control Message Protocol) und zum Empfangen der entsprechenden ICMP-Echoantwortmeldung benötigt wurden.</summary>
        <value>Ein <see cref="T:System.Int64" />-Wert, der die Roundtripzeit in Millisekunden angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die Echo-Anforderung ein Fehler auftritt, die <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> wird gemeldet, die als 0 ist, das ist auch ein gültiger Wert, wenn die Anforderung erfolgreich ist. Sie müssen überprüfen, die <xref:System.Net.NetworkInformation.PingReply.Status%2A> zu bestimmen, ob der Wert, der von dieser Eigenschaft zurückgegebene ignoriert werden sollen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel sendet eine ICMP-Echoanfrage synchron und zeigt die Größe des Puffers, die von dieser Eigenschaft zurückgegeben.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Status eines Versuchs ab, eine ICMP (Internet Control Message Protocol)-Echoanfrage zu senden und die entsprechende ICMP-Echoantwortmeldung zu empfangen.</summary>
        <value>Ein <see cref="T:System.Net.NetworkInformation.IPStatus" />-Wert, der das Ergebnis der Anfrage angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert des <xref:System.Net.NetworkInformation.PingReply.Status%2A> ist nicht <xref:System.Net.NetworkInformation.IPStatus.Success>, Sie sollten nicht verwenden, die Rückgabewerte der <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> oder <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> Eigenschaften. Die <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> und <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> Eigenschaften gibt 0 (null), und die <xref:System.Net.NetworkInformation.PingReply.Options%2A> -Eigenschaft zurück `null`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung <xref:System.Net.NetworkInformation.Ping> Klasse, um eine ICMP-Echoanfrage synchron gesendet und der Antwort angezeigt.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
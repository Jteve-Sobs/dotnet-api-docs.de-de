<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43f662cb69eefb6aad699f9833c3b46a93dc003c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69113731" /></Metadata><TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Informationen über den Status und die Daten bereit, die aus einem <see cref="Overload:System.Net.NetworkInformation.Ping.Send" />-Vorgang oder einem <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />-Vorgang resultieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping> -Klasse versucht, eine ICMP (Internet Control Message Protocol)-Echo Anforderung an einen Remote Computer zu senden und über eine ICMP-Echo Antwortnachricht Informationen vom Computer zu empfangen. Die <xref:System.Net.NetworkInformation.Ping> -Klasse verwendet Instanzen <xref:System.Net.NetworkInformation.PingReply> der-Klasse, um Informationen über den Vorgang zurückzugeben, z. b. den Status und die Zeit, die zum Senden der Anforderung und zum Empfangen der Antwort benötigt wird.  
  
 Die <xref:System.Net.NetworkInformation.Ping.Send%2A> -Methoden geben direkt Instanzen <xref:System.Net.NetworkInformation.PingReply> der-Klasse zurück. Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Methoden geben <xref:System.Net.NetworkInformation.PingReply> einen im <xref:System.Net.NetworkInformation.PingCompletedEventHandler> - <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Parameter der Methode zurück. Der <xref:System.Net.NetworkInformation.PingReply> Zugriff auf die erfolgt <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> über die-Eigenschaft.  
  
 Wenn der Wert von <xref:System.Net.NetworkInformation.PingReply.Status%2A> nicht <xref:System.Net.NetworkInformation.IPStatus.Success>ist, sollten Sie nicht die Werte verwenden, die von <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>den <xref:System.Net.NetworkInformation.PingReply.Options%2A> Eigenschaften <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> , oder zurückgegeben werden. Die <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> -Eigenschaft gibt 0 (NULL <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> ) zurück, die-Eigenschaft gibt ein leeres <xref:System.Net.NetworkInformation.PingReply.Options%2A> Array zurück, `null`und die-Eigenschaft gibt zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Net.NetworkInformation.Ping> Verwendung der-Klasse zum synchronen Senden einer ICMP-Echo Anforderung und zum Anzeigen der Antwort veranschaulicht.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Adresse des Hosts ab, der die ICMP (Internet Control Message Protocol)-Echoantwort sendet.</summary>
        <value>Eine <see cref="T:System.Net.IPAddress" />, die das Ziel für die ICMP-Echomeldung enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Net.NetworkInformation.PingReply.Address%2A> , der von einer <xref:System.Net.NetworkInformation.Ping.Send%2A> der-über Ladungen zurückgegeben wurde, kann von einem bösartigen Remote Computer stammen. Stellen Sie keine Verbindung mit dem Remote Computer her, indem Sie diese Adresse verwenden. Verwenden Sie DNS, um die IP-Adresse des Computers zu ermitteln, mit dem Sie eine Verbindung herstellen möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine ICMP-Echo Anforderung synchron gesendet und der Wert dieser Eigenschaft angezeigt.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den in einer ICMP (Internet Control Message Protocol)-Echoantwortmeldung empfangenen Datenpuffer ab.</summary>
        <value>Ein <see cref="T:System.Byte" />-Array mit den in einer ICMP-Echoantwortmeldung empfangenen Daten, oder ein leeres Array, wenn keine Antwort empfangen wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der mit der ICMP-Echo Anforderung gesendete Datenpuffer wird an den Absender in der Echo Antwort zurückgegeben, sodass die Roundtrip-Reisezeit für ein Paket mit einer bekannten Größe berechnet werden kann. Der Datenpuffer kann in Kombination <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> mit der-Option verwendet werden, um die maximale Übertragungseinheit für den Netzwerkpfad zwischen dem Quell-und dem Zielcomputer zu ermitteln. Weitere Informationen finden Sie unter "traceroute" in RFC 1574, Abschnitt 3,2, verfügbar unter [https://www.ietf.org](https://www.ietf.org).  
  
 Der Standard Puffer, der <xref:System.Net.NetworkInformation.Ping.Send%2A> mit <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> und 32 Bytes an Daten enthält.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine ICMP-Echo Anforderung synchron gesendet und die Größe des von dieser Eigenschaft zurückgegebenen Puffers angezeigt.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Optionen zum Übertragen der Antwort auf eine ICMP (Internet Control Message Protocol)-Echoanfrage ab.</summary>
        <value>Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das die Gültigkeitsdauer (TTL) und Fragmentierungsdirektive zum Übertragen der Antwort enthält, wenn <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> den Wert <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> aufweist, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Gültigkeitsdauer definiert, wie oft Knoten ein Paket bei der Übertragung zwischen Quelle und Ziel weiterleiten können. Wenn die Anzahl der Weiterleitungen, auch als Hops bezeichnet, den für die Gültigkeitsdauer angegebenen Wert überschreitet, gilt das Paket als nicht zulieferbar und wird verworfen.  
  
 Der <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> in der ICMP-Echo Anforderung angegebene Wert steuert die Paket Fragmentierung. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>den Wert hat <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> und die Paketgröße die maximale Übertragungseinheit für den Netzwerkpfad des Pakets überschreitet, wird das Paket verworfen, und der Fehler wird zurückgegeben. `true`  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine ICMP-Echo Anforderung synchron gesendet und die im <xref:System.Net.NetworkInformation.PingOptions> -Objekt gespeicherten Werte angezeigt, die von dieser Eigenschaft zurückgegeben werden.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Millisekunden ab, die zum Senden einer ICMP (Internet Control Message Protocol)- Echoanfrage und zum Empfangen der entsprechenden ICMP-Echoantwortmeldung benötigt wurden.</summary>
        <value>Ein <see cref="T:System.Int64" />, das die Roundtripzeit in Millisekunden angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Echo Anforderung fehlschlägt, <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> wird die Uhrzeit als 0 (null) gemeldet. Dies ist auch ein gültiger Wert, wenn die Anforderung erfolgreich ausgeführt wird. Sie müssen das <xref:System.Net.NetworkInformation.PingReply.Status%2A> überprüfen, um zu bestimmen, ob der von dieser Eigenschaft zurückgegebene Wert ignoriert werden soll.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine ICMP-Echo Anforderung synchron gesendet und die Größe des von dieser Eigenschaft zurückgegebenen Puffers angezeigt.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Status eines Versuchs ab, eine ICMP (Internet Control Message Protocol)-Echoanfrage zu senden und die entsprechende ICMP-Echoantwortmeldung zu empfangen.</summary>
        <value>Ein <see cref="T:System.Net.NetworkInformation.IPStatus" />-Wert, der das Ergebnis der Anfrage angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert von <xref:System.Net.NetworkInformation.PingReply.Status%2A> nicht <xref:System.Net.NetworkInformation.IPStatus.Success>ist, sollten Sie nicht die Werte verwenden, die von <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>den <xref:System.Net.NetworkInformation.PingReply.Options%2A> Eigenschaften <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> , oder zurückgegeben werden. Die <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> - <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> Eigenschaft und die-Eigenschaft geben NULL <xref:System.Net.NetworkInformation.PingReply.Options%2A> zurück, und `null`die-Eigenschaft gibt zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Net.NetworkInformation.Ping> Verwendung der-Klasse zum synchronen Senden einer ICMP-Echo Anforderung und zum Anzeigen der Antwort veranschaulicht.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51eeafd4c914faadbffd2c45ddd5f20b1d266da8" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83946659" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Ping extends System.ComponentModel.Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Ping : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Ping extends System.Object implements class System.IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Implements IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    interface IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Ping extends System.ComponentModel.Component implements class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinios-10.8" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Ping" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-1.0;netcore-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ermöglicht es einer Anwendung, zu bestimmen, ob über das Netzwerk auf einen Remotecomputer zugegriffen werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen verwenden die <xref:System.Net.NetworkInformation.Ping>-Klasse, um zu ermitteln, ob ein Remote Computer erreichbar ist.  
  
 Die Netzwerktopologie kann ermitteln, ob <xref:System.Net.NetworkInformation.Ping> eine Verbindung mit einem Remote Host herstellen kann. Das vorhanden sein und die Konfiguration von Proxys, Network Address Translation (NAT)-Geräten oder Firewalls können verhindern, dass <xref:System.Net.NetworkInformation.Ping> erfolgreich ist. Ein erfolgreicher <xref:System.Net.NetworkInformation.Ping> gibt nur an, dass der Remote Host im Netzwerk erreicht werden kann. Es ist nicht sichergestellt, dass Dienste auf höherer Ebene (z. b. ein Webserver) auf dem Remote Host vorhanden sind.  
  
 Diese Klasse bietet ähnliche Funktionen wie das Befehlszeilen Tool Ping. exe. Die Methoden <xref:System.Net.NetworkInformation.Ping.Send%2A> und <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> senden eine ICMP (Internet Control Message Protocol)-Echo Anforderungs Nachricht an einen Remote Computer und warten auf eine ICMP-Echo Antwortnachricht von diesem Computer. Eine ausführliche Beschreibung von ICMP-Nachrichten finden Sie unter RFC 792, verfügbar unter [https://www.ietf.org](https://www.ietf.org/).  
  
 Die folgenden Typen werden mit der <xref:System.Net.NetworkInformation.Ping>-Klasse verwendet und im folgenden ausführlich beschrieben.  
  
|**Typname**|**Beschreibung**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Definiert Statuscodes, die das Ergebnis einer ICMP-Echo Anforderungs Nachricht beschreiben.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Ermöglicht das Konfigurieren oder Abrufen der Einstellungen, mit denen gesteuert wird, wie oft das Anforderungspaket weitergeleitet werden kann (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>) und ob es fragmentiert werden kann (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>).|  
|<xref:System.Net.NetworkInformation.PingReply>|Enthält die Ergebnisse einer ICMP-Echo Anforderung.|  
|<xref:System.Net.NetworkInformation.PingException>|Wird ausgelöst, wenn ein nicht BEHEB barer Fehler auftritt.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Enthält die Daten, die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignissen zugeordnet sind. Diese werden ausgelöst, wenn ein <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Aufrufvorgang abgeschlossen oder abgebrochen wird.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|Der Delegat, der die Rückruf Methode bereitstellt, die aufgerufen wird, wenn ein <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufruf abgeschlossen oder abgebrochen wird|  
  
 Die Methoden <xref:System.Net.NetworkInformation.Ping.Send%2A> und <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> geben die Antwort in einem <xref:System.Net.NetworkInformation.PingReply>-Objekt zurück. Die <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType>-Eigenschaft gibt einen <xref:System.Net.NetworkInformation.IPStatus> Wert zurück, um das Ergebnis der Anforderung anzugeben.  
  
 Beim Senden der Anforderung müssen Sie den Remote Computer angeben. Hierfür können Sie eine Hostnamen-Zeichenfolge, eine IP-Adresse im Zeichen folgen Format oder ein <xref:System.Net.IPAddress> Objekt bereitstellen.  
  
 Sie können auch einen der folgenden Informationstypen angeben:  
  
-   Die Daten, die der Anforderung begleitet werden. Durch Angeben von `buffer` können Sie die erforderliche Zeit für ein Paket einer bestimmten Größe zum Wechseln zum und vom Remote Host sowie für die maximale Übertragungseinheit des Netzwerk Pfads erlernen. (Weitere Informationen finden Sie in den <xref:System.Net.NetworkInformation.Ping.Send%2A>-oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladungen, die einen `buffer`-Parameter akzeptieren.)  
  
-   Ob das ICMP-Echo Paket während der Übertragung fragmentiert werden kann. (Weitere Informationen finden Sie unter <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>-Eigenschaft und <xref:System.Net.NetworkInformation.Ping.Send%2A> oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladungen, die einen `options`-Parameter annehmen.)  
  
-   Gibt an, wie oft Routing Knoten, z. b. Router oder Gateways, das Paket weiterleiten können, bevor es entweder den Zielcomputer erreicht oder verworfen wird. (Weitere Informationen finden Sie unter <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> und der <xref:System.Net.NetworkInformation.Ping.Send%2A>-oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladungen, die einen `options`-Parameter annehmen.)  
  
-   Das Zeitlimit, innerhalb dessen die Antwort empfangen werden muss. (Weitere Informationen finden Sie in den <xref:System.Net.NetworkInformation.Ping.Send%2A> oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladungen, die einen `timeout`-Parameter akzeptieren.  
  
 Die <xref:System.Net.NetworkInformation.Ping>-Klasse bietet synchrone und asynchrone Methoden zum Senden der Anforderung. Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron. Wenn die Anwendung nicht blockieren soll, verwenden Sie die asynchronen <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methoden. Ein-<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wird in einem eigenen Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Anwendungen verwenden einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten, um die Methode anzugeben, die für <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignisse aufgerufen wird. Vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>müssen Sie dem-Ereignis einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt.  
  
 Sie können nicht dieselbe Instanz der <xref:System.Net.NetworkInformation.Ping>-Klasse verwenden, um mehrere gleichzeitige ICMP-Echo Anforderungen zu generieren. Wenn <xref:System.Net.NetworkInformation.Ping.Send%2A> aufgerufen wird, während ein <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufruf ausgeführt wird oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> mehrmals aufruft, bevor alle vorherigen Aufrufe abgeschlossen wurden, wird ein <xref:System.InvalidOperationException>verursacht.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die synchrone Verwendung der <xref:System.Net.NetworkInformation.Ping>-Klasse veranschaulicht.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 Im folgenden Codebeispiel wird die asynchrone Verwendung der <xref:System.Net.NetworkInformation.Ping>-Klasse veranschaulicht.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/network-programming/how-to-ping-a-host">Gewusst wie: Pingen eines Hosts</related>
    <related type="Article" href="/dotnet/framework/network-programming/">Netzwerkprogrammierung in .NET Framework</related>
    <related type="Article" href="/dotnet/framework/network-programming/network-programming-samples">Beispiele zur Netzwerkprogrammierung</related>
    <related type="Article" href="/dotnet/framework/network-programming/networkinformation">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.NetworkInformation.Ping" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird das Erstellen einer <xref:System.Net.NetworkInformation.Ping>-Instanz veranschaulicht. Das komplette Beispiel finden Sie in der Übersicht über <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben. <see langword="false" />, wenn ausschließlich nicht verwaltete Ressourcen freigegeben werden sollen.</param>
        <summary>Gibt die vom <see cref="T:System.Net.NetworkInformation.Ping" />-Objekt verwendeten nicht verwalteten Ressourcen und verwirft optional auch die verwalteten Ressourcen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der öffentlichen `Dispose()`-Methode und der <xref:System.ComponentModel.Component.Finalize%2A>-Methode aufgerufen. Die öffentliche `Dispose()`-Methode ruft die geschützte <xref:System.Net.NetworkInformation.Ping.Dispose%2A>-Methode auf, wobei der `disposing`-Parameter auf `true`festgelegt ist. <xref:System.ComponentModel.Component.Finalize%2A> ruft `Dispose` auf, bei dem `disposing` auf `false`festgelegt ist.  
  
 Wenn der `disposing`-Parameter `true`ist, gibt diese Methode alle Ressourcen frei, die von verwalteten Objekten gehalten werden, auf die dieses <xref:System.Net.NetworkInformation.Ping> Objekt verweist. Diese Methode ruft die `Dispose()`-Methode aller Objekte auf, auf die verwiesen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" />-Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von der <xref:System.Net.NetworkInformation.Ping>-Klasse erben, können diese Methode überschreiben, um zusätzliche Aufgaben auszuführen, z. b. die Protokollierung der im `e`-Parameter enthaltenen Daten.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](/dotnet/standard/events/).  
  
 Mit der <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass die <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />-Methode der Basisklasse aufgerufen wird, damit registrierte Delegaten das Ereignis empfangen.</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event PingCompleted As PingCompletedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein asynchroner Vorgang zum Senden einer ICMP (Internet Control Message Protocol)-Echomeldung und Empfangen einer entsprechenden ICMP-Echoantwortmeldung abgeschlossen oder abgebrochen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen verwenden das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis, um Informationen über den Abschluss Status und die Daten abzurufen, die durch einen Rückruf einer der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden gesammelt werden. Der <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegat stellt die aufrufende Methode bereit, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> dieses Ereignis auslöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Angabe einer Rückruf Methode für das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis veranschaulicht. Das komplette Beispiel finden Sie in der Übersicht über <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung an einen Remotecomputer zu senden und eine entsprechende ICMP-Echoantwortmeldung vom Remotecomputer zu empfangen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von den <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladungen zurückgegebene IP-Adresse kann von einem bösartigen Remote Computer stammen. Stellen Sie keine Verbindung mit dem Remote Computer her. Verwenden Sie DNS, um die IP-Adresse des Computers zu ermitteln, mit dem Sie eine Verbindung herstellen möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung an den Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache beschreibt, falls keine Meldung empfangen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet an den Host, der durch `address` eines 32 <xref:System.Byte>-Daten Puffers mit der ICMP-Echo Meldung angegeben wird. Die-Methode wartet fünf Sekunden auf eine ICMP-Echo Antwortnachricht. Wenn in diesem Zeitraum keine Antwort empfangen wird, gibt die Methode zurück, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft ist auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Aufrufen dieser Methode veranschaulicht.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet einen 32-<xref:System.Byte> Datenpuffer mit der ICMP-Echo Meldung. Die-Methode wartet fünf Sekunden auf eine ICMP-Echo Antwortnachricht. Wenn in diesem Zeitraum keine Antwort empfangen wird, gibt die Methode zurück, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft ist auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Aufrufen dieser Methode veranschaulicht.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Methode ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der im `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Die Paket-oder Paket Fragmente können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Beispiel für das Aufrufen einer <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methode finden Sie in der Übersicht über die <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Methode ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der im `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Beispiel für das Aufrufen einer <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methode finden Sie in der Übersicht über die <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde. Die Methode gibt <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> zurück, wenn das Paket die Größe der maximalen Übertragungseinheit überschreitet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der im `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Die Paket-oder Paket Fragmente können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />, oder die <paramref name="buffer" />-Größe übersteigt 65500 Bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der im `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Die Paket-oder Paket Fragmente können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Beispiel für das Aufrufen einer <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladung finden Sie in der Übersicht über die <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />, oder die <paramref name="buffer" />-Größe übersteigt 65500 Bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="options">Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das verwendet wird, um die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets zu steuern.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Mit dieser Überladung können Sie einen Timeoutwert für den Vorgang angeben und die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets steuern.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde. Die Methode gibt <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> zurück, wenn das Paket die Größe der maximalen Übertragungseinheit überschreitet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>-Eigenschaft `true` ist und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Verwenden Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>-Eigenschaft, um anzugeben, wie oft die ICMP-Echo Meldung vor dem Erreichen des Ziels maximal weitergeleitet werden kann. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />, oder die <paramref name="buffer" />-Größe übersteigt 65500 Bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="options">Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das verwendet wird, um die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets zu steuern.</param>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Mit dieser Überladung können Sie einen Timeoutwert für den Vorgang angeben und die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Pakets steuern.</summary>
        <returns>Ein <see cref="T:System.Net.NetworkInformation.PingReply" />-Objekt, das ggf. Informationen über die ICMP-Echoantwortmeldung bereitstellt, oder das die Fehlerursache angibt, falls keine Meldung empfangen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>-Eigenschaft `true` ist und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Verwenden Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>-Eigenschaft, um anzugeben, wie oft die ICMP-Echo Meldung vor dem Erreichen des Ziels maximal weitergeleitet werden kann. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder ist eine Zeichenfolge der Länge 0 (null).  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />, oder die <paramref name="buffer" />-Größe übersteigt 65500 Bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Versucht, eine ICMP (Internet Control Message Protocol)-Echomeldung asynchron an einen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methoden bewirken nicht, dass der Hauptthread Ihrer Anwendung blockiert wird. Wenn Sie blockieren möchten, während Sie auf die ICMP-Echo Antwortnachricht warten, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden.  
  
> [!NOTE]
>  Die IP-Adresse, die von einer der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden zurückgegeben wird, kann von einem bösartigen Remote Computer stammen. Stellen Sie keine Verbindung mit dem Remote Computer her. Verwenden Sie DNS, um die IP-Adresse des Computers zu ermitteln, mit dem Sie eine Verbindung herstellen möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Nennen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode, wenn die Anwendung nicht blockieren soll. Jeder Aufrufe dieser Methode wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das-Ereignis auslöst, müssen Sie dem-Ereignis vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
> [!NOTE]
>  Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden. Diese Methoden sind synchron.  
  
 Diese Methode sendet einen 32-<xref:System.Byte> Datenpuffer mit der ICMP-Echo Meldung. Die-Methode wartet fünf Sekunden auf eine ICMP-Echo Antwortnachricht. Wenn in diesem Zeitraum keine Antwort empfangen wird, gibt die Methode zurück, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft ist auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Die Paket-oder Paket Fragmente können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Codebeispiel, in dem das Aufrufen einer <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode veranschaulicht wird, finden Sie in der Übersicht über <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf der <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />-Methode wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Nennen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode, wenn die Anwendung nicht blockieren soll. Jeder Aufrufe dieser Methode wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das-Ereignis auslöst, müssen Sie dem-Ereignis vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
> [!NOTE]
>  Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Diese Methode sendet einen 32-<xref:System.Byte> Datenpuffer mit der ICMP-Echo Meldung. Die-Methode wartet fünf Sekunden auf eine ICMP-Echo Antwortnachricht. Wenn Sie in diesem Zeitraum keine Antwort erhält, gibt die Methode zurück, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft ist auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Die Paket-oder Paket Fragmente können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Codebeispiel, in dem das Aufrufen der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode veranschaulicht wird, finden Sie unter Übersicht über <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf der <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />-Methode wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> konnte nicht in eine gültige IP-Adresse aufgelöst werden.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Nennen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode, wenn die Anwendung nicht blockieren soll. Jeder-Rückruf wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Anwendungen verwenden einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten, um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das Ereignis auslöst. Vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>müssen Sie dem-Ereignis einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
 Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Codebeispiel, das das Aufrufen einer <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung veranschaulicht, finden Sie in der Übersicht über die <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf der <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />-Methode wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Nennen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode, wenn die Anwendung nicht blockieren soll. Jeder-Rückruf wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Anwendungen verwenden einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten, um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das Ereignis auslöst. Vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>müssen Sie dem-Ereignis einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
 Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Codebeispiel, in dem das Aufrufen der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode veranschaulicht wird, finden Sie unter Übersicht über <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> konnte nicht in eine gültige IP-Adresse aufgelöst werden.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Nennen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode, wenn die Anwendung nicht blockieren soll. Jeder-Rückruf wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das-Ereignis auslöst, müssen Sie dem-Ereignis vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
> [!NOTE]
>  Wenn Ihre Anwendung während des Wartens auf eine Antwort blockiert wird, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Ein Codebeispiel, das das Aufrufen einer <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung veranschaulicht, finden Sie in der Übersicht über die <xref:System.Net.NetworkInformation.Ping>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Nennen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode, wenn die Anwendung nicht blockieren soll. Jeder-Rückruf wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Anwendungen verwenden einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten, um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das Ereignis auslöst. Vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>müssen Sie dem-Ereignis einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
 Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paket Fragmentierung und die Paket Weiterleitung. Das Paket, das die ICMP-Echo Meldung enthält, kann während der Übertragung fragmentiert werden, wenn die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann. Um die Fragmentierung zu verhindern, verwenden Sie eine der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> auf `true`fest. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `true` und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt. Die Paket-oder Paket Fragmente (falls fragmentiert) können durch Routing Knoten 128-Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden Sie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung, die einen `options`-Parameter annimmt, und legen Sie die Eigenschaft <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> auf den gewünschten Wert fest. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Überladung aufgerufen wird. Informationen hierzu finden Sie in der Übersicht über die <xref:System.Net.NetworkInformation.Ping>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> konnte nicht in eine gültige IP-Adresse aufgelöst werden.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine <see cref="T:System.Net.IPAddress" />, die den Computer bezeichnet, der das Ziel der ICMP-Echomeldung ist.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="options">Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das verwendet wird, um die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets zu steuern.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Mit dieser Überladung können Sie einen Timeoutwert für den Vorgang angeben und die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets steuern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Ruft die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode auf, wenn die Anwendung nicht blockiert werden darf. Jeder-Rückruf wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Anwendungen verwenden einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten, um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das Ereignis auslöst. Vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>müssen Sie dem-Ereignis einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
 Wenn Ihre Anwendung während des Wartens auf eine Antwort blockiert wird, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>-Eigenschaft `true` ist und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Verwenden Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>-Eigenschaft, um anzugeben, wie oft die ICMP-Echo Meldung vor dem Erreichen des Ziels maximal weitergeleitet werden kann. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird. Eine Implementierung der Rückruf Methode finden Sie im Beispiel Abschnitt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methoden Überladung.  
  
 Für das folgende Codebeispiel sind die folgenden Namespaces erforderlich:  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 Im folgenden Codebeispiel wird eine ICMP-Echo Meldung asynchron gesendet.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Ein <see cref="T:System.String" />, der den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Ein <see cref="T:System.Int32" />-Wert, der die maximale Anzahl von Millisekunden angibt (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="options">Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das verwendet wird, um die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets zu steuern.</param>
        <param name="userToken">Ein Objekt, das an die beim Abschluss des asynchronen Vorgangs aufgerufene Methode übergeben wird.</param>
        <summary>Versucht, asynchron eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer zu senden und eine entsprechende ICMP-Echoantwortmeldung von diesem Computer zu empfangen. Mit dieser Überladung können Sie einen Timeoutwert für den Vorgang angeben und die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Pakets steuern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode sendet die Echo Meldung asynchron und gibt, wenn der Vorgang abgeschlossen (erfolgreich oder erfolglos) abgeschlossen wurde, den Status der Anwendung zurück. Ruft die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Methode auf, wenn die Anwendung nicht blockiert werden darf. Jeder-Rückruf wird in einem separaten Thread ausgeführt, der automatisch aus dem Thread Pool zugewiesen wird. Wenn der asynchrone Vorgang abgeschlossen ist, löst er das <xref:System.Net.NetworkInformation.Ping.PingCompleted>-Ereignis aus. Anwendungen verwenden einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten, um die Methode anzugeben, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> das Ereignis auslöst. Vor dem Aufrufen von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>müssen Sie dem-Ereignis einen <xref:System.Net.NetworkInformation.PingCompletedEventHandler>-Delegaten hinzufügen. Die-Methode des Delegaten empfängt ein <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt, das ein <xref:System.Net.NetworkInformation.PingReply> Objekt enthält, das das Ergebnis des <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufrufes beschreibt. Das <xref:System.Net.NetworkInformation.PingCompletedEventArgs>-Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>-Eigenschaft. Diese Eigenschaft enthält das `userToken` Objekt, das an den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>-Befehl übermittelt wird.  
  
 Wenn die Anwendung während des Wartens auf eine Antwort blockieren soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A>-Methoden. Diese Methoden sind synchron.  
  
 Wenn die ICMP-Echo Antwortnachricht nicht innerhalb der durch den `timeout`-Parameter angegebenen Zeit empfangen wird, schlägt das ICMP-Echo fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A>-Eigenschaft wird auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>festgelegt.  
  
> [!NOTE]
>  Wenn Sie für `timeout`sehr kleine Zahlen angeben, kann die Ping-Antwort empfangen werden, auch wenn `timeout` Millisekunden abgelaufen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>-Eigenschaft `true` ist und die Gesamtpaket Größe die maximale Paketgröße überschreitet, die von einem der Routing Knoten zwischen dem lokalen Computer und dem Remote Computer übertragen werden kann, schlägt die ICMP-Echo Anforderung fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>festgelegt.  
  
 Verwenden Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>-Eigenschaft, um anzugeben, wie oft die ICMP-Echo Meldung vor dem Erreichen des Ziels maximal weitergeleitet werden kann. Wenn das Paket nach der angegebenen Anzahl von Wiederholungen nicht das Ziel erreicht, wird das Paket verworfen, und die ICMP-Echo Anfrage schlägt fehl. In diesem Fall wird der <xref:System.Net.NetworkInformation.PingReply.Status%2A> auf <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>festgelegt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> konnte nicht in eine gültige IP-Adresse aufgelöst werden.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
        <exception cref="T:System.ArgumentException">Die Größe des <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht alle ausstehenden asynchronen Anforderungen zum Senden einer ICMP (Internet Control Message Protocol)-Echomeldung ab und empfängt eine entsprechende ICMP-Echoantwortmeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um alle Aufrufe von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zu beenden, die noch nicht abgeschlossen wurden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sendet eine ICMP (Internet Control Message Protocol)-Echomeldung an einen Computer und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine IP-Adresse , die den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist.</param>
        <summary>Senden Sie eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Der Computer, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <summary>Sendet eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine IP-Adresse , die den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist.</param>
        <param name="timeout">Die maximale Anzahl von Millisekunden (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <summary>Senden Sie eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Der Computer, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Die maximale Anzahl von Millisekunden (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <summary>Sendet eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang anzugeben.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine IP-Adresse , die den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist.</param>
        <param name="timeout">Die maximale Anzahl von Millisekunden (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <summary>Senden Sie eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang und einen Puffer für Senden und Empfangen anzugeben.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
        <exception cref="T:System.ArgumentException">Die Größe von <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Der Computer, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Die maximale Anzahl von Millisekunden (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <summary>Sendet eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang. Diese Überladung ermöglicht es Ihnen, einen Timeoutwert für den Vorgang und einen Puffer für Senden und Empfangen anzugeben.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Eine IP-Adresse , die den Computer bezeichnet, der das Ziel für die ICMP-Echomeldung ist.</param>
        <param name="timeout">Die maximale Anzahl von Millisekunden (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="options">Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das verwendet wird, um die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets zu steuern.</param>
        <summary>Sendet eine ICMP-Echomeldung (Internet Control Message Protocol) mit dem angegebenen Datenpuffer an einen Computer mit der angegebenen <see cref="T:System.Net.IPAddress" /> und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang. Mit dieser Überladung können Sie einen Timeoutwert für den Vorgang angeben, einen Puffer zum Senden und Empfangen und die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets steuern.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> ist kleiner als Null.</exception>
        <exception cref="T:System.InvalidOperationException">Ein Aufruf von <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> wird gerade ausgeführt.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Beim Senden oder Empfangen der ICMP-Meldungen wurde eine Ausnahme ausgelöst. Welche Ausnahme genau ausgelöst wurde, entnehmen Sie der internen Ausnahme.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> ist keine gültige IP-Adresse.</exception>
        <exception cref="T:System.ObjectDisposedException">Dieses Objekt wurde verworfen.</exception>
        <exception cref="T:System.ArgumentException">Die Größe von <paramref name="buffer" /> übersteigt 65.500 Bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Der Computer, der das Ziel für die ICMP-Echomeldung ist. Der für diesen Parameter angegebene Wert kann eine Hostname oder eine Zeichenfolgenentsprechung einer IP-Adresse sein.</param>
        <param name="timeout">Die maximale Anzahl von Millisekunden (nach dem Senden der Echomeldung), für die auf die ICMP-Echoantwortmeldung gewartet werden soll.</param>
        <param name="buffer">Ein <see cref="T:System.Byte" />-Array, das Daten enthält, die mit der ICMP-Echomeldung gesendet und in der ICMP-Echoantwortmeldung zurückgegeben werden sollen. Das Array kann höchstens 65.500 Bytes enthalten.</param>
        <param name="options">Ein <see cref="T:System.Net.NetworkInformation.PingOptions" />-Objekt, das verwendet wird, um die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets zu steuern.</param>
        <summary>Sendet eine ICMP (Internet Control Message Protocol)-Echomeldung mit dem angegebenen Datenpuffer an den angegebenen Computer und empfängt eine entsprechende ICMP-Echoantwortmeldung von diesem Computer als asynchronen Vorgang. Mit dieser Überladung können Sie einen Timeoutwert für den Vorgang angeben, einen Puffer zum Senden und Empfangen und die Werte für Fragmentierung und Gültigkeitsdauer des ICMP-Echomeldungspakets steuern.</summary>
        <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Die zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="ping.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von Instanzen der <see cref="T:System.Net.NetworkInformation.Ping" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wenn Sie für ein <xref:System.Net.NetworkInformation.Ping> Objekt, das verworfen wurde, eine Methode aufzurufen, erhalten Sie eine <xref:System.ObjectDisposedException>.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

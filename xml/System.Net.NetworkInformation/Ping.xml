<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="89e0a878f272dab9d21539603e8401027da58142" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37645653" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows an application to determine whether a remote computer is accessible over the network.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen verwenden die <xref:System.Net.NetworkInformation.Ping> Klasse, um festzustellen, ob es sich bei ein remote-Computer erreichbar ist.  
  
 Netzwerktopologie kann bestimmen, ob <xref:System.Net.NetworkInformation.Ping> erfolgreich eine Verbindung mit einen Remotehost. Das Vorhandensein und die Konfiguration des Proxys, Network Address Translation (NAT)-Systeme oder Firewalls können verhindern, dass <xref:System.Net.NetworkInformation.Ping> Firewallfehlers. Eine erfolgreiche <xref:System.Net.NetworkInformation.Ping> gibt nur an, dass der Remote Host im Netzwerk erreicht werden kann; das Vorhandensein von höherer Ebene Dienste (z. B. einen Webserver) auf dem Remotehost ist nicht garantiert.  
  
 Diese Klasse stellt das Befehlszeilentool Ping.exe ähnliche Funktionen. Die <xref:System.Net.NetworkInformation.Ping.Send%2A> und <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden senden eine Internet Control Message Protocol (ICMP) Echo Request-Nachricht auf einem Remotecomputer befindet und wartet, eine ICMP-echoantwortmeldung von diesem Computer. Eine ausführliche Beschreibung der ICMP-Nachrichten, finden Sie unter RFC 792, verfügbar unter [ https://www.ietf.org ](https://www.ietf.org/).  
  
 Die folgenden Typen werden verwendet, mit der <xref:System.Net.NetworkInformation.Ping> Klasse und werden weiter unten ausführlich beschrieben.  
  
|**Typnamen**|**Beschreibung**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Definiert Statuscodes, die das Ergebnis einer ICMP-Echo Request-Nachricht zu beschreiben.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Können Sie konfigurieren oder abrufen, die die Einstellungen, die steuern, wie oft das Anforderungspaket weitergeleitet werden können (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), und gibt an, ob sie fragmentiert werden kann (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  
|<xref:System.Net.NetworkInformation.PingReply>|Enthält die Ergebnisse einer ICMP-Echo-Anforderung.|  
|<xref:System.Net.NetworkInformation.PingException>|Wird ausgelöst, wenn ein nicht behebbarer Fehler auftritt.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Die zugeordneten Daten enthält <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignisse, die ausgelöst wird, wenn eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufruf abgeschlossen oder abgebrochen wird.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|Wird aufgerufen, wenn der Delegat, der die Callback-Methode bietet eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufruf abgeschlossen oder abgebrochen wird.|  
  
 Die <xref:System.Net.NetworkInformation.Ping.Send%2A> und <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden geben die Antwort in einem <xref:System.Net.NetworkInformation.PingReply> Objekt. Die <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> -Eigenschaft gibt ein <xref:System.Net.NetworkInformation.IPStatus> Wert, der das Ergebnis der Anforderung angibt.  
  
 Wenn Sie die Anforderung zu senden, müssen Sie den Remotecomputer angeben. Sie erreichen dies durch die Bereitstellung von eines Hosts-Zeichenfolge, eine IP-Adresse in einem Format, oder ein <xref:System.Net.IPAddress> Objekt.  
  
 Sie können auch die folgenden Typen von Informationen angeben:  
  
-   Daten, die die Anforderung begleitet. Angeben von `buffer` können Sie sich die Zeitspanne, die für ein Paket einer bestimmten Größe erforderlich sind, in und aus dem Remotehost und maximum Transmission Unit der Netzwerkpfad zu übertragen. (Finden Sie unter den <xref:System.Net.NetworkInformation.Ping.Send%2A> oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladungen nehmen einen `buffer` Parameter.)  
  
-   Gibt an, ob das ICMP Echo-Paket während der Übertragung fragmentiert werden kann. (Finden Sie unter den <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft und die <xref:System.Net.NetworkInformation.Ping.Send%2A> oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladungen nehmen einen `options` Parameter.)  
  
-   Wie oft Routingknoten, wie z. B. Router oder Gateways können weiterleiten, das Paket, bevor sie den Zielcomputer erreicht oder verworfen wird. (Finden Sie unter <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> und <xref:System.Net.NetworkInformation.Ping.Send%2A> oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladungen nehmen einen `options` Parameter.)  
  
-   Das Zeitlimit, innerhalb, das derer die Antwort empfangen werden muss. (Finden Sie unter den <xref:System.Net.NetworkInformation.Ping.Send%2A> oder <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladungen nehmen einen `timeout` Parameter.  
  
 Die <xref:System.Net.NetworkInformation.Ping> -Klasse bietet synchrone und asynchrone Methoden zum Senden der Anforderung. Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron. Wenn Ihre Anwendung nicht blockiert werden soll, verwenden Sie die asynchrone <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden. Ein Aufruf von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> führt in einem eigenen Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Anwendungen verwenden eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten an die Methode, die aufgerufen wird, für die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignisse. Sie müssen Hinzufügen einer <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
 Sie können keine die gleiche Instanz von der <xref:System.Net.NetworkInformation.Ping> Klasse mehrere gleichzeitige ICMP-echoanforderungen generiert. Aufrufen <xref:System.Net.NetworkInformation.Ping.Send%2A> während einer <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Aufruf ist in Bearbeitung "oder" aufrufen <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> mehrmals vor Abschluss aller vorherigen Aufrufe bewirkt, dass ein <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Net.NetworkInformation.Ping> Klasse synchron.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 Das folgende Codebeispiel veranschaulicht die Verwendung der <xref:System.Net.NetworkInformation.Ping> Klasse asynchron.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.Ping" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer <xref:System.Net.NetworkInformation.Ping> Instanz. Das vollständige Beispiel finden Sie in der <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.NetworkInformation.Ping" /> object, and optionally disposes of the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, von der öffentlichen `Dispose()` Methode und die <xref:System.ComponentModel.Component.Finalize%2A> Methode. Die öffentliche `Dispose()` Methode ruft die geschützte <xref:System.Net.NetworkInformation.Ping.Dispose%2A> -Methode mit dem `disposing` Parametersatz zu `true`. <xref:System.ComponentModel.Component.Finalize%2A> Ruft `Dispose` mit `disposing` festgelegt `false`.  
  
 Wenn die `disposing` -Parameter ist `true`, gibt diese Methode alle Ressourcen frei, die für verwaltete Objekte, die dieses <xref:System.Net.NetworkInformation.Ping> Objektverweise. Diese Methode ruft die `Dispose()`-Methode aller Objekte auf, auf die verwiesen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> object that contains event data.</param>
        <summary>Raises the <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von erben die <xref:System.Net.NetworkInformation.Ping> Klasse kann diese Methode, um zusätzliche Aufgaben wie die Protokollierung in enthaltenen Daten auszuführen, überschreiben die `e` Parameter.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen verwenden die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis zum Abrufen von Informationen zu den Abschlussstatus und die Daten gesammelt werden, durch einen Aufruf eines der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden. Die <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat stellt den Aufruf aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> löst dieses Ereignis aus.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, eine Rückrufmethode für die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Das vollständige Beispiel finden Sie in der <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to a remote computer and receive a corresponding ICMP echo reply message from the remote computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die IP-Adresse, die von einer beliebigen zurückgegebene der <xref:System.Net.NetworkInformation.Ping.Send%2A> Überladungen können von einem böswilligen Remotecomputer stammen. Verbinden Sie nicht mit dem Remotecomputer, die mit diesem. Verwenden Sie DNS, um die IP-Adresse des Computers zu bestimmen, zu dem Sie eine Verbindung herstellen möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet an den Host, den angegebenen `address` 32 <xref:System.Byte> Datenpuffer mit der ICMP-echomeldung. Die Methode wartet fünf Sekunden eine ICMP-echoantwortmeldung. Die Methode gibt zurück, wenn es in diesem Zeitraum nicht über eine Antwort erhält, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.Send%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Aufrufen dieser Methode.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet eine 32 <xref:System.Byte> Datenpuffer mit der ICMP-echomeldung. Die Methode wartet fünf Sekunden eine ICMP-echoantwortmeldung. Die Methode gibt zurück, wenn es in diesem Zeitraum nicht über eine Antwort erhält, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.Send%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Aufrufen dieser Methode.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet. Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-echoantwortmeldung nicht in dem im angegebenen Zeitraum empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Das Paket oder Paketfragmente können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.Send%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Beispiel für die Aufrufen einer <xref:System.Net.NetworkInformation.Ping.Send%2A> -Methode finden Sie unter der <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-echoantwortmeldung nicht in dem im angegebenen Zeitraum empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.Send%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Beispiel für die Aufrufen einer <xref:System.Net.NetworkInformation.Ping.Send%2A> -Methode finden Sie unter der <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> if the packet exceeds the Maximum Transmission Unit (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-echoantwortmeldung nicht in dem im angegebenen Zeitraum empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Das Paket oder Paketfragmente können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.Send%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-echoantwortmeldung nicht in dem im angegebenen Zeitraum empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Das Paket oder Paketfragmente können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.Send%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Beispiel für das Aufrufen von einem <xref:System.Net.NetworkInformation.Ping.Send%2A> überladen, finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" /> and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> if the packet exceeds the Maximum Transmission Unit (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Verwenden der <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft, um die maximale Anzahl an, wie oft anzugeben, die ICMP-echomeldung kann vor dem Erreichen des Ziels weitergeleitet werden. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Verwenden der <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft, um die maximale Anzahl an, wie oft anzugeben, die ICMP-echomeldung kann vor dem Erreichen des Ziels weitergeleitet werden. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is a zero length string.  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to a computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methoden führen nicht Ihrer Anwendung-Hauptthread zu blockieren. Wenn Sie beim Warten auf die ICMP-echoantwortmeldung blockieren möchten, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden.  
  
> [!NOTE]
>  Die IP-Adresse, die von einer beliebigen zurückgegebene der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden können von einem böswilligen Remotecomputer stammen. Verbinden Sie nicht mit dem Remotecomputer, die mit diesem. Verwenden Sie DNS, um die IP-Adresse des Computers zu bestimmen, zu dem Sie eine Verbindung herstellen möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn Ihre Anwendung nicht blockiert werden soll. Jeder Aufruf dieser Methode führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Die Methode an, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Auslösen des Ereignisses, müssen Sie hinzufügen, eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
> [!NOTE]
>  Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Diese Methode sendet eine 32 <xref:System.Byte> Datenpuffer mit der ICMP-echomeldung. Die Methode wartet fünf Sekunden eine ICMP-echoantwortmeldung. Die Methode gibt zurück, wenn es in diesem Zeitraum nicht über eine Antwort erhält, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Das Paket oder Paketfragmente können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Codebeispiel, das Aufrufen veranschaulicht eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Methode finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A call to the <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> method is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn Ihre Anwendung nicht blockiert werden soll. Jeder Aufruf dieser Methode führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Die Methode an, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Auslösen des Ereignisses, müssen Sie hinzufügen, eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
> [!NOTE]
>  Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Diese Methode sendet eine 32 <xref:System.Byte> Datenpuffer mit der ICMP-echomeldung. Die Methode wartet fünf Sekunden eine ICMP-echoantwortmeldung. Die Methode gibt zurück, wenn in diesem Zeitraum keine Antwort empfangen wird und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Das Paket oder Paketfragmente können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Codebeispiel, das Aufrufen veranschaulicht die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Methode finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> method is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn Ihre Anwendung nicht blockiert werden soll. Jeder Aufruf führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Anwendungen verwenden eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten an die Methode, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> löst das Ereignis aus. Sie müssen Hinzufügen einer <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
 Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Codebeispiel, das Aufrufen veranschaulicht eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> überladen, finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> method is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn Ihre Anwendung nicht blockiert werden soll. Jeder Aufruf führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Anwendungen verwenden eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten an die Methode, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> löst das Ereignis aus. Sie müssen Hinzufügen einer <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
 Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Codebeispiel, das Aufrufen veranschaulicht die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Methode finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet die-echomeldung asynchron, und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn Ihre Anwendung nicht blockiert werden soll. Jeder Aufruf führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Die Methode an, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Auslösen des Ereignisses, müssen Sie hinzufügen, eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
> [!NOTE]
>  Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert wird, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Ein Codebeispiel, das Aufrufen veranschaulicht eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> überladen, finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn Ihre Anwendung nicht blockiert werden soll. Jeder Aufruf führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Anwendungen verwenden eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten an die Methode, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> löst das Ereignis aus. Sie müssen Hinzufügen einer <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt mit einer <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
 Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Diese Überladung verwendet die Standardeinstellungen für die Paketfragmentierung und Paketweiterleitung. Das Paket, das die ICMP-echomeldung enthält kann während der Übertragung fragmentiert werden überschreitet die Paketgröße des gesamten die maximale Paketgröße, die übertragen werden kann von einem der Routingknoten zwischen den lokalen Computern und Remotecomputern. Um die Fragmentierung zu verhindern, verwenden Sie eine der der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methoden, bei denen ein `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft, um `true`. Wenn <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ist `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Das Paket oder Paketfragmente (wenn fragmentiert) können durch Routingknoten 128 Mal weitergeleitet werden, bevor Sie verworfen werden. Um diese Einstellung zu ändern, verwenden eine <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> -Überladung mit eine `options` -Parameter, und legen Sie die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft auf den gewünschten Wert. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen einer <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> überladen, finden Sie unter den <xref:System.Net.NetworkInformation.Ping> Übersicht über die Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn die Anwendung nicht blockiert werden muss. Jeder Aufruf führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Anwendungen verwenden eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten an die Methode, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> löst das Ereignis aus. Sie müssen Hinzufügen einer <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
 Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert wird, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Verwenden der <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft, um die maximale Anzahl an, wie oft anzugeben, die ICMP-echomeldung kann vor dem Erreichen des Ziels weitergeleitet werden. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird. Eine Implementierung der Rückrufmethode darstellt, finden Sie unter den <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode Überladung Beispielabschnitt.  
  
 Im folgenden Codebeispiel sind die folgenden Namespaces erforderlich:  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 Im folgenden Codebeispiel sendet eine ICMP-echomeldung asynchron aus.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="buffer">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode sendet die-echomeldung asynchron und beim Abschluss des Vorgangs (erfolgreich oder nicht erfolgreich), den Status an die Anwendung zurückgegeben. Rufen Sie die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Methode, wenn die Anwendung nicht blockiert werden muss. Jeder Aufruf führt in einem separaten Thread, der automatisch aus dem Threadpool zugeordnet ist. Wenn der asynchrone Vorgang abgeschlossen ist, löst die <xref:System.Net.NetworkInformation.Ping.PingCompleted> Ereignis. Anwendungen verwenden eine <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegaten an die Methode, die aufgerufen wird, wenn <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> löst das Ereignis aus. Sie müssen Hinzufügen einer <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegat, der das Ereignis vor dem Aufruf <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Die-Methode des Delegaten erhält eine <xref:System.Net.NetworkInformation.PingCompletedEventArgs> -Objekt, enthält eine <xref:System.Net.NetworkInformation.PingReply> -Objekt, das das Ergebnis des beschreibt die <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen. Die <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Objekt erbt die <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> Eigenschaft. Diese Eigenschaft enthält die `userToken` -Objekt übergeben, in der <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> aufrufen.  
  
 Wenn Ihre Anwendung beim Warten auf einer Antwort blockiert werden soll, verwenden Sie die <xref:System.Net.NetworkInformation.Ping.Send%2A> Methoden; diese Methoden sind synchron.  
  
 Wenn die ICMP-echoantwortmeldung nicht innerhalb der angegebenen Zeit empfangen wird die `timeout` Parameter, die ICMP-Echo schlägt fehl, und die <xref:System.Net.NetworkInformation.PingReply.Status%2A> -Eigenschaftensatz auf <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Wenn Sie für sehr kleine Zahlen angeben `timeout`, die Ping-Antwort empfangen werden kann, wenn `timeout` Millisekunden verstrichen sind.  
  
 Wenn die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Eigenschaft `true` die gesamte überschreitet der maximale Paketgröße, die von einem der Knoten routing zwischen dem lokalen Computer und Remotecomputer übertragen werden kann, wird die ICMP-Echoanfrage ein. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Verwenden der <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Eigenschaft, um die maximale Anzahl an, wie oft anzugeben, die ICMP-echomeldung kann vor dem Erreichen des Ziels weitergeleitet werden. Wenn das Paket nicht das Ziel nach dem die angegebene Anzahl von Malen weitergeleitet wird erreicht, wird das Paket verworfen, und die ICMP-Echoanfrage schlägt fehl. In diesem Fall die <xref:System.Net.NetworkInformation.PingReply.Status%2A> nastaven NA hodnotu <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Methode aufgerufen wird.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Eine ICMP-echomeldung gesendet.  Zugeordnete Enumeration: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode zum Beenden alle Aufrufe von <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , die nicht ausgeführt wurden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message to a computer, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65,500 bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65,500 bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601>>-Objekt wird abgeschlossen, nachdem das ICMP-Paket gesendet wurde und die Antwort empfangen wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
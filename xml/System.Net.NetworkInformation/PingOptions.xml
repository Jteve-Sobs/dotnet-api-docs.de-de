<Type Name="PingOptions" FullName="System.Net.NetworkInformation.PingOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf4b821bbaa7b117af28b78d5859e30f7a410504" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69091695" /></Metadata><TypeSignature Language="C#" Value="public class PingOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class PingOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingOptions" />
  <TypeSignature Language="F#" Value="type PingOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wird verwendet, um das Übertragen von <see cref="T:System.Net.NetworkInformation.Ping" />-Datenpaketen zu steuern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.NetworkInformation.PingOptions> -Klasse stellt <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> -Eigenschaft und die-Eigenschaft zum Steuern der Übertragung von ICMP (Internet Control Message Protocol)-Echo Anforderungs Paketen bereit.  
  
 Die <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> -Eigenschaft gibt die Gültigkeitsdauer für Pakete an, <xref:System.Net.NetworkInformation.Ping> die von der-Klasse gesendet werden. Dieser Wert gibt die Anzahl der Routing Knoten an, die ein <xref:System.Net.NetworkInformation.Ping> Paket weiterleiten können, bevor es verworfen wird. Das Festlegen dieser Option ist hilfreich, wenn Sie die Anzahl der Weiterleitungen testen möchten, die auch als Hops bezeichnet werden, um ein Paket von einem Quellcomputer an einen Zielcomputer zu senden.  
  
 Die <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> -Eigenschaft steuert, ob an einen Remote Host gesendete Daten in mehrere Pakete aufgeteilt werden können.  Diese Option ist nützlich, wenn Sie die maximale Übertragungseinheit (MTU) der Router und Gateways testen möchten, die für die Übertragung des Pakets verwendet werden.  
  
 Instanzen der <xref:System.Net.NetworkInformation.PingOptions> -Klasse werden an die <xref:System.Net.NetworkInformation.Ping.Send%2A> -Methode und die-Methode <xref:System.Net.NetworkInformation.PingReply> übermittelt, und <xref:System.Net.NetworkInformation.PingOptions> die- <xref:System.Net.NetworkInformation.PingReply.Options%2A> Klasse gibt Instanzen von über die- <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Eigenschaft zurück.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.Net.NetworkInformation.PingOptions>finden Sie im <xref:System.Net.NetworkInformation.PingOptions.%23ctor%2A> -Konstruktor.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Net.NetworkInformation.Ping>- <xref:System.Net.NetworkInformation.PingOptions> Klasse <xref:System.Net.NetworkInformation.PingReply> , die-Klasse und die-Klasse zum Senden einer ICMP-Echo Anforderung an den in der Befehlszeile angegebenen Host verwendet.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.NetworkInformation.PingOptions" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PingOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PingOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PingOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.NetworkInformation.PingOptions" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für <xref:System.Net.NetworkInformation.PingOptions>eine Instanz von angezeigt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>|128|  
|<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>|`false`|  
  
 Sie können die Eigenschaften auf neue Werte festlegen, bevor <xref:System.Net.NetworkInformation.Ping.Send%2A> Sie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>oder aufrufen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Aufrufen dieses Konstruktors veranschaulicht.  
  
 [!code-cpp[NCLPingSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#2)]
 [!code-csharp[NCLPingSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PingOptions (int ttl, bool dontFragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 ttl, bool dontFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ttl As Integer, dontFragment As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PingOptions(int ttl, bool dontFragment);" />
      <MemberSignature Language="F#" Value="new System.Net.NetworkInformation.PingOptions : int * bool -&gt; System.Net.NetworkInformation.PingOptions" Usage="new System.Net.NetworkInformation.PingOptions (ttl, dontFragment)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ttl" Type="System.Int32" />
        <Parameter Name="dontFragment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ttl">Ein <see cref="T:System.Int32" />Wert größer als 0 (null), der die Anzahl der zulässigen Weiterleitungen von <see cref="T:System.Net.NetworkInformation.Ping" />-Datenpaketen angibt.</param>
        <param name="dontFragment"><see langword="true" />, um das Fragmentieren der an den Remotehost gesendeten Daten zu verhindern, andernfalls <see langword="false" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.NetworkInformation.PingOptions" />-Klasse und legt die Werte für Gültigkeitsdauer und Fragmentierung fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `ttl` -Parameter schränkt die Anzahl von Routern und Gateways ein, die die Daten weiterleiten können. Dies ist hilfreich, um die Länge der Route zwischen dem lokalen Computer und dem Remote Computer zu testen. Mit `dontFragment` dem-Parameter können Sie die maximale Übertragungseinheit (MTU) der Router und Gateways testen, die zum Übertragen des Pakets verwendet werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird das Aufrufen dieses Konstruktors und das Anzeigen der Eigenschaftswerte der neuen Instanz veranschaulicht.  
  
 [!code-cpp[NCLPingAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#3)]
 [!code-csharp[NCLPingAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ttl" /> ist kleiner gleich 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingOptions.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.NetworkInformation.PingOptions.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.Boolean" />-Wert ab, der die Fragmentierung der an den Remotehost gesendeten Daten steuert, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Daten nicht in mehreren Paketen gesendet werden können, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen verwenden diese Eigenschaft, um zu steuern, ob Daten, die von der <xref:System.Net.NetworkInformation.Ping> -Klasse an einen Remote Host gesendet werden, in mehrere Pakete aufgeteilt werden können.  Diese Option ist nützlich, wenn Sie die maximale Übertragungseinheit (MTU) der Router und Gateways testen möchten, die für die Übertragung des Pakets verwendet werden. Wenn diese Eigenschaft ist `true` und die an den Remote Host gesendeten Daten größer sind als die MTU eines Gateways oder Routers zwischen dem Absender und dem Remote Host, schlägt der Ping-Vorgang mit <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>dem Status fehl.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der Wert dieser Eigenschaft mithilfe <xref:System.Net.NetworkInformation.PingOptions.%23ctor%2A> eines Konstruktors festgelegt wird, und anschließend wird der Wert angezeigt.  
  
 [!code-cpp[NCLPingAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#3)]
 [!code-csharp[NCLPingAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public int Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingOptions.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ttl { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int with get, set" Usage="System.Net.NetworkInformation.PingOptions.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der zulässigen Weiterleitungen der <see cref="T:System.Net.NetworkInformation.Ping" />-Daten über Routingknoten ab, bis die Daten verworfen werden.</summary>
        <value>Ein <see cref="T:System.Int32" />-Wert, der die Anzahl der zulässigen Weiterleitungen von <see cref="T:System.Net.NetworkInformation.Ping" />-Datenpaketen angibt. Der Standard ist 128.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da Gateways und Router Pakete über ein Netzwerk übertragen, verringern Sie den aktuellen Gültigkeits Zeitraum (Time-to-Live, TTL) im Paket-Header. Wenn der TTL-Wert 0 (null) erreicht, wird das Paket als nicht Zustell Bar eingestuft und verworfen. Diese Option ist nützlich, wenn Sie die Anzahl der Router und Gateways testen möchten, die zum Übertragen der Daten verwendet werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der Wert dieser Eigenschaft mithilfe <xref:System.Net.NetworkInformation.PingOptions.%23ctor%2A> eines Konstruktors festgelegt wird, und anschließend wird der Wert angezeigt.  
  
 [!code-cpp[NCLPingAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#3)]
 [!code-csharp[NCLPingAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der für einen set-Vorgang angegebene Wert ist kleiner oder gleich 0 (null).</exception>
      </Docs>
    </Member>
  </Members>
</Type>

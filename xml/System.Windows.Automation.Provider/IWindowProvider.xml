<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6f7b312299fbbbf91a17d9118a57750c51aa4e47" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39947592" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <TypeSignature Language="F#" Value="type IWindowProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ddc6d-101">Macht Methoden und Eigenschaften verfügbar, um den Zugriff des Benutzeroberflächenautomatisierungs-Clients auf Steuerelemente zu unterstützen, die grundlegende fensterbasierte Funktionen innerhalb einer herkömmlichen grafischen Benutzeroberfläche (GUI) bereitstellen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddc6d-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc6d-102">Implementiert ein Benutzeroberflächenautomatisierungs-Anbieter, die unterstützen, muss die <xref:System.Windows.Automation.WindowPattern> Steuerelementmuster.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="iWindowProvider.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-103">Versucht, das Fenster zu schließen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-103">Attempts to close the window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc6d-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> ohne Blockierung muss sofort beendet werden.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="ddc6d-105">Durch <xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> wird das <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent>-Ereignis ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="ddc6d-106">Wenn möglich, sollte das Ereignis ausgelöst werden, nachdem das Steuerelement seine zugeordnete Aktion abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-106">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="ddc6d-107">Wenn auf einem Steuerelement der geteilte Bereich aufgerufen wird, wird diese Methode schließen Sie den Bereich und entfernen die entsprechende Teilung.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-107">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="ddc6d-108">Diese Methode kann auch alle anderen Bereiche, je nach Implementierung schließen.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-108">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddc6d-109">Wenn das Steuerelement die angeforderte Aktion nicht ausführen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-109">When the control is unable to perform the requested action.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException">
          <span data-ttu-id="ddc6d-110">Wenn das Zielelement nicht mehr verfügbar ist (weil z.B. das Fenster geschlossen wurde).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-110">When the target element is no longer available (for example, the window has closed).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberSignature Language="F#" Value="member this.InteractionState : System.Windows.Automation.WindowInteractionState" Usage="System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-111">Ruft den Interaktionszustand des Fensters ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-111">Gets the interaction state of the window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddc6d-112">Der <see cref="T:System.Windows.Automation.WindowInteractionState" /> des Steuerelements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-112">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsModal : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-113">Ruft einen Wert ab, der angibt, ob es sich um ein modales Fenster handelt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-113">Gets a value that specifies whether the window is modal.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddc6d-114">
            <see langword="true" />, wenn es sich um ein modales Fenster handelt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-114">
              <see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTopmost : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-115">Ruft einen Wert ab, der angibt, ob das Fenster das oberste Element in der Z-Reihenfolge ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-115">Gets a value that specifies whether the window is the topmost element in the z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddc6d-116">
            <see langword="true" />, wenn es sich um das oberste Fenster handelt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-116">
              <see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Maximizable : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-117">Ruft einen Wert ab, der angibt, ob das Fenster maximiert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-117">Gets a value that specifies whether the window can be maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddc6d-118">
            <see langword="true" />, wenn das Fenster maximiert werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-118">
              <see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Minimizable : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-119">Ruft einen Wert ab, der angibt, ob das Fenster minimiert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-119">Gets a value that specifies whether the window can be minimized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddc6d-120">
            <see langword="true" />, wenn das Fenster minimiert werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-120">
              <see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberSignature Language="F#" Value="abstract member SetVisualState : System.Windows.Automation.WindowVisualState -&gt; unit" Usage="iWindowProvider.SetVisualState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="ddc6d-121">Der angeforderte visuelle Zustand des Fensters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-121">The requested visual state of the window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddc6d-122">Ändert den visuellen Zustand des Fensters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-122">Changes the visual state of the window.</span>
          </span>
          <span data-ttu-id="ddc6d-123">Beispiel: Minimieren oder Maximieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-123">For example, minimizes or maximizes it.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ddc6d-124">Wenn das Steuerelement das geforderte Verhalten nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-124">When the control does not support the requested behavior.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualState : System.Windows.Automation.WindowVisualState" Usage="System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ddc6d-125">Ruft den visuellen Zustand des Fensters ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-125">Gets the visual state of the window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ddc6d-126">Der visuelle Zustand des Fensters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-126">The visual state of the window.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberSignature Language="F#" Value="abstract member WaitForInputIdle : int -&gt; bool" Usage="iWindowProvider.WaitForInputIdle milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="ddc6d-127">Die Zeitspanne in Millisekunden, während der gewartet werden soll, dass der zugeordnete Prozess in den Leerlauf wechselt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-127">The amount of time, in milliseconds, to wait for the associated process to become idle.</span>
          </span>
          <span data-ttu-id="ddc6d-128">Maximal zulässig sind <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-128">The maximum is <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddc6d-129">Bewirkt, dass der aufrufende Code für die angegebene Zeitspanne oder solange blockiert wird, bis der zugeordnete Prozess in den Leerlauf wechselt, je nachdem, was zuerst zutrifft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-129">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddc6d-130">
            <see langword="true" />, wenn das Fenster in den Leerlauf eingetreten ist, <see langword="false" />, wenn das Timeout eingetreten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-130">
              <see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddc6d-131">Diese Methode wird in der Regel in Verbindung mit der Behandlung von verwendet eine <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-131">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="ddc6d-132">Die Implementierung ist das zugrunde liegende Framework abhängig. Diese Methode zurückgeben aus diesem Grund kann einige Zeit, nachdem das Fenster für Benutzereingaben bereit ist.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-132">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="ddc6d-133">Der aufrufende Code sollten nicht verlassen, die für diese Methode, um zu ermitteln, genau, wenn das Fenster im Leerlauf befindet.</span><span class="sxs-lookup"><span data-stu-id="ddc6d-133">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ddc6d-134">Wenn der übergebene Parameter keine gültige Zahl darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddc6d-134">When the parameter passed in is not a valid number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7ac8b68faa1b67a6bcbb608b270460bece93ca9" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39750707" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="89ca5-101">Macht Methoden und Eigenschaften zur Unterstützung des Benutzeroberflächenautomatisierungs-Clientzugriffs auf Steuerelemente verfügbar, die eine einzelne, nicht mehrdeutige Aktion einleiten oder ausführen und den Zustand bei der Aktivierung nicht beibehalten.</span>
      <span class="sxs-lookup">
        <span data-stu-id="89ca5-101">Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ca5-102">Implementiert ein Benutzeroberflächenautomatisierungs-Anbieter, die unterstützen, muss die <xref:System.Windows.Automation.InvokePattern> Steuerelementmuster.</span><span class="sxs-lookup"><span data-stu-id="89ca5-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.</span></span>  
  
 <span data-ttu-id="89ca5-103">Steuerelemente implementieren <xref:System.Windows.Automation.Provider.IInvokeProvider> , wenn das gleiche Verhalten nicht durch einen anderen Steuerelementmuster-Anbieter verfügbar gemacht wird.</span><span class="sxs-lookup"><span data-stu-id="89ca5-103">Controls implement <xref:System.Windows.Automation.Provider.IInvokeProvider> if the same behavior is not exposed through another control pattern provider.</span></span> <span data-ttu-id="89ca5-104">Wenn die <xref:System.Windows.Automation.InvokePattern.Invoke%2A> -Methode eines Steuerelements beispielsweise dieselbe Aktion wie die <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> - oder die <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> -Methode ausführt, darf <xref:System.Windows.Automation.Provider.IInvokeProvider>nicht für das Steuerelement implementiert werden.</span><span class="sxs-lookup"><span data-stu-id="89ca5-104">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="89ca5-105">Sendet eine Anforderung zum Aktivieren eines Steuerelements und Initiieren seiner einzelnen eindeutigen Aktion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ca5-105">Sends a request to activate a control and initiate its single, unambiguous action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ca5-106"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> ist ein asynchroner Aufruf und muss die Kontrolle sofort zurückgeben, ohne zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="89ca5-106"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> is an asynchronous call and must return immediately without blocking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="89ca5-107">Dieses Verhalten ist insbesondere für Steuerelemente wichtig, die direkt oder indirekt ein modales Dialogfeld starten, wenn sie aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="89ca5-107">This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.</span></span> <span data-ttu-id="89ca5-108">Jeder Benutzeroberflächenautomatisierungs-Client, der das Ereignis ausgelöst hat, bleibt blockiert, bis das modale Dialogfeld geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="89ca5-108">Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.</span></span>  
  
 <span data-ttu-id="89ca5-109">Durch <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> wird das <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>-Ereignis ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="89ca5-109"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event.</span></span> <span data-ttu-id="89ca5-110">Wenn möglich, sollte das Ereignis ausgelöst werden, nachdem das Steuerelement seine zugeordnete Aktion abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="89ca5-110">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="89ca5-111"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> ausgelöst werden soll, bevor die Wartung der <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> Anforderung in den folgenden Szenarien:</span><span class="sxs-lookup"><span data-stu-id="89ca5-111"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> request in the following scenarios:</span></span>  
  
-   <span data-ttu-id="89ca5-112">Es ist nicht möglich oder zweckmäßig, bis zum Abschluss der Aktion zu warten.</span><span class="sxs-lookup"><span data-stu-id="89ca5-112">It is not possible or practical to wait until the action is complete.</span></span>  
  
-   <span data-ttu-id="89ca5-113">Die Aktion erfordert eine Benutzeraktion.</span><span class="sxs-lookup"><span data-stu-id="89ca5-113">The action requires user interaction.</span></span>  
  
-   <span data-ttu-id="89ca5-114">Die Aktion ist zeitaufwändig und führt dazu, dass den aufrufenden Client für eine längere Zeit blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="89ca5-114">The action is time-consuming and will cause the calling client to block for a significant length of time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ca5-115">Das folgende Beispiel implementiert die <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> Methode für das MouseDown-Ereignishandler eines Steuerelements.</span><span class="sxs-lookup"><span data-stu-id="89ca5-115">The following example implements the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> method on the MouseDown event handler of a control.</span></span> <span data-ttu-id="89ca5-116">Vorausgesetzt, dass `providerControl` wird eine Membervariable, die bei der Erstellung der Klassen wurde initialisiert.</span><span class="sxs-lookup"><span data-stu-id="89ca5-116">Assume that `providerControl` is a member variable that was initialized when the class was constructed.</span></span>  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
          <span data-ttu-id="89ca5-117">Wenn das Steuerelement nicht aktiviert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ca5-117">If the control is not enabled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
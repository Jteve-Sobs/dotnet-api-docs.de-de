<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea9305b4eb63cc9e4b5bf00b2dccff5473bcf88c" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55328507" /></Metadata><TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Macht Methoden und Eigenschaften zur Unterstützung des Benutzeroberflächenautomatisierungs-Clientzugriffs auf Steuerelemente verfügbar, die eine einzelne, nicht mehrdeutige Aktion einleiten oder ausführen und den Zustand bei der Aktivierung nicht beibehalten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementiert ein Benutzeroberflächenautomatisierungs-Anbieter, die unterstützen, muss die <xref:System.Windows.Automation.InvokePattern> Steuerelementmuster.  
  
 Steuerelemente implementieren <xref:System.Windows.Automation.Provider.IInvokeProvider> , wenn das gleiche Verhalten nicht durch einen anderen Steuerelementmuster-Anbieter verfügbar gemacht wird. Wenn die <xref:System.Windows.Automation.InvokePattern.Invoke%2A> -Methode eines Steuerelements beispielsweise dieselbe Aktion wie die <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> - oder die <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> -Methode ausführt, darf <xref:System.Windows.Automation.Provider.IInvokeProvider>nicht für das Steuerelement implementiert werden.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md">Übersicht über Steuerelementmuster für Benutzeroberflächenautomatisierung</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Implementierung eines serverseitigen Benutzeroberflächenautomatisierungs-Anbieter</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3584c0a1-9cd0-4968-8b63-b06390890ef6">Implementierung eines clientseitigen Benutzeroberflächenautomatisierungs-Anbieter</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0d635c35-ffa8-4dc8-bbc9-12fcd5445776">Unterstützung von Steuerelementmustern in einem Benutzeroberflächenautomatisierungs-Anbieter</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e5b1e239-49f8-468e-bfec-1fba02ec9ac4">Implementieren des Invoke-Steuerelementmusters der Benutzeroberflächenautomatisierung</related>
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sendet eine Anforderung zum Aktivieren eines Steuerelements und Initiieren seiner einzelnen eindeutigen Aktion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> ist ein asynchroner Aufruf und muss die Kontrolle sofort zurückgeben, ohne zu blockieren.  
  
> [!NOTE]
>  Dieses Verhalten ist insbesondere für Steuerelemente wichtig, die direkt oder indirekt ein modales Dialogfeld starten, wenn sie aufgerufen werden. Jeder Benutzeroberflächenautomatisierungs-Client, der das Ereignis ausgelöst hat, bleibt blockiert, bis das modale Dialogfeld geschlossen wird.  
  
 Durch <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> wird das <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>-Ereignis ausgelöst. Wenn möglich, sollte das Ereignis ausgelöst werden, nachdem das Steuerelement seine zugeordnete Aktion abgeschlossen wurde.  
  
 <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> ausgelöst werden soll, bevor die Wartung der <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> Anforderung in den folgenden Szenarien:  
  
-   Es ist nicht möglich oder zweckmäßig, bis zum Abschluss der Aktion zu warten.  
  
-   Die Aktion erfordert eine Benutzeraktion.  
  
-   Die Aktion ist zeitaufwändig und führt dazu, dass den aufrufenden Client für eine längere Zeit blockiert werden.  
  
   
  
## Examples  
 Das folgende Beispiel implementiert die <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> Methode für das MouseDown-Ereignishandler eines Steuerelements. Vorausgesetzt, dass `providerControl` wird eine Membervariable, die bei der Erstellung der Klassen wurde initialisiert.  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Wenn das Steuerelement nicht aktiviert ist.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e5b1e239-49f8-468e-bfec-1fba02ec9ac4">Implementieren des Invoke-Steuerelementmusters der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
  </Members>
</Type>
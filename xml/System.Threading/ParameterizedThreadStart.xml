<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6367040f3868461a31ceec837781de60b418c2f6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48762351" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="9c6a6-101">Ein Objekt, das Daten für die Threadprozedur enthält.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="9c6a6-102">Stellt die Methode dar, die in einem <see cref="T:System.Threading.Thread" /> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c6a6-103">Wenn ein verwalteter Thread erstellt wird, wird die Methode, die auf dem Thread ausgeführt wird. durch dargestellt:</span><span class="sxs-lookup"><span data-stu-id="9c6a6-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="9c6a6-104">Ein <xref:System.Threading.ThreadStart> Delegat, der an die <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="9c6a6-105">Jede Methode, die über keine Parameter verfügt und dabei `void` in c# oder eine `Sub` Prozedur in Visual Basic kann der Delegat darstellen.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="9c6a6-106">Ein <xref:System.Threading.ParameterizedThreadStart> Delegat, der an die <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="9c6a6-107">Jede Methode, die einen einzelnen vom Typ Parameter <xref:System.Object> und, in c# "void" zurückgibt, oder dass eine Subprozedur in Visual Basic kann der Delegat darstellen.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="9c6a6-108">Der Thread beginnt nicht ausgeführt werden, bis die <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="9c6a6-109">Die <xref:System.Threading.ThreadStart> oder <xref:System.Threading.ParameterizedThreadStart> Delegat wird aufgerufen, für den Thread, und die Ausführung beginnt, in der ersten Zeile der durch den Delegaten dargestellte Methode.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="9c6a6-110">Im Fall von der <xref:System.Threading.ParameterizedThreadStart> zu delegieren, das Objekt, das an die <xref:System.Threading.Thread.Start%28System.Object%29> Methode an den Delegaten übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9c6a6-111">Visual Basic und C#-Benutzer können Auslassen der <xref:System.Threading.ThreadStart> oder <xref:System.Threading.ParameterizedThreadStart> Konstruktor beim Erstellen eines Threads.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="9c6a6-112">Verwenden Sie in Visual Basic die `AddressOf` Operator beim Übergeben der Methode, um die <xref:System.Threading.Thread.%23ctor%2A> Konstruktor, z. B. `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="9c6a6-113">Geben Sie einfach den Namen der Threadprozedur, in c#.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="9c6a6-114">Der Compiler wählt die richtige Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9c6a6-115">Bei der Erstellung einer <xref:System.Threading.ParameterizedThreadStart> Delegat für eine Instanzmethode in C++ ist der erste Parameter des Konstruktors die Instanzvariable ist.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="9c6a6-116">Für eine statische Methode ist der erste Parameter des Konstruktors 0 (null).</span><span class="sxs-lookup"><span data-stu-id="9c6a6-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="9c6a6-117">Für eine statische Methode, erfordert der Konstruktor nur einen Parameter: die Adresse der Rückrufmethode darstellt, mit dem Klassennamen qualifiziert.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="9c6a6-118">Die <xref:System.Threading.ParameterizedThreadStart> delegieren und <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> methodenüberladung erleichtern Ihnen die Daten an eine Threadprozedur zu übergeben, aber dieses Verfahren ist nicht typsicher, da jedes Objekt übergeben werden kann <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9c6a6-119">Eine stabilere Möglichkeit, Daten an eine Threadprozedur übergeben werden sowohl die Threadprozedur und die Datenfelder in einer Worker-Objekt eingefügt.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="9c6a6-120">Weitere Informationen finden Sie unter [Erstellen von Threads und übergeben von Daten zur Startzeit](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="9c6a6-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="9c6a6-121">Die <xref:System.Threading.ParameterizedThreadStart> Delegat unterstützt nur einen einzigen Parameter.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="9c6a6-122">Sie können mehrere Datenelemente zu übergeben, die <xref:System.Threading.ParameterizedThreadStart> dazu, eine der folgenden Parameter:</span><span class="sxs-lookup"><span data-stu-id="9c6a6-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="9c6a6-123">Ein Array.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-123">An array.</span></span>  
  
-   <span data-ttu-id="9c6a6-124">Einen Auflistungstyp, wenn alle Datenelemente vom gleichen Typ sind.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="9c6a6-125">Geben Sie ein Tupel, z. B. <xref:System.Tuple%602> oder <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c6a6-126">Im folgenden Codebeispiel wird eine <xref:System.Threading.ParameterizedThreadStart> Delegat eine statische Methode und eine Instanzmethode ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="9c6a6-127">Die erste <xref:System.Threading.ParameterizedThreadStart> Delegat wird dargestellt, von der statischen `DoWork` -Methode und die zweite ist von der Instanz dargestellte `DoMoreWork` Methode.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="9c6a6-128">Beide Methoden entsprechen den <xref:System.Threading.ParameterizedThreadStart> Delegatsignatur; das heißt, sie haben einen einzelnen Parameter vom Typ <xref:System.Object> und keinen Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9c6a6-129">Ableiten von der Visual Basic- und C#-Compiler die <xref:System.Threading.ParameterizedThreadStart> delegieren, die von den Signaturen der `DoWork` und `DoMoreWork` Methoden, und rufen Sie den korrekten Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="9c6a6-130">Daher besteht keine expliziten Konstruktoraufruf im Code.</span><span class="sxs-lookup"><span data-stu-id="9c6a6-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="9c6a6-131">Erstellen von Threads</span><span class="sxs-lookup"><span data-stu-id="9c6a6-131">Creating Threads</span></span></related>
  </Docs>
</Type>
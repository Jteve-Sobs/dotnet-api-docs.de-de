<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="46773-101">Ein Objekt, das Daten für die Threadprozedur enthält.</span><span class="sxs-lookup"><span data-stu-id="46773-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="46773-102">Stellt die Methode dar, die in einem <see cref="T:System.Threading.Thread" /> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="46773-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46773-103">Wenn ein verwalteter Thread erstellt wird, wird durch die Methode, die auf dem Thread ausgeführt wird dargestellt:</span><span class="sxs-lookup"><span data-stu-id="46773-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="46773-104">Ein <xref:System.Threading.ThreadStart> Delegat, der an die <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="46773-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="46773-105">Jede Methode, die über keine Parameter verfügt und zurückgibt `void` in c# oder einer `Sub` Prozedur in Visual Basic kann der Delegat darstellen.</span><span class="sxs-lookup"><span data-stu-id="46773-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="46773-106">Ein <xref:System.Threading.ParameterizedThreadStart> Delegat, der an die <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="46773-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="46773-107">Jede Methode, die einen einzelnen vom Typ Parameter <xref:System.Object> und gibt "void" in C#- oder ist eine Subprozedur in Visual Basic kann der Delegat darstellen.</span><span class="sxs-lookup"><span data-stu-id="46773-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="46773-108">Der Thread beginnt nicht ausgeführt werden, bis die <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> -Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="46773-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="46773-109">Die <xref:System.Threading.ThreadStart> oder <xref:System.Threading.ParameterizedThreadStart> Delegaten für den Thread aufgerufen wird, und die Ausführung beginnt, in der ersten Zeile der Methode, die durch den Delegaten dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="46773-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="46773-110">Im Fall von der <xref:System.Threading.ParameterizedThreadStart> zu delegieren, das Objekt, das an die <xref:System.Threading.Thread.Start%28System.Object%29> Methode an den Delegaten übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="46773-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46773-111">Visual Basic- und C#-Benutzer können Auslassen der <xref:System.Threading.ThreadStart> oder <xref:System.Threading.ParameterizedThreadStart> Delegatkonstruktor beim Erstellen eines Threads.</span><span class="sxs-lookup"><span data-stu-id="46773-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="46773-112">In Visual Basic verwenden die `AddressOf` Operator beim Ihrer Methode zum Übergeben der <xref:System.Threading.Thread.%23ctor%2A> Konstruktor, z. B. `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="46773-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="46773-113">Geben Sie in c# ist einfach der Name der Threadprozedur an.</span><span class="sxs-lookup"><span data-stu-id="46773-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="46773-114">Der Compiler wählt den richtigen Delegatkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="46773-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46773-115">Beim Erstellen einer <xref:System.Threading.ParameterizedThreadStart> delegieren für eine Instanzmethode in C++ wird der erste Parameter des Konstruktors die Instanzvariable ist.</span><span class="sxs-lookup"><span data-stu-id="46773-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="46773-116">Bei einer statischen Methode ist der erste Parameter des Konstruktors 0 (null).</span><span class="sxs-lookup"><span data-stu-id="46773-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="46773-117">Bei einer statischen Methode Delegatkonstruktors erfordert nur einen Parameter: die Adresse der Rückrufmethode darstellt, durch den Klassennamen qualifiziert.</span><span class="sxs-lookup"><span data-stu-id="46773-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="46773-118">Die <xref:System.Threading.ParameterizedThreadStart> delegieren und <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> methodenüberladung erleichtern die Daten an eine Threadprozedur übergeben, aber diese Technik ist nicht typsicher, da jedes Objekt übergeben werden kann <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="46773-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="46773-119">Eine robustere Möglichkeit, Daten an eine Threadprozedur übergeben wird, die Threadprozedur und Datenfelder zu einem Worker-Objekt eingefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="46773-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="46773-120">Weitere Informationen finden Sie unter [Threads erstellen und übergeben von Daten zur Startzeit](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="46773-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="46773-121">Die <xref:System.Threading.ParameterizedThreadStart> Delegat unterstützt nur einen einzelnen Parameter.</span><span class="sxs-lookup"><span data-stu-id="46773-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="46773-122">Sie können mehrere Datenelemente zum Übergeben der <xref:System.Threading.ParameterizedThreadStart> , indem Sie diesen Parameter an eines der folgenden machen:</span><span class="sxs-lookup"><span data-stu-id="46773-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="46773-123">Ein Array.</span><span class="sxs-lookup"><span data-stu-id="46773-123">An array.</span></span>  
  
-   <span data-ttu-id="46773-124">Eine Auflistungstyp, wenn alle angegebenen Datenelemente desselben Typs sind.</span><span class="sxs-lookup"><span data-stu-id="46773-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="46773-125">Geben Sie ein Tupel, z. B. <xref:System.Tuple%602> oder <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="46773-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46773-126">Im folgenden Codebeispiel wird mit einem <xref:System.Threading.ParameterizedThreadStart> Delegaten zum Ausführen einer statischen Methode und eine Instanzenmethode.</span><span class="sxs-lookup"><span data-stu-id="46773-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="46773-127">Die erste <xref:System.Threading.ParameterizedThreadStart> Delegat wird dargestellt, von der statischen `DoWork` -Methode und die zweite wird dargestellt, von der Instanz `DoMoreWork` Methode.</span><span class="sxs-lookup"><span data-stu-id="46773-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="46773-128">Beide Methoden entsprechen den <xref:System.Threading.ParameterizedThreadStart> Delegatsignatur; das heißt, sie haben einen einzelnen Parameter vom Typ <xref:System.Object> und keinen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="46773-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46773-129">Die Visual Basic- und C#-Compiler Ableiten der <xref:System.Threading.ParameterizedThreadStart> Delegieren von den Signaturen der `DoWork` und `DoMoreWork` Methoden, und rufen Sie den richtigen Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="46773-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="46773-130">Daher ist keine expliziten Konstruktoraufruf im Code.</span><span class="sxs-lookup"><span data-stu-id="46773-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>
<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c39d73aba14d7928eba9f731d9d1148c91b7ff76" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86667643" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="eb153-101">Ein Objekt, das Daten für die Threadprozedur enthält.</span><span class="sxs-lookup"><span data-stu-id="eb153-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="eb153-102">Stellt die Methode dar, die in einem <see cref="T:System.Threading.Thread" /> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="eb153-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb153-103">Wenn ein verwalteter Thread erstellt wird, wird die-Methode, die auf dem Thread ausgeführt wird, durch Folgendes dargestellt:</span><span class="sxs-lookup"><span data-stu-id="eb153-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="eb153-104">Ein Delegat <xref:System.Threading.ThreadStart> , der an den- <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> Konstruktor übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="eb153-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="eb153-105">Jede Methode, die keine Parameter hat und `void` in c# zurückgibt oder eine `Sub` Prozedur in Visual Basic ist, kann den Delegaten darstellen.</span><span class="sxs-lookup"><span data-stu-id="eb153-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="eb153-106">Ein Delegat <xref:System.Threading.ParameterizedThreadStart> , der an den- <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> Konstruktor übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="eb153-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="eb153-107">Jede Methode, die über einen einzelnen Parameter vom Typ verfügt <xref:System.Object> und in c# "void" oder eine unter Prozedur in Visual Basic zurückgibt, kann den Delegaten darstellen.</span><span class="sxs-lookup"><span data-stu-id="eb153-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="eb153-108">Der Thread beginnt erst mit der Ausführung, wenn die- <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="eb153-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="eb153-109">Der <xref:System.Threading.ThreadStart> -oder der <xref:System.Threading.ParameterizedThreadStart> -Delegat wird für den Thread aufgerufen, und die Ausführung beginnt in der ersten Zeile der Methode, die durch den-Delegaten dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="eb153-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="eb153-110">Im Fall des-Delegaten <xref:System.Threading.ParameterizedThreadStart> wird das-Objekt, das an die-Methode übermittelt wird, an den-Delegaten <xref:System.Threading.Thread.Start%28System.Object%29> übermittelt.</span><span class="sxs-lookup"><span data-stu-id="eb153-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb153-111">Visual Basic-und c#-Benutzer können den-oder-Delegatkonstruktor weglassen, <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> Wenn ein Thread erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="eb153-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="eb153-112">Verwenden Sie in Visual Basic den- `AddressOf` Operator, wenn Sie die Methode an den- <xref:System.Threading.Thread.%23ctor%2A> Konstruktor übergeben, z. b `Dim t As New Thread(AddressOf ThreadProc)` ..</span><span class="sxs-lookup"><span data-stu-id="eb153-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="eb153-113">Geben Sie in c# einfach den Namen der Thread Prozedur an.</span><span class="sxs-lookup"><span data-stu-id="eb153-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="eb153-114">Der Compiler wählt den korrekten Delegatkonstruktor aus.</span><span class="sxs-lookup"><span data-stu-id="eb153-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb153-115">Wenn Sie in C++ einen Delegaten <xref:System.Threading.ParameterizedThreadStart> für eine Instanzmethode erstellen, ist der erste Parameter des Konstruktors die Instanzvariable.</span><span class="sxs-lookup"><span data-stu-id="eb153-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="eb153-116">Bei einer statischen Methode ist der erste Parameter des Konstruktors 0 (null).</span><span class="sxs-lookup"><span data-stu-id="eb153-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="eb153-117">Für eine statische Methode benötigt der Delegatkonstruktor nur einen Parameter: die Adresse der Rückruf Methode, die durch den Klassennamen qualifiziert ist.</span><span class="sxs-lookup"><span data-stu-id="eb153-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="eb153-118">Der <xref:System.Threading.ParameterizedThreadStart> -Delegat und die- <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> Methoden Überladung vereinfachen das Übergeben von Daten an eine Thread Prozedur, diese Technik ist jedoch nicht typsicher, da jedes Objekt an übergeben werden kann <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="eb153-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="eb153-119">Eine stabilere Methode zum Übergeben von Daten an eine Thread Prozedur besteht darin, die Thread Prozedur und die Datenfelder in ein Workerobjekt einzufügen.</span><span class="sxs-lookup"><span data-stu-id="eb153-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="eb153-120">Weitere Informationen finden Sie [unter Erstellen von Threads und übergeben von Daten zur Startzeit](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time).</span><span class="sxs-lookup"><span data-stu-id="eb153-120">For more information, see [Creating Threads and Passing Data at Start Time](/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time).</span></span>  
  
 <span data-ttu-id="eb153-121">Der Delegat <xref:System.Threading.ParameterizedThreadStart> unterstützt nur einen einzelnen Parameter.</span><span class="sxs-lookup"><span data-stu-id="eb153-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="eb153-122">Sie können mehrere Datenelemente an den übergeben, indem Sie für <xref:System.Threading.ParameterizedThreadStart> diesen Parameter einen der folgenden Parameter festlegen:</span><span class="sxs-lookup"><span data-stu-id="eb153-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="eb153-123">Ein -Array.</span><span class="sxs-lookup"><span data-stu-id="eb153-123">An array.</span></span>  
  
-   <span data-ttu-id="eb153-124">Ein Auflistungstyp, wenn alle Datenelemente denselben Typ haben.</span><span class="sxs-lookup"><span data-stu-id="eb153-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="eb153-125">Ein tupeltyp, z <xref:System.Tuple%602> . b <xref:System.Tuple%604> . oder.</span><span class="sxs-lookup"><span data-stu-id="eb153-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb153-126">Im folgenden Codebeispiel wird ein-Delegat verwendet <xref:System.Threading.ParameterizedThreadStart> , um eine statische Methode und eine Instanzmethode auszuführen.</span><span class="sxs-lookup"><span data-stu-id="eb153-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="eb153-127">Der erste Delegat <xref:System.Threading.ParameterizedThreadStart> wird durch die statische `DoWork` -Methode dargestellt, und die zweite wird durch die- `DoMoreWork` Instanzmethode dargestellt.</span><span class="sxs-lookup"><span data-stu-id="eb153-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="eb153-128">Beide Methoden stimmen mit der Signatur des Delegaten, d <xref:System.Threading.ParameterizedThreadStart> . h., Sie verfügen über einen einzelnen Parameter vom Typ <xref:System.Object> und geben keinen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="eb153-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eb153-129">Der Visual Basic-und c#-Compiler leitet den Delegaten <xref:System.Threading.ParameterizedThreadStart> aus den Signaturen der `DoWork` -Methode und der- `DoMoreWork` Methode ab und ruft den korrekten Konstruktor auf.</span><span class="sxs-lookup"><span data-stu-id="eb153-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="eb153-130">Folglich gibt es keinen expliziten Konstruktoraufrufe im Code.</span><span class="sxs-lookup"><span data-stu-id="eb153-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="/dotnet/standard/threading/creating-threads-and-passing-data-at-start-time"><span data-ttu-id="eb153-131">Erstellen von Threads</span><span class="sxs-lookup"><span data-stu-id="eb153-131">Creating Threads</span></span></related>
  </Docs>
</Type>

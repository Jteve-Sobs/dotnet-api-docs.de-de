<Type Name="SpinWait" FullName="System.Threading.SpinWait">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f51a6e678e820a517459a0a04d0523ea0ebc428d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75115655" /></Metadata><TypeSignature Language="C#" Value="public struct SpinWait" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinWait extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinWait" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinWait" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinWait" />
  <TypeSignature Language="F#" Value="type SpinWait = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="32891-101">Stellt Unterstützung für Spin-basierte Wartevorgänge bereit.</span><span class="sxs-lookup"><span data-stu-id="32891-101">Provides support for spin-based waiting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32891-102"><xref:System.Threading.SpinWait> kapselt gängige spinlogik ein.</span><span class="sxs-lookup"><span data-stu-id="32891-102"><xref:System.Threading.SpinWait> encapsulates common spinning logic.</span></span> <span data-ttu-id="32891-103">Auf Computern mit nur einem Prozessor werden die Ergebnisse immer anstelle von ausgelasteten warte Vorgängen verwendet, und auf Computern mit Intel-Prozessoren, die Hyperthreadingtechnologie verwenden, hilft es, den Hardware Thread Hunger zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="32891-103">On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation.</span></span> <span data-ttu-id="32891-104">SpinWait kapselt eine gute Mischung aus spinzeiten und echten Ergebnisse.</span><span class="sxs-lookup"><span data-stu-id="32891-104">SpinWait encapsulates a good mixture of spinning and true yielding.</span></span>  
  
 <span data-ttu-id="32891-105"><xref:System.Threading.SpinWait> ist ein Werttyp. Dies bedeutet, dass auf Low-Level-Code SpinWait verwendet werden kann, ohne dass unnötige Zuweisungs Übersichten zu befürchten sind.</span><span class="sxs-lookup"><span data-stu-id="32891-105"><xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads.</span></span> <span data-ttu-id="32891-106">SpinWait ist in der Regel nicht für normale Anwendungen nützlich.</span><span class="sxs-lookup"><span data-stu-id="32891-106">SpinWait is not generally useful for ordinary applications.</span></span> <span data-ttu-id="32891-107">In den meisten Fällen sollten Sie die Synchronisierungs Klassen verwenden, die vom .NET Framework bereitgestellt werden, z. b. <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="32891-107">In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>.</span></span> <span data-ttu-id="32891-108">In den meisten Fällen, in denen das warten auf die Warteschlange erforderlich ist, sollte der <xref:System.Threading.SpinWait> Typ gegenüber der <xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> Methode bevorzugt werden.</span><span class="sxs-lookup"><span data-stu-id="32891-108">For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="32891-109">Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Threading.SpinWait>verwendet wird:</span><span class="sxs-lookup"><span data-stu-id="32891-109">The following example shows how to use a <xref:System.Threading.SpinWait>:</span></span>  
  
 [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]
 [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="32891-110">Obwohl <see cref="T:System.Threading.SpinWait" /> für die Verwendung in gleichzeitigen Anwendungen konzipiert ist, ist es nicht für die gleichzeitige Verwendung aus mehreren Threads konzipiert.</span><span class="sxs-lookup"><span data-stu-id="32891-110">While <see cref="T:System.Threading.SpinWait" /> is designed to be used in concurrent applications, it is not designed to be used from multiple threads concurrently.</span></span> <span data-ttu-id="32891-111"><see cref="T:System.Threading.SpinWait" /> Elemente sind nicht Thread sicher.</span><span class="sxs-lookup"><span data-stu-id="32891-111"><see cref="T:System.Threading.SpinWait" /> members are not thread-safe.</span></span> <span data-ttu-id="32891-112">Wenn mehrere Threads gedreht werden müssen, sollte jeweils eine eigene Instanz von <see cref="T:System.Threading.SpinWait" />verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="32891-112">If multiple threads must spin, each should use its own instance of <see cref="T:System.Threading.SpinWait" />.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/spinwait.md"><span data-ttu-id="32891-113">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-113">SpinWait</span></span></related>
    <related type="Article" href="~/docs/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation.md"><span data-ttu-id="32891-114">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-114">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Threading.SpinWait.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="32891-115">Ruft die Anzahl von <see cref="M:System.Threading.SpinWait.SpinOnce" />-Aufrufen für diese Instanz ab.</span><span class="sxs-lookup"><span data-stu-id="32891-115">Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span></span></summary>
        <value><span data-ttu-id="32891-116">Gibt eine ganze Zahl zurück, die angibt, wie häufig <see cref="M:System.Threading.SpinWait.SpinOnce" /> für diese Instanz aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="32891-116">Returns an integer that represents the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-117">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-117">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-118">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-118">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NextSpinWillYield">
      <MemberSignature Language="C#" Value="public bool NextSpinWillYield { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NextSpinWillYield" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.NextSpinWillYield" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSpinWillYield As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NextSpinWillYield { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSpinWillYield : bool" Usage="System.Threading.SpinWait.NextSpinWillYield" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="32891-119">Ruft einen Wert ab, der angibt, ob der nächste Aufruf von <see cref="M:System.Threading.SpinWait.SpinOnce" /> den Prozessor ergibt und einen erzwungenen Kontextwechsel auslöst.</span><span class="sxs-lookup"><span data-stu-id="32891-119">Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span></span></summary>
        <value><span data-ttu-id="32891-120">Gibt an, ob der nächste Aufruf von <see cref="M:System.Threading.SpinWait.SpinOnce" /> den Prozessor ergibt und einen erzwungenen Kontextwechsel auslöst.</span><span class="sxs-lookup"><span data-stu-id="32891-120">Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32891-121">Auf einem Computer mit einer einzelnen CPU ergibt <xref:System.Threading.SpinWait.SpinOnce%2A> immer den Prozessor.</span><span class="sxs-lookup"><span data-stu-id="32891-121">On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor.</span></span> <span data-ttu-id="32891-122">Auf Computern mit mehreren CPUs kann <xref:System.Threading.SpinWait.SpinOnce%2A> nach einer nicht angegebenen Anzahl von Aufrufen ergeben.</span><span class="sxs-lookup"><span data-stu-id="32891-122">On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-123">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-123">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-124">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-124">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="spinWait.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="32891-125">Setzt die Spin-Anzahl zurück.</span><span class="sxs-lookup"><span data-stu-id="32891-125">Resets the spin counter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32891-126">Dadurch wird <xref:System.Threading.SpinWait.SpinOnce%2A> und <xref:System.Threading.SpinWait.NextSpinWillYield%2A> Verhalten sich so, als ob für diese Instanz keine Aufrufe von <xref:System.Threading.SpinWait.SpinOnce%2A> ausgegeben wurden.</span><span class="sxs-lookup"><span data-stu-id="32891-126">This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance.</span></span> <span data-ttu-id="32891-127">Wenn eine <xref:System.Threading.SpinWait> Instanz mehrmals wieder verwendet wird, ist es möglicherweise hilfreich, Sie zurückzusetzen, um eine zu baldige Bereitstellung zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="32891-127">If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="32891-128">Im folgenden finden Sie ein Beispiel für die Verwendung von SpinWait in einer einfachen sperrenlosen Stapel Implementierung.</span><span class="sxs-lookup"><span data-stu-id="32891-128">The following is an example of using SpinWait in a simple lock-free stack implementation.</span></span> <span data-ttu-id="32891-129">(Dies ist nur ein Beispiel.</span><span class="sxs-lookup"><span data-stu-id="32891-129">(This is just an example.</span></span> <span data-ttu-id="32891-130">Wenn ein effizienter, Thread sicherer Stapel erforderlich ist, sollten Sie die Verwendung von ConcurrentStack in Erwägung ziehen.)</span><span class="sxs-lookup"><span data-stu-id="32891-130">If an efficient, thread-safe stack is needed, consider using ConcurrentStack.)</span></span>  
  
 [!code-csharp[System.Threading.SpinWait.Reset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/reset.cs#01)]
 [!code-vb[System.Threading.SpinWait.Reset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/reset.vb#01)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-131">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-131">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-132">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-132">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce();" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : unit -&gt; unit" Usage="spinWait.SpinOnce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="32891-133">Führt einen Spin-Vorgang aus.</span><span class="sxs-lookup"><span data-stu-id="32891-133">Performs a single spin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32891-134">Diese Methode wird in der Regel in einer-Schleife aufgerufen und kann sich im Verhalten ändern, je nachdem, wie oft <xref:System.Threading.SpinWait.SpinOnce%2A> für diese Instanz bisher aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="32891-134">This method is typically called in a loop and may change in behavior based on the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> has been called so far on this instance.</span></span> <span data-ttu-id="32891-135">Jede Drehung führt dazu, dass die <xref:System.Threading.Thread.SpinWait%2A>-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="32891-135">Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called.</span></span> <span data-ttu-id="32891-136">Eine Anzahl wird so oft aufbewahrt, wie oft <xref:System.Threading.SpinWait.SpinOnce%2A> aufgerufen wird. Nachdem eine Schwellenwert Anzahl erreicht wurde, wird die <xref:System.Threading.Thread.Yield%2A>-Methode aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="32891-136">A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-137">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-137">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-138">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-138">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce (int sleep1Threshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce(int32 sleep1Threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce (sleep1Threshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce(int sleep1Threshold);" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : int -&gt; unit" Usage="spinWait.SpinOnce sleep1Threshold" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sleep1Threshold" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sleep1Threshold"><span data-ttu-id="32891-139">Eine minimale Spinanzahl, nach der <see langword="Thread.Sleep(1)" /> verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="32891-139">A minimum spin count after which <see langword="Thread.Sleep(1)" /> may be used.</span></span> <span data-ttu-id="32891-140">Ein Wert von -1 deaktiviert die Verwendung von <see langword="Thread.Sleep(1)" />.</span><span class="sxs-lookup"><span data-stu-id="32891-140">A value of -1 disables the use of <see langword="Thread.Sleep(1)" />.</span></span></param>
        <summary><span data-ttu-id="32891-141">Führt einen einzelnen Spin durch und ruft <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> nach einer minimalen Spinanzahl auf.</span><span class="sxs-lookup"><span data-stu-id="32891-141">Performs a single spin and calls <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> after a minimum spin count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="32891-142">Diese Methode wird in der Regel in einer-Schleife aufgerufen und kann sich im Verhalten ändern, je nachdem, wie oft <xref:System.Threading.SpinWait.SpinOnce> für diese Instanz bisher aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="32891-142">This method is typically called in a loop and may change in behavior based on the number of times <xref:System.Threading.SpinWait.SpinOnce> has been called so far on this instance.</span></span>

        ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="32891-143"><paramref name="sleep1Threshold" /> ist kleiner als -1.</span><span class="sxs-lookup"><span data-stu-id="32891-143"><paramref name="sleep1Threshold" /> is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpinUntil">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="32891-144">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird.</span><span class="sxs-lookup"><span data-stu-id="32891-144">Spins until the specified condition is satisfied.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-145">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-145">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-146">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-146">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static void SpinUntil (Func&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinUntil(class System.Func`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinUntil (condition As Func(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinUntil(Func&lt;bool&gt; ^ condition);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; -&gt; unit" Usage="System.Threading.SpinWait.SpinUntil condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="32891-147">Ein Delegat, der immer wieder ausgeführt wird, bis true zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="32891-147">A delegate to be executed over and over until it returns true.</span></span></param>
        <summary><span data-ttu-id="32891-148">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird.</span><span class="sxs-lookup"><span data-stu-id="32891-148">Spins until the specified condition is satisfied.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="32891-149">Das <paramref name="condition" />-Argument ist null.</span><span class="sxs-lookup"><span data-stu-id="32891-149">The <paramref name="condition" /> argument is null.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-150">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-150">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-151">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-151">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * int -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="32891-152">Ein Delegat, der immer wieder ausgeführt wird, bis true zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="32891-152">A delegate to be executed over and over until it returns true.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="32891-153">Die Anzahl von Millisekunden, die gewartet wird, oder <see cref="F:System.Threading.Timeout.Infinite" /> (-1) für Warten ohne Timeout.</span><span class="sxs-lookup"><span data-stu-id="32891-153">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="32891-154">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird oder das angegebene Timeout abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="32891-154">Spins until the specified condition is satisfied or until the specified timeout is expired.</span></span></summary>
        <returns><span data-ttu-id="32891-155"><see langword="true" />, wenn die Bedingung innerhalb des Timeouts erfüllt wird, andernfalls FALSE.</span><span class="sxs-lookup"><span data-stu-id="32891-155"><see langword="true" /> if the condition is satisfied within the timeout; otherwise, false</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="32891-156">Das <paramref name="condition" />-Argument ist null.</span><span class="sxs-lookup"><span data-stu-id="32891-156">The <paramref name="condition" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="32891-157"><paramref name="millisecondsTimeout" /> ist eine negative Zahl, jedoch nicht -1, was einen unbeschränkten Timeout darstellt.</span><span class="sxs-lookup"><span data-stu-id="32891-157"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-158">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-158">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-159">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-159">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * TimeSpan -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="32891-160">Ein Delegat, der immer wieder ausgeführt wird, bis true zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="32891-160">A delegate to be executed over and over until it returns true.</span></span></param>
        <param name="timeout"><span data-ttu-id="32891-161">Ein <see cref="T:System.TimeSpan" />, das die Wartezeit in Millisekunden darstellt, oder ein TimeSpan-Wert, der -1 Millisekunden für Warten ohne Timeout darstellt.</span><span class="sxs-lookup"><span data-stu-id="32891-161">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="32891-162">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird oder das angegebene Timeout abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="32891-162">Spins until the specified condition is satisfied or until the specified timeout is expired.</span></span></summary>
        <returns><span data-ttu-id="32891-163"><see langword="true" />, wenn die Bedingung innerhalb des Timeouts erfüllt wird, andernfalls FALSE.</span><span class="sxs-lookup"><span data-stu-id="32891-163"><see langword="true" /> if the condition is satisfied within the timeout; otherwise, false</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="32891-164">Das <paramref name="condition" />-Argument ist null.</span><span class="sxs-lookup"><span data-stu-id="32891-164">The <paramref name="condition" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="32891-165"><paramref name="timeout" /> ist eine negative Zahl ungleich  -1 Millisekunden, die ein unendliches Timeout darstellt, - oder - Timeout ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="32891-165"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="32891-166">SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-166">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="32891-167">Gewusst wie: Implementieren eines Wartevorgangs mit zwei Phasen mit SpinWait</span><span class="sxs-lookup"><span data-stu-id="32891-167">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

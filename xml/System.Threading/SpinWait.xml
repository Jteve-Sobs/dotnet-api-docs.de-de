<Type Name="SpinWait" FullName="System.Threading.SpinWait">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e2e5425f7055155507fb2973f9eabdf58f17784c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528724" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinWait" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinWait extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinWait" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinWait" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinWait" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b0f9b-101">Stellt Unterstützung für Spin-basierte Wartevorgänge bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0f9b-101">Provides support for spin-based waiting.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0f9b-102"><xref:System.Threading.SpinWait> Kapselt die gemeinsame Spinvorgänge Logik.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-102"><xref:System.Threading.SpinWait> encapsulates common spinning logic.</span></span> <span data-ttu-id="b0f9b-103">Auf Computern mit einem Prozessor ergibt immer anstelle ausgelastet Wartevorgänge verwendet werden, und auf Computern mit Intel-Prozessoren mit Hyperthreading-Technologie, um zu verhindern, dass Hardware Threadmangel (Starvation) erleichtert.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-103">On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation.</span></span> <span data-ttu-id="b0f9b-104">SpinWait kapselt eine gute Mischung von Spins und "true" und gibt.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-104">SpinWait encapsulates a good mixture of spinning and true yielding.</span></span>  
  
 <span data-ttu-id="b0f9b-105"><xref:System.Threading.SpinWait> ist ein Werttyp ist, was bedeutet, dass der Code auf niedriger Ebene SpinWait ohne unnötige Zuordnungsaufwand verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-105"><xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads.</span></span> <span data-ttu-id="b0f9b-106">SpinWait eignet sich nicht in der Regel zum normalen Anwendungen.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-106">SpinWait is not generally useful for ordinary applications.</span></span> <span data-ttu-id="b0f9b-107">In den meisten Fällen sollten Sie verwenden, z. B. von .NET Framework bereitgestellten Synchronisierungsklassen <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-107">In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>.</span></span> <span data-ttu-id="b0f9b-108">In den meisten Fällen, in dem Drehfeld wartende jedoch erforderlich ist, die <xref:System.Threading.SpinWait> Typ sollte über bevorzugt werden die <xref:System.Threading.Thread.SpinWait%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-108">For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0f9b-109">Das folgende Beispiel zeigt, wie Sie eine <xref:System.Threading.SpinWait>:</span><span class="sxs-lookup"><span data-stu-id="b0f9b-109">The following example shows how to use a <xref:System.Threading.SpinWait>:</span></span>  
  
 [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]
 [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b0f9b-110">Während <see cref="T:System.Threading.SpinWait" /> ist in gleichzeitigen Anwendungen verwendet werden soll, er ist nicht für eine von mehreren Threads gleichzeitig verwendet werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0f9b-110">While <see cref="T:System.Threading.SpinWait" /> is designed to be used in concurrent applications, it is not designed to be used from multiple threads concurrently.</span>
      </span>
      <span data-ttu-id="b0f9b-111">
        <see cref="T:System.Threading.SpinWait" /> Mitglieder sind nicht threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0f9b-111">
          <see cref="T:System.Threading.SpinWait" /> members are not thread-safe.</span>
      </span>
      <span data-ttu-id="b0f9b-112">Wenn mehrere Threads Spins erforderlich sind, sollte jeder eine eigene Instanz des verwenden <see cref="T:System.Threading.SpinWait" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0f9b-112">If multiple threads must spin, each should use its own instance of <see cref="T:System.Threading.SpinWait" />.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0f9b-113">Ruft die Anzahl von <see cref="M:System.Threading.SpinWait.SpinOnce" />-Aufrufen für diese Instanz ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-113">Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0f9b-114">Gibt eine ganze Zahl zurück, die angibt, wie häufig <see cref="M:System.Threading.SpinWait.SpinOnce" /> für diese Instanz aufgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-114">Returns an integer that represents the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSpinWillYield">
      <MemberSignature Language="C#" Value="public bool NextSpinWillYield { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NextSpinWillYield" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.NextSpinWillYield" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSpinWillYield As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NextSpinWillYield { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0f9b-115">Ruft einen Wert ab, der angibt, ob der nächste Aufruf von <see cref="M:System.Threading.SpinWait.SpinOnce" /> den Prozessor ergibt und einen erzwungenen Kontextwechsel auslöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-115">Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0f9b-116">Gibt an, ob der nächste Aufruf von <see cref="M:System.Threading.SpinWait.SpinOnce" /> den Prozessor ergibt und einen erzwungenen Kontextwechsel auslöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-116">Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0f9b-117">Auf einem Computer mit einer CPU <xref:System.Threading.SpinWait.SpinOnce%2A> ergibt immer den Prozessor.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-117">On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor.</span></span> <span data-ttu-id="b0f9b-118">Auf Computern mit mehreren CPUs <xref:System.Threading.SpinWait.SpinOnce%2A> möglicherweise ergeben, nach der eine nicht definierte Anzahl von aufrufen.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-118">On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0f9b-119">Setzt die Spin-Anzahl zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-119">Resets the spin counter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0f9b-120">Auf diese Weise <xref:System.Threading.SpinWait.SpinOnce%2A> und <xref:System.Threading.SpinWait.NextSpinWillYield%2A> verhält, als wäre keine Aufrufe <xref:System.Threading.SpinWait.SpinOnce%2A> hatten in dieser Instanz ausgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-120">This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance.</span></span> <span data-ttu-id="b0f9b-121">Wenn eine <xref:System.Threading.SpinWait> Instanz wird oft wiederverwendet, es kann hilfreich sein, um zu vermeiden, was zu früh zurückgesetzt.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-121">If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0f9b-122">Im folgenden ist ein Beispiel der Verwendung von SpinWait in einer einfachen sperrenfreien Stapel-Implementierung.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-122">The following is an example of using SpinWait in a simple lock-free stack implementation.</span></span> <span data-ttu-id="b0f9b-123">(Dies ist nur ein Beispiel.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-123">(This is just an example.</span></span> <span data-ttu-id="b0f9b-124">Wenn ein effiziente, threadsicheren Stapel benötigt wird, empfiehlt es sich mit ConcurrentStack.)</span><span class="sxs-lookup"><span data-stu-id="b0f9b-124">If an efficient, thread-safe stack is needed, consider using ConcurrentStack.)</span></span>  
  
 `// C#`  
  
 `public class LockFreeStack<T>`  
  
 `{`  
  
 `private volatile Node m_head;`  
  
 `private class Node { public Node Next; public T Value; }`  
  
 `public void Push(T item)`  
  
 `{`  
  
 `var spin = new SpinWait();`  
  
 `Node node = new Node { Value = item }, head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `node.Next = head;`  
  
 `if (Interlocked.CompareExchange(ref m_head, node, head) == head) break;`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `public bool TryPop(out T result)`  
  
 `{`  
  
 `result = default(T);`  
  
 `var spin = new SpinWait();`  
  
 `Node head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `if (head == null) return false;`  
  
 `if (Interlocked.CompareExchange(ref m_head, head.Next, head) == head)`  
  
 `{`  
  
 `result = head.Value;`  
  
 `return true;`  
  
 `}`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `}`  
  
 `' Visual Basic`  
  
 `Public Class LockFreeStack(Of T)`  
  
 `Private m_head As Node`  
  
 `Private Class Node`  
  
 `Public [Next] As Node`  
  
 `Public Value As T`  
  
 `End Class`  
  
 `Public Sub Push(ByVal item As T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node, node As New Node With {.Value = item}`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `node.Next = head`  
  
 `If Interlocked.CompareExchange(m_head, node, head) Is head Then Exit While`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Sub`  
  
 `Public Function TryPop(ByRef result As T) As Boolean`  
  
 `result = CType(Nothing, T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `If head Is Nothing Then Return False`  
  
 `If Interlocked.CompareExchange(m_head, head.Next, head) Is head Then`  
  
 `result = head.Value`  
  
 `Return True`  
  
 `End If`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Function`  
  
 `End Class`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0f9b-125">Führt einen Spin-Vorgang aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-125">Performs a single spin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0f9b-126">Dies ist in der Regel in einer Schleife aufgerufen und basierend auf der Anzahl der Male Verhalten ändert sich möglicherweise eine <xref:System.Threading.SpinWait.SpinOnce%2A> bisher für diese Instanz aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-126">This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance.</span></span> <span data-ttu-id="b0f9b-127">Jede Drehfeld führt die <xref:System.Threading.Thread.SpinWait%2A> aufgerufenen Methode.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-127">Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called.</span></span> <span data-ttu-id="b0f9b-128">Anzahl ist die Anzahl der Male beibehalten <xref:System.Threading.SpinWait.SpinOnce%2A> aufgerufen wird, und nach der Anzahl Schwellenwert erreicht wird, die <xref:System.Threading.Thread.Yield%2A> -Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="b0f9b-128">A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpinUntil">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0f9b-129">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-129">Spins until the specified condition is satisfied.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static void SpinUntil (Func&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinUntil(class System.Func`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinUntil (condition As Func(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinUntil(Func&lt;bool&gt; ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="b0f9b-130">Ein Delegat, der immer wieder ausgeführt wird, bis true zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-130">A delegate to be executed over and over until it returns true.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0f9b-131">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-131">Spins until the specified condition is satisfied.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0f9b-132">Das <paramref name="condition" />-Argument ist null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-132">The <paramref name="condition" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="b0f9b-133">Ein Delegat, der immer wieder ausgeführt wird, bis true zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-133">A delegate to be executed over and over until it returns true.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="b0f9b-134">Die Anzahl von Millisekunden, die gewartet wird, oder <see cref="F:System.Threading.Timeout.Infinite" /> (-1) für Warten ohne Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-134">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0f9b-135">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird oder das angegebene Timeout abgelaufen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-135">Spins until the specified condition is satisfied or until the specified timeout is expired.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0f9b-136">True, wenn die Bedingung innerhalb des Timeouts erfüllt wird, andernfalls false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-136">True if the condition is satisfied within the timeout; otherwise, false</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0f9b-137">Das <paramref name="condition" />-Argument ist null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-137">The <paramref name="condition" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0f9b-138">
            <paramref name="millisecondsTimeout" /> ist eine negative Zahl, jedoch nicht -1, was einen unbeschränkten Timeout darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-138">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="b0f9b-139">Ein Delegat, der immer wieder ausgeführt wird, bis true zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-139">A delegate to be executed over and over until it returns true.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="b0f9b-140">Ein <see cref="T:System.TimeSpan" />, das die Wartezeit in Millisekunden darstellt, oder ein TimeSpan-Wert, der -1 Millisekunden für Warten ohne Timeout darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-140">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0f9b-141">Führt Spin-Vorgänge aus, bis die angegebene Bedingung erfüllt wird oder das angegebene Timeout abgelaufen ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-141">Spins until the specified condition is satisfied or until the specified timeout is expired.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0f9b-142">True, wenn die Bedingung innerhalb des Timeouts erfüllt wird, andernfalls false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-142">True if the condition is satisfied within the timeout; otherwise, false</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0f9b-143">Das <paramref name="condition" />-Argument ist null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-143">The <paramref name="condition" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0f9b-144">
            <paramref name="timeout" /> ist eine negative Zahl ungleich  -1 Millisekunden, die ein unendliches Timeout darstellt, - oder - Timeout ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0f9b-144">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
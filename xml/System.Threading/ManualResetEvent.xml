<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e32c8aef507b37324877d0c593636ad9f7485bb" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52603984" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Benachrichtigt einen oder mehrere wartende Threads über das Eintreten eines Ereignisses. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In .NET Framework, Version 2.0 <xref:System.Threading.ManualResetEvent> leitet sich von der neuen <xref:System.Threading.EventWaitHandle> Klasse. Ein <xref:System.Threading.ManualResetEvent> ist funktionell gleichwertig mit einer <xref:System.Threading.EventWaitHandle> mit erstellt <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Im Gegensatz zu den <xref:System.Threading.ManualResetEvent> -Klasse, die <xref:System.Threading.EventWaitHandle> Klasse bietet Zugriff auf benannte Synchronisierungsereignisse.  
  
 <xref:System.Threading.ManualResetEvent> können Threads durch Signalisieren miteinander kommunizieren. Diese Kommunikation bezieht sich in der Regel auf eine Aufgabe, die einem Thread abgeschlossen werden muss, damit andere Threads fortgesetzt werden können.  
  
 Wenn ein Thread eine Aktivität beginnt, die abgeschlossen werden muss vor anderen Threads fortgesetzt werden, ruft <xref:System.Threading.EventWaitHandle.Reset%2A> einzufügenden `ManualResetEvent` im Zustand "nicht signalisiert". Dieser Thread kann als steuern betrachtet werden die `ManualResetEvent`. Dieser Aufruf Threads <xref:System.Threading.WaitHandle.WaitOne%2A> auf die `ManualResetEvent` blockiert wird, und Warten auf das Signal. Wenn der steuernde Thread die Aktivität abgeschlossen ist, ruft er <xref:System.Threading.EventWaitHandle.Set%2A> zu signalisieren, dass die wartenden Threads fortgesetzt werden können. Alle wartenden Threads freigegeben.  
  
 Nachdem es signalisiert worden ist, `ManualResetEvent` bleibt signalisiert, bis sie manuell zurückgesetzt wird. D. h. Aufrufen von `WaitOne` sofort zurückgegeben.  
  
 Sie können den ursprünglichen Status des steuern eine `ManualResetEvent` durch einen booleschen Wert an den Konstruktor übergeben `true` , wenn der anfängliche Zustand signalisiert wird, und `false` andernfalls.  
  
 `ManualResetEvent` kann auch verwendet werden, mit der `static` <xref:System.Threading.WaitHandle.WaitAll%2A> und <xref:System.Threading.WaitHandle.WaitAny%2A> Methoden.  
  
 Weitere Informationen zu Threadsynchronisierungsmechanismen finden Sie unter [ManualResetEvent und ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in der Dokumentation.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie <xref:System.Threading.ManualResetEvent> funktioniert. Das Beispiel beginnt mit einem <xref:System.Threading.ManualResetEvent> im nicht signalisierten Zustand (d. h. `false` an den Konstruktor übergeben wird). Das Beispiel erstellt drei threads jeweils, welche Blöcke auf der <xref:System.Threading.ManualResetEvent> durch Aufrufen der <xref:System.Threading.WaitHandle.WaitOne%2A> Methode. Wenn der Benutzer drückt die **EINGABETASTE** Schlüssel, der im Beispiel wird die <xref:System.Threading.EventWaitHandle.Set%2A> -Methode, die alle drei Threads frei. Vergleichen Sie dies mit dem Verhalten von der <xref:System.Threading.AutoResetEvent> -Klasse, die Threads jeweils nacheinander frei nach jeder Veröffentlichung automatisch zurücksetzt.  
  
 Drücken der **EINGABETASTE** Schlüssel erneut zeigt, dass die <xref:System.Threading.ManualResetEvent> bleibt in den signalisierten Zustand, bis die <xref:System.Threading.EventWaitHandle.Reset%2A> Methode wird aufgerufen,: im Beispiel werden zwei weitere Threads gestartet. Diese Threads blockieren sich nicht beim Anruf die <xref:System.Threading.WaitHandle.WaitOne%2A> -Methode, aber stattdessen bis zum Abschluss ausgeführt.  
  
 Durch Drücken der **EINGABETASTE** Schlüssel wird erneut das Beispiel zum Aufrufen der <xref:System.Threading.EventWaitHandle.Reset%2A> Methode und starten einen weiteren Thread, die beim Aufruf blockiert, <xref:System.Threading.WaitHandle.WaitOne%2A>. Drücken Sie die **EINGABETASTE** Schlüssel einer die letztes Mal aufrufen <xref:System.Threading.EventWaitHandle.Set%2A> endet, der letzte Thread und die Anwendung freizugeben.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Diese Klasse ist threadsicher.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Verwaltetes Threading</related>
    <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md">Ereignis mit manueller Rücksetzung</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <see langword="true" />, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll, <see langword="false" />, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ManualResetEvent" />-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der ursprüngliche Zustand der ein <xref:System.Threading.ManualResetEvent> signalisiert wird (d. h., wenn er vom übergeben erstellt wird `true` für `initialState`), Threads, die gewartet werden soll die <xref:System.Threading.ManualResetEvent> nicht blockieren. Wenn der anfängliche Zustand auf "nicht signalisiert" festgelegt ist, Threads blockiert, bis die <xref:System.Threading.EventWaitHandle.Set%2A> Methode wird aufgerufen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Verwaltetes Threading</related>
        <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md">ManualResetEvent</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf „nicht signalisiert“ fest, sodass Threads blockiert werden.</summary>
        <returns>
          <see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf signalisiert fest und ermöglicht so einem oder mehreren wartenden Threads fortzufahren.</summary>
        <returns>
          <see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Aufrufen der Set-Methode bewirkt, dass das Wait-Handle signalisierten Zustand, bis die <xref:System.Threading.ManualResetEvent.Reset> Methode wird aufgerufen.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
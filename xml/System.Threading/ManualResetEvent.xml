<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29382b335cb3105e8edee09e7937144231846e59" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86849024" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit WaitHandle" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Threadsynchronisierungsereignis dar, das bei Signalisierung manuell zurückgesetzt werden muss. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Sie verwenden `ManualResetEvent` , <xref:System.Threading.AutoResetEvent> und <xref:System.Threading.EventWaitHandle> für die Thread Interaktion (oder Thread Signalisierung). Weitere Informationen finden Sie im Artikel [Thread Interaktion oder Signalisierung](/dotnet/standard/threading/overview-of-synchronization-primitives#thread-interaction-or-signaling) im Artikel [Übersicht über Synchronisierungs primitive](/dotnet/standard/threading/overview-of-synchronization-primitives) .  

 Wenn ein Thread eine Aktivität startet, die vor dem fortsetzen anderer Threads beendet werden muss, wird [ManualResetEvent. Reset](xref:System.Threading.EventWaitHandle.Reset%2A) aufgerufen, um ihn `ManualResetEvent` in den nicht signalisierten Zustand zu versetzen. Dieser Thread kann sich als Steuern von vorstellen `ManualResetEvent` . Threads, die den Block [manualrel tevent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) aufzurufen und auf das Signal warten. Wenn der steuernde Thread die Aktivität abschließt, wird [ManualResetEvent. Set](xref:System.Threading.EventWaitHandle.Set%2A) aufgerufen, um zu signalisieren, dass die wartenden Threads fortfahren können. Alle wartenden Threads werden freigegeben.  

 Nachdem Sie signalisiert wurde, `ManualResetEvent` bleibt signalisiert, bis Sie manuell durch Aufrufen der-Methode zurückgesetzt wird <xref:System.Threading.EventWaitHandle.Reset> . Das heißt, Aufrufe von werden <xref:System.Threading.WaitHandle.WaitOne%2A> sofort zurückgegeben.  

 Sie können den Anfangszustand eines Steuern `ManualResetEvent` , indem Sie einen booleschen Wert an den Konstruktor übergeben: `true` , wenn der Anfangszustand signalisiert ist, und `false` andernfalls.  
 
 `ManualResetEvent` kann auch mit der `static` <xref:System.Threading.WaitHandle.WaitAll%2A> -Methode und der-Methode verwendet werden <xref:System.Threading.WaitHandle.WaitAny%2A> .  
  
 Beginnend mit der .NET Framework Version 2,0, wird <xref:System.Threading.ManualResetEvent> von der- <xref:System.Threading.EventWaitHandle> Klasse abgeleitet. Eine <xref:System.Threading.ManualResetEvent> ist funktional äquivalent zu einer, die <xref:System.Threading.EventWaitHandle> mit erstellt wurde <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> .  
  
> [!NOTE]
> Im Gegensatz zur- <xref:System.Threading.ManualResetEvent> Klasse <xref:System.Threading.EventWaitHandle> bietet die-Klasse Zugriff auf benannte System Synchronisierungs Ereignisse.  

 Ab der .NET Framework Version 4,0 ist die- <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> Klasse eine vereinfachte Alternative zu <xref:System.Threading.ManualResetEvent> .    
   
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie <xref:System.Threading.ManualResetEvent> funktioniert. Das Beispiel beginnt mit einem <xref:System.Threading.ManualResetEvent> im nicht signalisierten Zustand (d. h `false` ., wird an den-Konstruktor übergeben). Im Beispiel werden drei Threads erstellt, die jeweils durch Aufrufen der-Methode blockiert werden <xref:System.Threading.ManualResetEvent> <xref:System.Threading.WaitHandle.WaitOne%2A> . Wenn der Benutzer die **Eingabe** Taste drückt, ruft das Beispiel die- <xref:System.Threading.EventWaitHandle.Set%2A> Methode auf, die alle drei Threads freigibt. Vergleichen Sie dies mit dem Verhalten der- <xref:System.Threading.AutoResetEvent> Klasse, die Threads nacheinander freigibt und nach jeder Version automatisch zurückgesetzt wird.  
  
 Wenn **Sie die Eingabe** Taste erneut drücken, wird veranschaulicht, dass die <xref:System.Threading.ManualResetEvent> im signalisierten Zustand verbleibt, bis Ihre- <xref:System.Threading.EventWaitHandle.Reset%2A> Methode aufgerufen wird: im Beispiel werden zwei weitere Threads gestartet. Diese Threads werden nicht blockiert, wenn Sie die-Methode aufzurufen <xref:System.Threading.WaitHandle.WaitOne%2A> , sondern bis zum Abschluss ausgeführt werden.  
  
 Das erneute Drücken der **Eingabe** Taste bewirkt, dass das Beispiel die <xref:System.Threading.EventWaitHandle.Reset%2A> -Methode aufruft und einen weiteren Thread startet, der beim Aufrufen von blockiert wird <xref:System.Threading.WaitHandle.WaitOne%2A> . Durch Drücken der **Eingabe** Taste einmal wird aufgerufen <xref:System.Threading.EventWaitHandle.Set%2A> , um den letzten Thread freizugeben, und das Programm wird beendet.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Diese Klasse ist Thread sicher.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="/dotnet/standard/threading/">Verwaltetes Threading</related>
    <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives">Übersicht über Synchronisierungsprimitive</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" />, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll, <see langword="false" />, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ManualResetEvent" />-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der anfängliche Zustand eines signalisiert wird (d. h. <xref:System.Threading.ManualResetEvent> , wenn er durch Übergeben von erstellt wird `true` `initialState` ), werden die Threads, die auf das-Block warten, <xref:System.Threading.ManualResetEvent> nicht blockieren. Wenn der Anfangszustand nicht signalisiert ist, blockieren Threads, bis die- <xref:System.Threading.EventWaitHandle.Set%2A> Methode aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="/dotnet/standard/threading/">Verwaltetes Threading</related>
        <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives">Übersicht über Synchronisierungsprimitive</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf „nicht signalisiert“ fest, sodass Threads blockiert werden.</summary>
        <returns><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf signalisiert fest und ermöglicht so einem oder mehreren wartenden Threads fortzufahren.</summary>
        <returns><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wenn Sie die Set-Methode aufrufen, bleibt das Wait-Handle in einem signalisierten Zustand, bis die <xref:System.Threading.ManualResetEvent.Reset> Methode aufgerufen wird.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

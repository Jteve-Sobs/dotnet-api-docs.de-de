<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="769daa6a37f95fa0da09afca7900712dc0439941" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78781064" /></Metadata><TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type SemaphoreSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="27926-101">Eine einfache Alternative zu <see cref="T:System.Threading.Semaphore" />, die die Anzahl der Threads beschränkt, die gleichzeitig auf eine Ressource oder einen Ressourcenpool zugreifen können.</span><span class="sxs-lookup"><span data-stu-id="27926-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-102">Semaphoren haben zwei Typen: lokale Semaphoren und benannte System Semaphoren.</span><span class="sxs-lookup"><span data-stu-id="27926-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="27926-103">Lokale Semaphoren sind für eine Anwendung lokal, System Semaphoren sind im gesamten Betriebssystem sichtbar und eignen sich für die prozessübergreifende Synchronisierung.</span><span class="sxs-lookup"><span data-stu-id="27926-103">Local semaphores are local to an application, system semaphores are visible throughout the operating system and are suitable for inter-process synchronization.</span></span> <span data-ttu-id="27926-104">Der <xref:System.Threading.SemaphoreSlim> ist eine vereinfachte Alternative zur <xref:System.Threading.Semaphore> Klasse, die keine Windows-Kernel Semaphoren verwendet.</span><span class="sxs-lookup"><span data-stu-id="27926-104">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="27926-105">Anders als die <xref:System.Threading.Semaphore>-Klasse unterstützt die <xref:System.Threading.SemaphoreSlim>-Klasse benannte System Semaphoren nicht.</span><span class="sxs-lookup"><span data-stu-id="27926-105">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="27926-106">Sie können Sie nur als lokales Semaphor verwenden.</span><span class="sxs-lookup"><span data-stu-id="27926-106">You can use it as a local semaphore only.</span></span> <span data-ttu-id="27926-107">Die <xref:System.Threading.SemaphoreSlim>-Klasse ist das empfohlene Semaphor für die Synchronisierung innerhalb einer einzelnen app.</span><span class="sxs-lookup"><span data-stu-id="27926-107">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="27926-108">Ein schlankes Semaphor steuert den Zugriff auf einen Ressourcenpool, der für Ihre Anwendung lokal ist.</span><span class="sxs-lookup"><span data-stu-id="27926-108">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="27926-109">Wenn Sie ein Semaphor instanziieren, können Sie die maximale Anzahl von Threads angeben, die das Semaphor gleichzeitig eingeben können.</span><span class="sxs-lookup"><span data-stu-id="27926-109">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="27926-110">Außerdem geben Sie die anfängliche Anzahl von Threads an, die das Semaphor gleichzeitig eingeben können.</span><span class="sxs-lookup"><span data-stu-id="27926-110">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="27926-111">Dadurch wird die Anzahl der Semaphore definiert.</span><span class="sxs-lookup"><span data-stu-id="27926-111">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="27926-112">Die Anzahl wird jedes Mal dekrementiert, wenn ein Thread in das Semaphor eintritt, und erhöht sich jedes Mal, wenn ein Thread das Semaphor freigibt.</span><span class="sxs-lookup"><span data-stu-id="27926-112">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="27926-113">Um die Semaphore einzugeben, Ruft ein Thread eine der <xref:System.Threading.SemaphoreSlim.Wait%2A>-oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Überladungen auf.</span><span class="sxs-lookup"><span data-stu-id="27926-113">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="27926-114">Um das Semaphor freizugeben, wird eine der <xref:System.Threading.SemaphoreSlim.Release%2A> Überladungen aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="27926-114">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="27926-115">Wenn die Anzahl Null erreicht, werden nachfolgende Aufrufe an eine der `Wait` Methoden blockiert, bis andere Threads das Semaphor freigeben.</span><span class="sxs-lookup"><span data-stu-id="27926-115">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="27926-116">Wenn mehrere Threads blockiert werden, gibt es keine garantierte Reihenfolge (z. b. FIFO oder LIFO), mit der gesteuert wird, wann Threads in das Semaphor eintreten.</span><span class="sxs-lookup"><span data-stu-id="27926-116">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="27926-117">Die grundlegende Struktur für Code, der ein Semaphor zum Schützen von Ressourcen verwendet, ist:</span><span class="sxs-lookup"><span data-stu-id="27926-117">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="27926-118">Wenn alle Threads das Semaphor freigegeben haben, liegt die Anzahl bei dem maximalen Wert, der beim Erstellen des Semaphors angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="27926-118">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="27926-119">Die Anzahl der Semaphore ist über die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft verfügbar.</span><span class="sxs-lookup"><span data-stu-id="27926-119">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="27926-120">Die <xref:System.Threading.SemaphoreSlim>-Klasse erzwingt keine Thread-oder Aufgaben Identität bei Aufrufen der Methoden <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>und <xref:System.Threading.SemaphoreSlim.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="27926-120">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="27926-121">Wenn der <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29>-Konstruktor verwendet wird, um das <xref:System.Threading.SemaphoreSlim> Objekt zu instanziieren, kann die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft darüber hinaus über den vom-Konstruktor festgelegten Wert hinaus zunehmen.</span><span class="sxs-lookup"><span data-stu-id="27926-121">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="27926-122">Es ist Aufgabe des Programmierers, sicherzustellen, dass Aufrufe von <xref:System.Threading.SemaphoreSlim.Wait%2A>-oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Methoden in angemessener Weise mit Aufrufen von <xref:System.Threading.SemaphoreSlim.Release%2A> Methoden gekoppelt werden.</span><span class="sxs-lookup"><span data-stu-id="27926-122">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="27926-123">Im folgenden Beispiel wird ein Semaphor mit einer maximalen Anzahl von drei Threads und einer anfänglichen Anzahl von NULL-Threads erstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-123">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="27926-124">Im Beispiel werden fünf Aufgaben gestartet, die alle blockieren, die auf das Semaphor warten.</span><span class="sxs-lookup"><span data-stu-id="27926-124">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="27926-125">Der Haupt Thread ruft die <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29>-Überladung auf, um die Anzahl der Semaphor auf den maximalen Wert zu erhöhen. Dadurch können drei Aufgaben in das Semaphor eintreten.</span><span class="sxs-lookup"><span data-stu-id="27926-125">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="27926-126">Jedes Mal, wenn das Semaphor freigegeben wird, wird die vorherige Semaphor-Anzahl angezeigt.</span><span class="sxs-lookup"><span data-stu-id="27926-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="27926-127">Konsolen Meldungen verfolgen die Verwendung von Semaphor.</span><span class="sxs-lookup"><span data-stu-id="27926-127">Console messages track semaphore use.</span></span> <span data-ttu-id="27926-128">Das simulierte Arbeitsintervall wird für jeden Thread geringfügig angehoben, damit die Ausgabe leichter lesbar ist.</span><span class="sxs-lookup"><span data-stu-id="27926-128">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="27926-129">Alle öffentlichen und geschützten Member von <see cref="T:System.Threading.SemaphoreSlim" /> sind Thread sicher und können gleichzeitig von mehreren Threads verwendet werden, mit Ausnahme von <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, die nur verwendet werden müssen, wenn alle anderen Vorgänge auf dem <see cref="T:System.Threading.SemaphoreSlim" /> abgeschlossen sind.</span><span class="sxs-lookup"><span data-stu-id="27926-129">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-130">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-130">Semaphore and SemaphoreSlim</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27926-131">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="27926-131">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim initialCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="27926-132">Die anfängliche Anzahl von Anforderungen für das Semaphor, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="27926-132">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="27926-133">Initialisiert eine neue Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse und gibt die ursprüngliche Anzahl von Anforderungen an, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="27926-133">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-134">Der `initialCount`-Parameter definiert die Anzahl der gleichzeitigen Anforderungen, die in das Semaphor eingegeben werden können, das erteilt werden kann.</span><span class="sxs-lookup"><span data-stu-id="27926-134">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="27926-135">Es wird jedoch nicht die maximale Anzahl von Anforderungen definiert, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="27926-135">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="27926-136">Ein <xref:System.Threading.SemaphoreSlim> Objekt, das durch den Aufruf dieses Konstruktors instanziiert wird, löst keine <xref:System.Threading.SemaphoreFullException> Ausnahme aus, wenn ein Aufruf der <xref:System.Threading.SemaphoreSlim.Release%2A>-Methode den Wert der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft über `initialCount`hinaus erhöht.</span><span class="sxs-lookup"><span data-stu-id="27926-136">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="27926-137">Dies tritt auf, wenn <xref:System.Threading.SemaphoreSlim.Release%2A> Methoden mehr Aufrufe als <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Methoden vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="27926-137">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="27926-138">Um die maximale Anzahl gleichzeitiger Anforderungen für die Eingabe des Semaphors festzulegen, das erteilt werden kann, müssen Sie den <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29>-Konstruktor aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="27926-138">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-139"><paramref name="initialCount" /> ist kleiner als 0.</span><span class="sxs-lookup"><span data-stu-id="27926-139"><paramref name="initialCount" /> is less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-140">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-140">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int * int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim (initialCount, maxCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="27926-141">Die anfängliche Anzahl von Anforderungen für das Semaphor, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="27926-141">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maxCount"><span data-ttu-id="27926-142">Die maximale Anzahl von Anforderungen für das Semaphor, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="27926-142">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="27926-143">Initialisiert eine neue Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse und gibt die ursprüngliche sowie die maximale Anzahl von Anforderungen an, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="27926-143">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-144"><paramref name="initialCount" /> ist kleiner als 0, oder <paramref name="initialCount" /> ist größer als <paramref name="maxCount" />, oder <paramref name="maxCount" /> ist kleiner gleich 0.</span><span class="sxs-lookup"><span data-stu-id="27926-144"><paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-145">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-145">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableWaitHandle : System.Threading.WaitHandle" Usage="System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="27926-146">Gibt ein <see cref="T:System.Threading.WaitHandle" /> zurück, das verwendet werden kann um auf die Semaphore zu warten.</span><span class="sxs-lookup"><span data-stu-id="27926-146">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></summary>
        <value><span data-ttu-id="27926-147">Ein <see cref="T:System.Threading.WaitHandle" />, das verwendet werden kann um auf die Semaphore zu warten.</span><span class="sxs-lookup"><span data-stu-id="27926-147">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-148">Verwenden Sie diese Eigenschaft nur, wenn Sie auf ein SemaphoreSlim mit anderen Kernel basierten Synchronisierungs Objekten mit dem gleichen Wait-Handle warten müssen.</span><span class="sxs-lookup"><span data-stu-id="27926-148">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="27926-149">Ein erfolgreicher warte Vorgang auf dem <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> impliziert nicht, dass ein erfolgreicher warte Vorgang für die <xref:System.Threading.SemaphoreSlim> selbst ausgeführt wird. Außerdem wird die Anzahl der Semaphore verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-149">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="27926-150">Nachdem das verfügbare Wait-Handle signalisiert wurde, sollten Sie auf die <xref:System.Threading.SemaphoreSlim> genau warten.</span><span class="sxs-lookup"><span data-stu-id="27926-150">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-151"><see cref="T:System.Threading.SemaphoreSlim" /> wurde gelöscht.</span><span class="sxs-lookup"><span data-stu-id="27926-151">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-152">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-152">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCount : int" Usage="System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="27926-153">Ruft die Anzahl der verbleibenden Threads ab, für die das Eintreten in das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="27926-153">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="27926-154">Die Anzahl der verbleibenden Threads, für die das Eintreten in das Semaphor zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="27926-154">The number of remaining threads that can enter the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-155">Der Anfangswert der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft wird durch den aufrufswert des <xref:System.Threading.SemaphoreSlim.%23ctor%2A>-Klassenkonstruktors festgelegt.</span><span class="sxs-lookup"><span data-stu-id="27926-155">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="27926-156">Sie wird von jedem aufzurufenden-<xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>-Methode dekrementiert und bei jedem Aufrufder <xref:System.Threading.SemaphoreSlim.Release%2A>-Methode inkrementiert.</span><span class="sxs-lookup"><span data-stu-id="27926-156">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-157">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-157">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27926-158">Gibt die von der aktuellen Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="27926-158">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="semaphoreSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27926-159">Gibt alle von der aktuellen Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="27926-159">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-160">Rufen Sie `Dispose` auf, wenn Sie <xref:System.Threading.SemaphoreSlim> nicht mehr benötigen.</span><span class="sxs-lookup"><span data-stu-id="27926-160">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="27926-161">Die `Dispose`-Methode bewirkt, dass <xref:System.Threading.SemaphoreSlim> nicht mehr verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="27926-161">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="27926-162">Nachdem Sie `Dispose`aufgerufen haben, müssen Sie alle Verweise auf die <xref:System.Threading.SemaphoreSlim> freigeben, damit der Garbage Collector den Speicher freigeben kann, den der <xref:System.Threading.SemaphoreSlim> belegt hat.</span><span class="sxs-lookup"><span data-stu-id="27926-162">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="27926-163">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.</span><span class="sxs-lookup"><span data-stu-id="27926-163">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="27926-164">Rufen Sie immer `Dispose` auf, bevor Sie den letzten Verweis auf das <xref:System.Threading.SemaphoreSlim> freigeben.</span><span class="sxs-lookup"><span data-stu-id="27926-164">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="27926-165">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Threading.SemaphoreSlim>-Methode des `Finalize`-Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="27926-165">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-166">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-166">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="semaphoreSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="27926-167"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben. <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="27926-167"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="27926-168">Gibt die von <see cref="T:System.Threading.SemaphoreSlim" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="27926-168">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-169">Im Gegensatz zu den meisten Membern von <xref:System.Threading.SemaphoreSlim>ist <xref:System.Threading.SemaphoreSlim.Dispose%2A> nicht Thread sicher und kann nicht gleichzeitig mit anderen Membern dieser Instanz verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="27926-169">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-170">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-170">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27926-171">Gibt das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt frei.</span><span class="sxs-lookup"><span data-stu-id="27926-171">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphoreSlim.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27926-172">Gibt das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt einmal frei.</span><span class="sxs-lookup"><span data-stu-id="27926-172">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span></span></summary>
        <returns><span data-ttu-id="27926-173">Die vorherige Anzahl von <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="27926-173">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-174">Durch einen aufzurufenden <xref:System.Threading.SemaphoreSlim.Release>-Methode wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins erhöht.</span><span class="sxs-lookup"><span data-stu-id="27926-174">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="27926-175">Wenn der Wert der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft 0 (null) ist, bevor diese Methode aufgerufen wird, lässt die-Methode auch einen Thread oder eine Aufgabe zu, der durch einen Aufruf der <xref:System.Threading.SemaphoreSlim.Wait%2A>-oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>-Methode blockiert wird, um das Semaphor einzugeben.</span><span class="sxs-lookup"><span data-stu-id="27926-175">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-176">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-176">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="27926-177">Der <see cref="T:System.Threading.SemaphoreSlim" /> hat bereits seine maximale Größe erreicht.</span><span class="sxs-lookup"><span data-stu-id="27926-177">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-178">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-178">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphoreSlim.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="27926-179">Die Anzahl von Malen, die das Semaphor freigegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="27926-179">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="27926-180">Gibt das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt eine festgelegte Anzahl von Malen frei.</span><span class="sxs-lookup"><span data-stu-id="27926-180">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="27926-181">Die vorherige Anzahl von <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="27926-181">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-182">Durch einen aufzurufenden <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29>-Methode wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um `releaseCount`erhöht.</span><span class="sxs-lookup"><span data-stu-id="27926-182">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="27926-183">Wenn der Wert der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft 0 (null) ist, bevor diese Methode aufgerufen wird, ermöglicht die-Methode auch `releaseCount` Threads oder Tasks, die durch einen Aufruf der <xref:System.Threading.SemaphoreSlim.Wait%2A>-oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>-Methode blockiert werden, um in das Semaphor einzutreten.</span><span class="sxs-lookup"><span data-stu-id="27926-183">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-184">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-184">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-185"><paramref name="releaseCount" /> ist kleiner als 1.</span><span class="sxs-lookup"><span data-stu-id="27926-185"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="27926-186">Der <see cref="T:System.Threading.SemaphoreSlim" /> hat bereits seine maximale Größe erreicht.</span><span class="sxs-lookup"><span data-stu-id="27926-186">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-187">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-187">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27926-188">Blockiert den aktuellen Thread, bis er in <see cref="T:System.Threading.SemaphoreSlim" /> eintreten kann.</span><span class="sxs-lookup"><span data-stu-id="27926-188">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="semaphoreSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27926-189">Blockiert den aktuellen Thread, bis er in <see cref="T:System.Threading.SemaphoreSlim" /> eintreten kann.</span><span class="sxs-lookup"><span data-stu-id="27926-189">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-190">Wenn ein Thread oder Task in der Lage ist, das Semaphor einzugeben, wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-190">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-191">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-191">The current instance has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-192">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-192">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="semaphoreSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="27926-193">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-193">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="27926-194">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei das Timeout mit einer 32-Bit-Ganzzahl mit Vorzeichen angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="27926-194">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span></span></summary>
        <returns><span data-ttu-id="27926-195"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-195"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="27926-196">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-196">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="27926-197">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-197">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-198">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-198">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="27926-199">Wenn ein Thread oder Task in der Lage ist, das Semaphor einzugeben, wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-199">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="27926-200">Wenn ein Thread oder Task blockiert wird, wenn <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> aufgerufen wird und das durch `millisecondsTimeout` angegebene Timeout Intervall abläuft:</span><span class="sxs-lookup"><span data-stu-id="27926-200">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="27926-201">Der Thread oder Task wird nicht in das Semaphor eingegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-201">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="27926-202">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft wird nicht dekrementiert.</span><span class="sxs-lookup"><span data-stu-id="27926-202">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-203"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-203"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-204"><see cref="T:System.Threading.SemaphoreSlim" /> wurde gelöscht.</span><span class="sxs-lookup"><span data-stu-id="27926-204">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-205">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-205">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait (cancellationToken As CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="semaphoreSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="27926-206">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />-Token.</span><span class="sxs-lookup"><span data-stu-id="27926-206">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="27926-207">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei ein <see cref="T:System.Threading.CancellationToken" /> überwacht wird.</span><span class="sxs-lookup"><span data-stu-id="27926-207">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-208">Wenn ein Thread oder Task in der Lage ist, das Semaphor einzugeben, wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-208">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="27926-209">Wenn `cancellationToken` abgebrochen wird, wird der Thread oder Task nicht in das Semaphor eingegeben, und die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft wird nicht dekrementiert.</span><span class="sxs-lookup"><span data-stu-id="27926-209">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="27926-210">Stattdessen löst die Methode eine <xref:System.OperationCanceledException> Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="27926-210">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="27926-211"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="27926-211"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-212">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-212">The current instance has already been disposed.</span></span>  
  
<span data-ttu-id="27926-213">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-213">-or-</span></span> 
<span data-ttu-id="27926-214">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-214">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-215">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-215">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="27926-216">Abbruch</span><span class="sxs-lookup"><span data-stu-id="27926-216">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="semaphoreSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="27926-217">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-217">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="27926-218">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei ein <see cref="T:System.TimeSpan" /> zum Angeben des Timeouts verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="27926-218">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span></span></summary>
        <returns><span data-ttu-id="27926-219"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-219"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="27926-220">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-220">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="27926-221">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-221">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-222">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-222">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="27926-223">Wenn ein Thread oder Task in der Lage ist, das Semaphor einzugeben, wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-223">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="27926-224">Wenn ein Thread oder Task blockiert wird, wenn <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> aufgerufen wird und das durch `millisecondsTimeout` angegebene Timeout Intervall abläuft:</span><span class="sxs-lookup"><span data-stu-id="27926-224">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="27926-225">Der Thread oder Task wird nicht in das Semaphor eingegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-225">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="27926-226">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft wird nicht dekrementiert.</span><span class="sxs-lookup"><span data-stu-id="27926-226">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-227"><paramref name="timeout" /> ist eine negative Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-227"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="27926-228">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-228">-or-</span></span>

<span data-ttu-id="27926-229"><paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-229"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-230">Die semaphoreSlim-Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-230">The semaphoreSlim instance has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-231">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-231">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="27926-232">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-232">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="27926-233">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="27926-233">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="27926-234">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei eine 32-Bit-Ganzzahl mit Vorzeichen zum Angeben des Timeouts verwendet und ein <see cref="T:System.Threading.CancellationToken" /> überwacht wird.</span><span class="sxs-lookup"><span data-stu-id="27926-234">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="27926-235"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-235"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="27926-236">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-236">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="27926-237">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-237">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-238">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-238">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="27926-239">Wenn ein Thread oder Task in der Lage ist, das Semaphor einzugeben, wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-239">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="27926-240">Wenn `cancellationToken` abgebrochen wird oder wenn ein Thread oder Task blockiert wird, wenn aufgerufen wird <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> und das von `millisecondsTimeout` angegebene Timeout Intervall abläuft:</span><span class="sxs-lookup"><span data-stu-id="27926-240">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="27926-241">Der Thread oder Task wird nicht in das Semaphor eingegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-241">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="27926-242">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft wird nicht dekrementiert.</span><span class="sxs-lookup"><span data-stu-id="27926-242">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="27926-243">Wenn `cancellationToken` abgebrochen wird, löst die Methode eine <xref:System.OperationCanceledException> Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="27926-243">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="27926-244"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="27926-244"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-245"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-245"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="27926-246">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-246">-or-</span></span>

<span data-ttu-id="27926-247"><paramref name="millisecondsTimeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-247"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-248">Die <see cref="T:System.Threading.SemaphoreSlim" />-Instanz wurde verworfen, oder die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-248">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-249">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-249">Semaphore and SemaphoreSlim</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="27926-250">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-250">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="27926-251">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="27926-251">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="27926-252">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei eine <see cref="T:System.TimeSpan" /> den Timeout angibt und ein <see cref="T:System.Threading.CancellationToken" /> überwacht wird.</span><span class="sxs-lookup"><span data-stu-id="27926-252">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="27926-253"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-253"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="27926-254">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-254">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="27926-255">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-255">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-256">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-256">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="27926-257">Wenn ein Thread oder Task in der Lage ist, das Semaphor einzugeben, wird die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft um eins verringert.</span><span class="sxs-lookup"><span data-stu-id="27926-257">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="27926-258">Wenn `cancellationToken` abgebrochen wird oder wenn ein Thread oder Task blockiert wird, wenn aufgerufen wird <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> und das von `millisecondsTimeout` angegebene Timeout Intervall abläuft:</span><span class="sxs-lookup"><span data-stu-id="27926-258">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="27926-259">Der Thread oder Task wird nicht in das Semaphor eingegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-259">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="27926-260">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A>-Eigenschaft wird nicht dekrementiert.</span><span class="sxs-lookup"><span data-stu-id="27926-260">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="27926-261">Wenn `cancellationToken` abgebrochen wird, löst die Methode eine <xref:System.OperationCanceledException> Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="27926-261">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="27926-262"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="27926-262"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-263"><paramref name="timeout" /> ist eine negative Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-263"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="27926-264">-oder-</span><span class="sxs-lookup"><span data-stu-id="27926-264">-or-.</span></span>

<span data-ttu-id="27926-265"><paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-265"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-266">Die semaphoreSlim-Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-266">The semaphoreSlim instance has been disposed.</span></span>
          
<span data-ttu-id="27926-267">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-267">-or-</span></span>

<span data-ttu-id="27926-268">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-268">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="27926-269">Semaphore und SemaphoreSlim</span><span class="sxs-lookup"><span data-stu-id="27926-269">Semaphore and SemaphoreSlim</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="27926-270">Abbruch</span><span class="sxs-lookup"><span data-stu-id="27926-270">Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="27926-271">Wartet asynchron auf den Eintritt in <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="27926-271">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : unit -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="27926-272">Wartet asynchron auf den Eintritt in <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="27926-272">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <returns><span data-ttu-id="27926-273">Eine Aufgabe, die abgeschlossen wird, wenn das Semaphor eingegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="27926-273">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-274"><see cref="T:System.Threading.SemaphoreSlim" /> wurde gelöscht.</span><span class="sxs-lookup"><span data-stu-id="27926-274">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="27926-275">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-275">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="27926-276">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" />, wobei eine 32-Bit-Ganzzahl mit Vorzeichen zum Messen des Zeitintervalls verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="27926-276">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="27926-277">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-277">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-278">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-278">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="27926-279">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-279">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-280">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-280">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-281">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-281">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-282"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-282"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="27926-283">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-283">-or-</span></span> 
<span data-ttu-id="27926-284"><paramref name="millisecondsTimeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-284"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="27926-285">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />-Token.</span><span class="sxs-lookup"><span data-stu-id="27926-285">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="27926-286">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" />, während ein ein <see cref="T:System.Threading.CancellationToken" /> beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="27926-286">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="27926-287">Eine Aufgabe, die abgeschlossen wird, wenn das Semaphor eingegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="27926-287">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-288">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-288">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="27926-289"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="27926-289"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="27926-290">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-290">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="27926-291">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" /> unter Verwendung einer <see cref="T:System.TimeSpan" /> zum Messen des Zeitintervalls.</span><span class="sxs-lookup"><span data-stu-id="27926-291">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="27926-292">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-292">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-293">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-293">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="27926-294">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-294">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-295">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-295">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-296">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-296">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-297"><paramref name="timeout" /> ist eine negative Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-297"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>

<span data-ttu-id="27926-298">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-298">-or-</span></span> 
<span data-ttu-id="27926-299"><paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-299"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="27926-300">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-300">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="27926-301">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="27926-301">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="27926-302">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" />, wobei eine 32-Bit-Ganzzahl mit Vorzeichen zum Messen des Zeitintervalls verwendet wird, während ein <see cref="T:System.Threading.CancellationToken" /> beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="27926-302">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="27926-303">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-303">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-304">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-304">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="27926-305">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-305">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-306">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-306">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-307"><paramref name="millisecondsTimeout" /> ist eine Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-307"><paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="27926-308">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-308">-or-</span></span>

<span data-ttu-id="27926-309"><paramref name="millisecondsTimeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-309"><paramref name="millisecondsTimeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-310">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="27926-310">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="27926-311"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="27926-311"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="27926-312">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="27926-312">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="27926-313">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />-Token.</span><span class="sxs-lookup"><span data-stu-id="27926-313">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="27926-314">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" /> unter Verwendung einer <see cref="T:System.TimeSpan" /> zum Messen des Zeitintervalls, während ein <see cref="T:System.Threading.CancellationToken" /> beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="27926-314">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="27926-315">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="27926-315">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="27926-316">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wartet die Methode unbegrenzt.</span><span class="sxs-lookup"><span data-stu-id="27926-316">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="27926-317">Wenn das Timeout auf Null Millisekunden festgelegt ist, wird die Methode nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="27926-317">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="27926-318">Es testet den Zustand des Wait-Handles und wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="27926-318">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="27926-319"><paramref name="timeout" /> ist eine negative Zahl ungleich –1, die ein unendliches Zeitlimit darstellt.</span><span class="sxs-lookup"><span data-stu-id="27926-319"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout.</span></span>
          
<span data-ttu-id="27926-320">Oder</span><span class="sxs-lookup"><span data-stu-id="27926-320">-or-</span></span>

<span data-ttu-id="27926-321"><paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="27926-321"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="27926-322"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="27926-322"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="27926-323"><see cref="T:System.Threading.SemaphoreSlim" /> wurde gelöscht.</span><span class="sxs-lookup"><span data-stu-id="27926-323">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

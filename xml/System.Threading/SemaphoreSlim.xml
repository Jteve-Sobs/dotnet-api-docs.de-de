<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="33857-101">Eine einfache Alternative zu <see cref="T:System.Threading.Semaphore" />, die die Anzahl der Threads beschränkt, die gleichzeitig auf eine Ressource oder einen Ressourcenpool zugreifen können.</span><span class="sxs-lookup"><span data-stu-id="33857-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-102">Semaphoren sind zwei Typen: lokale Semaphore und benanntes Semaphore.</span><span class="sxs-lookup"><span data-stu-id="33857-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="33857-103">Das erstere ist für eine app lokal.</span><span class="sxs-lookup"><span data-stu-id="33857-103">The former is local to an app.</span></span> <span data-ttu-id="33857-104">Letzteres ist im gesamten Betriebssystem sichtbar und eignet sich für die prozessübergreifende Synchronisierung.</span><span class="sxs-lookup"><span data-stu-id="33857-104">The latter is visible throughout the operating system and is suitable for inter-process synchronization.</span></span> <span data-ttu-id="33857-105">Die <xref:System.Threading.SemaphoreSlim> ist eine einfache Alternative zu den <xref:System.Threading.Semaphore> -Klasse, die keine Windows-Kernel-Semaphore verwendet.</span><span class="sxs-lookup"><span data-stu-id="33857-105">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="33857-106">Im Gegensatz zu den <xref:System.Threading.Semaphore> -Klasse, die <xref:System.Threading.SemaphoreSlim> Klasse unterstützt keine benannten Systemsemaphore.</span><span class="sxs-lookup"><span data-stu-id="33857-106">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="33857-107">Sie können es als nur ein lokales Semaphor verwenden.</span><span class="sxs-lookup"><span data-stu-id="33857-107">You can use it as a local semaphore only.</span></span> <span data-ttu-id="33857-108">Die <xref:System.Threading.SemaphoreSlim> Klasse ist die empfohlene Semaphor für die Synchronisierung innerhalb einer einzigen app.</span><span class="sxs-lookup"><span data-stu-id="33857-108">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="33857-109">Ein einfaches Semaphor steuert den Zugriff auf einen Pool von Ressourcen, der für Ihre Anwendung lokal ist.</span><span class="sxs-lookup"><span data-stu-id="33857-109">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="33857-110">Wenn Sie einen Semaphor instanziieren, können Sie die maximale Anzahl von Threads angeben, die das Semaphor gleichzeitig eingeben können.</span><span class="sxs-lookup"><span data-stu-id="33857-110">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="33857-111">Sie geben außerdem die anfängliche Anzahl von Threads, die das Semaphor gleichzeitig eingeben können.</span><span class="sxs-lookup"><span data-stu-id="33857-111">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="33857-112">Dadurch wird die Anzahl des Semaphors definiert.</span><span class="sxs-lookup"><span data-stu-id="33857-112">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="33857-113">Die Anzahl wird wieder um eins erniedrigt jedes Mal ein Thread das Semaphor gibt, und jedes Mal erhöht, wenn ein Thread das Semaphor freigibt.</span><span class="sxs-lookup"><span data-stu-id="33857-113">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="33857-114">Um das Semaphor eingegeben haben, ruft eine von ein Thread die <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Überladungen.</span><span class="sxs-lookup"><span data-stu-id="33857-114">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="33857-115">Um das Semaphor freizugeben, ruft Sie eine von der <xref:System.Threading.SemaphoreSlim.Release%2A> Überladungen.</span><span class="sxs-lookup"><span data-stu-id="33857-115">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="33857-116">Wenn die Anzahl 0 (null), und nachfolgende Aufrufe eines erreicht die `Wait` Methoden zu blockieren, bis andere Threads das Semaphor freizugeben.</span><span class="sxs-lookup"><span data-stu-id="33857-116">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="33857-117">Wenn mehrere Threads blockiert werden, besteht keine festgelegte Reihenfolge, z. B. FIFO oder LIFO steuert, wann Threads das Semaphor.</span><span class="sxs-lookup"><span data-stu-id="33857-117">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="33857-118">Die grundlegende Struktur für Code, einen Semaphor beim Schützen von Ressourcen verwendet, wird:</span><span class="sxs-lookup"><span data-stu-id="33857-118">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="33857-119">Wenn alle Threads das Semaphor freigegeben haben, wird die Anzahl der zulässige Höchstwert angegeben, wenn das Semaphor erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="33857-119">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="33857-120">Die Anzahl des Semaphors steht über die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="33857-120">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="33857-121">Die <xref:System.Threading.SemaphoreSlim> Klasse Thread oder Aufgabe Identität bei Aufrufen erzwingt nicht die <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, und <xref:System.Threading.SemaphoreSlim.Release%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="33857-121">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="33857-122">Darüber hinaus Wenn die <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> Konstruktor wird zum Instanziieren der <xref:System.Threading.SemaphoreSlim> -Objekt, das <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft der durch den Konstruktor festgelegte Wert hinaus erhöhen kann.</span><span class="sxs-lookup"><span data-stu-id="33857-122">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="33857-123">Es dem Programmierer ist dafür verantwortlich, stellen Sie sicher, das Aufrufe an <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Methoden werden durch Aufrufe von entsprechend gekoppelt <xref:System.Threading.SemaphoreSlim.Release%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="33857-123">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33857-124">Das folgende Beispiel erstellt eine Semaphore mit einer maximalen Anzahl von drei Threads und eine anfängliche Anzahl von Threads an.</span><span class="sxs-lookup"><span data-stu-id="33857-124">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="33857-125">Das Beispiel beginnt fünf Tasks, die alle für das Semaphor warten blockieren.</span><span class="sxs-lookup"><span data-stu-id="33857-125">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="33857-126">Der Hauptthread Ruft die <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> methodenüberladung, um den Zähler des Semaphors auf das Maximum zu erhöhen, wozu die drei Aufgaben in das Semaphor ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="33857-126">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="33857-127">Jedes Mal, wenn das Semaphor freigegeben wird, wird die vorherige Anzahl des Semaphors angezeigt.</span><span class="sxs-lookup"><span data-stu-id="33857-127">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="33857-128">Konsole Nachrichten nachverfolgen Semaphore verwenden.</span><span class="sxs-lookup"><span data-stu-id="33857-128">Console messages track semaphore use.</span></span> <span data-ttu-id="33857-129">Das simulierte Intervall wird für jeden Thread, um die Ausgabe leichter lesbar zu machen etwas erhöht.</span><span class="sxs-lookup"><span data-stu-id="33857-129">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="33857-130">Alle öffentlichen und geschützten Member der <see cref="T:System.Threading.SemaphoreSlim" /> sind threadsicher und können mit Ausnahme der gleichzeitig von mehreren Threads verwendet werden <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, dieser muss verwendet werden, nur, wenn alle Vorgänge für die <see cref="T:System.Threading.SemaphoreSlim" /> abgeschlossen haben.</span><span class="sxs-lookup"><span data-stu-id="33857-130">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33857-131">Initialisiert eine neue Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="33857-131">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="33857-132">Die anfängliche Anzahl von Anforderungen für das Semaphor, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-132">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="33857-133">Initialisiert eine neue Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse und gibt die ursprüngliche Anzahl von Anforderungen an, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-133">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-134">Die `initialCount` Parameter definiert die Anzahl gleichzeitiger Anforderungen in das Semaphor, die gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-134">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="33857-135">Allerdings definiert er nicht die maximale Anzahl von Anforderungen, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-135">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="33857-136">Ein <xref:System.Threading.SemaphoreSlim> Objekt instanziiert, indem das Aufrufen dieses Konstruktors löst keine <xref:System.Threading.SemaphoreFullException> -Ausnahme aus, wenn ein Aufruf der <xref:System.Threading.SemaphoreSlim.Release%2A> Methode erhöht den Wert des der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft hinter `initialCount`.</span><span class="sxs-lookup"><span data-stu-id="33857-136">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="33857-137">Dies geschieht, wenn weitere Aufrufe <xref:System.Threading.SemaphoreSlim.Release%2A> Methoden als dort <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="33857-137">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="33857-138">Rufen Sie zum Festlegen der maximalen Anzahl gleichzeitiger Anforderungen in das Semaphor, die gewährt werden können, die <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="33857-138">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-139"><paramref name="initialCount" /> ist kleiner als 0.</span><span class="sxs-lookup"><span data-stu-id="33857-139"><paramref name="initialCount" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount"><span data-ttu-id="33857-140">Die anfängliche Anzahl von Anforderungen für das Semaphor, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-140">The initial number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <param name="maxCount"><span data-ttu-id="33857-141">Die maximale Anzahl von Anforderungen für das Semaphor, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-141">The maximum number of requests for the semaphore that can be granted concurrently.</span></span></param>
        <summary><span data-ttu-id="33857-142">Initialisiert eine neue Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse und gibt die ursprüngliche sowie die maximale Anzahl von Anforderungen an, die gleichzeitig gewährt werden können.</span><span class="sxs-lookup"><span data-stu-id="33857-142">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-143"><paramref name="initialCount" /> ist kleiner als 0, oder <paramref name="initialCount" /> ist größer als <paramref name="maxCount" />, oder <paramref name="maxCount" /> ist kleiner gleich 0.</span><span class="sxs-lookup"><span data-stu-id="33857-143"><paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33857-144">Gibt ein <see cref="T:System.Threading.WaitHandle" /> zurück, das verwendet werden kann um auf die Semaphore zu warten.</span><span class="sxs-lookup"><span data-stu-id="33857-144">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></summary>
        <value><span data-ttu-id="33857-145">Ein <see cref="T:System.Threading.WaitHandle" />, das verwendet werden kann um auf die Semaphore zu warten.</span><span class="sxs-lookup"><span data-stu-id="33857-145">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-146">Verwenden Sie diese Eigenschaft nur, wenn Sie auf einen SemaphoreSlim zusammen mit anderen kernelbasierten Synchronisierungsobjekten mit dem gleichen WaitHandle zu warten müssen.</span><span class="sxs-lookup"><span data-stu-id="33857-146">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="33857-147">Ein erfolgreicher Wartevorgang für die <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> bedeutet eine erfolgreiche warten nicht auf die <xref:System.Threading.SemaphoreSlim> selbst, noch wird die Anzahl des Semaphors dekrementiert.</span><span class="sxs-lookup"><span data-stu-id="33857-147">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="33857-148">Nachdem das verfügbare Wait-Handle signalisiert wird, sollten Sie warten, auf die <xref:System.Threading.SemaphoreSlim> speziell.</span><span class="sxs-lookup"><span data-stu-id="33857-148">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-149"><see cref="T:System.Threading.SemaphoreSlim" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-149">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33857-150">Ruft die Anzahl der verbleibenden Threads ab, für die das Eintreten in das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="33857-150">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="33857-151">Die Anzahl der verbleibenden Threads, für die das Eintreten in das Semaphor zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="33857-151">The number of remaining threads that can enter the semaphore.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-152">Der Anfangswert von der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft wird festgelegt, durch den Aufruf der <xref:System.Threading.SemaphoreSlim.%23ctor%2A> Klassenkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="33857-152">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="33857-153">Es wird entsprechend dekrementiert durch jeden Aufruf der <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> -Methode, und inkrementiert durch jeden Aufruf der <xref:System.Threading.SemaphoreSlim.Release%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="33857-153">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33857-154">Gibt die von der aktuellen Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="33857-154">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33857-155">Gibt alle von der aktuellen Instanz der <see cref="T:System.Threading.SemaphoreSlim" />-Klasse verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="33857-155">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-156">Rufen Sie `Dispose` auf, wenn Sie <xref:System.Threading.SemaphoreSlim> nicht mehr benötigen.</span><span class="sxs-lookup"><span data-stu-id="33857-156">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="33857-157">Die `Dispose`-Methode bewirkt, dass <xref:System.Threading.SemaphoreSlim> nicht mehr verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="33857-157">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="33857-158">Nach dem Aufruf `Dispose`, müssen Sie alle Verweise auf Freigeben der <xref:System.Threading.SemaphoreSlim> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Threading.SemaphoreSlim> belegt wurde.</span><span class="sxs-lookup"><span data-stu-id="33857-158">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="33857-159">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="33857-159">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33857-160">Rufen Sie immer `Dispose` auf, bevor Sie den letzten Verweis auf das <xref:System.Threading.SemaphoreSlim> freigeben.</span><span class="sxs-lookup"><span data-stu-id="33857-160">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="33857-161">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Threading.SemaphoreSlim>-Methode des `Finalize`-Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="33857-161">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="33857-162"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="33857-162"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="33857-163">Gibt die von <see cref="T:System.Threading.SemaphoreSlim" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="33857-163">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-164">Im Gegensatz zu den Großteil der Mitglieder <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> ist nicht threadsicher und können nicht gleichzeitig mit anderen Mitgliedern dieser Instanz verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="33857-164">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33857-165">Gibt das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt frei.</span><span class="sxs-lookup"><span data-stu-id="33857-165">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33857-166">Gibt das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt einmal frei.</span><span class="sxs-lookup"><span data-stu-id="33857-166">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span></span></summary>
        <returns><span data-ttu-id="33857-167">Die vorherige Anzahl von <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="33857-167">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-168">Ein Aufruf der <xref:System.Threading.SemaphoreSlim.Release> Methode inkrementiert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-168">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="33857-169">Wenn der Wert von der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft ist 0 (null), bevor diese Methode aufgerufen wird, kann die Methode auch einen Thread oder Aufgabe, die durch einen Aufruf blockiert die <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Methode, um das Semaphor.</span><span class="sxs-lookup"><span data-stu-id="33857-169">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-170">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-170">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="33857-171">Der <see cref="T:System.Threading.SemaphoreSlim" /> hat bereits seine maximale Größe erreicht.</span><span class="sxs-lookup"><span data-stu-id="33857-171">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount"><span data-ttu-id="33857-172">Die Anzahl von Malen, die das Semaphor freigegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="33857-172">The number of times to exit the semaphore.</span></span></param>
        <summary><span data-ttu-id="33857-173">Gibt das <see cref="T:System.Threading.SemaphoreSlim" />-Objekt eine festgelegte Anzahl von Malen frei.</span><span class="sxs-lookup"><span data-stu-id="33857-173">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="33857-174">Die vorherige Anzahl von <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="33857-174">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-175">Ein Aufruf der <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> Methode inkrementiert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft `releaseCount`.</span><span class="sxs-lookup"><span data-stu-id="33857-175">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="33857-176">Wenn der Wert des der <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft ist 0 (null), bevor diese Methode aufgerufen wird, wird die Methode auch ermöglicht `releaseCount` Threads oder Aufgaben, die durch einen Aufruf blockiert die <xref:System.Threading.SemaphoreSlim.Wait%2A> oder <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> Methode, um das Semaphor.</span><span class="sxs-lookup"><span data-stu-id="33857-176">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-177">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-177">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-178"><paramref name="releaseCount" /> ist kleiner als 1.</span><span class="sxs-lookup"><span data-stu-id="33857-178"><paramref name="releaseCount" /> is less than 1.</span></span></exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><span data-ttu-id="33857-179">Der <see cref="T:System.Threading.SemaphoreSlim" /> hat bereits seine maximale Größe erreicht.</span><span class="sxs-lookup"><span data-stu-id="33857-179">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33857-180">Blockiert den aktuellen Thread, bis er in <see cref="T:System.Threading.SemaphoreSlim" /> eintreten kann.</span><span class="sxs-lookup"><span data-stu-id="33857-180">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33857-181">Blockiert den aktuellen Thread, bis er in <see cref="T:System.Threading.SemaphoreSlim" /> eintreten kann.</span><span class="sxs-lookup"><span data-stu-id="33857-181">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-182">Wenn ein Thread oder eine Aufgabe in das Semaphor kann es verringert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-182">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-183">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-183">The current instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="33857-184">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-184">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="33857-185">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei das Timeout mit einer 32-Bit-Ganzzahl mit Vorzeichen angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="33857-185">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span></span></summary>
        <returns>
          <span data-ttu-id="33857-186"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-186"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="33857-187">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-187">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="33857-188">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-188">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-189">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-189">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="33857-190">Wenn ein Thread oder eine Aufgabe in das Semaphor kann es verringert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-190">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="33857-191">Wenn ein Thread oder eine Aufgabe blockiert wird, beim Aufrufen von <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> und das Timeoutintervall gemäß `millisecondsTimeout` läuft ab:</span><span class="sxs-lookup"><span data-stu-id="33857-191">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="33857-192">Der Thread oder der Task Semaphor nicht das.</span><span class="sxs-lookup"><span data-stu-id="33857-192">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="33857-193">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft nicht verringert.</span><span class="sxs-lookup"><span data-stu-id="33857-193">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-194"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-194"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="33857-195">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />-Token.</span><span class="sxs-lookup"><span data-stu-id="33857-195">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="33857-196">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei ein <see cref="T:System.Threading.CancellationToken" /> überwacht wird.</span><span class="sxs-lookup"><span data-stu-id="33857-196">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-197">Wenn ein Thread oder eine Aufgabe in das Semaphor kann es verringert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-197">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="33857-198">Wenn `cancellationToken` wird abgebrochen, den Thread oder den Task nicht in das Semaphor, und die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft nicht verringert.</span><span class="sxs-lookup"><span data-stu-id="33857-198">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="33857-199">Stattdessen löst die Methode eine <xref:System.OperationCanceledException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="33857-199">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="33857-200"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="33857-200"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-201">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-201">The current instance has already been disposed.</span></span>  
  
 <span data-ttu-id="33857-202">- oder - </span><span class="sxs-lookup"><span data-stu-id="33857-202">-or-</span></span>  
  
 <span data-ttu-id="33857-203">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="33857-203">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33857-204">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-204">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="33857-205">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei ein <see cref="T:System.TimeSpan" /> zum Angeben des Timeouts verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="33857-205">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span></span></summary>
        <returns>
          <span data-ttu-id="33857-206"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-206"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="33857-207">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-207">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="33857-208">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-208">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-209">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-209">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="33857-210">Wenn ein Thread oder eine Aufgabe in das Semaphor kann es verringert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-210">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="33857-211">Wenn ein Thread oder eine Aufgabe blockiert wird, beim Aufrufen von <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> und das Timeoutintervall gemäß `millisecondsTimeout` läuft ab:</span><span class="sxs-lookup"><span data-stu-id="33857-211">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="33857-212">Der Thread oder der Task Semaphor nicht das.</span><span class="sxs-lookup"><span data-stu-id="33857-212">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="33857-213">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft nicht verringert.</span><span class="sxs-lookup"><span data-stu-id="33857-213">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-214"><paramref name="timeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-214"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-215">Die „semaphoreSlim“-Instanz wurde verworfen <paramref name="." />.</span><span class="sxs-lookup"><span data-stu-id="33857-215">The semaphoreSlim instance has been disposed <paramref name="." /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="33857-216">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-216">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="33857-217">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="33857-217">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="33857-218">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei eine 32-Bit-Ganzzahl mit Vorzeichen zum Angeben des Timeouts verwendet und ein <see cref="T:System.Threading.CancellationToken" /> überwacht wird.</span><span class="sxs-lookup"><span data-stu-id="33857-218">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns>
          <span data-ttu-id="33857-219"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-219"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="33857-220">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-220">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="33857-221">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-221">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-222">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-222">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="33857-223">Wenn ein Thread oder eine Aufgabe in das Semaphor kann es verringert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-223">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="33857-224">Wenn `cancellationToken` abgebrochen wird, oder wenn ein Thread oder eine Aufgabe blockiert wird, beim Aufrufen von <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> und das Timeoutintervall gemäß `millisecondsTimeout` läuft ab:</span><span class="sxs-lookup"><span data-stu-id="33857-224">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="33857-225">Der Thread oder der Task Semaphor nicht das.</span><span class="sxs-lookup"><span data-stu-id="33857-225">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="33857-226">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft nicht verringert.</span><span class="sxs-lookup"><span data-stu-id="33857-226">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="33857-227">Wenn `cancellationToken` wird abgebrochen, löst die Methode eine <xref:System.OperationCanceledException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="33857-227">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="33857-228"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="33857-228"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-229"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-229"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-230">Die <see cref="T:System.Threading.SemaphoreSlim" />-Instanz wurde verworfen, oder die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-230">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33857-231">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-231">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="33857-232">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="33857-232">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="33857-233">Blockiert den aktuellen Thread, bis er in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht werden kann, wobei eine <see cref="T:System.TimeSpan" /> den Timeout angibt und ein <see cref="T:System.Threading.CancellationToken" /> überwacht wird.</span><span class="sxs-lookup"><span data-stu-id="33857-233">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns>
          <span data-ttu-id="33857-234"><see langword="true" />, wenn der aktuelle Thread erfolgreich in die Warteschlange von <see cref="T:System.Threading.SemaphoreSlim" /> eingereiht wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-234"><see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="33857-235">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-235">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="33857-236">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-236">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-237">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-237">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="33857-238">Wenn ein Thread oder eine Aufgabe in das Semaphor kann es verringert die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft um eins.</span><span class="sxs-lookup"><span data-stu-id="33857-238">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="33857-239">Wenn `cancellationToken` abgebrochen wird, oder wenn ein Thread oder eine Aufgabe blockiert wird, beim Aufrufen von <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> und das Timeoutintervall gemäß `millisecondsTimeout` läuft ab:</span><span class="sxs-lookup"><span data-stu-id="33857-239">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="33857-240">Der Thread oder der Task Semaphor nicht das.</span><span class="sxs-lookup"><span data-stu-id="33857-240">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="33857-241">Die <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> Eigenschaft nicht verringert.</span><span class="sxs-lookup"><span data-stu-id="33857-241">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="33857-242">Wenn `cancellationToken` wird abgebrochen, löst die Methode eine <xref:System.OperationCanceledException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="33857-242">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="33857-243"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="33857-243"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-244"><paramref name="timeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-244"><paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-245">Die semaphoreSlim-Instanz wurde verworfen <paramref name="." /><paramref name="-or-" /></span><span class="sxs-lookup"><span data-stu-id="33857-245">The semaphoreSlim instance has been disposed <paramref name="." /><paramref name="-or-" /></span></span>  
  
 <span data-ttu-id="33857-246">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="33857-246">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33857-247">Wartet asynchron auf den Eintritt in <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="33857-247">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33857-248">Wartet asynchron auf den Eintritt in <see cref="T:System.Threading.SemaphoreSlim" />.</span><span class="sxs-lookup"><span data-stu-id="33857-248">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span></span></summary>
        <returns><span data-ttu-id="33857-249">Eine Aufgabe, die abgeschlossen wird, wenn das Semaphor eingegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="33857-249">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="33857-250">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-250">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="33857-251">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" />, wobei eine 32-Bit-Ganzzahl mit Vorzeichen zum Messen des Zeitintervalls verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="33857-251">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="33857-252">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-252">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-253">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-253">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="33857-254">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-254">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-255">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-255">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-256">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-256">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-257"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-257"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="33857-258">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />-Token.</span><span class="sxs-lookup"><span data-stu-id="33857-258">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="33857-259">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" />, während ein ein <see cref="T:System.Threading.CancellationToken" /> beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="33857-259">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="33857-260">Eine Aufgabe, die abgeschlossen wird, wenn das Semaphor eingegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="33857-260">A task that will complete when the semaphore has been entered.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-261">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-261">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="33857-262"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="33857-262"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33857-263">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-263">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <summary><span data-ttu-id="33857-264">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" /> unter Verwendung einer <see cref="T:System.TimeSpan" /> zum Messen des Zeitintervalls.</span><span class="sxs-lookup"><span data-stu-id="33857-264">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="33857-265">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-265">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-266">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-266">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="33857-267">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-267">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-268">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-268">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-269">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-269">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-270"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-270"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="33857-271">Die Anzahl der Millisekunden, die gewartet werden muss, <see cref="F:System.Threading.Timeout.Infinite" />(-1), um auf unbestimmte Zeit zu warten, oder null, um den Zustand des Wait-Handles zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-271">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="33857-272">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="33857-272">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="33857-273">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" />, wobei eine 32-Bit-Ganzzahl mit Vorzeichen zum Messen des Zeitintervalls verwendet wird, während ein <see cref="T:System.Threading.CancellationToken" /> beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="33857-273">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="33857-274">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-274">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-275">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-275">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="33857-276">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-276">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-277">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-277">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-278"><paramref name="millisecondsTimeout" /> ist eine Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-278"><paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="33857-279">Die aktuelle Instanz wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="33857-279">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="33857-280"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="33857-280"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33857-281">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die 0 Millisekunden darstellt, um den Wait-Handle zu testen und sofort zurückzukehren.</span><span class="sxs-lookup"><span data-stu-id="33857-281">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="33857-282">Das zu überwachende <see cref="T:System.Threading.CancellationToken" />-Token.</span><span class="sxs-lookup"><span data-stu-id="33857-282">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span></span></param>
        <summary><span data-ttu-id="33857-283">Wartet asynchron auf den Zutritt zum <see cref="T:System.Threading.SemaphoreSlim" /> unter Verwendung einer <see cref="T:System.TimeSpan" /> zum Messen des Zeitintervalls, während ein <see cref="T:System.Threading.CancellationToken" /> beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="33857-283">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="33857-284">Eine Aufgabe, die mit dem Ergebnis <see langword="true" /> abgeschlossen wird, wenn der aktuelle Thread erfolgreich in <see cref="T:System.Threading.SemaphoreSlim" /> gewechselt ist, andernfalls mit dem Ergebnis <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="33857-284">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33857-285">Wenn das Timeout auf-1 Millisekunden festgelegt ist, wird die Methode unbegrenzt wartet.</span><span class="sxs-lookup"><span data-stu-id="33857-285">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="33857-286">Die Methode wird blockiert, wenn das Timeout auf 0 Millisekunden beträgt, festgelegt ist, nicht.</span><span class="sxs-lookup"><span data-stu-id="33857-286">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="33857-287">Er überprüft den Status des Wait-Handle und kehrt sofort zurück.</span><span class="sxs-lookup"><span data-stu-id="33857-287">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33857-288"><paramref name="millisecondsTimeout" /> ist eine negative Zahl ungleich -1, die ein unendliches Zeitlimit darstellt, oder das Zeitlimit ist größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33857-288"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="33857-289"><paramref name="cancellationToken" /> wurde abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="33857-289"><paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13ba5d8aa87151d7e0efc29d9fa1a9342806bac3" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75158594" /></Metadata><TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bf610-101">Stellt einen Mutex-Sperrprimitiven bereit, wobei ein Thread, der versucht, die Sperre abzurufen, in einer Schleife wartet, die laufend prüft, ob die Sperre verfügbar wird.</span><span class="sxs-lookup"><span data-stu-id="bf610-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-102">Ein Beispiel für die Verwendung einer spinsperre finden Sie unter Gewusst [wie: Verwenden von Spinlock für die Synchronisierung auf niedriger Ebene](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="bf610-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="bf610-103">Dreh Sperren können für Sperren auf Blatt Ebene verwendet werden, bei denen die Objekt Zuordnung, die durch die Verwendung eines <xref:System.Threading.Monitor>, in Größe oder aufgrund Garbage Collection Drucks impliziert wird, übermäßig teuer ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="bf610-104">Eine Drehsperre kann nützlich sein, um eine Blockierung zu vermeiden. Wenn Sie jedoch eine große Menge an Blockierung erwarten, sollten Sie aufgrund übermäßiger spinvorgänge wahrscheinlich keine Spin-Sperren verwenden.</span><span class="sxs-lookup"><span data-stu-id="bf610-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="bf610-105">Das drehen kann nützlich sein, wenn Sperren differenzierte und große Zahlen (z. b. eine Sperre pro Knoten in einer verknüpften Liste) und auch dann, wenn Sperrzeiten immer sehr kurz sind.</span><span class="sxs-lookup"><span data-stu-id="bf610-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="bf610-106">Im Allgemeinen sollte eine der folgenden Aktionen vermieden werden, während eine spinsperre aufrechterhalten wird:</span><span class="sxs-lookup"><span data-stu-id="bf610-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="bf610-107">blockieren</span><span class="sxs-lookup"><span data-stu-id="bf610-107">blocking,</span></span>  
  
-   <span data-ttu-id="bf610-108">das Aufrufen von etwas, das sich selbst blockieren kann,</span><span class="sxs-lookup"><span data-stu-id="bf610-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="bf610-109">gleichzeitige Speicherung von mehr als einer Drehsperre</span><span class="sxs-lookup"><span data-stu-id="bf610-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="bf610-110">dynamisch verteilte Aufrufe (Schnittstelle und Virtuale)</span><span class="sxs-lookup"><span data-stu-id="bf610-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="bf610-111">durch die statische Verteilung von Aufrufen an Code, den Sie nicht besitzen, oder</span><span class="sxs-lookup"><span data-stu-id="bf610-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="bf610-112">belegen von Speicher.</span><span class="sxs-lookup"><span data-stu-id="bf610-112">allocating memory.</span></span>  
  
 <span data-ttu-id="bf610-113"><xref:System.Threading.SpinLock> sollten nur verwendet werden, nachdem Sie ermittelt haben, dass dadurch die Leistung einer Anwendung verbessert wird.</span><span class="sxs-lookup"><span data-stu-id="bf610-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="bf610-114">Aus Leistungsgründen ist es auch wichtig zu beachten, dass <xref:System.Threading.SpinLock> ein Werttyp ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="bf610-115">Aus diesem Grund müssen Sie sehr darauf achten, eine <xref:System.Threading.SpinLock> Instanz nicht versehentlich zu kopieren, da die beiden Instanzen (die ursprüngliche und die Kopie) dann vollständig voneinander unabhängig sind, was wahrscheinlich zu einem fehlerhaften Verhalten der Anwendung führen würde.</span><span class="sxs-lookup"><span data-stu-id="bf610-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="bf610-116">Wenn eine <xref:System.Threading.SpinLock> Instanz umgangen werden muss, sollte Sie als Verweis und nicht als Wert übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="bf610-117">Speichern Sie keine <xref:System.Threading.SpinLock> Instanzen in schreibgeschützten Feldern.</span><span class="sxs-lookup"><span data-stu-id="bf610-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf610-118">Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Threading.SpinLock>verwendet wird:</span><span class="sxs-lookup"><span data-stu-id="bf610-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="bf610-119">Alle Member von <see cref="T:System.Threading.SpinLock" /> sind Thread sicher und können gleichzeitig von mehreren Threads verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-120">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-120">SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-121">Gewusst wie: Verwenden von SpinWait und Spinlock</span><span class="sxs-lookup"><span data-stu-id="bf610-121">How to: Use SpinWait and SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-122">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-122">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking"><span data-ttu-id="bf610-123">Gibt an, ob Thread-IDs zu Debugzwecken erfasst und verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-123">Whether to capture and use thread IDs for debugging purposes.</span></span></param>
        <summary><span data-ttu-id="bf610-124">Initialisiert eine neue Instanz der <see cref="T:System.Threading.SpinLock" />-Struktur mit der Option, Thread-IDs nachzuverfolgen, um das Debuggen zu vereinfachen.</span><span class="sxs-lookup"><span data-stu-id="bf610-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-125">Der Parameter lose Konstruktor für <xref:System.Threading.SpinLock> nachverfolgt den Thread Besitz.</span><span class="sxs-lookup"><span data-stu-id="bf610-125">The parameterless constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf610-126">Im folgenden Beispiel wird veranschaulicht, wie eine SpinLock verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="bf610-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-127">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-127">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-128">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-128">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-129">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-129">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter : bool -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="bf610-130">True, wenn die Sperre abgerufen wird, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-130">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="bf610-131"><paramref name="lockTaken" /> muss vor dem Aufrufen dieser Methode mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-131"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="bf610-132">Ruft die Sperre zuverlässig ab, sodass <paramref name="lockTaken" /> auch bei einer Ausnahme innerhalb des Methodenaufrufs zuverlässig untersucht werden kann, um zu bestimmen, ob die Sperre abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="bf610-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-133"><xref:System.Threading.SpinLock> ist eine nicht wieder eintretende Sperre, d. h., wenn ein Thread die Sperre besitzt, ist es nicht zulässig, die Sperre erneut einzugeben.</span><span class="sxs-lookup"><span data-stu-id="bf610-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="bf610-134">Wenn die Nachverfolgung von Thread Besitz aktiviert ist (unabhängig davon, ob Sie aktiviert ist und über <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>verfügbar ist), wird eine Ausnahme ausgelöst, wenn ein Thread versucht, erneut eine Sperre einzugeben, die er bereits enthält.</span><span class="sxs-lookup"><span data-stu-id="bf610-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="bf610-135">Wenn die Nachverfolgung von Thread Besitz jedoch deaktiviert ist, führt der Versuch, eine Sperre einzugeben, zu einem Deadlock.</span><span class="sxs-lookup"><span data-stu-id="bf610-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="bf610-136">Wenn Sie <xref:System.Threading.SpinLock.Exit%2A> aufrufen, ohne zuerst <xref:System.Threading.SpinLock.Enter%2A>, kann der interne Zustand des <xref:System.Threading.SpinLock> beschädigt werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bf610-137">Das <paramref name="lockTaken" />-Argument muss vor dem Aufrufen von Enter mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="bf610-138">Die Threadbesitznachverfolgung wird aktiviert, und der aktuelle Thread hat diese Sperre bereits abgerufen.</span><span class="sxs-lookup"><span data-stu-id="bf610-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-139">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-139">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-140">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-140">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-141">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-141">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bf610-142">Hebt die Sperre auf.</span><span class="sxs-lookup"><span data-stu-id="bf610-142">Releases the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bf610-143">Hebt die Sperre auf.</span><span class="sxs-lookup"><span data-stu-id="bf610-143">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-144">Die Standard Überladung von <xref:System.Threading.SpinLock.Exit%2A> bietet das gleiche Verhalten wie beim Aufrufen von <xref:System.Threading.SpinLock.Exit%2A> mit "true" als Argument.</span><span class="sxs-lookup"><span data-stu-id="bf610-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="bf610-145">Wenn Sie <xref:System.Threading.SpinLock.Exit%2A> aufrufen, ohne zuerst <xref:System.Threading.SpinLock.Enter%2A>, kann der interne Zustand des <xref:System.Threading.SpinLock> beschädigt werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bf610-146">Die Threadbesitznachverfolgung wird aktiviert, und der aktuelle Thread ist nicht Besitzer dieser Sperre.</span><span class="sxs-lookup"><span data-stu-id="bf610-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-147">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-147">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-148">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-148">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-149">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-149">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier"><span data-ttu-id="bf610-150">Ein boolescher Wert, der angibt, ob eine Arbeitsspeicherumgrenzung ausgegeben werden soll, um den Beendigungsvorgang sofort für andere Threads zu veröffentlichen.</span><span class="sxs-lookup"><span data-stu-id="bf610-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span></span></param>
        <summary><span data-ttu-id="bf610-151">Hebt die Sperre auf.</span><span class="sxs-lookup"><span data-stu-id="bf610-151">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-152">Wenn Sie <xref:System.Threading.SpinLock.Exit%2A> mit dem `useMemoryBarrier`-Argument, das auf "true" festgelegt ist, aufrufen, wird die Fairness der Sperre auf Kosten der Leistung verbessert.</span><span class="sxs-lookup"><span data-stu-id="bf610-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="bf610-153">Die standardmäßige <xref:System.Threading.SpinLock.Exit%2A> Überladung verhält sich wie, wenn true für `useMemoryBarrier`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="bf610-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="bf610-154">Wenn Sie <xref:System.Threading.SpinLock.Exit%2A> aufrufen, ohne zuerst <xref:System.Threading.SpinLock.Enter%2A>, kann der interne Zustand des <xref:System.Threading.SpinLock> beschädigt werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bf610-155">Die Threadbesitznachverfolgung wird aktiviert, und der aktuelle Thread ist nicht Besitzer dieser Sperre.</span><span class="sxs-lookup"><span data-stu-id="bf610-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-156">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-156">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-157">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-157">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-158">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-158">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf610-159">Ruft einen Wert ab, der angibt, ob die Sperre zurzeit von einem Thread verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="bf610-159">Gets whether the lock is currently held by any thread.</span></span></summary>
        <value><span data-ttu-id="bf610-160">True, wenn die Sperre zurzeit von einem Thread verwendet wird, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-160">true if the lock is currently held by any thread; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-161">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-161">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-162">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-162">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-163">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-163">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf610-164">Ruft einen Wert ab, der angibt, ob die Sperre vom aktuellen Thread verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="bf610-164">Gets whether the lock is held by the current thread.</span></span></summary>
        <value><span data-ttu-id="bf610-165">True, wenn die Sperre vom aktuellen Thread verwendet wird, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-165">true if the lock is held by the current thread; otherwise false.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-166">Wenn die Sperre für die Nachverfolgung von besitzerthreads initialisiert wurde, wird zurückgegeben, ob die Sperre vom aktuellen Thread abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="bf610-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="bf610-167">Es ist ungültig, diese Eigenschaft zu verwenden, wenn die Sperre initialisiert wurde, um den Thread Besitz nicht zu verfolgen.</span><span class="sxs-lookup"><span data-stu-id="bf610-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bf610-168">Die Threadbesitznachverfolgung wird deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="bf610-168">Thread ownership tracking is disabled.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-169">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-169">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-170">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-170">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-171">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-171">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf610-172">Ruft einen Wert ab, der angibt, ob die Threadbesitznachverfolgung für diese Instanz aktiviert ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-172">Gets whether thread ownership tracking is enabled for this instance.</span></span></summary>
        <value><span data-ttu-id="bf610-173">True, wenn die Threadbesitznachverfolgung für diese Instanz aktiviert ist, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-174">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-174">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-175">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-175">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-176">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-176">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bf610-177">Versucht, die Sperre zuverlässig abzurufen, sodass <paramref name="lockTaken" /> auch bei einer Ausnahme innerhalb des Methodenaufrufs zuverlässig untersucht werden kann, um zu bestimmen, ob die Sperre abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="bf610-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-178">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-178">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-179">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-179">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-180">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-180">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : bool -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="bf610-181">True, wenn die Sperre abgerufen wird, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-181">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="bf610-182"><paramref name="lockTaken" /> muss vor dem Aufrufen dieser Methode mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-182"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="bf610-183">Versucht, die Sperre zuverlässig abzurufen, sodass <paramref name="lockTaken" /> auch bei einer Ausnahme innerhalb des Methodenaufrufs zuverlässig untersucht werden kann, um zu bestimmen, ob die Sperre abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="bf610-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-184">Im Gegensatz zu <xref:System.Threading.SpinLock.Enter%2A>blockiert TryEnter nicht, bis die Sperre verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="bf610-185">Wenn die Sperre nicht verfügbar ist, wenn TryEnter aufgerufen wird, wird Sie sofort zurückgegeben, ohne dass weitere spinvorgänge durchlaufen werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bf610-186">Das <paramref name="lockTaken" />-Argument muss vor dem Aufrufen von TryEnter mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="bf610-187">Die Threadbesitznachverfolgung wird aktiviert, und der aktuelle Thread hat diese Sperre bereits abgerufen.</span><span class="sxs-lookup"><span data-stu-id="bf610-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-188">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-188">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-189">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-189">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-190">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-190">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int * bool -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="bf610-191">Die Anzahl von Millisekunden, die gewartet wird, oder <see cref="F:System.Threading.Timeout.Infinite" /> (-1) für Warten ohne Timeout.</span><span class="sxs-lookup"><span data-stu-id="bf610-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="bf610-192">True, wenn die Sperre abgerufen wird, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-192">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="bf610-193"><paramref name="lockTaken" /> muss vor dem Aufrufen dieser Methode mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-193"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="bf610-194">Versucht, die Sperre zuverlässig abzurufen, sodass <paramref name="lockTaken" /> auch bei einer Ausnahme innerhalb des Methodenaufrufs zuverlässig untersucht werden kann, um zu bestimmen, ob die Sperre abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="bf610-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-195">Im Gegensatz zu <xref:System.Threading.SpinLock.Enter%2A>blockiert TryEnter unbegrenzt nicht, bis die Sperre verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="bf610-196">Sie wird blockiert, bis entweder die Sperre verfügbar ist oder die `millisecondsTimeout` abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bf610-197"><paramref name="millisecondsTimeout" /> ist eine negative Zahl, jedoch nicht -1, was einen unbeschränkten Timeout darstellt.</span><span class="sxs-lookup"><span data-stu-id="bf610-197"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bf610-198">Das <paramref name="lockTaken" />-Argument muss vor dem Aufrufen von TryEnter mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="bf610-199">Die Threadbesitznachverfolgung wird aktiviert, und der aktuelle Thread hat diese Sperre bereits abgerufen.</span><span class="sxs-lookup"><span data-stu-id="bf610-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-200">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-200">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-201">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-201">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-202">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-202">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan * bool -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="bf610-203">Eine <see cref="T:System.TimeSpan" />-Struktur, die die Anzahl der zu wartenden Millisekunden angibt, oder eine <see cref="T:System.TimeSpan" />-Struktur, die -1 Millisekunden zum unendlichen Warten angibt.</span><span class="sxs-lookup"><span data-stu-id="bf610-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="bf610-204">True, wenn die Sperre abgerufen wird, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="bf610-204">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="bf610-205"><paramref name="lockTaken" /> muss vor dem Aufrufen dieser Methode mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-205"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="bf610-206">Versucht, die Sperre zuverlässig abzurufen, sodass <paramref name="lockTaken" /> auch bei einer Ausnahme innerhalb des Methodenaufrufs zuverlässig untersucht werden kann, um zu bestimmen, ob die Sperre abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="bf610-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf610-207">Im Gegensatz zu <xref:System.Threading.SpinLock.Enter%2A>blockiert TryEnter unbegrenzt nicht, bis die Sperre verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="bf610-208">Sie wird blockiert, bis entweder die Sperre verfügbar ist oder die `timeout` abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="bf610-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bf610-209"><paramref name="timeout" /> ist eine negative Zahl ungleich -1 Millisekunden, die ein unendliches Timeout darstellt, - oder - Timeout ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="bf610-209"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bf610-210">Das <paramref name="lockTaken" />-Argument muss vor dem Aufrufen von TryEnter mit false initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="bf610-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="bf610-211">Die Threadbesitznachverfolgung wird aktiviert, und der aktuelle Thread hat diese Sperre bereits abgerufen.</span><span class="sxs-lookup"><span data-stu-id="bf610-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="bf610-212">SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-212">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="bf610-213">Gewusst wie: Synchronisierung auf niedriger Ebene mit SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-213">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="bf610-214">Gewusst wie: Aktivieren des Modus zum Nachverfolgen von Threads in SpinLock</span><span class="sxs-lookup"><span data-stu-id="bf610-214">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

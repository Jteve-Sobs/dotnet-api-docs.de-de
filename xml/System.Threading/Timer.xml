<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d0582d4efcfd08ea59ebe6531a7f82eb9248913" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83518639" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Timer" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Timer" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fc70c-101">Stellt einen Mechanismus zum Ausführen einer Methode für einen Threadpoolthread in angegebenen Intervallen bereit.</span><span class="sxs-lookup"><span data-stu-id="fc70c-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span></span> <span data-ttu-id="fc70c-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-103">Verwenden Sie einen <xref:System.Threading.TimerCallback> Delegaten, um die Methode anzugeben, die der <xref:System.Threading.Timer> ausführen soll.</span><span class="sxs-lookup"><span data-stu-id="fc70c-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="fc70c-104">Die Signatur des <xref:System.Threading.TimerCallback> Delegaten lautet wie folgt:</span><span class="sxs-lookup"><span data-stu-id="fc70c-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="fc70c-105">Der Timer-Delegat wird angegeben, wenn der Timer erstellt wird, und kann nicht geändert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="fc70c-106">Die Methode wird nicht auf dem Thread ausgeführt, der den Timer erstellt hat. Es wird auf einem vom System bereitgestellten <xref:System.Threading.ThreadPool> Thread ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="fc70c-107">.NET enthält vier Klassen mit dem Namen `Timer`, die jeweils unterschiedliche Funktionen bieten:</span><span class="sxs-lookup"><span data-stu-id="fc70c-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="fc70c-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, das ein Ereignis auslöst und den Code in regelmäßigen Abständen in einem oder mehreren Ereignis senken ausführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="fc70c-109">Die Klasse ist für den Einsatz als serverbasierte oder Dienstkomponente in einer Multithreadumgebung vorgesehen. Sie hat keine Benutzeroberfläche und ist zur Laufzeit nicht sichtbar.</span><span class="sxs-lookup"><span data-stu-id="fc70c-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="fc70c-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, das in regelmäßigen Abständen eine einzelne Rückruf Methode für einen Thread Pool Thread ausführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="fc70c-111">Die Rückrufmethode wird definiert, wenn der Timer instanziiert wird, und kann nicht geändert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="fc70c-112">Wie die <xref:System.Timers.Timer?displayProperty=nameWithType>-Klasse ist diese Klasse für den Einsatz als serverbasierte oder Dienstkomponente in einer Multithreadumgebung vorgesehen. Sie hat keine Benutzeroberfläche und ist zur Laufzeit nicht sichtbar.</span><span class="sxs-lookup"><span data-stu-id="fc70c-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="fc70c-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (nur .NET Framework), eine Windows Forms Komponente, die ein Ereignis auslöst und den Code in regelmäßigen Abständen in einem oder mehreren Ereignis senken ausführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="fc70c-114">Die Komponente verfügt über keine Benutzeroberfläche und ist für die Verwendung in einer Single Thread-Umgebung konzipiert. Er wird im UI-Thread ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="fc70c-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (nur .NET Framework), eine ASP.NET-Komponente, die in regelmäßigen Abständen asynchrone oder synchrone Webseiten Postbacks ausführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="fc70c-116">Wenn Sie einen Timer erstellen, können Sie einen Zeitraum angeben, der vor der ersten Ausführung der Methode (Fälligkeits Zeit) und der Wartezeit zwischen nachfolgenden Ausführungen (Zeitraum) gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="fc70c-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="fc70c-117">Die <xref:System.Threading.Timer>-Klasse hat dieselbe Auflösung wie die Systemuhr.</span><span class="sxs-lookup"><span data-stu-id="fc70c-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="fc70c-118">Dies bedeutet Folgendes: Wenn der Zeitraum kleiner als die Auflösung der Systemuhr ist, wird der <xref:System.Threading.TimerCallback> Delegat in Intervallen ausgeführt, die durch die Auflösung der Systemuhr definiert werden, was ungefähr 15 Millisekunden auf Windows 7-und Windows 8-Systemen liegt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="fc70c-119">Sie können die Fälligkeits Zeit und den Zeitraum ändern oder den Timer mithilfe der <xref:System.Threading.Timer.Change%2A>-Methode deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc70c-120">Solange Sie eine <xref:System.Threading.Timer>verwenden, müssen Sie einen Verweis darauf aufbewahren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="fc70c-121">Wie bei jedem verwalteten Objekt unterliegt ein <xref:System.Threading.Timer> Garbage Collection, wenn keine Verweise darauf vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="fc70c-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="fc70c-122">Die Tatsache, dass eine <xref:System.Threading.Timer> noch aktiv ist, verhindert nicht, dass Sie erfasst wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="fc70c-123">Wenn ein Timer nicht mehr benötigt wird, verwenden Sie die <xref:System.Threading.Timer.Dispose%2A>-Methode, um die vom Timer reservierten Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="fc70c-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="fc70c-124">Beachten Sie, dass Rückrufe nach dem Aufrufen der <xref:System.Threading.Timer.Dispose>-Methoden Überladung auftreten können, da der Timer die Rückrufe für die Ausführung durch Thread Pool-Threads in die Warteschlange stellt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="fc70c-125">Sie können die <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>-Methoden Überladung verwenden, um zu warten, bis alle Rückrufe abgeschlossen sind.</span><span class="sxs-lookup"><span data-stu-id="fc70c-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="fc70c-126">Die vom Timer ausgeführte Rückruf Methode sollte Wiedereintritts fähig sein, da Sie für <xref:System.Threading.ThreadPool> Threads aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="fc70c-127">Der Rückruf kann gleichzeitig für zwei Threadpoolthreads ausgeführt werden, wenn das Zeit Geber Intervall kleiner ist als die Zeit, die zum Ausführen des Rückrufs benötigt wird, oder wenn alle Thread Pool-Threads verwendet werden und der Rückruf mehrmals in die Warteschlange eingereiht wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc70c-128"><xref:System.Threading.Timer?displayProperty=nameWithType> ist ein einfacher, einfacher Timer, der Rückruf Methoden verwendet und von Thread Pool-Threads bedient wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="fc70c-129">Es wird nicht empfohlen, mit Windows Forms zu verwenden, da die Rückrufe nicht im Benutzeroberflächen Thread auftreten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="fc70c-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> ist eine bessere Wahl für die Verwendung mit Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="fc70c-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="fc70c-131">Für serverbasierte Zeit Geber Funktionen können Sie die Verwendung von <xref:System.Timers.Timer?displayProperty=nameWithType>in Erwägung gezogen, wodurch Ereignisse ausgelöst werden und zusätzliche Features verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="fc70c-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-132">Im folgenden Beispiel wird eine `StatusChecker` Klasse definiert, die eine `CheckStatus` Methode enthält, deren Signatur mit der <xref:System.Threading.TimerCallback> Delegaten identisch ist.</span><span class="sxs-lookup"><span data-stu-id="fc70c-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="fc70c-133">Das `state`-Argument der `CheckStatus`-Methode ist ein <xref:System.Threading.AutoResetEvent> Objekt, das verwendet wird, um den Anwendungs Thread und den Thread Pool Thread zu synchronisieren, der den Rückruf Delegaten ausführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="fc70c-134">Die `StatusChecker`-Klasse umfasst auch zwei Zustandsvariablen:</span><span class="sxs-lookup"><span data-stu-id="fc70c-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="fc70c-135">Gibt an, wie oft die Rückruf Methode aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="fc70c-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="fc70c-136">Bestimmt, wie oft die Rückruf Methode maximal aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="fc70c-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="fc70c-137">Der Anwendungs Thread erstellt den Timer, der eine Sekunde wartet und dann alle 250 Millisekunden die `CheckStatus` Rückruf Methode ausführt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="fc70c-138">Der Anwendungs Thread wird dann blockiert, bis das <xref:System.Threading.AutoResetEvent> Objekt signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="fc70c-139">Wenn die `CheckStatus` Rückruf Methode `maxCount` Zeiten ausgeführt wird, ruft Sie die `AutoResetEvent.Set`-Methode auf, um den Zustand des <xref:System.Threading.AutoResetEvent> Objekts auf "signalisiert" festzulegen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="fc70c-140">Wenn dies das erste Mal geschieht, ruft der Anwendungs Thread die <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>-Methode auf, sodass die Rückruf Methode jetzt jede halbe Sekunde ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="fc70c-141">Es wird wieder blockiert, bis das <xref:System.Threading.AutoResetEvent> Objekt signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="fc70c-142">In diesem Fall wird der Timer durch Aufrufen seiner <xref:System.Threading.Timer.Dispose%2A>-Methode zerstört, und die Anwendung wird beendet.</span><span class="sxs-lookup"><span data-stu-id="fc70c-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="fc70c-143">Dieser Typ ist threadsicher.</span><span class="sxs-lookup"><span data-stu-id="fc70c-143">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-144">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-144">Timers</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="fc70c-145">Verwalteter Threadpool</span><span class="sxs-lookup"><span data-stu-id="fc70c-145">The Managed Thread Pool</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc70c-146">Initialisiert eine neue Instanz der Klasse <see langword="Timer" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-146">Initializes a new instance of the <see langword="Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="fc70c-147">Ein <see cref="T:System.Threading.TimerCallback" />-Delegat, der die auszuführende Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-147">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <summary><span data-ttu-id="fc70c-148">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Timer" />-Klasse mit einem unendlichen Zeitraum und einer unendlichen Vorlaufzeit, wobei das neu erstellte <see cref="T:System.Threading.Timer" />-Objekt als Zustandsobjekt verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-148">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-149">Nennen Sie diesen Konstruktor, wenn Sie das <xref:System.Threading.Timer>-Objekt selbst als Zustands Objekt verwenden möchten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-149">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="fc70c-150">Verwenden Sie nach dem Erstellen des Timers die <xref:System.Threading.Timer.Change%2A>-Methode, um das Intervall und die Fälligkeits Zeit festzulegen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-150">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="fc70c-151">Dieser Konstruktor gibt eine unbegrenzte Zeitspanne vor dem ersten Rückruf und ein unendliches Intervall zwischen den Rückrufen an, um zu verhindern, dass der erste Rückruf auftritt, bevor das <xref:System.Threading.Timer> Objekt dem Zustands Objekt zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-151">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="fc70c-152">Die für `callback` angegebene Methode sollte Wiedereintritts fähig sein, da Sie für <xref:System.Threading.ThreadPool> Threads aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-152">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="fc70c-153">Die-Methode kann gleichzeitig für zwei Threadpoolthreads ausgeführt werden, wenn das Zeit Geber Intervall kleiner ist als die Zeit, die zum Ausführen der Methode benötigt wird, oder wenn alle Thread Pool-Threads verwendet werden und die Methode mehrmals in die Warteschlange eingereiht wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-153">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-154">Im folgenden Codebeispiel wird ein neuer Timer erstellt, wobei der Timer selbst als Zustands Objekt verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-154">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="fc70c-155">Die <xref:System.Threading.Timer.Change%2A>-Methode wird verwendet, um den Timer zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-155">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="fc70c-156">Wenn der Timer-Rückruf auftritt, wird das State-Objekt verwendet, um den Timer zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-156">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="fc70c-157">Ein <see cref="T:System.Threading.TimerCallback" />-Delegat, der die auszuführende Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-157">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="fc70c-158">Ein Objekt, das die von der Rückrufmethode zu verwendenden Informationen enthält, oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-158">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="fc70c-159">Die in Millisekunden angegebene Zeitspanne, die gewartet werden soll, bis <paramref name="callback" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-159">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="fc70c-160">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um das Starten des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-160">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="fc70c-161">Geben Sie 0 (null) an, um den Timer sofort zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-161">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-162">Das in Millisekunden angegebene Zeitintervall zwischen den Aufrufen von <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-162">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="fc70c-163">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-163">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-164">Initialisiert eine neue Instanz der <see langword="Timer" />-Klasse unter Verwendung einer 32-Bit-Ganzzahl mit Vorzeichen zum Angeben des Zeitintervalls.</span><span class="sxs-lookup"><span data-stu-id="fc70c-164">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-165">Der durch den `callback`-Parameter angegebene Delegat wird nach `dueTime` verstrichen und danach jedes Mal, wenn das `period` Zeitintervall abläuft, aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-165">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="fc70c-166">Wenn `dueTime` NULL (0) ist, wird `callback` sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-166">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="fc70c-167">Wenn `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird `callback` nicht aufgerufen. der Timer ist deaktiviert, kann jedoch durch Aufrufen der <xref:System.Threading.Timer.Change%2A>-Methode erneut aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-167">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-168">Da die <xref:System.Threading.Timer>-Klasse dieselbe Auflösung wie die Systemuhr hat, die ungefähr 15 Millisekunden auf Windows 7-und Windows 8-Systemen beträgt, wird der `callback` Delegat in Intervallen ausgeführt, die durch die Auflösung der Systemuhr definiert sind, wenn `period` kleiner als die Auflösung der Systemuhr ist.</span><span class="sxs-lookup"><span data-stu-id="fc70c-168">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="fc70c-169">Wenn `period` NULL (0) oder <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> ist und `dueTime` nicht <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird `callback` einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch mit der <xref:System.Threading.Timer.Change%2A>-Methode wieder aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-169">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-170">Die für `callback` angegebene Methode sollte Wiedereintritts fähig sein, da Sie für <xref:System.Threading.ThreadPool> Threads aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-170">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="fc70c-171">Die-Methode kann gleichzeitig für zwei Threadpoolthreads ausgeführt werden, wenn das Zeit Geber Intervall kleiner ist als die Zeit, die zum Ausführen der Methode benötigt wird, oder wenn alle Thread Pool-Threads verwendet werden und die Methode mehrmals in die Warteschlange eingereiht wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-171">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-172">Im folgenden Codebeispiel wird gezeigt, wie ein `TimerCallback` Delegaten erstellt und eine neue Instanz der `Timer`-Klasse initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-172">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-173">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-173">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fc70c-174">Der Parameter <paramref name="callback" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-174">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-175">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-175">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="fc70c-176">Ein <see cref="T:System.Threading.TimerCallback" />-Delegat, der die auszuführende Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-176">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="fc70c-177">Ein Objekt, das die von der Rückrufmethode zu verwendenden Informationen enthält, oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-177">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="fc70c-178">Die in Millisekunden angegebene Zeitspanne, die gewartet werden soll, bis <paramref name="callback" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-178">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="fc70c-179">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um das Starten des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="fc70c-180">Geben Sie 0 (null) an, um den Timer sofort zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-180">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-181">Das in Millisekunden angegebene Zeitintervall zwischen den Aufrufen von <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-181">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="fc70c-182">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-182">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-183">Initialisiert eine neue Instanz der <see langword="Timer" />-Klasse unter Verwendung von 64-Bit-Ganzzahlen mit Vorzeichen zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-183">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-184">Der durch den `callback`-Parameter angegebene Delegat wird nach `dueTime` verstrichen und danach jedes Mal, wenn das `period` Zeitintervall abläuft, aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-184">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="fc70c-185">Wenn `dueTime` NULL (0) ist, wird `callback` sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-185">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="fc70c-186">Wenn `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird `callback` nicht aufgerufen. der Timer ist deaktiviert, kann jedoch durch Aufrufen der <xref:System.Threading.Timer.Change%2A>-Methode erneut aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-186">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-187">Da die <xref:System.Threading.Timer>-Klasse dieselbe Auflösung wie die Systemuhr hat, die ungefähr 15 Millisekunden auf Windows 7-und Windows 8-Systemen beträgt, wird der `callback` Delegat in Intervallen ausgeführt, die durch die Auflösung der Systemuhr definiert sind, wenn `period` kleiner als die Auflösung der Systemuhr ist.</span><span class="sxs-lookup"><span data-stu-id="fc70c-187">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="fc70c-188">Wenn `period` NULL (0) oder <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> ist und `dueTime` nicht <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird `callback` einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch mit der <xref:System.Threading.Timer.Change%2A>-Methode wieder aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-188">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-189">Die für `callback` angegebene Methode sollte Wiedereintritts fähig sein, da Sie für <xref:System.Threading.ThreadPool> Threads aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-189">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="fc70c-190">Die-Methode kann gleichzeitig für zwei Threadpoolthreads ausgeführt werden, wenn das Zeit Geber Intervall kleiner ist als die Zeit, die zum Ausführen der Methode benötigt wird, oder wenn alle Thread Pool-Threads verwendet werden und die Methode mehrmals in die Warteschlange eingereiht wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-190">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-191">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-191">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fc70c-192">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter ist größer als 4.294.967.294.</span><span class="sxs-lookup"><span data-stu-id="fc70c-192">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-193">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-193">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="fc70c-194">Ein Delegat, der eine auszuführende Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-194">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="fc70c-195">Ein Objekt, das die von der Rückrufmethode zu verwendenden Informationen enthält, oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-195">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="fc70c-196">Die Zeitspanne, die gewartet werden soll, bis der <paramref name="callback" />-Parameter die zugehörigen Methoden aufruft.</span><span class="sxs-lookup"><span data-stu-id="fc70c-196">The amount of time to delay before the <paramref name="callback" /> parameter invokes its methods.</span></span> <span data-ttu-id="fc70c-197">Geben Sie „-1“ Millisekunde an, um das Starten des Timers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-197">Specify negative one (-1) milliseconds to prevent the timer from starting.</span></span> <span data-ttu-id="fc70c-198">Geben Sie 0 (null) an, um den Timer sofort zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-198">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-199">Das Zeitintervall zwischen Aufrufen der Methoden, auf die durch <paramref name="callback" /> verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-199">The time interval between invocations of the methods referenced by <paramref name="callback" />.</span></span> <span data-ttu-id="fc70c-200">Geben Sie -1 Millisekunde an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-200">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-201">Initialisiert eine neue Instanz der <see langword="Timer" />-Klasse unter Verwendung von <see cref="T:System.TimeSpan" />-Werten zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-201">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-202">Der durch den `callback`-Parameter angegebene Delegat wird nach `dueTime` verstrichen und danach jedes Mal, wenn das `period` Zeitintervall abläuft, aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-202">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="fc70c-203">Wenn `dueTime` NULL (0) ist, wird `callback` sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-203">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="fc70c-204">Wenn `dueTime` eine negative (-1) Millisekunde ist, wird `callback` nicht aufgerufen. der Timer ist deaktiviert, kann jedoch durch Aufrufen der <xref:System.Threading.Timer.Change%2A>-Methode erneut aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-204">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-205">Da die <xref:System.Threading.Timer>-Klasse dieselbe Auflösung wie die Systemuhr hat, die ungefähr 15 Millisekunden auf Windows 7-und Windows 8-Systemen beträgt, wird der `callback` Delegat in Intervallen ausgeführt, die durch die Auflösung der Systemuhr definiert sind, wenn `period` kleiner als die Auflösung der Systemuhr ist.</span><span class="sxs-lookup"><span data-stu-id="fc70c-205">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="fc70c-206">Wenn `period` NULL (0) oder eine negative (-1) Millisekunde ist und `dueTime` positiv ist, wird `callback` einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch mit der <xref:System.Threading.Timer.Change%2A>-Methode wieder aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-206">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-207">Die für `callback` angegebene Methode sollte Wiedereintritts fähig sein, da Sie für <xref:System.Threading.ThreadPool> Threads aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-207">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="fc70c-208">Die-Methode kann gleichzeitig für zwei Threadpoolthreads ausgeführt werden, wenn das Zeit Geber Intervall kleiner ist als die Zeit, die zum Ausführen der Methode benötigt wird, oder wenn alle Thread Pool-Threads verwendet werden und die Methode mehrmals in die Warteschlange eingereiht wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-208">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-209">Im folgenden Codebeispiel wird gezeigt, wie ein `TimerCallback` Delegaten erstellt und eine neue Instanz der `Timer`-Klasse initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-209">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-210">Die Anzahl der Millisekunden im Wert von <paramref name="dueTime" /> oder <paramref name="period" /> ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" /> oder größer als <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-210">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fc70c-211">Der Parameter <paramref name="callback" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-211">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-212">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-212">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="fc70c-213">Ein Delegat, der eine auszuführende Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="fc70c-213">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="fc70c-214">Ein Objekt, das die von der Rückrufmethode zu verwendenden Informationen enthält, oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-214">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="fc70c-215">Die in Millisekunden angegebene Zeitspanne, die gewartet werden soll, bis <paramref name="callback" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-215">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="fc70c-216">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um das Starten des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-216">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="fc70c-217">Geben Sie 0 (null) an, um den Timer sofort zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-217">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-218">Das in Millisekunden angegebene Zeitintervall zwischen den Aufrufen von <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-218">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="fc70c-219">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-219">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-220">Initialisiert eine neue Instanz der <see langword="Timer" />-Klasse unter Verwendung von 32-Bit-Ganzzahlen ohne Vorzeichen zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-220">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-221">Der durch den `callback`-Parameter angegebene Delegat wird nach `dueTime` verstrichen und danach jedes Mal, wenn das `period` Zeitintervall abläuft, aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-221">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="fc70c-222">Wenn `dueTime` NULL (0) ist, wird `callback` sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-222">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="fc70c-223">Wenn `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird `callback` nicht aufgerufen. der Timer ist deaktiviert, kann jedoch durch Aufrufen der <xref:System.Threading.Timer.Change%2A>-Methode erneut aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-223">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-224">Da die <xref:System.Threading.Timer>-Klasse dieselbe Auflösung wie die Systemuhr hat, die ungefähr 15 Millisekunden auf Windows 7-und Windows 8-Systemen beträgt, wird der `callback` Delegat in Intervallen ausgeführt, die durch die Auflösung der Systemuhr definiert sind, wenn `period` kleiner als die Auflösung der Systemuhr ist.</span><span class="sxs-lookup"><span data-stu-id="fc70c-224">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="fc70c-225">Wenn `period` NULL (0) oder <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> ist und `dueTime` nicht <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird `callback` einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch mit der <xref:System.Threading.Timer.Change%2A>-Methode wieder aktiviert werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-225">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="fc70c-226">Die für `callback` angegebene Methode sollte Wiedereintritts fähig sein, da Sie für <xref:System.Threading.ThreadPool> Threads aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-226">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="fc70c-227">Die-Methode kann gleichzeitig für zwei Threadpoolthreads ausgeführt werden, wenn das Zeit Geber Intervall kleiner ist als die Zeit, die zum Ausführen der Methode benötigt wird, oder wenn alle Thread Pool-Threads verwendet werden und die Methode mehrmals in die Warteschlange eingereiht wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-227">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-228">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-228">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fc70c-229">Der Parameter <paramref name="callback" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-229">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-230">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-230">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static long ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Timer.ActiveCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long ActiveCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int64" Usage="System.Threading.Timer.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fc70c-231">Ruft die Anzahl der derzeit aktiven Timer ab.</span><span class="sxs-lookup"><span data-stu-id="fc70c-231">Gets the number of timers that are currently active.</span></span> <span data-ttu-id="fc70c-232">Ein aktiver Timer wird dafür registriert, zu einem späteren Zeitpunkt zu laufen, und dieser wurde noch nicht abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-232">An active timer is registered to tick at some point in the future, and has not yet been canceled.</span></span></summary>
        <value><span data-ttu-id="fc70c-233">Die Anzahl der derzeit aktiven Timer.</span><span class="sxs-lookup"><span data-stu-id="fc70c-233">The number of timers that are currently active.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc70c-234">Ändert die Startzeit und das Intervall zwischen Methodenaufrufen für einen Zeitgeber.</span><span class="sxs-lookup"><span data-stu-id="fc70c-234">Changes the start time and the interval between method invocations for a timer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="fc70c-235">Die in Millisekunden angegebene Zeitspanne, die gewartet werden soll, bis die beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebene Rückrufmethode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-235">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="fc70c-236">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um den Neustart des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-236">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="fc70c-237">Geben Sie 0 (null) an, um den Timer sofort neu zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-237">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-238">Das Zeitintervall zwischen den Aufrufen der beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebenen Rückrufmethode in Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-238">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="fc70c-239">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-239">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-240">Ändert die Startzeit und das Intervall zwischen Methodenaufrufen für einen Timer unter Verwendung von 32-Bit-Ganzzahlen mit Vorzeichen zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-240">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="fc70c-241"><see langword="true" />, wenn der Timer erfolgreich aktualisiert wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-241"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-242">Die Rückruf Methode wird einmal aufgerufen, nachdem `dueTime` abläuft, und anschließend jedes Mal, wenn das durch `period` angegebene Zeitintervall abläuft.</span><span class="sxs-lookup"><span data-stu-id="fc70c-242">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="fc70c-243">Wenn `dueTime` NULL (0) ist, wird die Rückruf Methode sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-243">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="fc70c-244">Wenn `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird die Rückruf Methode niemals aufgerufen. der Timer ist deaktiviert, kann jedoch erneut aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `dueTime`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-244">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="fc70c-245">Wenn `period` NULL (0) oder <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist und `dueTime` nicht <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird die Rückruf Methode einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch wieder aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `period`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-245">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="fc70c-246">Die <xref:System.Threading.Timer.Change%2A>-Methode kann vom <xref:System.Threading.TimerCallback> Delegaten aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-246">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-247">Im folgenden Codebeispiel wird veranschaulicht, wie ein `Timer` gestartet wird und nach einer festgelegten Anzahl von Aufrufen dessen Zeitraum geändert wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-247">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fc70c-248">Der <see cref="T:System.Threading.Timer" /> wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="fc70c-248">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-249">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-249">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-250">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-250">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="fc70c-251">Die in Millisekunden angegebene Zeitspanne, die gewartet werden soll, bis die beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebene Rückrufmethode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-251">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="fc70c-252">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um den Neustart des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-252">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="fc70c-253">Geben Sie 0 (null) an, um den Timer sofort neu zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-253">Specify zero (0) to restart the timer immediately.</span></span>  <span data-ttu-id="fc70c-254">Dieser Wert muss kleiner als oder gleich 4294967294 sein.</span><span class="sxs-lookup"><span data-stu-id="fc70c-254">This value must be less than or equal to 4294967294.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-255">Das Zeitintervall zwischen den Aufrufen der beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebenen Rückrufmethode in Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-255">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="fc70c-256">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-256">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-257">Ändert die Startzeit und das Intervall zwischen Methodenaufrufen für einen Zeitgeber unter Verwendung von 64-Bit-Ganzzahlen mit Vorzeichen zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-257">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="fc70c-258"><see langword="true" />, wenn der Timer erfolgreich aktualisiert wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-258"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-259">Die Rückruf Methode wird einmal aufgerufen, nachdem `dueTime` abläuft, und anschließend jedes Mal, wenn das durch `period` angegebene Zeitintervall abläuft.</span><span class="sxs-lookup"><span data-stu-id="fc70c-259">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="fc70c-260">Wenn `dueTime` NULL (0) ist, wird die Rückruf Methode sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-260">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="fc70c-261">Wenn `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird die Rückruf Methode niemals aufgerufen. der Timer ist deaktiviert, kann jedoch erneut aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `dueTime`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-261">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="fc70c-262">Wenn `period` NULL (0) oder <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist und `dueTime` nicht <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird die Rückruf Methode einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch wieder aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `period`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-262">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="fc70c-263">Die <xref:System.Threading.Timer.Change%2A>-Methode kann vom <xref:System.Threading.TimerCallback> Delegaten aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-263">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fc70c-264">Der <see cref="T:System.Threading.Timer" /> wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="fc70c-264">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-265"><paramref name="dueTime" /> oder <paramref name="period" /> ist kleiner als -1.</span><span class="sxs-lookup"><span data-stu-id="fc70c-265"><paramref name="dueTime" /> or <paramref name="period" /> is less than -1.</span></span>
        
<span data-ttu-id="fc70c-266">Oder</span><span class="sxs-lookup"><span data-stu-id="fc70c-266">-or-</span></span>

<span data-ttu-id="fc70c-267"><paramref name="dueTime" /> oder <paramref name="period" /> ist größer als 4294967294.</span><span class="sxs-lookup"><span data-stu-id="fc70c-267"><paramref name="dueTime" /> or <paramref name="period" /> is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-268">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-268">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="fc70c-269">Eine <see cref="T:System.TimeSpan" /> zum Darstellen der Zeitspanne, die gewartet werden soll, bis die beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebene Rückrufmethode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-269">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="fc70c-270">Geben Sie -1 Millisekunde an, um das erneute Starten des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-270">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span></span> <span data-ttu-id="fc70c-271">Geben Sie 0 (null) an, um den Timer sofort neu zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-271">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-272">Das Zeitintervall zwischen den Aufrufen der beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebenen Rückrufmethode.</span><span class="sxs-lookup"><span data-stu-id="fc70c-272">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="fc70c-273">Geben Sie -1 Millisekunde an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-273">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-274">Ändert die Startzeit und das Intervall zwischen Methodenaufrufen für einen Zeitgeber unter Verwendung von <see cref="T:System.TimeSpan" />-Werten zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-274">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="fc70c-275"><see langword="true" />, wenn der Timer erfolgreich aktualisiert wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-275"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-276">Die Rückruf Methode wird einmal aufgerufen, nachdem `dueTime` abläuft, und anschließend jedes Mal, wenn das durch `period` angegebene Zeitintervall abläuft.</span><span class="sxs-lookup"><span data-stu-id="fc70c-276">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="fc70c-277">Wenn `dueTime` NULL (0) ist, wird die Rückruf Methode sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-277">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="fc70c-278">Wenn `dueTime` eine negative (-1) Millisekunde ist, wird die Rückruf Methode niemals aufgerufen. der Timer ist deaktiviert, kann jedoch erneut aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `dueTime`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-278">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="fc70c-279">Wenn `period` NULL (0) oder eine negative (-1) Millisekunde ist und `dueTime` positiv ist, wird die Rückruf Methode einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch wieder aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein Wert größer als 0 (null) für `period`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-279">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="fc70c-280">Die <xref:System.Threading.Timer.Change%2A>-Methode kann vom <xref:System.Threading.TimerCallback> Delegaten aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-280">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-281">Im folgenden Codebeispiel wird veranschaulicht, wie ein `Timer` gestartet wird und nach einer festgelegten Anzahl von Aufrufen dessen Zeitraum geändert wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-281">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fc70c-282">Der <see cref="T:System.Threading.Timer" /> wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="fc70c-282">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fc70c-283">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter, angegeben in Millisekunden, ist kleiner als -1.</span><span class="sxs-lookup"><span data-stu-id="fc70c-283">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fc70c-284">Der <paramref name="dueTime" />-Parameter oder der <paramref name="period" />-Parameter, angegeben in Millisekunden, ist größer als 4294967294.</span><span class="sxs-lookup"><span data-stu-id="fc70c-284">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-285">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-285">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="fc70c-286">Die in Millisekunden angegebene Zeitspanne, die gewartet werden soll, bis die beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebene Rückrufmethode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-286">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="fc70c-287">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um den Neustart des Zeitgebers zu verhindern.</span><span class="sxs-lookup"><span data-stu-id="fc70c-287">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="fc70c-288">Geben Sie 0 (null) an, um den Timer sofort neu zu starten.</span><span class="sxs-lookup"><span data-stu-id="fc70c-288">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="fc70c-289">Das Zeitintervall zwischen den Aufrufen der beim Erstellen von <see cref="T:System.Threading.Timer" /> angegebenen Rückrufmethode in Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-289">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="fc70c-290">Geben Sie <see cref="F:System.Threading.Timeout.Infinite" /> an, um periodisches Signalisieren zu deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="fc70c-290">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="fc70c-291">Ändert die Startzeit und das Intervall zwischen Methodenaufrufen für einen Timer unter Verwendung von 32-Bit-Ganzzahlen ohne Vorzeichen zum Messen von Zeitintervallen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-291">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="fc70c-292"><see langword="true" />, wenn der Timer erfolgreich aktualisiert wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-292"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-293">Die Rückruf Methode wird einmal aufgerufen, nachdem `dueTime` abläuft, und anschließend jedes Mal, wenn das durch `period` angegebene Zeitintervall abläuft.</span><span class="sxs-lookup"><span data-stu-id="fc70c-293">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="fc70c-294">Wenn `dueTime` NULL (0) ist, wird die Rückruf Methode sofort aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="fc70c-294">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="fc70c-295">Wenn `dueTime` <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird die Rückruf Methode niemals aufgerufen. der Timer ist deaktiviert, kann jedoch erneut aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `dueTime`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-295">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="fc70c-296">Wenn `period` NULL (0) oder <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist und `dueTime` nicht <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>ist, wird die Rückruf Methode einmal aufgerufen. das periodische Verhalten des Timers ist deaktiviert, kann jedoch wieder aktiviert werden, indem <xref:System.Threading.Timer.Change%2A> aufgerufen und ein positiver Wert für `period`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-296">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="fc70c-297">Die <xref:System.Threading.Timer.Change%2A>-Methode kann vom <xref:System.Threading.TimerCallback> Delegaten aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-297">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fc70c-298">Der <see cref="T:System.Threading.Timer" /> wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="fc70c-298">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-299">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-299">Timers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fc70c-300">Gibt alle von der aktuellen Instanz von <see cref="T:System.Threading.Timer" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="fc70c-300">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc70c-301">Gibt alle von der aktuellen Instanz von <see cref="T:System.Threading.Timer" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="fc70c-301">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-302">Durch Aufrufen von `Dispose` können die Ressourcen, die vom <xref:System.Threading.Timer> verwendet werden, für andere Zwecke neu zugeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-302">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="fc70c-303">Weitere Informationen zu `Dispose`finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="fc70c-303">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc70c-304">Rückrufe können nach dem Aufrufen der <xref:System.Threading.Timer.Dispose>-Methoden Überladung auftreten, da der Timer für die Ausführung durch Thread Pool-Threads Rückrufe anfordert.</span><span class="sxs-lookup"><span data-stu-id="fc70c-304">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="fc70c-305">Sie können die <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>-Methoden Überladung verwenden, um zu warten, bis alle Rückrufe abgeschlossen sind.</span><span class="sxs-lookup"><span data-stu-id="fc70c-305">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc70c-306">Im folgenden Codebeispiel wird gezeigt, wie die von einem `Timer`reservierten Ressourcen freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-306">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-307">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-307">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><span data-ttu-id="fc70c-308">Das zu signalisierende <see cref="T:System.Threading.WaitHandle" />, wenn der <see langword="Timer" /> freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="fc70c-308">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span></span></param>
        <summary><span data-ttu-id="fc70c-309">Gibt alle von der aktuellen Instanz von <see cref="T:System.Threading.Timer" /> verwendeten Ressourcen frei, und signalisiert das Freigeben des Zeitgebers.</span><span class="sxs-lookup"><span data-stu-id="fc70c-309">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span></span></summary>
        <returns><span data-ttu-id="fc70c-310"><see langword="true" />, wenn die Funktion erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-310"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc70c-311">Durch Aufrufen von `Dispose` können die Ressourcen, die vom <xref:System.Threading.Timer> verwendet werden, für andere Zwecke neu zugeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-311">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="fc70c-312">Weitere Informationen zu `Dispose`finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="fc70c-312">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="fc70c-313">Wenn diese Methode abgeschlossen ist, wird die vom `notifyObject`-Parameter angegebene <xref:System.Threading.WaitHandle> signalisiert. Verwenden Sie diese Überladung der <xref:System.Threading.Timer.Dispose%2A>-Methode, wenn Sie blockieren möchten, bis Sie sicher sind, dass der Timer verworfen wurde.</span><span class="sxs-lookup"><span data-stu-id="fc70c-313">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="fc70c-314">Der Timer wird erst freigegeben, wenn alle derzeit in der Warteschlange befindlichen Rückrufe abgeschlossen sind.</span><span class="sxs-lookup"><span data-stu-id="fc70c-314">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fc70c-315">Wenn der Rückruf die <xref:System.Threading.Timer.Change%2A>-Methode verwendet, um den `dueTime`-Parameter auf NULL festzulegen, kann eine Racebedingung auftreten, wenn die <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>-Methoden Überladung aufgerufen wird: Wenn der Timer einen neuen Rückruf in die Warteschlange stellt, bevor die <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>-Methoden Überladung erkennt, dass keine Rückrufe in die Warteschlange eingereiht sind <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>, wird Andernfalls wird der Timer verworfen, während der neue Rückruf in die Warteschlange eingereiht wird, und eine <xref:System.ObjectDisposedException> wird ausgelöst, wenn der neue Rückruf die <xref:System.Threading.Timer.Change%2A>-Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="fc70c-315">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fc70c-316">Der Parameter <paramref name="notifyObject" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="fc70c-316">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="fc70c-317">Timer</span><span class="sxs-lookup"><span data-stu-id="fc70c-317">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc70c-318">Gibt alle von der aktuellen Instanz von <see cref="T:System.Threading.Timer" /> verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="fc70c-318">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <returns><span data-ttu-id="fc70c-319">Ein <see cref="T:System.Threading.Tasks.ValueTask" />, der abgeschlossen wird, wenn alle dem Timer zugeordneten Aufgaben ausgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="fc70c-319">A <see cref="T:System.Threading.Tasks.ValueTask" /> that completes when all work associated with the timer has ceased.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fc70c-320">Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="fc70c-320">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

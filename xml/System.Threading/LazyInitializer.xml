<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec3544b1bf00297743ac8eb1e4eb459970889d98" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46609790" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9c4bd-101">Stellt verzögerte Initialisierungsroutinen bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9c4bd-101">Provides lazy initialization routines.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c4bd-102">Diese Routinen vermeiden, dass ordnen Sie eine dedizierte, verzögerte Initialisierung Instanz, die stattdessen Verweise verwenden, um sicherzustellen, dass Ziele initialisiert werden, sobald darauf zugegriffen wird.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c4bd-103">Im folgenden Beispiel wird veranschaulicht, wie EnsureInitialized verzögert initialisiert einen Wert, der über einen booleschen Wert zum Nachverfolgen, ob die Initialisierung bereits geschehen ist und ein Objekt, das als die Sperre für gegenseitigen Ausschluss verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="9c4bd-104">Die Methoden der <see cref="T:System.Threading.LazyInitializer" /> sind threadsicher und können von mehreren Threads gleichzeitig aufgerufen werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9c4bd-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
      <span data-ttu-id="9c4bd-105">Verzögerte Initialisierung</span>
      <span class="sxs-lookup">
        <span data-stu-id="9c4bd-105">Lazy Initialization</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9c4bd-106">Initialisiert einen Zieltyp, wenn der noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-106">Initializes a target type if it hasn't already been initialized.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="9c4bd-107">Der Typ des zu initialisierenden Verweises.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-107">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="9c4bd-108">Ein Verweis des Typs <c>T</c>, der initialisiert werden soll, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-108">A reference of type <c>T</c> to initialize if it has not already been initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9c4bd-109">Initialisiert einen Zielverweistyp mit seinem Standardkonstruktor, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-109">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9c4bd-110">Der initialisierte Verweis vom Typ <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-110">The initialized reference of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c4bd-111">Diese Methode kann nur für Referenztypen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-111">This method may only be used on reference types.</span></span> <span data-ttu-id="9c4bd-112">Um sicherzustellen, dass die Initialisierung von Werttypen, finden Sie unter anderen Überladungen der EnsureInitialized auf.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-112">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="9c4bd-113">Diese Methode kann verwendet werden gleichzeitig von mehreren Threads zum Initialisieren `target`.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-113">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="9c4bd-114">Wenn mehrere Threads gleichzeitig auf diese Methode, mehrere Instanzen von Zugriff auf `T` Mai erstellt werden, aber nur eine wird, die in gespeichert werden `target`.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-114">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="9c4bd-115">In solch einem Vorkommen wird diese Methode nicht die Objekte verwerfen, die nicht gespeichert wurden.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-115">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="9c4bd-116">Wenn solche Objekte freigegeben werden müssen, ist es Aufgabe des Aufrufers, um zu bestimmen, ob ein Objekt nicht verwendet wurde und klicken Sie dann das Objekt entsprechend zu verwerfen.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-116">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9c4bd-117">Berechtigungen, auf den Konstruktor des Typs <paramref name="T" /> zuzugreifen, haben gefehlt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-117">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="9c4bd-118">Der Typ <paramref name="T" /> besitzt keinen Standardkonstruktor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-118">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="9c4bd-119">Verzögerte Initialisierung</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-119">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="9c4bd-120">Der Verweistyp des zu initialisierenden Verweises.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-120">The reference type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="9c4bd-121">Der Verweis des Typs <c>T</c>, der initialisiert werden soll, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-121">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="9c4bd-122">Die Funktion, die aufgerufen wird, um den Verweis zu initialisieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-122">The function that is called to initialize the reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9c4bd-123">Initialisiert einen Zielverweistyp mit einer angegebenen Funktion, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-123">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9c4bd-124">Der initialisierte Wert vom Typ <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-124">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c4bd-125">Diese Methode kann nur bei Verweistypen, verwendet werden und `valueFactory` möglicherweise keinen null-Verweis (Nothing in Visual Basic) zurück.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-125">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="9c4bd-126">Um sicherzustellen, dass die Initialisierung von Werttypen oder Verweistypen null zulassen, finden Sie unter anderen Überladungen der EnsureInitialized auf.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-126">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="9c4bd-127">Diese Methode kann verwendet werden gleichzeitig von mehreren Threads zum Initialisieren `target`.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-127">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="9c4bd-128">Wenn mehrere Threads gleichzeitig auf diese Methode, mehrere Instanzen von Zugriff auf `T` Mai erstellt werden, aber nur eine wird, die in gespeichert werden `target`.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-128">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="9c4bd-129">In solch einem Vorkommen wird diese Methode nicht die Objekte verwerfen, die nicht gespeichert wurden.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-129">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="9c4bd-130">Wenn solche Objekte freigegeben werden müssen, ist es Aufgabe des Aufrufers, um zu bestimmen, ob ein Objekt nicht verwendet wurde und klicken Sie dann das Objekt entsprechend zu verwerfen.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-130">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="9c4bd-131">Der Typ <paramref name="T" /> besitzt keinen Standardkonstruktor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-131">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9c4bd-132">
            <paramref name="valueFactory" /> gibt null (Nothing in Visual Basic) zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-132">
              <paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="9c4bd-133">Verzögerte Initialisierung</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-133">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="9c4bd-134">Der Typ des zu initialisierenden Verweises.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-134">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="9c4bd-135">Ein Verweis oder Wert des Typs <c>T</c>, der initialisiert werden soll, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-135">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="9c4bd-136">Ein Verweis auf einen booleschen Wert, der bestimmt, ob das Ziel bereits initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-136">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="9c4bd-137">Ein Verweis auf ein Objekt, das für die Initialisierung von <c>target</c> als sich gegenseitig ausschließende Sperre verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-137">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="9c4bd-138">Wenn <c>syncLock</c><see langword="null" /> ist, wird ein neues Objekt instanziiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-138">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9c4bd-139">Initialisiert einen Zielverweis- oder Werttyp mit seinem Standardkonstruktor, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-139">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9c4bd-140">Der initialisierte Wert vom Typ <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-140">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c4bd-141">Wenn `intialized` als "true" angegeben ist, wird keine weitere Initialisierung durchgeführt.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-141">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9c4bd-142">Berechtigungen, auf den Konstruktor des Typs <paramref name="T" /> zuzugreifen, haben gefehlt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-142">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="9c4bd-143">Der Typ <paramref name="T" /> besitzt keinen Standardkonstruktor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-143">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="9c4bd-144">Verzögerte Initialisierung</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-144">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="9c4bd-145">Der Typ des zu initialisierenden Verweises.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-145">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="9c4bd-146">Ein Verweis oder Wert des Typs <c>T</c>, der initialisiert werden soll, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-146">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="9c4bd-147">Ein Verweis auf einen booleschen Wert, der bestimmt, ob das Ziel bereits initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-147">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="9c4bd-148">Ein Verweis auf ein Objekt, das für die Initialisierung von <c>target</c> als sich gegenseitig ausschließende Sperre verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-148">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="9c4bd-149">Wenn <c>syncLock</c><see langword="null" /> ist, wird ein neues Objekt instanziiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-149">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="9c4bd-150">Die Funktion, die aufgerufen wird, um den Verweis oder den Wert zu initialisieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-150">The function that is called to initialize the reference or value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9c4bd-151">Initialisiert einen Zielverweis- oder Werttyp mit einer angegebenen Funktion, wenn er noch nicht initialisiert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-151">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9c4bd-152">Der initialisierte Wert vom Typ <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-152">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c4bd-153">Wenn `intialized` als "true" angegeben ist, wird keine weitere Initialisierung durchgeführt.</span><span class="sxs-lookup"><span data-stu-id="9c4bd-153">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="9c4bd-154">Berechtigungen, auf den Konstruktor des Typs <paramref name="T" /> zuzugreifen, haben gefehlt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-154">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="9c4bd-155">Der Typ <paramref name="T" /> besitzt keinen Standardkonstruktor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-155">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
          <span data-ttu-id="9c4bd-156">Verzögerte Initialisierung</span>
          <span class="sxs-lookup">
            <span data-stu-id="9c4bd-156">Lazy Initialization</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>
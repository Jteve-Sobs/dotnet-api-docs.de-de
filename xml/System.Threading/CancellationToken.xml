<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="46671aabc589af213b55a39d94ee6bfa476647e2" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73380809" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="da897-101">Gibt eine Benachrichtigung darüber weiter, dass Vorgänge abgebrochen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="da897-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-102">Ein <xref:System.Threading.CancellationToken> ermöglicht einen kooperativen Abbruch zwischen Threads, Arbeitsaufgaben im Thread Pool oder <xref:System.Threading.Tasks.Task>-Objekten.</span><span class="sxs-lookup"><span data-stu-id="da897-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="da897-103">Sie erstellen ein Abbruch Token, indem Sie ein <xref:System.Threading.CancellationTokenSource>-Objekt instanziieren, das Abbruch Token verwaltet, die von seiner <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType>-Eigenschaft abgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="da897-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="da897-104">Anschließend übergeben Sie das Abbruch Token an eine beliebige Anzahl von Threads, Tasks oder Vorgängen, die eine Benachrichtigung über den Abbruch erhalten sollen.</span><span class="sxs-lookup"><span data-stu-id="da897-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="da897-105">Das Token kann nicht verwendet werden, um den Abbruch zu initiieren.</span><span class="sxs-lookup"><span data-stu-id="da897-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="da897-106">Wenn das besitzende Objekt <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> aufruft, wird die Eigenschaft <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> für jede Kopie des Abbruch Tokens auf `true` festgelegt.</span><span class="sxs-lookup"><span data-stu-id="da897-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="da897-107">Die Objekte, die die Benachrichtigung empfangen, können auf jede beliebige Art und Weise reagieren.</span><span class="sxs-lookup"><span data-stu-id="da897-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="da897-108">Weitere Informationen und Codebeispiele finden Sie [unter Abbruch in verwalteten Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="da897-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da897-109">Im folgenden Beispiel wird ein Zufallszahlengenerator zum Emulieren einer Daten Sammlungs Anwendung verwendet, die 10 ganzzahlige Werte von elf verschiedenen Instrumenten liest.</span><span class="sxs-lookup"><span data-stu-id="da897-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="da897-110">Der Wert 0 (null) gibt an, dass die Messung für ein einziges Instrument fehlgeschlagen ist. in diesem Fall sollte der Vorgang abgebrochen werden, und es sollte kein allgemeiner Mittelwert berechnet werden.</span><span class="sxs-lookup"><span data-stu-id="da897-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="da897-111">Um den möglichen Abbruch des Vorgangs zu behandeln, instanziiert das Beispiel ein <xref:System.Threading.CancellationTokenSource> -Objekt, das ein Abbruchtoken wird, die generiert an eine <xref:System.Threading.Tasks.TaskFactory> Objekt.</span><span class="sxs-lookup"><span data-stu-id="da897-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="da897-112">Das <xref:System.Threading.Tasks.TaskFactory>-Objekt übergibt wiederum das Abbruch Token an jede der Aufgaben, die für das Erfassen von Messungen für ein bestimmtes Instrument zuständig sind.</span><span class="sxs-lookup"><span data-stu-id="da897-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="da897-113">Die <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>-Methode wird aufgerufen, um sicherzustellen, dass der Mittelwert nur berechnet wird, nachdem alle Messwerte erfolgreich erfasst wurden.</span><span class="sxs-lookup"><span data-stu-id="da897-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="da897-114">Wenn eine Aufgabe nicht abgebrochen wurde, dann löst der Aufruf an die Methode <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="da897-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="da897-115">Alle öffentlichen und geschützten Member von <see cref="T:System.Threading.CancellationToken" /> sind Thread sicher und können gleichzeitig von mehreren Threads verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="da897-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-116">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-116">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-117">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="da897-118">Der Zustand "abgebrochen" für das Token.</span><span class="sxs-lookup"><span data-stu-id="da897-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="da897-119">Initialisiert das <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="da897-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-120">Token, die mit diesem Konstruktor erstellt werden, verbleiben im Zustand "abgebrochen", der vom `canceled`-Parameter angegeben wird</span><span class="sxs-lookup"><span data-stu-id="da897-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="da897-121">Wenn `canceled` `false` ist, werden sowohl <xref:System.Threading.CancellationToken.CanBeCanceled%2A> als auch <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> `false` sein.</span><span class="sxs-lookup"><span data-stu-id="da897-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="da897-122">Wenn `canceled` `true` ist, werden sowohl <xref:System.Threading.CancellationToken.CanBeCanceled%2A> als auch <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> `true` sein.</span><span class="sxs-lookup"><span data-stu-id="da897-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-123">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-123">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-124">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da897-125">Ruft einen Wert ab, der angibt, ob der Zustand "abgebrochen" von diesem Token unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="da897-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><span data-ttu-id="da897-126"><see langword="true" />, wenn sich dieses Token im abgebrochenen Zustand befinden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="da897-126"><see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-127">Wenn <xref:System.Threading.CancellationToken.CanBeCanceled%2A> `false` zurückgibt, wird sichergestellt, dass das Token nie in den Zustand "abgebrochen" übergeht, was bedeutet, dass <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> niemals `true` zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="da897-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="da897-128">Ein Abbruch Token, das nicht abgebrochen werden kann, wird von der statischen <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="da897-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="da897-129">Sie können diese Eigenschaft optional verwenden, um zu bestimmen, ob ein Abbruch Token abgebrochen werden kann, bevor Sie den Wert der <xref:System.Threading.CancellationToken.IsCancellationRequested%2A>-Eigenschaft überprüfen, um zu bestimmen, ob er abgebrochen wurde.</span><span class="sxs-lookup"><span data-stu-id="da897-129">You can optionally use this property to determine whether a cancellation token can be canceled before examining the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-130">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-130">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-131">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="da897-132">Ermittelt, ob die aktuelle <see cref="T:System.Threading.CancellationToken" />-Instanz gleich dem angegebenen Token ist.</span><span class="sxs-lookup"><span data-stu-id="da897-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="da897-133">Das andere Objekt, das mit dieser Instanz verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="da897-134">Ermittelt, ob die aktuelle <see cref="T:System.Threading.CancellationToken" />-Instanz und die angegebene <see cref="T:System.Object" />-Instanz gleich sind.</span><span class="sxs-lookup"><span data-stu-id="da897-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="da897-135"><see langword="true" />, wenn <paramref name="other" /> ein <see cref="T:System.Threading.CancellationToken" /> ist und die beiden Instanzen gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="da897-135"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="da897-136">Weitere Informationen finden Sie im Abschnitt Hinweise.</span><span class="sxs-lookup"><span data-stu-id="da897-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="da897-137">Zwei Abbruch Token sind gleich, wenn eine der folgenden Bedingungen zutrifft:</span><span class="sxs-lookup"><span data-stu-id="da897-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="da897-138">Sie sind dem gleichen <xref:System.Threading.CancellationTokenSource> zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="da897-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="da897-139">Beide wurden aus öffentlichen <xref:System.Threading.CancellationToken>-Konstruktoren erstellt, und ihre <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType>-Werte sind gleich.</span><span class="sxs-lookup"><span data-stu-id="da897-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="da897-140">Der Wert beider Abbruch Token ist <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da897-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-141">Eine zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-142">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-142">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-143">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="da897-144">Das andere <see cref="T:System.Threading.CancellationToken" />, mit dem diese Instanz verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="da897-145">Ermittelt, ob die aktuelle <see cref="T:System.Threading.CancellationToken" />-Instanz gleich dem angegebenen Token ist.</span><span class="sxs-lookup"><span data-stu-id="da897-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><span data-ttu-id="da897-146"><see langword="true" />, wenn die Instanzen gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="da897-146"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="da897-147">Weitere Informationen finden Sie im Abschnitt Hinweise.</span><span class="sxs-lookup"><span data-stu-id="da897-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="da897-148">Zwei Abbruch Token sind gleich, wenn eine der folgenden Bedingungen zutrifft:</span><span class="sxs-lookup"><span data-stu-id="da897-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="da897-149">Sie sind dem gleichen <xref:System.Threading.CancellationTokenSource> zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="da897-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="da897-150">Beide wurden aus öffentlichen <xref:System.Threading.CancellationToken>-Konstruktoren erstellt, und ihre <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType>-Werte sind gleich.</span><span class="sxs-lookup"><span data-stu-id="da897-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="da897-151">Der Wert beider Abbruch Token ist <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da897-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-152">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-152">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-153">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="da897-154">Dient als Hashfunktion für eine <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="da897-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="da897-155">Ein Hashcode für die aktuelle <see cref="T:System.Threading.CancellationToken" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="da897-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da897-156">Ruft einen Wert ab, der angibt, ob für dieses Token ein Abbruch angefordert wurde.</span><span class="sxs-lookup"><span data-stu-id="da897-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><span data-ttu-id="da897-157"><see langword="true" />, wenn der Abbruch für dieses Token angefordert wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="da897-157"><see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-158">Diese Eigenschaft gibt an, ob für dieses Token ein Abbruch angefordert wurde, entweder über das Token, das anfänglich in einem abgebrochenen Zustand erstellt wurde, oder durch Aufrufen von <xref:System.Threading.CancellationTokenSource.Cancel%2A> für die zugeordnete <xref:System.Threading.CancellationTokenSource> des Tokens.</span><span class="sxs-lookup"><span data-stu-id="da897-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="da897-159">Wenn diese Eigenschaft `true` ist, wird nur sichergestellt, dass ein Abbruch angefordert wurde.</span><span class="sxs-lookup"><span data-stu-id="da897-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="da897-160">Es garantiert nicht, dass jeder registrierte Handler die Ausführung abgeschlossen hat, und dass Abbruch Anforderungen die Weitergabe an alle registrierten Handler beendet haben.</span><span class="sxs-lookup"><span data-stu-id="da897-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="da897-161">Möglicherweise ist eine zusätzliche Synchronisierung erforderlich, insbesondere in Situationen, in denen verbundene Objekte gleichzeitig abgebrochen werden.</span><span class="sxs-lookup"><span data-stu-id="da897-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da897-162">Im folgenden finden Sie ein einfaches Beispiel, in dem ein Server Prozess ausgeführt wird, bis die <xref:System.Threading.CancellationToken.IsCancellationRequested%2A>-Eigenschaft `true` zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="da897-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="da897-163">Im Beispiel wird ein <xref:System.Threading.CancellationTokenSource>-Objekt instanziiert, das den Zugriff auf das Abbruch Token steuert.</span><span class="sxs-lookup"><span data-stu-id="da897-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="da897-164">Anschließend werden zwei Thread Prozeduren definiert.</span><span class="sxs-lookup"><span data-stu-id="da897-164">It then defines two thread procedures.</span></span> <span data-ttu-id="da897-165">Der erste ist als Lambda-Ausdruck definiert, der die Tastatur poolt und beim Drücken der Taste "C" <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> aufruft, um das Abbruch Token auf den Zustand "abgebrochen" festzulegen.</span><span class="sxs-lookup"><span data-stu-id="da897-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="da897-166">Die zweite ist eine parametrisierte Methode (`ServerClass.StaticMethod`), die eine Schleife ausführt, bis die Eigenschaft <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> `true` ist.</span><span class="sxs-lookup"><span data-stu-id="da897-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="da897-167">Der Haupt Thread startet dann die beiden Threads und wird blockiert, bis der Thread, der die `ServerClass.StaticMethod`-Methode ausführt, beendet wird.</span><span class="sxs-lookup"><span data-stu-id="da897-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-168">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-168">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-169">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da897-170">Gibt einen leeren <see cref="T:System.Threading.CancellationToken" />-Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="da897-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="da897-171">Ein leeres Abbruchtoken.</span><span class="sxs-lookup"><span data-stu-id="da897-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-172">Das von dieser Eigenschaft zurückgegebene Abbruch Token kann nicht abgebrochen werden. Das heißt, die <xref:System.Threading.CancellationToken.CanBeCanceled%2A>-Eigenschaft ist `false`.</span><span class="sxs-lookup"><span data-stu-id="da897-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="da897-173">Sie können auch die C#default-Anweisung [(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) verwenden, um ein leeres Abbruch Token zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="da897-173">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="da897-174">Zwei leere Abbruch Token sind immer gleich.</span><span class="sxs-lookup"><span data-stu-id="da897-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-175">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-175">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-176">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="da897-177">Die erste Instanz.</span><span class="sxs-lookup"><span data-stu-id="da897-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="da897-178">Die zweite Instanz.</span><span class="sxs-lookup"><span data-stu-id="da897-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="da897-179">Stellt fest, ob zwei <see cref="T:System.Threading.CancellationToken" />-Instanzen gleich sind.</span><span class="sxs-lookup"><span data-stu-id="da897-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="da897-180">Wenn die Instanzen identisch sind: <see langword="true" />, andernfalls <see langword="false" /> (Weitere Informationen finden Sie im Abschnitt „Hinweise“).</span><span class="sxs-lookup"><span data-stu-id="da897-180"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="da897-181">Zwei Abbruch Token sind gleich, wenn eine der folgenden Bedingungen zutrifft:</span><span class="sxs-lookup"><span data-stu-id="da897-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="da897-182">Sie sind dem gleichen <xref:System.Threading.CancellationTokenSource> zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="da897-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="da897-183">Beide wurden aus öffentlichen <xref:System.Threading.CancellationToken>-Konstruktoren erstellt, und ihre <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType>-Werte sind gleich.</span><span class="sxs-lookup"><span data-stu-id="da897-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="da897-184">Der Wert beider Abbruch Token ist <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da897-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-185">Eine zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-186">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-186">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-187">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="da897-188">Die erste Instanz.</span><span class="sxs-lookup"><span data-stu-id="da897-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="da897-189">Die zweite Instanz.</span><span class="sxs-lookup"><span data-stu-id="da897-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="da897-190">Ermittelt, ob zwei <see cref="T:System.Threading.CancellationToken" />-Instanzen ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="da897-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="da897-191"><see langword="true" />, wenn die Instanzen ungleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="da897-191"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="da897-192">Informationen zur Definition der Gleichheit finden Sie in der <xref:System.Threading.CancellationToken.Equals%2A>-Methode.</span><span class="sxs-lookup"><span data-stu-id="da897-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-193">Eine zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-194">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-194">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-195">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="da897-196">Registriert einen Delegaten, der aufgerufen wird, wenn dieses <see cref="T:System.Threading.CancellationToken" /> abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-197">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-197">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-198">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="da897-199">Der Delegat, der ausgeführt wird, wenn das <see cref="T:System.Threading.CancellationToken" />-Objekt abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="da897-200">Registriert einen Delegaten, der aufgerufen wird, wenn dieses <see cref="T:System.Threading.CancellationToken" /> abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="da897-201">Die <see cref="T:System.Threading.CancellationTokenRegistration" />-Instanz, die verwendet werden kann, um die Registrierung des Rückrufs aufzuheben.</span><span class="sxs-lookup"><span data-stu-id="da897-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-202">Wenn sich dieses Token bereits im Zustand "abgebrochen" befindet, wird der Delegat sofort und synchron ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="da897-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="da897-203">Alle vom Delegaten generierten Ausnahmen werden aus diesem Methodenaufruf weitergegeben.</span><span class="sxs-lookup"><span data-stu-id="da897-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="da897-204">Der aktuelle <xref:System.Threading.ExecutionContext> wird zusammen mit dem-Delegaten aufgezeichnet und wird bei der Ausführung verwendet.</span><span class="sxs-lookup"><span data-stu-id="da897-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="da897-205">Der aktuelle <xref:System.Threading.SynchronizationContext> wird nicht aufgezeichnet.</span><span class="sxs-lookup"><span data-stu-id="da897-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-206">Die zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da897-207"><paramref name="callback" /> ist NULL.</span><span class="sxs-lookup"><span data-stu-id="da897-207"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-208">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-208">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-209">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-209">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="da897-210">Gewusst wie: Registrieren von Rückrufen für Abbruchanforderungen</span><span class="sxs-lookup"><span data-stu-id="da897-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="da897-211">Der Delegat, der ausgeführt wird, wenn das <see cref="T:System.Threading.CancellationToken" />-Objekt abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="da897-212">Ein Wert, der angibt, ob der aktuelle <see cref="T:System.Threading.SynchronizationContext" /> erfasst und beim Aufrufen von <paramref name="callback" /> verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="da897-213">Registriert einen Delegaten, der aufgerufen wird, wenn dieses <see cref="T:System.Threading.CancellationToken" /> abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="da897-214">Die <see cref="T:System.Threading.CancellationTokenRegistration" />-Instanz, die verwendet werden kann, um die Registrierung des Rückrufs aufzuheben.</span><span class="sxs-lookup"><span data-stu-id="da897-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-215">Wenn sich dieses Token bereits im Zustand "abgebrochen" befindet, wird der Delegat sofort und synchron ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="da897-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="da897-216">Alle vom Delegaten generierten Ausnahmen werden aus diesem Methodenaufruf weitergegeben.</span><span class="sxs-lookup"><span data-stu-id="da897-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="da897-217">Der aktuelle <xref:System.Threading.ExecutionContext> wird zusammen mit dem-Delegaten aufgezeichnet und wird bei der Ausführung verwendet.</span><span class="sxs-lookup"><span data-stu-id="da897-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="da897-218">Wenn `useSynchronizationContext` `true` ist, wird die aktuelle <xref:System.Threading.SynchronizationContext>, sofern vorhanden, ebenfalls zusammen mit dem Delegaten aufgezeichnet und bei der Ausführung verwendet.</span><span class="sxs-lookup"><span data-stu-id="da897-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="da897-219">Andernfalls wird <xref:System.Threading.SynchronizationContext> nicht aufgezeichnet.</span><span class="sxs-lookup"><span data-stu-id="da897-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-220">Die zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da897-221"><paramref name="callback" /> ist NULL.</span><span class="sxs-lookup"><span data-stu-id="da897-221"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-222">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-223">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-223">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="da897-224">Gewusst wie: Registrieren von Rückrufen für Abbruchanforderungen</span><span class="sxs-lookup"><span data-stu-id="da897-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="da897-225">Der Delegat, der ausgeführt wird, wenn das <see cref="T:System.Threading.CancellationToken" />-Objekt abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="da897-226">Der Zustand, der beim Aufrufen des Delegaten an <paramref name="callback" /> übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="da897-227">Dies kann NULL sein.</span><span class="sxs-lookup"><span data-stu-id="da897-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="da897-228">Registriert einen Delegaten, der aufgerufen wird, wenn dieses <see cref="T:System.Threading.CancellationToken" /> abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="da897-229">Die <see cref="T:System.Threading.CancellationTokenRegistration" />-Instanz, die verwendet werden kann, um die Registrierung des Rückrufs aufzuheben.</span><span class="sxs-lookup"><span data-stu-id="da897-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-230">Wenn sich dieses Token bereits im Zustand "abgebrochen" befindet, wird der Delegat sofort und synchron ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="da897-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="da897-231">Alle vom Delegaten generierten Ausnahmen werden aus diesem Methodenaufruf weitergegeben.</span><span class="sxs-lookup"><span data-stu-id="da897-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="da897-232">Der aktuelle <xref:System.Threading.ExecutionContext> wird zusammen mit dem-Delegaten aufgezeichnet und wird bei der Ausführung verwendet.</span><span class="sxs-lookup"><span data-stu-id="da897-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="da897-233">Der aktuelle <xref:System.Threading.SynchronizationContext> wird nicht aufgezeichnet.</span><span class="sxs-lookup"><span data-stu-id="da897-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-234">Die zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da897-235"><paramref name="callback" /> ist NULL.</span><span class="sxs-lookup"><span data-stu-id="da897-235"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-236">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-236">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-237">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-237">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="da897-238">Gewusst wie: Registrieren von Rückrufen für Abbruchanforderungen</span><span class="sxs-lookup"><span data-stu-id="da897-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="da897-239">Der Delegat, der ausgeführt wird, wenn das <see cref="T:System.Threading.CancellationToken" />-Objekt abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="da897-240">Der Zustand, der beim Aufrufen des Delegaten an <paramref name="callback" /> übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="da897-241">Dies kann NULL sein.</span><span class="sxs-lookup"><span data-stu-id="da897-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="da897-242">Ein boolescher Wert, der angibt, ob der aktuelle <see cref="T:System.Threading.SynchronizationContext" /> erfasst und beim Aufrufen von <paramref name="callback" /> verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="da897-243">Registriert einen Delegaten, der aufgerufen wird, wenn dieses <see cref="T:System.Threading.CancellationToken" /> abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="da897-244">Die <see cref="T:System.Threading.CancellationTokenRegistration" />-Instanz, die verwendet werden kann, um die Registrierung des Rückrufs aufzuheben.</span><span class="sxs-lookup"><span data-stu-id="da897-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-245">Wenn sich dieses Token bereits im Zustand "abgebrochen" befindet, wird der Delegat sofort und synchron ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="da897-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="da897-246">Alle vom Delegaten generierten Ausnahmen werden aus diesem Methodenaufruf weitergegeben.</span><span class="sxs-lookup"><span data-stu-id="da897-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="da897-247">Der aktuelle <xref:System.Threading.ExecutionContext> wird zusammen mit dem-Delegaten aufgezeichnet und wird bei der Ausführung verwendet.</span><span class="sxs-lookup"><span data-stu-id="da897-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="da897-248">Wenn `useSynchronizationContext` `true` ist, wird die aktuelle <xref:System.Threading.SynchronizationContext>, sofern vorhanden, ebenfalls zusammen mit dem Delegaten aufgezeichnet und bei der Ausführung verwendet.</span><span class="sxs-lookup"><span data-stu-id="da897-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="da897-249">Andernfalls wird <xref:System.Threading.SynchronizationContext> nicht aufgezeichnet.</span><span class="sxs-lookup"><span data-stu-id="da897-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-250">Die zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da897-251"><paramref name="callback" /> ist NULL.</span><span class="sxs-lookup"><span data-stu-id="da897-251"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-252">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-252">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-253">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-253">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="da897-254">Gewusst wie: Registrieren von Rückrufen für Abbruchanforderungen</span><span class="sxs-lookup"><span data-stu-id="da897-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="da897-255">Löst eine <see cref="T:System.OperationCanceledException" /> aus, wenn für dieses Token ein Abbruch angefordert wurde.</span><span class="sxs-lookup"><span data-stu-id="da897-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-256">Diese Methode stellt Funktionen bereit, die folgenden Funktionen entsprechen:</span><span class="sxs-lookup"><span data-stu-id="da897-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="da897-257">C#</span><span class="sxs-lookup"><span data-stu-id="da897-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="da897-258">Das Token, für das der Abbruch angefordert wurde.</span><span class="sxs-lookup"><span data-stu-id="da897-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-259">Die zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-260">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-260">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-261">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-261">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md"><span data-ttu-id="da897-262">Gewusst wie: Abbrechen einer Aufgabe und ihrer untergeordneten Elemente</span><span class="sxs-lookup"><span data-stu-id="da897-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegister">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration UnsafeRegister (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration UnsafeRegister(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnsafeRegister (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration UnsafeRegister(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.UnsafeRegister : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.UnsafeRegister (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="da897-263">Der Delegat, der ausgeführt wird, wenn das <see cref="T:System.Threading.CancellationToken" />-Objekt abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-263">The delegate to execute when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="da897-264">Der Zustand, der beim Aufrufen des Delegaten an <paramref name="callback" /> übergeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="da897-264">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span>  <span data-ttu-id="da897-265">Dieser Wert kann <see langword="null" /> sein.</span><span class="sxs-lookup"><span data-stu-id="da897-265">This may be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="da897-266">Registriert einen Delegaten, der aufgerufen wird, wenn dieses <see cref="T:System.Threading.CancellationToken" /> abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-266">Registers a delegate that is called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="da897-267">Ein Objekt, mit dem die Registrierung des Rückrufs aufgehoben werden kann.</span><span class="sxs-lookup"><span data-stu-id="da897-267">An object that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            If this token is already in the canceled state, the delegate is run immediately and synchronously.
            Any exception the delegate generates is propagated out of this method call.
            
<span data-ttu-id="da897-268">Der <xref:System.Threading.ExecutionContext> wird weder aufgezeichnet noch in den Aufruf des Rückrufs übertragen.</span><span class="sxs-lookup"><span data-stu-id="da897-268">The  <xref:System.Threading.ExecutionContext> is not captured nor flowed to the callback's invocation.</span></span>
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="da897-269"><paramref name="callback" /> ist NULL.</span><span class="sxs-lookup"><span data-stu-id="da897-269"><paramref name="callback" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="da897-270">Ruft ein <see cref="T:System.Threading.WaitHandle" /> ab, das signalisiert wird, wenn das Token abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-270">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="da897-271">Ein <see cref="T:System.Threading.WaitHandle" />, das signalisiert wird, wenn das Token abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="da897-271">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da897-272">Der Zugriff auf diese Eigenschaft bewirkt, dass ein <xref:System.Threading.WaitHandle> instanziiert wird.</span><span class="sxs-lookup"><span data-stu-id="da897-272">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="da897-273">Es empfiehlt sich, diese Eigenschaft bei Bedarf nur zu verwenden und dann die zugeordnete <xref:System.Threading.CancellationTokenSource>-Instanz zu dem frühestmöglichen Zeitpunkt zu verwerfen (durch Verwerfen der Quelle wird dieses zugeordnete Handle verworfen).</span><span class="sxs-lookup"><span data-stu-id="da897-273">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="da897-274">Das Handle sollte nicht geschlossen oder direkt freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="da897-274">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="da897-275">Die zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="da897-275">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="da897-276">Abbruch</span><span class="sxs-lookup"><span data-stu-id="da897-276">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="da897-277">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="da897-277">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6e2aa49b-fc84-4bcf-962b-17db98b7edcb"><span data-ttu-id="da897-278">Gewusst wie: Lauschen auf Abbruchanforderungen mit Wait-Handles</span><span class="sxs-lookup"><span data-stu-id="da897-278">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f065cc64ff40bfc4392ac5996a4573819cea143" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53228595" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="99d1b-101">Benachrichtigt einen wartenden Thread über das Eintreten eines Ereignisses.</span><span class="sxs-lookup"><span data-stu-id="99d1b-101">Notifies a waiting thread that an event has occurred.</span></span> <span data-ttu-id="99d1b-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="99d1b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d1b-103">`AutoResetEvent` können Threads durch Signalisieren miteinander kommunizieren.</span><span class="sxs-lookup"><span data-stu-id="99d1b-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="99d1b-104">In der Regel verwenden Sie diese Klasse auf, wenn Threads exklusiven Zugriff auf eine Ressource benötigen.</span><span class="sxs-lookup"><span data-stu-id="99d1b-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="99d1b-105">Dieser Typ implementiert die <xref:System.IDisposable> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="99d1b-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="99d1b-106">Wenn Sie mit dem Typ haben, sollten Sie es entweder direkt oder indirekt freigeben.</span><span class="sxs-lookup"><span data-stu-id="99d1b-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="99d1b-107">Damit des Typs direkt freigegeben werden, rufen Sie die <xref:System.IDisposable.Dispose%2A> -Methode in einer `try` / `catch` Block.</span><span class="sxs-lookup"><span data-stu-id="99d1b-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="99d1b-108">Um sie indirekt löschen, verwenden Sie ein Sprachkonstrukt wie `using` (in c#) oder `Using` (in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="99d1b-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="99d1b-109">Weitere Informationen finden Sie im Abschnitt "mithilfe von ein-Objekt, das implementiert" IDisposable "" in der <xref:System.IDisposable> schnittstellenthema.</span><span class="sxs-lookup"><span data-stu-id="99d1b-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="99d1b-110">Ein Thread wartet ein Signal, indem er <xref:System.Threading.WaitHandle.WaitOne%2A> auf die `AutoResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="99d1b-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="99d1b-111">Wenn die `AutoResetEvent` befindet sich im nicht signalisierten Zustand, den Thread blockiert wird, wartet der Thread, der derzeit steuert die Ressource, um zu signalisieren, dass die Ressource verfügbar, durch den Aufruf ist <xref:System.Threading.EventWaitHandle.Set%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d1b-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="99d1b-112">Aufrufen von `Set` Signale `AutoResetEvent` einen wartender Thread freigegeben.</span><span class="sxs-lookup"><span data-stu-id="99d1b-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="99d1b-113">`AutoResetEvent` bleibt signalisiert, bis ein einzelner wartender Thread freigegeben wird, und klicken Sie dann automatisch in den nicht signalisierten Zustand zurück.</span><span class="sxs-lookup"><span data-stu-id="99d1b-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="99d1b-114">Wenn keine Threads warten, bleibt der Status auf unbestimmte Zeit signalisiert.</span><span class="sxs-lookup"><span data-stu-id="99d1b-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="99d1b-115">Wenn ein Thread ruft <xref:System.Threading.WaitHandle.WaitOne%2A> während der <xref:System.Threading.AutoResetEvent> ist in den signalisierten Zustand ist, wird der Thread nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="99d1b-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="99d1b-116">Die <xref:System.Threading.AutoResetEvent> gibt der Thread sofort frei, und in den nicht signalisierten Zustand zurück.</span><span class="sxs-lookup"><span data-stu-id="99d1b-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="99d1b-117">Es gibt keine Garantie, die für jeden Aufruf der <xref:System.Threading.EventWaitHandle.Set%2A> Methode ein Thread freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="99d1b-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="99d1b-118">Wenn zwei Aufrufe zu eng beieinander liegen, sind, sodass der zweite Aufruf erfolgt, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben.</span><span class="sxs-lookup"><span data-stu-id="99d1b-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="99d1b-119">Es ist, als wäre der zweite Aufruf nicht der Fall.</span><span class="sxs-lookup"><span data-stu-id="99d1b-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="99d1b-120">Auch wenn <xref:System.Threading.EventWaitHandle.Set%2A> wird aufgerufen, wenn es sind keine Threads warten und die <xref:System.Threading.AutoResetEvent> bereits signalisiert wird, wird der Aufruf hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="99d1b-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="99d1b-121">Sie können den ursprünglichen Status des steuern eine `AutoResetEvent` durch einen booleschen Wert an den Konstruktor übergeben: `true` , wenn der anfängliche Zustand signalisiert wird, und `false` andernfalls.</span><span class="sxs-lookup"><span data-stu-id="99d1b-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="99d1b-122">`AutoResetEvent` kann auch verwendet werden, mit der `static` <xref:System.Threading.WaitHandle.WaitAll%2A> und <xref:System.Threading.WaitHandle.WaitAny%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="99d1b-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="99d1b-123">Weitere Informationen zu Threadsynchronisierungsmechanismen finden Sie unter [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in der Dokumentation.</span><span class="sxs-lookup"><span data-stu-id="99d1b-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="99d1b-124">Ab .NET Framework, Version 2.0, <xref:System.Threading.AutoResetEvent> leitet sich von der neuen <xref:System.Threading.EventWaitHandle> Klasse.</span><span class="sxs-lookup"><span data-stu-id="99d1b-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="99d1b-125">Ein <xref:System.Threading.AutoResetEvent> ist funktionell gleichwertig mit einer <xref:System.Threading.EventWaitHandle> mit erstellt <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="99d1b-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99d1b-126">Im Gegensatz zu den <xref:System.Threading.AutoResetEvent> -Klasse, die <xref:System.Threading.EventWaitHandle> Klasse bietet Zugriff auf benannte Synchronisierungsereignisse.</span><span class="sxs-lookup"><span data-stu-id="99d1b-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d1b-127">Das folgende Beispiel zeigt, wie Sie mit <xref:System.Threading.AutoResetEvent> auf einen Thread zu einem Zeitpunkt freigeben, indem die <xref:System.Threading.EventWaitHandle.Set%2A> Methode (in der Basisklasse) jedes Mal der Benutzer drückt die **EINGABETASTE** Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="99d1b-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="99d1b-128">Das Beispiel beginnt der drei Threads, die warten auf eine <xref:System.Threading.AutoResetEvent> , die in den signalisierten Zustand erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="99d1b-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="99d1b-129">Der erste Thread wird sofort freigegeben, da die <xref:System.Threading.AutoResetEvent> ist bereits in den signalisierten Zustand.</span><span class="sxs-lookup"><span data-stu-id="99d1b-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="99d1b-130">Dies setzt die <xref:System.Threading.AutoResetEvent> in den Zustand "nicht signalisiert", damit nachfolgende Threads blockiert.</span><span class="sxs-lookup"><span data-stu-id="99d1b-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="99d1b-131">Blockierte Threads werden nicht freigegeben werden, bis der Benutzer eine veröffentlicht jeweils durch Drücken der **EINGABETASTE** Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="99d1b-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="99d1b-132">Nach der Veröffentlichung von Threads aus dem ersten sind <xref:System.Threading.AutoResetEvent>, warten sie auf einen anderen <xref:System.Threading.AutoResetEvent> , die im Zustand "nicht signalisiert" erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="99d1b-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="99d1b-133">Alle drei Threads zu blockieren, sodass die <xref:System.Threading.EventWaitHandle.Set%2A> Methode muss drei Mal aufgerufen werden, um alle freizugeben.</span><span class="sxs-lookup"><span data-stu-id="99d1b-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="99d1b-134">Diese Klasse ist threadsicher.</span><span class="sxs-lookup"><span data-stu-id="99d1b-134">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="99d1b-135">Verwaltetes Threading</span><span class="sxs-lookup"><span data-stu-id="99d1b-135">Managed Threading</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="99d1b-136"><see langword="true" />, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll. <see langword="false" />, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="99d1b-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="99d1b-137">Initialisiert eine neue Instanz der <see cref="T:System.Threading.AutoResetEvent" />-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="99d1b-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="99d1b-138">Im folgenden Beispiel wird ein <xref:System.Threading.AutoResetEvent> zum Synchronisieren der Aktivitäten von zwei Threads.</span><span class="sxs-lookup"><span data-stu-id="99d1b-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="99d1b-139">Der erste Thread, der dem Thread der Anwendung ist, führt `Main`.</span><span class="sxs-lookup"><span data-stu-id="99d1b-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="99d1b-140">Er schreibt Werte in die geschützte Ressource, d.h. eine `static` (`Shared` in Visual Basic) Feld mit dem Namen `number`.</span><span class="sxs-lookup"><span data-stu-id="99d1b-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="99d1b-141">Der zweite Thread führt die statische `ThreadProc` Methode, die Werte liest von geschrieben `Main`.</span><span class="sxs-lookup"><span data-stu-id="99d1b-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="99d1b-142">Die `ThreadProc` Methode wartet der <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="99d1b-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="99d1b-143">Wenn `Main` Aufrufe der <xref:System.Threading.EventWaitHandle.Set%2A> Methode für die <xref:System.Threading.AutoResetEvent>, `ThreadProc` Methode liest einen Wert.</span><span class="sxs-lookup"><span data-stu-id="99d1b-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="99d1b-144">Die <xref:System.Threading.AutoResetEvent> sofort zurückgesetzt, sodass die `ThreadProc` Methode wartet erneut.</span><span class="sxs-lookup"><span data-stu-id="99d1b-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="99d1b-145">Die Logik des Programm wird sichergestellt, dass die `ThreadProc` Methode nie liest den gleichen Wert doppelt so groß wie.</span><span class="sxs-lookup"><span data-stu-id="99d1b-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="99d1b-146">Dies garantiert nicht, die die `ThreadProc` Methode liest jeden Wert von geschrieben `Main`.</span><span class="sxs-lookup"><span data-stu-id="99d1b-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="99d1b-147">Dafür wäre ein zweites erforderlich <xref:System.Threading.AutoResetEvent> Sperre.</span><span class="sxs-lookup"><span data-stu-id="99d1b-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="99d1b-148">Nach jedem Schreibvorgang `Main` führt Sie durch Aufrufen der <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> Methode, um dem zweiten Thread die Möglichkeit zum Ausführen geben.</span><span class="sxs-lookup"><span data-stu-id="99d1b-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="99d1b-149">Andernfalls klicken Sie auf einem Computer mit einem Prozessor `Main` würden schreiben viele Werte zwischen zwei Lesevorgängen.</span><span class="sxs-lookup"><span data-stu-id="99d1b-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="99d1b-150">Verwaltetes Threading</span><span class="sxs-lookup"><span data-stu-id="99d1b-150">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99d1b-151">Legt den Zustand des Ereignisses auf „nicht signalisiert“ fest, sodass Threads blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="99d1b-151">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="99d1b-152"><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99d1b-152"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99d1b-153">Legt den Zustand des Ereignisses auf „signalisiert“ fest und ermöglicht so mindestens einem wartenden Thread das Fortfahren.</span><span class="sxs-lookup"><span data-stu-id="99d1b-153">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="99d1b-154"><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99d1b-154"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="99d1b-155">Die Set-Methode gibt einen einzelnen Thread frei.</span><span class="sxs-lookup"><span data-stu-id="99d1b-155">The Set method releases a single thread.</span></span> <span data-ttu-id="99d1b-156">Wenn keine wartenden Threads vorhanden sind, bleibt das Wait-Handle signalisiert, bis ein Thread versucht, die darauf warten, oder die "Reset"-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="99d1b-156">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="99d1b-157">Es gibt keine Garantie, dass für jeden Aufruf der Set-Methode ein Thread freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="99d1b-157">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="99d1b-158">Wenn zwei Aufrufe zu eng beieinander liegen, sind, sodass der zweite Aufruf erfolgt, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben, als wäre der zweite Aufruf nicht ohnehin -.</span><span class="sxs-lookup"><span data-stu-id="99d1b-158">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="99d1b-159">Auch wenn die Set-Methode aufgerufen wird, wenn es sind keine Threads warten und die <xref:System.Threading.AutoResetEvent> bereits signalisiert wird, wird der Aufruf hat keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="99d1b-159">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
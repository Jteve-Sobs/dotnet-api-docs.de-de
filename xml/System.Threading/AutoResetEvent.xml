<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AutoResetEvent.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59087366b105fd0db08981653c09c4fc5801df013.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9087366b105fd0db08981653c09c4fc5801df013</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>Notifies a waiting thread that an event has occurred.</source>
          <target state="translated">Benachrichtigt einen wartenden Thread über das Eintreten eines Ereignisses.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">Diese Klasse kann nicht vererbt werden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> können Threads durch Signalisieren miteinander kommunizieren.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Typically, you use this class when threads need exclusive access to a resource.</source>
          <target state="translated">In der Regel verwenden Sie diese Klasse, wenn Threads exklusiven Zugriff auf eine Ressource benötigen.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Dieser Typ implementiert die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Schnittstelle.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Wenn Sie mithilfe des Typs abgeschlossen haben, sollten Sie es entweder direkt oder indirekt freigeben.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Aufrufen, um den Typ direkt zu verwerfen, dessen <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode in einer <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Um es indirekt freizugeben, verwenden Sie ein Sprachkonstrukt z. B. <ph id="ph1">`using`</ph> (in c#) oder <ph id="ph2">`Using`</ph> (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, implementiert IDisposable" in der <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Thema zur Schnittstelle.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>A thread waits for a signal by calling <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`AutoResetEvent`</ph>.</source>
          <target state="translated">Ein Thread wartet auf ein Signal durch Aufrufen von <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> auf die <ph id="ph2">`AutoResetEvent`</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If the <ph id="ph1">`AutoResetEvent`</ph> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>.</source>
          <target state="translated">Wenn die <ph id="ph1">`AutoResetEvent`</ph> im nicht signalisierten Zustand befindet, der Thread blockiert und Warten auf der Thread, der derzeit steuert die Ressource, um zu signalisieren, dass die Ressource verfügbar, durch den Aufruf ist <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Calling <ph id="ph1">`Set`</ph> signals <ph id="ph2">`AutoResetEvent`</ph> to release a waiting thread.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`Set`</ph> Signale <ph id="ph2">`AutoResetEvent`</ph> einen wartenden Thread freigeben.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> bleibt signalisiert, bis ein einzelnen wartenden Threads freigegeben wird und dann automatisch in den nicht signalisierten Zustand zurück.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If no threads are waiting, the state remains signaled indefinitely.</source>
          <target state="translated">Wenn keine wartenden Threads vorhanden sind, bleibt der Status unbegrenzt signalisiert.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If a thread calls <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> while the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is in the signaled state, the thread does not block.</source>
          <target state="translated">Wenn ein Thread aufruft, <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> während der <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> ist in den signalisierten Zustand aufweisen, wird der Thread nicht blockiert.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases the thread immediately and returns to the non-signaled state.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> gibt der Thread sofort frei, und in den nicht signalisierten Zustand zurück.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>There is no guarantee that every call to the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method will release a thread.</source>
          <target state="translated">Es gibt keine Garantie, jeder Aufruf der <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> Methode ein Thread freigegeben wird.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</source>
          <target state="translated">Wenn zwei Aufrufe zu nahe beieinander sind, so, dass der zweite Aufruf tritt auf, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>It is as if the second call did not happen.</source>
          <target state="translated">Dabei wird angenommen, der zweite Aufruf nicht der Fall.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Also, if <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> is called when there are no threads waiting and the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already signaled, the call has no effect.</source>
          <target state="translated">Auch wenn <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> wird aufgerufen, wenn es werden keine wartenden Threads und die <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> bereits signalisiert wird, wird der Aufruf hat keine Auswirkungen.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>You can control the initial state of an <ph id="ph1">`AutoResetEvent`</ph> by passing a Boolean value to the constructor: <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">Sie können steuern, im Anfangszustand erzielt eine <ph id="ph1">`AutoResetEvent`</ph> durch einen booleschen Wert an den Konstruktor übergeben: <ph id="ph2">`true`</ph> , wenn der anfängliche Zustand signalisiert wird, und <ph id="ph3">`false`</ph> andernfalls.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> kann auch verwendet werden, mit der <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> und <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> in the conceptual documentation.</source>
          <target state="translated">Weitere Informationen zu Threadsynchronisierung, finden Sie unter <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> in der Dokumentation.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Beginning with the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">Ab .NET Framework, Version 2.0, <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> leitet sich von der neuen <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>An <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> ist funktionell gleichwertig mit einem <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> mit erstellt <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">Im Gegensatz zu den <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> -Klasse, die <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> Klasse bietet Zugriff auf benannte Synchronisierungsereignisse.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to release one thread at a time, by calling the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method (on the base class) each time the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> einen Thread zu einem Zeitpunkt freigegeben, durch Aufrufen der <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> -Methode (in der Basisklasse) jedes Mal der Benutzer drückt die <bpt id="p1">**</bpt>EINGABETASTE<ept id="p1">**</ept> Schlüssel.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The example starts three threads, which wait on an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the signaled state.</source>
          <target state="translated">Im Beispiel startet drei Threads, die warten auf eine <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> , die in den Zustand "signalisiert" erstellt wurde.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The first thread is released immediately, because the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already in the signaled state.</source>
          <target state="translated">Der erste Thread wird sofort freigegeben, da die <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> ist bereits in den signalisierten Zustand aufweisen.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This resets the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to the non-signaled state, so that subsequent threads block.</source>
          <target state="translated">Dies setzt die <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> in den nicht signalisierten Zustand, sodass nachfolgende Threads blockiert.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The blocked threads are not released until the user releases them one at a time by pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">Blockierte Threads werden nicht freigegeben werden, bis der Benutzer sie in der eine loslässt zu einem Zeitpunkt durch Drücken der <bpt id="p1">**</bpt>EINGABETASTE<ept id="p1">**</ept> Schlüssel.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>After the threads are released from the first <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, they wait on another <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the non-signaled state.</source>
          <target state="translated">Nachdem die Threads, aus dem ersten freigegeben werden <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, warten sie auf einem anderen <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> , die im Status "nicht signalisiert" erstellt wurde.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>All three threads block, so the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method must be called three times to release them all.</source>
          <target state="translated">Alle drei Threads zu blockieren, sodass der <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> -Methode muss dreimal aufgerufen werden, um alle freizugeben.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">Diese Klasse ist threadsicher.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to non-signaled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll. <ph id="ph2">&lt;see langword="false" /&gt;</ph>, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph>-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The following example uses an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to synchronize the activities of two threads.</source>
          <target state="translated">Im folgenden Beispiel wird ein <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> zum Synchronisieren der Aktivitäten von zwei Threads.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The first thread, which is the application thread, executes <ph id="ph1">`Main`</ph>.</source>
          <target state="translated">Der erste Thread, der Thread der Anwendung ist, führt <ph id="ph1">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It writes values to the protected resource, which is a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) field named <ph id="ph3">`number`</ph>.</source>
          <target state="translated">Er schreibt Werte in die geschützte Ressource, also eine <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) Feld mit dem Namen <ph id="ph3">`number`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The second thread executes the static <ph id="ph1">`ThreadProc`</ph> method, which reads the values written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">Der zweite Thread führt die statische <ph id="ph1">`ThreadProc`</ph> -Methode, die die Werte von geschrieben liest <ph id="ph2">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">`ThreadProc`</ph> method waits for the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">`ThreadProc`</ph> Methode wartet der <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>When <ph id="ph1">`Main`</ph> calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, the <ph id="ph4">`ThreadProc`</ph> method reads one value.</source>
          <target state="translated">Wenn <ph id="ph1">`Main`</ph> Aufrufe der <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> Methode für die <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, die <ph id="ph4">`ThreadProc`</ph> Methode liest einen Wert.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> immediately resets, so the <ph id="ph2">`ThreadProc`</ph> method waits again.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> sofort zurückgesetzt, sodass der <ph id="ph2">`ThreadProc`</ph> -Methode wartet erneut.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The program logic guarantees that the <ph id="ph1">`ThreadProc`</ph> method will never read the same value two times.</source>
          <target state="translated">Die Programmlogik wird sichergestellt, dass die <ph id="ph1">`ThreadProc`</ph> Methode wird nie den gleichen Wert gelesen zweimal.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It does not guarantee that the <ph id="ph1">`ThreadProc`</ph> method will read every value written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">Er garantiert nicht, dass die <ph id="ph1">`ThreadProc`</ph> -Methode liest jeden Wert von geschrieben <ph id="ph2">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>That guarantee would require a second <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> lock.</source>
          <target state="translated">Diese Garantie, müsste ein zweites <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> Sperre.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>After each write operation, <ph id="ph1">`Main`</ph> yields by calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, to give the second thread a chance to execute.</source>
          <target state="translated">Nach jedem Schreibvorgang <ph id="ph1">`Main`</ph> ergibt durch Aufrufen der <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> Methode, um vom zweiten Thread ausgeführt werden kann.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Otherwise, on a single-processor computer <ph id="ph1">`Main`</ph> would write many values between any two read operations.</source>
          <target state="translated">Hingegen auf einen Computer mit einem Prozessor <ph id="ph1">`Main`</ph> schreiben viele Werte zwischen zwei Lesevorgänge.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c49ad4917c55c74cd484452b65ad8336d1711c1" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83960230" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit WaitHandle" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5173b-101">Stellt ein Threadsynchronisierungsereignis dar, das automatisch ausgelöst wird, nachdem ein einzelner wartender Thread freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="5173b-101">Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread.</span></span> <span data-ttu-id="5173b-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="5173b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5173b-103">Sie verwenden `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>und <xref:System.Threading.EventWaitHandle> für die Thread Interaktion (oder Thread Signalisierung).</span><span class="sxs-lookup"><span data-stu-id="5173b-103">You use `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="5173b-104">Weitere Informationen finden Sie im Artikel [Thread Interaktion oder Signalisierung](/dotnet/standard/threading/overview-of-synchronization-primitives#thread-interaction-or-signaling) im Artikel [Übersicht über Synchronisierungs primitive](/dotnet/standard/threading/overview-of-synchronization-primitives) .</span><span class="sxs-lookup"><span data-stu-id="5173b-104">For more information, see the [Thread interaction, or signaling](/dotnet/standard/threading/overview-of-synchronization-primitives#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](/dotnet/standard/threading/overview-of-synchronization-primitives) article.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5173b-105">Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5173b-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5173b-106">Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen.</span><span class="sxs-lookup"><span data-stu-id="5173b-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="5173b-107">Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf.</span><span class="sxs-lookup"><span data-stu-id="5173b-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="5173b-108">Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="5173b-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="5173b-109">Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.</span><span class="sxs-lookup"><span data-stu-id="5173b-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="5173b-110">Ein Thread wartet auf ein Signal durch Aufrufen von [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span><span class="sxs-lookup"><span data-stu-id="5173b-110">A thread waits for a signal by calling [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span></span> <span data-ttu-id="5173b-111">Wenn sich die `AutoResetEvent` im nicht signalisierten Zustand befindet, wird der Thread blockiert, bis [AutoResetEvent. Set](xref:System.Threading.EventWaitHandle.Set%2A) aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="5173b-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks until [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) is called.</span></span>  
  
 <span data-ttu-id="5173b-112">Das Aufrufen von `Set` signalisiert `AutoResetEvent`, einen wartenden Thread freizugeben.</span><span class="sxs-lookup"><span data-stu-id="5173b-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="5173b-113">`AutoResetEvent` bleibt signalisiert, bis ein einzelner wartender Thread freigegeben wird, und kehrt dann automatisch in den Zustand "nicht signalisiert" zurück.</span><span class="sxs-lookup"><span data-stu-id="5173b-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="5173b-114">Wenn keine Threads warten, bleibt der Status unbegrenzt signalisiert.</span><span class="sxs-lookup"><span data-stu-id="5173b-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="5173b-115">Wenn ein Thread <xref:System.Threading.WaitHandle.WaitOne%2A> aufruft, während sich die <xref:System.Threading.AutoResetEvent> im signalisierten Zustand befindet, wird der Thread nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="5173b-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="5173b-116">Der <xref:System.Threading.AutoResetEvent> gibt den Thread sofort frei und kehrt in den Zustand "nicht signalisiert" zurück.</span><span class="sxs-lookup"><span data-stu-id="5173b-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5173b-117">Es gibt keine Garantie, dass jeder Aufrufe der <xref:System.Threading.EventWaitHandle.Set%2A>-Methode einen Thread freigibt.</span><span class="sxs-lookup"><span data-stu-id="5173b-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="5173b-118">Wenn zwei Aufrufe zu eng beieinander liegen, sodass der zweite Aufruf stattfindet, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben.</span><span class="sxs-lookup"><span data-stu-id="5173b-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="5173b-119">Dies ist der Fall, wenn der zweite-Vorgang nicht durchgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="5173b-119">It's as if the second call did not happen.</span></span> <span data-ttu-id="5173b-120">Wenn <xref:System.Threading.EventWaitHandle.Set%2A> aufgerufen wird, wenn keine Threads warten und der <xref:System.Threading.AutoResetEvent> bereits signalisiert ist, hat der Aufruf keine Auswirkung.</span><span class="sxs-lookup"><span data-stu-id="5173b-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="5173b-121">Sie können den Anfangszustand einer `AutoResetEvent` steuern, indem Sie einen booleschen Wert an den Konstruktor übergeben: `true`, wenn der Anfangszustand signalisiert ist, und andernfalls `false`.</span><span class="sxs-lookup"><span data-stu-id="5173b-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="5173b-122">`AutoResetEvent` können auch mit den Methoden `static` <xref:System.Threading.WaitHandle.WaitAll%2A> und <xref:System.Threading.WaitHandle.WaitAny%2A> verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5173b-122">`AutoResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="5173b-123">Ab Version 2,0 von .NET Framework wird <xref:System.Threading.AutoResetEvent> von der neuen <xref:System.Threading.EventWaitHandle>-Klasse abgeleitet.</span><span class="sxs-lookup"><span data-stu-id="5173b-123">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="5173b-124">Ein-<xref:System.Threading.AutoResetEvent> ist funktional äquivalent zu einem <xref:System.Threading.EventWaitHandle>, der mit <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="5173b-124">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5173b-125">Im Gegensatz zur <xref:System.Threading.AutoResetEvent>-Klasse bietet die <xref:System.Threading.EventWaitHandle>-Klasse Zugriff auf benannte System Synchronisierungs Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="5173b-125">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5173b-126">Im folgenden Beispiel wird gezeigt, wie Sie mit <xref:System.Threading.AutoResetEvent> einen Thread gleichzeitig freigeben können, indem Sie die <xref:System.Threading.EventWaitHandle.Set%2A>-Methode (für die Basisklasse) jedes Mal aufrufen, wenn der Benutzer die **Eingabe** Taste drückt.</span><span class="sxs-lookup"><span data-stu-id="5173b-126">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="5173b-127">Im Beispiel werden drei Threads gestartet, die auf eine <xref:System.Threading.AutoResetEvent> warten, die im signalisierten Zustand erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="5173b-127">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="5173b-128">Der erste Thread wird sofort freigegeben, da sich die <xref:System.Threading.AutoResetEvent> bereits im signalisierten Zustand befindet.</span><span class="sxs-lookup"><span data-stu-id="5173b-128">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="5173b-129">Dadurch wird der <xref:System.Threading.AutoResetEvent> auf den nicht signalisierten Zustand zurückgesetzt, sodass nachfolgende Threads blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="5173b-129">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="5173b-130">Die blockierten Threads werden erst freigegeben, wenn der Benutzer Sie nacheinander durch Drücken der **Eingabe** Taste loslässt.</span><span class="sxs-lookup"><span data-stu-id="5173b-130">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="5173b-131">Nachdem die Threads vom ersten <xref:System.Threading.AutoResetEvent>freigegeben wurden, warten Sie auf einen anderen <xref:System.Threading.AutoResetEvent>, der im nicht signalisierten Zustand erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="5173b-131">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="5173b-132">Alle drei Threads blockieren, sodass die <xref:System.Threading.EventWaitHandle.Set%2A>-Methode dreimal aufgerufen werden muss, um alle Dateien freizugeben.</span><span class="sxs-lookup"><span data-stu-id="5173b-132">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5173b-133">Diese Klasse ist Thread sicher.</span><span class="sxs-lookup"><span data-stu-id="5173b-133">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="/dotnet/standard/threading/"><span data-ttu-id="5173b-134">Verwaltetes Threading</span><span class="sxs-lookup"><span data-stu-id="5173b-134">Managed Threading</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives"><span data-ttu-id="5173b-135">Übersicht über Synchronisierungsprimitive</span><span class="sxs-lookup"><span data-stu-id="5173b-135">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="5173b-136"><see langword="true" />, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll. <see langword="false" />, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="5173b-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="5173b-137">Initialisiert eine neue Instanz der <see cref="T:System.Threading.AutoResetEvent" />-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</span><span class="sxs-lookup"><span data-stu-id="5173b-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5173b-138">Im folgenden Beispiel wird ein-<xref:System.Threading.AutoResetEvent> verwendet, um die Aktivitäten von zwei Threads zu synchronisieren.</span><span class="sxs-lookup"><span data-stu-id="5173b-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="5173b-139">Der erste Thread, bei dem es sich um den Anwendungs Thread handelt, führt `Main`aus.</span><span class="sxs-lookup"><span data-stu-id="5173b-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="5173b-140">Er schreibt Werte in die geschützte Ressource, bei der es sich um ein `static` Feld (`Shared` in Visual Basic) mit dem Namen `number`handelt.</span><span class="sxs-lookup"><span data-stu-id="5173b-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="5173b-141">Der zweite Thread führt die statische `ThreadProc`-Methode aus, die die von `Main`geschriebenen Werte liest.</span><span class="sxs-lookup"><span data-stu-id="5173b-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="5173b-142">Die `ThreadProc`-Methode wartet auf die <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="5173b-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="5173b-143">Wenn `Main` die <xref:System.Threading.EventWaitHandle.Set%2A>-Methode auf dem <xref:System.Threading.AutoResetEvent>aufruft, liest die `ThreadProc`-Methode einen Wert.</span><span class="sxs-lookup"><span data-stu-id="5173b-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="5173b-144">Der <xref:System.Threading.AutoResetEvent> wird sofort zurückgesetzt, sodass die `ThreadProc`-Methode erneut wartet.</span><span class="sxs-lookup"><span data-stu-id="5173b-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="5173b-145">Die Programmlogik stellt sicher, dass die `ThreadProc`-Methode den gleichen Wert nie zweimal liest.</span><span class="sxs-lookup"><span data-stu-id="5173b-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="5173b-146">Es wird nicht garantiert, dass die `ThreadProc`-Methode jeden von `Main`geschriebenen Wert liest.</span><span class="sxs-lookup"><span data-stu-id="5173b-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="5173b-147">Diese Garantie würde eine zweite <xref:System.Threading.AutoResetEvent> Sperre erfordern.</span><span class="sxs-lookup"><span data-stu-id="5173b-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="5173b-148">Nach jedem Schreibvorgang `Main` Ergebnisse durch Aufrufen der <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>-Methode, um dem zweiten Thread die Möglichkeit zur Ausführung zu geben.</span><span class="sxs-lookup"><span data-stu-id="5173b-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="5173b-149">Andernfalls werden auf einem Computer mit einem Prozessor `Main` viele Werte zwischen zwei einzelnen Lesevorgängen geschrieben.</span><span class="sxs-lookup"><span data-stu-id="5173b-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="/dotnet/standard/threading/"><span data-ttu-id="5173b-150">Verwaltetes Threading</span><span class="sxs-lookup"><span data-stu-id="5173b-150">Managed Threading</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives"><span data-ttu-id="5173b-151">Übersicht über Synchronisierungsprimitive</span><span class="sxs-lookup"><span data-stu-id="5173b-151">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5173b-152">Legt den Zustand des Ereignisses auf „nicht signalisiert“ fest, sodass Threads blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="5173b-152">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="5173b-153"><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5173b-153"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5173b-154">Legt den Zustand des Ereignisses auf „signalisiert“ fest und ermöglicht so mindestens einem wartenden Thread das Fortfahren.</span><span class="sxs-lookup"><span data-stu-id="5173b-154">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="5173b-155"><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5173b-155"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="5173b-156">Die Set-Methode gibt einen einzelnen Thread frei.</span><span class="sxs-lookup"><span data-stu-id="5173b-156">The Set method releases a single thread.</span></span> <span data-ttu-id="5173b-157">Wenn keine wartenden Threads vorhanden sind, bleibt das Wait-Handle signalisiert, bis ein Thread versucht, darauf zu warten, oder bis seine Reset-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="5173b-157">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="5173b-158">Es gibt keine Garantie, dass jeder Aufrufe der Set-Methode einen Thread freigibt.</span><span class="sxs-lookup"><span data-stu-id="5173b-158">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="5173b-159">Wenn zwei Aufrufe zu eng beieinander liegen, sodass der zweite Aufruf stattfindet, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben, als wäre der zweite Aufruf nicht erfolgt.</span><span class="sxs-lookup"><span data-stu-id="5173b-159">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="5173b-160">Außerdem hat der Aufruf keine Auswirkung, wenn die Set-Methode aufgerufen wird, wenn keine Threads warten und die <xref:System.Threading.AutoResetEvent> bereits signalisiert ist.</span><span class="sxs-lookup"><span data-stu-id="5173b-160">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

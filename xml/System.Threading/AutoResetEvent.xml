<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a12bd85301140b6aefdac8e3f039b5d875614238" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86619894" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::WaitHandle" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit WaitHandle" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Threadsynchronisierungsereignis dar, das automatisch ausgelöst wird, nachdem ein einzelner wartender Thread freigegeben wurde. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden `AutoResetEvent` , <xref:System.Threading.ManualResetEvent> und <xref:System.Threading.EventWaitHandle> für die Thread Interaktion (oder Thread Signalisierung). Weitere Informationen finden Sie im Artikel [Thread Interaktion oder Signalisierung](/dotnet/standard/threading/overview-of-synchronization-primitives#thread-interaction-or-signaling) im Artikel [Übersicht über Synchronisierungs primitive](/dotnet/standard/threading/overview-of-synchronization-primitives) .  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle. Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen. Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf. Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.  
  
 Ein Thread wartet auf ein Signal durch Aufrufen von [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A). Wenn `AutoResetEvent` sich der im nicht signalisierten Zustand befindet, wird der Thread blockiert, bis [AutoResetEvent. set](xref:System.Threading.EventWaitHandle.Set%2A) aufgerufen wird.  
  
 Aufrufen `Set` `AutoResetEvent` von signalisiert, einen wartenden Thread freizugeben. `AutoResetEvent` bleibt signalisiert, bis ein einzelner wartender Thread freigegeben wird, und kehrt dann automatisch in den Zustand "nicht signalisiert" zurück. Wenn keine Threads warten, bleibt der Status unbegrenzt signalisiert.  
  
 Wenn ein Thread aufruft <xref:System.Threading.WaitHandle.WaitOne%2A> , während <xref:System.Threading.AutoResetEvent> sich der im signalisierten Zustand befindet, wird der Thread nicht blockiert. Der <xref:System.Threading.AutoResetEvent> gibt den Thread sofort frei und kehrt in den Zustand "nicht signalisiert" zurück.  
  
> [!IMPORTANT]
>  Es gibt keine Garantie, dass jeder Aufrufe der- <xref:System.Threading.EventWaitHandle.Set%2A> Methode einen Thread freigibt. Wenn zwei Aufrufe zu eng beieinander liegen, sodass der zweite Aufruf stattfindet, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben. Dies ist der Fall, wenn der zweite-Vorgang nicht durchgeführt wurde. Wenn auch <xref:System.Threading.EventWaitHandle.Set%2A> aufgerufen wird, wenn keine Threads warten und der <xref:System.Threading.AutoResetEvent> bereits signalisiert ist, hat der Aufruf keine Auswirkung.  
  
 Sie können den Anfangszustand eines Steuern `AutoResetEvent` , indem Sie einen booleschen Wert an den Konstruktor übergeben:, `true` Wenn der Anfangszustand signalisiert wird, und `false` andernfalls.  
  
 `AutoResetEvent` kann auch mit der `static` <xref:System.Threading.WaitHandle.WaitAll%2A> -Methode und der-Methode verwendet werden <xref:System.Threading.WaitHandle.WaitAny%2A> .  
  
 Beginnend mit der .NET Framework Version 2,0, wird <xref:System.Threading.AutoResetEvent> von der neuen- <xref:System.Threading.EventWaitHandle> Klasse abgeleitet. Eine <xref:System.Threading.AutoResetEvent> ist funktional äquivalent zu einer, die <xref:System.Threading.EventWaitHandle> mit erstellt wurde <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> .  
  
> [!NOTE]
>  Im Gegensatz zur- <xref:System.Threading.AutoResetEvent> Klasse <xref:System.Threading.EventWaitHandle> bietet die-Klasse Zugriff auf benannte System Synchronisierungs Ereignisse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie verwendet <xref:System.Threading.AutoResetEvent> wird, um jeweils einen Thread freizugeben, indem die- <xref:System.Threading.EventWaitHandle.Set%2A> Methode (für die Basisklasse) jedes Mal aufgerufen wird, wenn der Benutzer die **Eingabe** Taste drückt. Im Beispiel werden drei Threads gestartet, die auf einen warten, <xref:System.Threading.AutoResetEvent> der im signalisierten Zustand erstellt wurde. Der erste Thread wird sofort freigegeben, da <xref:System.Threading.AutoResetEvent> sich bereits im signalisierten Zustand befindet. Dadurch <xref:System.Threading.AutoResetEvent> wird der auf den Zustand "nicht signalisiert" zurückgesetzt, sodass nachfolgende Threads blockiert werden. Die blockierten Threads werden erst freigegeben, wenn der Benutzer Sie nacheinander durch Drücken der **Eingabe** Taste loslässt.  
  
 Nachdem die Threads vom ersten freigegeben <xref:System.Threading.AutoResetEvent> wurden, warten Sie auf einen anderen, <xref:System.Threading.AutoResetEvent> der im nicht signalisierten Zustand erstellt wurde. Alle drei Threads blockieren, sodass die- <xref:System.Threading.EventWaitHandle.Set%2A> Methode dreimal aufgerufen werden muss, um alle Dateien freizugeben.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Diese Klasse ist Thread sicher.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="/dotnet/standard/threading/">Verwaltetes Threading</related>
    <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives">Übersicht über Synchronisierungsprimitive</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" />, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll. <see langword="false" />, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.AutoResetEvent" />-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein verwendet <xref:System.Threading.AutoResetEvent> , um die Aktivitäten von zwei Threads zu synchronisieren. Der erste Thread, der der Anwendungs Thread ist, wird ausgeführt `Main` . Er schreibt Werte in die geschützte Ressource, bei der es sich um ein `static` ( `Shared` in Visual Basic) Feld mit dem Namen handelt `number` . Der zweite Thread führt die statische- `ThreadProc` Methode aus, die die von geschriebenen Werte liest `Main` .  
  
 Die- `ThreadProc` Methode wartet auf den <xref:System.Threading.AutoResetEvent> . Wenn `Main` die- <xref:System.Threading.EventWaitHandle.Set%2A> Methode für den aufruft <xref:System.Threading.AutoResetEvent> , `ThreadProc` liest die-Methode einen Wert. Die <xref:System.Threading.AutoResetEvent> wird sofort zurückgesetzt, sodass die `ThreadProc` Methode erneut wartet.  
  
 Die Programmlogik stellt sicher, dass die- `ThreadProc` Methode den gleichen Wert nie zweimal liest. Es wird nicht garantiert, dass die- `ThreadProc` Methode jeden von geschriebenen Wert liest `Main` . Diese Garantie würde eine zweite <xref:System.Threading.AutoResetEvent> Sperre erfordern.  
  
 Nach jedem Schreibvorgang `Main` ergibt durch Aufrufen der- <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> Methode, um dem zweiten Thread die Möglichkeit zur Ausführung zu geben. Andernfalls würden auf einem Computer mit einem Prozessor `Main` viele Werte zwischen zwei beliebigen Lesevorgängen geschrieben werden.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="/dotnet/standard/threading/">Verwaltetes Threading</related>
        <related type="Article" href="/dotnet/standard/threading/overview-of-synchronization-primitives">Übersicht über Synchronisierungsprimitive</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf „nicht signalisiert“ fest, sodass Threads blockiert werden.</summary>
        <returns><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf „signalisiert“ fest und ermöglicht so mindestens einem wartenden Thread das Fortfahren.</summary>
        <returns><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Die Set-Methode gibt einen einzelnen Thread frei. Wenn keine wartenden Threads vorhanden sind, bleibt das Wait-Handle signalisiert, bis ein Thread versucht, darauf zu warten, oder bis seine Reset-Methode aufgerufen wird.

> [!IMPORTANT]
> Es gibt keine Garantie, dass jeder Aufrufe der Set-Methode einen Thread freigibt. Wenn zwei Aufrufe zu eng beieinander liegen, sodass der zweite Aufruf stattfindet, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben, als wäre der zweite Aufruf nicht erfolgt. Außerdem hat der Aufruf keine Auswirkung, wenn die Set-Methode aufgerufen wird, wenn keine Threads warten und der <xref:System.Threading.AutoResetEvent> bereits signalisiert ist.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

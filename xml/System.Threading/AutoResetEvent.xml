<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="877b21e226be713e2c76d2046be804f171d3f10f" /><Meta Name="ms.sourcegitcommit" Value="22744e2f9d07a51900a968efffd9e390117d64a1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/03/2019" /><Meta Name="ms.locfileid" Value="55670114" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Threadsynchronisierungsereignis dar, das automatisch ausgelöst wird, nachdem ein einzelner wartender Thread freigegeben wurde. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, und <xref:System.Threading.EventWaitHandle> für Threadinteraktionen (oder Thread-Signalisierung). Weitere Informationen finden Sie unter den [Thread Interaktion oder Signalisierung](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) Teil der [Übersicht über Synchronisierungsprimitiven](~/docs/standard/threading/overview-of-synchronization-primitives.md) Artikel.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle. Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen. Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf. Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.  
  
 Ein Thread wartet ein Signal, indem er [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A). Wenn die `AutoResetEvent` befindet sich im nicht signalisierten Zustand, den Thread blockiert, bis [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) aufgerufen wird.  
  
 Aufrufen von `Set` Signale `AutoResetEvent` einen wartender Thread freigegeben. `AutoResetEvent` bleibt signalisiert, bis ein einzelner wartender Thread freigegeben wird, und klicken Sie dann automatisch in den nicht signalisierten Zustand zurück. Wenn keine Threads warten, bleibt der Status auf unbestimmte Zeit signalisiert.  
  
 Wenn ein Thread ruft <xref:System.Threading.WaitHandle.WaitOne%2A> während der <xref:System.Threading.AutoResetEvent> ist in den signalisierten Zustand ist, wird der Thread nicht blockiert. Die <xref:System.Threading.AutoResetEvent> gibt der Thread sofort frei, und in den nicht signalisierten Zustand zurück.  
  
> [!IMPORTANT]
>  Es gibt keine Garantie, die für jeden Aufruf der <xref:System.Threading.EventWaitHandle.Set%2A> Methode ein Thread freigegeben wird. Wenn zwei Aufrufe zu eng beieinander liegen, sind, sodass der zweite Aufruf erfolgt, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben. Es ist, als wäre der zweite Aufruf nicht der Fall. Auch wenn <xref:System.Threading.EventWaitHandle.Set%2A> wird aufgerufen, wenn es sind keine Threads warten und die <xref:System.Threading.AutoResetEvent> bereits signalisiert wird, wird der Aufruf hat keine Auswirkungen.  
  
 Sie können den ursprünglichen Status des steuern eine `AutoResetEvent` durch einen booleschen Wert an den Konstruktor übergeben: `true` , wenn der anfängliche Zustand signalisiert wird, und `false` andernfalls.  
  
 `AutoResetEvent` kann auch verwendet werden, mit der `static` <xref:System.Threading.WaitHandle.WaitAll%2A> und <xref:System.Threading.WaitHandle.WaitAny%2A> Methoden.  
  
 Ab .NET Framework, Version 2.0, <xref:System.Threading.AutoResetEvent> leitet sich von der neuen <xref:System.Threading.EventWaitHandle> Klasse. Ein <xref:System.Threading.AutoResetEvent> ist funktionell gleichwertig mit einer <xref:System.Threading.EventWaitHandle> mit erstellt <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Im Gegensatz zu den <xref:System.Threading.AutoResetEvent> -Klasse, die <xref:System.Threading.EventWaitHandle> Klasse bietet Zugriff auf benannte Synchronisierungsereignisse.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit <xref:System.Threading.AutoResetEvent> auf einen Thread zu einem Zeitpunkt freigeben, indem die <xref:System.Threading.EventWaitHandle.Set%2A> Methode (in der Basisklasse) jedes Mal der Benutzer drückt die **EINGABETASTE** Schlüssel. Das Beispiel beginnt der drei Threads, die warten auf eine <xref:System.Threading.AutoResetEvent> , die in den signalisierten Zustand erstellt wurde. Der erste Thread wird sofort freigegeben, da die <xref:System.Threading.AutoResetEvent> ist bereits in den signalisierten Zustand. Dies setzt die <xref:System.Threading.AutoResetEvent> in den Zustand "nicht signalisiert", damit nachfolgende Threads blockiert. Blockierte Threads werden nicht freigegeben werden, bis der Benutzer eine veröffentlicht jeweils durch Drücken der **EINGABETASTE** Schlüssel.  
  
 Nach der Veröffentlichung von Threads aus dem ersten sind <xref:System.Threading.AutoResetEvent>, warten sie auf einen anderen <xref:System.Threading.AutoResetEvent> , die im Zustand "nicht signalisiert" erstellt wurde. Alle drei Threads zu blockieren, sodass die <xref:System.Threading.EventWaitHandle.Set%2A> Methode muss drei Mal aufgerufen werden, um alle freizugeben.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Diese Klasse ist threadsicher.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Verwaltetes Threading</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Übersicht über Synchronisierungsprimitive</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" />, wenn der anfängliche Zustand auf signalisiert festgelegt werden soll. <see langword="false" />, wenn der anfängliche Zustand auf nicht signalisiert festgelegt werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.AutoResetEvent" />-Klasse mit einem booleschen Wert, der angibt, ob der anfängliche Zustand auf signalisiert festgelegt werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Threading.AutoResetEvent> zum Synchronisieren der Aktivitäten von zwei Threads. Der erste Thread, der dem Thread der Anwendung ist, führt `Main`. Er schreibt Werte in die geschützte Ressource, d.h. eine `static` (`Shared` in Visual Basic) Feld mit dem Namen `number`. Der zweite Thread führt die statische `ThreadProc` Methode, die Werte liest von geschrieben `Main`.  
  
 Die `ThreadProc` Methode wartet der <xref:System.Threading.AutoResetEvent>. Wenn `Main` Aufrufe der <xref:System.Threading.EventWaitHandle.Set%2A> Methode für die <xref:System.Threading.AutoResetEvent>, `ThreadProc` Methode liest einen Wert. Die <xref:System.Threading.AutoResetEvent> sofort zurückgesetzt, sodass die `ThreadProc` Methode wartet erneut.  
  
 Die Logik des Programm wird sichergestellt, dass die `ThreadProc` Methode nie liest den gleichen Wert doppelt so groß wie. Dies garantiert nicht, die die `ThreadProc` Methode liest jeden Wert von geschrieben `Main`. Dafür wäre ein zweites erforderlich <xref:System.Threading.AutoResetEvent> Sperre.  
  
 Nach jedem Schreibvorgang `Main` führt Sie durch Aufrufen der <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> Methode, um dem zweiten Thread die Möglichkeit zum Ausführen geben. Andernfalls klicken Sie auf einem Computer mit einem Prozessor `Main` würden schreiben viele Werte zwischen zwei Lesevorgängen.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Verwaltetes Threading</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Übersicht über Synchronisierungsprimitive</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf „nicht signalisiert“ fest, sodass Threads blockiert werden.</summary>
        <returns><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Zustand des Ereignisses auf „signalisiert“ fest und ermöglicht so mindestens einem wartenden Thread das Fortfahren.</summary>
        <returns><see langword="true" />, wenn die Operation erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Die Set-Methode gibt einen einzelnen Thread frei. Wenn keine wartenden Threads vorhanden sind, bleibt das Wait-Handle signalisiert, bis ein Thread versucht, die darauf warten, oder die "Reset"-Methode aufgerufen wird.

> [!IMPORTANT]
> Es gibt keine Garantie, dass für jeden Aufruf der Set-Methode ein Thread freigegeben wird. Wenn zwei Aufrufe zu eng beieinander liegen, sind, sodass der zweite Aufruf erfolgt, bevor ein Thread freigegeben wurde, wird nur ein Thread freigegeben, als wäre der zweite Aufruf nicht ohnehin -. Auch wenn die Set-Methode aufgerufen wird, wenn es sind keine Threads warten und die <xref:System.Threading.AutoResetEvent> bereits signalisiert wird, wird der Aufruf hat keine Auswirkungen.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

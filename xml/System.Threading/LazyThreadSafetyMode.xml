<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="5273b-101">Gibt an, wie eine <see cref="T:System.Lazy`1" />-Instanz den Zugriff bei mehreren Threads synchronisiert.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5273b-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5273b-102">Mithilfe dieser Enumeration an die `mode` Parameter <xref:System.Lazy%601> Konstruktoren.</span><span class="sxs-lookup"><span data-stu-id="5273b-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="5273b-103">Die Effekte von allen Konstruktoren für die Threadsynchronisierung können im Hinblick auf diese Enumeration beschrieben werden, unabhängig davon, ob sie verfügen über `mode` Parameter.</span><span class="sxs-lookup"><span data-stu-id="5273b-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="5273b-104">Ein <xref:System.Lazy%601> -Instanz wird initialisiert, indem Sie ein benutzerdefiniertes Initialisierungsmethode oder der Standardkonstruktor für `T`.</span><span class="sxs-lookup"><span data-stu-id="5273b-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="5273b-105">Die Initialisierungsmethode wird angegeben, indem die `valueFactory` Parameter von einem <xref:System.Lazy%601> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="5273b-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="5273b-106">Die Methode gibt eine Instanz des `T`, d. h. den Typ, der von der Instanz der verzögert instanziiert wird <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="5273b-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="5273b-107">Wenn ein Konstruktor keine `valueFactory` Parameter, der Standardkonstruktor für `T` zur Initialisierung der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="5273b-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="5273b-108">In beiden Fällen Initialisierung erfolgt beim ersten Aufruf der <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="5273b-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="5273b-109">Zusätzlich zum Angeben der Threadsicherheit von einem <xref:System.Lazy%601> Instanz, die diese Enumeration wirkt sich auf das Zwischenspeichern von Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="5273b-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="5273b-110">Wenn Ausnahmen für zwischengespeichert sind eine <xref:System.Lazy%601> Instanz, erhalten Sie nur eine Möglichkeit zum Initialisieren der Instanz.</span><span class="sxs-lookup"><span data-stu-id="5273b-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="5273b-111">Wenn eine Ausnahme, beim ersten ausgelöst wird Aufrufen der <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft, dass die Ausnahme zwischengespeichert und erneut ausgelöst, auf alle nachfolgenden Aufrufe an die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="5273b-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="5273b-112">Der Vorteil der caching-Ausnahmen ist, dass keine zwei Threads immer das gleiche Ergebnis erhalten, selbst wenn Fehler auftreten.</span><span class="sxs-lookup"><span data-stu-id="5273b-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="5273b-113">Wenn Sie den PublicationOnly-Modus angeben, werden Ausnahmen nie zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="5273b-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="5273b-114">Wenn Sie keine angeben oder ExecutionAndPublication, Zwischenspeichern abhängig, ob eine Initialisierungsmethode angeben oder zulassen den Standardkonstruktor für `T` verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5273b-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="5273b-115">Durch die Angabe einer Initialisierungsmethode wird das Zwischenspeichern von Ausnahmen für diese beiden Modi aktiviert.</span><span class="sxs-lookup"><span data-stu-id="5273b-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="5273b-116">Die Initialisierungsmethode kann sehr einfach sein.</span><span class="sxs-lookup"><span data-stu-id="5273b-116">The initialization method can be very simple.</span></span> <span data-ttu-id="5273b-117">Sie kann z.B. den Standardkonstruktor für `T` aufrufen: `new Lazy<Contents>(() => new Contents(), mode)` in C# bzw. `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5273b-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="5273b-118">Wenn Sie einen Konstruktor verwenden, die keine Initialisierungsmethode, Ausnahmen angeben, die vom Standardkonstruktor für ausgelöst werden `T` werden nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="5273b-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="5273b-119">In der folgenden Tabelle sind die Ausnahme, die Verhalten beim Zwischenspeichern zusammengefasst.</span><span class="sxs-lookup"><span data-stu-id="5273b-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="5273b-120">Modus</span><span class="sxs-lookup"><span data-stu-id="5273b-120">Mode</span></span>|<span data-ttu-id="5273b-121">Verwenden die Initialisierungsmethode</span><span class="sxs-lookup"><span data-stu-id="5273b-121">Using initialization method</span></span>|<span data-ttu-id="5273b-122">Mithilfe der Standardkonstruktor für `T`</span><span class="sxs-lookup"><span data-stu-id="5273b-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="5273b-123">Keiner</span><span class="sxs-lookup"><span data-stu-id="5273b-123">None</span></span>|<span data-ttu-id="5273b-124">Zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="5273b-124">Cached</span></span>|<span data-ttu-id="5273b-125">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="5273b-125">Not cached</span></span>|  
|<span data-ttu-id="5273b-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="5273b-126">PublicationOnly</span></span>|<span data-ttu-id="5273b-127">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="5273b-127">Not cached</span></span>|<span data-ttu-id="5273b-128">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="5273b-128">Not cached</span></span>|  
|<span data-ttu-id="5273b-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="5273b-129">ExecutionAndPublication</span></span>|<span data-ttu-id="5273b-130">Zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="5273b-130">Cached</span></span>|<span data-ttu-id="5273b-131">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="5273b-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="5273b-132">Sperren werden dazu verwendet, um sicherzustellen, dass eine <see cref="T:System.Lazy`1" />-Instanz nur von einem einzelner Thread auf threadsichere Weise initialisiert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-132">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span>
          </span>
          <span data-ttu-id="5273b-133">Wenn die Initialisierungsmethode (oder der Standardkonstruktor, wenn keine Initialisierungsmethode vorhanden ist) die Sperren intern verwendet, können Deadlocks auftreten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-133">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span>
          </span>
          <span data-ttu-id="5273b-134">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<paramref name="valueFactory" />-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <see cref="P:System.Lazy`1.Value" />-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <see cref="P:System.Lazy`1.Value" />-Eigenschaft erneut ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-134">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="5273b-135">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden Ausnahmen nicht zwischengespeichert, die vom Standardkonstruktor für <paramref name="T" /> ausgelöst werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-135">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="5273b-136">In diesem Fall kann ein nachfolgender Aufruf der <see cref="P:System.Lazy`1.Value" />-Eigenschaft die <see cref="T:System.Lazy`1" />-Instanz möglicherweise erfolgreich initialisieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-136">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="5273b-137">Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird eine <see cref="T:System.InvalidOperationException" /> ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-137">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="5273b-138">Die <see cref="T:System.Lazy`1" />-Instanz ist nicht threadsicher. Wenn mehrere Threads auf die Instanz zugreifen, ist das Verhalten nicht definiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-138">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span>
          </span>
          <span data-ttu-id="5273b-139">Verwenden Sie diesen Modus nur, wenn hohe Leistungsfähigkeit entscheidend ist und die <see cref="T:System.Lazy`1" />-Instanz garantiert nie von mehr als einem Thread initialisiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-139">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span>
          </span>
          <span data-ttu-id="5273b-140">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<paramref name="valueFactory" />-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <see cref="P:System.Lazy`1.Value" />-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <see cref="P:System.Lazy`1.Value" />-Eigenschaft erneut ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-140">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="5273b-141">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden Ausnahmen nicht zwischengespeichert, die vom Standardkonstruktor für <paramref name="T" /> ausgelöst werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-141">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="5273b-142">In diesem Fall kann ein nachfolgender Aufruf der <see cref="P:System.Lazy`1.Value" />-Eigenschaft die <see cref="T:System.Lazy`1" />-Instanz möglicherweise erfolgreich initialisieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-142">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="5273b-143">Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird eine <see cref="T:System.InvalidOperationException" /> ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-143">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="5273b-144">Wenn mehrere Threads gleichzeitig versuchen, eine <see cref="T:System.Lazy`1" />-Instanz zu initialisieren, dürfen alle Threads die Initialisierungsmethode (oder den Standardkonstruktor, wenn keine Initialisierungsmethode vorhanden ist) ausführen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-144">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span>
          </span>
          <span data-ttu-id="5273b-145">Der erste Thread, der die Initialisierung abgeschlossen hat, legt den Wert der <see cref="T:System.Lazy`1" />-Instanz fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-145">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="5273b-146">Dieser Wert wird an alle anderen Threads zurückgegeben, die die Initialisierungsmethode gleichzeitig ausgeführt haben, sofern die Initialisierungsmethode für diese Threads keine Ausnahmen ausgelöst hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-146">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span>
          </span>
          <span data-ttu-id="5273b-147">Alle Instanzen von <paramref name="T" />, die von den konkurrierenden Threads erstellt wurden, werden verworfen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-147">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span>
          </span>
          <span data-ttu-id="5273b-148">Wenn die Initialisierungsmethode für einen Thread eine Ausnahme auslöst, wird die Ausnahme aus der <see cref="P:System.Lazy`1.Value" />-Eigenschaft für diesen Thread weitergegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-148">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span>
          </span>
          <span data-ttu-id="5273b-149">Die Ausnahme wird nicht zwischengespeichert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-149">The exception is not cached.</span>
          </span>
          <span data-ttu-id="5273b-150">Der Wert der <see cref="P:System.Lazy`1.IsValueCreated" />-Eigenschaft bleibt <see langword="false" /> und nachfolgende Aufrufe der <see cref="P:System.Lazy`1.Value" />-Eigenschaft führen zur erneuten Ausführung der Initialisierungsmethode, entweder durch den Thread, bei dem die Ausnahme ausgelöst wurde oder durch andere Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-150">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span>
          </span>
          <span data-ttu-id="5273b-151">Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird keine Ausnahme ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5273b-151">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LazyThreadSafetyMode.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifies how a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance synchronizes access among multiple threads.</source>
          <target state="translated">Gibt an, wie eine <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz den Zugriff bei mehreren Threads synchronisiert.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Use this enumeration to specify the <ph id="ph1">`mode`</ph> parameter of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructors.</source>
          <target state="translated">Mithilfe dieser Enumeration an die <ph id="ph1">`mode`</ph> Parameter <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> Konstruktoren.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have <ph id="ph1">`mode`</ph> parameters.</source>
          <target state="translated">Die Effekte von allen Konstruktoren für die Threadsynchronisierung können im Hinblick auf diese Enumeration beschrieben werden, unabhängig davon, ob sie verfügen über <ph id="ph1">`mode`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance is initialized either by a user-specified initialization method or by the default constructor for <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> -Instanz wird initialisiert, indem Sie ein benutzerdefiniertes Initialisierungsmethode oder der Standardkonstruktor für <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method is specified by the <ph id="ph1">`valueFactory`</ph> parameter of a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructor.</source>
          <target state="translated">Die Initialisierungsmethode wird angegeben, indem die <ph id="ph1">`valueFactory`</ph> Parameter von einem <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> Konstruktor.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The method returns an instance of <ph id="ph1">`T`</ph>, which is the type that is lazily instantiated by the instance of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">Die Methode gibt eine Instanz des <ph id="ph1">`T`</ph>, d. h. den Typ, der von der Instanz der verzögert instanziiert wird <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If a constructor does not have a <ph id="ph1">`valueFactory`</ph> parameter, the default constructor for <ph id="ph2">`T`</ph> is used to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Wenn ein Konstruktor keine <ph id="ph1">`valueFactory`</ph> Parameter, der Standardkonstruktor für <ph id="ph2">`T`</ph> zur Initialisierung der <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> Instanz.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In either case, initialization occurs the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">In beiden Fällen Initialisierung erfolgt beim ersten Aufruf der <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In addition to specifying the thread safety of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, this enumeration affects exception caching.</source>
          <target state="translated">Zusätzlich zum Angeben der Threadsicherheit von einem <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> Instanz, die diese Enumeration wirkt sich auf das Zwischenspeichern von Ausnahmen.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When exceptions are cached for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, you get only one chance to initialize the instance.</source>
          <target state="translated">Wenn Ausnahmen für zwischengespeichert sind eine <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> Instanz, erhalten Sie nur eine Möglichkeit zum Initialisieren der Instanz.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If an exception is thrown the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property, that exception is cached and rethrown on all subsequent calls to the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Wenn eine Ausnahme, beim ersten ausgelöst wird Aufrufen der <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft, dass die Ausnahme zwischengespeichert und erneut ausgelöst, auf alle nachfolgenden Aufrufe an die <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</source>
          <target state="translated">Der Vorteil der caching-Ausnahmen ist, dass keine zwei Threads immer das gleiche Ergebnis erhalten, selbst wenn Fehler auftreten.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify the PublicationOnly mode, exceptions are never cached.</source>
          <target state="translated">Wenn Sie den PublicationOnly-Modus angeben, werden Ausnahmen nie zwischengespeichert.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for <ph id="ph1">`T`</ph> to be used.</source>
          <target state="translated">Wenn Sie keine angeben oder ExecutionAndPublication, Zwischenspeichern abhängig, ob eine Initialisierungsmethode angeben oder zulassen den Standardkonstruktor für <ph id="ph1">`T`</ph> verwendet werden.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifying an initialization method enables exception caching for these two modes.</source>
          <target state="translated">Durch die Angabe einer Initialisierungsmethode wird das Zwischenspeichern von Ausnahmen für diese beiden Modi aktiviert.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method can be very simple.</source>
          <target state="translated">Die Initialisierungsmethode kann sehr einfach sein.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>For example, it might call the default constructor for <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> in C#, or <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> in Visual Basic.</source>
          <target state="translated">Sie kann z.B. den Standardkonstruktor für <ph id="ph1">`T`</ph> aufrufen: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> in C# bzw. <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph1">`T`</ph> are not cached.</source>
          <target state="translated">Wenn Sie einen Konstruktor verwenden, die keine Initialisierungsmethode, Ausnahmen angeben, die vom Standardkonstruktor für ausgelöst werden <ph id="ph1">`T`</ph> werden nicht zwischengespeichert.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The following table summarizes exception caching behavior.</source>
          <target state="translated">In der folgenden Tabelle sind die Ausnahme, die Verhalten beim Zwischenspeichern zusammengefasst.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Mode</source>
          <target state="translated">Modus</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using initialization method</source>
          <target state="translated">Verwenden die Initialisierungsmethode</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using default constructor for <ph id="ph1">`T`</ph></source>
          <target state="translated">Mithilfe der Standardkonstruktor für <ph id="ph1">`T`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>None</source>
          <target state="translated">Keiner</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">Zwischengespeichert</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nicht zwischengespeichert</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>PublicationOnly</source>
          <target state="translated">PublicationOnly</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nicht zwischengespeichert</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nicht zwischengespeichert</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>ExecutionAndPublication</source>
          <target state="translated">ExecutionAndPublication</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">Zwischengespeichert</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nicht zwischengespeichert</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>Locks are used to ensure that only a single thread can initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance in a thread-safe manner.</source>
          <target state="translated">Sperren werden dazu verwendet, um sicherzustellen, dass eine <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz nur von einem einzelner Thread auf threadsichere Weise initialisiert werden kann.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</source>
          <target state="translated">Wenn die Initialisierungsmethode (oder der Standardkonstruktor, wenn keine Initialisierungsmethode vorhanden ist) die Sperren intern verwendet, können Deadlocks auftreten.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">Wenn Sie einen <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph>-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft erneut ausgelöst.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">Wenn Sie einen <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden Ausnahmen nicht zwischengespeichert, die vom Standardkonstruktor für <ph id="ph2">&lt;paramref name="T" /&gt;</ph> ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">In diesem Fall kann ein nachfolgender Aufruf der <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft die <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz möglicherweise erfolgreich initialisieren.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">Wenn die Initialisierungsmethode rekursiv auf die <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft der <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz zugreift, wird eine <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> ausgelöst.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz ist nicht threadsicher. Wenn mehrere Threads auf die Instanz zugreifen, ist das Verhalten nicht definiert.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>Use this mode only when high performance is crucial and the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is guaranteed never to be initialized from more than one thread.</source>
          <target state="translated">Verwenden Sie diesen Modus nur, wenn hohe Leistungsfähigkeit entscheidend ist und die <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz garantiert nie von mehr als einem Thread initialisiert wird.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">Wenn Sie einen <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph>-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft erneut ausgelöst.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">Wenn Sie einen <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden Ausnahmen nicht zwischengespeichert, die vom Standardkonstruktor für <ph id="ph2">&lt;paramref name="T" /&gt;</ph> ausgelöst werden.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">In diesem Fall kann ein nachfolgender Aufruf der <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft die <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz möglicherweise erfolgreich initialisieren.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">Wenn die Initialisierungsmethode rekursiv auf die <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft der <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz zugreift, wird eine <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> ausgelöst.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>When multiple threads try to initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</source>
          <target state="translated">Wenn mehrere Threads gleichzeitig versuchen, eine <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz zu initialisieren, dürfen alle Threads die Initialisierungsmethode (oder den Standardkonstruktor, wenn keine Initialisierungsmethode vorhanden ist) ausführen.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The first thread to complete initialization sets the value of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Der erste Thread, der die Initialisierung abgeschlossen hat, legt den Wert der <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz fest.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</source>
          <target state="translated">Dieser Wert wird an alle anderen Threads zurückgegeben, die die Initialisierungsmethode gleichzeitig ausgeführt haben, sofern die Initialisierungsmethode für diese Threads keine Ausnahmen ausgelöst hat.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>Any instances of <ph id="ph1">&lt;paramref name="T" /&gt;</ph> that were created by the competing threads are discarded.</source>
          <target state="translated">Alle Instanzen von <ph id="ph1">&lt;paramref name="T" /&gt;</ph>, die von den konkurrierenden Threads erstellt wurden, werden verworfen.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method throws an exception on any thread, the exception is propagated out of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property on that thread.</source>
          <target state="translated">Wenn die Initialisierungsmethode für einen Thread eine Ausnahme auslöst, wird die Ausnahme aus der <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft für diesen Thread weitergegeben.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The exception is not cached.</source>
          <target state="translated">Die Ausnahme wird nicht zwischengespeichert.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property remains <ph id="ph2">&lt;see langword="false" /&gt;</ph>, and subsequent calls to the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</source>
          <target state="translated">Der Wert der <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph>-Eigenschaft bleibt <ph id="ph2">&lt;see langword="false" /&gt;</ph> und nachfolgende Aufrufe der <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft führen zur erneuten Ausführung der Initialisierungsmethode, entweder durch den Thread, bei dem die Ausnahme ausgelöst wurde oder durch andere Threads.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, no exception is thrown.</source>
          <target state="translated">Wenn die Initialisierungsmethode rekursiv auf die <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph>-Eigenschaft der <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph>-Instanz zugreift, wird keine Ausnahme ausgelöst.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
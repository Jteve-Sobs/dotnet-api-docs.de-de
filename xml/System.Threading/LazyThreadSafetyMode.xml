<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36605918" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Gibt an, wie eine <see cref="T:System.Lazy`1" />-Instanz den Zugriff bei mehreren Threads synchronisiert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe dieser Enumeration an die `mode` Parameter <xref:System.Lazy%601> Konstruktoren. Die Auswirkungen von allen Konstruktoren auf Threadsynchronisierung können in Bezug auf diese Enumeration, beschrieben werden, unabhängig davon, ob sie sind `mode` Parameter.  
  
 Ein <xref:System.Lazy%601> -Instanz initialisiert wird, indem eine benutzerdefinierte Initialisierungsmethode oder der Standardkonstruktor für `T`. Die Initialisierungsmethode wird angegeben, indem die `valueFactory` Parameter eine <xref:System.Lazy%601> Konstruktor. Die Methode gibt eine Instanz des `T`, ist der Typ, der von der Instanz von verzögert instanziiert wird <xref:System.Lazy%601>. Wenn ein Konstruktor keine `valueFactory` -Parameter, der Standardkonstruktor für `T` dient zum Initialisieren der <xref:System.Lazy%601> Instanz. In beiden Fällen Initialisierung tritt beim ersten Aufruf der <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Zusätzlich zur Angabe der Threadsicherheit ein <xref:System.Lazy%601> Instanz, die diese Enumeration wirkt sich auf das Zwischenspeichern von Ausnahmen. Wenn Ausnahmen werden zwischengespeichert für eine <xref:System.Lazy%601> Instanz erhalten Sie nur eine Gelegenheit zum Initialisieren der Instanz. Wenn eine Ausnahme, beim ersten ausgelöst wird rufen Sie die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft, dass die Ausnahme zwischengespeichert und erneut ausgelöst, bei allen nachfolgenden Aufrufen der <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft. Der Vorteil der Zwischenspeicherung von Ausnahmen ist, dass zwei Threads immer dasselbe Ergebnis erhalten, selbst wenn Fehler auftreten.  
  
 Wenn Sie den Modus PublicationOnly angeben, werden Ausnahmen nicht zwischengespeichert. Wenn Sie keine angeben oder ExecutionAndPublication, Zwischenspeichern abhängt, ob Sie eine Initialisierungsmethode angeben oder zulassen den Standardkonstruktor für `T` verwendet werden. Durch die Angabe einer Initialisierungsmethode wird das Zwischenspeichern von Ausnahmen für diese beiden Modi aktiviert. Die Initialisierungsmethode kann sehr einfach sein. Sie kann z.B. den Standardkonstruktor für `T` aufrufen: `new Lazy<Contents>(() => new Contents(), mode)` in C# bzw. `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic. Wenn Sie einen Konstruktor verwenden, die keine Ausnahmen eine Initialisierungsmethode angibt, die vom Standardkonstruktor für ausgelöst werden `T` werden nicht zwischengespeichert. Die folgende Tabelle enthält die Ausnahme, die Verhalten beim Zwischenspeichern.  
  
|Modus|Verwenden die Initialisierungsmethode|Verwenden für die Standard-Konstruktor `T`|  
|----------|---------------------------------|---------------------------------------|  
|Keiner|Zwischengespeichert|Nicht zwischengespeichert|  
|PublicationOnly|Nicht zwischengespeichert|Nicht zwischengespeichert|  
|ExecutionAndPublication|Zwischengespeichert|Nicht zwischengespeichert|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Sperren werden dazu verwendet, um sicherzustellen, dass eine <see cref="T:System.Lazy`1" />-Instanz nur von einem einzelner Thread auf threadsichere Weise initialisiert werden kann. Wenn die Initialisierungsmethode (oder der Standardkonstruktor, wenn keine Initialisierungsmethode vorhanden ist) die Sperren intern verwendet, können Deadlocks auftreten. Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<paramref name="valueFactory" />-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <see cref="P:System.Lazy`1.Value" />-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <see cref="P:System.Lazy`1.Value" />-Eigenschaft erneut ausgelöst. Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden Ausnahmen nicht zwischengespeichert, die vom Standardkonstruktor für <paramref name="T" /> ausgelöst werden. In diesem Fall kann ein nachfolgender Aufruf der <see cref="P:System.Lazy`1.Value" />-Eigenschaft die <see cref="T:System.Lazy`1" />-Instanz möglicherweise erfolgreich initialisieren. Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird eine <see cref="T:System.InvalidOperationException" /> ausgelöst.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Die <see cref="T:System.Lazy`1" />-Instanz ist nicht threadsicher. Wenn mehrere Threads auf die Instanz zugreifen, ist das Verhalten nicht definiert. Verwenden Sie diesen Modus nur, wenn hohe Leistungsfähigkeit entscheidend ist und die <see cref="T:System.Lazy`1" />-Instanz garantiert nie von mehr als einem Thread initialisiert wird. Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<paramref name="valueFactory" />-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <see cref="P:System.Lazy`1.Value" />-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <see cref="P:System.Lazy`1.Value" />-Eigenschaft erneut ausgelöst. Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden Ausnahmen nicht zwischengespeichert, die vom Standardkonstruktor für <paramref name="T" /> ausgelöst werden. In diesem Fall kann ein nachfolgender Aufruf der <see cref="P:System.Lazy`1.Value" />-Eigenschaft die <see cref="T:System.Lazy`1" />-Instanz möglicherweise erfolgreich initialisieren. Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird eine <see cref="T:System.InvalidOperationException" /> ausgelöst.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Wenn mehrere Threads gleichzeitig versuchen, eine <see cref="T:System.Lazy`1" />-Instanz zu initialisieren, dürfen alle Threads die Initialisierungsmethode (oder den Standardkonstruktor, wenn keine Initialisierungsmethode vorhanden ist) ausführen. Der erste Thread, der die Initialisierung abgeschlossen hat, legt den Wert der <see cref="T:System.Lazy`1" />-Instanz fest. Dieser Wert wird an alle anderen Threads zurückgegeben, die die Initialisierungsmethode gleichzeitig ausgeführt haben, sofern die Initialisierungsmethode für diese Threads keine Ausnahmen ausgelöst hat. Alle Instanzen von <paramref name="T" />, die von den konkurrierenden Threads erstellt wurden, werden verworfen. Wenn die Initialisierungsmethode für einen Thread eine Ausnahme auslöst, wird die Ausnahme aus der <see cref="P:System.Lazy`1.Value" />-Eigenschaft für diesen Thread weitergegeben. Die Ausnahme wird nicht zwischengespeichert. Der Wert der <see cref="P:System.Lazy`1.IsValueCreated" />-Eigenschaft bleibt <see langword="false" /> und nachfolgende Aufrufe der <see cref="P:System.Lazy`1.Value" />-Eigenschaft führen zur erneuten Ausführung der Initialisierungsmethode, entweder durch den Thread, bei dem die Ausnahme ausgelöst wurde oder durch andere Threads. Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird keine Ausnahme ausgelöst.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
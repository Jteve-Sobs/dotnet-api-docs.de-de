<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb06932498cc7a29c8ed6e4d3517a73f6d6a46d1" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83530215" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="6101e-101">Gibt an, wie eine <see cref="T:System.Lazy`1" />-Instanz den Zugriff bei mehreren Threads synchronisiert.</span><span class="sxs-lookup"><span data-stu-id="6101e-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6101e-102">Verwenden Sie diese Enumeration, um den `mode`-Parameter <xref:System.Lazy%601> Konstruktoren anzugeben.</span><span class="sxs-lookup"><span data-stu-id="6101e-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="6101e-103">Die Auswirkungen aller Konstruktoren auf die Thread Synchronisierung können im Hinblick auf diese Enumeration beschrieben werden, unabhängig davon, ob Sie über `mode` Parameter verfügen.</span><span class="sxs-lookup"><span data-stu-id="6101e-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="6101e-104">Eine <xref:System.Lazy%601> Instanz wird entweder durch eine benutzerdefinierte Initialisierungs Methode oder durch den Parameter losen Konstruktor für `T`initialisiert.</span><span class="sxs-lookup"><span data-stu-id="6101e-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the parameterless constructor for `T`.</span></span> <span data-ttu-id="6101e-105">Die Initialisierungs Methode wird durch den `valueFactory`-Parameter eines <xref:System.Lazy%601> Konstruktors angegeben.</span><span class="sxs-lookup"><span data-stu-id="6101e-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="6101e-106">Die-Methode gibt eine Instanz von `T`zurück, bei der es sich um den Typ handelt, der von der Instanz von <xref:System.Lazy%601>verzögert instanziiert wird.</span><span class="sxs-lookup"><span data-stu-id="6101e-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="6101e-107">Wenn ein Konstruktor keinen `valueFactory`-Parameter hat, wird der Parameter lose Konstruktor für `T` verwendet, um die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="6101e-107">If a constructor does not have a `valueFactory` parameter, the parameterless constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="6101e-108">In beiden Fällen erfolgt die Initialisierung, wenn Sie die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft zum ersten Mal aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="6101e-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6101e-109">Zusätzlich zur Angabe der Thread Sicherheit einer <xref:System.Lazy%601> Instanz wirkt sich diese Enumeration auf das Zwischenspeichern von Ausnahmen aus.</span><span class="sxs-lookup"><span data-stu-id="6101e-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="6101e-110">Wenn Ausnahmen für eine <xref:System.Lazy%601> Instanz zwischengespeichert werden, erhalten Sie nur eine Chance, die Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="6101e-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="6101e-111">Wenn eine Ausnahme ausgelöst wird, wenn Sie die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft zum ersten Mal aufrufen, wird diese Ausnahme zwischengespeichert und für alle nachfolgenden Aufrufe der <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft erneut ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="6101e-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6101e-112">Der Vorteil der Zwischenspeicherung von Ausnahmen besteht darin, dass alle zwei Threads immer dasselbe Ergebnis erhalten, auch wenn Fehler auftreten.</span><span class="sxs-lookup"><span data-stu-id="6101e-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="6101e-113">Wenn Sie den publicationonly-Modus angeben, werden Ausnahmen nie zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="6101e-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="6101e-114">Wenn Sie keine oder executionandpublication angeben, hängt das Caching davon ab, ob Sie eine Initialisierungs Methode angeben oder zulassen, dass der Parameter lose Konstruktor für die `T` verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="6101e-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the parameterless constructor for `T` to be used.</span></span> <span data-ttu-id="6101e-115">Durch die Angabe einer Initialisierungsmethode wird das Zwischenspeichern von Ausnahmen für diese beiden Modi aktiviert.</span><span class="sxs-lookup"><span data-stu-id="6101e-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="6101e-116">Die Initialisierungsmethode kann sehr einfach sein.</span><span class="sxs-lookup"><span data-stu-id="6101e-116">The initialization method can be very simple.</span></span> <span data-ttu-id="6101e-117">Beispielsweise könnte Sie den Parameter losen Konstruktor für `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#oder `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="6101e-117">For example, it might call the parameterless constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="6101e-118">Wenn Sie einen Konstruktor verwenden, der keine Initialisierungs Methode angibt, werden Ausnahmen, die vom Parameter losen Konstruktor für `T` ausgelöst werden, nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="6101e-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for `T` are not cached.</span></span> <span data-ttu-id="6101e-119">In der folgenden Tabelle wird das Verhalten beim Zwischenspeichern von Ausnahmen</span><span class="sxs-lookup"><span data-stu-id="6101e-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="6101e-120">Modus</span><span class="sxs-lookup"><span data-stu-id="6101e-120">Mode</span></span>|<span data-ttu-id="6101e-121">Verwenden der Initialisierungs Methode</span><span class="sxs-lookup"><span data-stu-id="6101e-121">Using initialization method</span></span>|<span data-ttu-id="6101e-122">Verwenden eines Parameter losen Konstruktors für `T`</span><span class="sxs-lookup"><span data-stu-id="6101e-122">Using parameterless constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="6101e-123">Keine</span><span class="sxs-lookup"><span data-stu-id="6101e-123">None</span></span>|<span data-ttu-id="6101e-124">Zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="6101e-124">Cached</span></span>|<span data-ttu-id="6101e-125">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="6101e-125">Not cached</span></span>|  
|<span data-ttu-id="6101e-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="6101e-126">PublicationOnly</span></span>|<span data-ttu-id="6101e-127">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="6101e-127">Not cached</span></span>|<span data-ttu-id="6101e-128">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="6101e-128">Not cached</span></span>|  
|<span data-ttu-id="6101e-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="6101e-129">ExecutionAndPublication</span></span>|<span data-ttu-id="6101e-130">Zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="6101e-130">Cached</span></span>|<span data-ttu-id="6101e-131">Nicht zwischengespeichert</span><span class="sxs-lookup"><span data-stu-id="6101e-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="6101e-132">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="6101e-132">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6101e-133">Sperren werden dazu verwendet, um sicherzustellen, dass eine <see cref="T:System.Lazy`1" />-Instanz nur von einem einzelner Thread auf threadsichere Weise initialisiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="6101e-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span></span> <span data-ttu-id="6101e-134">Wenn die Initialisierungsmethode (oder der parameterlose Konstruktor, wenn keine Initialisierungsmethode vorhanden ist) die Sperren intern verwendet, können Deadlocks auftreten.</span><span class="sxs-lookup"><span data-stu-id="6101e-134">If the initialization method (or the parameterless constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span></span> <span data-ttu-id="6101e-135">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<paramref name="valueFactory" />-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <see cref="P:System.Lazy`1.Value" />-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <see cref="P:System.Lazy`1.Value" />-Eigenschaft erneut ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="6101e-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="6101e-136">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden vom parameterlosen Konstruktor für <paramref name="T" /> ausgelöste Ausnahmen nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="6101e-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="6101e-137">In diesem Fall kann ein nachfolgender Aufruf der <see cref="P:System.Lazy`1.Value" />-Eigenschaft die <see cref="T:System.Lazy`1" />-Instanz möglicherweise erfolgreich initialisieren.</span><span class="sxs-lookup"><span data-stu-id="6101e-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="6101e-138">Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird eine <see cref="T:System.InvalidOperationException" /> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="6101e-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6101e-139">Die <see cref="T:System.Lazy`1" />-Instanz ist nicht threadsicher. Wenn mehrere Threads auf die Instanz zugreifen, ist das Verhalten nicht definiert.</span><span class="sxs-lookup"><span data-stu-id="6101e-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span></span> <span data-ttu-id="6101e-140">Verwenden Sie diesen Modus nur, wenn hohe Leistungsfähigkeit entscheidend ist und die <see cref="T:System.Lazy`1" />-Instanz garantiert nie von mehr als einem Thread initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="6101e-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span></span> <span data-ttu-id="6101e-141">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der eine Initialisierungsmethode angibt (<paramref name="valueFactory" />-Parameter), und wenn diese Initialisierungsmethode zudem eine Ausnahme auslöst (oder bei der Behandlung einer Ausnahme ein Fehler auftritt), wenn die <see cref="P:System.Lazy`1.Value" />-Eigenschaft das erste Mal aufgerufen wird, dann wird die Ausnahme zwischengespeichert und bei nachfolgenden Aufrufen der <see cref="P:System.Lazy`1.Value" />-Eigenschaft erneut ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="6101e-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="6101e-142">Wenn Sie einen <see cref="T:System.Lazy`1" />-Konstruktor verwenden, der keine Initialisierungsmethode angibt, werden vom parameterlosen Konstruktor für <paramref name="T" /> ausgelöste Ausnahmen nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="6101e-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="6101e-143">In diesem Fall kann ein nachfolgender Aufruf der <see cref="P:System.Lazy`1.Value" />-Eigenschaft die <see cref="T:System.Lazy`1" />-Instanz möglicherweise erfolgreich initialisieren.</span><span class="sxs-lookup"><span data-stu-id="6101e-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="6101e-144">Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird eine <see cref="T:System.InvalidOperationException" /> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="6101e-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="6101e-145">Wenn mehrere Threads gleichzeitig versuchen, eine <see cref="T:System.Lazy`1" />-Instanz zu initialisieren, dürfen alle Threads die Initialisierungsmethode (oder den parameterlosen Konstruktor, wenn keine Initialisierungsmethode vorhanden ist) ausführen.</span><span class="sxs-lookup"><span data-stu-id="6101e-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the parameterless constructor, if there is no initialization method).</span></span> <span data-ttu-id="6101e-146">Der erste Thread, der die Initialisierung abgeschlossen hat, legt den Wert der <see cref="T:System.Lazy`1" />-Instanz fest.</span><span class="sxs-lookup"><span data-stu-id="6101e-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="6101e-147">Dieser Wert wird an alle anderen Threads zurückgegeben, die die Initialisierungsmethode gleichzeitig ausgeführt haben, sofern die Initialisierungsmethode für diese Threads keine Ausnahmen ausgelöst hat.</span><span class="sxs-lookup"><span data-stu-id="6101e-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span></span> <span data-ttu-id="6101e-148">Alle Instanzen von <paramref name="T" />, die von den konkurrierenden Threads erstellt wurden, werden verworfen.</span><span class="sxs-lookup"><span data-stu-id="6101e-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span></span> <span data-ttu-id="6101e-149">Wenn die Initialisierungsmethode für einen Thread eine Ausnahme auslöst, wird die Ausnahme aus der <see cref="P:System.Lazy`1.Value" />-Eigenschaft für diesen Thread weitergegeben.</span><span class="sxs-lookup"><span data-stu-id="6101e-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span></span> <span data-ttu-id="6101e-150">Die Ausnahme wird nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="6101e-150">The exception is not cached.</span></span> <span data-ttu-id="6101e-151">Der Wert der <see cref="P:System.Lazy`1.IsValueCreated" />-Eigenschaft bleibt <see langword="false" /> und nachfolgende Aufrufe der <see cref="P:System.Lazy`1.Value" />-Eigenschaft führen zur erneuten Ausführung der Initialisierungsmethode, entweder durch den Thread, bei dem die Ausnahme ausgelöst wurde oder durch andere Threads.</span><span class="sxs-lookup"><span data-stu-id="6101e-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span></span> <span data-ttu-id="6101e-152">Wenn die Initialisierungsmethode rekursiv auf die <see cref="P:System.Lazy`1.Value" />-Eigenschaft der <see cref="T:System.Lazy`1" />-Instanz zugreift, wird keine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="6101e-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>

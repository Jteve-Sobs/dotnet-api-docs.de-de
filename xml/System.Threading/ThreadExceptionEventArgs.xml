<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c76da7266490e3155de7ce144d26e327106dfce8" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86619335" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Application.ThreadException" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.Threading.ThreadExceptionEventArgs> wird von einem Thread erstellt, wenn eine nicht behandelte Ausnahme auftritt. <xref:System.Threading.ThreadExceptionEventArgs> enthält die <xref:System.Exception> , die aufgetreten ist.  
  
   
  
## Examples  
 Im folgenden Beispiel können Sie ein- <xref:System.Windows.Forms.Application.ThreadException> Ereignis durch Klicken `button1` auf ein Formular erhöhen. Im Beispiel werden zwei Klassen erstellt. Die `ErrorHandler` -Klasse erstellt das Formular und die Schaltfläche, die das-Ereignis auslöst. Die- `CustomExceptionHandler` Klasse stellt die Methoden bereit, mit denen die Ausnahme behandelt wird.  
  
 In `Main` der- `ErrorHandler` Klasse erstellt der Code eine neue Instanz der Ausnahme Behandlungs Klasse, d. h. eine Instanz von `CustomExceptionHandler` . Anschließend wird die Instanz dem-Ereignis hinzugefügt, und die Anwendung wird ausgeführt.  
  
 In der- `OnThreadException` Methode in der- `CustomExceptionHandler` Klasse wird im Beispiel eine-Anweisung verwendet, `try...catch...finally` um die Ausnahme zu verarbeiten. Die `ShowThreadExceptionDialog` -Methode erstellt die anzuzeigende Meldung und zeigt Sie in einem Meldungs Feld an.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t">Die <see cref="T:System.Exception" />, die aufgetreten ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadExceptionEventArgs" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel können Sie ein- <xref:System.Windows.Forms.Application.ThreadException> Ereignis durch Klicken `button1` auf ein Formular erhöhen. Im Beispiel werden zwei Klassen erstellt. Die `ErrorHandler` -Klasse erstellt das Formular und die Schaltfläche, die das-Ereignis auslöst. Die- `CustomExceptionHandler` Klasse stellt die Methoden bereit, mit denen die Ausnahme behandelt wird.  
  
 In `Main` der- `ErrorHandler` Klasse erstellt der Code eine neue Instanz der Ausnahme Behandlungs Klasse, d. h. eine Instanz von `CustomExceptionHandler` . Anschließend wird die Instanz dem-Ereignis hinzugefügt, und die Anwendung wird ausgeführt.  
  
 In der- `OnThreadException` Methode in der- `CustomExceptionHandler` Klasse wird im Beispiel eine-Anweisung verwendet, `try...catch...finally` um die Ausnahme zu verarbeiten. Die `ShowThreadExceptionDialog` -Methode erstellt die anzuzeigende Meldung und zeigt Sie in einem Meldungs Feld an.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aufgetretene <see cref="T:System.Exception" /> ab.</summary>
        <value>Die <see cref="T:System.Exception" />, die aufgetreten ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel können Sie ein- <xref:System.Windows.Forms.Application.ThreadException> Ereignis durch Klicken `button1` auf ein Formular erhöhen. Im Beispiel werden zwei Klassen erstellt. Die `ErrorHandler` -Klasse erstellt das Formular und die Schaltfläche, die das-Ereignis auslöst. Die- `CustomExceptionHandler` Klasse stellt die Methoden bereit, mit denen die Ausnahme behandelt wird.  
  
 In `Main` der- `ErrorHandler` Klasse erstellt der Code eine neue Instanz der Ausnahme Behandlungs Klasse, d. h. eine Instanz von `CustomExceptionHandler` . Anschließend wird die Instanz dem-Ereignis hinzugefügt, und die Anwendung wird ausgeführt.  
  
 In der- `OnThreadException` Methode in der- `CustomExceptionHandler` Klasse wird im Beispiel eine-Anweisung verwendet, `try...catch...finally` um die Ausnahme zu verarbeiten. Die `ShowThreadExceptionDialog` -Methode erstellt die anzuzeigende Meldung und zeigt Sie in einem Meldungs Feld an.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f672c8eb9235b3b4fcc0d7ecb7776b56eb28195a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58685316" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Application.ThreadException" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Threading.ThreadExceptionEventArgs> wird von einem Thread erstellt, wenn eine nicht behandelte Ausnahme auftritt. <xref:System.Threading.ThreadExceptionEventArgs> enthält die <xref:System.Exception> , der aufgetreten ist.  
  
   
  
## Examples  
 Im folgende Beispiel können Sie zum Auslösen einer <xref:System.Windows.Forms.Application.ThreadException> Ereignis, indem Sie auf `button1` in einem Formular. Im Beispiel werden zwei Klassen erstellt. Die `ErrorHandler` Klasse erstellt, das Formular und die Schaltfläche, die das Ereignis auslöst. Die `CustomExceptionHandler` Klasse enthält die Methoden, um die Ausnahme zu behandeln.  
  
 In `Main` in die `ErrorHandler` -Klasse, die der Code erstellt einer neuen Instanz der Klasse Ausnahmebehandlung, d. h. eine Instanz von der `CustomExceptionHandler`. Klicken Sie dann die Instanz mit dem Ereignis hinzugefügt wird, und die Anwendung ausgeführt wird.  
  
 In der `OnThreadException` -Methode in der die `CustomExceptionHandler` -Klasse, die im Beispiel wird eine `try...catch...finally` Anweisung, um die Ausnahme zu verarbeiten. Die `ShowThreadExceptionDialog` Methode erstellt die Meldung angezeigt, und in einem Meldungsfeld angezeigt wird.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t">Die <see cref="T:System.Exception" />, die aufgetreten ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadExceptionEventArgs" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel können Sie zum Auslösen einer <xref:System.Windows.Forms.Application.ThreadException> Ereignis, indem Sie auf `button1` in einem Formular. Im Beispiel werden zwei Klassen erstellt. Die `ErrorHandler` Klasse erstellt, das Formular und die Schaltfläche, die das Ereignis auslöst. Die `CustomExceptionHandler` Klasse enthält die Methoden, um die Ausnahme zu behandeln.  
  
 In `Main` in die `ErrorHandler` -Klasse, die der Code erstellt einer neuen Instanz der Klasse Ausnahmebehandlung, d. h. eine Instanz von der `CustomExceptionHandler`. Klicken Sie dann die Instanz mit dem Ereignis hinzugefügt wird, und die Anwendung ausgeführt wird.  
  
 In der `OnThreadException` -Methode in der die `CustomExceptionHandler` -Klasse, die im Beispiel wird eine `try...catch...finally` Anweisung, um die Ausnahme zu verarbeiten. Die `ShowThreadExceptionDialog` Methode erstellt die Meldung angezeigt, und in einem Meldungsfeld angezeigt wird.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aufgetretene <see cref="T:System.Exception" /> ab.</summary>
        <value>Die <see cref="T:System.Exception" />, die aufgetreten ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel können Sie zum Auslösen einer <xref:System.Windows.Forms.Application.ThreadException> Ereignis, indem Sie auf `button1` in einem Formular. Im Beispiel werden zwei Klassen erstellt. Die `ErrorHandler` Klasse erstellt, das Formular und die Schaltfläche, die das Ereignis auslöst. Die `CustomExceptionHandler` Klasse enthält die Methoden, um die Ausnahme zu behandeln.  
  
 In `Main` in die `ErrorHandler` -Klasse, die der Code erstellt einer neuen Instanz der Klasse Ausnahmebehandlung, d. h. eine Instanz von der `CustomExceptionHandler`. Klicken Sie dann die Instanz mit dem Ereignis hinzugefügt wird, und die Anwendung ausgeführt wird.  
  
 In der `OnThreadException` -Methode in der die `CustomExceptionHandler` -Klasse, die im Beispiel wird eine `try...catch...finally` Anweisung, um die Ausnahme zu verarbeiten. Die `ShowThreadExceptionDialog` Methode erstellt die Meldung angezeigt, und in einem Meldungsfeld angezeigt wird.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
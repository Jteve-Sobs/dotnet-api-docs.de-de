<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="642bdf298b5600df673cba5ad753a6954831737b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39988737" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type ThreadAbortException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="05506-101">Die Ausnahme, die bei einem Aufruf der <see cref="M:System.Threading.Thread.Abort(System.Object)" />-Methode ausgelöst wird.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05506-101">The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method.</span>
      </span>
      <span data-ttu-id="05506-102">Diese Klasse kann nicht vererbt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="05506-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05506-103">Wenn ein Aufruf ausgelöst wird, um die <xref:System.Threading.Thread.Abort%2A> löst die Methode Zerstörung eines Threads, die die common Language Runtime eine <xref:System.Threading.ThreadAbortException>.</span><span class="sxs-lookup"><span data-stu-id="05506-103">When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="05506-104"><xref:System.Threading.ThreadAbortException> ist eine besondere Ausnahme, die abgefangen werden kann, aber es wird automatisch erneut ausgelöst wird am Ende der `catch` Block.</span><span class="sxs-lookup"><span data-stu-id="05506-104"><xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block.</span></span> <span data-ttu-id="05506-105">Wenn diese Ausnahme ausgelöst wird, führt die Runtime alle die `finally` Blöcke vor dem Beenden des Threads.</span><span class="sxs-lookup"><span data-stu-id="05506-105">When this exception is raised, the runtime executes all the `finally` blocks before ending the thread.</span></span> <span data-ttu-id="05506-106">Da der Thread eine ungebundene Berechnung, in ausführen kann der `finally` Blöcke oder Aufruf <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> um diesen Vorgang abbrechen, es gibt keine Garantie, der der Thread immer beendet gibt.</span><span class="sxs-lookup"><span data-stu-id="05506-106">Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> to cancel the abort, there is no guarantee that the thread will ever end.</span></span> <span data-ttu-id="05506-107">Sollten Sie warten, bis der abgebrochene Thread beendet wurde, können Sie rufen die <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="05506-107">If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="05506-108"><xref:System.Threading.Thread.Join%2A> ist ein blockierender Aufruf, der nicht erst zurückgegeben wird, die Ausführung des Threads beendet.</span><span class="sxs-lookup"><span data-stu-id="05506-108"><xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05506-109">Wenn die common Language Runtime (CLR) Hintergrund Threadsafter alle Vordergrundthreads in eine verwaltete ausführbare Datei beendet beendet, es verwendet keine <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="05506-109">When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="05506-110">Aus diesem Grund können keine <xref:System.Threading.ThreadAbortException> erkennen, wenn von der CLR Background-Threads beendet werden.</span><span class="sxs-lookup"><span data-stu-id="05506-110">Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.</span></span>  
  
 <span data-ttu-id="05506-111"><xref:System.Threading.ThreadAbortException> verwendet das HRESULT COR_E_THREADABORTED mit dem Wert 0 x 80131530.</span><span class="sxs-lookup"><span data-stu-id="05506-111"><xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="05506-112">Der Wert des geerbten <xref:System.Exception.Data%2A> Eigenschaft ist immer `null`.</span><span class="sxs-lookup"><span data-stu-id="05506-112">The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05506-113">Das folgende Beispiel zeigt einen Thread abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="05506-113">The following example demonstrates aborting a thread.</span></span> <span data-ttu-id="05506-114">Der Thread, der empfängt die `ThreadAbortException` verwendet die <xref:System.Threading.Thread.ResetAbort%2A> Methode, um die abbruchanforderung Abbrechen und die Ausführung fortzusetzen.</span><span class="sxs-lookup"><span data-stu-id="05506-114">The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.</span></span>  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 <span data-ttu-id="05506-115">Dieser Code erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="05506-115">This code produces the following output:</span></span>  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionState : obj" Usage="System.Threading.ThreadAbortException.ExceptionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="05506-116">Ruft ein Objekt ab, das anwendungsspezifische Informationen über den Threadabbruch enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05506-116">Gets an object that contains application-specific information related to the thread abort.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="05506-117">Ein Objekt, das anwendungsspezifische Informationen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="05506-117">An object containing application-specific information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05506-118">Von dieser Eigenschaft zurückgegebenen Objekts angegeben ist, über die `stateInfo` Parameter der <xref:System.Threading.Thread.Abort%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="05506-118">The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method.</span></span> <span data-ttu-id="05506-119">Der genaue Inhalt und die Verwendung dieses Objekts ist Anwendungsdefiniert. Es wird normalerweise verwendet, um Informationen zu übermitteln, die für den Thread abgebrochen von Bedeutung ist.</span><span class="sxs-lookup"><span data-stu-id="05506-119">The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="05506-120">Im folgenden Codebeispiel wird veranschaulicht, Informationen an einen Thread zu übergeben, die abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="05506-120">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
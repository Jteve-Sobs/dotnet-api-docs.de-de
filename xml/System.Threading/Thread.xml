<Type Name="Thread" FullName="System.Threading.Thread">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="babdcdbad5bec13d604ddedb87ba703ca6714a73" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755254" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Thread" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject&#xA;Implements _Thread" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, System::Runtime::InteropServices::_Thread" />
  <TypeSignature Language="F#" Value="type Thread = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface _Thread" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Thread</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="649b3-101">Erstellt und steuert einen Thread, legt dessen Priorität fest und ruft den Status ab.</span>
      <span class="sxs-lookup">
        <span data-stu-id="649b3-101">Creates and controls a thread, sets its priority, and gets its status.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-102">Wenn ein Prozess gestartet wird, erstellt die common Language Runtime automatisch eine einzelne Vordergrundthread, um Anwendungscode auszuführen.</span><span class="sxs-lookup"><span data-stu-id="649b3-102">When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</span></span> <span data-ttu-id="649b3-103">Zusammen mit diesem Hauptmenü Vordergrundthread kann ein Prozess eine oder mehrere Threads, um einen Teil der Programmcode, der dem Prozess zugeordneten ausführen erstellen.</span><span class="sxs-lookup"><span data-stu-id="649b3-103">Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</span></span> <span data-ttu-id="649b3-104">Diese Threads können entweder im Vordergrund oder im Hintergrund ausführen.</span><span class="sxs-lookup"><span data-stu-id="649b3-104">These threads can execute either in the foreground or in the background.</span></span> <span data-ttu-id="649b3-105">Darüber hinaus können Sie die <xref:System.Threading.ThreadPool> Klasse zum Ausführen von Code auf die Anzahl der Arbeitsthreads, die von der common Language Runtime verwaltet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-105">In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.</span></span>  
  
 <span data-ttu-id="649b3-106">In diesem Abschnitt</span><span class="sxs-lookup"><span data-stu-id="649b3-106">In this section</span></span>  
  
 <span data-ttu-id="649b3-107">[Starten eines Threads](#Starting) </span><span class="sxs-lookup"><span data-stu-id="649b3-107">[Starting a thread](#Starting) </span></span>  
 <span data-ttu-id="649b3-108">[Abrufen von Thread-Objekten](#Retrieving) </span><span class="sxs-lookup"><span data-stu-id="649b3-108">[Retrieving Thread objects](#Retrieving) </span></span>  
 <span data-ttu-id="649b3-109">[Vordergrund-und Hintergrundthreads](#Foreground) </span><span class="sxs-lookup"><span data-stu-id="649b3-109">[Foreground and background threads](#Foreground) </span></span>  
 <span data-ttu-id="649b3-110">[Kultur und threads](#Culture) </span><span class="sxs-lookup"><span data-stu-id="649b3-110">[Culture and threads](#Culture) </span></span>  
 [<span data-ttu-id="649b3-111">Abrufen von Informationen zu und Steuern von threads</span><span class="sxs-lookup"><span data-stu-id="649b3-111">Getting information about and controlling threads</span></span>](#Properties)   
   
<a name="Starting"></a>   
## <a name="starting-a-thread"></a><span data-ttu-id="649b3-112">Starten eines Threads</span><span class="sxs-lookup"><span data-stu-id="649b3-112">Starting a thread</span></span>  
 <span data-ttu-id="649b3-113">Sie starten ein Threads durch Angabe ein Delegaten, das die Methode darstellt, die der Thread befindet sich in seinem Klassenkonstruktor ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-113">You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</span></span> <span data-ttu-id="649b3-114">Rufen Sie dann die <xref:System.Threading.Thread.Start%2A> Methode, um die Ausführung zu starten.</span><span class="sxs-lookup"><span data-stu-id="649b3-114">You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.</span></span>  
  
 <span data-ttu-id="649b3-115">Die <xref:System.Threading.Thread> Konstruktoren akzeptiert entweder von zwei Delegattypen, je nachdem, ob Sie ein Argument an die Methode, die ausgeführt werden übergeben können:</span><span class="sxs-lookup"><span data-stu-id="649b3-115">The <xref:System.Threading.Thread> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</span></span>  
  
-   <span data-ttu-id="649b3-116">Wenn die Methode keine Argumente verfügt, Sie übergeben eine <xref:System.Threading.ThreadStart> delegieren an den Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-116">If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor.</span></span> <span data-ttu-id="649b3-117">Er trägt die Signatur:</span><span class="sxs-lookup"><span data-stu-id="649b3-117">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ThreadStart()  
    ```  
  
    ```vb  
    Public Delegate Sub ThreadStart()  
    ```  
  
     <span data-ttu-id="649b3-118">Das folgende Beispiel erstellt und startet einen Thread, der ausgeführt wird die `ExecuteInForeground` Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-118">The following example creates and starts a thread that executes the `ExecuteInForeground` method.</span></span> <span data-ttu-id="649b3-119">Die Methode zeigt Informationen zu einigen Threadeigenschaften, führt dann eine Schleife in der sie für eine halbe Sekunde angehalten wird, und zeigt die verstrichene Anzahl von Sekunden.</span><span class="sxs-lookup"><span data-stu-id="649b3-119">The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</span></span> <span data-ttu-id="649b3-120">Wenn der Thread mindestens fünf Sekunden lang ausgeführt wurde, beendet die Schleife beendet und der Thread die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="649b3-120">When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</span></span>  
  
     [!code-csharp[System.Threading.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart1.cs#1)]
     [!code-vb[System.Threading.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart1.vb#1)]  
  
-   <span data-ttu-id="649b3-121">Wenn die Methode ein Argument verfügt, Sie übergeben eine <xref:System.Threading.ParameterizedThreadStart> delegieren an den Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-121">If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor.</span></span> <span data-ttu-id="649b3-122">Er trägt die Signatur:</span><span class="sxs-lookup"><span data-stu-id="649b3-122">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ParameterizedThreadStart(object obj)  
    ```  
  
    ```vb  
    Public Delegate Sub ParameterizedThreadStart(obj As Object)  
    ```  
  
     <span data-ttu-id="649b3-123">Die Methode ausgeführt wird, durch den Delegaten kann dann umgewandelt (in C# -Referenz) oder konvertieren den Parameter (in Visual Basic) aus, in den entsprechenden Typ.</span><span class="sxs-lookup"><span data-stu-id="649b3-123">The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</span></span>  
  
     <span data-ttu-id="649b3-124">Im folgende Beispiel ist identisch mit dem vorherigen Beispiel, außer dass sie ruft die <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-124">The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span></span> <span data-ttu-id="649b3-125">Diese Version von der `ExecuteInForeground` Methode verfügt über einen einzelnen Parameter, der die ungefähre Anzahl von Millisekunden darstellt, die Schleife wird ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-125">This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</span></span>  
  
     [!code-csharp[System.Threading.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart2.cs#2)]
     [!code-vb[System.Threading.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart2.vb#2)]  
  
 <span data-ttu-id="649b3-126">Es ist nicht erforderlich, beizubehalten, einen Verweis auf eine <xref:System.Threading.Thread> Objekt, nachdem Sie den Thread gestartet haben.</span><span class="sxs-lookup"><span data-stu-id="649b3-126">It is not necessary to retain a reference to a <xref:System.Threading.Thread> object once you have started the thread.</span></span> <span data-ttu-id="649b3-127">Der Thread wird weiterhin ausgeführt, bis die Threadprozedur abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-127">The thread continues to execute until the thread procedure is complete.</span></span>  
  
<a name="Retrieving"></a>   
## <a name="retrieving-thread-objects"></a><span data-ttu-id="649b3-128">Abrufen von Thread-Objekten</span><span class="sxs-lookup"><span data-stu-id="649b3-128">Retrieving Thread objects</span></span>  
 <span data-ttu-id="649b3-129">Sie können mithilfe der statischen (`Shared` in Visual Basic) <xref:System.Threading.Thread.CurrentThread%2A> Eigenschaft, um einen Verweis auf den gerade ausgeführten Thread aus dem Code abzurufen, die der Thread ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-129">You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</span></span> <span data-ttu-id="649b3-130">Im folgenden Beispiel wird die <xref:System.Threading.Thread.CurrentThread%2A> Eigenschaft, um Informationen zum Thread der hauptanwendung, eine andere Vordergrundthread, einem Hintergrundthread und einen Threadpool-Thread anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="649b3-130">The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</span></span>  
  
 [!code-csharp[System.Threading.Thread#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/Instance1.cs#4)]
 [!code-vb[System.Threading.Thread#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/Instance1.vb#4)]  
  
<a name="Foreground"></a>   
## <a name="foreground-and-background-threads"></a><span data-ttu-id="649b3-131">Vordergrund-und Hintergrundthreads</span><span class="sxs-lookup"><span data-stu-id="649b3-131">Foreground and background threads</span></span>  
 <span data-ttu-id="649b3-132">Instanzen der <xref:System.Threading.Thread> Vordergrundthreads oder Hintergrundthreads Klasse darstellen.</span><span class="sxs-lookup"><span data-stu-id="649b3-132">Instances of the <xref:System.Threading.Thread> class represent either foreground threads or background threads.</span></span> <span data-ttu-id="649b3-133">Hintergrundthreads sind identisch mit Vordergrundthreads mit einer Ausnahme: ein Hintergrundthread keinen laufenden Prozess beibehalten, wenn alle Vordergrundthreads beendet wurden.</span><span class="sxs-lookup"><span data-stu-id="649b3-133">Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</span></span> <span data-ttu-id="649b3-134">Sobald alle Vordergrundthreads beendet wurden, wird die Laufzeit beendet alle Hintergrundthreads und fährt.</span><span class="sxs-lookup"><span data-stu-id="649b3-134">Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</span></span>  
  
 <span data-ttu-id="649b3-135">Führen die folgenden Threads in der Standardeinstellung im Vordergrund:</span><span class="sxs-lookup"><span data-stu-id="649b3-135">By default, the following threads execute in the foreground:</span></span>  
  
-   <span data-ttu-id="649b3-136">Der Thread der hauptanwendung.</span><span class="sxs-lookup"><span data-stu-id="649b3-136">The main application thread.</span></span>  
  
-   <span data-ttu-id="649b3-137">Alle Threads, die durch den Aufruf erstellt einen <xref:System.Threading.Thread> Klassenkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-137">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="649b3-138">Die folgenden Threads, die standardmäßig im Hintergrund ausgeführt werden:</span><span class="sxs-lookup"><span data-stu-id="649b3-138">The following threads execute in the background by default:</span></span>  
  
-   <span data-ttu-id="649b3-139">Thread Poolthreads, die einen Pool von Arbeitsthreads, die von der Laufzeit verwaltet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-139">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span>  <span data-ttu-id="649b3-140">Sie können die Thread-Pool und den Zeitplan der Arbeit in Threads im Threadpool konfigurieren, mit der <xref:System.Threading.ThreadPool> Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-140">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="649b3-141">Aufgabenbasierte asynchrone Vorgänge werden automatisch in Threads im Threadpool ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-141">Task-based asynchronous operations automatically execute on thread pool threads.</span></span> <span data-ttu-id="649b3-142">Aufgabenbasierte asynchrone Vorgänge verwenden die <xref:System.Threading.Tasks.Task> und <xref:System.Threading.Tasks.Task%601> Klassen implementieren die [aufgabenbasierte asynchrone Muster](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-142">Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span></span>  
  
-   <span data-ttu-id="649b3-143">Alle Threads, die die verwaltete ausführungsumgebung von nicht verwaltetem Code eingeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-143">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
 <span data-ttu-id="649b3-144">Sie können ändern, dass einen Thread im Hintergrund ausführen, durch Festlegen der <xref:System.Threading.Thread.IsBackground%2A> Eigenschaft zu einem beliebigen Zeitpunkt.</span><span class="sxs-lookup"><span data-stu-id="649b3-144">You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.</span></span>  <span data-ttu-id="649b3-145">Hintergrundthreads sind nützlich für jeden Vorgang, der fortgesetzt werden soll, solange Sie eine Anwendung ausgeführt wird, jedoch sollte nicht zu verhindern, dass die Anwendung beendet wird, wie z. B. das Überwachen von dateisystemänderungen oder eingehende WebSocket-Verbindungen.</span><span class="sxs-lookup"><span data-stu-id="649b3-145">Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</span></span>  
  
 <span data-ttu-id="649b3-146">Das folgende Beispiel veranschaulicht den Unterschied zwischen Vordergrund-und Hintergrundthreads.</span><span class="sxs-lookup"><span data-stu-id="649b3-146">The following example illustrates the difference between foreground and background threads.</span></span> <span data-ttu-id="649b3-147">Es ist wie im ersten Beispiel in der [Starten eines Threads](#Starting) Abschnitt, außer dass sie im Hintergrund ausführen, vor dem Starten des Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-147">It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it.</span></span> <span data-ttu-id="649b3-148">Die Ausgabe zeigt, wird die Schleife unterbrochen, bevor er fünf Sekunden ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-148">As the output shows, the loop is interrupted before it executes for five seconds.</span></span>  
  
 [!code-csharp[System.Threading.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/BackgroundEx1.cs#3)]
 [!code-vb[System.Threading.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/BackgroundEx1.vb#3)]  
  
<a name="Culture"></a>   
## <a name="culture-and-threads"></a><span data-ttu-id="649b3-149">Kultur und threads</span><span class="sxs-lookup"><span data-stu-id="649b3-149">Culture and threads</span></span>  
 <span data-ttu-id="649b3-150">Jeder Thread hat eine Kultur, dargestellt durch die <xref:System.Threading.Thread.CurrentCulture%2A> -Eigenschaft und eine Benutzeroberflächenkultur, dargestellt durch die <xref:System.Threading.Thread.CurrentUICulture%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-150">Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.</span></span>  <span data-ttu-id="649b3-151">Die aktuelle Kultur unterstützt kulturabhängige Vorgänge wie Analyse und Formatierung, Zeichenfolgenvergleich und-Sortierung und steuert auch die Schriftsystems und Kalenders, die von einem Thread verwendet.</span><span class="sxs-lookup"><span data-stu-id="649b3-151">The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</span></span> <span data-ttu-id="649b3-152">Die aktuelle Benutzeroberflächenkultur bietet für kulturabhängige-Abruf von Ressourcen in Ressourcendateien.</span><span class="sxs-lookup"><span data-stu-id="649b3-152">The current UI culture provides for culture-sensitive retrieval of resources in resource files.</span></span>  
  
 <span data-ttu-id="649b3-153">Wenn ein neuer Thread instanziiert wird, werden die Kultur und Benutzeroberflächenkultur definiert, durch die aktuelle Systemkultur und UI-Kultur, und nicht von der Kultur und Benutzeroberflächenkultur des Threads aus der der neue Thread erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-153">When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</span></span> <span data-ttu-id="649b3-154">Also, z. B. wenn die aktuelle Systemkultur Englisch (Vereinigte Staaten ist) und der aktuellen Kultur des Threads primäranwendung Französisch (Frankreich), die Kultur eines neuen Threads erstellt durch Aufrufen der <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> Konstruktor aus dem primären Thread ist nicht Französisch (Frankreich) und Englisch (USA).</span><span class="sxs-lookup"><span data-stu-id="649b3-154">This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France).</span></span> <span data-ttu-id="649b3-155">Weitere Informationen finden Sie im Abschnitt "Kultur und Threads", der die <xref:System.Globalization.CultureInfo> Thema-Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-155">For more information, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-156">Dies gilt nicht für Threads, die ausgeführt werden asynchrone Vorgänge für apps, die auf die [!INCLUDE[net_v46](~/includes/net-v46-md.md)] und höhere Versionen, In diesem Fall werden die Kultur und Benutzeroberflächenkultur ist Teil eines asynchronen Vorgänge Kontext; der Thread auf dem eines asynchronen Vorgangs führt standardmäßig erbt der Kultur und Benutzeroberflächenkultur des Threads, von dem der asynchrone Vorgang gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-156">This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</span></span> <span data-ttu-id="649b3-157">Weitere Informationen finden Sie im Abschnitt "Kultur und aufgabenbasierte asynchrone Vorgänge" im Thema zur <xref:System.Globalization.CultureInfo>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-157">For more information, see the "Culture and task-based asynchronous operations" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
 <span data-ttu-id="649b3-158">Führen Sie einen der folgenden Optionen, um sicherzustellen, dass alle Threads in einer Anwendung ausführen freigeben, das dieselbe Kultur und Benutzeroberflächenkultur:</span><span class="sxs-lookup"><span data-stu-id="649b3-158">You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</span></span>  
  
-   <span data-ttu-id="649b3-159">Können Sie übergeben eine <xref:System.Globalization.CultureInfo> -Objekt, das diese Kultur entspricht der <xref:System.Threading.ParameterizedThreadStart> delegieren oder <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-159">You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="649b3-160">Für apps, die unter der [!INCLUDE[net_v45](~/includes/net-v45-md.md)] und höheren Versionen können Sie definieren, die Kultur und Benutzeroberflächenkultur, die für alle Threads in einer Anwendungsdomäne erstellt, durch Festlegen des Werts der zugewiesen werden soll die <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> und <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="649b3-160">For apps running on the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="649b3-161">Beachten Sie, dass es sich um eine pro-AppDomain-Einstellung handelt.</span><span class="sxs-lookup"><span data-stu-id="649b3-161">Note that this is a per-application domain setting.</span></span>  
  
 <span data-ttu-id="649b3-162">Weitere Informationen und Beispiele finden Sie im Abschnitt "Kultur und Threads", der die <xref:System.Globalization.CultureInfo> Thema-Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-162">For more information and examples, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
<a name="Properties"></a>   
## <a name="getting-information-about-and-controlling-threads"></a><span data-ttu-id="649b3-163">Abrufen von Informationen zu und Steuern von threads</span><span class="sxs-lookup"><span data-stu-id="649b3-163">Getting information about and controlling threads</span></span>  
 <span data-ttu-id="649b3-164">Sie können eine Anzahl von Eigenschaftswerten abrufen, die Informationen über einen Thread zu bieten.</span><span class="sxs-lookup"><span data-stu-id="649b3-164">You can retrieve a number of property values that provide information about a thread.</span></span> <span data-ttu-id="649b3-165">In einigen Fällen können Sie auch diese Eigenschaftswerte, die Ausführung des Threads steuern festlegen.</span><span class="sxs-lookup"><span data-stu-id="649b3-165">In some cases, you can also set these property values to control the operation of the thread.</span></span> <span data-ttu-id="649b3-166">Zu diesen Threadeigenschaften zählen:</span><span class="sxs-lookup"><span data-stu-id="649b3-166">These thread properties include:</span></span>  
  
-   <span data-ttu-id="649b3-167">Einen Namen.</span><span class="sxs-lookup"><span data-stu-id="649b3-167">A name.</span></span> <span data-ttu-id="649b3-168"><xref:System.Threading.Thread.Name%2A> ein Schreibvorgang-einmal-Eigenschaft, die Sie verwenden können, um einen Thread zu identifizieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-168"><xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.</span></span>  <span data-ttu-id="649b3-169">Der Standardwert ist `null`.</span><span class="sxs-lookup"><span data-stu-id="649b3-169">Its default value is `null`.</span></span>  
  
-   <span data-ttu-id="649b3-170">Ein Hashcode, die Sie durch den Aufruf abrufen können die <xref:System.Threading.Thread.GetHashCode%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-170">A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method.</span></span> <span data-ttu-id="649b3-171">Der Hashcode kann verwendet werden, um einen Thread eindeutig zu identifizieren. für die Lebensdauer des Threads wird der Hashcode nicht mit dem Wert eines anderen Threads, unabhängig von der Anwendungsdomäne in Konflikt stehen aus dem Sie den Wert abrufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-171">The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</span></span>  
  
-   <span data-ttu-id="649b3-172">Ein Thread-ID.</span><span class="sxs-lookup"><span data-stu-id="649b3-172">A thread ID.</span></span> <span data-ttu-id="649b3-173">Der Wert der Read-only <xref:System.Threading.Thread.ManagedThreadId%2A> Eigenschaft wird von der Laufzeit zugewiesen und einen Thread innerhalb des Prozesses eindeutig identifiziert.</span><span class="sxs-lookup"><span data-stu-id="649b3-173">The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="649b3-174">Eine Betriebssystem-[ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) hat keine feste Beziehung zu einem verwalteten Thread, da ein nicht verwalteter Host die Beziehung zwischen verwalteten und nicht verwalteten Threads steuern kann.</span><span class="sxs-lookup"><span data-stu-id="649b3-174">An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</span></span> <span data-ttu-id="649b3-175">Ein komplexer Host können insbesondere die [CLR Hosting-API](https://msdn.microsoft.com/library/ms404385.aspx) um viele verwaltete Threads für die gleiche Betriebssystemthread zu planen oder um einen verwalteten Thread zwischen verschiedenen Betriebssystemthreads zu verschieben.</span><span class="sxs-lookup"><span data-stu-id="649b3-175">Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</span></span>  
  
-   <span data-ttu-id="649b3-176">Der Thread den aktuellen Status.</span><span class="sxs-lookup"><span data-stu-id="649b3-176">The thread's current state.</span></span> <span data-ttu-id="649b3-177">Für die Dauer der vorhanden ist, ein Thread ist immer in einer oder mehreren der Zustände von definiert die <xref:System.Threading.ThreadState> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-177">For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.</span></span>  
  
-   <span data-ttu-id="649b3-178">Eine Planung Prioritätsstufe, die durch definiert wird die <xref:System.Threading.ThreadPriority> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-178">A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property.</span></span> <span data-ttu-id="649b3-179">Obwohl Sie diesen Wert zum Anfordern der Priorität des Threads festlegen können, ist es nicht garantiert, vom Betriebssystem berücksichtigt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-179">Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</span></span>  
  
-   <span data-ttu-id="649b3-180">Die schreibgeschützte <xref:System.Threading.Thread.IsThreadPoolThread%2A> -Eigenschaft, die angibt, ob ein Thread einen Threadpool-Thread ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-180">The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.</span></span>  
  
-   <span data-ttu-id="649b3-181">Die <xref:System.Threading.Thread.IsBackground%2A>-Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="649b3-181">The <xref:System.Threading.Thread.IsBackground%2A> property.</span></span> <span data-ttu-id="649b3-182">Weitere Informationen finden Sie unter den [Vordergrund-und Hintergrundthreads](#Foreground) Abschnitt.</span><span class="sxs-lookup"><span data-stu-id="649b3-182">For more information, see the [Foreground and background threads](#Foreground) section.</span></span>  
  
## Examples  
 <span data-ttu-id="649b3-183">Das folgende Beispiel zeigt einfachen threading-Funktionen.</span><span class="sxs-lookup"><span data-stu-id="649b3-183">The following example demonstrates simple threading functionality.</span></span>  
  
 [!code-cpp[Classic Thread Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Thread Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Thread Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Thread Example/CS/source.cs#1)]
 [!code-vb[Classic Thread Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Thread Example/VB/source.vb#1)]  
  
 <span data-ttu-id="649b3-184">Dieser Code erzeugt eine Ausgabe ähnlich der folgenden:</span><span class="sxs-lookup"><span data-stu-id="649b3-184">This code produces output similar to the following:</span></span>  
  
```  
[VB, C++, C#]  
Main thread: Start a second thread.  
Main thread: Do some work.  
ThreadProc: 0  
Main thread: Do some work.  
ThreadProc: 1  
Main thread: Do some work.  
ThreadProc: 2  
Main thread: Do some work.  
ThreadProc: 3  
Main thread: Call Join(), to wait until ThreadProc ends.  
ThreadProc: 4  
ThreadProc: 5  
ThreadProc: 6  
ThreadProc: 7  
ThreadProc: 8  
ThreadProc: 9  
Main thread: ThreadProc.Join has returned.  Press Enter to end program.  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="649b3-185">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="649b3-185">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-186">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-186">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="649b3-187">Ein Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-187">A delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-188">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse und gibt dabei einen Delegaten an, der das Übergeben eines Objekts an den Thread bei dessen Start ermöglicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-188">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-189">Ein Thread ausführen, bei der Erstellung nicht gestartet.</span><span class="sxs-lookup"><span data-stu-id="649b3-189">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="649b3-190">Um die Ausführung des Threads zu planen, rufen die <xref:System.Threading.Thread.Start%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-190">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span> <span data-ttu-id="649b3-191">Um ein Datenobjekt an den Thread zu übergeben, verwenden die <xref:System.Threading.Thread.Start%28System.Object%29> -methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="649b3-191">To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-192">Lassen Sie Visual Basic-Benutzer können die <xref:System.Threading.ThreadStart> Konstruktor beim Erstellen eines Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-192">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="649b3-193">Verwenden der `AddressOf` beim Übergeben der Methode, z. B. den Operator `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="649b3-193">Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="649b3-194">Visual Basic ruft automatisch die <xref:System.Threading.ThreadStart> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-194">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-195">Das folgende Beispiel zeigt die Syntax zum Erstellen und Verwenden einer <xref:System.Threading.ParameterizedThreadStart> Delegat mit einer statischen Methode und eine Instanzmethode handeln.</span><span class="sxs-lookup"><span data-stu-id="649b3-195">The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="649b3-196">
            <paramref name="start" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-196">
              <paramref name="start" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="649b3-197">Ein <see cref="T:System.Threading.ThreadStart" />-Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-197">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-198">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-198">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-199">Ein Thread ausführen, bei der Erstellung nicht gestartet.</span><span class="sxs-lookup"><span data-stu-id="649b3-199">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="649b3-200">Um die Ausführung des Threads zu planen, rufen die <xref:System.Threading.Thread.Start%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-200">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-201">Lassen Sie Visual Basic-Benutzer können die <xref:System.Threading.ThreadStart> Konstruktor beim Erstellen eines Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-201">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="649b3-202">Verwenden der `AddressOf` beim Übergeben von der Methode z. B. den Operator `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="649b3-202">Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="649b3-203">Visual Basic ruft automatisch die <xref:System.Threading.ThreadStart> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-203">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-204">Im folgenden Codebeispiel wird veranschaulicht das Erstellen eines Threads, die eine statische Methode ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-204">The following code example shows how to create a thread that executes a static method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor/VB/source.vb#1)]  
  
 <span data-ttu-id="649b3-205">Im folgenden Codebeispiel wird veranschaulicht das Erstellen eines Threads, die eine Instanzmethode ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-205">The following code example shows how to create a thread that executes an instance method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="649b3-206">Der <paramref name="start" />-Parameter ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-206">The <paramref name="start" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="649b3-207">Ein <see cref="T:System.Threading.ParameterizedThreadStart" />-Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-207">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="649b3-208">Die maximale Stapelgröße, in Bytes, für den Thread, oder 0 (null), wenn die angegebene maximale Standardstapelgröße aus dem Header der ausführbaren Datei verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-208">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span>
          </span>
          <span data-ttu-id="649b3-209">Wichtig   Für teilweise vertrauenswürdigen Code wird <c>maxStackSize</c> ignoriert, wenn sie größer als die Standardstapelgröße ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-209">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span>
          </span>
          <span data-ttu-id="649b3-210">Es werden keine Ausnahmen ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-210">No exception is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-211">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse und gibt dabei einen Delegaten, der das Übergeben eines Objekts an den Thread bei dessen Start ermöglicht, sowie eine maximale Stapelgröße für den Thread an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-211">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-212">Verwenden Sie diese Überladung des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="649b3-212">Avoid using this constructor overload.</span></span> <span data-ttu-id="649b3-213">Die standardmäßige Stapelgröße, die ein, die die <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> Überladung des Konstruktors ist die empfohlene Stapelgröße für Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-213">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="649b3-214">Wenn ein Thread Speicherprobleme verfügt, wird die wahrscheinlichste Ursache Programmierfehler, z. B. unendliche Rekursion.</span><span class="sxs-lookup"><span data-stu-id="649b3-214">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-215">Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]kann nur voll vertrauenswürdiger Code kann festgelegt werden `maxStackSize` auf einen Wert, der größer als die Standardstapelgröße (1 MB).</span><span class="sxs-lookup"><span data-stu-id="649b3-215">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="649b3-216">Wenn für ein größerer Wert angegeben ist `maxStackSize` Code mit teilweiser Vertrauenswürdigkeit ausgeführt wird `maxStackSize` wird ignoriert, und die standardmäßige Stapelgröße verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-216">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="649b3-217">Es werden keine Ausnahmen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="649b3-217">No exception is thrown.</span></span> <span data-ttu-id="649b3-218">Code auf eine beliebige Vertrauensebene festlegen kann `maxStackSize` auf einen Wert, der kleiner als die Standardstapelgröße ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-218">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-219">Wenn Sie entwickeln eine vollkommen vertrauenswürdige Bibliothek, die von teilweise vertrauenswürdigem Code verwendet werden, müssen Sie zum Starten eines Threads, die einen großen Stapel erfordert, müssen Sie volle Vertrauenswürdigkeit zusichern, vor dem Erstellen des Threads oder die standardmäßige Stapelgröße verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-219">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="649b3-220">Verwenden Sie keine, wenn Sie den Code, der auf dem Thread ausgeführt wird, vollständig steuern.</span><span class="sxs-lookup"><span data-stu-id="649b3-220">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="649b3-221">Wenn `maxStackSize` ist kleiner als die minimale Stapelgröße, wird die minimale Stapelgröße verwendet.</span><span class="sxs-lookup"><span data-stu-id="649b3-221">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="649b3-222">Wenn `maxStackSize` ist kein Vielfaches der Seitengröße, gerundet auf die nächstgrößere Vielfache der Seitengröße.</span><span class="sxs-lookup"><span data-stu-id="649b3-222">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="649b3-223">Wenn Sie .NET Framework, Version 2.0 unter Windows Vista verwenden, z. B. 256KB (262.144 Bytes) ist die minimale Stapelgröße, und die Seitengröße ist 64KB (65.536 Byte).</span><span class="sxs-lookup"><span data-stu-id="649b3-223">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-224">In Versionen von Microsoft Windows vor Windows XP und Windows Server 2003 `maxStackSize` ignoriert, und die Größe des Stapels im Header ausführbaren Datei angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-224">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="649b3-225">Wenn Sie eine sehr kleine Stapelgröße angeben, müssen Sie möglicherweise Stapelüberlaufs deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-225">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="649b3-226">Wenn der Stapel stark eingeschränkt ist, kann, auf dem sich selbst einen Stapelüberlauf verursachen die Überprüfung.</span><span class="sxs-lookup"><span data-stu-id="649b3-226">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="649b3-227">Um Stapelüberlaufs zu deaktivieren, fügen Sie Folgendes, um die Konfigurationsdatei der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="649b3-227">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="649b3-228">
            <paramref name="start" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-228">
              <paramref name="start" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="649b3-229">
            <paramref name="maxStackSize" /> ist kleiner als Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-229">
              <paramref name="maxStackSize" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="649b3-230">Ein <see cref="T:System.Threading.ThreadStart" />-Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-230">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="649b3-231">Die maximale Stapelgröße, in Bytes, für den Thread, oder 0 (null), wenn die angegebene maximale Standardstapelgröße aus dem Header der ausführbaren Datei verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-231">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span>
          </span>
          <span data-ttu-id="649b3-232">Wichtig   Für teilweise vertrauenswürdigen Code wird <c>maxStackSize</c> ignoriert, wenn sie größer als die Standardstapelgröße ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-232">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span>
          </span>
          <span data-ttu-id="649b3-233">Es werden keine Ausnahmen ausgelöst.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-233">No exception is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-234">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse und gibt die maximale Stapelgröße für den Thread an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-234">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-235">Verwenden Sie diese Überladung des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="649b3-235">Avoid using this constructor overload.</span></span> <span data-ttu-id="649b3-236">Die standardmäßige Stapelgröße, die ein, die die <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> Überladung des Konstruktors ist die empfohlene Stapelgröße für Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-236">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="649b3-237">Wenn ein Thread Speicherprobleme verfügt, wird die wahrscheinlichste Ursache Programmierfehler, z. B. unendliche Rekursion.</span><span class="sxs-lookup"><span data-stu-id="649b3-237">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-238">Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]kann nur voll vertrauenswürdiger Code kann festgelegt werden `maxStackSize` auf einen Wert, der größer als die Standardstapelgröße (1 MB).</span><span class="sxs-lookup"><span data-stu-id="649b3-238">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="649b3-239">Wenn für ein größerer Wert angegeben ist `maxStackSize` Code mit teilweiser Vertrauenswürdigkeit ausgeführt wird `maxStackSize` wird ignoriert, und die standardmäßige Stapelgröße verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-239">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="649b3-240">Es werden keine Ausnahmen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="649b3-240">No exception is thrown.</span></span> <span data-ttu-id="649b3-241">Code auf eine beliebige Vertrauensebene festlegen kann `maxStackSize` auf einen Wert, der kleiner als die Standardstapelgröße ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-241">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-242">Wenn Sie entwickeln eine vollkommen vertrauenswürdige Bibliothek, die von teilweise vertrauenswürdigem Code verwendet werden, müssen Sie zum Starten eines Threads, die einen großen Stapel erfordert, müssen Sie volle Vertrauenswürdigkeit zusichern, vor dem Erstellen des Threads oder die standardmäßige Stapelgröße verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-242">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="649b3-243">Verwenden Sie keine, wenn Sie den Code, der auf dem Thread ausgeführt wird, vollständig steuern.</span><span class="sxs-lookup"><span data-stu-id="649b3-243">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="649b3-244">Wenn `maxStackSize` ist kleiner als die minimale Stapelgröße, wird die minimale Stapelgröße verwendet.</span><span class="sxs-lookup"><span data-stu-id="649b3-244">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="649b3-245">Wenn `maxStackSize` ist kein Vielfaches der Seitengröße, gerundet auf die nächstgrößere Vielfache der Seitengröße.</span><span class="sxs-lookup"><span data-stu-id="649b3-245">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="649b3-246">Wenn Sie .NET Framework, Version 2.0 unter Windows Vista verwenden, z. B. 256KB (262.144 Bytes) ist die minimale Stapelgröße, und die Seitengröße ist 64KB (65.536 Byte).</span><span class="sxs-lookup"><span data-stu-id="649b3-246">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-247">In Versionen von Microsoft Windows vor Windows XP und Windows Server 2003 `maxStackSize` ignoriert, und die Größe des Stapels im Header ausführbaren Datei angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-247">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="649b3-248">Wenn Sie eine sehr kleine Stapelgröße angeben, müssen Sie möglicherweise Stapelüberlaufs deaktivieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-248">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="649b3-249">Wenn der Stapel stark eingeschränkt ist, kann, auf dem sich selbst einen Stapelüberlauf verursachen die Überprüfung.</span><span class="sxs-lookup"><span data-stu-id="649b3-249">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="649b3-250">Um Stapelüberlaufs zu deaktivieren, fügen Sie Folgendes, um die Konfigurationsdatei der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="649b3-250">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="649b3-251">
            <paramref name="start" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-251">
              <paramref name="start" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="649b3-252">
            <paramref name="maxStackSize" /> ist kleiner als Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-252">
              <paramref name="maxStackSize" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-253">Löst eine <see cref="T:System.Threading.ThreadAbortException" /> im Thread aus, für den der Aufruf erfolgte, um das Beenden des Threads zu beginnen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-253">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span>
          </span>
          <span data-ttu-id="649b3-254">Durch den Aufruf dieser Methode wird der Thread i. d. R. beendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-254">Calling this method usually terminates the thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="thread.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-255">Löst eine <see cref="T:System.Threading.ThreadAbortException" /> im Thread aus, für den der Aufruf erfolgte, um das Beenden des Threads zu beginnen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-255">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span>
          </span>
          <span data-ttu-id="649b3-256">Durch den Aufruf dieser Methode wird der Thread i. d. R. beendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-256">Calling this method usually terminates the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-257">Wenn diese Methode in einem Thread aufgerufen wird, löst das System eine <xref:System.Threading.ThreadAbortException> im Thread aus, um ihn abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="649b3-257">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="649b3-258">`ThreadAbortException` ist eine besondere Ausnahme, die vom Anwendungscode abgefangen werden kann, jedoch wird erneut ausgelöst wird, am Ende der `catch` blockieren, wenn <xref:System.Threading.Thread.ResetAbort%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-258">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="649b3-259">`ResetAbort` Bricht die Anforderung abbricht, ab und verhindert, dass die `ThreadAbortException` aus Beenden des Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-259">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="649b3-260">Nicht ausgeführte `finally` -Blöcke werden vor dem Abbruch des Threads ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-260">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-261">Wenn ein Thread ruft `Abort` für sich selbst, die Wirkung gleicht dem Auslösen einer Ausnahme, die <xref:System.Threading.ThreadAbortException> erfolgt sofort, und das Ergebnis ist vorhersagbar.</span><span class="sxs-lookup"><span data-stu-id="649b3-261">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="649b3-262">Aber wenn ein Thread ruft `Abort` in einem anderen Thread unterbricht der Abbruch jeden beliebigen Code ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-262">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="649b3-263">Es ist auch möglich, dass ein statischer Konstruktor kann abgebrochen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-263">There is also a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="649b3-264">In seltenen Fällen kann dies verhindern, dass Instanzen dieser Klasse, die in dieser Anwendungsdomäne erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-264">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="649b3-265">In der .NET Framework-Versionen 1.0 und 1.1, besteht die Möglichkeit den Thread abzubrechen konnte. während einer `finally` Block ausgeführt wird, in diesem Fall die `finally` abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-265">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="649b3-266">Der Thread ist nicht garantiert, sofort oder überhaupt abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-266">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="649b3-267">Diese Situation kann auftreten, wenn ein Thread eine ungebundene Menge, der Berechnung in der Fall ist die `finally` Blöcke, die als Teil der Abort-Prozedur, die der Abbruch dadurch auf unbestimmte Zeit verzögert aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-267">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="649b3-268">Um warten, bis ein Thread abgebrochen wurde, rufen Sie die <xref:System.Threading.Thread.Join%2A> Methode für den Thread nach dem Aufruf der <xref:System.Threading.Thread.Abort%2A> -Methode, aber es gibt keine Garantie der Wartevorgang wird beendet.</span><span class="sxs-lookup"><span data-stu-id="649b3-268">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-269">Der aufrufende Thread <xref:System.Threading.Thread.Abort%2A> möglicherweise blockiert, wenn der Thread, die abgebrochen wird in einen geschützten Codebereich, z. B. eine `catch` Block `finally` Block oder eingeschränkten Ausführungsbereich.</span><span class="sxs-lookup"><span data-stu-id="649b3-269">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="649b3-270">Wenn der Thread aufruft <xref:System.Threading.Thread.Abort%2A> eine Sperre, die der abgebrochene Thread erforderlich ist, kann ein Deadlock auftreten, enthält.</span><span class="sxs-lookup"><span data-stu-id="649b3-270">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="649b3-271">Wenn `Abort` wird aufgerufen, in einem Thread, der nicht gestartet wurde, wird den Thread abzubrechen Wenn <xref:System.Threading.Thread.Start%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-271">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="649b3-272">Wenn `Abort` wird aufgerufen, in einem Thread, der blockiert ist oder im Ruhezustand, der Thread unterbrochen wird, und dann abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-272">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="649b3-273">Wenn `Abort` für einen Thread, der angehalten wurde, aufgerufen wird eine <xref:System.Threading.ThreadStateException> wird ausgelöst, in dem Thread, <xref:System.Threading.Thread.Abort%2A>, und <xref:System.Threading.ThreadState.AbortRequested> hinzugefügt wird die <xref:System.Threading.Thread.ThreadState%2A> Eigenschaft des Threads wird abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-273">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="649b3-274">Ein <xref:System.Threading.ThreadAbortException> wird nicht ausgelöst, in den angehaltenen Thread, bis <xref:System.Threading.Thread.Resume%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-274">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="649b3-275">Wenn `Abort` für einen verwalteten Thread aufgerufen wird, während er nicht verwalteten Code ausführt, wird eine `ThreadAbortException` wird nicht ausgelöst, bis der Thread zu verwaltetem Code zurückkehrt.</span><span class="sxs-lookup"><span data-stu-id="649b3-275">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="649b3-276">Wenn zwei Aufrufe `Abort` kommen zur gleichen Zeit, es ist möglich, dass ein Aufruf zum Festlegen von Informationen über den Zustand und der andere Aufruf zum Ausführen der `Abort`.</span><span class="sxs-lookup"><span data-stu-id="649b3-276">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="649b3-277">Eine Anwendung kann nicht jedoch, diese Situation erkennen.</span><span class="sxs-lookup"><span data-stu-id="649b3-277">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="649b3-278">Nach dem `Abort` wird aufgerufen, in einem Thread der Zustand des Threads enthält <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="649b3-278">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="649b3-279">Nachdem der Thread, als Ergebnis einer erfolgreichen Aufruf von beendet wurde `Abort`, der Status des Threads wird geändert, um <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="649b3-279">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="649b3-280">Ein Thread, der ist mit den entsprechenden Berechtigungen das Ziel einer `Abort` können abbrechen, diesen Vorgang unter Verwendung der `ResetAbort` Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-280">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="649b3-281">Ein Beispiel zur Veranschaulichung von Aufrufen der `ResetAbort` -Methode finden Sie unter den `ThreadAbortException` Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-281">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="649b3-282">Nur .NET Core: Dieser Member wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-282">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-283">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-283">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-284">Der abgebrochene Thread ist derzeit angehalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-284">The thread that is being aborted is currently suspended.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-285">für erweiterte Vorgänge in Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-285">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="649b3-286">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-286">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (object stateInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(object stateInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (stateInfo As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(System::Object ^ stateInfo);" />
      <MemberSignature Language="F#" Value="member this.Abort : obj -&gt; unit" Usage="thread.Abort stateInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateInfo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stateInfo">
          <span data-ttu-id="649b3-287">Ein Objekt, das anwendungsspezifische Informationen enthält (z. B. über den Zustand), die vom abgebrochenen Thread verwendet werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-287">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-288">Löst eine <see cref="T:System.Threading.ThreadAbortException" /> im Thread aus, für den der Aufruf erfolgte, um das Beenden des Threads zu beginnen. Gleichzeitig werden Ausnahmeinformationen über das Beenden des Threads bereitgestellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-288">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</span>
          </span>
          <span data-ttu-id="649b3-289">Durch den Aufruf dieser Methode wird der Thread i. d. R. beendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-289">Calling this method usually terminates the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-290">Wenn diese Methode in einem Thread aufgerufen wird, löst das System eine <xref:System.Threading.ThreadAbortException> im Thread aus, um ihn abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="649b3-290">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="649b3-291">`ThreadAbortException` ist eine besondere Ausnahme, die vom Anwendungscode abgefangen werden kann, jedoch wird erneut ausgelöst wird, am Ende der `catch` blockieren, wenn <xref:System.Threading.Thread.ResetAbort%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-291">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="649b3-292">`ResetAbort` Bricht die Anforderung abbricht, ab und verhindert, dass die `ThreadAbortException` aus Beenden des Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-292">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="649b3-293">Nicht ausgeführte `finally` -Blöcke werden vor dem Abbruch des Threads ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-293">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-294">Wenn ein Thread ruft `Abort` für sich selbst, die Wirkung gleicht dem Auslösen einer Ausnahme, die <xref:System.Threading.ThreadAbortException> erfolgt sofort, und das Ergebnis ist vorhersagbar.</span><span class="sxs-lookup"><span data-stu-id="649b3-294">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="649b3-295">Aber wenn ein Thread ruft `Abort` in einem anderen Thread unterbricht der Abbruch jeden beliebigen Code ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-295">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="649b3-296">Es besteht die Möglichkeit, dass ein statischer Konstruktor kann abgebrochen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-296">There is a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="649b3-297">In seltenen Fällen kann dies verhindern, dass Instanzen dieser Klasse, die in dieser Anwendungsdomäne erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-297">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="649b3-298">In der .NET Framework-Versionen 1.0 und 1.1, besteht die Möglichkeit den Thread abzubrechen konnte. während einer `finally` Block ausgeführt wird, in diesem Fall die `finally` abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-298">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="649b3-299">Der Thread ist nicht garantiert, sofort oder überhaupt abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-299">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="649b3-300">Diese Situation kann auftreten, wenn ein Thread eine ungebundene Menge, der Berechnung in der Fall ist die `finally` Blöcke, die als Teil der Abort-Prozedur, die der Abbruch dadurch auf unbestimmte Zeit verzögert aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-300">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="649b3-301">Um warten, bis ein Thread abgebrochen wurde, rufen Sie die <xref:System.Threading.Thread.Join%2A> Methode für den Thread nach dem Aufruf der <xref:System.Threading.Thread.Abort%2A> -Methode, aber es gibt keine Garantie, die der Wartevorgang beendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-301">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee that the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-302">Der aufrufende Thread <xref:System.Threading.Thread.Abort%2A> möglicherweise blockiert, wenn der Thread, die abgebrochen wird in einen geschützten Codebereich, z. B. eine `catch` Block `finally` Block oder eingeschränkten Ausführungsbereich.</span><span class="sxs-lookup"><span data-stu-id="649b3-302">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="649b3-303">Wenn der Thread aufruft <xref:System.Threading.Thread.Abort%2A> eine Sperre, die der abgebrochene Thread erforderlich ist, kann ein Deadlock auftreten, enthält.</span><span class="sxs-lookup"><span data-stu-id="649b3-303">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="649b3-304">Wenn `Abort` wird aufgerufen, in einem Thread, der nicht gestartet wurde, wird den Thread abzubrechen Wenn <xref:System.Threading.Thread.Start%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-304">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="649b3-305">Wenn `Abort` wird aufgerufen, in einem Thread, der blockiert ist oder im Ruhezustand, der Thread unterbrochen wird, und dann abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-305">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="649b3-306">Wenn `Abort` für einen Thread, der angehalten wurde, aufgerufen wird eine <xref:System.Threading.ThreadStateException> wird ausgelöst, in dem Thread, <xref:System.Threading.Thread.Abort%2A>, und <xref:System.Threading.ThreadState.AbortRequested> hinzugefügt wird die <xref:System.Threading.Thread.ThreadState%2A> Eigenschaft des Threads wird abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-306">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="649b3-307">Ein <xref:System.Threading.ThreadAbortException> wird nicht ausgelöst, in den angehaltenen Thread, bis <xref:System.Threading.Thread.Resume%2A> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-307">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="649b3-308">Wenn `Abort` für einen verwalteten Thread aufgerufen wird, während er nicht verwalteten Code ausführt, wird eine `ThreadAbortException` wird nicht ausgelöst, bis der Thread zu verwaltetem Code zurückkehrt.</span><span class="sxs-lookup"><span data-stu-id="649b3-308">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="649b3-309">Wenn zwei Aufrufe `Abort` kommen zur gleichen Zeit, es ist möglich, dass ein Aufruf zum Festlegen von Informationen über den Zustand und der andere Aufruf zum Ausführen der `Abort`.</span><span class="sxs-lookup"><span data-stu-id="649b3-309">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="649b3-310">Eine Anwendung kann nicht jedoch, diese Situation erkennen.</span><span class="sxs-lookup"><span data-stu-id="649b3-310">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="649b3-311">Nach dem `Abort` wird aufgerufen, in einem Thread der Zustand des Threads enthält <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="649b3-311">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="649b3-312">Nachdem der Thread, als Ergebnis einer erfolgreichen Aufruf von beendet wurde `Abort`, der Status des Threads wird geändert, um <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="649b3-312">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="649b3-313">Ein Thread, der ist mit den entsprechenden Berechtigungen das Ziel einer `Abort` können abbrechen, diesen Vorgang unter Verwendung der `ResetAbort` Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-313">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="649b3-314">Ein Beispiel zur Veranschaulichung von Aufrufen der `ResetAbort` -Methode finden Sie unter den `ThreadAbortException` Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-314">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-315">Im folgenden Codebeispiel wird veranschaulicht, Informationen an einen Thread zu übergeben, die abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-315">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="649b3-316">Nur .NET Core: Dieser Member wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-316">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-317">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-317">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-318">Der abgebrochene Thread ist derzeit angehalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-318">The thread that is being aborted is currently suspended.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-319">für erweiterte Vorgänge in Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-319">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="649b3-320">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-320">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
      </Docs>
    </Member>
    <Member MemberName="AllocateDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateDataSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateDataSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateDataSlot" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateDataSlot () As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateDataSlot();" />
      <MemberSignature Language="F#" Value="static member AllocateDataSlot : unit -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateDataSlot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-321">Reserviert einen unbenannten Datenslot für alle Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-321">Allocates an unnamed data slot on all the threads.</span>
          </span>
          <span data-ttu-id="649b3-322">Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-322">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-323">Der reservierte benannte Datenslot für alle Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-323">The allocated named data slot on all threads.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-324">.NET Framework bietet zwei Mechanismen für die Verwendung von lokalen Threadspeicher (TLS): threadbezogene statische Felder (d. h. die Felder, die mit markiert sind die <xref:System.ThreadStaticAttribute> Attribut) und Datenslots.</span><span class="sxs-lookup"><span data-stu-id="649b3-324">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="649b3-325">Threadbezogene statische Felder bieten viel bessere Leistung als Datenslots, und aktivieren die typüberprüfung zur Kompilierzeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-325">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="649b3-326">Weitere Informationen zur Verwendung von TLS finden Sie unter [Thread-lokalen Speicher: threadbezogene statische Felder und Datenslots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-326">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="649b3-327">Der Slot wird auf alle Threads zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="649b3-327">The slot is allocated on all threads.</span></span>  
  
 <span data-ttu-id="649b3-328">Threads verwenden einen lokaler Speichermechanismus, um die Thread-spezifische Daten zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-328">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="649b3-329">Die common Language Runtime ordnet ein Array mit mehreren Slot Data Store jeder Prozess, bei der Erstellung.</span><span class="sxs-lookup"><span data-stu-id="649b3-329">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="649b3-330">Der Thread kann einen Datenslot im Datenspeicher reservieren, speichern und Abrufen eines Wert im Slot und den Slot für die Wiederverwendung nach Ablauf des Threads freigeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-330">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="649b3-331">Datenslots sind pro Thread eindeutig.</span><span class="sxs-lookup"><span data-stu-id="649b3-331">Data slots are unique per thread.</span></span> <span data-ttu-id="649b3-332">Kein anderer Thread (nicht einmal ein untergeordneter-Thread), kann diese Daten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-332">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-333">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="649b3-333">This section contains two code examples.</span></span> <span data-ttu-id="649b3-334">Das erste Beispiel zeigt, wie Sie ein Feld verwenden, die mit der <xref:System.ThreadStaticAttribute> Attribut zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-334">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="649b3-335">Das zweite Beispiel zeigt, wie Sie einen Datenslot, um das gleiche tun.</span><span class="sxs-lookup"><span data-stu-id="649b3-335">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="649b3-336">**Erste Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-336">**First Example**</span></span>  
  
 <span data-ttu-id="649b3-337">Das folgende Beispiel zeigt, wie Sie ein Feld verwenden, die mit markierten <xref:System.ThreadStaticAttribute> zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-337">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="649b3-338">Diese Technik bietet eine bessere Leistung als die Technik, die im zweiten Beispiel angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-338">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="649b3-339">**Zweite Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-339">**Second Example**</span></span>  
  
 <span data-ttu-id="649b3-340">Das folgende Codebeispiel veranschaulicht einen Datenslot zu verwenden, um die Thread-spezifische Informationen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-340">The following code example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member AllocateNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="649b3-341">Der Name des zu reservierenden Datenslots.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-341">The name of the data slot to be allocated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-342">Reserviert einen benannten Datenslot für alle Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-342">Allocates a named data slot on all threads.</span>
          </span>
          <span data-ttu-id="649b3-343">Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-343">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-344">Der reservierte benannte Datenslot für alle Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-344">The allocated named data slot on all threads.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-345">.NET Framework bietet zwei Mechanismen für die Verwendung von lokalen Threadspeicher (TLS): threadbezogene statische Felder (d. h. die Felder, die mit markiert sind die <xref:System.ThreadStaticAttribute> Attribut) und Datenslots.</span><span class="sxs-lookup"><span data-stu-id="649b3-345">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="649b3-346">Threadbezogene statische Felder bieten viel bessere Leistung als Datenslots, und aktivieren die typüberprüfung zur Kompilierzeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-346">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="649b3-347">Weitere Informationen zur Verwendung von TLS finden Sie unter [Thread-lokalen Speicher: threadbezogene statische Felder und Datenslots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-347">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="649b3-348">Threads verwenden einen lokaler Speichermechanismus, um die Thread-spezifische Daten zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-348">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="649b3-349">Die common Language Runtime ordnet ein Array mit mehreren Slot Data Store jeder Prozess, bei der Erstellung.</span><span class="sxs-lookup"><span data-stu-id="649b3-349">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="649b3-350">Der Thread kann einen Datenslot im Datenspeicher reservieren, speichern und Abrufen eines Wert im Slot und den Slot für die Wiederverwendung nach Ablauf des Threads freigeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-350">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="649b3-351">Datenslots sind pro Thread eindeutig.</span><span class="sxs-lookup"><span data-stu-id="649b3-351">Data slots are unique per thread.</span></span> <span data-ttu-id="649b3-352">Kein anderer Thread (nicht einmal ein untergeordneter-Thread), kann diese Daten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-352">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="649b3-353">Es ist nicht erforderlich, verwenden die <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> Methode, um einen benannten Datenslot, reserviert werden, da die <xref:System.Threading.Thread.GetNamedDataSlot%2A> Methode ordnet den Slot an, wenn es nicht bereits zugewiesen wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-353">It is not necessary to use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-354">Wenn die <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> Methode wird verwendet, es sollte im Hauptthread bei Programmstart aufgerufen werden, da es eine Ausnahme auslöst, wenn ein Slot mit dem angegebenen Namen bereits zugewiesen wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-354">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</span></span> <span data-ttu-id="649b3-355">Es gibt keine Möglichkeit zu prüfen, ob es sich bei ein Slot bereits zugeordnet wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-355">There is no way to test whether a slot has already been allocated.</span></span>  
  
 <span data-ttu-id="649b3-356">Slots zugewiesen, die mit dieser Methode müssen mit dem freigegeben <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-356">Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-357">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="649b3-357">This section contains two code examples.</span></span> <span data-ttu-id="649b3-358">Das erste Beispiel zeigt, wie Sie ein Feld verwenden, die mit der <xref:System.ThreadStaticAttribute> Attribut zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-358">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="649b3-359">Das zweite Beispiel zeigt, wie Sie einen Datenslot, um das gleiche tun.</span><span class="sxs-lookup"><span data-stu-id="649b3-359">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="649b3-360">**Erste Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-360">**First Example**</span></span>  
  
 <span data-ttu-id="649b3-361">Das folgende Beispiel zeigt, wie Sie ein Feld verwenden, die mit markierten <xref:System.ThreadStaticAttribute> zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-361">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="649b3-362">Diese Technik bietet eine bessere Leistung als die Technik, die im zweiten Beispiel angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-362">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="649b3-363">**Zweite Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-363">**Second Example**</span></span>  
  
 <span data-ttu-id="649b3-364">Im folgende Beispiel wird veranschaulicht, wie Sie einen benannten Datenslot, um die Thread-spezifische Informationen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-364">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-365">Der Beispielcode verwendet nicht die <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> -Methode, da die <xref:System.Threading.Thread.GetNamedDataSlot%2A> Methode ordnet den Slot an, wenn es nicht bereits zugewiesen wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-365">The example code does not use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span> <span data-ttu-id="649b3-366">Wenn die <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> Methode wird verwendet, sollte im Hauptthread beim Programmstart aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-366">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="649b3-367">Es ist bereits ein benannter Datenslot mit dem angegebenen Namen vorhanden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-367">A named data slot with the specified name already exists.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState ApartmentState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ApartmentState ApartmentState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentState As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ApartmentState ApartmentState { System::Threading::ApartmentState get(); void set(System::Threading::ApartmentState value); };" />
      <MemberSignature Language="F#" Value="member this.ApartmentState : System.Threading.ApartmentState with get, set" Usage="System.Threading.Thread.ApartmentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in favor of GetApartmentState, SetApartmentState and TrySetApartmentState.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-368">Ruft den Apartmentzustand dieses Threads ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-368">Gets or sets the apartment state of this thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-369">Einer der <see cref="T:System.Threading.ApartmentState" />-Werte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-369">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span>
          </span>
          <span data-ttu-id="649b3-370">Der Anfangswert ist <see langword="Unknown" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-370">The initial value is <see langword="Unknown" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-371">**Die <xref:System.Threading.Thread.ApartmentState%2A> Eigenschaft ist veraltet.**</span><span class="sxs-lookup"><span data-stu-id="649b3-371">**The <xref:System.Threading.Thread.ApartmentState%2A> property is obsolete.**</span></span>  <span data-ttu-id="649b3-372">Der nicht veralteten Alternativen sind die <xref:System.Threading.Thread.GetApartmentState%2A> Methode, um den Apartmentzustand abzurufen und die <xref:System.Threading.Thread.SetApartmentState%2A> Methode, um der Apartmentzustand festgelegt.</span><span class="sxs-lookup"><span data-stu-id="649b3-372">The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.</span></span>  
  
 <span data-ttu-id="649b3-373">In den .NET Framework-Versionen 1.0 und 1.1 die `ApartmentState` Eigenschaft kennzeichnet einen Thread aus, um anzugeben, dass er in einem Singlethread-Apartment oder Multithread-Apartment ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-373">In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</span></span> <span data-ttu-id="649b3-374">Diese Eigenschaft kann festgelegt werden, wenn der Thread in ist die `Unstarted` oder `Running` Threadzustand befindet; er kann jedoch festgelegt werden nur einmal für einen Thread.</span><span class="sxs-lookup"><span data-stu-id="649b3-374">This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread.</span></span> <span data-ttu-id="649b3-375">Wenn die Eigenschaft nicht festgelegt wurde, gibt es `Unknown`.</span><span class="sxs-lookup"><span data-stu-id="649b3-375">If the property has not been set, it returns `Unknown`.</span></span>  
  
 <span data-ttu-id="649b3-376">Verwendung der <xref:System.Threading.Thread.ApartmentState%2A> Eigenschaft, um den Apartmentzustand eines Threads festzulegen, dessen Apartmentzustand bereits festgelegt wurde wurde, wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="649b3-376">An attempt to use the <xref:System.Threading.Thread.ApartmentState%2A> property to set the apartment state of a thread whose apartment state has already been set is ignored.</span></span> <span data-ttu-id="649b3-377">Allerdings die <xref:System.Threading.Thread.SetApartmentState%2A> -Methode löst eine <xref:System.InvalidOperationException> in diesem Fall.</span><span class="sxs-lookup"><span data-stu-id="649b3-377">However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-378">In .NET Framework, Version 2.0, neue Threads werden als initialisiert <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> Wenn ihr Apartmentzustand nicht festgelegt wurde, bevor sie gestartet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-378">In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="649b3-379">Thread der hauptanwendung wird initialisiert, um <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> standardmäßig.</span><span class="sxs-lookup"><span data-stu-id="649b3-379">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="649b3-380">Legen Sie nicht mehr den Hauptanwendungsthread auf <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> durch Festlegen der <xref:System.Threading.ApartmentState?displayProperty=nameWithType> Eigenschaft in der ersten Zeile des Codes.</span><span class="sxs-lookup"><span data-stu-id="649b3-380">You can no longer set the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> by setting the <xref:System.Threading.ApartmentState?displayProperty=nameWithType> property on the first line of code.</span></span> <span data-ttu-id="649b3-381">Verwenden der <xref:System.STAThreadAttribute> stattdessen.</span><span class="sxs-lookup"><span data-stu-id="649b3-381">Use the <xref:System.STAThreadAttribute> instead.</span></span>  
  
 <span data-ttu-id="649b3-382">In .NET Framework, Version 2.0, können Sie angeben, die COM-Threadingmodell für eine C++-Anwendung mit der [/CLRTHREADATTRIBUTE (festlegen CLR-Threadattributs)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) -Linkeroption.</span><span class="sxs-lookup"><span data-stu-id="649b3-382">In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) linker option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-383">Im folgenden Codebeispiel wird veranschaulicht, wie den Apartmentzustand eines Threads festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-383">The following code example demonstrates how to set the apartment state of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="649b3-384">Es wird versucht, diese Eigenschaft in einen Zustand zu versetzen, der kein gültiger Apartmentzustand ist, d. h. in einen anderen Zustand als Singlethread-Apartment (<see langword="STA" />) oder Multithread-Apartment (<see langword="MTA" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-384">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<see langword="STA" />) or multithreaded apartment (<see langword="MTA" />)).</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <altmember cref="M:System.Threading.Thread.GetApartmentState" />
        <altmember cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      </Docs>
    </Member>
    <Member MemberName="BeginCriticalRegion">
      <MemberSignature Language="C#" Value="public static void BeginCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member BeginCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.BeginCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-385">Benachrichtigt einen Host, dass die Ausführung im Begriff ist, zu einem Codebereich überzugehen, in dem die Auswirkungen eines Threadabbruchs oder einer nicht behandelten Ausnahme andere Aufgaben in der Anwendungsdomäne gefährden könnten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-385">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-386">Hosts, der die common Language Runtime (CLR), z. B. Microsoft SQL Server 2005 können unterschiedliche Richtlinien für Fehler in kritischen und nicht kritische Bereiche des Codes herstellen.</span><span class="sxs-lookup"><span data-stu-id="649b3-386">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="649b3-387">Ein kritischen Bereich sind in dem die Auswirkungen eines Threadabbruchs oder einer nicht behandelten Ausnahme möglicherweise nicht auf die aktuelle Aufgabe beschränkt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-387">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="649b3-388">Im Gegensatz dazu, wirkt sich auf einen Abbruch oder Fehler in einem nicht-kritische Codebereich nur die Aufgabe, die in der der Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="649b3-388">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="649b3-389">Betrachten Sie beispielsweise einen Task, der versucht wird, um Speicher zu belegen, während eine Sperre.</span><span class="sxs-lookup"><span data-stu-id="649b3-389">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="649b3-390">Wenn die speicherbelegung fehlschlägt, Abbrechen der aktuellen Aufgabe ist nicht ausreichend, um die Stabilität des gewährleisten die <xref:System.AppDomain>, da möglicherweise andere Aufgaben in der Domäne, die die gleiche Sperre warten.</span><span class="sxs-lookup"><span data-stu-id="649b3-390">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="649b3-391">Wenn die aktuelle Aufgabe beendet wird, können andere Aufgaben zum Stillstand.</span><span class="sxs-lookup"><span data-stu-id="649b3-391">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="649b3-392">Wenn ein Fehler in einem kritischen Bereich auftritt, kann der Host die gesamte entladen <xref:System.AppDomain> statt das Risiko der Ausführung in einem potenziell unstabilen Status fortzusetzen eingehen.</span><span class="sxs-lookup"><span data-stu-id="649b3-392">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="649b3-393">Aufrufen, um dem Host darüber zu informieren, dass der Code einen kritischen Bereich eintritt, <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-393">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="649b3-394">Rufen Sie <xref:System.Threading.Thread.EndCriticalRegion%2A> Ausführung in einem nicht-kritischen Bereich des Codes zurück.</span><span class="sxs-lookup"><span data-stu-id="649b3-394">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="649b3-395">Mit dieser Methode im Code, der unter SQL Server 2005 ausgeführt wird, muss der Code auf die höchste Schutzebene für den Host ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-395">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-396">Das folgende Beispiel zeigt die Verwendung der <xref:System.Threading.Thread.BeginCriticalRegion%2A> und <xref:System.Threading.Thread.EndCriticalRegion%2A> Methoden, um einen Codeblock in kritische und nicht kritische Bereiche zu unterteilen.</span><span class="sxs-lookup"><span data-stu-id="649b3-396">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.EndCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="BeginThreadAffinity">
      <MemberSignature Language="C#" Value="public static void BeginThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member BeginThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.BeginThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-397">Benachrichtigt einen Host, dass verwalteter Code im Begriff ist, Anweisungen auszuführen, die von der Identität des aktuellen physischen Betriebssystemthreads abhängen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-397">Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-398">Einige Hosts von der common Language Runtime, z. B. Microsoft SQL Server 2005, geben Sie ihre eigenen Threads zu verwalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-398">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="649b3-399">Ein Host, der einen eigenen Threadverwaltung bereitstellt, kann eine auszuführende Aufgabe zu einem beliebigen Zeitpunkt aus einem physischen Betriebssystemthreads zu einem anderen verschieben.</span><span class="sxs-lookup"><span data-stu-id="649b3-399">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="649b3-400">Die meisten Aufgaben sind von diesem Wechsel nicht betroffen.</span><span class="sxs-lookup"><span data-stu-id="649b3-400">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="649b3-401">Allerdings einige Aufgaben Threadaffinität –, also in dem sie die Identität des physischen Betriebssystemthreads abhängen.</span><span class="sxs-lookup"><span data-stu-id="649b3-401">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="649b3-402">Dazu müssen der Host informieren, wenn sie Code ausführen, der nicht verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="649b3-402">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="649b3-403">Wenn z. B. sperren, ruft Ihre Anwendung eine System-API zum Abrufen eines Betriebssystems, die Threadaffinität, z. B. Win32 CRITICAL_SECTION, müssen Sie aufrufen <xref:System.Threading.Thread.BeginThreadAffinity%2A> vor dem Abrufen der Sperre und <xref:System.Threading.Thread.EndThreadAffinity%2A> nach dem Aufheben der Sperre.</span><span class="sxs-lookup"><span data-stu-id="649b3-403">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="649b3-404">Mit dieser Methode im Code, der unter SQL Server 2005 ausgeführt wird, muss der Code auf die höchste Schutzebene für den Host ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-404">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-405">Das folgende Beispiel zeigt die Verwendung der <xref:System.Threading.Thread.BeginThreadAffinity%2A> und <xref:System.Threading.Thread.EndThreadAffinity%2A> Methoden, um einen Host zu benachrichtigen, die ein Codeblock auf die Identität des physischen Betriebssystemthreads abhängen.</span><span class="sxs-lookup"><span data-stu-id="649b3-405">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-406">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-406">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="649b3-407">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-407">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="649b3-408">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-408">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.Thread.EndThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Remoting.Contexts.Context CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentContext As Context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Remoting::Contexts::Context ^ CurrentContext { System::Runtime::Remoting::Contexts::Context ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.Runtime.Remoting.Contexts.Context" Usage="System.Threading.Thread.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Contexts.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-409">Ruft den aktuellen Kontext ab, in dem der Thread ausgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-409">Gets the current context in which the thread is executing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-410">Ein <see cref="T:System.Runtime.Remoting.Contexts.Context" /> der den aktuellen Kontext des Threads darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-410">A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-411">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-411">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="649b3-412">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-412">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="649b3-413">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-413">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-414">Ruft die Kultur für den aktuellen Thread ab oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-414">Gets or sets the culture for the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-415">Ein Objekt, das die Kultur für den aktuellen Thread darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-415">An object that represents the culture for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-416">Die <xref:System.Globalization.CultureInfo> Objekt, das von dieser Eigenschaft zusammen mit seiner zugeordneten Objekte, zurückgegeben wird zu bestimmen, das Standardformat für Datum, Uhrzeit, Zahlen, Currency-Werte, die Sortierreihenfolge des Texts, Groß-/ Kleinschreibungskonventionen und Zeichenfolgenvergleichen.</span><span class="sxs-lookup"><span data-stu-id="649b3-416">The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</span></span> <span data-ttu-id="649b3-417">Finden Sie unter den <xref:System.Globalization.CultureInfo> Klasse, um Informationen über Kulturnamen und Bezeichner, die Unterschiede zwischen invarianten, neutrale und spezifische Kulturen und wirkt sich die kulturinformationen für die Möglichkeit, Threads und Anwendungsdomänen.</span><span class="sxs-lookup"><span data-stu-id="649b3-417">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="649b3-418">Finden Sie unter den <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft, um zu erfahren, wie die Kultur eines Threads Standardwert festgelegt wird und wie Benutzer Informationen zur Kultur für ihre Computer festgelegt.</span><span class="sxs-lookup"><span data-stu-id="649b3-418">See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</span></span>  
  
 <span data-ttu-id="649b3-419">Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], Sie können festlegen, die <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft, um eine neutrale Kultur.</span><span class="sxs-lookup"><span data-stu-id="649b3-419">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can set the <xref:System.Threading.Thread.CurrentCulture%2A> property to a neutral culture.</span></span> <span data-ttu-id="649b3-420">Grund hierfür ist, das Verhalten von der <xref:System.Globalization.CultureInfo> Klasse hat sich geändert: Wenn sie eine neutrale Kultur, die Eigenschaftswerte darstellt (insbesondere die <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, und <xref:System.Globalization.CultureInfo.TextInfo%2A> Eigenschaften) jetzt entsprechend die spezifische Kultur, die die neutrale Kultur zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-420">This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture.</span></span> <span data-ttu-id="649b3-421">In früheren Versionen von .NET Framework die <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft hat einen <xref:System.NotSupportedException> Ausnahme aus, wenn eine neutrale Kultur zugewiesen wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-421">In earlier versions of the .NET Framework, the <xref:System.Threading.Thread.CurrentCulture%2A> property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-422">Das folgende Codebeispiel zeigt die threading-Anweisung, die können die Benutzeroberfläche einer Windows Forms in der Kultur angezeigt, die in der Systemsteuerung festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-422">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="649b3-423">Es ist zusätzlicher Code erforderlich.</span><span class="sxs-lookup"><span data-stu-id="649b3-423">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="649b3-424">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-424">The property is set to <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-425">zum Festlegen der Eigenschaft an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-425">for setting the property.</span>
          </span>
          <span data-ttu-id="649b3-426">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-426">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="System.Threading.Thread.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-427">Ruft den aktuellen Prinzipal des Threads (für rollenbasierte Sicherheit) ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-427">Gets or sets the thread's current principal (for role-based security).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-428">Ein <see cref="T:System.Security.Principal.IPrincipal" />-Wert, der den Sicherheitskontext darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-428">An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="649b3-429">Das folgende Codebeispiel veranschaulicht das Festlegen und Abrufen des Prinzipals eines Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-429">The following code example shows how to set and retrieve the principal of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-430">Der Aufrufer verfügt nicht über die erforderliche Berechtigung zum Festlegen des Prinzipals.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-430">The caller does not have the permission required to set the principal.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-431">das Prinzipalobjekt bearbeiten zu können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-431">to manipulate the principal object.</span>
          </span>
          <span data-ttu-id="649b3-432">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-432">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Thread CurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Thread ^ CurrentThread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentThread : System.Threading.Thread" Usage="System.Threading.Thread.CurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-433">Ruft den derzeit ausgeführten Thread ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-433">Gets the currently running thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-434">Ein <see cref="T:System.Threading.Thread" />, der den derzeit ausgeführten Thread darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-434">A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="649b3-435">Das folgende Beispiel erstellt eine Aufgabe, die wiederum 20 untergeordneten Aufgaben erstellt.</span><span class="sxs-lookup"><span data-stu-id="649b3-435">The following example creates a task that in turn creates 20 child tasks.</span></span> <span data-ttu-id="649b3-436">Ruft die Anwendung selbst, wie auch jede Aufgabe die `ShowThreadInformation` Methode, die verwendet die <xref:System.Threading.Thread.CurrentThread%2A> Eigenschaft, um Informationen zum Thread anzuzeigen, auf dem er ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-436">The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the <xref:System.Threading.Thread.CurrentThread%2A> property  to display information about the thread on which it is running.</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.currentthread/cs/currentthread2.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.currentthread/vb/currentthread2.vb#1)]  
  
 <span data-ttu-id="649b3-437">Jede untergeordnete Aufgabe 1 Millionen zufällige Zahlen zwischen 1 und 1 Million generiert und ihrem Mittelwert zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-437">Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</span></span> <span data-ttu-id="649b3-438">Der übergeordnete Task Ruft die <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> Methode, um sicherzustellen, dass die untergeordneten Aufgaben abgeschlossen wurden, vor der Anzeige des Mittelwerts von jeder Aufgabe zurückgegebenen und berechnet den Mittelwert der bedeutet.</span><span class="sxs-lookup"><span data-stu-id="649b3-438">The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</span></span>  
  
 <span data-ttu-id="649b3-439">Beachten Sie, dass während der Ausführung der Anwendung auf ein Vordergrundthread, jede Aufgabe in einem Threadpoolthread ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-439">Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-440">Ruft die aktuelle Kultur ab, mit deren Hilfe der Ressourcen-Manager zur Laufzeit kulturabhängige Ressourcen sucht, oder legt diese fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-440">Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-441">Ein Objekt, das die aktuelle Kultur darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-441">An object that represents the current culture.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-442">Die Benutzeroberflächenkultur gibt die Ressourcen, die eine Anwendung Benutzer ein- und Ausgaben unterstützen muss, die und in der Standardeinstellung ist identisch mit dem Betriebssystem-Kultur, an.</span><span class="sxs-lookup"><span data-stu-id="649b3-442">The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</span></span> <span data-ttu-id="649b3-443">Finden Sie unter den <xref:System.Globalization.CultureInfo> Klasse, um Informationen über Kulturnamen und Bezeichner, die Unterschiede zwischen invarianten, neutrale und spezifische Kulturen und wirkt sich die kulturinformationen für die Möglichkeit, Threads und Anwendungsdomänen.</span><span class="sxs-lookup"><span data-stu-id="649b3-443">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="649b3-444">Finden Sie unter den <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Eigenschaft, um zu erfahren, wie die Standard-Benutzeroberflächenkultur eines Threads bestimmt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-444">See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> property to learn how a thread's default UI culture is determined.</span></span>  
  
 <span data-ttu-id="649b3-445">Die <xref:System.Globalization.CultureInfo> von dieser Eigenschaft zurückgegebene eine neutrale Kultur sein können.</span><span class="sxs-lookup"><span data-stu-id="649b3-445">The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture.</span></span> <span data-ttu-id="649b3-446">Neutrale Kulturen sollte nicht verwendet werden, z. B. Formatierungsmethoden <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, und <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-446">Neutral cultures should not be used with formatting methods such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-447">Verwenden Sie die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> Methode, um eine bestimmte Kultur abrufen oder verwenden Sie die <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-447">Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-448">Die <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> -Methode löst <xref:System.ArgumentException> für die neutralen Kulturen "Zh-Hant" ("Zh-CHT") und "Zh-Hans" ("Zh-CHS").</span><span class="sxs-lookup"><span data-stu-id="649b3-448">The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method throws <xref:System.ArgumentException> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-449">Im folgenden Beispiel wird bestimmt, ob die Sprache des UI-Kultur des aktuellen Threads Französisch.</span><span class="sxs-lookup"><span data-stu-id="649b3-449">The following example determines whether the language of the current thread's UI culture is French.</span></span> <span data-ttu-id="649b3-450">Wenn sie nicht der Fall ist, wird die UI-Kultur des aktuellen Threads auf Englisch (Vereinigte Staaten) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="649b3-450">If it is not, it sets the UI culture of the current thread to English (United States).</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/cs/CurrentUICulture1.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/vb/CurrentUICulture1.vb#1)]  
  
 <span data-ttu-id="649b3-451">Das folgende Codebeispiel zeigt die threading-Anweisung, die können die Benutzeroberfläche einer Windows Forms in der Kultur angezeigt, die in der Systemsteuerung festgelegt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-451">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="649b3-452">Es ist zusätzlicher Code erforderlich.</span><span class="sxs-lookup"><span data-stu-id="649b3-452">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="649b3-453">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-453">The property is set to <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="649b3-454">Die Eigenschaft ist auf einen Kulturnamen festgelegt, der nicht zum Suchen einer Ressourcendatei verwendet werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-454">The property is set to a culture name that cannot be used to locate a resource file.</span>
          </span>
          <span data-ttu-id="649b3-455">Ressourcendateinamen dürfen nur Buchstaben, Zahlen, Bindestriche oder Unterstriche enthalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-455">Resource filenames must include only letters, numbers, hyphens or underscores.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DisableComObjectEagerCleanup">
      <MemberSignature Language="C#" Value="public void DisableComObjectEagerCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableComObjectEagerCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.DisableComObjectEagerCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableComObjectEagerCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableComObjectEagerCleanup();" />
      <MemberSignature Language="F#" Value="member this.DisableComObjectEagerCleanup : unit -&gt; unit" Usage="thread.DisableComObjectEagerCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-456">Deaktiviert die automatische Bereinigung von Runtime Callable Wrappern (RCW) für den aktuellen Thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-456">Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-457">Standardmäßig löscht die common Language Runtime (CLR) Runtime callable Wrapper automatisch.</span><span class="sxs-lookup"><span data-stu-id="649b3-457">By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</span></span> <span data-ttu-id="649b3-458">Die CLR Pumpen Nachrichten bei der Bereinigung, die Eintrittsinvarianz Probleme für einige Anwendungen verursachen kann, die folgenden ungewöhnlichen Kriterien erfüllen:</span><span class="sxs-lookup"><span data-stu-id="649b3-458">The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</span></span>  
  
-   <span data-ttu-id="649b3-459">Die Anwendung führt eine eigene meldungsweiterleitung.</span><span class="sxs-lookup"><span data-stu-id="649b3-459">The application does its own message pumping.</span></span>  
  
-   <span data-ttu-id="649b3-460">Die Anwendung muss genau bei meldungsweiterleitung zu steuern.</span><span class="sxs-lookup"><span data-stu-id="649b3-460">The application needs to control precisely when message pumping occurs.</span></span>  
  
 <span data-ttu-id="649b3-461">Solche Anwendungen können die <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> Methode, um zu verhindern, dass die CLR ausführen Automatische Freigabe von Runtime callable Wrapper.</span><span class="sxs-lookup"><span data-stu-id="649b3-461">Such applications can use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</span></span>  
  
 <span data-ttu-id="649b3-462">Wenn diese Methode in einem Thread aufgerufen wurde, darf nicht die automatische Bereinigung erneut für diesen Thread aktiviert sein.</span><span class="sxs-lookup"><span data-stu-id="649b3-462">When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</span></span> <span data-ttu-id="649b3-463">Wenn Ihre Anwendung zum Bereinigen von Runtime callable Wrapper bereit ist, verwenden Sie die <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> Methode, um die Laufzeitkomponente anzuweisen, bereinigen alle Runtime callable Wrapper im aktuellen Kontext.</span><span class="sxs-lookup"><span data-stu-id="649b3-463">When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</span></span> <span data-ttu-id="649b3-464">Meldungsweiterleitung tritt auf, während die Methode ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-464">Message pumping occurs while the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="649b3-465">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-465">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="649b3-466">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-466">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="EndCriticalRegion">
      <MemberSignature Language="C#" Value="public static void EndCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member EndCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.EndCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-467">Benachrichtigt einen Host, dass die Ausführung im Begriff ist, zu einem Codebereich überzugehen, in dem die Auswirkungen eines Threadabbruchs oder einer nicht behandelten Ausnahme auf die aktuelle Aufgabe beschränkt sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-467">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-468">Hosts, der die common Language Runtime (CLR), z. B. Microsoft SQL Server 2005 können unterschiedliche Richtlinien für Fehler in kritischen und nicht kritische Bereiche des Codes herstellen.</span><span class="sxs-lookup"><span data-stu-id="649b3-468">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="649b3-469">Ein kritischen Bereich sind in dem die Auswirkungen eines Threadabbruchs oder einer nicht behandelten Ausnahme möglicherweise nicht auf die aktuelle Aufgabe beschränkt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-469">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="649b3-470">Im Gegensatz dazu, wirkt sich auf einen Abbruch oder Fehler in einem nicht-kritische Codebereich nur die Aufgabe, die in der der Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="649b3-470">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="649b3-471">Betrachten Sie beispielsweise einen Task, der versucht wird, um Speicher zu belegen, während eine Sperre.</span><span class="sxs-lookup"><span data-stu-id="649b3-471">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="649b3-472">Wenn die speicherbelegung fehlschlägt, Abbrechen der aktuellen Aufgabe ist nicht ausreichend, um die Stabilität des gewährleisten die <xref:System.AppDomain>, da möglicherweise andere Aufgaben in der Domäne, die die gleiche Sperre warten.</span><span class="sxs-lookup"><span data-stu-id="649b3-472">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="649b3-473">Wenn die aktuelle Aufgabe beendet wird, können andere Aufgaben zum Stillstand.</span><span class="sxs-lookup"><span data-stu-id="649b3-473">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="649b3-474">Wenn ein Fehler in einem kritischen Bereich auftritt, kann der Host die gesamte entladen <xref:System.AppDomain> statt das Risiko der Ausführung in einem potenziell unstabilen Status fortzusetzen eingehen.</span><span class="sxs-lookup"><span data-stu-id="649b3-474">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="649b3-475">Aufrufen, um dem Host darüber zu informieren, dass der Code einen kritischen Bereich eintritt, <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-475">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="649b3-476">Rufen Sie <xref:System.Threading.Thread.EndCriticalRegion%2A> Ausführung in einem nicht-kritischen Bereich des Codes zurück.</span><span class="sxs-lookup"><span data-stu-id="649b3-476">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="649b3-477">Mit dieser Methode im Code, der unter SQL Server 2005 ausgeführt wird, muss der Code auf die höchste Schutzebene für den Host ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-477">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-478">Das folgende Beispiel zeigt die Verwendung der <xref:System.Threading.Thread.BeginCriticalRegion%2A> und <xref:System.Threading.Thread.EndCriticalRegion%2A> Methoden, um einen Codeblock in kritische und nicht kritische Bereiche zu unterteilen.</span><span class="sxs-lookup"><span data-stu-id="649b3-478">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.BeginCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="EndThreadAffinity">
      <MemberSignature Language="C#" Value="public static void EndThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member EndThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.EndThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-479">Benachrichtigt einen Host, dass verwalteter Code die Ausführung von Anweisungen beendet hat, die von der Identität des aktuellen physischen Betriebssystemthreads abhängen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-479">Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-480">Einige Hosts von der common Language Runtime, z. B. Microsoft SQL Server 2005, geben Sie ihre eigenen Threads zu verwalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-480">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="649b3-481">Ein Host, der einen eigenen Threadverwaltung bereitstellt, kann eine auszuführende Aufgabe zu einem beliebigen Zeitpunkt aus einem physischen Betriebssystemthreads zu einem anderen verschieben.</span><span class="sxs-lookup"><span data-stu-id="649b3-481">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="649b3-482">Die meisten Aufgaben sind von diesem Wechsel nicht betroffen.</span><span class="sxs-lookup"><span data-stu-id="649b3-482">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="649b3-483">Allerdings einige Aufgaben Threadaffinität –, also in dem sie die Identität des physischen Betriebssystemthreads abhängen.</span><span class="sxs-lookup"><span data-stu-id="649b3-483">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="649b3-484">Dazu müssen der Host informieren, wenn sie Code ausführen, der nicht verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="649b3-484">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="649b3-485">Wenn z. B. sperren, ruft Ihre Anwendung eine System-API zum Abrufen eines Betriebssystems, die Threadaffinität, z. B. Win32 CRITICAL_SECTION, müssen Sie aufrufen <xref:System.Threading.Thread.BeginThreadAffinity%2A> vor dem Abrufen der Sperre und <xref:System.Threading.Thread.EndThreadAffinity%2A> nach dem Aufheben der Sperre.</span><span class="sxs-lookup"><span data-stu-id="649b3-485">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="649b3-486">Mit dieser Methode im Code, der unter SQL Server 2005 ausgeführt wird, muss der Code auf die höchste Schutzebene für den Host ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-486">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-487">Das folgende Beispiel zeigt die Verwendung der <xref:System.Threading.Thread.BeginThreadAffinity%2A> und <xref:System.Threading.Thread.EndThreadAffinity%2A> Methoden, um einen Host zu benachrichtigen, die ein Codeblock auf die Identität des physischen Betriebssystemthreads abhängen.</span><span class="sxs-lookup"><span data-stu-id="649b3-487">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-488">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="649b3-489">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="649b3-490">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.Thread.BeginThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="ExecutionContext">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext ExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.ExecutionContext ExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionContext As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ExecutionContext ^ ExecutionContext { System::Threading::ExecutionContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutionContext : System.Threading.ExecutionContext" Usage="System.Threading.Thread.ExecutionContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-491">Ruft ein <see cref="T:System.Threading.ExecutionContext" />-Objekt ab, das Informationen zu den verschiedenen Kontexten des aktuellen Threads enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-491">Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-492">Ein <see cref="T:System.Threading.ExecutionContext" />-Objekt, das Kontextinformationen für den aktuellen Thread konsolidiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-492">An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-493">Die <xref:System.Threading.ExecutionContext> Klasse stellt einen einzelnen Container für alle Informationen relevant für einen logischen Thread der Ausführung bereit.</span><span class="sxs-lookup"><span data-stu-id="649b3-493">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="649b3-494">Dies schließt Sicherheitskontext, Aufrufkontext, Synchronisierungskontext, Lokalisierungskontext und Transaktionskontext.</span><span class="sxs-lookup"><span data-stu-id="649b3-494">This includes security context, call context, synchronization context, localization context, and transaction context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Thread ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="thread.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-495">Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <see cref="T:System.Threading.Thread" />-Objekt verarbeitet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-495">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-496">Der Garbage Collector ruft <xref:System.Threading.Thread.Finalize%2A> Wenn das aktuelle Objekt wird finalisiert werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-496">The garbage collector calls <xref:System.Threading.Thread.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNamedDataSlot">
      <MemberSignature Language="C#" Value="public static void FreeNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.FreeNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeNamedDataSlot (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member FreeNamedDataSlot : string -&gt; unit" Usage="System.Threading.Thread.FreeNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="649b3-497">Der Name des freizugebenden Datenslots.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-497">The name of the data slot to be freed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-498">Entfernt die Zuordnung zwischen einem Namen und einem Slot für alle Threads in dem Prozess.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-498">Eliminates the association between a name and a slot, for all threads in the process.</span>
          </span>
          <span data-ttu-id="649b3-499">Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-499">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-500">.NET Framework bietet zwei Mechanismen für die Verwendung von lokalen Threadspeicher (TLS): threadbezogene statische Felder (d. h. die Felder, die mit markiert sind die <xref:System.ThreadStaticAttribute> Attribut) und Datenslots.</span><span class="sxs-lookup"><span data-stu-id="649b3-500">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="649b3-501">Threadbezogene statische Felder bieten viel bessere Leistung als Datenslots, und aktivieren die typüberprüfung zur Kompilierzeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-501">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="649b3-502">Weitere Informationen zur Verwendung von TLS finden Sie unter [Thread-lokalen Speicher: threadbezogene statische Felder und Datenslots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-502">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="649b3-503">Nach dem Aufrufen `FreeNamedDataSlot`, jeden Thread, der Aufrufe <xref:System.Threading.Thread.GetNamedDataSlot%2A> mit dem gleichen Namen wird einen neuen Slot verknüpft ist, mit dem Namen zuordnen.</span><span class="sxs-lookup"><span data-stu-id="649b3-503">After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name.</span></span> <span data-ttu-id="649b3-504">Nachfolgende Aufrufe von `GetNamedDataSlot` von jedem Thread des neuen Slots zurück.</span><span class="sxs-lookup"><span data-stu-id="649b3-504">Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot.</span></span> <span data-ttu-id="649b3-505">Allerdings einen beliebigen Thread, der immer noch eine <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> von einem früheren Aufruf zurückgegebenen `GetNamedDataSlot` können weiterhin den alten Slot verwenden.</span><span class="sxs-lookup"><span data-stu-id="649b3-505">However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.</span></span>  
  
 <span data-ttu-id="649b3-506">Ein Slot, die mit einem Namen zugeordnet wurde freigegeben nur, wenn alle `LocalDataStoreSlot` , die abgerufen wurde, vor dem Aufruf von `FreeNamedDataSlot` veröffentlicht und Garbage Collection durchgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-506">A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.</span></span>  
  
 <span data-ttu-id="649b3-507">Threads verwenden einen lokaler Speichermechanismus, um die Thread-spezifische Daten zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-507">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="649b3-508">Die common Language Runtime ordnet ein Array mit mehreren Slot Data Store jeder Prozess, bei der Erstellung.</span><span class="sxs-lookup"><span data-stu-id="649b3-508">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="649b3-509">Der Thread kann einen Datenslot im Datenspeicher reservieren, speichern und Abrufen eines Wert im Slot und den Slot für die Wiederverwendung nach Ablauf des Threads freigeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-509">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="649b3-510">Datenslots sind pro Thread eindeutig.</span><span class="sxs-lookup"><span data-stu-id="649b3-510">Data slots are unique per thread.</span></span> <span data-ttu-id="649b3-511">Kein anderer Thread (nicht einmal ein untergeordneter-Thread), kann diese Daten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-511">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-512">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="649b3-512">This section contains two code examples.</span></span> <span data-ttu-id="649b3-513">Das erste Beispiel zeigt, wie Sie ein Feld verwenden, die mit der <xref:System.ThreadStaticAttribute> Attribut zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-513">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="649b3-514">Das zweite Beispiel zeigt, wie Sie einen Datenslot, um das gleiche tun.</span><span class="sxs-lookup"><span data-stu-id="649b3-514">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="649b3-515">**Erste Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-515">**First Example**</span></span>  
  
 <span data-ttu-id="649b3-516">Das folgende Beispiel zeigt, wie Sie ein Feld verwenden, die mit markierten <xref:System.ThreadStaticAttribute> zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-516">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="649b3-517">Diese Technik bietet eine bessere Leistung als die Technik, die im zweiten Beispiel angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-517">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="649b3-518">**Zweite Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-518">**Second Example**</span></span>  
  
 <span data-ttu-id="649b3-519">Im folgende Beispiel wird veranschaulicht, wie Sie einen benannten Datenslot, um die Thread-spezifische Informationen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-519">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState GetApartmentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.ApartmentState GetApartmentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApartmentState () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ApartmentState GetApartmentState();" />
      <MemberSignature Language="F#" Value="member this.GetApartmentState : unit -&gt; System.Threading.ApartmentState" Usage="thread.GetApartmentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-520">Gibt einen <see cref="T:System.Threading.ApartmentState" />-Wert zurück, der den Apartmentzustand angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-520">Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-521">Einer der <see cref="T:System.Threading.ApartmentState" />-Werte, der den Apartmentzustand des verwalteten Threads angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-521">One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread.</span>
          </span>
          <span data-ttu-id="649b3-522">Der Standardwert ist <see cref="F:System.Threading.ApartmentState.Unknown" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-522">The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-523">Diese Methode zusammen mit den <xref:System.Threading.Thread.SetApartmentState%2A> Methode und die <xref:System.Threading.Thread.TrySetApartmentState%2A> Methode ersetzt die <xref:System.Threading.Thread.ApartmentState%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-523">This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-524">Im folgenden Codebeispiel wird veranschaulicht, die <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, und <xref:System.Threading.Thread.TrySetApartmentState%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="649b3-524">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="649b3-525">Das Codebeispiel erstellt einen Thread.</span><span class="sxs-lookup"><span data-stu-id="649b3-525">The code example creates a thread.</span></span> <span data-ttu-id="649b3-526">Vor dem Starten des Threads <xref:System.Threading.Thread.GetApartmentState%2A> zeigt den ersten <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> Zustand und <xref:System.Threading.Thread.SetApartmentState%2A> ändert den Zustand in <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-526">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-527">Die <xref:System.Threading.Thread.TrySetApartmentState%2A> dann Methodenrückgabe `false` beim Versuch, den Status zu ändern, <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> da bereits der Apartmentzustand festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-527">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="649b3-528">Bei der Ausführung des gleichen Vorgangs mit <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> würde ausgelöst wurden.</span><span class="sxs-lookup"><span data-stu-id="649b3-528">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="649b3-529">Nachdem der Thread gestartet wurde, die <xref:System.Threading.Thread.TrySetApartmentState%2A> Methode erneut verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-529">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="649b3-530">Sie löst dieses Mal <xref:System.Threading.ThreadStateException> , da der Thread wurde bereits gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-530">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompressedStack">
      <MemberSignature Language="C#" Value="public System.Threading.CompressedStack GetCompressedStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.CompressedStack GetCompressedStack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCompressedStack" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompressedStack () As CompressedStack" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CompressedStack ^ GetCompressedStack();" />
      <MemberSignature Language="F#" Value="member this.GetCompressedStack : unit -&gt; System.Threading.CompressedStack" Usage="thread.GetCompressedStack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CompressedStack</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-531">Gibt ein <see cref="T:System.Threading.CompressedStack" />-Objekt zurück, mit dem der Stapel für den aktuellen Thread erfasst werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-531">Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-532">Keine</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-532">None.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-533">Diese Methode wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="649b3-533">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="649b3-534">In allen Fällen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-534">In all cases.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="649b3-535">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-535">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="649b3-536">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-536">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcessorId">
      <MemberSignature Language="C#" Value="public static int GetCurrentProcessorId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentProcessorId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCurrentProcessorId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcessorId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentProcessorId();" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcessorId : unit -&gt; int" Usage="System.Threading.Thread.GetCurrentProcessorId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (LocalDataStoreSlot slot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(class System.LocalDataStoreSlot slot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (slot As LocalDataStoreSlot) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(LocalDataStoreSlot ^ slot);" />
      <MemberSignature Language="F#" Value="static member GetData : LocalDataStoreSlot -&gt; obj" Usage="System.Threading.Thread.GetData slot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
      </Parameters>
      <Docs>
        <param name="slot">
          <span data-ttu-id="649b3-537">Der <see cref="T:System.LocalDataStoreSlot" />, aus dem der Wert abgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-537">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-538">Ruft in der aktuellen Domäne des aktuellen Threads den Wert aus dem angegebenen Slot für den aktuellen Thread ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-538">Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</span>
          </span>
          <span data-ttu-id="649b3-539">Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-539">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-540">Der abgerufene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-540">The retrieved value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-541">.NET Framework bietet zwei Mechanismen für die Verwendung von lokalen Threadspeicher (TLS): threadbezogene statische Felder (d. h. die Felder, die mit markiert sind die <xref:System.ThreadStaticAttribute> Attribut) und Datenslots.</span><span class="sxs-lookup"><span data-stu-id="649b3-541">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="649b3-542">Threadbezogene statische Felder bieten viel bessere Leistung als Datenslots, und aktivieren die typüberprüfung zur Kompilierzeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-542">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="649b3-543">Weitere Informationen zur Verwendung von TLS finden Sie unter [Thread-lokalen Speicher: threadbezogene statische Felder und Datenslots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-543">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="649b3-544">Threads verwenden einen lokaler Speichermechanismus, um die Thread-spezifische Daten zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-544">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="649b3-545">Die common Language Runtime ordnet ein Array mit mehreren Slot Data Store jeder Prozess, bei der Erstellung.</span><span class="sxs-lookup"><span data-stu-id="649b3-545">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="649b3-546">Der Thread kann einen Datenslot im Datenspeicher reservieren, speichern und Abrufen eines Wert im Slot und den Slot für die Wiederverwendung nach Ablauf des Threads freigeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-546">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="649b3-547">Datenslots sind pro Thread eindeutig.</span><span class="sxs-lookup"><span data-stu-id="649b3-547">Data slots are unique per thread.</span></span> <span data-ttu-id="649b3-548">Kein anderer Thread (nicht einmal ein untergeordneter-Thread), kann diese Daten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-548">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-549"><xref:System.Threading.Thread.GetData%2A> ist eine `Shared` -Methode, die immer auf den derzeit ausgeführten Thread angewendet wird, auch wenn Sie mit einer Variablen, die auf einem anderen Thread aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-549"><xref:System.Threading.Thread.GetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="649b3-550">Um Verwirrung zu vermeiden, verwenden Sie den Namen der Klasse beim Aufrufen von `Shared` Methoden: `Dim test As Object = Thread.GetData(testSlot)`.</span><span class="sxs-lookup"><span data-stu-id="649b3-550">To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-551">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="649b3-551">This section contains two code examples.</span></span> <span data-ttu-id="649b3-552">Das erste Beispiel zeigt, wie Sie ein Feld verwenden, die mit der <xref:System.ThreadStaticAttribute> Attribut zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-552">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="649b3-553">Das zweite Beispiel zeigt, wie Sie einen Datenslot, um das gleiche tun.</span><span class="sxs-lookup"><span data-stu-id="649b3-553">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="649b3-554">**Erste Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-554">**First Example**</span></span>  
  
 <span data-ttu-id="649b3-555">Das folgende Beispiel zeigt, wie Sie ein Feld verwenden, die mit markierten <xref:System.ThreadStaticAttribute> zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-555">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="649b3-556">Diese Technik bietet eine bessere Leistung als die Technik, die im zweiten Beispiel angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-556">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="649b3-557">**Zweite Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-557">**Second Example**</span></span>  
  
 <span data-ttu-id="649b3-558">Das folgende Beispiel veranschaulicht einen Datenslot zu verwenden, um die Thread-spezifische Informationen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-558">The following example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static AppDomain GetDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain GetDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain () As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ GetDomain();" />
      <MemberSignature Language="F#" Value="static member GetDomain : unit -&gt; AppDomain" Usage="System.Threading.Thread.GetDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-559">Gibt die aktuelle Domäne zurück, in der der aktuelle Thread ausgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-559">Returns the current domain in which the current thread is running.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-560">Eine <see cref="T:System.AppDomain" />, die die aktuelle Anwendungsdomäne des ausgeführten Threads darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-560">An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="649b3-561">Im folgenden Codebeispiel wird veranschaulicht, wie die Namen und die ID des abzurufenden der `AppDomain` in der der Thread ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-561">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainID">
      <MemberSignature Language="C#" Value="public static int GetDomainID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDomainID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomainID" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomainID () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDomainID();" />
      <MemberSignature Language="F#" Value="static member GetDomainID : unit -&gt; int" Usage="System.Threading.Thread.GetDomainID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-562">Gibt einen eindeutigen Bezeichner der Anwendungsdomäne zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-562">Returns a unique application domain identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-563">Eine 32-Bit-Ganzzahl mit Vorzeichen, mit der die Anwendungsdomäne eindeutig bezeichnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-563">A 32-bit signed integer uniquely identifying the application domain.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="649b3-564">Im folgenden Codebeispiel wird veranschaulicht, wie die Namen und die ID des abzurufenden der `AppDomain` in der der Thread ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-564">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="thread.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-565">Gibt einen Hashcode für den aktuellen Thread zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-565">Returns a hash code for the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-566">Ein ganzzahliger Hashcodewert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-566">An integer hash code value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-567">Der Hashcode ist nicht unbedingt eindeutig sein.</span><span class="sxs-lookup"><span data-stu-id="649b3-567">The hash code is not guaranteed to be unique.</span></span> <span data-ttu-id="649b3-568">Verwenden der <xref:System.Threading.Thread.ManagedThreadId%2A> Eigenschaft, wenn Sie einen eindeutigen Bezeichner für einen verwalteten Thread benötigen.</span><span class="sxs-lookup"><span data-stu-id="649b3-568">Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot GetNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ GetNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.GetNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="649b3-569">Der Name des lokalen Datenslots.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-569">The name of the local data slot.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-570">Sucht einen benannten Datenslot.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-570">Looks up a named data slot.</span>
          </span>
          <span data-ttu-id="649b3-571">Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-571">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-572">Ein für diesen Thread reservierter <see cref="T:System.LocalDataStoreSlot" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-572">A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-573">.NET Framework bietet zwei Mechanismen für die Verwendung von lokalen Threadspeicher (TLS): threadbezogene statische Felder (d. h. die Felder, die mit markiert sind die <xref:System.ThreadStaticAttribute> Attribut) und Datenslots.</span><span class="sxs-lookup"><span data-stu-id="649b3-573">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="649b3-574">Threadbezogene statische Felder bieten viel bessere Leistung als Datenslots, und aktivieren die typüberprüfung zur Kompilierzeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-574">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="649b3-575">Weitere Informationen zur Verwendung von TLS finden Sie unter [Thread-lokalen Speicher: threadbezogene statische Felder und Datenslots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-575">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="649b3-576">Threads verwenden einen lokaler Speichermechanismus, um die Thread-spezifische Daten zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-576">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="649b3-577">Die common Language Runtime ordnet ein Array mit mehreren Slot Data Store jeder Prozess, bei der Erstellung.</span><span class="sxs-lookup"><span data-stu-id="649b3-577">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="649b3-578">Der Thread kann einen Datenslot im Datenspeicher reservieren, speichern und Abrufen eines Wert im Slot und den Slot für die Wiederverwendung nach Ablauf des Threads freigeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-578">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="649b3-579">Datenslots sind pro Thread eindeutig.</span><span class="sxs-lookup"><span data-stu-id="649b3-579">Data slots are unique per thread.</span></span> <span data-ttu-id="649b3-580">Kein anderer Thread (nicht einmal ein untergeordneter-Thread), kann diese Daten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-580">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="649b3-581">Wenn der benannte Datenslot nicht vorhanden ist, wird ein neuer Slot zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="649b3-581">If the named slot does not exist, a new slot is allocated.</span></span> <span data-ttu-id="649b3-582">Benannte Datenslots sind öffentlich und können von jedermann bearbeitet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-582">Named data slots are public and can be manipulated by anyone.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-583">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="649b3-583">This section contains two code examples.</span></span> <span data-ttu-id="649b3-584">Das erste Beispiel zeigt, wie Sie ein Feld verwenden, die mit der <xref:System.ThreadStaticAttribute> Attribut zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-584">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="649b3-585">Das zweite Beispiel zeigt, wie Sie einen Datenslot, um das gleiche tun.</span><span class="sxs-lookup"><span data-stu-id="649b3-585">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="649b3-586">**Erste Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-586">**First Example**</span></span>  
  
 <span data-ttu-id="649b3-587">Das folgende Beispiel zeigt, wie Sie ein Feld verwenden, die mit markierten <xref:System.ThreadStaticAttribute> zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-587">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="649b3-588">Diese Technik bietet eine bessere Leistung als die Technik, die im zweiten Beispiel angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-588">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="649b3-589">**Zweite Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-589">**Second Example**</span></span>  
  
 <span data-ttu-id="649b3-590">Im folgende Beispiel wird veranschaulicht, wie Sie einen benannten Datenslot, um die Thread-spezifische Informationen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-590">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Interrupt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Interrupt" />
      <MemberSignature Language="VB.NET" Value="Public Sub Interrupt ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Interrupt();" />
      <MemberSignature Language="F#" Value="member this.Interrupt : unit -&gt; unit" Usage="thread.Interrupt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-591">Unterbricht einen Thread, der sich im <see langword="WaitSleepJoin" />-Threadzustand befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-591">Interrupts a thread that is in the <see langword="WaitSleepJoin" /> thread state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-592">Wenn dieser Thread zurzeit nicht in einer warten, Standby- oder Verknüpfungszustand blockiert wird, werden sie beim Beginn des nächsten block unterbrochen.</span><span class="sxs-lookup"><span data-stu-id="649b3-592">If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</span></span>  
  
 <span data-ttu-id="649b3-593"><xref:System.Threading.ThreadInterruptedException> in den unterbrochenen THEAD, aber erst, nachdem der Thread blockiert wird ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-593"><xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks.</span></span> <span data-ttu-id="649b3-594">Wenn der Thread nie blockiert wird, wird keine Ausnahme ausgelöst und daher möglicherweise der Thread abgeschlossen, ohne jemals unterbrochen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-594">If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-595">Im folgenden Codebeispiel wird das Verhalten der einen laufenden Thread auf, wenn er unterbrochen wird, und anschließend gesperrt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-595">The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-596">Der Aufrufer verfügt nicht über die erforderliche <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-596">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-597">für erweiterte Vorgänge in Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-597">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="649b3-598">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-598">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsAlive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAlive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAlive : bool" Usage="System.Threading.Thread.IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-599">Ruft einen Wert ab, der den Ausführungsstatus des aktuellen Threads angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-599">Gets a value indicating the execution status of the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-600">
            <see langword="true" />, wenn dieser Thread gestartet und ordnungsgemäß beendet bzw. abgebrochen wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-600">
              <see langword="true" /> if this thread has been started and has not terminated normally or aborted; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBackground">
      <MemberSignature Language="C#" Value="public bool IsBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBackground" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsBackground" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBackground As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBackground { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsBackground : bool with get, set" Usage="System.Threading.Thread.IsBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-601">Ruft einen Wert ab, der angibt, ob es sich bei einem Thread um einen Hintergrundthread handelt, oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-601">Gets or sets a value indicating whether or not a thread is a background thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-602">
            <see langword="true" />, wenn dieser Thread ein Hintergrundthread ist oder zu einem solchen wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-602">
              <see langword="true" /> if this thread is or is to become a background thread; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-603">Ein Thread ist entweder ein Hintergrund- oder Vordergrundthread.</span><span class="sxs-lookup"><span data-stu-id="649b3-603">A thread is either a background thread or a foreground thread.</span></span> <span data-ttu-id="649b3-604">Hintergrundthreads sind identisch mit Vordergrundthreads, außer dass Hintergrundthreads einen Prozess beendet wird nicht verhindern.</span><span class="sxs-lookup"><span data-stu-id="649b3-604">Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</span></span> <span data-ttu-id="649b3-605">Sobald alle zu einem Prozess gehörenden Vordergrundthreads beendet wurden, beendet die common Language Runtime den Prozess an.</span><span class="sxs-lookup"><span data-stu-id="649b3-605">Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</span></span> <span data-ttu-id="649b3-606">Alle verbleibenden Hintergrundthreads werden beendet und nicht vollständig.</span><span class="sxs-lookup"><span data-stu-id="649b3-606">Any remaining background threads are stopped and do not complete.</span></span>  
  
 <span data-ttu-id="649b3-607">Standardmäßig werden die folgenden Threads im Vordergrund ausgeführt (d. h. deren <xref:System.Threading.Thread.IsBackground%2A> -Eigenschaft gibt `false`):</span><span class="sxs-lookup"><span data-stu-id="649b3-607">By default, the following threads execute in the foreground (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `false`):</span></span>  
  
-   <span data-ttu-id="649b3-608">Der primäre Thread (oder den Hauptthread der Anwendung).</span><span class="sxs-lookup"><span data-stu-id="649b3-608">The primary thread (or main application thread).</span></span>  
  
-   <span data-ttu-id="649b3-609">Alle Threads, die durch den Aufruf erstellt einen <xref:System.Threading.Thread> Klassenkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-609">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="649b3-610">Standardmäßig werden die folgenden Threads im Hintergrund ausführen (d. h. ihre <xref:System.Threading.Thread.IsBackground%2A> -Eigenschaft gibt `true`):</span><span class="sxs-lookup"><span data-stu-id="649b3-610">By default, the following threads execute in the background  (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `true`):</span></span>  
  
-   <span data-ttu-id="649b3-611">Thread Poolthreads, die einen Pool von Arbeitsthreads, die von der Laufzeit verwaltet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-611">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span> <span data-ttu-id="649b3-612">Sie können die Thread-Pool und den Zeitplan der Arbeit in Threads im Threadpool konfigurieren, mit der <xref:System.Threading.ThreadPool> Klasse.</span><span class="sxs-lookup"><span data-stu-id="649b3-612">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="649b3-613">Aufgabenbasierte asynchrone Vorgänge werden automatisch in Threads im Threadpool ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-613">Task-based asynchronous operations automatically execute on thread pool threads.</span></span>  
  
-   <span data-ttu-id="649b3-614">Alle Threads, die die verwaltete ausführungsumgebung von nicht verwaltetem Code eingeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-614">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-615">Im folgende Beispiel steht im Gegensatz zu dem Verhalten der Vordergrund-und Hintergrundthreads.</span><span class="sxs-lookup"><span data-stu-id="649b3-615">The following example contrasts the behavior of foreground and background threads.</span></span> <span data-ttu-id="649b3-616">Erstellt ein Vordergrundthread und einem Hintergrundthread.</span><span class="sxs-lookup"><span data-stu-id="649b3-616">It creates a foreground thread and a background thread.</span></span> <span data-ttu-id="649b3-617">Der Vordergrundthread erhält den Prozess bis abgeschlossen ist seine `for` Schleife und wird beendet.</span><span class="sxs-lookup"><span data-stu-id="649b3-617">The foreground thread keeps the process running until completes its `for` loop and terminates.</span></span> <span data-ttu-id="649b3-618">Allerdings wie die Ausgabe des Beispiels zeigt, da der Vordergrundthread Ausführung abgeschlossen wurde, wird der Prozess beendet, bevor der Hintergrundthread die Ausführung abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-618">However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsBackground#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsBackground#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsBackground#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-619">Der Thread ist deaktiviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-619">The thread is dead.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsThreadPoolThread">
      <MemberSignature Language="C#" Value="public bool IsThreadPoolThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadPoolThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsThreadPoolThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadPoolThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadPoolThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadPoolThread : bool" Usage="System.Threading.Thread.IsThreadPoolThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-620">Ruft einen Wert ab, der angibt, ob ein Thread zu dem verwalteten Threadpool gehört.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-620">Gets a value indicating whether or not a thread belongs to the managed thread pool.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-621">
            <see langword="true" />, wenn der Thread zu dem verwalteten Threadpool gehört, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-621">
              <see langword="true" /> if this thread belongs to the managed thread pool; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-622">Weitere Informationen finden Sie unter [der verwaltete Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-622">For more information see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-623">Im folgenden Codebeispiel wird veranschaulicht, zu bestimmen, ob ein Thread aus dem Threadpool ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-623">The following code example shows how to determine whether a thread is from the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ThreadPool" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-624">Blockiert den aufrufenden Thread, bis der durch diese Instanz dargestellte Thread beendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-624">Blocks the calling thread until the thread represented by this instance terminates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join" />
      <MemberSignature Language="VB.NET" Value="Public Sub Join ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Join();" />
      <MemberSignature Language="F#" Value="member this.Join : unit -&gt; unit" Usage="thread.Join " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-625">Blockiert den aufrufenden Thread, bis der durch diese Instanz dargestellte Thread beendet wird, während das Standard-COM- und das <see langword="SendMessage" />-Pumping fortgesetzt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-625">Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <see langword="SendMessage" /> pumping.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-626"><xref:System.Threading.Thread.Join%2A> ist eine Synchronisierungsmethode, die blockiert den aufrufenden Thread (d. h. der Thread, der die Methode aufruft), bis der Thread, dessen <xref:System.Threading.Thread.Join%2A> aufgerufen wurde abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="649b3-626"><xref:System.Threading.Thread.Join%2A> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed.</span></span> <span data-ttu-id="649b3-627">Verwenden Sie diese Methode, um sicherzustellen, dass ein Thread beendet wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-627">Use this method to ensure that a thread has been terminated.</span></span> <span data-ttu-id="649b3-628">Der Aufrufer wird auf unbestimmte Zeit blockiert, wenn der Thread nicht beendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-628">The caller will block indefinitely if the thread does not terminate.</span></span> <span data-ttu-id="649b3-629">Im folgenden Beispiel die `Thread1` thread Ruft die <xref:System.Threading.Thread.Join> -Methode der `Thread2`, bewirkt, dass `Thread1` Block bis `Thread2` wurde abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="649b3-629">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1a.cs#1)]
 [!code-vb[System.Threading.Thread.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1a.vb#1)]  
  
 <span data-ttu-id="649b3-630">Wenn der Thread bereits beendet wurde <xref:System.Threading.Thread.Join%2A> aufgerufen wird, wird die Methode sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-630">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="649b3-631">Sie sollten niemals aufrufen, die <xref:System.Threading.Thread.Join%2A> -Methode der der <xref:System.Threading.Thread> Objekt, das den aktuellen Thread aus dem aktuellen Thread darstellt.</span><span class="sxs-lookup"><span data-stu-id="649b3-631">You should never call the <xref:System.Threading.Thread.Join%2A> method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread.</span></span> <span data-ttu-id="649b3-632">Dies bewirkt, dass Ihre app nicht mehr reagiert, da der aktuelle Thread auf sich selbst beim unbegrenzt wartet,</span><span class="sxs-lookup"><span data-stu-id="649b3-632">This causes your app to hang because the current thread waits upon itself indefinitely,</span></span>  
  
 <span data-ttu-id="649b3-633">Diese Methode ändert den Zustand des aufrufenden Threads einschließen <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-633">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-634">Sie können nicht aufgerufen werden `Join` auf einen Thread, in der <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> Zustand.</span><span class="sxs-lookup"><span data-stu-id="649b3-634">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-635">Der Aufrufer hat versucht, mit einem Thread zu verknüpfen, der den Zustand <see cref="F:System.Threading.ThreadState.Unstarted" /> hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-635">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="649b3-636">Der Thread wird beim Warten unterbrochen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-636">The thread is interrupted while waiting.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Join : int -&gt; bool" Usage="thread.Join millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="649b3-637">Die Anzahl der Millisekunden, die auf das Beenden des Threads gewartet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-637">The number of milliseconds to wait for the thread to terminate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-638">Blockiert den aufrufenden Thread, bis der von dieser Instanz dargestellte Thread beendet wird, oder die festgelegte Zeit verstreicht, während das Standard-COM- und das SendMessage-Pumping fortgesetzt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-638">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-639">
            <see langword="true" />, wenn der Thread beendet wurde. <see langword="false" />, wenn der Thread nach Ablauf des vom <paramref name="millisecondsTimeout" />-Parameter angegebenen Zeitraums nicht beendet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-639">
              <see langword="true" /> if the thread has terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-640"><xref:System.Threading.Thread.Join%28System.Int32%29> ist eine Synchronisierungsmethode, die blockiert den aufrufenden Thread (d. h. der Thread, der die Methode aufruft), bis entweder der Thread, dessen <xref:System.Threading.Thread.Join%2A> Methode wird aufgerufen, abgeschlossen wurde oder das Timeoutintervall verstrichen ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-640"><xref:System.Threading.Thread.Join%28System.Int32%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="649b3-641">Im folgenden Beispiel die `Thread1` thread Ruft die <xref:System.Threading.Thread.Join> -Methode der `Thread2`, bewirkt, dass `Thread1` entweder bis zum Blockieren `Thread2` abgeschlossen wurde oder 2 Sekunden verstrichen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-641">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1b.cs#2)]
 [!code-vb[System.Threading.Thread.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1b.vb#2)]  
  
 <span data-ttu-id="649b3-642">Wenn <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> angegeben ist, für die `millisecondsTimeout` Parameter dieser Methode verhält sich genauso wie die <xref:System.Threading.Thread.Join> methodenüberladung, mit Ausnahme der zurückgegebene Wert.</span><span class="sxs-lookup"><span data-stu-id="649b3-642">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="649b3-643">Wenn der Thread bereits beendet wurde <xref:System.Threading.Thread.Join%2A> aufgerufen wird, wird die Methode sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-643">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="649b3-644">Diese Methode ändert den Zustand des aufrufenden Threads einschließen <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-644">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-645">Sie können nicht aufgerufen werden `Join` auf einen Thread, in der <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> Zustand.</span><span class="sxs-lookup"><span data-stu-id="649b3-645">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="649b3-646">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ und nicht gleich <see cref="F:System.Threading.Timeout.Infinite" /> in Millisekunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-646">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-647">Der Thread wurde nicht gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-647">The thread has not been started.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Join : TimeSpan -&gt; bool" Usage="thread.Join timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="649b3-648">Ein <see cref="T:System.TimeSpan" />-Wert, der auf den Zeitraum festgelegt ist, während dessen auf das Beenden des Threads gewartet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-648">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-649">Blockiert den aufrufenden Thread, bis der von dieser Instanz dargestellte Thread beendet wird, oder die festgelegte Zeit verstreicht, während das Standard-COM- und das SendMessage-Pumping fortgesetzt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-649">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-650">
            <see langword="true" />, wenn der Thread beendet wurde. <see langword="false" />, wenn der Thread nach Ablauf des vom <paramref name="timeout" />-Parameter angegebenen Zeitraums nicht beendet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-650">
              <see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-651"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> ist eine Synchronisierungsmethode, die blockiert den aufrufenden Thread (d. h. der Thread, der die Methode aufruft), bis entweder der Thread, dessen <xref:System.Threading.Thread.Join%2A> Methode wird aufgerufen, abgeschlossen wurde oder das Timeoutintervall verstrichen ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-651"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="649b3-652">Im folgenden Beispiel die `Thread1` thread Ruft die <xref:System.Threading.Thread.Join> -Methode der `Thread2`, bewirkt, dass `Thread1` entweder bis zum Blockieren `Thread2` abgeschlossen wurde oder 2 Sekunden verstrichen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-652">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1c.cs#3)]
 [!code-vb[System.Threading.Thread.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1c.vb#3)]  
  
 <span data-ttu-id="649b3-653">Wenn <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> für angegeben `timeout`, diese Methode verhält sich genauso wie die <xref:System.Threading.Thread.Join> methodenüberladung, mit Ausnahme der zurückgegebene Wert.</span><span class="sxs-lookup"><span data-stu-id="649b3-653">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="649b3-654">Wenn der Thread bereits beendet wurde <xref:System.Threading.Thread.Join%2A> aufgerufen wird, wird die Methode sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="649b3-654">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="649b3-655">Diese Methode ändert den Zustand des aktuellen Threads einschließen <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="649b3-655">This method changes the state of the current thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span> <span data-ttu-id="649b3-656">Sie können nicht aufgerufen werden `Join` auf einen Thread, in der <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> Zustand.</span><span class="sxs-lookup"><span data-stu-id="649b3-656">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-657">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem `TimeSpan` Wert mit dem `Join` Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-657">The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Timespan#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Timespan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Timespan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="649b3-658">Der Wert von <paramref name="timeout" /> ist negativ und nicht gleich <see cref="F:System.Threading.Timeout.Infinite" /> in Millisekunden oder größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-658">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-659">Der Aufrufer hat versucht, mit einem Thread zu verknüpfen, der den Zustand <see cref="F:System.Threading.ThreadState.Unstarted" /> hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-659">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ManagedThreadId">
      <MemberSignature Language="C#" Value="public int ManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ManagedThreadId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ManagedThreadId : int" Usage="System.Threading.Thread.ManagedThreadId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-660">Ruft einen eindeutigen Bezeichner für den aktuellen verwalteten Thread ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-660">Gets a unique identifier for the current managed thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-661">Eine Ganzzahl, die einen eindeutigen Bezeichner für diesen verwalteten Thread darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-661">An integer that represents a unique identifier for this managed thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-662">Eines Threads <xref:System.Threading.Thread.ManagedThreadId%2A> Eigenschaftswert dient zur eindeutigen Identifizierung von diesem Thread innerhalb des Prozesses.</span><span class="sxs-lookup"><span data-stu-id="649b3-662">A thread's <xref:System.Threading.Thread.ManagedThreadId%2A> property value serves to uniquely identify that thread within its process.</span></span>  
  
 <span data-ttu-id="649b3-663">Der Wert des der <xref:System.Threading.Thread.ManagedThreadId%2A> Eigenschaft ändern sich nicht im Laufe der Zeit, auch wenn nicht verwalteter Code, der die common Language Runtime hostet, den Thread als Fiber implementiert.</span><span class="sxs-lookup"><span data-stu-id="649b3-663">The value of the <xref:System.Threading.Thread.ManagedThreadId%2A> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberSignature Language="F#" Value="static member MemoryBarrier : unit -&gt; unit" Usage="System.Threading.Thread.MemoryBarrier " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-664">Der Prozessor, der den aktuellen Thread ausführt, kann Anweisungen nicht so neu anordnen, dass Speicherzugriffe vor dem Aufruf von <see cref="M:System.Threading.Thread.MemoryBarrier" /> nach Speicherzugriffen ausgeführt werden, die nach dem Aufruf von <see cref="M:System.Threading.Thread.MemoryBarrier" /> erfolgen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-664">Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-665"><xref:System.Threading.Thread.MemoryBarrier%2A> ist nur auf Systemen mit mehreren Prozessoren mit schwachen Sortierung (z. B. ein System mehrere Intel Itanium-Prozessoren) Arbeitsspeicher erforderlich.</span><span class="sxs-lookup"><span data-stu-id="649b3-665"><xref:System.Threading.Thread.MemoryBarrier%2A> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="649b3-666">Den meisten Fällen ist die C#- `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung oder der <xref:System.Threading.Monitor> Klasse bereitstellen, einfachere Möglichkeiten, um Daten zu synchronisieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-666">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Threading.Thread.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-667">Ruft den Namen des Threads ab oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-667">Gets or sets the name of the thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-668">Eine Zeichenfolge mit dem Namen des Threads, oder <see langword="null" />, wenn kein Name festgelegt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-668">A string containing the name of the thread, or <see langword="null" /> if no name was set.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-669">Diese Eigenschaft ist die Write-nachdem.</span><span class="sxs-lookup"><span data-stu-id="649b3-669">This property is write-once.</span></span> <span data-ttu-id="649b3-670">Da der Standardwert eines Threads <xref:System.Threading.Thread.Name%2A> Eigenschaft `null`, können Sie bestimmen, ob ein Name bereits explizit an den Thread zugewiesen wurde durch einen Vergleich mit `null`.</span><span class="sxs-lookup"><span data-stu-id="649b3-670">Because the default value of a thread's <xref:System.Threading.Thread.Name%2A> property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.</span></span>  
  
 <span data-ttu-id="649b3-671">Die zugewiesene Zeichenfolge die <xref:System.Threading.Thread.Name%2A> Eigenschaft kann ein Unicode-Zeichen enthalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-671">The string assigned to the <xref:System.Threading.Thread.Name%2A> property can include any Unicode character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-672">Das folgende Beispiel zeigt, wie Sie einen Thread zu benennen.</span><span class="sxs-lookup"><span data-stu-id="649b3-672">The following example shows how to name a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Name#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Name#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Name#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Name/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="649b3-673">Ein SET-Vorgang wurde angefordert, aber die <see langword="Name" />-Eigenschaft wurde bereits festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-673">A set operation was requested, but the <see langword="Name" /> property has already been set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As ThreadPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadPriority Priority { System::Threading::ThreadPriority get(); void set(System::Threading::ThreadPriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Threading.ThreadPriority with get, set" Usage="System.Threading.Thread.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-674">Ruft einen Wert ab, der die Planungspriorität eines Threads angibt, oder legt diesen fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-674">Gets or sets a value indicating the scheduling priority of a thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-675">Einer der <see cref="T:System.Threading.ThreadPriority" />-Werte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-675">One of the <see cref="T:System.Threading.ThreadPriority" /> values.</span>
          </span>
          <span data-ttu-id="649b3-676">Der Standardwert ist <see cref="F:System.Threading.ThreadPriority.Normal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-676">The default value is <see cref="F:System.Threading.ThreadPriority.Normal" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-677">Ein Thread kann eines der folgenden Priorität zugewiesen werden <xref:System.Threading.ThreadPriority> Werte:</span><span class="sxs-lookup"><span data-stu-id="649b3-677">A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:</span></span>  
  
-   `Highest`  
  
-   `AboveNormal`  
  
-   `Normal`  
  
-   `BelowNormal`  
  
-   `Lowest`  
  
 <span data-ttu-id="649b3-678">Betriebssysteme sind nicht erforderlich, die Priorität eines Threads zu berücksichtigen.</span><span class="sxs-lookup"><span data-stu-id="649b3-678">Operating systems are not required to honor the priority of a thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-679">Das folgende Beispiel zeigt das Ergebnis einer Änderung der Priorität eines Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-679">The following example shows the result of changing the priority of a thread.</span></span> <span data-ttu-id="649b3-680">Drei Threads erstellt wurden, die Priorität eines Threads wird festgelegt, um <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, und die Priorität einer Sekunde auf <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-680">Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, and the priority of a second is set to <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-681">Jeder Thread erhöht eine Variable in einem `while` Schleife und führt für einen bestimmten Zeitraum.</span><span class="sxs-lookup"><span data-stu-id="649b3-681">Each thread increments a variable in a `while` loop and runs for a set time.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPriority#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.ThreadPriority/cs/Example1.cs#1)]
 [!code-vb[System.Threading.ThreadPriority#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.ThreadPriority/vb/Example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-682">Der Thread hat einen Endzustand erreicht, z. B. <see cref="F:System.Threading.ThreadState.Aborted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-682">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="649b3-683">Der für eine Set-Operation angegebene Wert ist kein gültiger <see cref="T:System.Threading.ThreadPriority" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-683">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority" /> value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ThreadPriority" />
      </Docs>
    </Member>
    <Member MemberName="ResetAbort">
      <MemberSignature Language="C#" Value="public static void ResetAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.ResetAbort" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetAbort();" />
      <MemberSignature Language="F#" Value="static member ResetAbort : unit -&gt; unit" Usage="System.Threading.Thread.ResetAbort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-684">Bricht ein <see cref="M:System.Threading.Thread.Abort(System.Object)" /> ab, das für den aktuellen Thread angefordert wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-684">Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-685">Diese Methode kann nur von Code mit den entsprechenden Berechtigungen aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-685">This method can only be called by code with the proper permissions.</span></span>  
  
 <span data-ttu-id="649b3-686">Wenn ein Aufruf ausgelöst wird, um `Abort` um einen Thread zu beenden, löst das System eine <xref:System.Threading.ThreadAbortException>.</span><span class="sxs-lookup"><span data-stu-id="649b3-686">When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="649b3-687">`ThreadAbortException` ist eine besondere Ausnahme, die vom Anwendungscode abgefangen werden kann, aber am Ende des Catch-Blocks erneut ausgelöst wird, wenn `ResetAbort` aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-687">`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called.</span></span> <span data-ttu-id="649b3-688">`ResetAbort` Bricht die Anforderung abbricht, ab und verhindert, dass die `ThreadAbortException` aus Beenden des Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-688">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span>  
  
 <span data-ttu-id="649b3-689">Finden Sie unter <xref:System.Threading.ThreadAbortException> ein Beispiel zur Veranschaulichung von Aufrufen der `ResetAbort` Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-689">See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="649b3-690">Nur .NET Core: Dieser Member wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-690">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-691">
            <see langword="Abort" /> wurde für den aktuellen Thread nicht aufgerufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-691">
              <see langword="Abort" /> was not invoked on the current thread.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-692">Der Aufrufer verfügt nicht über die erforderlichen Sicherheitsberechtigungen für den aktuellen Thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-692">The caller does not have the required security permission for the current thread.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-693">für erweiterte Vorgänge in Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-693">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="649b3-694">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-694">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="thread.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-695">Nimmt die Ausführung eines angehaltenen Threads wieder auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-695">Resumes a thread that has been suspended.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="649b3-696">Verwenden Sie nicht die <xref:System.Threading.Thread.Suspend%2A> und <xref:System.Threading.Thread.Resume%2A> Methoden zum Synchronisieren der Aktivitäten von Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-696">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="649b3-697">Sie haben keine Möglichkeit festzustellen, welchen Code ein Thread ausgeführt wird, wenn Sie ihn anhalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-697">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="649b3-698">Wenn Sie einen Thread anhalten, während es bei der Auswertung von Sicherheitsberechtigungen Sperren aufrechterhält, andere threads in der <xref:System.AppDomain> blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-698">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="649b3-699">Wenn Sie einen Thread anhalten, während der Konstruktor einer Klasse ausgeführt wird, andere threads in der <xref:System.AppDomain> , die versuchen, zu verwenden, der Klasse werden blockiert.</span><span class="sxs-lookup"><span data-stu-id="649b3-699">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="649b3-700">Deadlocks können sehr leicht auftreten.</span><span class="sxs-lookup"><span data-stu-id="649b3-700">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="649b3-701">Nur .NET Core: Dieser Member wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-701">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-702">Der Thread wurde nicht gestartet, ist deaktiviert oder befindet sich nicht im angehaltenen Zustand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-702">The thread has not been started, is dead, or is not in the suspended state.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-703">Der Aufrufer verfügt nicht über die erforderliche <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-703">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-704">für erweiterte Vorgänge in Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-704">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="649b3-705">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-705">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetApartmentState">
      <MemberSignature Language="C#" Value="public void SetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApartmentState (state As ApartmentState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.SetApartmentState : System.Threading.ApartmentState -&gt; unit" Usage="thread.SetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="649b3-706">Der neue Apartmentzustand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-706">The new apartment state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-707">Legt den Apartmentzustand eines Threads fest, bevor dieser gestartet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-707">Sets the apartment state of a thread before it is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-708">Neue Threads werden als initialisiert <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> Wenn ihr Apartmentzustand nicht festgelegt wurde, bevor sie gestartet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-708">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="649b3-709">Apartmentzustand muss festgelegt werden, bevor ein Thread gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-709">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-710">Thread der hauptanwendung wird initialisiert, um <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> standardmäßig.</span><span class="sxs-lookup"><span data-stu-id="649b3-710">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="649b3-711">Die einzige Möglichkeit, legen Sie den Apartmentzustand der Hauptanwendungsthread, dass <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> ist die Anwendung die <xref:System.STAThreadAttribute> -Attribut auf die Einstiegspunktmethode.</span><span class="sxs-lookup"><span data-stu-id="649b3-711">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="649b3-712">Die <xref:System.Threading.Thread.SetApartmentState%2A> -Methode zusammen mit den <xref:System.Threading.Thread.GetApartmentState%2A> Methode und die <xref:System.Threading.Thread.TrySetApartmentState%2A> Methode ersetzt die <xref:System.Threading.Thread.ApartmentState%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-712">The <xref:System.Threading.Thread.SetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-713">Im folgenden Codebeispiel wird veranschaulicht, die <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, und <xref:System.Threading.Thread.TrySetApartmentState%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="649b3-713">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="649b3-714">Das Codebeispiel erstellt einen Thread.</span><span class="sxs-lookup"><span data-stu-id="649b3-714">The code example creates a thread.</span></span> <span data-ttu-id="649b3-715">Vor dem Starten des Threads <xref:System.Threading.Thread.GetApartmentState%2A> zeigt den ersten <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> Zustand und <xref:System.Threading.Thread.SetApartmentState%2A> ändert den Zustand in <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-715">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-716">Die <xref:System.Threading.Thread.TrySetApartmentState%2A> dann Methodenrückgabe `false` beim Versuch, den Status zu ändern, <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> da bereits der Apartmentzustand festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-716">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="649b3-717">Bei der Ausführung des gleichen Vorgangs mit <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> würde ausgelöst wurden.</span><span class="sxs-lookup"><span data-stu-id="649b3-717">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="649b3-718">Nachdem der Thread gestartet wurde, die <xref:System.Threading.Thread.TrySetApartmentState%2A> Methode erneut verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-718">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="649b3-719">Sie löst dieses Mal <xref:System.Threading.ThreadStateException> , da der Thread wurde bereits gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-719">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="649b3-720">Nur .NET Core: Dieser Member wird auf den Plattformen macOS und Linux nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-720">.NET Core only: This member is not supported on the macOS and Linux platforms.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="649b3-721">
            <paramref name="state" /> ist kein gültiger Apartmentzustand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-721">
              <paramref name="state" /> is not a valid apartment state.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-722">Der Thread wurde bereits gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-722">The thread has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="649b3-723">Der Apartmentzustand wurde bereits initialisiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-723">The apartment state has already been initialized.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCompressedStack">
      <MemberSignature Language="C#" Value="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCompressedStack(class System.Threading.CompressedStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCompressedStack (stack As CompressedStack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCompressedStack(System::Threading::CompressedStack ^ stack);" />
      <MemberSignature Language="F#" Value="member this.SetCompressedStack : System.Threading.CompressedStack -&gt; unit" Usage="thread.SetCompressedStack stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Threading.CompressedStack" />
      </Parameters>
      <Docs>
        <param name="stack">
          <span data-ttu-id="649b3-724">Das <see cref="T:System.Threading.CompressedStack" />-Objekt, das für den aktuellen Thread übernommen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-724">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-725">Übernimmt einen erfassten <see cref="T:System.Threading.CompressedStack" /> für den aktuellen Thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-725">Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-726">Diese Methode wird nicht mehr unterstützt.</span><span class="sxs-lookup"><span data-stu-id="649b3-726">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="649b3-727">In allen Fällen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-727">In all cases.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="649b3-728">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-728">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="649b3-729">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-729">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public static void SetData (LocalDataStoreSlot slot, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetData(class System.LocalDataStoreSlot slot, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetData (slot As LocalDataStoreSlot, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetData(LocalDataStoreSlot ^ slot, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="static member SetData : LocalDataStoreSlot * obj -&gt; unit" Usage="System.Threading.Thread.SetData (slot, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="slot">
          <span data-ttu-id="649b3-730">Der <see cref="T:System.LocalDataStoreSlot" />, in dem der Wert festgelegt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-730">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="649b3-731">Der festzulegende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-731">The value to be set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-732">Legt die Daten im angegebenen Slot auf den derzeit ausgeführten Thread und für die aktuelle Domäne des betreffenden Threads fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-732">Sets the data in the specified slot on the currently running thread, for that thread's current domain.</span>
          </span>
          <span data-ttu-id="649b3-733">Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-733">For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-734">.NET Framework bietet zwei Mechanismen für die Verwendung von lokalen Threadspeicher (TLS): threadbezogene statische Felder (d. h. die Felder, die mit markiert sind die <xref:System.ThreadStaticAttribute> Attribut) und Datenslots.</span><span class="sxs-lookup"><span data-stu-id="649b3-734">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="649b3-735">Threadbezogene statische Felder bieten viel bessere Leistung als Datenslots, und aktivieren die typüberprüfung zur Kompilierzeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-735">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="649b3-736">Weitere Informationen zur Verwendung von TLS finden Sie unter [Thread-lokalen Speicher: threadbezogene statische Felder und Datenslots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-736">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="649b3-737">Threads verwenden einen lokaler Speichermechanismus, um die Thread-spezifische Daten zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-737">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="649b3-738">Die common Language Runtime ordnet ein Array mit mehreren Slot Data Store jeder Prozess, bei der Erstellung.</span><span class="sxs-lookup"><span data-stu-id="649b3-738">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="649b3-739">Der Thread kann einen Datenslot im Datenspeicher reservieren, speichern und Abrufen eines Wert im Slot und den Slot für die Wiederverwendung freigeben, nachdem die Threadprozedur beendet und die <xref:System.Threading.Thread> Objekt wurde durch die Garbagecollection freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-739">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection.</span></span> <span data-ttu-id="649b3-740">Datenslots sind pro Thread eindeutig.</span><span class="sxs-lookup"><span data-stu-id="649b3-740">Data slots are unique per thread.</span></span> <span data-ttu-id="649b3-741">Kein anderer Thread (nicht einmal ein untergeordneter-Thread), kann diese Daten abzurufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-741">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-742"><xref:System.Threading.Thread.SetData%2A> ist eine `Shared` -Methode, die immer auf den derzeit ausgeführten Thread angewendet wird, auch wenn Sie mit einer Variablen, die auf einem anderen Thread aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="649b3-742"><xref:System.Threading.Thread.SetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="649b3-743">Um Verwirrung zu vermeiden, verwenden Sie den Namen der Klasse beim Aufrufen von `Shared` Methoden: `Thread.SetData(testSlot, "test data")`.</span><span class="sxs-lookup"><span data-stu-id="649b3-743">To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, "test data")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-744">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="649b3-744">This section contains two code examples.</span></span> <span data-ttu-id="649b3-745">Das erste Beispiel zeigt, wie Sie ein Feld verwenden, die mit der <xref:System.ThreadStaticAttribute> Attribut zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-745">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="649b3-746">Das zweite Beispiel zeigt, wie Sie einen Datenslot, um das gleiche tun.</span><span class="sxs-lookup"><span data-stu-id="649b3-746">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="649b3-747">**Erste Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-747">**First Example**</span></span>  
  
 <span data-ttu-id="649b3-748">Das folgende Beispiel zeigt, wie Sie ein Feld verwenden, die mit markierten <xref:System.ThreadStaticAttribute> zum Speichern von Thread-spezifische Informationen.</span><span class="sxs-lookup"><span data-stu-id="649b3-748">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="649b3-749">Diese Technik bietet eine bessere Leistung als die Technik, die im zweiten Beispiel angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-749">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="649b3-750">**Zweite Beispiel**</span><span class="sxs-lookup"><span data-stu-id="649b3-750">**Second Example**</span></span>  
  
 <span data-ttu-id="649b3-751">Im folgende Beispiel wird veranschaulicht, wie Sie einen benannten Datenslot, um die Thread-spezifische Informationen zu speichern.</span><span class="sxs-lookup"><span data-stu-id="649b3-751">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sleep">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-752">Hält den aktuellen Thread während des angegebenen Zeitraums an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-752">Suspends the current thread for the specified amount of time.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : int -&gt; unit" Usage="System.Threading.Thread.Sleep millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="649b3-753">Die Anzahl von Millisekunden, die der Thread angehalten wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-753">The number of milliseconds for which the thread is suspended.</span>
          </span>
          <span data-ttu-id="649b3-754">Wenn der Wert des <c>millisecondsTimeout</c>-Arguments 0 (null) lautet, gibt der Thread den Rest seines Zeitanteils an einen beliebigen Thread mit gleicher Priorität ab, der für die Ausführung bereit ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-754">If the value of the <c>millisecondsTimeout</c> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span>
          </span>
          <span data-ttu-id="649b3-755">Sind keine anderen Threads mit gleicher Priorität vorhanden, die ausgeführt werden können, wird die Ausführung des aktuellen Threads nicht angehalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-755">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-756">Hält den aktuellen Thread für die angegebene Anzahl von Millisekunden an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-756">Suspends the current thread for the specified number of milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-757">Der Thread wird nicht vom Betriebssystem für die angegebene Zeitdauer für die Ausführung geplant werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-757">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="649b3-758">Diese Methode ändert den Zustand des Threads, sodass <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="649b3-758">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="649b3-759">Sie können angeben, <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> für die `millisecondsTimeout` Parameter, um das Anhalten des Threads auf unbestimmte Zeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-759">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the `millisecondsTimeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="649b3-760">Allerdings wird empfohlen, dass Sie andere verwenden <xref:System.Threading?displayProperty=nameWithType> Klassen wie z. B. <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, oder <xref:System.Threading.Semaphore> stattdessen zusammenarbeitsszenarien konzipiert sind Threads oder Ressourcen verwalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-760">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="649b3-761">Die System-Zeiteinheiten in einer bestimmten Rate wird aufgerufen, die Auflösung der Uhr.</span><span class="sxs-lookup"><span data-stu-id="649b3-761">The system clock ticks at a specific rate called the clock resolution.</span></span> <span data-ttu-id="649b3-762">Die tatsächliche timeoutsekunden möglicherweise nicht genau dem angegebenen Timeout, da das angegebene Timeout mit Teilstrichen berichtsausführung die Verarbeitung angepasst wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-762">The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</span></span> <span data-ttu-id="649b3-763">Weitere Informationen zur Auflösung der Uhr und die Wartezeit, finden Sie unter den [Standbymodus Funktion](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) Thema.</span><span class="sxs-lookup"><span data-stu-id="649b3-763">For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic.</span></span> <span data-ttu-id="649b3-764">Diese Methode ruft die [Standbymodus Funktion](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) aus dem Windows-System-APIs.</span><span class="sxs-lookup"><span data-stu-id="649b3-764">This method calls the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) from the Windows system APIs.</span></span>  
  
 <span data-ttu-id="649b3-765">Diese Methode führt keine standardmäßigen COM- und SendMessage-Pumping fortgesetzt.</span><span class="sxs-lookup"><span data-stu-id="649b3-765">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-766">Bei Bedarf in einem Thread, die in den Standbymodus <xref:System.STAThreadAttribute>, aber Sie möchten Ausführen von standardmäßigen COM- und SendMessage-Pumping fortgesetzt, sollten eine der Überladungen der der <xref:System.Threading.Thread.Join%2A> Methode, die ein Timeoutintervall angibt.</span><span class="sxs-lookup"><span data-stu-id="649b3-766">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-767">Im folgenden Beispiel wird die <xref:System.Threading.Thread.Sleep%2A> Methode, um den Hauptthread der Anwendung zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-767">The following example uses the <xref:System.Threading.Thread.Sleep%2A> method to block the application's main thread.</span></span>  
  
 [!code-cpp[Thread.Sleep#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep/cs/example.cs#1)]
 [!code-vb[Thread.Sleep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="649b3-768">Der Timeoutwert ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-768">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : TimeSpan -&gt; unit" Usage="System.Threading.Thread.Sleep timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="649b3-769">Der Zeitraum, während dessen der Thread angehalten wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-769">The amount of time for which the thread is suspended.</span>
          </span>
          <span data-ttu-id="649b3-770">Wenn der Wert des <c>millisecondsTimeout</c>-Arguments <see cref="F:System.TimeSpan.Zero" /> lautet, gibt der Thread den Rest seines Zeitanteils an einen beliebigen Thread mit gleicher Priorität ab, der für die Ausführung bereit ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-770">If the value of the <c>millisecondsTimeout</c> argument is <see cref="F:System.TimeSpan.Zero" />, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span>
          </span>
          <span data-ttu-id="649b3-771">Sind keine anderen Threads mit gleicher Priorität vorhanden, die ausgeführt werden können, wird die Ausführung des aktuellen Threads nicht angehalten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-771">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-772">Hält den aktuellen Thread während des angegebenen Zeitraums an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-772">Suspends the current thread for the specified amount of time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-773">Der Thread wird nicht vom Betriebssystem für die angegebene Zeitdauer für die Ausführung geplant werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-773">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="649b3-774">Diese Methode ändert den Zustand des Threads, sodass <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="649b3-774">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="649b3-775">Sie können angeben, <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> für die `timeout` Parameter, um das Anhalten des Threads auf unbestimmte Zeit.</span><span class="sxs-lookup"><span data-stu-id="649b3-775">You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> for the `timeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="649b3-776">Allerdings wird empfohlen, dass Sie andere verwenden <xref:System.Threading?displayProperty=nameWithType> Klassen wie z. B. <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, oder <xref:System.Threading.Semaphore> stattdessen zusammenarbeitsszenarien konzipiert sind Threads oder Ressourcen verwalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-776">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="649b3-777">Diese Überladung der <xref:System.Threading.Thread.Sleep%2A> verwendet die Gesamtanzahl von ganzen Millisekunden in `timeout`.</span><span class="sxs-lookup"><span data-stu-id="649b3-777">This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`.</span></span> <span data-ttu-id="649b3-778">Bruchteile von Millisekunden werden verworfen.</span><span class="sxs-lookup"><span data-stu-id="649b3-778">Fractional milliseconds are discarded.</span></span>  
  
 <span data-ttu-id="649b3-779">Diese Methode führt keine standardmäßigen COM- und SendMessage-Pumping fortgesetzt.</span><span class="sxs-lookup"><span data-stu-id="649b3-779">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-780">Bei Bedarf in einem Thread, die in den Standbymodus <xref:System.STAThreadAttribute>, aber Sie möchten Ausführen von standardmäßigen COM- und SendMessage-Pumping fortgesetzt, sollten eine der Überladungen der der <xref:System.Threading.Thread.Join%2A> Methode, die ein Timeoutintervall angibt.</span><span class="sxs-lookup"><span data-stu-id="649b3-780">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-781">Im folgenden Beispiel wird die <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> -methodenüberladung, um den Hauptthread der Anwendung zwei Sekunden jedes Mal fünf Mal blockieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-781">The following example uses the <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> method overload to block the application's main thread five times, for two seconds each time.</span></span>  
  
 [!code-cpp[Thread.Sleep_TimeSpan#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep_timespan/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep_TimeSpan#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep_timespan/cs/example.cs#1)]
 [!code-vb[Thread.Sleep_TimeSpan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep_timespan/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="649b3-782">Der Wert von <paramref name="timeout" /> ist negativ und nicht gleich <see cref="F:System.Threading.Timeout.Infinite" /> in Millisekunden oder größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-782">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SpinWait">
      <MemberSignature Language="C#" Value="public static void SpinWait (int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinWait(int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SpinWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinWait (iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinWait(int iterations);" />
      <MemberSignature Language="F#" Value="static member SpinWait : int -&gt; unit" Usage="System.Threading.Thread.SpinWait iterations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="iterations">
          <span data-ttu-id="649b3-783">Eine 32-Bit-Ganzzahl mit Vorzeichen, die den Zeitraum definiert, den ein Thread warten soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-783">A 32-bit signed integer that defines how long a thread is to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-784">Veranlasst, dass ein Thread so oft wartet, wie vom <paramref name="iterations" />-Parameter definiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-784">Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-785">Die <xref:System.Threading.Thread.SpinWait%2A> Methode eignet sich für die Implementierung von Sperren.</span><span class="sxs-lookup"><span data-stu-id="649b3-785">The <xref:System.Threading.Thread.SpinWait%2A> method is useful for implementing locks.</span></span> <span data-ttu-id="649b3-786">Klassen in .NET Framework, z. B. <xref:System.Threading.Monitor> und <xref:System.Threading.ReaderWriterLock>, verwenden Sie diese Methode intern.</span><span class="sxs-lookup"><span data-stu-id="649b3-786">Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally.</span></span> <span data-ttu-id="649b3-787"><xref:System.Threading.Thread.SpinWait%2A> setzt im Wesentlichen den Prozessor in einer sehr kurzen Schleife mit der Zahl der Schleifen, die gemäß der `iterations` Parameter.</span><span class="sxs-lookup"><span data-stu-id="649b3-787"><xref:System.Threading.Thread.SpinWait%2A> essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter.</span></span> <span data-ttu-id="649b3-788">Die Dauer des Wartevorgangs hängt daher von der Geschwindigkeit des Prozessors.</span><span class="sxs-lookup"><span data-stu-id="649b3-788">The duration of the wait therefore depends on the speed of the processor.</span></span>  
  
 <span data-ttu-id="649b3-789">Vergleichen Sie dies mit der <xref:System.Threading.Thread.Sleep%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="649b3-789">Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method.</span></span> <span data-ttu-id="649b3-790">Ein Thread, der Aufrufe <xref:System.Threading.Thread.Sleep%2A> führt zu den Rest der seiner aktuellen Segment der Prozessorzeit, selbst wenn das angegebene Intervall auf 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-790">A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero.</span></span> <span data-ttu-id="649b3-791">Angeben eines Intervalls ungleich NULL für <xref:System.Threading.Thread.Sleep%2A> unberücksichtigt bleiben sollen, durch den Threadplaner den Thread entfernt, bis das Zeitintervall verstrichen ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-791">Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</span></span>  
  
 <span data-ttu-id="649b3-792"><xref:System.Threading.Thread.SpinWait%2A> ist nicht für normale Anwendungen in der Regel sinnvoll.</span><span class="sxs-lookup"><span data-stu-id="649b3-792"><xref:System.Threading.Thread.SpinWait%2A> is not generally useful for ordinary applications.</span></span> <span data-ttu-id="649b3-793">In den meisten Fällen sollten Sie die von .NET Framework bereitgestellten Synchronisierungsklassen verwenden; Rufen Sie z. B. <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> oder eine Anweisung, die umschließt <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in c# oder `SyncLock` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="649b3-793">In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in C# or `SyncLock` in Visual Basic).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="649b3-794">Stellen Sie in dem seltenen Fall, in denen es empfiehlt sich zum Vermeiden von eines Kontextwechsel, z. B., wenn Sie wissen, dass eine statusänderung bevorsteht, einen Aufruf der <xref:System.Threading.Thread.SpinWait%2A> -Methode in der Schleife.</span><span class="sxs-lookup"><span data-stu-id="649b3-794">In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <xref:System.Threading.Thread.SpinWait%2A> method in your loop.</span></span> <span data-ttu-id="649b3-795">Der Code <xref:System.Threading.Thread.SpinWait%2A> führt wurde entwickelt, um Probleme zu vermeiden, die auf Computern mit mehreren Prozessoren auftreten können.</span><span class="sxs-lookup"><span data-stu-id="649b3-795">The code <xref:System.Threading.Thread.SpinWait%2A> executes is designed to prevent problems that can occur on computers with multiple processors.</span></span> <span data-ttu-id="649b3-796">Auf Computern mit mehreren Intel-Prozessoren mit Hyper-Threading-Technologie beispielsweise <xref:System.Threading.Thread.SpinWait%2A> Prozessor verhungern in bestimmten Situationen verhindert.</span><span class="sxs-lookup"><span data-stu-id="649b3-796">For example, on computers with multiple Intel processors employing Hyper-Threading technology, <xref:System.Threading.Thread.SpinWait%2A> prevents processor starvation in certain situations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-797">Bewirkt, dass die Ausführung eines Threads geplant wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-797">Causes a thread to be scheduled for execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="thread.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-798">Weist das Betriebssystem an, den Zustand der aktuellen Instanz in <see cref="F:System.Threading.ThreadState.Running" /> zu ändern.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-798">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-799">Sobald ein Thread die <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> aufweist, das Betriebssystem für die Ausführung planen.</span><span class="sxs-lookup"><span data-stu-id="649b3-799">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="649b3-800">Der Thread beginnt in der ersten Zeile der Methode, dargestellt durch die <xref:System.Threading.ThreadStart> oder <xref:System.Threading.ParameterizedThreadStart> -Delegaten an den Threadkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-800">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="649b3-801">Beachten Sie, dass der Aufruf von <xref:System.Threading.Thread.Start%2A> den aufrufenden Thread nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="649b3-801">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-802">Wenn diese Überladung, mit einem Thread erstellt verwendet wird, mit einer <xref:System.Threading.ParameterizedThreadStart> zu delegieren, `null` übergeben wird, an die Methode, die vom Thread ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="649b3-802">If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.</span></span>  
  
 <span data-ttu-id="649b3-803">Sobald der Thread beendet wird, es kann nicht neu gestartet werden mit einem weiteren Aufruf von `Start`.</span><span class="sxs-lookup"><span data-stu-id="649b3-803">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-804">Das folgende Beispiel erstellt und startet einen Thread.</span><span class="sxs-lookup"><span data-stu-id="649b3-804">The following example creates and starts a thread.</span></span>  
  
 [!code-cpp[ThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadStart/CPP/threadstart.cpp#1)]
 [!code-csharp[ThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/CS/threadstart.cs#1)]
 [!code-vb[ThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadStart/VB/threadstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-805">Der Thread wurde bereits gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-805">The thread has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="649b3-806">Es ist nicht genügend Speicher zum Starten dieses Threads verfügbar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-806">There is not enough memory available to start this thread.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.Start : obj -&gt; unit" Usage="thread.Start parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="649b3-807">Ein Objekt mit Daten, die von der vom Thread ausgeführten Methode verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-807">An object that contains data to be used by the method the thread executes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-808">Bewirkt, dass das Betriebssystem den Zustand der aktuellen Instanz in <see cref="F:System.Threading.ThreadState.Running" /> ändert, und stellt optional ein Objekt mit Daten bereit, die von der vom Thread ausgeführten Methode verwendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-808">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-809">Sobald ein Thread die <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> aufweist, das Betriebssystem für die Ausführung planen.</span><span class="sxs-lookup"><span data-stu-id="649b3-809">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="649b3-810">Der Thread beginnt in der ersten Zeile der Methode, dargestellt durch die <xref:System.Threading.ThreadStart> oder <xref:System.Threading.ParameterizedThreadStart> -Delegaten an den Threadkonstruktor.</span><span class="sxs-lookup"><span data-stu-id="649b3-810">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="649b3-811">Beachten Sie, dass der Aufruf von <xref:System.Threading.Thread.Start%2A> den aufrufenden Thread nicht blockiert.</span><span class="sxs-lookup"><span data-stu-id="649b3-811">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
 <span data-ttu-id="649b3-812">Sobald der Thread beendet wird, es kann nicht neu gestartet werden mit einem weiteren Aufruf von `Start`.</span><span class="sxs-lookup"><span data-stu-id="649b3-812">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
 <span data-ttu-id="649b3-813">Diese Überladung und <xref:System.Threading.ParameterizedThreadStart> Delegaten erleichtern Ihnen die Daten an eine Threadprozedur zu übergeben, aber das Verfahren ist nicht typsicher, da jedes beliebige Objekt an diese Überladung übergeben werden kann.</span><span class="sxs-lookup"><span data-stu-id="649b3-813">This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</span></span> <span data-ttu-id="649b3-814">Eine stabilere Möglichkeit, Daten an eine Threadprozedur übergeben werden sowohl die Threadprozedur und die Datenfelder in einer Worker-Objekt eingefügt.</span><span class="sxs-lookup"><span data-stu-id="649b3-814">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="649b3-815">Weitere Informationen finden Sie unter [Erstellen von Threads und übergeben von Daten zur Startzeit](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="649b3-815">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-816">Das folgende Beispiel erstellt eine <xref:System.Threading.ParameterizedThreadStart> Delegat mit einer statischen Methode und eine Instanzmethode handeln.</span><span class="sxs-lookup"><span data-stu-id="649b3-816">The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-817">Der Thread wurde bereits gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-817">The thread has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="649b3-818">Es ist nicht genügend Speicher zum Starten dieses Threads verfügbar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-818">There is not enough memory available to start this thread.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="649b3-819">Dieser Thread wurde mithilfe eines <see cref="T:System.Threading.ThreadStart" />-Delegaten anstelle eines <see cref="T:System.Threading.ParameterizedThreadStart" />-Delegaten erstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-819">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend();" />
      <MemberSignature Language="F#" Value="member this.Suspend : unit -&gt; unit" Usage="thread.Suspend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-820">Hält den Thread an. Hat keine Auswirkungen, wenn der Thread bereits angehalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-820">Either suspends the thread, or if the thread is already suspended, has no effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-821">Wenn der Thread bereits angehalten ist, hat diese Methode keine Auswirkungen.</span><span class="sxs-lookup"><span data-stu-id="649b3-821">If the thread is already suspended, this method has no effect.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="649b3-822">Verwenden Sie nicht die <xref:System.Threading.Thread.Suspend%2A> und <xref:System.Threading.Thread.Resume%2A> Methoden zum Synchronisieren der Aktivitäten von Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-822">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="649b3-823">Sie haben keine Möglichkeit festzustellen, welchen Code ein Thread ausgeführt wird, wenn Sie ihn anhalten.</span><span class="sxs-lookup"><span data-stu-id="649b3-823">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="649b3-824">Wenn Sie einen Thread anhalten, während es bei der Auswertung von Sicherheitsberechtigungen Sperren aufrechterhält, andere threads in der <xref:System.AppDomain> blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-824">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="649b3-825">Wenn Sie einen Thread anhalten, während der Konstruktor einer Klasse ausgeführt wird, andere threads in der <xref:System.AppDomain> , die versuchen, zu verwenden, der Klasse werden blockiert.</span><span class="sxs-lookup"><span data-stu-id="649b3-825">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="649b3-826">Deadlocks können sehr leicht auftreten.</span><span class="sxs-lookup"><span data-stu-id="649b3-826">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="649b3-827">Nur .NET Core: Dieser Member wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-827">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-828">Der Thread wurde nicht gestartet oder reagiert nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-828">The thread has not been started or is dead.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="649b3-829">Der Aufrufer verfügt nicht über die erforderliche <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-829">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="649b3-830">für erweiterte Vorgänge in Threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-830">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="649b3-831">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-831">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Thread.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Thread::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="649b3-832">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-832">Reserved for future use.</span>
          </span>
          <span data-ttu-id="649b3-833">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-833">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="649b3-834">Das übergebene Array von zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-834">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="649b3-835">Die Anzahl der zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-835">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="649b3-836">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-836">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="649b3-837">Das vom Aufrufer zugewiesene Array, das die IDs entsprechend den Namen empfängt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-837">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-838">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-838">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-839">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-839">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649b3-840">Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="649b3-840">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="649b3-841">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-841">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Thread.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="649b3-842">Die zurückzugebenden Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-842">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="649b3-843">Der Gebietsschemabezeichner für die Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-843">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="649b3-844">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-844">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-845">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-845">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-846">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-846">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649b3-847">Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="649b3-847">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="649b3-848">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-848">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Thread.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="649b3-849">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-849">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-850">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-850">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-851">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-851">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649b3-852">Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="649b3-852">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="649b3-853">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-853">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.Invoke">
      <MemberSignature Language="C#" Value="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Thread.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Thread::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="649b3-854">Bezeichnet den Member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-854">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="649b3-855">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-855">Reserved for future use.</span>
          </span>
          <span data-ttu-id="649b3-856">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-856">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="649b3-857">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-857">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="649b3-858">Flags, die den Kontext des Aufrufs beschreiben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-858">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="649b3-859">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-859">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="649b3-860">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-860">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="649b3-861">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-861">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="649b3-862">Der Index des ersten Arguments mit einem Fehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-862">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-863">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-863">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-864">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-864">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649b3-865">Weitere Informationen zu `IDispatch::Invoke`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="649b3-865">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="649b3-866">Spät gebundener Zugriff mithilfe der <c>IDispatch</c>-Schnittstelle in COM wird nicht unterstützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-866">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadState ThreadState { System::Threading::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Threading.ThreadState" Usage="System.Threading.Thread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-867">Ruft einen Wert ab, der die Zustände des aktuellen Threads enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-867">Gets a value containing the states of the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="649b3-868">Einer der <see cref="T:System.Threading.ThreadState" />-Werte, der den Zustand des aktuellen Threads angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-868">One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread.</span>
          </span>
          <span data-ttu-id="649b3-869">Der Anfangswert ist <see langword="Unstarted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-869">The initial value is <see langword="Unstarted" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-870">Die <xref:System.Threading.Thread.ThreadState%2A> Eigenschaft enthält spezifischere Informationen als die <xref:System.Threading.Thread.IsAlive%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-870">The <xref:System.Threading.Thread.ThreadState%2A> property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="649b3-871">Threadzustand ist nur in Debugszenarien von Interesse.</span><span class="sxs-lookup"><span data-stu-id="649b3-871">Thread state is only of interest in debugging scenarios.</span></span> <span data-ttu-id="649b3-872">Sie sollten den Threadzustand niemals verwenden, um die Aktivitäten von Threads zu synchronisieren.</span><span class="sxs-lookup"><span data-stu-id="649b3-872">Your code should never use thread state to synchronize the activities of threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-873">Das folgende Codebeispiel veranschaulicht den Zugriff auf die `ThreadState` eines Threads.</span><span class="sxs-lookup"><span data-stu-id="649b3-873">The following code example demonstrates accessing the `ThreadState` of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ThreadState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ThreadState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cs/source.cs#1)]
 [!code-vb[System.Threading.Thread.ThreadState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.threadstate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetApartmentState">
      <MemberSignature Language="C#" Value="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetApartmentState (state As ApartmentState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.TrySetApartmentState : System.Threading.ApartmentState -&gt; bool" Usage="thread.TrySetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="649b3-874">Der neue Apartmentzustand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-874">The new apartment state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-875">Legt den Apartmentzustand eines Threads fest, bevor dieser gestartet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-875">Sets the apartment state of a thread before it is started.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-876">
            <see langword="true" />, wenn der Apartmentzustand festgelegt wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-876">
              <see langword="true" /> if the apartment state is set; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-877">Neue Threads werden als initialisiert <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> Wenn ihr Apartmentzustand nicht festgelegt wurde, bevor sie gestartet werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-877">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="649b3-878">Apartmentzustand muss festgelegt werden, bevor ein Thread gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-878">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-879">Thread der hauptanwendung wird initialisiert, um <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> standardmäßig.</span><span class="sxs-lookup"><span data-stu-id="649b3-879">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="649b3-880">Die einzige Möglichkeit, legen Sie den Apartmentzustand der Hauptanwendungsthread, dass <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> ist die Anwendung die <xref:System.STAThreadAttribute> -Attribut auf die Einstiegspunktmethode.</span><span class="sxs-lookup"><span data-stu-id="649b3-880">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="649b3-881">Die <xref:System.Threading.Thread.TrySetApartmentState%2A> -Methode zusammen mit den <xref:System.Threading.Thread.GetApartmentState%2A> Methode und die <xref:System.Threading.Thread.SetApartmentState%2A> Methode ersetzt die <xref:System.Threading.Thread.ApartmentState%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="649b3-881">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="649b3-882">Im folgenden Codebeispiel wird veranschaulicht, die <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, und <xref:System.Threading.Thread.TrySetApartmentState%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="649b3-882">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="649b3-883">Das Codebeispiel erstellt einen Thread.</span><span class="sxs-lookup"><span data-stu-id="649b3-883">The code example creates a thread.</span></span> <span data-ttu-id="649b3-884">Vor dem Starten des Threads <xref:System.Threading.Thread.GetApartmentState%2A> zeigt den ersten <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> Zustand und <xref:System.Threading.Thread.SetApartmentState%2A> ändert den Zustand in <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="649b3-884">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="649b3-885">Die <xref:System.Threading.Thread.TrySetApartmentState%2A> dann Methodenrückgabe `false` beim Versuch, den Status zu ändern, <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> da bereits der Apartmentzustand festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-885">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="649b3-886">Bei der Ausführung des gleichen Vorgangs mit <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> würde ausgelöst wurden.</span><span class="sxs-lookup"><span data-stu-id="649b3-886">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="649b3-887">Nachdem der Thread gestartet wurde, die <xref:System.Threading.Thread.TrySetApartmentState%2A> Methode erneut verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-887">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="649b3-888">Sie löst dieses Mal <xref:System.Threading.ThreadStateException> , da der Thread wurde bereits gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="649b3-888">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="649b3-889">
            <paramref name="state" /> ist kein gültiger Apartmentzustand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-889">
              <paramref name="state" /> is not a valid apartment state.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="649b3-890">Der Thread wurde bereits gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-890">The thread has already been started.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileRead">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-891">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-891">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-892">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-892">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static byte VolatileRead (ref byte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 VolatileRead(unsigned int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte VolatileRead(System::Byte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; byte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-893">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-893">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-894">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-894">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-895">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-895">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-896">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-896">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-897"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-897"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-898">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-898">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-899">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-899">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-900">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-900">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-901">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-901">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-902">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-902">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-903">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-903">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-904">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-904">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-905">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-905">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static double VolatileRead (ref double address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 VolatileRead(float64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double VolatileRead(double % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; double" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-906">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-906">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-907">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-907">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-908">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-908">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-909">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-909">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-910"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-910"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-911">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-911">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-912">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-912">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-913">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-913">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-914">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-914">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-915">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-915">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-916">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-916">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-917">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-917">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-918">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-918">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static short VolatileRead (ref short address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 VolatileRead(int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short VolatileRead(short % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-919">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-919">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-920">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-920">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-921">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-921">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-922">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-922">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-923"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-923"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-924">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-924">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-925">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-925">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-926">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-926">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-927">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-927">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-928">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-928">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-929">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-929">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-930">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-930">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-931">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-931">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static int VolatileRead (ref int address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VolatileRead(int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int VolatileRead(int % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-932">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-932">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-933">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-933">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-934">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-934">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-935">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-935">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-936"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-936"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-937">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-937">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-938">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-938">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-939">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-939">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-940">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-940">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-941">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-941">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-942">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-942">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-943">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-943">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-944">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-944">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static long VolatileRead (ref long address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 VolatileRead(int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long VolatileRead(long % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-945">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-945">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-946">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-946">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-947">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-947">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-948">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-948">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-949"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-949"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-950">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-950">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-951">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-951">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-952">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-952">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-953">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-953">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-954">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-954">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-955">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-955">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-956">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-956">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-957">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-957">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static IntPtr VolatileRead (ref IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int VolatileRead(native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr VolatileRead(IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; nativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-958">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-958">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-959">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-959">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-960">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-960">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-961">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-961">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-962"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-962"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-963">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-963">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-964">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-964">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-965">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-965">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-966">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-966">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-967">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-967">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-968">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-968">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-969">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-969">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-970">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-970">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static object VolatileRead (ref object address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object VolatileRead(object&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ VolatileRead(System::Object ^ % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; obj" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-971">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-971">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-972">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-972">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-973">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-973">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-974">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-974">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-975"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-975"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-976">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-976">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-977">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-977">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-978">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-978">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-979">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-979">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-980">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-980">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-981">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-981">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-982">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-982">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-983">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-983">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static sbyte VolatileRead (ref sbyte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 VolatileRead(int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte VolatileRead(System::SByte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; sbyte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-984">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-984">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-985">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-985">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-986">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-986">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-987">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-987">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-988"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-988"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-989">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-989">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-990">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-990">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-991">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-991">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-992">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-992">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-993">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-993">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-994">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-994">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-995">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-995">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-996">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-996">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static float VolatileRead (ref float address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 VolatileRead(float32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float VolatileRead(float % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; single" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-997">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-997">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-998">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-998">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-999">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-999">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-1000">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1000">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1001"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1001"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1002">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1002">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1003">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-1003">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-1004">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1004">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1005">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1005">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1006">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1006">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1007">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1007">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1008">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1008">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1009">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1009">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ushort VolatileRead (ref ushort address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 VolatileRead(unsigned int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 VolatileRead(System::UInt16 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1010">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1010">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1011">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1011">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-1012">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1012">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-1013">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1013">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1014"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1014"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1015">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1015">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1016">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-1016">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-1017">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1017">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1018">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1018">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1019">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1019">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1020">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1020">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1021">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1021">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1022">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1022">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static uint VolatileRead (ref uint address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 VolatileRead(unsigned int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 VolatileRead(System::UInt32 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint32" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1023">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1023">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1024">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1024">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-1025">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1025">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-1026">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1026">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1027"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1027"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1028">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1028">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1029">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-1029">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-1030">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1030">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1031">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1031">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1032">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1032">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1033">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1033">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1034">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1034">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1035">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1035">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ulong VolatileRead (ref ulong address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 VolatileRead(unsigned int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 VolatileRead(System::UInt64 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1036">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1036">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1037">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1037">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-1038">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1038">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-1039">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1039">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1040"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1040"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1041">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1041">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1042">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-1042">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-1043">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1043">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1044">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1044">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1045">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1045">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1046">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1046">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1047">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1047">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1048">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1048">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static UIntPtr VolatileRead (ref UIntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int VolatileRead(native unsigned int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr VolatileRead(UIntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; unativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1049">Das zu lesende Feld.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1049">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1050">Liest den Wert eines Felds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1050">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="649b3-1051">Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1051">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-1052">Der letzte von einem Prozessor in das Feld geschriebene Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1052">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1053"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1053"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1054">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1054">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1055">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> Ruft den neuesten Wert, der auf einen Speicherbereich geschrieben werden, von einem Prozessor ab.</span><span class="sxs-lookup"><span data-stu-id="649b3-1055">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="649b3-1056">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1056">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1057">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1057">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1058">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1058">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1059">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1059">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1060">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1060">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1061">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1061">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileWrite">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="649b3-1062">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1062">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref byte address, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int8&amp; address, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Byte % address, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * byte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1063">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1063">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1064">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1064">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1065">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1065">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1066"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1066"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1067">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1067">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1068">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1068">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1069">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1069">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1070">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1070">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1071">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1071">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1072">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1072">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1073">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1073">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1074">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1074">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref double address, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float64&amp; address, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(double % address, double value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * double -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1075">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1075">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1076">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1076">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1077">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1077">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1078"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1078"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1079">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1079">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1080">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1080">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1081">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1081">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1082">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1082">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1083">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1083">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1084">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1084">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1085">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1085">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1086">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1086">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref short address, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int16&amp; address, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(short % address, short value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1087">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1087">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1088">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1088">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1089">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1089">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1090"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1090"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1091">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1091">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1092">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1092">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1093">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1093">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1094">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1094">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1095">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1095">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1096">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1096">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1097">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1097">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1098">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1098">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref int address, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int32&amp; address, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(int % address, int value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1099">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1099">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1100">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1100">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1101">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1101">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1102"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1102"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1103">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1103">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1104">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1104">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1105">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1105">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1106">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1106">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1107">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1107">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1108">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1108">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1109">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1109">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1110">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1110">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref long address, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int64&amp; address, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(long % address, long value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1111">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1111">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1112">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1112">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1113">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1113">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1114"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1114"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1115">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1115">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1116">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1116">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1117">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1117">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1118">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1118">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1119">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1119">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1120">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1120">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1121">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1121">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1122">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1122">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native int&amp; address, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(IntPtr % address, IntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * nativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1123">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1123">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1124">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1124">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1125">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1125">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1126"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1126"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1127">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1127">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1128">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1128">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1129">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1129">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1130">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1130">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1131">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1131">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1132">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1132">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1133">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1133">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1134">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1134">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref object address, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(object&amp; address, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Object ^ % address, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * obj -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1135">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1135">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1136">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1136">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1137">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1137">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1138"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1138"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1139">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1139">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1140">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1140">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1141">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1141">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1142">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1142">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1143">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1143">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1144">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1144">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1145">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1145">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1146">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1146">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref sbyte address, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int8&amp; address, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::SByte % address, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * sbyte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1147">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1147">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1148">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1148">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1149">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1149">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1150"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1150"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1151">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1151">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1152">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1152">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1153">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1153">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1154">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1154">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1155">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1155">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1156">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1156">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1157">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1157">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1158">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1158">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref float address, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float32&amp; address, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(float % address, float value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * single -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1159">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1159">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1160">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1160">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1161">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1161">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1162"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1162"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1163">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1163">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1164">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1164">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1165">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1165">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1166">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1166">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1167">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1167">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1168">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1168">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1169">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1169">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1170">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1170">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ushort address, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int16&amp; address, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt16 % address, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1171">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1171">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1172">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1172">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1173">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1173">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1174"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1174"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1175">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1175">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1176">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1176">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1177">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1177">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1178">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1178">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1179">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1179">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1180">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1180">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1181">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1181">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1182">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1182">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref uint address, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int32&amp; address, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt32 % address, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint32 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1183">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1183">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1184">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1184">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1185">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1185">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1186"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1186"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1187">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1187">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1188">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1188">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1189">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1189">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1190">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1190">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1191">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1191">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1192">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1192">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1193">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1193">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1194">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1194">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ulong address, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int64&amp; address, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt64 % address, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1195">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1195">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1196">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1196">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1197">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1197">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1198"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1198"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1199">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1199">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1200">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1200">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1201">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1201">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1202">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1202">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1203">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1203">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1204">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1204">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1205">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1205">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1206">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1206">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native unsigned int&amp; address, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(UIntPtr % address, UIntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * unativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="649b3-1207">Das Feld, in das der Wert geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1207">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="649b3-1208">Der zu schreibende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1208">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="649b3-1209">Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1209">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1210"><xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> der Synchronisierung in bestimmten Fällen sind.</span><span class="sxs-lookup"><span data-stu-id="649b3-1210"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="649b3-1211">Unter normalen Umständen c# `lock` -Anweisung, die Visual Basic `SyncLock` -Anweisung, und die <xref:System.Threading.Monitor> Klasse geben Sie einfachere alternativen.</span><span class="sxs-lookup"><span data-stu-id="649b3-1211">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="649b3-1212">Auf einem Multiprozessorsystem <xref:System.Threading.Thread.VolatileWrite%2A> wird sichergestellt, dass ein Wert, der auf einen Speicherbereich geschrieben sofort für alle Prozessoren sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="649b3-1212">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="649b3-1213">Dies erfordert möglicherweise, Prozessor-Caches leeren.</span><span class="sxs-lookup"><span data-stu-id="649b3-1213">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="649b3-1214">Sogar auf einem Einprozessorsystem <xref:System.Threading.Thread.VolatileRead%2A> und <xref:System.Threading.Thread.VolatileWrite%2A> stellen Sie sicher, dass ein Wert gelesen oder in den Speicher geschrieben werden, und (z. B. in einem Prozessorregister) nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="649b3-1214">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="649b3-1215">Daher können Sie sie verwenden, um den Zugriff auf ein Feld zu synchronisieren, die von einem anderen Thread oder von der Hardware aktualisiert werden können.</span><span class="sxs-lookup"><span data-stu-id="649b3-1215">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="649b3-1216">Das Aufrufen dieser Methode wirkt sich auf nur einen einzigen Speicherzugriff aus.</span><span class="sxs-lookup"><span data-stu-id="649b3-1216">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="649b3-1217">Um effektive Synchronisierung für ein Feld bereitzustellen, muss alle Zugriffe auf das Feld verwenden <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1217">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="649b3-1218">In c# mithilfe der `volatile` Modifizierer für ein Feld wird sichergestellt, dass alle Zugriffe auf das Feld verwendet <xref:System.Threading.Thread.VolatileRead%2A> oder <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="649b3-1218">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static bool Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; bool" Usage="System.Threading.Thread.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="649b3-1219">Bewirkt, dass der aufrufende Thread die Ausführung an einen anderen Thread übergibt, der auf dem aktuellen Prozessor ausgeführt werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1219">Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</span>
          </span>
          <span data-ttu-id="649b3-1220">Das Betriebssystem wählt den Thread für die Übergabe aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1220">The operating system selects the thread to yield to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="649b3-1221">
            <see langword="true" />, wenn das Betriebssystem die Ausführung an einen anderen Thread übergeben hat, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="649b3-1221">
              <see langword="true" /> if the operating system switched execution to another thread; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649b3-1222">Wenn diese Methode erfolgreich ist, wird die restliche Zeitsegment des Threads aktuelle ergab.</span><span class="sxs-lookup"><span data-stu-id="649b3-1222">If this method succeeds, the rest of the thread's current time slice is yielded.</span></span> <span data-ttu-id="649b3-1223">Das Betriebssystem plant den aufrufenden Thread für einen anderen Zeitraum verwendet haben, gemäß seiner Priorität und den Status von anderen Threads, die ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="649b3-1223">The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</span></span>  
  
 <span data-ttu-id="649b3-1224">Rückgabe ist beschränkt, an den Prozessor, der den aufrufenden Thread ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-1224">Yielding is limited to the processor that is executing the calling thread.</span></span> <span data-ttu-id="649b3-1225">Das Betriebssystem wird nicht auf einen anderen Prozessor Ausführung wechseln, selbst wenn der Prozessor im Leerlauf befindet oder einen Thread mit niedrigerer Priorität ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="649b3-1225">The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</span></span> <span data-ttu-id="649b3-1226">Wenn keine anderen Threads, die auf dem aktuellen Prozessor ausgeführt werden, das Betriebssystem keine Ausführung Beenden dieser Methode `false`.</span><span class="sxs-lookup"><span data-stu-id="649b3-1226">If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.</span></span>  
  
 <span data-ttu-id="649b3-1227">Diese Methode entspricht, mithilfe eines Plattformaufrufs zum Aufrufen von systemeigenen Win32 `SwitchToThread` Funktion.</span><span class="sxs-lookup"><span data-stu-id="649b3-1227">This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function.</span></span> <span data-ttu-id="649b3-1228">Rufen Sie die <xref:System.Threading.Thread.Yield%2A> Methode anstelle von Plattform aufrufen, da ein Plattformaufruf umgeht alle benutzerdefiniertes threading Verhalten des Hosts angefordert hat.</span><span class="sxs-lookup"><span data-stu-id="649b3-1228">You should call the <xref:System.Threading.Thread.Yield%2A> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="460d7a2efdca4ff1e7aea687a6afae634dd19c5a" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83945603" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.ThreadPool" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Ein Objekt mit den Informationen, die von der Rückrufmethode bei jeder Ausführung verwendet werden.</param>
    <param name="timedOut"><see langword="true" />, wenn das Timeout für <see cref="T:System.Threading.WaitHandle" /> überschritten ist, <see langword="false" />, wenn ein Signal gesendet wurde.</param>
    <summary>Stellt eine Methode dar, die aufgerufen werden soll, wenn ein Signal an ein <see cref="T:System.Threading.WaitHandle" /> gesendet wird oder dessen Timeout überschritten ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> stellt eine Rückruf Methode dar, die ausgeführt werden soll, wenn für ein registriertes Wait-Handle ein Timeout auftritt oder signalisiert wird. Erstellen Sie den Delegaten, indem Sie die Rückruf Methode an den <xref:System.Threading.WaitOrTimerCallback>-Konstruktor übergeben. Die-Methode muss über die hier gezeigte Signatur verfügen.  
  
 Erstellen Sie das registrierte Wait-Handle, indem Sie den <xref:System.Threading.WaitOrTimerCallback>-Delegaten und eine <xref:System.Threading.WaitHandle> an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>übergeben. Die Rückruf Methode wird jedes Mal ausgeführt, wenn die <xref:System.Threading.WaitHandle> ein Timeout oder signalisiert wird.  
  
  
> [!NOTE]
>  Visual Basic Benutzer den <xref:System.Threading.WaitOrTimerCallback>-Konstruktor weglassen und einfach den `AddressOf`-Operator verwenden können, wenn Sie die Rückruf Methode an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>übergeben. Visual Basic ruft automatisch den richtigen Delegatkonstruktor auf.  
  
 Wenn Sie Informationen an die Rückruf Methode übergeben möchten, erstellen Sie ein Objekt, das die erforderlichen Informationen enthält, und übergeben Sie es an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, wenn Sie das registrierte Wait-Handle erstellen. Jedes Mal, wenn die Rückruf Methode ausgeführt wird, enthält der `state`-Parameter dieses-Objekt.  
  
 Weitere Informationen zur Verwendung von Rückruf Methoden zum Synchronisieren von Thread Pool-Threads finden Sie [unter Managed Thread Pool](/dotnet/standard/threading/the-managed-thread-pool).  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie der <xref:System.Threading.WaitOrTimerCallback>-Delegat verwendet wird, um eine Rückruf Methode darzustellen, die ausgeführt wird, wenn ein Wait-Handle signalisiert wird.  
  
 Das Beispiel zeigt auch, wie die <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode verwendet wird, um eine angegebene Rückruf Methode auszuführen, wenn ein angegebenes Wait-Handle signalisiert wird. In diesem Beispiel ist die Rückruf Methode `WaitProc`, und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.  
  
 Im Beispiel wird eine `TaskInfo` Klasse definiert, die die Informationen enthält, die bei der Ausführung an den Rückruf übermittelt werden. Im Beispiel wird ein `TaskInfo`-Objekt erstellt, und es werden Zeichen folgen Daten zugewiesen. Der <xref:System.Threading.RegisteredWaitHandle>, der von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode zurückgegeben wird, wird dem `Handle`-Feld des `TaskInfo` Objekts zugewiesen, sodass die Rückruf Methode Zugriff auf den <xref:System.Threading.RegisteredWaitHandle>hat.  
  
 Zusätzlich zum `TaskInfo` Objekt gibt der Aufruf der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode den <xref:System.Threading.AutoResetEvent> an, auf den der Task wartet, einen <xref:System.Threading.WaitOrTimerCallback> Delegaten, der die `WaitProc` Rückruf Methode darstellt, ein Timeout Intervall von einer Sekunde und mehrere Rückrufe.  
  
 Wenn der Haupt Thread die <xref:System.Threading.AutoResetEvent> durch Aufrufen seiner <xref:System.Threading.EventWaitHandle.Set%2A>-Methode signalisiert, wird der <xref:System.Threading.WaitOrTimerCallback> Delegat aufgerufen. Die `WaitProc`-Methode testet <xref:System.Threading.RegisteredWaitHandle>, um zu bestimmen, ob ein Timeout aufgetreten ist. Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, hebt die `WaitProc` Methode die Registrierung des <xref:System.Threading.RegisteredWaitHandle>auf und beendet weitere Rückrufe. Im Falle eines Timeouts wartet der Task weiterhin. Die `WaitProc`-Methode wird beendet, indem eine Meldung an die Konsole ausgegeben wird.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/threading/threads-and-threading">Threads und Threading</related>
    <related type="Article" href="/dotnet/standard/threading/the-managed-thread-pool">Der verwaltete Threadpool</related>
  </Docs>
</Type>

<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="92e393b8e9a6afcb973dae9ed84057d43fca3a14" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82331738" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="bcb12-101">Ein Objekt mit den Informationen, die von der Rückrufmethode bei jeder Ausführung verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="bcb12-101">An object containing information to be used by the callback method each time it executes.</span></span></param>
    <param name="timedOut"><span data-ttu-id="bcb12-102"><see langword="true" />, wenn das Timeout für <see cref="T:System.Threading.WaitHandle" /> überschritten ist, <see langword="false" />, wenn ein Signal gesendet wurde.</span><span class="sxs-lookup"><span data-stu-id="bcb12-102"><see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span></span></param>
    <summary><span data-ttu-id="bcb12-103">Stellt eine Methode dar, die aufgerufen werden soll, wenn ein Signal an ein <see cref="T:System.Threading.WaitHandle" /> gesendet wird oder dessen Timeout überschritten ist.</span><span class="sxs-lookup"><span data-stu-id="bcb12-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bcb12-104"><xref:System.Threading.WaitOrTimerCallback> stellt eine Rückruf Methode dar, die ausgeführt werden soll, wenn für ein registriertes Wait-Handle ein Timeout auftritt oder signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="bcb12-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="bcb12-105">Erstellen Sie den Delegaten, indem Sie die Rückruf Methode an den <xref:System.Threading.WaitOrTimerCallback>-Konstruktor übergeben.</span><span class="sxs-lookup"><span data-stu-id="bcb12-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="bcb12-106">Die-Methode muss über die hier gezeigte Signatur verfügen.</span><span class="sxs-lookup"><span data-stu-id="bcb12-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="bcb12-107">Erstellen Sie das registrierte Wait-Handle, indem Sie den <xref:System.Threading.WaitOrTimerCallback>-Delegaten und eine <xref:System.Threading.WaitHandle> an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>übergeben.</span><span class="sxs-lookup"><span data-stu-id="bcb12-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bcb12-108">Die Rückruf Methode wird jedes Mal ausgeführt, wenn die <xref:System.Threading.WaitHandle> ein Timeout oder signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="bcb12-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="bcb12-109">Visual Basic Benutzer den <xref:System.Threading.WaitOrTimerCallback>-Konstruktor weglassen und einfach den `AddressOf`-Operator verwenden können, wenn Sie die Rückruf Methode an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>übergeben.</span><span class="sxs-lookup"><span data-stu-id="bcb12-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="bcb12-110">Visual Basic ruft automatisch den richtigen Delegatkonstruktor auf.</span><span class="sxs-lookup"><span data-stu-id="bcb12-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="bcb12-111">Wenn Sie Informationen an die Rückruf Methode übergeben möchten, erstellen Sie ein Objekt, das die erforderlichen Informationen enthält, und übergeben Sie es an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, wenn Sie das registrierte Wait-Handle erstellen.</span><span class="sxs-lookup"><span data-stu-id="bcb12-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="bcb12-112">Jedes Mal, wenn die Rückruf Methode ausgeführt wird, enthält der `state`-Parameter dieses-Objekt.</span><span class="sxs-lookup"><span data-stu-id="bcb12-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="bcb12-113">Weitere Informationen zur Verwendung von Rückruf Methoden zum Synchronisieren von Thread Pool-Threads finden Sie [unter Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="bcb12-113">For more information about using callback methods to synchronize thread pool threads, see [The managed thread pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bcb12-114">Im folgenden Beispiel wird gezeigt, wie der <xref:System.Threading.WaitOrTimerCallback>-Delegat verwendet wird, um eine Rückruf Methode darzustellen, die ausgeführt wird, wenn ein Wait-Handle signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="bcb12-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="bcb12-115">Das Beispiel zeigt auch, wie die <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode verwendet wird, um eine angegebene Rückruf Methode auszuführen, wenn ein angegebenes Wait-Handle signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="bcb12-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="bcb12-116">In diesem Beispiel ist die Rückruf Methode `WaitProc`, und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="bcb12-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="bcb12-117">Im Beispiel wird eine `TaskInfo` Klasse definiert, die die Informationen enthält, die bei der Ausführung an den Rückruf übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="bcb12-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="bcb12-118">Im Beispiel wird ein `TaskInfo`-Objekt erstellt, und es werden Zeichen folgen Daten zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="bcb12-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="bcb12-119">Der <xref:System.Threading.RegisteredWaitHandle>, der von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode zurückgegeben wird, wird dem `Handle`-Feld des `TaskInfo` Objekts zugewiesen, sodass die Rückruf Methode Zugriff auf den <xref:System.Threading.RegisteredWaitHandle>hat.</span><span class="sxs-lookup"><span data-stu-id="bcb12-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="bcb12-120">Zusätzlich zum `TaskInfo` Objekt gibt der Aufruf der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode den <xref:System.Threading.AutoResetEvent> an, auf den der Task wartet, einen <xref:System.Threading.WaitOrTimerCallback> Delegaten, der die `WaitProc` Rückruf Methode darstellt, ein Timeout Intervall von einer Sekunde und mehrere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="bcb12-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="bcb12-121">Wenn der Haupt Thread die <xref:System.Threading.AutoResetEvent> durch Aufrufen seiner <xref:System.Threading.EventWaitHandle.Set%2A>-Methode signalisiert, wird der <xref:System.Threading.WaitOrTimerCallback> Delegat aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="bcb12-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="bcb12-122">Die `WaitProc`-Methode testet <xref:System.Threading.RegisteredWaitHandle>, um zu bestimmen, ob ein Timeout aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="bcb12-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="bcb12-123">Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, hebt die `WaitProc` Methode die Registrierung des <xref:System.Threading.RegisteredWaitHandle>auf und beendet weitere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="bcb12-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="bcb12-124">Im Falle eines Timeouts wartet der Task weiterhin.</span><span class="sxs-lookup"><span data-stu-id="bcb12-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="bcb12-125">Die `WaitProc`-Methode wird beendet, indem eine Meldung an die Konsole ausgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="bcb12-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="bcb12-126">Threads und Threading</span><span class="sxs-lookup"><span data-stu-id="bcb12-126">Threads and Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="bcb12-127">Der verwaltete Threadpool</span><span class="sxs-lookup"><span data-stu-id="bcb12-127">The managed thread pool</span></span></related>
  </Docs>
</Type>

<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bbfa013120262f762e4cf955271e6d0ee2830e1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58706400" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Ein Objekt mit den Informationen, die von der Rückrufmethode bei jeder Ausführung verwendet werden.</param>
    <param name="timedOut"><see langword="true" />, wenn das Timeout für <see cref="T:System.Threading.WaitHandle" /> überschritten ist, <see langword="false" />, wenn ein Signal gesendet wurde.</param>
    <summary>Stellt eine Methode dar, die aufgerufen werden soll, wenn ein Signal an ein <see cref="T:System.Threading.WaitHandle" /> gesendet wird oder dessen Timeout überschritten ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> Stellt eine Rückrufmethode, die ausgeführt werden, wenn ein registrierter Wait-Handle ein Timeout oder signalisiert werden soll. Der Delegat erstellt, durch die Rückrufmethode zum Übergeben der <xref:System.Threading.WaitOrTimerCallback> Konstruktor. Die Methode muss die hier gezeigte Signatur verfügen.  
  
 Erstellen Sie das registrierte Wait-Handle durch Übergeben der <xref:System.Threading.WaitOrTimerCallback> delegieren und einen <xref:System.Threading.WaitHandle> zu <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Die Rückrufmethode wird jedes Mal ausgeführt. die <xref:System.Threading.WaitHandle> ein Timeout oder signalisiert wird.  
  
  
> [!NOTE]
>  Visual Basic-Benutzer können weglassen der <xref:System.Threading.WaitOrTimerCallback> Konstruktor, und verwenden Sie einfach die `AddressOf` beim Übergeben der Rückrufmethode, um den Operator <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic ruft automatisch den richtigen Delegaten-Konstruktor.  
  
 Wenn Sie die Informationen an die Rückrufmethode übergeben möchten, erstellen Sie ein Objekt, das die erforderlichen Informationen enthält, und übergeben es an <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> beim Erstellen des registrierten Wait-Handles. Jedes Mal, die die Rückrufmethode wird ausgeführt, die `state` Parameter dieses Objekt enthält.  
  
 Weitere Informationen zur Verwendung von Rückrufmethoden zum Synchronisieren von Threads im Threadpool finden Sie unter [der verwaltete Threadpool](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.WaitOrTimerCallback> Delegat, der eine Rückrufmethode darstellt, die ausgeführt wird, wenn ein Wait-Handle signalisiert wird.  
  
 Außerdem wird gezeigt, wie Sie mit der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode, um eine angegebene Rückrufmethode ausführen, wenn einem angegebenen Wait-Handle signalisiert wird. In diesem Beispiel wird die Rückrufmethode `WaitProc` und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.  
  
 Das Beispiel definiert eine `TaskInfo` Klasse, die die Informationen enthält, die an den Rückruf übergeben wird, wenn er ausgeführt wird. Das Beispiel erstellt eine `TaskInfo` -Objekt und weist ihr einige Zeichenfolgendaten. Die <xref:System.Threading.RegisteredWaitHandle> von zurückgegebenen der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode zugewiesen ist die `Handle` Feld der `TaskInfo` Objekt, sodass die Callback-Methode zugreifen der <xref:System.Threading.RegisteredWaitHandle>.  
  
 Zusätzlich zu der `TaskInfo` -Objekt, das den Aufruf von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode gibt die <xref:System.Threading.AutoResetEvent> die Aufgabe wartet, eine <xref:System.Threading.WaitOrTimerCallback> Delegat, der darstellt der `WaitProc` Callback-Methode, einem 1-Sekunden-Timeout-Intervall und mehrerer Rückrufe .  
  
 Wenn der Hauptthread signalisiert der <xref:System.Threading.AutoResetEvent> durch Aufrufen der <xref:System.Threading.EventWaitHandle.Set%2A> -Methode, die <xref:System.Threading.WaitOrTimerCallback> Delegat wird aufgerufen. Die `WaitProc` Methode Tests <xref:System.Threading.RegisteredWaitHandle> um zu bestimmen, ob ein Timeout aufgetreten ist. Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, die `WaitProc` Methode hebt die Registrierung der <xref:System.Threading.RegisteredWaitHandle>, stoppt weiteren Rückrufe. Die Aufgabe weiter wartet, im Falle eines Timeouts. Die `WaitProc` Methode beendet wird, wird eine Meldung an die Konsole.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">Threads und Threading</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Der verwaltete Threadpool</related>
  </Docs>
</Type>
<Type Name="ThreadLocal&lt;T&gt;" FullName="System.Threading.ThreadLocal&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="062c8a11eb1bd25c2755701f4a388a9a5169c310" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51865971" /></Metadata><TypeSignature Language="C#" Value="public class ThreadLocal&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadLocal`1&lt;T&gt; extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadLocal`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadLocal(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ThreadLocal : IDisposable" />
  <TypeSignature Language="F#" Value="type ThreadLocal&lt;'T&gt; = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsValueCreated={IsValueCreated}, Value={ValueForDebugDisplay}, Count={ValuesCountForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SystemThreading_ThreadLocalDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsValueCreated={IsValueCreated}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="0d063-101">Gibt den gespeicherten Datentyp pro Thread an.</span><span class="sxs-lookup"><span data-stu-id="0d063-101">Specifies the type of data stored per-thread.</span></span></typeparam>
    <summary><span data-ttu-id="0d063-102">Stellt Thread-lokalen Datenspeicher bereit.</span><span class="sxs-lookup"><span data-stu-id="0d063-102">Provides thread-local storage of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0d063-103">Das folgende Beispiel veranschaulicht die Verwendung von <xref:System.Threading.ThreadLocal%601>:</span><span class="sxs-lookup"><span data-stu-id="0d063-103">The following example shows how to use <xref:System.Threading.ThreadLocal%601>:</span></span>  
  
 [!code-csharp[System.Threading.ThreadLocal#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.threadlocal/cs/threadlocal.cs#01)]
 [!code-vb[System.Threading.ThreadLocal#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.threadlocal/vb/threadlocal.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0d063-104">Mit Ausnahme von <see cref="M:System.Threading.ThreadLocal`1.Dispose" />sind alle öffentlichen und geschützten Member von <see cref="T:System.Threading.ThreadLocal`1" /> sind threadsicher und können von mehreren Threads gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0d063-104">With the exception of <see cref="M:System.Threading.ThreadLocal`1.Dispose" />, all public and protected members of <see cref="T:System.Threading.ThreadLocal`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="0d063-105">Der Rückgabewert für die <see cref="P:System.Threading.ThreadLocal`1.Value" /> und <see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /> Eigenschaften ist spezifisch für den Thread, der auf dem die Eigenschaft zugegriffen wird.</span><span class="sxs-lookup"><span data-stu-id="0d063-105">The value returned for the <see cref="P:System.Threading.ThreadLocal`1.Value" /> and <see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /> properties is specific for the thread on which the property is accessed.</span></span></threadsafe>
    <altmember cref="T:System.Lazy`1" />
    <altmember cref="T:System.Threading.AsyncLocal`1" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-106">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-106">Lazy Initialization</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-107">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-107">How to: Perform Lazy Initialization of Objects</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0d063-108">Initialisiert eine neue <see cref="T:System.Threading.ThreadLocal`1" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="0d063-108">Initializes a <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d063-109">Initialisiert die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="0d063-109">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-110">Der Standardwert von `T` dient zum Initialisieren der Instanz bei <xref:System.Threading.ThreadLocal%601.Value%2A> zum ersten Mal zugegriffen wird.</span><span class="sxs-lookup"><span data-stu-id="0d063-110">The default value of `T` is used to initialize the instance when <xref:System.Threading.ThreadLocal%601.Value%2A> is accessed for the first time.</span></span>  
  
 <span data-ttu-id="0d063-111">Dieser Konstruktor entspricht dem Aufrufen der <xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29> Konstruktor mit einem Wert von `false` für die `trackAllValues` Argument.</span><span class="sxs-lookup"><span data-stu-id="0d063-111">This constructor is equivalent to calling the <xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29> constructor with a value of `false` for the `trackAllValues` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-112">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-112">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-113">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-113">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal (bool trackAllValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool trackAllValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (trackAllValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal(bool trackAllValues);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadLocal&lt;'T&gt; : bool -&gt; System.Threading.ThreadLocal&lt;'T&gt;" Usage="new System.Threading.ThreadLocal&lt;'T&gt; trackAllValues" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="trackAllValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="trackAllValues"><span data-ttu-id="0d063-114"><see langword="true" />, alle Werte nachzuverfolgen, die für die Instanz festgelegt sind, und sie über die <see cref="P:System.Threading.ThreadLocal`1.Values" />-Eigenschaft verfügbar zu machen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d063-114"><see langword="true" /> to track all values set on the instance and expose them through the <see cref="P:System.Threading.ThreadLocal`1.Values" /> property; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="0d063-115">Initialisiert die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz und gibt an, ob alle Werte von jedem Thread aus zugänglich sind.</span><span class="sxs-lookup"><span data-stu-id="0d063-115">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance and specifies whether all values are accessible from any thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-116">Wenn `trackAllValues` ist `false`, nur der Wert dieser Instanz für den aktuellen Thread zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="0d063-116">If `trackAllValues` is `false`, only the value of this instance for the current thread is accessible.</span></span> <span data-ttu-id="0d063-117">Verwendung der <xref:System.Threading.ThreadLocal%601.Values%2A> abzurufenden alle Eigenschaftswerte löst eine <xref:System.InvalidOperationException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="0d063-117">Attempting to use the <xref:System.Threading.ThreadLocal%601.Values%2A> property to retrieve all values throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadLocal&lt;'T&gt; : Func&lt;'T&gt; -&gt; System.Threading.ThreadLocal&lt;'T&gt;" Usage="new System.Threading.ThreadLocal&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="0d063-118">Das <see cref="T:System.Func`1" />, das aufgerufen wird, um einen verzögert initialisierten Wert zu erzeugen, wenn versucht wird, <see cref="P:System.Threading.ThreadLocal`1.Value" /> ohne vorherige Initialisierung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="0d063-118">The  <see cref="T:System.Func`1" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</span></span></param>
        <summary><span data-ttu-id="0d063-119">Initialisiert die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz mit der angegebenen <paramref name="valueFactory" />-Funktion.</span><span class="sxs-lookup"><span data-stu-id="0d063-119">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d063-120"><paramref name="valueFactory" /> ist ein NULL-Verweis (Nothing in Visual&amp;#160;Basic).</span><span class="sxs-lookup"><span data-stu-id="0d063-120"><paramref name="valueFactory" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-121">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-121">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-122">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-122">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal (Func&lt;T&gt; valueFactory, bool trackAllValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool trackAllValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), trackAllValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal(Func&lt;T&gt; ^ valueFactory, bool trackAllValues);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadLocal&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; System.Threading.ThreadLocal&lt;'T&gt;" Usage="new System.Threading.ThreadLocal&lt;'T&gt; (valueFactory, trackAllValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="trackAllValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="0d063-123">Das <see cref="T:System.Func`1" />, das aufgerufen wird, um einen verzögert initialisierten Wert zu erzeugen, wenn versucht wird, <see cref="P:System.Threading.ThreadLocal`1.Value" /> ohne vorherige Initialisierung abzurufen.</span><span class="sxs-lookup"><span data-stu-id="0d063-123">The <see cref="T:System.Func`1" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</span></span></param>
        <param name="trackAllValues"><span data-ttu-id="0d063-124"><see langword="true" />, alle Werte nachzuverfolgen, die für die Instanz festgelegt sind, und sie über die <see cref="P:System.Threading.ThreadLocal`1.Values" />-Eigenschaft verfügbar zu machen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0d063-124"><see langword="true" /> to track all values set on the instance and expose them through the <see cref="P:System.Threading.ThreadLocal`1.Values" /> property; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="0d063-125">Initialisiert die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz mit der angegebenen <paramref name="valueFactory" />-Funktion und einem Flag, das angibt, ob alle Werte von jedem Thread aus zugänglich sind.</span><span class="sxs-lookup"><span data-stu-id="0d063-125">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function and a flag that indicates whether all values are accessible from any thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-126">Wenn `trackAllValues` ist `false`, nur der Wert dieser Instanz für den aktuellen Thread zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="0d063-126">If `trackAllValues` is `false`, only the value of this instance for the current thread is accessible.</span></span> <span data-ttu-id="0d063-127">Verwendung der <xref:System.Threading.ThreadLocal%601.Values%2A> abzurufenden alle Eigenschaftswerte löst eine <xref:System.InvalidOperationException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="0d063-127">Attempting to use the <xref:System.Threading.ThreadLocal%601.Values%2A> property to retrieve all values throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d063-128"><paramref name="valueFactory" /> ist ein <see langword="null" />-Verweis (<see langword="Nothing" /> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0d063-128"><paramref name="valueFactory" /> is a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0d063-129">Gibt die von dieser <see cref="T:System.Threading.ThreadLocal`1" />-Instanz verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="0d063-129">Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="threadLocal.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d063-130">Gibt alle von der aktuellen Instanz der <see cref="T:System.Threading.ThreadLocal`1" />-Klasse verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="0d063-130">Releases all resources used by the current instance of the <see cref="T:System.Threading.ThreadLocal`1" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-131">Rufen Sie `Dispose` auf, wenn Sie <xref:System.Threading.ThreadLocal%601> nicht mehr benötigen.</span><span class="sxs-lookup"><span data-stu-id="0d063-131">Call `Dispose` when you are finished using the <xref:System.Threading.ThreadLocal%601>.</span></span> <span data-ttu-id="0d063-132">Die `Dispose`-Methode bewirkt, dass <xref:System.Threading.ThreadLocal%601> nicht mehr verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="0d063-132">The `Dispose` method leaves the <xref:System.Threading.ThreadLocal%601> in an unusable state.</span></span> <span data-ttu-id="0d063-133">Nach dem Aufruf `Dispose`, Sie müssen alle Verweise auf Freigeben der <xref:System.Threading.ThreadLocal%601> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Threading.ThreadLocal%601> belegt wurde.</span><span class="sxs-lookup"><span data-stu-id="0d063-133">After calling `Dispose`, you must release all references to the <xref:System.Threading.ThreadLocal%601> so the garbage collector can reclaim the memory that the <xref:System.Threading.ThreadLocal%601> was occupying.</span></span>  
  
 <span data-ttu-id="0d063-134">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="0d063-134">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0d063-135">Rufen Sie immer `Dispose` auf, bevor Sie den letzten Verweis auf das <xref:System.Threading.ThreadLocal%601> freigeben.</span><span class="sxs-lookup"><span data-stu-id="0d063-135">Always call `Dispose` before you release your last reference to the <xref:System.Threading.ThreadLocal%601>.</span></span> <span data-ttu-id="0d063-136">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Threading.ThreadLocal%601>-Methode des `Finalize`-Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="0d063-136">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ThreadLocal%601> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-137">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-137">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-138">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-138">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="threadLocal.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="0d063-139">Ein boolescher Wert, der angibt, ob diese Methode aufgrund eines Aufrufs von <see cref="M:System.Threading.ThreadLocal`1.Dispose" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="0d063-139">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.ThreadLocal`1.Dispose" />.</span></span></param>
        <summary><span data-ttu-id="0d063-140">Gibt die von dieser <see cref="T:System.Threading.ThreadLocal`1" />-Instanz verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="0d063-140">Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-141">Anders als die meisten der Member der <xref:System.Threading.ThreadLocal%601>, diese Methode ist nicht threadsicher.</span><span class="sxs-lookup"><span data-stu-id="0d063-141">Unlike most of the members of <xref:System.Threading.ThreadLocal%601>, this method is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-142">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-142">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-143">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-143">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ThreadLocal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ThreadLocal`1 ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="threadLocal.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d063-144">Gibt die von dieser <see cref="T:System.Threading.ThreadLocal`1" />-Instanz verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="0d063-144">Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-145">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-145">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-146">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-146">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadLocal`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Threading.ThreadLocal&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d063-147">Ruft einen Wert ab, der angibt, ob <see cref="P:System.Threading.ThreadLocal`1.Value" /> für den aktuellen Thread initialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="0d063-147">Gets whether <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread.</span></span></summary>
        <value><span data-ttu-id="0d063-148">True, wenn <see cref="P:System.Threading.ThreadLocal`1.Value" /> erfolgreich im aktuellen Thread initialisiert wurde, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="0d063-148">true if <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0d063-149">Die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="0d063-149">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-150">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-150">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-151">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-151">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="threadLocal.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d063-152">Erstellt eine Zeichenfolgendarstellung dieser Instanz für den aktuellen Thread und gibt sie zurück.</span><span class="sxs-lookup"><span data-stu-id="0d063-152">Creates and returns a string representation of this instance for the current thread.</span></span></summary>
        <returns><span data-ttu-id="0d063-153">Das Ergebnis des Aufrufs von <see cref="M:System.Object.ToString" /> für <see cref="P:System.Threading.ThreadLocal`1.Value" />.</span><span class="sxs-lookup"><span data-stu-id="0d063-153">The result of calling <see cref="M:System.Object.ToString" /> on the <see cref="P:System.Threading.ThreadLocal`1.Value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-154">Das Aufrufen dieser Methode erzwingt die Initialisierung für den aktuellen Thread, wie mit dem Zugriff auf <xref:System.Threading.ThreadLocal%601.Value%2A> direkt.</span><span class="sxs-lookup"><span data-stu-id="0d063-154">Calling this method forces initialization for the current thread, as is the case with accessing <xref:System.Threading.ThreadLocal%601.Value%2A> directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0d063-155">Die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="0d063-155">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="0d063-156">Der <see cref="P:System.Threading.ThreadLocal`1.Value" /> für den aktuellen Thread ist ein NULL-Verweis (Nothing in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0d063-156">The <see cref="P:System.Threading.ThreadLocal`1.Value" /> for the current thread is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d063-157">Die Initialisierungsfunktion versuchte, auf <see cref="P:System.Threading.ThreadLocal`1.Value" /> rekursiv zu verweisen.</span><span class="sxs-lookup"><span data-stu-id="0d063-157">The initialization function attempted to reference <see cref="P:System.Threading.ThreadLocal`1.Value" /> recursively.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="0d063-158">Kein Standardkonstruktor wird bereitgestellt, und keine Wertfactory wird angegeben.</span><span class="sxs-lookup"><span data-stu-id="0d063-158">No default constructor is provided and no value factory is supplied.</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-159">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-159">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-160">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-160">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadLocal`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); void set(T value); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T with get, set" Usage="System.Threading.ThreadLocal&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d063-161">Ruft den Wert dieser Instanz für den aktuellen Thread ab oder legt ihn fest.</span><span class="sxs-lookup"><span data-stu-id="0d063-161">Gets or sets the value of this instance for the current thread.</span></span></summary>
        <value><span data-ttu-id="0d063-162">Gibt eine Instanz des Objekts zurück, für dessen Initialisierung dieser ThreadLocal zuständig ist.</span><span class="sxs-lookup"><span data-stu-id="0d063-162">Returns an instance of the object that this ThreadLocal is responsible for initializing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d063-163">Wenn diese Instanz nicht zuvor für den aktuellen Thread initialisiert wurde, den Zugriff auf <xref:System.Threading.ThreadLocal%601.Value%2A> wird versucht, ihn zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="0d063-163">If this instance was not previously initialized for the current thread, accessing <xref:System.Threading.ThreadLocal%601.Value%2A> will attempt to initialize it.</span></span> <span data-ttu-id="0d063-164">Wenn Sie keine Initialisierungsfunktion während der Erstellung angegeben wurde, wird ausgeführt, dass die Initialisierung durch Aufrufen der Funktion zum Abrufen des Anfangswert für <xref:System.Threading.ThreadLocal%601.Value%2A>.</span><span class="sxs-lookup"><span data-stu-id="0d063-164">If an initialization function was supplied during the construction, that initialization will happen by invoking the function to retrieve the initial value for <xref:System.Threading.ThreadLocal%601.Value%2A>.</span></span> <span data-ttu-id="0d063-165">Andernfalls wird der Standardwert verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0d063-165">Otherwise, the default value of will be used.</span></span> <span data-ttu-id="0d063-166">Wenn eine Ausnahme ausgelöst wird, wird die Ausnahme zwischengespeichert und für jeden nachfolgenden Zugriff der Eigenschaft ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="0d063-166">If an exception is thrown, that exception is cached and thrown on each subsequent access of the property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0d063-167">Die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="0d063-167">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d063-168">Die Initialisierungsfunktion versuchte, auf <see cref="P:System.Threading.ThreadLocal`1.Value" /> rekursiv zu verweisen.</span><span class="sxs-lookup"><span data-stu-id="0d063-168">The initialization function attempted to reference <see cref="P:System.Threading.ThreadLocal`1.Value" /> recursively.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="0d063-169">Kein Standardkonstruktor wird bereitgestellt, und keine Wertfactory wird angegeben.</span><span class="sxs-lookup"><span data-stu-id="0d063-169">No default constructor is provided and no value factory is supplied.</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="0d063-170">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="0d063-170">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="0d063-171">Gewusst wie: Verzögerte Initialisierung von Objekten</span><span class="sxs-lookup"><span data-stu-id="0d063-171">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;T&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!T&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadLocal`1.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;T&gt; ^ Values { System::Collections::Generic::IList&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.IList&lt;'T&gt;" Usage="System.Threading.ThreadLocal&lt;'T&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d063-172">Ruft eine Liste aller Werte ab, die aktuell von allen Threads, die auf diese Instanz zugegriffen haben, gespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="0d063-172">Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</span></span></summary>
        <value><span data-ttu-id="0d063-173">Eine Liste aller Werte, die aktuell von allen Threads, die auf diese Instanz zugegriffen haben, gespeichert sind.</span><span class="sxs-lookup"><span data-stu-id="0d063-173">A list for all of the values currently stored by all of the threads that have accessed this instance.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0d063-174">Werte, die von allen Threads gespeichert werden, sind nicht verfügbar, da diese Instanz mit dem <paramref name="trackAllValues" />-Argument initialisiert wurde, das beim Aufruf eines Klassenkonstruktors auf <see langword="false" /> festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="0d063-174">Values stored by all threads are not available because this instance was initialized with the <paramref name="trackAllValues" /> argument set to <see langword="false" /> in the call to a class constructor.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="0d063-175">Die <see cref="T:System.Threading.ThreadLocal`1" />-Instanz wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="0d063-175">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
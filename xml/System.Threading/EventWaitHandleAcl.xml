<Type Name="EventWaitHandleAcl" FullName="System.Threading.EventWaitHandleAcl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51dd14fe37bb95ed938e040d29d3f82142f8db70" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82505857" /></Metadata><TypeSignature Language="C#" Value="public static class EventWaitHandleAcl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventWaitHandleAcl extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.EventWaitHandleAcl" />
  <TypeSignature Language="VB.NET" Value="Public Class EventWaitHandleAcl" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAcl abstract sealed" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAcl = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Threading.EventWaitHandle Create (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.EventWaitHandle Create(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandleAcl.Create(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean, eventSecurity As EventWaitHandleSecurity) As EventWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::EventWaitHandle ^ Create(bool initialState, System::Threading::EventResetMode mode, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::EventWaitHandleSecurity ^ eventSecurity);" />
      <MemberSignature Language="F#" Value="static member Create : bool * System.Threading.EventResetMode * string * bool * System.Security.AccessControl.EventWaitHandleSecurity -&gt; System.Threading.EventWaitHandle" Usage="System.Threading.EventWaitHandleAcl.Create (initialState, mode, name, createdNew, eventSecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.EventWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="eventSecurity" Type="System.Security.AccessControl.EventWaitHandleSecurity" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> zum Festlegen des anfänglichen Zustands auf „signalisiert“, wenn das benannte Ereignis als Ergebnis dieses Aufrufs erstellt wird; <see langword="false" /> zum Festlegen auf „nicht signalisiert“.</param>
        <param name="mode">Dies ist einer der Enummerationswerte, der bestimmt, ob das Ereignis automatisch oder manuell zurückgesetzt wird.</param>
        <param name="name">Dies ist der Name, wenn das Ereignis für andere Prozesse freigegeben werden soll; andernfalls <see langword="null" /> oder eine leere Zeichenfolge.</param>
        <param name="createdNew">Wenn diese Methode zurückgegeben wird, wird dieses Argument immer auf <see langword="true" /> festgelegt, wenn ein lokales Ereignis erstellt wird (d. h. wenn <paramref name="name" /> entweder <see langword="null" /> oder dem Feld <see cref="F:System.String.Empty" /> entspricht). Wenn <paramref name="name" /> über einen gültigen und nicht leeren Wert verfügt, wird dieses Argument auf <see langword="true" /> festgelegt, wenn das Systemereignis erstellt wird, oder es wird auf <see langword="false" /> festgelegt, wenn ein vorhandenes Systemereignis mit diesem Namen gefunden wird.</param>
        <param name="eventSecurity">Dies ist die optional anzuwendende Windows-Zugriffssteuerungssicherheit.</param>
        <summary>Hiermit wird eine <see cref="T:System.Threading.EventWaitHandle" />-Instanz abgerufen oder erstellt, sodass optional eine <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />-Instanz angegeben werden kann, um eine Festlegung bei der Ereigniserstellung zu ermöglichen.</summary>
        <returns>Dies ist ein Objekt, das wie angefordert ein Ereignis-Wait-Handle darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Wenn ein `name` erfolgreich ist und das System Ereignis bereits vorhanden ist, wird das vorhandene Ereignis zurückgegeben. Wenn `name` `null` oder <xref:System.String.Empty>ist, wird ein neues Prozess lokales Ereignis erstellt.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nur .NET Framework: Die Länge von <paramref name="name" /> überschreitet MAX_PATH (260 Zeichen).

- oder -

Nur .NET Framework: Der Enumerationswert <paramref name="mode" /> lag außerhalb des zulässigen Bereichs.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Enumerationswert <paramref name="mode" /> lag außerhalb des zulässigen Bereichs.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Ein Teil des in <paramref name="name" /> angegebenen Pfads wurde nicht gefunden.</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">Ein systemweites Synchronisierungsereignis mit der Angabe für <paramref name="name" /> wurde nicht gefunden.
Weitere Möglichkeit: Eine <see cref="T:System.Threading.EventWaitHandle" />-Klasse mit einem systemweiten Wert für <paramref name="name" /> kann nicht erstellt werden. Eine <see cref="T:System.Threading.EventWaitHandle" />-Klasse eines anderen Typs kann denselben Namen aufweisen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0fee7c4885e8d1b579011bb73bd7952ec0ae6dc1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58696267" /></Metadata><TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ReaderWriterLockSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="11c17-101">Stellt eine Sperre dar, mit der der Zugriff auf eine Ressource verwaltet wird. Mehrere Threads können hierbei Lesezugriff oder exklusiven Schreibzugriff erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-102">Verwendung <xref:System.Threading.ReaderWriterLockSlim> zum Schützen einer Ressource, die von mehreren Threads gelesen und in einem Thread gleichzeitig geschrieben.</span><span class="sxs-lookup"><span data-stu-id="11c17-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="11c17-103"><xref:System.Threading.ReaderWriterLockSlim> ermöglicht mehreren Threads, die sich im Lesemodus befindet, ermöglicht es einem Thread im Schreibmodus mit exklusiven Besitz der Sperre sein und es einem Thread ermöglicht, die Lesezugriff auf die im erweiterbaren Modus zu lesen, werden von dem der Thread den Schreibmodus, ohne dass sie dafür aktualisieren können s Lesezugriff auf die Ressource an.</span><span class="sxs-lookup"><span data-stu-id="11c17-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-104"><xref:System.Threading.ReaderWriterLockSlim> ähnelt <xref:System.Threading.ReaderWriterLock>, verfügt aber über vereinfachte Regeln für Rekursion sowie für Upgrade und Downgrade des Sperrstatus.</span><span class="sxs-lookup"><span data-stu-id="11c17-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="11c17-105"><xref:System.Threading.ReaderWriterLockSlim> vermeidet viele potenzielle Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="11c17-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="11c17-106">Darüber hinaus ist die Leistung von <xref:System.Threading.ReaderWriterLockSlim> wesentlich besser als die von <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="11c17-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="11c17-107"><xref:System.Threading.ReaderWriterLockSlim> wird für alle Neuentwicklungen empfohlen.</span><span class="sxs-lookup"><span data-stu-id="11c17-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="11c17-108">Standardmäßig werden neue Instanzen von <xref:System.Threading.ReaderWriterLockSlim> werden erstellt, mit der <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> kennzeichnen und Rekursion nicht zulassen.</span><span class="sxs-lookup"><span data-stu-id="11c17-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="11c17-109">Diese Standardrichtlinie wird für alle Neuentwicklungen empfohlen, da Rekursion unnötige Komplikationen eingeführt und wird Ihr Code anfälliger für Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="11c17-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="11c17-110">Zur Vereinfachung der Migration von vorhandenen Projekten, in denen <xref:System.Threading.Monitor> oder <xref:System.Threading.ReaderWriterLock>, können Sie die <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> Flag zum Erstellen von Instanzen der <xref:System.Threading.ReaderWriterLockSlim> , mit denen Rekursion.</span><span class="sxs-lookup"><span data-stu-id="11c17-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="11c17-111">Ein Thread kann die Sperre eingeben, in drei Modi: Modus Schreibmodus und Lesen im erweiterbaren Modus zu lesen.</span><span class="sxs-lookup"><span data-stu-id="11c17-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="11c17-112">(Im weiteren Verlauf dieses Themas, "erweiterbaren Lesemodus" wird bezeichnet als "erweiterbaren Modus" aus, und der Ausdruck "Geben Sie `x` im Modus" wird verwendet, statt den längeren Ausdruck "Geben Sie die Sperre im `x` im Modus".)</span><span class="sxs-lookup"><span data-stu-id="11c17-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="11c17-113">Unabhängig von die Rekursionsrichtlinie für die kann nur ein Thread im Schreibmodus zu einem beliebigen Zeitpunkt sein.</span><span class="sxs-lookup"><span data-stu-id="11c17-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="11c17-114">Wenn ein Thread im Schreibmodus befindet, kann kein anderer Thread die Sperre in einem anderen Modus eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="11c17-115">Nur ein Thread kann jederzeit im erweiterbaren Modus sein.</span><span class="sxs-lookup"><span data-stu-id="11c17-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="11c17-116">Eine beliebige Anzahl von Threads kann im Lesemodus befindet, und kann es möglicherweise ein Thread im erweiterbaren Modus befindet, während andere Threads befinden sich im Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="11c17-117">Dieser Typ implementiert die <xref:System.IDisposable>-Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="11c17-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="11c17-118">Nach Abschluss der Verwendung sollten Sie den Typ entweder direkt oder indirekt löschen.</span><span class="sxs-lookup"><span data-stu-id="11c17-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="11c17-119">Zum direkten Löschen des Typs rufen Sie seine <xref:System.IDisposable.Dispose%2A>-Methode in einem `try`/`catch`-Block auf.</span><span class="sxs-lookup"><span data-stu-id="11c17-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="11c17-120">Zum indirekten Löschen verwenden Sie ein Sprachkonstrukt wie `using` (in C#) oder `Using` (in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11c17-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="11c17-121">Weitere Informationen finden Sie im Abschnitt „Verwenden eines Objekts, das IDisposable implementiert“ des Themas „Die <xref:System.IDisposable>-Schnittstelle“.</span><span class="sxs-lookup"><span data-stu-id="11c17-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="11c17-122"><xref:System.Threading.ReaderWriterLockSlim> Thread-Affinität ist verwaltet werden. Das heißt, jedes <xref:System.Threading.Thread> Objekt muss eine eigene Methodenaufrufen zu aktivieren und Deaktivieren des Sperrmodi zu machen.</span><span class="sxs-lookup"><span data-stu-id="11c17-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="11c17-123">Kein Thread kann es sich um den Modus eines anderen Threads ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="11c17-124">Wenn eine <xref:System.Threading.ReaderWriterLockSlim> lässt keine Rekursion, einen Thread, versucht, die Sperre, verschiedene Ursachen haben blockieren können:</span><span class="sxs-lookup"><span data-stu-id="11c17-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="11c17-125">Ein Thread, der versucht, die im Lesemodus Blöcke eingeben, wenn andere Threads darauf warten, geben im Schreibmodus oder ein einzelnen Thread im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="11c17-126">Neue Leser blockieren, wenn der Writer, in der Warteschlange befinden, ist eine Richtlinie der Sperre-Ausgewogenheit, die Schreiber bevorzugt.</span><span class="sxs-lookup"><span data-stu-id="11c17-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="11c17-127">Die aktuelle Richtlinie für die Ausgewogenheit Salden Ausgewogenheit Lesern und Schreibern stammen, die zur Förderung der Durchsatz in den meisten häufigen Szenarien.</span><span class="sxs-lookup"><span data-stu-id="11c17-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="11c17-128">Zukünftige Versionen von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] kann neue Ausgewogenheit Richtlinien darstellen.</span><span class="sxs-lookup"><span data-stu-id="11c17-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="11c17-129">Ein Thread, der versucht, die im erweiterbaren Modus Blöcke zu geben, wenn es ist bereits ein Thread im erweiterbaren Modus befindet, wenn es Threads Schreibmodus warten, oder es gibt ein einzelnen Thread im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="11c17-130">Ein Thread, der versucht, Schreibmodus blockiert, wenn ein Thread in jedem der drei Modi vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="11c17-131">Upgrades und Downgrades Sperren</span><span class="sxs-lookup"><span data-stu-id="11c17-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="11c17-132">Zuweisung des erweiterbaren Modus ist für Fälle vorgesehen, in denen ein Thread in der Regel aus der geschützten Ressource liest, aber möglicherweise zu schreiben, wenn eine Bedingung erfüllt ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="11c17-133">Ein Thread, hat eine <xref:System.Threading.ReaderWriterLockSlim> im erweiterbaren Modus befindet, verfügt über Lesezugriff auf die geschützte Ressource und kann zum Schreiben von Modus durch Aufrufen der <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> oder <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="11c17-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="11c17-134">Da vorhanden nur ein Thread im erweiterbaren Modus zu einem Zeitpunkt sein können, kann nicht den Schreibmodus Upgrade zu einem deadlock bei Rekursion nicht zulässig ist, ist die Standardrichtlinie.</span><span class="sxs-lookup"><span data-stu-id="11c17-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="11c17-135">Unabhängig von die Rekursionsrichtlinie für die lesen ein Thread, der ursprünglich eingegebenen Modus darf nicht im erweiterbaren Modus oder im Schreibmodus befindet, aktualisieren, da dieses Muster eine hohe Wahrscheinlichkeit für Deadlocks erstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="11c17-136">Z. B. wenn zwei Threads im Lesemodus befindet, die beide geben dann den Schreibmodus, sie in einem deadlock.</span><span class="sxs-lookup"><span data-stu-id="11c17-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="11c17-137">Zuweisung des erweiterbaren Modus soll diese Deadlocks zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="11c17-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-138">Wenn es andere Threads im Lesemodus, den Thread, der Blöcke aktualisiert wird.</span><span class="sxs-lookup"><span data-stu-id="11c17-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="11c17-139">Während der Thread blockiert ist, werden die anderen Threads, die versuchen, den Lesemodus blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="11c17-140">Wenn alle Threads den Lesemodus beendet haben, gibt der erweiterbaren blockierte Thread im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="11c17-141">Wenn vorhanden, dass andere Threads darauf warten sind, geben den Schreibmodus, bleiben diese blockiert, da der einzelne Thread im erweiterbaren Modus befindet, die sie erhalten exklusiven Zugriff auf die Ressource verhindert.</span><span class="sxs-lookup"><span data-stu-id="11c17-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="11c17-142">Wenn der Thread im erweiterbaren Modus Schreibmodus beendet wird, können andere Threads, die darauf warten, Lesemodus hierzu Threads darauf warten, geben den Schreibmodus, es sei denn, es gibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="11c17-143">Der Thread im erweiterbaren Modus kann ein upgrade und downgrade auf unbestimmte Zeit, solange er der einzige Thread ist, der auf die geschützte Ressource schreibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="11c17-144">Wenn Sie zulassen, dass mehrere Threads eingeben schreiben Sie oder den erweiterbaren Modus, Sie nicht auf einem Thread im erweiterbaren Modus Monopol auf zulassen müssen.</span><span class="sxs-lookup"><span data-stu-id="11c17-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="11c17-145">Schreiben Threads, die versuchen, geben andernfalls Modus direkt werden werden auf unbestimmte Zeit blockiert, und während sie blockiert werden, andere Threads nicht Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="11c17-146">Ein Thread im erweiterbaren Modus kann downgrade auf einen schreibgeschützten Modus durch den ersten Aufruf der <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> -Methode und dem anschließenden Aufrufen der <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="11c17-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="11c17-147">Dieses Muster kann für alle Richtlinien, Sperren Rekursion, sogar <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span><span class="sxs-lookup"><span data-stu-id="11c17-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="11c17-148">Nach einem Downgrade Lesemodus kann kein Thread im erweiterbaren Modus geben Sie bis dieser den Lesemodus beendet wurde.</span><span class="sxs-lookup"><span data-stu-id="11c17-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="11c17-149">Die Sperre rekursiv eingeben</span><span class="sxs-lookup"><span data-stu-id="11c17-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="11c17-150">Sie erstellen eine <xref:System.Threading.ReaderWriterLockSlim> , die rekursive Sperren unterstützt mithilfe der <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> Konstruktor, der angibt, für die Sperre, und geben <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11c17-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-151">Die Verwendung der Rekursion wird für neue Entwicklungen nicht empfohlen, da es unnötige Komplikationen eingeführt und wird Ihr Code anfälliger für Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="11c17-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-152">Für eine <xref:System.Threading.ReaderWriterLockSlim> , mit der Rekursion, die Folgendes gilt für die Modi kann ein Thread eingeben:</span><span class="sxs-lookup"><span data-stu-id="11c17-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="11c17-153">Ein Thread im Lesemodus kann rekursiv, jedoch kann nicht im Schreibmodus oder im erweiterbaren Modus eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="11c17-154">Wenn versucht wird, dazu einen <xref:System.Threading.LockRecursionException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="11c17-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="11c17-155">Eingabe gelesen, Modus und die anschließende Eingabe im Schreibmodus oder im erweiterbaren Modus ist ein Muster mit einer starken Wahrscheinlichkeit von Deadlocks, ist es nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="11c17-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="11c17-156">Wie bereits erwähnt, wird im erweiterbaren Modus für Fälle bereitgestellt, in denen eine Sperre ein upgrade erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="11c17-157">Ein Thread im erweiterbaren Modus Schreibmodus und/oder Lesemodus eingeben kann, und Sie können eines der drei Modi rekursiv eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="11c17-158">Allerdings ein Versuch, Schreibmodus blockiert, wenn andere Threads im Lesemodus ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="11c17-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="11c17-159">Ein Thread im Schreibmodus kann geben, Lesemodus und/oder im erweiterbaren Modus befindet, und Sie können eines der drei Modi rekursiv eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="11c17-160">Ein Thread, der nicht die Sperre zugewiesen ist, kann einem beliebigen Modus eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="11c17-161">Dieser Versuch kann aus denselben Gründen als Versuch, eine nicht rekursive Sperre blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="11c17-162">Ein Thread kann der Modi, in denen, die es in beliebiger Reihenfolge eingegeben hat, beenden, solange jeder Modus genau so häufig bei der Eingabe dieser Modus beenden.</span><span class="sxs-lookup"><span data-stu-id="11c17-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="11c17-163">Wenn ein Thread versucht, einen Modus zu oft zu beenden, oder um einen Modus zu beenden, es nicht eingegeben werden wurde, eine <xref:System.Threading.SynchronizationLockException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="11c17-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="11c17-164">Status der Sperre</span><span class="sxs-lookup"><span data-stu-id="11c17-164">Lock States</span></span>  
 <span data-ttu-id="11c17-165">Möglicherweise finden Sie es nützlich, um die Sperre bezüglich ihrer Status vorstellen.</span><span class="sxs-lookup"><span data-stu-id="11c17-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="11c17-166">Ein <xref:System.Threading.ReaderWriterLockSlim> einen von vier Status: nicht zugewiesen werden, lesen, aktualisieren und zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="11c17-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="11c17-167">Nicht eingegeben wird: In diesem Status keine Threads die Sperre eingegeben haben (oder alle Threads, die Sperre beendet haben).</span><span class="sxs-lookup"><span data-stu-id="11c17-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="11c17-168">Lesen: In diesem Zustand haben einen oder mehrere Threads die Sperre für den Lesezugriff auf die geschützte Ressource eingegeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="11c17-169">Ein Thread kann die Sperre im Lesemodus Lesemodus, mithilfe der <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> oder <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> Methoden oder ein Downgrade von erweiterbaren Modus erhalten hat.</span><span class="sxs-lookup"><span data-stu-id="11c17-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="11c17-170">Upgrade: In diesem Fall wurde ein Thread die Sperre für Lesezugriff mit der Option zum Aktualisieren, um Schreibzugriff eingegeben (d. h. im erweiterbaren Modus), und NULL oder mehr Threads die Sperre für den Lesezugriff eingegeben haben.</span><span class="sxs-lookup"><span data-stu-id="11c17-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="11c17-171">Nicht mehr als einem Thread zu einem Zeitpunkt kann die Sperre mit der Option zum Aktualisieren; Es werden zusätzliche Threads, die versuchen, die Zuweisung des erweiterbaren Modus blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="11c17-172">Schreiben: In diesem Fall wurde ein Thread die Sperre für den Schreibzugriff auf die geschützte Ressource zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="11c17-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="11c17-173">Dieser Thread befindet sich exklusiven Besitz der Sperre.</span><span class="sxs-lookup"><span data-stu-id="11c17-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="11c17-174">Es wird keinem anderen Thread, der versucht, die Sperre aus irgendeinem Grund blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="11c17-175">Die folgende Tabelle beschreibt die Übergänge zwischen Zuständen der Sperre, sperren, die keine Rekursion, wenn ein Thread zulassen `t` führt die Aktion, die in der linken Spalte beschrieben.</span><span class="sxs-lookup"><span data-stu-id="11c17-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="11c17-176">Zum Zeitpunkt die Aktion dauert `t` Modus "keine" hat.</span><span class="sxs-lookup"><span data-stu-id="11c17-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="11c17-177">(Besonderen Fall, in denen `t` befindet sich im erweiterbaren Modus wird in die Fußnoten zur Tabelle beschrieben.) Die oberste Zeile gibt den ursprünglichen Status der Sperre.</span><span class="sxs-lookup"><span data-stu-id="11c17-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="11c17-178">Die Zellen beschreiben, was geschieht mit den Thread, und Änderungen an den Sperrzustand in Klammern angezeigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="11c17-179">Nicht zugewiesen (N)</span><span class="sxs-lookup"><span data-stu-id="11c17-179">Not entered (N)</span></span>|<span data-ttu-id="11c17-180">Read (R)</span><span class="sxs-lookup"><span data-stu-id="11c17-180">Read (R)</span></span>|<span data-ttu-id="11c17-181">Upgrade (U)</span><span class="sxs-lookup"><span data-stu-id="11c17-181">Upgrade (U)</span></span>|<span data-ttu-id="11c17-182">Write (W)</span><span class="sxs-lookup"><span data-stu-id="11c17-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="11c17-183">`t` fordert den Lesemodus</span><span class="sxs-lookup"><span data-stu-id="11c17-183">`t` enters read mode</span></span>|<span data-ttu-id="11c17-184">`t` Gibt ein (R).</span><span class="sxs-lookup"><span data-stu-id="11c17-184">`t` enters (R).</span></span>|<span data-ttu-id="11c17-185">`t` blockiert, wenn Threads für den Schreibmodus warten; andernfalls `t` eingibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="11c17-186">`t` blockiert, wenn Threads für den Schreibmodus warten; andernfalls `t` eingibt.<sup> 1</sup></span><span class="sxs-lookup"><span data-stu-id="11c17-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="11c17-187">`t` blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-187">`t` blocks.</span></span>|  
|<span data-ttu-id="11c17-188">`t` fordert den erweiterbaren Modus</span><span class="sxs-lookup"><span data-stu-id="11c17-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="11c17-189">`t` Gibt ein (U).</span><span class="sxs-lookup"><span data-stu-id="11c17-189">`t` enters (U).</span></span>|<span data-ttu-id="11c17-190">`t` blockiert, wenn Threads warten schreiben oder den erweiterbaren Modus; andernfalls `t` eingibt (U).</span><span class="sxs-lookup"><span data-stu-id="11c17-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="11c17-191">`t` blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-191">`t` blocks.</span></span>|<span data-ttu-id="11c17-192">`t` blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-192">`t` blocks.</span></span>|  
|<span data-ttu-id="11c17-193">`t` wird der Schreibmodus</span><span class="sxs-lookup"><span data-stu-id="11c17-193">`t` enters write mode</span></span>|<span data-ttu-id="11c17-194">`t` Gibt (W).</span><span class="sxs-lookup"><span data-stu-id="11c17-194">`t` enters (W).</span></span>|<span data-ttu-id="11c17-195">`t` blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-195">`t` blocks.</span></span>|<span data-ttu-id="11c17-196">`t` blockiert. <sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="11c17-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="11c17-197">`t` blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="11c17-198"><sup>1</sup> Wenn `t` startet, gibt es im erweiterbaren Modus befindet, im Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="11c17-199">Diese Aktion wird nie blockiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-199">This action never blocks.</span></span> <span data-ttu-id="11c17-200">Der Zustand der Sperre wird nicht geändert werden.</span><span class="sxs-lookup"><span data-stu-id="11c17-200">The lock state does not change.</span></span> <span data-ttu-id="11c17-201">(Der Thread kann dann eine Herabstufung Lesemodus beim Verlassen des erweiterbaren Modus durchführen.)</span><span class="sxs-lookup"><span data-stu-id="11c17-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="11c17-202"><sup>2</sup> Wenn `t` beginnt im erweiterbaren Modus erhalten hat, er blockiert wird, wenn im Lesemodus Threads vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="11c17-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="11c17-203">Andernfalls wird es den Schreibmodus aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="11c17-204">Der Zustand der remotesperre ändert Write (W).</span><span class="sxs-lookup"><span data-stu-id="11c17-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="11c17-205">Wenn `t` blockiert, da Threads vorhanden, im Lesemodus sind wird der Schreibmodus, sobald der letzte Thread im Lesemodus beendet wird, auch wenn Threads darauf warten, geben im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="11c17-206">Tritt eine statusänderung, da ein Thread die Sperre wieder freigibt, wird der nächste Thread, der aktiviert werden wie folgt ausgewählt:</span><span class="sxs-lookup"><span data-stu-id="11c17-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="11c17-207">Zunächst wird ein Thread, der wartet, wird im Schreibmodus, und ist bereits im erweiterbaren Modus befindet (es kann sein darf höchstens ein solcher Thread).</span><span class="sxs-lookup"><span data-stu-id="11c17-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="11c17-208">Andernfalls ein Thread, der für den Schreibmodus wartet.</span><span class="sxs-lookup"><span data-stu-id="11c17-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="11c17-209">Andernfalls ein Thread, der für den erweiterbaren Modus warten ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="11c17-210">Falls dies fehlschlägt, alle Threads, die für den Lesemodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="11c17-211">Die nachfolgende Stand der Sperre ist immer Write (W) in der ersten beiden Fälle und Upgrade (U) in den dritten Fall, unabhängig vom Status der Sperre, wenn der vorhandene Thread die statusänderung ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="11c17-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="11c17-212">Im letzten Fall ist der Status der Sperre aktualisieren (U), wenn es ein Thread im erweiterbaren Modus nach der Änderung und Read (R), andernfalls unabhängig von den vorherigen Zustand.</span><span class="sxs-lookup"><span data-stu-id="11c17-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-213">Das folgende Beispiel zeigt einen einfachen synchronisierten Cache, der Zeichenfolgen mit ganzzahligen Schlüssel enthält.</span><span class="sxs-lookup"><span data-stu-id="11c17-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="11c17-214">Eine Instanz von <xref:System.Threading.ReaderWriterLockSlim> wird zum Synchronisieren des Zugriffs auf die <xref:System.Collections.Generic.Dictionary%602> , die als interner Cache fungiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="11c17-215">Das Beispiel enthält einfache Methoden, um dem Cache hinzuzufügen, aus dem Cache löschen und aus dem Cache gelesen.</span><span class="sxs-lookup"><span data-stu-id="11c17-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="11c17-216">Um zeitüberschreitungen zu demonstrieren, umfasst das Beispiel eine Methode, die mit dem Cache hinzugefügt werden soll, nur dann, wenn sie dies in einem angegebenen Timeout ausführen kann.</span><span class="sxs-lookup"><span data-stu-id="11c17-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="11c17-217">Um die Zuweisung des erweiterbaren Modus zu demonstrieren, wird im Beispiel enthält eine Methode, die den Wert eines Schlüssels abruft und vergleicht ihn mit einem neuen Wert.</span><span class="sxs-lookup"><span data-stu-id="11c17-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="11c17-218">Wenn der Wert unverändert ist, gibt die Methode einen Status, der angibt, der keine Änderung an.</span><span class="sxs-lookup"><span data-stu-id="11c17-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="11c17-219">Wenn kein Wert für den Schlüssel gefunden wird, wird der Schlüssel/Wert-Paar eingefügt.</span><span class="sxs-lookup"><span data-stu-id="11c17-219">If no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="11c17-220">Wenn der Wert geändert wurde, wird er aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="11c17-221">Im erweiterbaren Modus kann der Thread von Lesezugriff auf den Zugriff zu schreiben, ohne das Risiko von Deadlocks bei Bedarf aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-222">Das Beispiel enthält eine geschachtelte-Enumeration, die die Rückgabewerte für die Methode gibt an, die Zuweisung des erweiterbaren Modus veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="11c17-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-223">Im Beispiel wird den Standardkonstruktor die Sperre zu erstellen, um die Rekursion nicht zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-223">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="11c17-224">Programmierung der <xref:System.Threading.ReaderWriterLockSlim> einfacher und weniger fehleranfällig ist, wenn die Sperre Rekursion nicht möglich ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="11c17-225">Der folgende code verwendet dann die `SynchronizedCache` Objekt, das ein Wörterbuch von vegetable Namen gespeichert.</span><span class="sxs-lookup"><span data-stu-id="11c17-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="11c17-226">Es werden drei Aufgaben erstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-226">It creates three tasks.</span></span> <span data-ttu-id="11c17-227">Die erste schreibt die Namen der Gemüse gespeichert, die in einem Array auf einem `SynchronizedCache` Instanz.</span><span class="sxs-lookup"><span data-stu-id="11c17-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="11c17-228">Die zweite und dritte Aufgabe werden die Namen der Gemüse, die erste in aufsteigender Reihenfolge (von niedrigen Index hoher Index), das zweite in absteigender Reihenfolge anzeigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="11c17-229">Die letzte Aufgabe sucht nach der Zeichenfolge "Cucumber", und wenn es gefunden wird, ruft der <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> Methode, um die Zeichenfolge "grüne Bean" zu ersetzen.</span><span class="sxs-lookup"><span data-stu-id="11c17-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="11c17-230">Dieser Typ ist threadsicher.</span><span class="sxs-lookup"><span data-stu-id="11c17-230">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="11c17-231">Initialisiert eine neue Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-232">Initialisiert eine neue Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse mit Standardeigenschaftswerten.</span><span class="sxs-lookup"><span data-stu-id="11c17-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-233">Ein <xref:System.Threading.ReaderWriterLockSlim> , initialisiert mit diesem Konstruktor lässt keine Rekursion.</span><span class="sxs-lookup"><span data-stu-id="11c17-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="11c17-234">Das bedeutet, dass die <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A>-Eigenschaft <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="11c17-235">Weitere Informationen zu die Rekursionsrichtlinie für die und die Auswirkungen, finden Sie unter den <xref:System.Threading.LockRecursionPolicy> Enumeration und die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-236">Das folgende Beispiel zeigt einen einfachen synchronisierten Cache, der Zeichenfolgen mit ganzzahligen Schlüssel enthält.</span><span class="sxs-lookup"><span data-stu-id="11c17-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="11c17-237">Eine Instanz von <xref:System.Threading.ReaderWriterLockSlim> wird zum Synchronisieren des Zugriffs auf die <xref:System.Collections.Generic.Dictionary%602> , die als interner Cache fungiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="11c17-238">Der parameterlose Konstruktor wird verwendet, um die Sperre zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="11c17-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="11c17-239">Das Beispiel enthält einfache Methoden, um dem Cache hinzuzufügen, aus dem Cache löschen und aus dem Cache gelesen.</span><span class="sxs-lookup"><span data-stu-id="11c17-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="11c17-240">Um zeitüberschreitungen zu demonstrieren, umfasst das Beispiel eine Methode, die mit dem Cache hinzugefügt werden soll, nur dann, wenn sie dies in einem angegebenen Timeout ausführen kann.</span><span class="sxs-lookup"><span data-stu-id="11c17-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="11c17-241">Um die Zuweisung des erweiterbaren Modus zu demonstrieren, wird im Beispiel enthält eine Methode, die den Wert eines Schlüssels abruft und vergleicht ihn mit einem neuen Wert.</span><span class="sxs-lookup"><span data-stu-id="11c17-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="11c17-242">Wenn der Wert unverändert ist, gibt die Methode einen Status, der angibt, der keine Änderung an.</span><span class="sxs-lookup"><span data-stu-id="11c17-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="11c17-243">Sie keinen Wert für den Schlüssel gefunden wird, das Schlüssel/Wert-Paar eingefügt wird.</span><span class="sxs-lookup"><span data-stu-id="11c17-243">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="11c17-244">Wenn der Wert geändert wurde, wird er aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="11c17-245">Im erweiterbaren Modus kann der Thread von Lesezugriff auf den Zugriff zu schreiben, ohne das Risiko von Deadlocks bei Bedarf aktualisieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-246">Das Beispiel enthält eine geschachtelte-Enumeration, die die Rückgabewerte für die Methode gibt an, die Zuweisung des erweiterbaren Modus veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="11c17-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-247">Im Beispiel wird den Standardkonstruktor die Sperre zu erstellen, um die Rekursion nicht zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-247">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="11c17-248">Programmierung der <xref:System.Threading.ReaderWriterLockSlim> einfacher und weniger fehleranfällig ist, wenn die Sperre Rekursion nicht möglich ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="11c17-249">Der folgende code verwendet dann die `SynchronizedCache` Objekt, das ein Wörterbuch von vegetable Namen gespeichert.</span><span class="sxs-lookup"><span data-stu-id="11c17-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="11c17-250">Es werden drei Aufgaben erstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-250">It creates three tasks.</span></span> <span data-ttu-id="11c17-251">Die erste schreibt die Namen der Gemüse gespeichert, die in einem Array auf einem `SynchronizedCache` Instanz.</span><span class="sxs-lookup"><span data-stu-id="11c17-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="11c17-252">Die zweite und dritte Aufgabe werden die Namen der Gemüse, die erste in aufsteigender Reihenfolge (von niedrigen Index hoher Index), das zweite in absteigender Reihenfolge anzeigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="11c17-253">Die letzte Aufgabe sucht nach der Zeichenfolge "Cucumber", und wenn es gefunden wird, ruft der <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> Methode, um die Zeichenfolge "grüne Bean" zu ersetzen.</span><span class="sxs-lookup"><span data-stu-id="11c17-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="F#" Value="new System.Threading.ReaderWriterLockSlim : System.Threading.LockRecursionPolicy -&gt; System.Threading.ReaderWriterLockSlim" Usage="new System.Threading.ReaderWriterLockSlim recursionPolicy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy"><span data-ttu-id="11c17-254">Einer der Enumerationswerte, der die Rekursionsrichtlinie für die Sperre angibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-254">One of the enumeration values that specifies the lock recursion policy.</span></span></param>
        <summary><span data-ttu-id="11c17-255">Initialisiert eine neue Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse unter Angabe der Rekursionsrichtlinie für die Sperre.</span><span class="sxs-lookup"><span data-stu-id="11c17-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-256">Die Rekursionsrichtlinie für die bestimmt, der Einschränkungen für Threads, die die Sperre mehr als einmal.</span><span class="sxs-lookup"><span data-stu-id="11c17-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="11c17-257">Angenommen, eine Sperre mit erstellte <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> und ein Thread verfügt über die Sperre im Lesemodus <xref:System.Threading.LockRecursionException> wird ausgelöst, wenn der Thread versucht, die Sperre im Lesemodus anzufordern.</span><span class="sxs-lookup"><span data-stu-id="11c17-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="11c17-258">Auf ähnliche Weise, wenn ein Thread die Sperre im Schreibmodus zugewiesen ist <xref:System.Threading.LockRecursionException> wird ausgelöst, wenn der Thread versucht, die Sperre in einem anderen Modus erneut eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-259">Ein Thread im erweiterbaren Modus kann den Schreibmodus oder unabhängig von der Einstellung Rekursion Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="11c17-260">Unabhängig von die Rekursionsrichtlinie für die lesen ein Thread, der ursprünglich eingegebenen Modus darf nicht im erweiterbaren Modus oder im Schreibmodus befindet, aktualisieren, da dieses Muster eine hohe Wahrscheinlichkeit für Deadlocks erstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-261">Weitere Informationen zu die Rekursionsrichtlinie für die und die Auswirkungen, finden Sie unter den <xref:System.Threading.LockRecursionPolicy> Enumeration und die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-262">Das folgende Beispiel zeigt zwei Ausnahme Szenarien, die von abhängig ist die <xref:System.Threading.LockRecursionPolicy> festlegen und eine, die nicht der Fall ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="11c17-263">Im ersten Szenario wird der Thread erhält den Lesemodus und versucht dann rekursiv.</span><span class="sxs-lookup"><span data-stu-id="11c17-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="11c17-264">Wenn die <xref:System.Threading.ReaderWriterLockSlim> wird erstellt, indem Sie mit dem Standardkonstruktor, der Rekursionsrichtlinie für die legt, um fest <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="11c17-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="11c17-265">Wenn <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> dient zum Erstellen der <xref:System.Threading.ReaderWriterLockSlim>, wird keine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="11c17-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="11c17-266">Im zweiten Szenario erhält des Threads den Lesemodus, und klicken Sie dann versucht, geben im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="11c17-267"><xref:System.Threading.LockRecursionException> unabhängig von die Rekursionsrichtlinie der Sperre wird ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="11c17-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="11c17-268">Der folgende code verwendet dann die `SynchronizedCache` Objekt, das ein Wörterbuch von vegetable Namen gespeichert.</span><span class="sxs-lookup"><span data-stu-id="11c17-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="11c17-269">Es werden drei Aufgaben erstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-269">It creates three tasks.</span></span> <span data-ttu-id="11c17-270">Die erste schreibt die Namen der Gemüse gespeichert, die in einem Array auf einem `SynchronizedCache` Instanz.</span><span class="sxs-lookup"><span data-stu-id="11c17-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="11c17-271">Die zweite und dritte Aufgabe werden die Namen der Gemüse, die erste in aufsteigender Reihenfolge (von niedrigen Index hoher Index), das zweite in absteigender Reihenfolge anzeigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="11c17-272">Die letzte Aufgabe sucht nach der Zeichenfolge "Cucumber", und wenn es gefunden wird, ruft der <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> Methode, um die Zeichenfolge "grüne Bean" zu ersetzen.</span><span class="sxs-lookup"><span data-stu-id="11c17-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-273">Ruft die Gesamtzahl von eindeutigen Threads ab, denen die Sperre im Lesemodus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-273">Gets the total number of unique threads that have entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="11c17-274">Die Anzahl von eindeutigen Threads, denen die Sperre im Lesemodus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-274">The number of unique threads that have entered the lock in read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-275">Ein Thread wird nur einmal gezählt, auch wenn die Sperre lässt das Rekursion verwendet und der Thread wurde im Lesemodus mehrmals.</span><span class="sxs-lookup"><span data-stu-id="11c17-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="11c17-276">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-277">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-278">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-279">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> Eigenschaft, um einen Ereignisprotokolleintrag generiert, wenn die Anzahl der Threads im Lesemodus einen Schwellenwert überschreitet.</span><span class="sxs-lookup"><span data-stu-id="11c17-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="readerWriterLockSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-280">Gibt alle von der aktuellen Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse verwendeten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="11c17-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-281">Rufen Sie <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> auf, wenn Sie <xref:System.Threading.ReaderWriterLockSlim> nicht mehr benötigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="11c17-282">Die <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>-Methode bewirkt, dass <xref:System.Threading.ReaderWriterLockSlim> nicht mehr verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="11c17-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="11c17-283">Nach dem Aufruf <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.Threading.ReaderWriterLockSlim> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Threading.ReaderWriterLockSlim> belegt wurde.</span><span class="sxs-lookup"><span data-stu-id="11c17-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="11c17-284">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="11c17-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-285">Rufen Sie immer <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> bereits vor der Veröffentlichung des letzten Verweis auf die <xref:System.Threading.ReaderWriterLockSlim> Objekt.</span><span class="sxs-lookup"><span data-stu-id="11c17-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="11c17-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> ist größer als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="11c17-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="11c17-287">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-287">-or-</span></span> 
 <span data-ttu-id="11c17-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> ist größer als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="11c17-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="11c17-289">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-289">-or-</span></span> 
 <span data-ttu-id="11c17-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> ist größer als 0 (null).</span><span class="sxs-lookup"><span data-stu-id="11c17-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-291">Versucht, die Sperre im Lesemodus zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-291">Tries to enter the lock in read mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-292">Diese Methode blockiert der aufrufende Thread die Sperre eintritt, und daher möglicherweise nie zurück.</span><span class="sxs-lookup"><span data-stu-id="11c17-292">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="11c17-293">Verwenden der <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> Methode, um für ein angegebenes Intervall blockiert, und dann zurück, wenn der aufrufende Thread nicht im Lesemodus, während dieses Intervalls.</span><span class="sxs-lookup"><span data-stu-id="11c17-293">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="11c17-294">Mehrere Threads können Lesemodus zur gleichen Zeit eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-294">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="11c17-295">Wenn ein oder mehrere Threads Schreibmodus warten, einen Thread aufruft der <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> Methode blockiert, bis diese Threads haben ein Timeout oder im Schreibmodus befindet und wieder beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-295">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-296">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im Lesemodus zugewiesen ist rekursiv, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-296">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="11c17-297">Höchstens ein Thread kann im erweiterbaren Modus sein, während andere Threads im schreibgeschützten Modus befinden.</span><span class="sxs-lookup"><span data-stu-id="11c17-297">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="11c17-298">Wenn zusätzliche Threads den erweiterbaren Modus warten und es keine Threads sind Schreibmodus warten, threads diesen Aufruf der <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> Methode geben Sie im Lesemodus sofort und nicht blockieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-298">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-299">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> Methode, die Sperre im Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-299">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="11c17-300">Die Methode, die im Beispiel gezeigte Ruft ab, der Wert mit einem Schlüssel zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-300">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="11c17-301">Wenn der Schlüssel nicht die von der inneren Ausnahme gefunden wird, <xref:System.Collections.Generic.Dictionary%602> ist zulässig, um die Methode zu beenden.</span><span class="sxs-lookup"><span data-stu-id="11c17-301">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="11c17-302">Ein `finally` Block wird zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> -Methode, um sicherzustellen, dass der Aufrufer den Lesemodus beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-302">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="11c17-303">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-303">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-304">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist gleich <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat versucht, die Lesesperre zu erlangen, obwohl er die Lesesperre bereits besitzt.</span><span class="sxs-lookup"><span data-stu-id="11c17-304">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span></span>  
  
<span data-ttu-id="11c17-305">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-305">-or-</span></span> 
<span data-ttu-id="11c17-306">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist gleich <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat versucht, die Lesesperre zu erlangen, obwohl er die Schreibsperre bereits besitzt.</span><span class="sxs-lookup"><span data-stu-id="11c17-306">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span></span>  
  
<span data-ttu-id="11c17-307">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-307">-or-</span></span> 
<span data-ttu-id="11c17-308">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-308">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-309">Dieser Grenzwert ist so groß, dass diese Ausnahme nie für Anwendungen auftreten sollte.</span><span class="sxs-lookup"><span data-stu-id="11c17-309">This limit is so large that applications should never encounter this exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-310">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-310">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-311">Versucht, die Sperre im erweiterbaren Modus zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-311">Tries to enter the lock in upgradeable mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-312">Diese Methode blockiert der aufrufende Thread die Sperre eintritt, und daher möglicherweise nie zurück.</span><span class="sxs-lookup"><span data-stu-id="11c17-312">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="11c17-313">Verwenden der <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> Methode, um den block für ein angegebenes Intervall aus, und klicken Sie dann zurück, wenn der aufrufende Thread nicht im erweiterbaren Modus während des Intervalls.</span><span class="sxs-lookup"><span data-stu-id="11c17-313">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="11c17-314">Erweiterbaren Modus verwenden, wenn ein Thread in der Regel die Ressource zugreift, die durch geschützt ist die <xref:System.Threading.ReaderWriterLockSlim> in im Lesemodus befindet, aber möglicherweise müssen Sie Schreibmodus eingeben, wenn bestimmte Bedingungen erfüllt sind.</span><span class="sxs-lookup"><span data-stu-id="11c17-314">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="11c17-315">Ein Thread im erweiterbaren Modus kann Lesemodus oder den Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-315">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="11c17-316">Nur ein Thread kann im erweiterbaren Modus zu jedem Zeitpunkt eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-316">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="11c17-317">Wenn ein Thread im erweiterbaren Modus ist, und es keine Threads sind Schreibmodus warten, kann eine beliebige Anzahl von anderen Threads Lesemodus eingeben, auch wenn Threads, die den erweiterbaren Modus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-317">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-318">Wenn ein oder mehrere Threads Schreibmodus warten, einen Thread aufruft der <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> Methode blockiert, bis diese Threads haben ein Timeout oder im Schreibmodus befindet und wieder beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-318">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-319">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im erweiterbaren Modus zugewiesen ist rekursiv im erweiterbaren Modus befindet, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-319">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-320">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> Methode, um die Sperre im erweiterbaren Modus erhalten hat.</span><span class="sxs-lookup"><span data-stu-id="11c17-320">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="11c17-321">Ein `finally` Block wird zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> -Methode, um sicherzustellen, dass der Aufrufer den erweiterbaren Modus beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-321">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-322">Die Methode, die im Beispiel gezeigte Ruft den Wert, der einem Schlüssel zugeordnet und vergleicht ihn mit einem neuen Wert.</span><span class="sxs-lookup"><span data-stu-id="11c17-322">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="11c17-323">Wenn der Wert unverändert ist, gibt die Methode einen Status, der angibt, der keine Änderung an.</span><span class="sxs-lookup"><span data-stu-id="11c17-323">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="11c17-324">Sie keinen Wert für den Schlüssel gefunden wird, das Schlüssel/Wert-Paar eingefügt wird.</span><span class="sxs-lookup"><span data-stu-id="11c17-324">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="11c17-325">Wenn der Wert geändert wurde, wird er aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-325">If the value has changed, it is updated.</span></span> <span data-ttu-id="11c17-326">Im erweiterbaren Modus befindet, ermöglicht den Thread den Schreibmodus nach Bedarf, ohne das Risiko von Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="11c17-326">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-327">Im Beispiel wird den Standardkonstruktor die Sperre zu erstellen, um die Rekursion nicht zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-327">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="11c17-328">Programmierung der <xref:System.Threading.ReaderWriterLockSlim> einfacher und weniger fehleranfällig ist, wenn die Sperre Rekursion nicht möglich ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-328">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="11c17-329">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-329">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-330">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und dem aktuellen Thread wurde die Sperre bereits in einem der Modi zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="11c17-330">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="11c17-331">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-331">-or-</span></span> 
<span data-ttu-id="11c17-332">Der aktuelle Thread befindet sich im Lesemodus, sodass durch eine Zuweisung des erweiterbaren Modus die Möglichkeit eines Deadlocks entstehen würde.</span><span class="sxs-lookup"><span data-stu-id="11c17-332">The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="11c17-333">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-333">-or-</span></span> 
<span data-ttu-id="11c17-334">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-334">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-335">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-335">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-336">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-336">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberSignature Language="F#" Value="member this.EnterWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-337">Versucht, die Sperre im Schreibmodus zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-337">Tries to enter the lock in write mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-338">Diese Methode blockiert der aufrufende Thread die Sperre eintritt, und daher möglicherweise nie zurück.</span><span class="sxs-lookup"><span data-stu-id="11c17-338">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="11c17-339">Verwenden der <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> Methode, um für ein angegebenes Intervall blockieren und dann zurück, wenn sich der aufrufende Thread nicht im Schreibmodus während dieses Intervalls.</span><span class="sxs-lookup"><span data-stu-id="11c17-339">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="11c17-340">Wenn andere Threads die Sperre im Lesemodus zugewiesen haben, einen Thread, der Aufrufe der <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> Methode blockiert, bis die Threads beendet haben im Lesemodus befindet.</span><span class="sxs-lookup"><span data-stu-id="11c17-340">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="11c17-341">Wenn Threads Schreibmodus warten, Timeout zusätzliche Threads, die versuchen, geben im Lesemodus oder im erweiterbaren Modus blockieren, bis alle Threads darauf warten, Schreibmodus haben oder im Schreibmodus befindet und wieder beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-341">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-342">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im Schreibmodus zugewiesen ist Sperre, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-342">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-343">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> Methode, um die Sperre im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-343">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="11c17-344">Die Methode, die im Beispiel gezeigt hinzugefügt den synchronisierten Cache neues Schlüssel/Wert-Paar.</span><span class="sxs-lookup"><span data-stu-id="11c17-344">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="11c17-345">Wenn der Schlüssel bereits im Cache, der von der inneren Ausnahme <xref:System.Collections.Generic.Dictionary%602> ist zulässig, um die Methode zu beenden.</span><span class="sxs-lookup"><span data-stu-id="11c17-345">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="11c17-346">Ein `finally` Block wird zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> -Methode, um sicherzustellen, dass der Aufrufer den Schreibmodus beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-346">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="11c17-347">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-347">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-348">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und dem aktuellen Thread wurde die Sperre bereits in einem der Modi zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="11c17-348">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="11c17-349">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-349">-or-</span></span> 
<span data-ttu-id="11c17-350">Der aktuelle Thread befindet sich im Lesemodus und besitzt noch keine Schreibsperre, sodass durch eine Zuweisung des Schreibmodus die Möglichkeit eines Deadlocks entstehen würde.</span><span class="sxs-lookup"><span data-stu-id="11c17-350">The current thread has entered read mode and doesn't already own a write lock, so trying to enter the lock in write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="11c17-351">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-351">-or-</span></span> 
<span data-ttu-id="11c17-352">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-352">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-353">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-353">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-354">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-354">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-355">Verringert die Rekursionszahl für den Lesemodus oder beendet den Lesemodus, wenn das Rekursionsergebnis 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-355">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-356">Diese Methode ist nicht die Rekursionsreihenfolge berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-356">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="11c17-357">Z. B. wenn ein Thread eine im erweiterbaren Modus Sperre, und klicken Sie dann die Sperre im Lesemodus befindet, die Reihenfolge, in der der Thread beendet die beiden Modi wird, spielt keine Rolle.</span><span class="sxs-lookup"><span data-stu-id="11c17-357">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="11c17-358">Wenn eine Sperre Rekursionen zulässt, kann ein Thread Geben Sie die Sperre im Schreibmodus und geben Sie es rekursiv im Lesemodus befindet; die Reihenfolge, in dem der Thread beendet wird, im Lesemodus befindet, und schreiben, ist nicht von Bedeutung.</span><span class="sxs-lookup"><span data-stu-id="11c17-358">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="11c17-359">Freigeben der Sperre kann andere wartende Threads zu signalisieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-359">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-360">Das folgende Beispiel zeigt, wie Sie mit einem `finally` Block zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> -Methode, um sicherzustellen, dass der Aufrufer den Lesemodus beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-360">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="11c17-361">Die Methode, die im Beispiel gezeigte Ruft ab, der Wert mit einem Schlüssel zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-361">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="11c17-362">Wenn der Schlüssel nicht die von der inneren Ausnahme gefunden wird, <xref:System.Collections.Generic.Dictionary%602> ist zulässig, um die Methode zu beenden.</span><span class="sxs-lookup"><span data-stu-id="11c17-362">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="11c17-363">Die <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> Methode wird verwendet, um den Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-363">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="11c17-364">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-364">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="11c17-365">Der aktuelle Thread befindet sich nicht im Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-365">The current thread has not entered the lock in read mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-366">Verringert die Rekursionszahl für den erweiterbaren Modus oder beendet den erweiterbaren Modus, wenn das Rekursionsergebnis 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-366">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-367">Diese Methode ist nicht die Rekursionsreihenfolge berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-367">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="11c17-368">Wenn ein Thread eine im erweiterbaren Modus Sperre, und klicken Sie dann die Sperre im Schreibmodus, spielt die Reihenfolge, in der die beiden Modi der Thread beendet wird z. B. keine Rolle.</span><span class="sxs-lookup"><span data-stu-id="11c17-368">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="11c17-369">Wenn eine Sperre Rekursionen zulässt, kann ein Thread der Sperre im Schreibmodus und geben Sie es rekursiv im erweiterbaren Modus; die Reihenfolge, in der der Thread den erweiterbaren Modus und Write-Modus beendet, werden, spielt keine Rolle.</span><span class="sxs-lookup"><span data-stu-id="11c17-369">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="11c17-370">Freigeben der Sperre kann andere wartende Threads zu signalisieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-370">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-371">Das folgende Beispiel zeigt, wie Sie mit einem `finally` Block zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> -Methode, um sicherzustellen, dass der Aufrufer den erweiterbaren Modus beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-371">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-372">Die Methode, die im Beispiel gezeigte Ruft den Wert, der einem Schlüssel zugeordnet und vergleicht ihn mit einem neuen Wert.</span><span class="sxs-lookup"><span data-stu-id="11c17-372">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="11c17-373">Wenn der Wert unverändert ist, gibt die Methode einen Status, der angibt, der keine Änderung an.</span><span class="sxs-lookup"><span data-stu-id="11c17-373">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="11c17-374">Sie keinen Wert für den Schlüssel gefunden wird, das Schlüssel/Wert-Paar eingefügt wird.</span><span class="sxs-lookup"><span data-stu-id="11c17-374">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="11c17-375">Wenn der Wert geändert wurde, wird er aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="11c17-375">If the value has changed, it is updated.</span></span> <span data-ttu-id="11c17-376">Im erweiterbaren Modus befindet, ermöglicht den Thread den Schreibmodus nach Bedarf, ohne das Risiko von Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="11c17-376">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-377">Im Beispiel wird den Standardkonstruktor die Sperre zu erstellen, um die Rekursion nicht zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-377">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="11c17-378">Programmierung der <xref:System.Threading.ReaderWriterLockSlim> einfacher und weniger fehleranfällig ist, wenn die Sperre Rekursion nicht möglich ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-378">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="11c17-379">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-379">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="11c17-380">Der aktuelle Thread befindet sich nicht im erweiterbaren Modus.</span><span class="sxs-lookup"><span data-stu-id="11c17-380">The current thread has not entered the lock in upgradeable mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberSignature Language="F#" Value="member this.ExitWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11c17-381">Verringert die Rekursionszahl für den Schreibmodus oder beendet den Schreibmodus, wenn das Rekursionsergebnis 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-381">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-382">Diese Methode ist nicht die Rekursionsreihenfolge berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-382">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="11c17-383">Wenn ein Thread eine im erweiterbaren Modus Sperre, und klicken Sie dann die Sperre im Schreibmodus, spielt die Reihenfolge, in der die beiden Modi der Thread beendet wird z. B. keine Rolle.</span><span class="sxs-lookup"><span data-stu-id="11c17-383">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="11c17-384">Wenn eine Sperre Rekursionen zulässt, kann ein Thread Geben Sie die Sperre im Schreibmodus und geben Sie es rekursiv im Lesemodus befindet; die Reihenfolge, in dem der Thread beendet wird, im Lesemodus befindet, und schreiben, ist nicht von Bedeutung.</span><span class="sxs-lookup"><span data-stu-id="11c17-384">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="11c17-385">Freigeben der Sperre kann andere wartende Threads zu signalisieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-385">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-386">Das folgende Beispiel zeigt, wie Sie mit einem `finally` Block zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> -Methode, um sicherzustellen, dass der Aufrufer den Schreibmodus beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-386">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="11c17-387">Die Methode, die im Beispiel gezeigt hinzugefügt den synchronisierten Cache neues Schlüssel/Wert-Paar.</span><span class="sxs-lookup"><span data-stu-id="11c17-387">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="11c17-388">Wenn der Schlüssel bereits im Cache, der von der inneren Ausnahme <xref:System.Collections.Generic.Dictionary%602> ist zulässig, um die Methode zu beenden.</span><span class="sxs-lookup"><span data-stu-id="11c17-388">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="11c17-389">Die <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> Methode wird verwendet, um die Sperre im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-389">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="11c17-390">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-390">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="11c17-391">Der aktuelle Thread befindet sich nicht im Schreibmodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-391">The current thread has not entered the lock in write mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-392">Ruft einen Wert ab, der angibt, ob die Sperre dem aktuellen Thread im Lesemodus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-392">Gets a value that indicates whether the current thread has entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="11c17-393"><see langword="true" />, wenn sich der aktuelle Thread im Lesemodus befindet, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-393"><see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-394">Diese Eigenschaft sollte für die Verwendung im Assert-Vorgänge oder für andere Zwecke Debuggen.</span><span class="sxs-lookup"><span data-stu-id="11c17-394">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="11c17-395">Verwenden Sie es nicht um den Fluss der Ausführung des Programms zu steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-395">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-396">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> Eigenschaft eine Bestätigung generiert, wenn der aktuelle Thread im Lesemodus unerwartet beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-396">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUpgradeableReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-397">Ruft einen Wert ab, der angibt, ob die Sperre dem aktuellen Thread im erweiterbaren Modus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-397">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="11c17-398"><see langword="true" />, wenn sich der aktuelle Thread im erweiterbaren Modus befindet, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-398"><see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-399">Diese Eigenschaft sollte für die Verwendung im Assert-Vorgänge oder für andere Zwecke Debuggen.</span><span class="sxs-lookup"><span data-stu-id="11c17-399">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="11c17-400">Verwenden Sie es nicht um den Fluss der Ausführung des Programms zu steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-400">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-401">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> Eigenschaft eine Bestätigung generiert, wenn der aktuelle Thread im erweiterbaren Modus unerwartet eingegeben hat.</span><span class="sxs-lookup"><span data-stu-id="11c17-401">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-402">Ruft einen Wert ab, der angibt, ob die Sperre dem aktuellen Thread im Schreibmodus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-402">Gets a value that indicates whether the current thread has entered the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="11c17-403"><see langword="true" />, wenn sich der aktuelle Thread im Schreibmodus befindet, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-403"><see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-404">Diese Eigenschaft sollte für die Verwendung im Assert-Vorgänge oder für andere Zwecke Debuggen.</span><span class="sxs-lookup"><span data-stu-id="11c17-404">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="11c17-405">Verwenden Sie es nicht um den Fluss der Ausführung des Programms zu steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-405">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-406">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> Eigenschaft eine Bestätigung generiert, wenn der aktuelle Thread im Schreibmodus unerwartet eingegeben hat.</span><span class="sxs-lookup"><span data-stu-id="11c17-406">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursionPolicy : System.Threading.LockRecursionPolicy" Usage="System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-407">Ruft einen Wert ab, der die Rekursionsrichtlinie für das aktuelle <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt angibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-407">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="11c17-408">Einer der Enumerationswerte, der die Rekursionsrichtlinie für die Sperre angibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-408">One of the enumeration values that specifies the lock recursion policy.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-409">Die Rekursionsrichtlinie für die bestimmt, der Einschränkungen für Threads, die die Sperre mehr als einmal.</span><span class="sxs-lookup"><span data-stu-id="11c17-409">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="11c17-410">Angenommen, eine Sperre mit erstellte <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> und ein Thread verfügt über die Sperre im Lesemodus <xref:System.Threading.LockRecursionException> wird ausgelöst, wenn der Thread versucht, die Sperre im Lesemodus anzufordern.</span><span class="sxs-lookup"><span data-stu-id="11c17-410">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-411">Ein Thread im erweiterbaren Modus kann den Schreibmodus oder unabhängig von der Einstellung Rekursion Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-411">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="11c17-412">Unabhängig von die Rekursionsrichtlinie für die lesen ein Thread, der ursprünglich eingegebenen Modus darf nicht im erweiterbaren Modus oder im Schreibmodus befindet, aktualisieren, da dieses Muster eine hohe Wahrscheinlichkeit für Deadlocks erstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-412">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="11c17-413">Weitere Informationen zu die Rekursionsrichtlinie für die und die Auswirkungen, finden Sie unter den <xref:System.Threading.LockRecursionPolicy> Enumeration und die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-413">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-414">Ruft einen Wert ab, der als Indikator für eine Rekursion angibt, wie oft dem aktuellen Thread die Sperre im Lesemodus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-414">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="11c17-415">0 (null) Wenn der aktuelle Thread nicht im Lesemodus befindet, 1, wenn der Thread im Lesemodus befindet, aber nicht angegeben, die rekursiv oder *n* Wenn sich der Thread die Sperre rekursiv *n* - 1 Mal.</span><span class="sxs-lookup"><span data-stu-id="11c17-415">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-416">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-416">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-417">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-417">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-418">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-418">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-419">Ruft einen Wert ab, der als Indikator für eine Rekursion angibt, wie oft dem aktuellen Thread die Sperre im erweiterbaren Modus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-419">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="11c17-420">0, wenn sich der aktuelle Thread nicht im erweiterbaren Modus, 1, wenn der Thread im erweiterbaren Modus und verfügt über diesen nicht rekursiv oder *n* , wenn der Thread im erweiterbaren Modus-rekursiv angefordert hat *n* - 1 wie oft.</span><span class="sxs-lookup"><span data-stu-id="11c17-420">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-421">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-421">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-422">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-422">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-423">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-423">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-424">Ruft einen Wert ab, der als Indikator für eine Rekursion angibt, wie oft dem aktuellen Thread die Sperre im Schreibmodus zugewiesen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-424">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="11c17-425">0, wenn sich der aktuelle Thread nicht im, 1, wenn der Thread im Schreibmodus befindet und nicht diesen rekursiv, Schreibmodus oder *n* , wenn der Thread die Sperre eingegeben hat *n* - 1 Mal.</span><span class="sxs-lookup"><span data-stu-id="11c17-425">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-426">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-426">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-427">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-427">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-428">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-428">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="11c17-429">Versucht, die Sperre im Lesemodus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-429">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="11c17-430">Die Zeit in Millisekunden, die gewartet wird, oder -1 (<see cref="F:System.Threading.Timeout.Infinite" />), um unbegrenzt zu warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-430">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="11c17-431">Versucht, die Sperre im Lesemodus zu erhalten. Optional wird ein ganzzahliger Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-431">Tries to enter the lock in read mode, with an optional integer time-out.</span></span></summary>
        <returns><span data-ttu-id="11c17-432"><see langword="true" />, wenn der aufrufende Thread den Lesemodus erhalten hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-432"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-433">Wenn `millisecondsTimeout` ist 0 (null), diese Methode überprüft den Sperrstatus und gibt `false` sofort, wenn Sie der gewünschte Zustand nicht verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-433">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="11c17-434">Mehrere Threads können Lesemodus zur gleichen Zeit eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-434">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="11c17-435">Wenn ein oder mehrere Threads Schreibmodus warten, einen Thread aufruft der <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> Methode blockiert, bis diese Threads müssen entweder ein Timeout oder im Schreibmodus befindet und wieder beendet, oder bis zum Ablauf des Timeoutintervalls des aufrufenden Threads.</span><span class="sxs-lookup"><span data-stu-id="11c17-435">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-436">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im Lesemodus zugewiesen ist rekursiv, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-436">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="11c17-437">Während andere Threads befinden sich im Lesemodus befindet, kann ein Thread im erweiterbaren Modus befinden.</span><span class="sxs-lookup"><span data-stu-id="11c17-437">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="11c17-438">Wenn zusätzliche Threads den erweiterbaren Modus warten und es keine Threads sind Schreibmodus warten, threads diesen Aufruf der <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> Methode geben Sie im Lesemodus sofort und nicht blockieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-438">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-439">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-439">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="11c17-440">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-440">-or-</span></span> 
<span data-ttu-id="11c17-441">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-441">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-442">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-442">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11c17-443">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ, aber ungleich <see cref="F:System.Threading.Timeout.Infinite" /> (-1), der den einzigen zulässigen negativen Wert darstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-443">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-444">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-444">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="11c17-445">Der Zeitintervall bis zum Timeout, oder -1 Millisekunden, um unbegrenzt zu warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-445">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="11c17-446">Versucht, die Sperre im Lesemodus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-446">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="11c17-447"><see langword="true" />, wenn der aufrufende Thread den Lesemodus erhalten hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-447"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-448">Wenn `timeout` ist 0 (null), diese Methode überprüft den Sperrstatus und gibt `false` sofort, wenn Sie der gewünschte Zustand nicht verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-448">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="11c17-449">Mehrere Threads können die Sperre im Lesemodus zur gleichen Zeit eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-449">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="11c17-450">Wenn ein oder mehrere Threads auf Schreibmodus eine, einen Thread aufruft der <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> Methode blockiert, bis diese Threads müssen entweder ein Timeout oder im Schreibmodus befindet und wieder beendet, oder bis zum Ablauf des Timeoutintervalls des aufrufenden Threads.</span><span class="sxs-lookup"><span data-stu-id="11c17-450">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-451">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im Lesemodus zugewiesen ist rekursiv, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-451">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="11c17-452">Während andere Threads befinden sich im Lesemodus befindet, kann ein Thread im erweiterbaren Modus befinden.</span><span class="sxs-lookup"><span data-stu-id="11c17-452">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="11c17-453">Wenn zusätzliche Threads den erweiterbaren Modus warten und es keine Threads sind Schreibmodus warten, threads diesen Aufruf der <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> Methode geben Sie im Lesemodus sofort und nicht blockieren.</span><span class="sxs-lookup"><span data-stu-id="11c17-453">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-454">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-454">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="11c17-455">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-455">-or-</span></span> 
<span data-ttu-id="11c17-456">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-456">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-457">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-457">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11c17-458">Der Wert von <paramref name="timeout" /> ist negativ, aber ungleich -1 Millisekunden. (Dies ist der einzige zulässige negative Wert.)</span><span class="sxs-lookup"><span data-stu-id="11c17-458">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="11c17-459">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-459">-or-</span></span> 
<span data-ttu-id="11c17-460">Der Wert von <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="11c17-460">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-461">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-461">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="11c17-462">Versucht, die Sperre im erweiterbaren Modus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-462">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="11c17-463">Die Zeit in Millisekunden, die gewartet wird, oder -1 (<see cref="F:System.Threading.Timeout.Infinite" />), um unbegrenzt zu warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-463">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="11c17-464">Versucht, die Sperre im erweiterbaren Modus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-464">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="11c17-465"><see langword="true" />, wenn der aufrufende Thread den erweiterbaren Modus erhalten hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-465"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-466">Wenn `millisecondsTimeout` ist 0 (null), diese Methode überprüft den Sperrstatus und gibt `false` sofort, wenn Sie der gewünschte Zustand nicht verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-466">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="11c17-467">Erweiterbaren Modus verwenden, wenn ein Thread in der Regel die Ressource zugreift, die durch geschützt ist die <xref:System.Threading.ReaderWriterLockSlim> in im Lesemodus befindet, aber möglicherweise müssen Sie Schreibmodus eingeben, wenn bestimmte Bedingungen erfüllt sind.</span><span class="sxs-lookup"><span data-stu-id="11c17-467">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="11c17-468">Ein Thread im erweiterbaren Modus kann den Schreibmodus oder Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-468">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="11c17-469">Nur ein Thread kann eine Sperre im erweiterbaren Modus zu einem bestimmten Zeitpunkt eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-469">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="11c17-470">Wenn ein Thread im erweiterbaren Modus ist, und es keine Threads sind Schreibmodus warten, kann eine beliebige Anzahl von anderen Threads Lesemodus eingeben, auch wenn Threads, die den erweiterbaren Modus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-470">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-471">Wenn ein oder mehrere Threads Schreibmodus warten, einen Thread aufruft der <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> Methode blockiert, bis diese Threads müssen entweder ein Timeout oder im Schreibmodus befindet und wieder beendet, oder bis zum Ablauf des Timeoutintervalls des aufrufenden Threads.</span><span class="sxs-lookup"><span data-stu-id="11c17-471">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-472">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im erweiterbaren Modus zugewiesen ist rekursiv im erweiterbaren Modus befindet, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-472">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-473">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-473">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="11c17-474">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-474">-or-</span></span> 
<span data-ttu-id="11c17-475">Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des erweiterbaren Modus die Möglichkeit eines Deadlocks entstehen würde.</span><span class="sxs-lookup"><span data-stu-id="11c17-475">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="11c17-476">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-476">-or-</span></span> 
<span data-ttu-id="11c17-477">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-477">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-478">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-478">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11c17-479">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ, aber ungleich <see cref="F:System.Threading.Timeout.Infinite" /> (-1), der den einzigen zulässigen negativen Wert darstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-479">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-480">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-480">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="11c17-481">Der Zeitintervall bis zum Timeout, oder -1 Millisekunden, um unbegrenzt zu warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-481">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="11c17-482">Versucht, die Sperre im erweiterbaren Modus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-482">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="11c17-483"><see langword="true" />, wenn der aufrufende Thread den erweiterbaren Modus erhalten hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-483"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-484">Wenn `timeout` ist 0 (null), diese Methode überprüft den Sperrstatus und gibt `false` sofort, wenn Sie der gewünschte Zustand nicht verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-484">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="11c17-485">Erweiterbaren Modus verwenden, wenn ein Thread, die durch geschützte Ressource in der Regel greift auf die <xref:System.Threading.ReaderWriterLockSlim> in im Lesemodus befindet, aber möglicherweise müssen Sie Schreibmodus eingeben, wenn bestimmte Bedingungen erfüllt sind.</span><span class="sxs-lookup"><span data-stu-id="11c17-485">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="11c17-486">Ein Thread im erweiterbaren Modus kann den Schreibmodus oder Lesemodus.</span><span class="sxs-lookup"><span data-stu-id="11c17-486">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="11c17-487">Nur ein Thread kann eine Sperre im erweiterbaren Modus zu einem bestimmten Zeitpunkt eingeben.</span><span class="sxs-lookup"><span data-stu-id="11c17-487">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="11c17-488">Wenn ein Thread im erweiterbaren Modus ist, und es keine Threads sind Schreibmodus warten, kann eine beliebige Anzahl von anderen Threads Lesemodus eingeben, auch wenn Threads, die den erweiterbaren Modus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-488">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="11c17-489">Wenn ein oder mehrere Threads Schreibmodus warten, einen Thread aufruft der <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> Methode blockiert, bis diese Threads müssen entweder ein Timeout oder im Schreibmodus befindet und wieder beendet, oder bis zum Ablauf des Timeoutintervalls des aufrufenden Threads.</span><span class="sxs-lookup"><span data-stu-id="11c17-489">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-490">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im erweiterbaren Modus zugewiesen ist rekursiv im erweiterbaren Modus befindet, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-490">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-491">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-491">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="11c17-492">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-492">-or-</span></span> 
<span data-ttu-id="11c17-493">Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des erweiterbaren Modus die Möglichkeit eines Deadlocks entstehen würde.</span><span class="sxs-lookup"><span data-stu-id="11c17-493">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="11c17-494">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-494">-or-</span></span> 
<span data-ttu-id="11c17-495">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-495">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-496">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-496">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11c17-497">Der Wert von <paramref name="timeout" /> ist negativ, aber ungleich -1 Millisekunden. (Dies ist der einzige zulässige negative Wert.)</span><span class="sxs-lookup"><span data-stu-id="11c17-497">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="11c17-498">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-498">-or-</span></span> 
<span data-ttu-id="11c17-499">Der Wert von <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="11c17-499">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-500">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-500">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="11c17-501">Versucht, die Sperre im Schreibmodus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-501">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="11c17-502">Die Zeit in Millisekunden, die gewartet wird, oder -1 (<see cref="F:System.Threading.Timeout.Infinite" />), um unbegrenzt zu warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-502">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="11c17-503">Versucht, die Sperre im Schreibmodus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-503">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="11c17-504"><see langword="true" />, wenn der aufrufende Thread den Schreibmodus erhalten hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-504"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-505">Wenn `millisecondsTimeout` ist 0 (null), diese Methode überprüft den Sperrstatus und gibt `false` sofort, wenn Sie der gewünschte Zustand nicht verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-505">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="11c17-506">Wenn andere Threads die Sperre im Lesemodus zugewiesen haben, einen Thread, der Aufrufe der <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> Methode blockiert, bis die Threads im Lesemodus beendet haben, oder bis das Timeoutintervall abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-506">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="11c17-507">Während Threads blockiert sind Schreibmodus warten, blockiert zusätzliche Threads, die versuchen, den schreibgeschützten Modus oder im erweiterbaren Modus befindet, geben, bis alle Threads darauf warten, geben den Schreibmodus, entweder ein Timeout oder im Schreibmodus befindet und wieder beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-507">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-508">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im Schreibmodus zugewiesen ist Sperre, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-508">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-509">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> Methode, die Sperre im Schreibmodus, mit einem Timeout. Die Methode, die im Beispiel gezeigt hinzugefügt den synchronisierten Cache neues Schlüssel/Wert-Paar.</span><span class="sxs-lookup"><span data-stu-id="11c17-509">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="11c17-510">Die Methode gibt zurück, wenn das angegebene Timeoutintervall abläuft, bevor der Thread die Sperre eintritt, `false`.</span><span class="sxs-lookup"><span data-stu-id="11c17-510">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="11c17-511">Gibt die Methode zurück `true` Wenn Schlüssel/Wert-Paar hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="11c17-511">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="11c17-512">Wenn der Schlüssel bereits im Cache, der von der inneren Ausnahme <xref:System.Collections.Generic.Dictionary%602> ist zulässig, um die Methode zu beenden.</span><span class="sxs-lookup"><span data-stu-id="11c17-512">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="11c17-513">Ein `finally` Block wird zum Ausführen der <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> -Methode, um sicherzustellen, dass der Aufrufer die Sperre wieder freigibt.</span><span class="sxs-lookup"><span data-stu-id="11c17-513">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="11c17-514">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLockSlim> Klasse.</span><span class="sxs-lookup"><span data-stu-id="11c17-514">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-515">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-515">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="11c17-516">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-516">-or-</span></span> 
<span data-ttu-id="11c17-517">Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des Schreibmodus die Möglichkeit eines Deadlocks entstehen würde.</span><span class="sxs-lookup"><span data-stu-id="11c17-517">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="11c17-518">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-518">-or-</span></span> 
<span data-ttu-id="11c17-519">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-519">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-520">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-520">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11c17-521">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ, aber ungleich <see cref="F:System.Threading.Timeout.Infinite" /> (-1), der den einzigen zulässigen negativen Wert darstellt.</span><span class="sxs-lookup"><span data-stu-id="11c17-521">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-522">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-522">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="11c17-523">Der Zeitintervall bis zum Timeout, oder -1 Millisekunden, um unbegrenzt zu warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-523">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="11c17-524">Versucht, die Sperre im Schreibmodus zu erhalten. Optional wird ein Timeout berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="11c17-524">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="11c17-525"><see langword="true" />, wenn der aufrufende Thread den Schreibmodus erhalten hat, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11c17-525"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-526">Wenn `timeout` ist 0 (null), diese Methode überprüft den Sperrstatus und gibt `false` sofort, wenn Sie der gewünschte Zustand nicht verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-526">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="11c17-527">Wenn andere Threads die Sperre im Lesemodus zugewiesen haben, einen Thread, der Aufrufe der <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> Methode blockiert, bis die Threads im Lesemodus beendet haben, oder bis das Timeoutintervall abgelaufen ist.</span><span class="sxs-lookup"><span data-stu-id="11c17-527">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="11c17-528">Während Threads blockiert sind Schreibmodus warten, blockiert zusätzliche Threads, die versuchen, den schreibgeschützten Modus oder im erweiterbaren Modus befindet, geben, bis alle Threads darauf warten, geben den Schreibmodus, entweder ein Timeout oder im Schreibmodus befindet und wieder beendet.</span><span class="sxs-lookup"><span data-stu-id="11c17-528">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11c17-529">Wenn eine Sperre Rekursionen zulässt, kann ein Thread, der die Sperre im Schreibmodus zugewiesen ist Sperre, eingeben, auch wenn andere Threads Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-529">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="11c17-530">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten.</span><span class="sxs-lookup"><span data-stu-id="11c17-530">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="11c17-531">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-531">-or-</span></span> 
<span data-ttu-id="11c17-532">Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des Schreibmodus die Möglichkeit eines Deadlocks entstehen würde.</span><span class="sxs-lookup"><span data-stu-id="11c17-532">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="11c17-533">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-533">-or-</span></span> 
<span data-ttu-id="11c17-534">Die Rekursionszahl würde die Kapazität des Zählers übersteigen.</span><span class="sxs-lookup"><span data-stu-id="11c17-534">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="11c17-535">Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</span><span class="sxs-lookup"><span data-stu-id="11c17-535">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11c17-536">Der Wert von <paramref name="timeout" /> ist negativ, aber ungleich -1 Millisekunden. (Dies ist der einzige zulässige negative Wert.)</span><span class="sxs-lookup"><span data-stu-id="11c17-536">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="11c17-537">- oder -</span><span class="sxs-lookup"><span data-stu-id="11c17-537">-or-</span></span> 
<span data-ttu-id="11c17-538">Der Wert von <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="11c17-538">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="11c17-539">Das <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="11c17-539">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-540">Ruft die Gesamtzahl von Threads ab, die auf eine Zuweisung des Lesemodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-540">Gets the total number of threads that are waiting to enter the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="11c17-541">Die Gesamtzahl von Threads, die auf eine Zuweisung des Lesemodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-541">The total number of threads that are waiting to enter read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-542">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-542">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-543">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-543">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-544">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-544">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-545">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> Eigenschaft, um einen Ereignisprotokolleintrag generiert, wenn die Anzahl der Threads, die darauf warten, Lesemodus blockiert werden, um einen Schwellenwert überschreitet.</span><span class="sxs-lookup"><span data-stu-id="11c17-545">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-546">Ruft die Gesamtzahl von Threads ab, die auf eine Zuweisung des erweiterbaren Modus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-546">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="11c17-547">Die Gesamtzahl von Threads, die auf eine Zuweisung des erweiterbaren Modus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-547">The total number of threads that are waiting to enter upgradeable mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-548">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-548">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-549">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-549">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-550">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-550">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-551">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> Eigenschaft, um einen Ereignisprotokolleintrag generiert, wenn die Anzahl der Threads, die darauf warten, erweiterbaren Modus blockiert werden, um einen Schwellenwert überschreitet.</span><span class="sxs-lookup"><span data-stu-id="11c17-551">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11c17-552">Ruft die Gesamtzahl von Threads ab, die auf eine Zuweisung des Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-552">Gets the total number of threads that are waiting to enter the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="11c17-553">Die Gesamtzahl von Threads, die auf eine Zuweisung des Schreibmodus warten.</span><span class="sxs-lookup"><span data-stu-id="11c17-553">The total number of threads that are waiting to enter write mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11c17-554">Verwenden Sie diese Eigenschaft nur für das Debuggen, profilerstellung und Protokollierungszwecken und nicht für das Verhalten eines Algorithmus steuern.</span><span class="sxs-lookup"><span data-stu-id="11c17-554">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="11c17-555">Sobald sie berechnet worden sind, können die Ergebnisse ändern.</span><span class="sxs-lookup"><span data-stu-id="11c17-555">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="11c17-556">Aus diesem Grund ist es nicht sicher für Entscheidungen basierend auf dieser Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="11c17-556">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11c17-557">Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> Eigenschaft, um einen Ereignisprotokolleintrag generiert, wenn die Anzahl der Threads, die darauf warten, Schreibmodus, blockiert werden, um einen Schwellenwert überschreitet.</span><span class="sxs-lookup"><span data-stu-id="11c17-557">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadState.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a93f1275163776d80a243344a4a1beb07c33cc80.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a93f1275163776d80a243344a4a1beb07c33cc80</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadState">
          <source>Specifies the execution states of a <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>.</source>
          <target state="translated">Gibt die Ausführungszustände eines <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> an.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> enumeration is of interest only in a few debugging scenarios.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> Enumeration ist von Interesse sind nur in einigen Debugszenarien.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Your code should never use the thread state to synchronize the activities of threads.</source>
          <target state="translated">Der Code sollte den Threadzustand niemals verwenden, zum Synchronisieren der Aktivitäten von Threads.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> defines a set of all possible execution states for threads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> definiert einen Satz aller möglichen Ausführungszustände für Threads.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Once a thread is created, it is in at least one of the states until it terminates.</source>
          <target state="translated">Sobald ein Thread erstellt wurde, ist es in mindestens einer der Status, bis er beendet wird.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Threads created within the common language runtime are initially in the <ph id="ph1">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id="ph2">`Running`</ph> state.</source>
          <target state="translated">Threads, die innerhalb der common Language Runtime erstellt werden anfänglich in der <ph id="ph1">`Unstarted`</ph> Zustand, während die externen Threads, die in die Laufzeit stammen befinden sich bereits in der <ph id="ph2">`Running`</ph> Zustand.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>An <ph id="ph1">`Unstarted`</ph> thread is transitioned into the <ph id="ph2">`Running`</ph> state by calling <ph id="ph3">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">`Unstarted`</ph> Thread Spiegels der <ph id="ph2">`Running`</ph> Status durch Aufrufen von <ph id="ph3">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Not all combinations of <ph id="ph1">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id="ph2">`Aborted`</ph> and <ph id="ph3">`Unstarted`</ph> states.</source>
          <target state="translated">Nicht alle Kombinationen von <ph id="ph1">`ThreadState`</ph> Werte sind gültig; z. B. ein Thread kann sowohl die <ph id="ph2">`Aborted`</ph> und <ph id="ph3">`Unstarted`</ph> Status.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>There are two thread state enumerations,<ph id="ph1">&lt;xref:System.Threading.ThreadState?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ThreadState?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Es gibt zwei Threads Zustand Enumerationen<ph id="ph1">&lt;xref:System.Threading.ThreadState?displayProperty=nameWithType&gt;</ph> und <ph id="ph2">&lt;xref:System.Diagnostics.ThreadState?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The following table shows the actions that cause a change of state.</source>
          <target state="translated">Die folgende Tabelle zeigt die Aktionen, die dazu führen, eine Änderung des Status dass.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Action</source>
          <target state="translated">Aktion</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>ThreadState</source>
          <target state="translated">ThreadState</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>A thread is created within the common language runtime.</source>
          <target state="translated">Ein Thread wird in der common Language Runtime erstellt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Unstarted</source>
          <target state="translated">Nicht gestartete</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method on the new thread, and the call returns.</source>
          <target state="translated">Ein anderer Thread Ruft die <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> auf den neuen Thread, und der Aufruf Methodenrückgabe.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method does not return until the new thread has started running.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> Methode gibt keinen zurück, bis der neue Thread gestartet.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>There is no way to know at what point the new thread will start running, during the call to <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</source>
          <target state="translated">Es gibt keine Möglichkeit zu wissen, an welcher Stelle der neue Thread gestartet wird ausgeführt, während des Aufrufs <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Running</source>
          <target state="translated">Running</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph></source>
          <target state="translated">Der Thread Ruft <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>WaitSleepJoin</source>
          <target state="translated">WaitSleepJoin</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> on another object.</source>
          <target state="translated">Der Thread ruft <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> auf einem anderen Objekt auf.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>WaitSleepJoin</source>
          <target state="translated">WaitSleepJoin</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> on another thread.</source>
          <target state="translated">Der Thread ruft <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> auf einem anderen Thread auf.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>WaitSleepJoin</source>
          <target state="translated">WaitSleepJoin</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph></source>
          <target state="translated">Ein anderer Thread Ruft <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Running</source>
          <target state="translated">Wird ausgeführt</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph></source>
          <target state="translated">Ein anderer Thread Ruft <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>SuspendRequested</source>
          <target state="translated">SuspendRequested</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> request.</source>
          <target state="translated">Der Thread reagiert auf eine <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph>-Anforderung.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Suspended</source>
          <target state="translated">Angehalten</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph></source>
          <target state="translated">Ein anderer Thread Ruft <ph id="ph1">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Running</source>
          <target state="translated">Wird ausgeführt</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph></source>
          <target state="translated">Ein anderer Thread Ruft <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>AbortRequested</source>
          <target state="translated">AbortRequested</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> request.</source>
          <target state="translated">Der Thread reagiert auf eine <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>-Anforderung.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Stopped</source>
          <target state="translated">Beendet</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>A thread is terminated.</source>
          <target state="translated">Ein Thread wird beendet.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Stopped</source>
          <target state="translated">Beendet</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>In addition to the states noted above, there is also the <ph id="ph1">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.</source>
          <target state="translated">Zusätzlich zu den oben aufgeführten Zuständen, es ist auch die <ph id="ph1">`Background`</ph> Zustand, der angibt, ob der Thread im Hintergrund oder im Vordergrund ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>A thread can be in more than one state at a given time.</source>
          <target state="translated">Ein Thread kann in mehreren Status zu einem bestimmten Zeitpunkt.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>For example, if a thread is blocked on a call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>, and another thread calls <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> on the blocked thread, the blocked thread will be in both the <ph id="ph3">`WaitSleepJoin`</ph> and the <ph id="ph4">`AbortRequested`</ph> states at the same time.</source>
          <target state="translated">Angenommen, ein Thread blockiert ist, bei einem Aufruf von <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>, und ein anderer Thread ruft <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> für den blockierten Thread werden sowohl in der blockierte Thread die <ph id="ph3">`WaitSleepJoin`</ph> und die <ph id="ph4">`AbortRequested`</ph> Zustände gleichzeitig.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>In this case, as soon as the thread returns from the call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> or is interrupted, it will receive the <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to begin aborting.</source>
          <target state="translated">In diesem Fall ist, sobald der Thread aus dem Aufruf zurückgegeben <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> oder unterbrochen wird, erhält er die <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> Abbruch beginnen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=nameWithType&gt;</ph> property of a thread provides the current state of a thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft von einem Thread ermöglicht, den aktuellen Status eines Threads.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Applications must use a bitmask to determine whether a thread is running.</source>
          <target state="translated">Anwendungen müssen eine Bitmaske verwenden, um zu bestimmen, ob ein Thread ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadState">
          <source>Since the value for <ph id="ph1">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</source>
          <target state="translated">Da der Wert für <ph id="ph1">`Running`</ph> ist NULL (0), testen, ob ein Thread ausgeführt wird, mithilfe von C#-Code wie z. B. <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> oder Visual Basic-Code, z. B. <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Aborted">
          <source>The thread state includes <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.AbortRequested" /&gt;</ph> and the thread is now dead, but its state has not yet changed to <ph id="ph2">&lt;see cref="F:System.Threading.ThreadState.Stopped" /&gt;</ph>.</source>
          <target state="translated">Der Threadzustand schließt <ph id="ph1">&lt;see cref="F:System.Threading.ThreadState.AbortRequested" /&gt;</ph> ein, und der Thread ist jetzt deaktiviert. Der Zustand hat sich jedoch noch nicht in <ph id="ph2">&lt;see cref="F:System.Threading.ThreadState.Stopped" /&gt;</ph> geändert.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.AbortRequested">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <ph id="ph2">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> that will attempt to terminate it.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph>-Methode wurde für den Thread aufgerufen, doch der Thread hat noch nicht die ausstehende <ph id="ph2">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> empfangen, die ihn zu beenden versucht.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Background">
          <source>The thread is being executed as a background thread, as opposed to a foreground thread.</source>
          <target state="translated">Der Thread wird nicht als Vordergrundthread, sondern als Hintergrundthread ausgeführt.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Background">
          <source>This state is controlled by setting the <ph id="ph1">&lt;see cref="P:System.Threading.Thread.IsBackground" /&gt;</ph> property.</source>
          <target state="translated">Dieser Zustand wird durch Festlegen der <ph id="ph1">&lt;see cref="P:System.Threading.Thread.IsBackground" /&gt;</ph>-Eigenschaft gesteuert.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Running">
          <source>The thread has been started, it is not blocked, and there is no pending <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph>.</source>
          <target state="translated">Der Thread wurde gestartet, er wird nicht blockiert, und es ist keine ausstehende <ph id="ph1">&lt;see cref="T:System.Threading.ThreadAbortException" /&gt;</ph> vorhanden.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Stopped">
          <source>The thread has stopped.</source>
          <target state="translated">Der Thread wurde beendet.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.StopRequested">
          <source>The thread is being requested to stop.</source>
          <target state="translated">Es besteht eine Anforderung für die Beendigung des Threads.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.StopRequested">
          <source>This is for internal use only.</source>
          <target state="translated">Dies ist ausschließlich für die interne Verwendung vorgesehen.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Suspended">
          <source>The thread has been suspended.</source>
          <target state="translated">Der Thread wurde unterbrochen.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.SuspendRequested">
          <source>The thread is being requested to suspend.</source>
          <target state="translated">Es besteht eine Anforderung für die Unterbrechung des Threads.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.Unstarted">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Start" /&gt;</ph> method has not been invoked on the thread.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Start" /&gt;</ph>-Methode wurde für den Thread nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.WaitSleepJoin">
          <source>The thread is blocked.</source>
          <target state="translated">Der Thread ist blockiert.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Threading.ThreadState.WaitSleepJoin">
          <source>This could be the result of calling <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Sleep(System.Int32)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Thread.Join" /&gt;</ph>, of requesting a lock — for example, by calling <ph id="ph3">&lt;see cref="M:System.Threading.Monitor.Enter(System.Object)" /&gt;</ph> or <ph id="ph4">&lt;see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" /&gt;</ph> — or of waiting on a thread synchronization object such as <ph id="ph5">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>.</source>
          <target state="translated">Die Ursache hierfür könnte sein, dass <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Sleep(System.Int32)" /&gt;</ph> oder <ph id="ph2">&lt;see cref="M:System.Threading.Thread.Join" /&gt;</ph> aufgerufen wurde, dass eine Sperre angefordert wurde, z. B. durch Aufrufen von <ph id="ph3">&lt;see cref="M:System.Threading.Monitor.Enter(System.Object)" /&gt;</ph> oder <ph id="ph4">&lt;see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" /&gt;</ph>, oder dass auf ein Threadsynchronisierungsobjekt wie <ph id="ph5">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> gewartet wird.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
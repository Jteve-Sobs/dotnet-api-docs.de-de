<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2981c0c3b50f02094deaf940943c288896ef2787" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a09f6-101">Stellt ein Handle dar, das beim Aufruf von <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> registriert wurde.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a09f6-101">Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span>
      </span>
      <span data-ttu-id="a09f6-102">Diese Klasse kann nicht vererbt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a09f6-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a09f6-103">Das folgende Beispiel zeigt, wie Sie eine <xref:System.Threading.RegisteredWaitHandle> bestimmen, warum eine Rückrufmethode aufgerufen wird und wie eine Aufgabe aufgehoben wird, wenn der Rückruf ist aufgetreten, weil das Wait-Handle signalisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="a09f6-103">The following example shows how to use a <xref:System.Threading.RegisteredWaitHandle> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="a09f6-104">Außerdem wird gezeigt, wie Sie die <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode, um eine angegebene Rückrufmethode ausführen, wenn eine angegebene Wait-Handle signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-104">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="a09f6-105">In diesem Beispiel wird die Rückrufmethode `WaitProc`, und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="a09f6-105">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="a09f6-106">Im Beispiel definiert eine `TaskInfo` Klasse, die Informationen aufnimmt, die an den Rückruf übergeben wird, wenn er ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-106">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="a09f6-107">Das Beispiel erstellt eine `TaskInfo` Objekt, und weist ihm einige Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="a09f6-107">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="a09f6-108">Die <xref:System.Threading.RegisteredWaitHandle> zurückgegebene der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode zugewiesen ist die `Handle` Feld der `TaskInfo` Objekt, sodass die Rückrufmethode auf zugreifen der <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="a09f6-108">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="a09f6-109">Zusätzlich zum angeben `TaskInfo` wie das Objekt für die Übergabe an die Rückrufmethode, die den Aufruf von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode gibt die <xref:System.Threading.AutoResetEvent> , die die Aufgabe wartet, eine <xref:System.Threading.WaitOrTimerCallback> Delegat, der darstellt der `WaitProc` Rückrufmethode darstellt, ein eine zweite Timeoutintervalls und mehrere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="a09f6-109">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="a09f6-110">Wenn der Hauptthread signalisiert der <xref:System.Threading.AutoResetEvent> durch Aufrufen seiner <xref:System.Threading.EventWaitHandle.Set%2A> -Methode, die <xref:System.Threading.WaitOrTimerCallback> Delegat aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-110">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="a09f6-111">Die `WaitProc` Methode Tests <xref:System.Threading.RegisteredWaitHandle> um zu bestimmen, ob ein Timeout aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="a09f6-111">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="a09f6-112">Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, die `WaitProc` Methode hebt die Registrierung der <xref:System.Threading.RegisteredWaitHandle>, zusätzliche Rückrufe zu beenden.</span><span class="sxs-lookup"><span data-stu-id="a09f6-112">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="a09f6-113">Im Falle eines Timeouts weiterhin die Aufgabe warten.</span><span class="sxs-lookup"><span data-stu-id="a09f6-113">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="a09f6-114">Die `WaitProc` Methode beendet eine Meldung an die Konsole ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="a09f6-114">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a09f6-115">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a09f6-115">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="a09f6-116">Das <see cref="T:System.Threading.WaitHandle" />, das signalisiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a09f6-116">The <see cref="T:System.Threading.WaitHandle" /> to be signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a09f6-117">Bricht einen von der <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />-Methode ausgegebenen registrierten Wartevorgang ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a09f6-117">Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a09f6-118">
            <see langword="true" />, wenn die Funktion erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a09f6-118">
              <see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a09f6-119">Wenn `waitObject` angegeben ist, wird es nur signalisiert, wenn die <xref:System.Threading.RegisteredWaitHandle> erfolgreich aufgehoben.</span><span class="sxs-lookup"><span data-stu-id="a09f6-119">If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered.</span></span> <span data-ttu-id="a09f6-120">Wenn eine Rückrufmethode in Bearbeitung ist beim <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> ausgeführt wird, `waitObject` nicht bis zum Abschluss der Rückrufmethode signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-120">If a callback method is in progress when <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> executes, `waitObject` is not signaled until the callback method completes.</span></span> <span data-ttu-id="a09f6-121">Insbesondere, wenn eine Rückrufmethode <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` ist erst nach Abschluss der Rückrufmethode signalisiert.</span><span class="sxs-lookup"><span data-stu-id="a09f6-121">In particular, if a callback method executes <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` is not signaled until that callback method completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a09f6-122">Das folgende Beispiel zeigt, wie Sie die <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> Methode eine Aufgabe aufgehoben wird, wenn ein Rückruf aufgetreten ist, da das Wait-Handle signalisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="a09f6-122">The following example shows how to use the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> method to unregister a task if a callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="a09f6-123">Außerdem wird gezeigt, wie Sie die <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode, um eine angegebene Rückrufmethode ausführen, wenn eine angegebene Wait-Handle signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-123">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="a09f6-124">In diesem Beispiel wird die Rückrufmethode `WaitProc`, und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="a09f6-124">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="a09f6-125">Im Beispiel definiert eine `TaskInfo` Klasse, die Informationen aufnimmt, die an den Rückruf übergeben wird, wenn er ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-125">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="a09f6-126">Das Beispiel erstellt eine `TaskInfo` Objekt, und weist ihm einige Zeichenfolgendaten.</span><span class="sxs-lookup"><span data-stu-id="a09f6-126">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="a09f6-127">Die <xref:System.Threading.RegisteredWaitHandle> zurückgegebene der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode zugewiesen ist die `Handle` Feld der `TaskInfo` Objekt, sodass die Rückrufmethode auf zugreifen der <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="a09f6-127">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="a09f6-128">Zusätzlich zum angeben `TaskInfo` wie das Objekt für die Übergabe an die Rückrufmethode, die den Aufruf von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Methode gibt die <xref:System.Threading.AutoResetEvent> , die die Aufgabe wartet, eine <xref:System.Threading.WaitOrTimerCallback> Delegat, der darstellt der `WaitProc` Rückrufmethode darstellt, ein eine zweite Timeoutintervalls und mehrere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="a09f6-128">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="a09f6-129">Wenn der Hauptthread signalisiert der <xref:System.Threading.AutoResetEvent> durch Aufrufen seiner <xref:System.Threading.EventWaitHandle.Set%2A> -Methode, die <xref:System.Threading.WaitOrTimerCallback> Delegat aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a09f6-129">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="a09f6-130">Die `WaitProc` Methode Tests <xref:System.Threading.RegisteredWaitHandle> um zu bestimmen, ob ein Timeout aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="a09f6-130">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="a09f6-131">Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, die `WaitProc` Methode hebt die Registrierung der <xref:System.Threading.RegisteredWaitHandle>, zusätzliche Rückrufe zu beenden.</span><span class="sxs-lookup"><span data-stu-id="a09f6-131">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="a09f6-132">Im Falle eines Timeouts weiterhin die Aufgabe warten.</span><span class="sxs-lookup"><span data-stu-id="a09f6-132">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="a09f6-133">Die `WaitProc` Methode beendet eine Meldung an die Konsole ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="a09f6-133">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
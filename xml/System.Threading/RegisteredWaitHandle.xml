<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a38b3730911bfa2a60ce9da33de904b60c01a00b" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82319622" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.Object" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-1.0;netcore-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7587a-101">Stellt ein Handle dar, das beim Aufruf von <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> registriert wurde.</span><span class="sxs-lookup"><span data-stu-id="7587a-101">Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span></span> <span data-ttu-id="7587a-102">Diese Klasse kann nicht vererbt werden.</span><span class="sxs-lookup"><span data-stu-id="7587a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7587a-103">Im folgenden Beispiel wird gezeigt, wie ein <xref:System.Threading.RegisteredWaitHandle> verwendet werden kann, um zu bestimmen, warum eine Rückruf Methode aufgerufen wird und wie die Registrierung einer Aufgabe aufgehoben wird, wenn der Rückruf aufgetreten ist, da das Wait-Handle signalisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="7587a-103">The following example shows how to use a <xref:System.Threading.RegisteredWaitHandle> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="7587a-104">Das Beispiel zeigt auch, wie die <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode verwendet wird, um eine angegebene Rückruf Methode auszuführen, wenn ein angegebenes Wait-Handle signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="7587a-104">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="7587a-105">In diesem Beispiel ist die Rückruf Methode `WaitProc`, und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="7587a-105">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="7587a-106">Im Beispiel wird eine `TaskInfo` Klasse definiert, die die Informationen enthält, die bei der Ausführung an den Rückruf übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="7587a-106">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="7587a-107">Im Beispiel wird ein `TaskInfo`-Objekt erstellt, und es werden Zeichen folgen Daten zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="7587a-107">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="7587a-108">Der <xref:System.Threading.RegisteredWaitHandle>, der von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode zurückgegeben wird, wird dem `Handle`-Feld des `TaskInfo` Objekts zugewiesen, sodass die Rückruf Methode Zugriff auf den <xref:System.Threading.RegisteredWaitHandle>hat.</span><span class="sxs-lookup"><span data-stu-id="7587a-108">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="7587a-109">Zusätzlich zur Angabe `TaskInfo` als Objekt, das an die Rückruf Methode übergeben werden soll, gibt der Aufruf der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode die <xref:System.Threading.AutoResetEvent> an, auf die der Task wartet, einen <xref:System.Threading.WaitOrTimerCallback> Delegaten, der die `WaitProc` Rückruf Methode darstellt, ein zweites Timeout Intervall und mehrere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="7587a-109">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="7587a-110">Wenn der Haupt Thread die <xref:System.Threading.AutoResetEvent> durch Aufrufen seiner <xref:System.Threading.EventWaitHandle.Set%2A>-Methode signalisiert, wird der <xref:System.Threading.WaitOrTimerCallback> Delegat aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="7587a-110">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="7587a-111">Die `WaitProc`-Methode testet <xref:System.Threading.RegisteredWaitHandle>, um zu bestimmen, ob ein Timeout aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="7587a-111">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="7587a-112">Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, hebt die `WaitProc` Methode die Registrierung des <xref:System.Threading.RegisteredWaitHandle>auf und beendet weitere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="7587a-112">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="7587a-113">Im Fall eines Timeouts wartet der Task weiterhin.</span><span class="sxs-lookup"><span data-stu-id="7587a-113">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="7587a-114">Die `WaitProc`-Methode wird beendet, indem eine Meldung an die Konsole ausgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="7587a-114">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="7587a-115">Dieser Typ ist threadsicher.</span><span class="sxs-lookup"><span data-stu-id="7587a-115">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="7587a-116">Der verwaltete Threadpool</span><span class="sxs-lookup"><span data-stu-id="7587a-116">The managed thread pool</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7587a-117">Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="7587a-117">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="7587a-118">Das <see cref="T:System.Threading.WaitHandle" />, das signalisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="7587a-118">The <see cref="T:System.Threading.WaitHandle" /> to be signaled.</span></span></param>
        <summary><span data-ttu-id="7587a-119">Bricht einen von der <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />-Methode ausgegebenen registrierten Wartevorgang ab.</span><span class="sxs-lookup"><span data-stu-id="7587a-119">Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="7587a-120"><see langword="true" />, wenn die Funktion erfolgreich ausgeführt wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7587a-120"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7587a-121">Wenn `waitObject` angegeben wird, wird Sie nur signalisiert, wenn die Registrierung des <xref:System.Threading.RegisteredWaitHandle> erfolgreich aufgehoben wurde.</span><span class="sxs-lookup"><span data-stu-id="7587a-121">If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered.</span></span> <span data-ttu-id="7587a-122">Wenn eine Rückruf Methode ausgeführt wird, wenn <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> ausgeführt wird, wird `waitObject` erst signalisiert, wenn die Rückruf Methode abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="7587a-122">If a callback method is in progress when <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> executes, `waitObject` is not signaled until the callback method completes.</span></span> <span data-ttu-id="7587a-123">Insbesondere, wenn eine Rückruf Methode <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>ausführt, wird `waitObject` erst signalisiert, wenn diese Rückruf Methode abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="7587a-123">In particular, if a callback method executes <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` is not signaled until that callback method completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7587a-124">Im folgenden Beispiel wird gezeigt, wie die <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>-Methode verwendet wird, um die Registrierung einer Aufgabe aufzuheben, wenn ein Rückruf aufgetreten ist, da das Wait-Handle signalisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="7587a-124">The following example shows how to use the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> method to unregister a task if a callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="7587a-125">Das Beispiel zeigt auch, wie die <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode verwendet wird, um eine angegebene Rückruf Methode auszuführen, wenn ein angegebenes Wait-Handle signalisiert wird.</span><span class="sxs-lookup"><span data-stu-id="7587a-125">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="7587a-126">In diesem Beispiel ist die Rückruf Methode `WaitProc`, und das Wait-Handle ist ein <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="7587a-126">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="7587a-127">Im Beispiel wird eine `TaskInfo` Klasse definiert, die die Informationen enthält, die bei der Ausführung an den Rückruf übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="7587a-127">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="7587a-128">Im Beispiel wird ein `TaskInfo`-Objekt erstellt, und es werden Zeichen folgen Daten zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="7587a-128">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="7587a-129">Der <xref:System.Threading.RegisteredWaitHandle>, der von der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode zurückgegeben wird, wird dem `Handle`-Feld des `TaskInfo` Objekts zugewiesen, sodass die Rückruf Methode Zugriff auf den <xref:System.Threading.RegisteredWaitHandle>hat.</span><span class="sxs-lookup"><span data-stu-id="7587a-129">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="7587a-130">Zusätzlich zur Angabe `TaskInfo` als Objekt, das an die Rückruf Methode übergeben werden soll, gibt der Aufruf der <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>-Methode die <xref:System.Threading.AutoResetEvent> an, auf die der Task wartet, einen <xref:System.Threading.WaitOrTimerCallback> Delegaten, der die `WaitProc` Rückruf Methode darstellt, ein zweites Timeout Intervall und mehrere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="7587a-130">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="7587a-131">Wenn der Haupt Thread die <xref:System.Threading.AutoResetEvent> durch Aufrufen seiner <xref:System.Threading.EventWaitHandle.Set%2A>-Methode signalisiert, wird der <xref:System.Threading.WaitOrTimerCallback> Delegat aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="7587a-131">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="7587a-132">Die `WaitProc`-Methode testet <xref:System.Threading.RegisteredWaitHandle>, um zu bestimmen, ob ein Timeout aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="7587a-132">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="7587a-133">Wenn der Rückruf aufgerufen wurde, weil das Wait-Handle signalisiert wurde, hebt die `WaitProc` Methode die Registrierung des <xref:System.Threading.RegisteredWaitHandle>auf und beendet weitere Rückrufe.</span><span class="sxs-lookup"><span data-stu-id="7587a-133">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="7587a-134">Im Fall eines Timeouts wartet der Task weiterhin.</span><span class="sxs-lookup"><span data-stu-id="7587a-134">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="7587a-135">Die `WaitProc`-Methode wird beendet, indem eine Meldung an die Konsole ausgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="7587a-135">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="7587a-136">Der verwaltete Threadpool</span><span class="sxs-lookup"><span data-stu-id="7587a-136">The managed thread pool</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

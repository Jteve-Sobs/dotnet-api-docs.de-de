<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc1a0c88765040869d8ad919aeb575e304c71bde" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="554b6-101">Definiert eine Sperre, die einen Writer und mehrere Reader unterstützt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="554b6-101">Defines a lock that supports single writers and multiple readers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="554b6-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] verfügt über zwei Lese-/Schreibsperren, <xref:System.Threading.ReaderWriterLockSlim> und <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="554b6-103"><xref:System.Threading.ReaderWriterLockSlim> wird für alle Neuentwicklungen empfohlen.</span><span class="sxs-lookup"><span data-stu-id="554b6-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="554b6-104"><xref:System.Threading.ReaderWriterLockSlim> ähnelt <xref:System.Threading.ReaderWriterLock>, verfügt aber über vereinfachte Regeln für Rekursion sowie für Upgrade und Downgrade des Sperrstatus.</span><span class="sxs-lookup"><span data-stu-id="554b6-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="554b6-105"><xref:System.Threading.ReaderWriterLockSlim> vermeidet viele potenzielle Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="554b6-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="554b6-106">Darüber hinaus ist die Leistung von <xref:System.Threading.ReaderWriterLockSlim> wesentlich besser als die von <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="554b6-107"><xref:System.Threading.ReaderWriterLock> wird zum Synchronisieren des Zugriffs auf eine Ressource verwendet.</span><span class="sxs-lookup"><span data-stu-id="554b6-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="554b6-108">Einem bestimmten Zeitpunkt können sie entweder gleichzeitige Lesezugriff für mehrere Threads oder Schreibzugriff für einen einzelnen Thread.</span><span class="sxs-lookup"><span data-stu-id="554b6-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="554b6-109">In einer Situation, in dem eine Ressource unregelmäßig geändert wird, eine `ReaderWriterLock` erhalten Sie einen besseren Durchsatz als eine einfache One-am-Time-Sperre, wie z. B. <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="554b6-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="554b6-110">`ReaderWriterLock` funktioniert am besten, wo die meisten Zugriffe Lesevorgänge, während Schreibvorgänge selten sind und von kurzer Dauer.</span><span class="sxs-lookup"><span data-stu-id="554b6-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="554b6-111">Mehrere Reader Alternative mit einen Writer, sodass weder Leser noch Schreiber für längere Zeit blockiert werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="554b6-112">Speichern von Lesesperren oder Schreibsperren für lange Zeiträume wird anderen Threads blockieren.</span><span class="sxs-lookup"><span data-stu-id="554b6-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="554b6-113">Sollten Sie für optimale Leistung in der Umstrukturierung der anwendungskennworts, die Dauer der Schreibvorgänge zu minimieren.</span><span class="sxs-lookup"><span data-stu-id="554b6-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="554b6-114">Ein Thread kann einen Reader Sperre oder eine Sperre des Schreibers jedoch nicht beides gleichzeitig enthalten.</span><span class="sxs-lookup"><span data-stu-id="554b6-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="554b6-115">Anstatt eine Sperre des Lesers um die Sperre des Schreibers erwerben, können Sie <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> und <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="554b6-116">Rekursive sperranforderungen Erhöhen der Anzahl der Sperren auf eine Sperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="554b6-117">Reader und Writer werden separat in die Warteschlange eingereiht.</span><span class="sxs-lookup"><span data-stu-id="554b6-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="554b6-118">Wenn ein Thread die Schreibsperre freigibt, sind alle Threads des einreihens in die Warteschlange Reader zu diesem Zeitpunkt gerade ausgeführt Lesesperren erteilt. Wenn all diese Lesesperren veröffentlicht wurden, der nächste Thread warten im Writer Warteschlange, falls vorhanden, wird die Schreibsperre erteilt, usw.</span><span class="sxs-lookup"><span data-stu-id="554b6-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="554b6-119">Das heißt, `ReaderWriterLock` wechselt zwischen einer Auflistung von Lesern und einen Writer.</span><span class="sxs-lookup"><span data-stu-id="554b6-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="554b6-120">Während des Wartens der eines Threads in der protokollwriter-Warteschlange aktiven Leser Sperren freigegeben werden, sammeln Threads fordern neue Lesesperren in der Warteschlange Reader.</span><span class="sxs-lookup"><span data-stu-id="554b6-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="554b6-121">Ihre Anforderungen werden nicht erteilt, obwohl sie vorhandene Sperre des Lesers Inhaber gleichzeitigen Zugriff freigeben konnte. Dies schützt gegen unbestimmtes Blockierung von Lesern Writer.</span><span class="sxs-lookup"><span data-stu-id="554b6-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="554b6-122">Die meisten Methoden zum Abrufen von Sperren auf einer `ReaderWriterLock` akzeptieren Timeoutwerte.</span><span class="sxs-lookup"><span data-stu-id="554b6-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="554b6-123">Verwenden Sie Timeouts, um Deadlocks in der Anwendung zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="554b6-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="554b6-124">Ein Thread kann z. B. der Writer-Sperre auf eine Ressource und fordern dann eine Sperre des Lesers für eine zweite Ressource; ein anderer Thread möglicherweise in der Zwischenzeit können die Writersperre für die zweite Ressource abrufen und eine Sperre des Lesers auf der ersten anfordert.</span><span class="sxs-lookup"><span data-stu-id="554b6-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="554b6-125">Wenn keine Timeouts verwendet werden, die Threads Deadlock.</span><span class="sxs-lookup"><span data-stu-id="554b6-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="554b6-126">Wenn das Timeoutintervall abläuft, und die Anforderung zur sperrenfreigabe nicht erteilt wurde wurde, gibt die Methode Steuerelement an den aufrufenden Thread durch Auslösen einer <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="554b6-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="554b6-127">Ein Thread kann diese Ausnahme abfangen und bestimmen, welche Maßnahme als nächste ergriffen werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="554b6-128">Timeouts werden in Millisekunden angegeben.</span><span class="sxs-lookup"><span data-stu-id="554b6-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="554b6-129">Bei Verwendung einer <xref:System.TimeSpan?displayProperty=nameWithType> zum Angeben des Timeouts verwendete Wert ist die Gesamtanzahl von ganzen Millisekunden, dargestellt durch die <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="554b6-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="554b6-130">Die folgende Tabelle zeigt die gültige Timeoutwerte in Millisekunden an.</span><span class="sxs-lookup"><span data-stu-id="554b6-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="554b6-131">Wert</span><span class="sxs-lookup"><span data-stu-id="554b6-131">Value</span></span>|<span data-ttu-id="554b6-132">Beschreibung </span><span class="sxs-lookup"><span data-stu-id="554b6-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="554b6-133">-1</span><span class="sxs-lookup"><span data-stu-id="554b6-133">-1</span></span>|<span data-ttu-id="554b6-134">Der Thread wartet, bis die Sperre abgerufen wurde, unabhängig davon, wie lange es dauert.</span><span class="sxs-lookup"><span data-stu-id="554b6-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="554b6-135">Für Methoden, die ganzzahlige Timeouts, die Konstante angeben <xref:System.Threading.Timeout.Infinite> kann verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="554b6-136">0</span><span class="sxs-lookup"><span data-stu-id="554b6-136">0</span></span>|<span data-ttu-id="554b6-137">Der Thread wartet nicht, die Sperre abzurufen.</span><span class="sxs-lookup"><span data-stu-id="554b6-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="554b6-138">Wenn die Sperre sofort kann nicht abgerufen werden, erfolgt die Methodenrückgabe.</span><span class="sxs-lookup"><span data-stu-id="554b6-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="554b6-139">>0</span><span class="sxs-lookup"><span data-stu-id="554b6-139">>0</span></span>|<span data-ttu-id="554b6-140">Die Anzahl der Millisekunden, die gewartet werden soll.</span><span class="sxs-lookup"><span data-stu-id="554b6-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="554b6-141">Mit Ausnahme von-1 ist werden negative Timeoutwerte nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="554b6-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="554b6-142">Wenn Sie eine negative ganze Zahl ungleich-1 angeben, wird stattdessen ein Timeoutwert von 0 (null) verwendet.</span><span class="sxs-lookup"><span data-stu-id="554b6-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="554b6-143">(D. h. die Methodenrückgabe ohne warten, wenn die Sperre kann nicht direkt abgerufen werden.) Bei Angabe einer <xref:System.TimeSpan> , die eine negative Anzahl von Millisekunden, jedoch nicht-1, stellt <xref:System.ArgumentOutOfRangeException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="554b6-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-144">Im folgenden Beispiel wird veranschaulicht, wie eine <xref:System.Threading.ReaderWriterLock> um eine freigegebene Ressource zu schützen, ein ganzzahligen Wert mit dem Namen `resource`, d. h. ausschließlich von mehreren Threads gleichzeitig gelesen und geschrieben.</span><span class="sxs-lookup"><span data-stu-id="554b6-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="554b6-145">Beachten Sie, dass die <xref:System.Threading.ReaderWriterLock> auf Klassenebene deklariert, sodass es für alle Threads angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="554b6-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="554b6-146">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="554b6-146">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="554b6-147">Initialisiert eine neue Instanz der <see cref="T:System.Threading.ReaderWriterLock" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-147">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="554b6-148">Im folgenden Codebeispiel wird gezeigt, wie eine neue Instanz der <xref:System.Threading.ReaderWriterLock>-Klasse erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="554b6-148">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="554b6-149">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-149">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="554b6-150">Erhält eine Lesesperre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-150">Acquires a reader lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="554b6-151">Das Timeout in Millisekunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-151">The time-out in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-152">Erhält eine Lesesperre unter Verwendung eines <see cref="T:System.Int32" />-Werts für das Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-152">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-153"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blockiert, wenn ein anderen Thread die Schreibsperre verfügt oder mindestens einen Thread die Sperre des Schreibers wartet.</span><span class="sxs-lookup"><span data-stu-id="554b6-153"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="554b6-154">Wenn der aktuelle Thread bereits die Schreibsperre enthält, ist keine Lesesperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-154">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="554b6-155">Stattdessen wird die Anzahl der Sperren für die Schreibsperre erhöht.</span><span class="sxs-lookup"><span data-stu-id="554b6-155">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="554b6-156">Dadurch wird verhindert, dass einen Thread einen eigenen Lese-/Schreibsperre blockieren.</span><span class="sxs-lookup"><span data-stu-id="554b6-156">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="554b6-157">Das Ergebnis ist das gleiche wie das Aufrufen <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, und ein zusätzlicher Aufruf <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> ist erforderlich, wenn die Sperre des Schreibers freigeben.</span><span class="sxs-lookup"><span data-stu-id="554b6-157">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="554b6-158">`AcquireReaderLock` Rekursive Sperre des Lesers-Anforderungen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="554b6-158">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="554b6-159">D. h. ein Thread kann m: System.Threading.ReaderWriterLock.ReleaseReaderLock mehrmals aufrufen der erhöht sich der Anzahl der Sperren jedes Mal.</span><span class="sxs-lookup"><span data-stu-id="554b6-159">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="554b6-160">Rufen Sie <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> einmal für jeden Aufruf `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-160">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="554b6-161">Sie können alternativ Aufrufen <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> reduziert die Anzahl der Sperren sofort auf 0 (null).</span><span class="sxs-lookup"><span data-stu-id="554b6-161">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="554b6-162">Rekursive sperranforderungen werden immer sofort gewährt, ohne anfordernden Threads in der Warteschlange Leser platzieren.</span><span class="sxs-lookup"><span data-stu-id="554b6-162">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="554b6-163">Verwenden Sie rekursive Sperren mit Vorsicht, um blockierende Sperre des Schreibers Anforderungen für längere Zeiträume zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="554b6-163">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="554b6-164">Gültige Timeoutwerte finden Sie unter <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-164">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-165">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Lesers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</span><span class="sxs-lookup"><span data-stu-id="554b6-165">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="554b6-166">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-166">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-167">
            <paramref name="millisecondsTimeout" /> läuft ab, bevor die Sperranforderung erteilt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-167">
              <paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="554b6-168">Eine <see langword="TimeSpan" />, die den Timeoutzeitraum angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-168">A <see langword="TimeSpan" /> specifying the time-out period.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-169">Erhält eine Lesesperre unter Verwendung eines <see cref="T:System.TimeSpan" />-Werts für das Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-169">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-170"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blockiert, wenn ein anderen Thread die Schreibsperre verfügt oder mindestens einen Thread die Sperre des Schreibers wartet.</span><span class="sxs-lookup"><span data-stu-id="554b6-170"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="554b6-171">Wenn der aktuelle Thread bereits die Schreibsperre enthält, ist keine Lesesperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-171">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="554b6-172">Stattdessen wird die Anzahl der Sperren für die Schreibsperre erhöht.</span><span class="sxs-lookup"><span data-stu-id="554b6-172">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="554b6-173">Dadurch wird verhindert, dass einen Thread einen eigenen Lese-/Schreibsperre blockieren.</span><span class="sxs-lookup"><span data-stu-id="554b6-173">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="554b6-174">Das Ergebnis ist das gleiche wie das Aufrufen <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, und ein zusätzlicher Aufruf <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> ist erforderlich, wenn die Sperre des Schreibers freigeben.</span><span class="sxs-lookup"><span data-stu-id="554b6-174">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="554b6-175">`AcquireReaderLock` Rekursive Sperre des Lesers-Anforderungen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="554b6-175">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="554b6-176">D. h. ein Thread kann m: System.Threading.ReaderWriterLock.ReleaseReaderLock mehrmals aufrufen der erhöht sich der Anzahl der Sperren jedes Mal.</span><span class="sxs-lookup"><span data-stu-id="554b6-176">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="554b6-177">Rufen Sie <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> einmal für jeden Aufruf `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-177">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="554b6-178">Sie können alternativ Aufrufen <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> reduziert die Anzahl der Sperren sofort auf 0 (null).</span><span class="sxs-lookup"><span data-stu-id="554b6-178">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="554b6-179">Rekursive sperranforderungen werden immer sofort gewährt, ohne anfordernden Threads in der Warteschlange Leser platzieren.</span><span class="sxs-lookup"><span data-stu-id="554b6-179">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="554b6-180">Verwenden Sie rekursive Sperren mit Vorsicht, um blockierende Sperre des Schreibers Anforderungen für längere Zeiträume zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="554b6-180">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="554b6-181">Gültige Timeoutwerte finden Sie unter <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-181">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-182">
            <paramref name="timeout" /> läuft ab, bevor die Sperranforderung erteilt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-182">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="554b6-183">
            <paramref name="timeout" /> gibt einen negativen Wert ungleich -1 Millisekunden an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-183">
              <paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="554b6-184">Erhält die Schreibsperre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-184">Acquires the writer lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="554b6-185">Das Timeout in Millisekunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-185">The time-out in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-186">Erhält die Schreibsperre unter Verwendung eines <see cref="T:System.Int32" />-Werts für das Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-186">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-187">Diese Methode blockiert, wenn ein anderer Thread eine Lesesperre oder Lese-/Schreibsperre verfügt.</span><span class="sxs-lookup"><span data-stu-id="554b6-187">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="554b6-188">Eine Beschreibung der Art und Weise, in die Sperre des Schreibers mit mehreren gleichzeitigen Lesesperren wechselt, finden Sie unter der <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-188">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="554b6-189">Ein Thread, der bereits eine Sperre des Lesers kann die Schreibsperre auf zwei Arten abgerufen werden: durch das Aufheben der Sperre des Lesers vor dem Aufruf <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, oder durch Aufrufen von <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-189">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="554b6-190">Wenn ein Thread aufruft, `AcquireWriterLock` während sie weiterhin eine Sperre des Lesers verfügt, seine eigene Lesesperre blockiert, wenn ein unendliches Timeout angegeben wird, wird es zu einem deadlock.</span><span class="sxs-lookup"><span data-stu-id="554b6-190">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="554b6-191">Verwenden Sie zum Vermeiden solcher Deadlocks <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> zu bestimmen, ob der aktuelle Thread eine Lesesperre bereits hat.</span><span class="sxs-lookup"><span data-stu-id="554b6-191">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="554b6-192">`AcquireWriterLock` Rekursive Sperre des Schreibers-Anforderungen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="554b6-192">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="554b6-193">Das bedeutet, dass ein Thread aufrufen kann `AcquireWriterLock` mehrere Male die erhöht sich der Anzahl der Sperren jedes Mal.</span><span class="sxs-lookup"><span data-stu-id="554b6-193">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="554b6-194">Rufen Sie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> einmal für jeden Aufruf `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-194">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="554b6-195">Sie können alternativ Aufrufen <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> reduziert die Anzahl der Sperren sofort auf 0 (null).</span><span class="sxs-lookup"><span data-stu-id="554b6-195">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="554b6-196">Rekursive sperranforderungen sind immer nicht sofort erteilt anfordernden Threads in der protokollwriter-Warteschlange platziert.</span><span class="sxs-lookup"><span data-stu-id="554b6-196">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="554b6-197">Gültige Timeoutwerte finden Sie unter <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-197">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-198">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Schreibers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</span><span class="sxs-lookup"><span data-stu-id="554b6-198">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="554b6-199">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-199">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-200">
            <paramref name="timeout" /> läuft ab, bevor die Sperranforderung erteilt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-200">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="554b6-201">Die <see langword="TimeSpan" />, die den Timeoutzeitraum angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-201">The <see langword="TimeSpan" /> specifying the time-out period.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-202">Erhält die Schreibsperre unter Verwendung eines <see cref="T:System.TimeSpan" />-Werts für das Timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-202">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-203">Diese Methode blockiert, wenn ein anderer Thread eine Lesesperre oder Lese-/Schreibsperre verfügt.</span><span class="sxs-lookup"><span data-stu-id="554b6-203">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="554b6-204">Eine Beschreibung der Art und Weise, in die Sperre des Schreibers mit mehreren gleichzeitigen Lesesperren wechselt, finden Sie unter der <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-204">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="554b6-205">Ein Thread, der bereits eine Sperre des Lesers kann die Schreibsperre auf zwei Arten abgerufen werden: durch das Aufheben der Sperre des Lesers vor dem Aufruf <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, oder durch Aufrufen von <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-205">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="554b6-206">Wenn ein Thread aufruft, `AcquireWriterLock` während sie weiterhin eine Sperre des Lesers verfügt, seine eigene Lesesperre blockiert, wenn ein unendliches Timeout angegeben wird, wird es zu einem deadlock.</span><span class="sxs-lookup"><span data-stu-id="554b6-206">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="554b6-207">Verwenden Sie zum Vermeiden solcher Deadlocks <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> zu bestimmen, ob der aktuelle Thread eine Lesesperre bereits hat.</span><span class="sxs-lookup"><span data-stu-id="554b6-207">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="554b6-208">`AcquireWriterLock` Rekursive Sperre des Schreibers-Anforderungen unterstützt.</span><span class="sxs-lookup"><span data-stu-id="554b6-208">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="554b6-209">Das bedeutet, dass ein Thread aufrufen kann `AcquireWriterLock` mehrere Male die erhöht sich der Anzahl der Sperren jedes Mal.</span><span class="sxs-lookup"><span data-stu-id="554b6-209">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="554b6-210">Rufen Sie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> einmal für jeden Aufruf `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-210">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="554b6-211">Sie können alternativ Aufrufen <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> reduziert die Anzahl der Sperren sofort auf 0 (null).</span><span class="sxs-lookup"><span data-stu-id="554b6-211">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="554b6-212">Rekursive sperranforderungen sind immer nicht sofort erteilt anfordernden Threads in der protokollwriter-Warteschlange platziert.</span><span class="sxs-lookup"><span data-stu-id="554b6-212">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="554b6-213">Gültige Timeoutwerte finden Sie unter <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-213">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-214">
            <paramref name="timeout" /> läuft ab, bevor die Sperranforderung erteilt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-214">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="554b6-215">
            <paramref name="timeout" /> gibt einen negativen Wert ungleich -1 Millisekunden an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-215">
              <paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum">
          <span data-ttu-id="554b6-216">Die Sequenznummer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-216">The sequence number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-217">Gibt an, ob einem Thread die Schreibsperre erteilt wurde, seitdem die Sequenznummer erhalten wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-217">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="554b6-218">
            <see langword="true" />, wenn einem Thread die Schreibsperre erteilt wurde, seitdem die Sequenznummer erhalten wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-218">
              <see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-219">Sie können <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> und `AnyWritersSince` zur Verbesserung der Leistung der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="554b6-219">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="554b6-220">Ein Thread kann z. B. die Informationen zwischenzuspeichern, wenn, die er erhält, halten Sie eine Sperre des Lesers.</span><span class="sxs-lookup"><span data-stu-id="554b6-220">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="554b6-221">Nach dem aufheben und späteren erneuten die Sperre erhalten, können Sie der Thread `AnyWritersSince` zu bestimmen, ob andere Threads auf die Ressource geschrieben haben, in der Zwischenzeit; Wenn nicht, kann die zwischengespeicherte Informationen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-221">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="554b6-222">Diese Technik ist nützlich, in denen Lesen der Informationen, die durch die Sperre geschützt aufwändig ist; z. B. Ausführen einer Datenbankabfrage ein.</span><span class="sxs-lookup"><span data-stu-id="554b6-222">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="554b6-223">Der Aufrufer muss eine Sperre des Lesers oder eine Sperre des Schreibers in Reihenfolge für die Sequenznummer um nützlich zu sein gehalten werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-223">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-224">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> Methode und die <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> Eigenschaft, um zu bestimmen, ob ein anderer Thread die Schreibsperre für die geschützte Ressource seit den aktuellen Thread übernommen zuletzt Schreibsperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-224">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="554b6-225">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-225">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie">
          <span data-ttu-id="554b6-226">Ein von <see cref="T:System.Threading.LockCookie" /> zurückgegebenes <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-226">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-227">Stellt den Sperrstatus des Threads mit dem Status vor dem Aufruf von <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> wieder her.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-227">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-228"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> Hebt die Sperre des Schreibers, unabhängig von der rekursiven Sperrenanzahl auf und die Sperre des Lesers, die vom Thread vor dem Upgrade auf die Sperre des Schreibers gehalten wurde wiederhergestellt.</span><span class="sxs-lookup"><span data-stu-id="554b6-228"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="554b6-229">Die Anzahl der Sperren für die Sperre des Lesers wird wiederhergestellt.</span><span class="sxs-lookup"><span data-stu-id="554b6-229">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="554b6-230">`DowngradeFromWriterLock` akzeptiert eine <xref:System.Threading.LockCookie> durch den Aufruf von <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-230">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="554b6-231">Verwenden Sie keine `LockCookie` zurückgegebenes <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-231">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="554b6-232">Ein Thread blockiert, wenn ein Downgrade von der Sperre des Schreibers durchführen, auch wenn andere Threads auf die Schreibsperre warten, da alle Sperre des Lesers Anforderungen gewährt werden, wenn die Sperre des Schreibers losgelassen wird, nicht zu.</span><span class="sxs-lookup"><span data-stu-id="554b6-232">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-233">Im folgenden Codebeispiel wird veranschaulicht, wie eine Sperre des Lesers anfordern, aktualisieren die Sperre des Lesers auf eine Sperre des Schreibers und ein downgrade auf eine Sperre des Lesers erneut aus.</span><span class="sxs-lookup"><span data-stu-id="554b6-233">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="554b6-234">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-234">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-235">Der Thread verfügt nicht über die Schreibsperre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-235">The thread does not have the writer lock.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="554b6-236">Die Adresse von <paramref name="lockCookie" /> ist ein NULL-Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-236">The address of <paramref name="lockCookie" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="554b6-237">Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <see cref="T:System.Threading.ReaderWriterLock" />-Objekt verarbeitet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-237">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-238">Der Garbage Collector ruft <xref:System.Threading.ReaderWriterLock.Finalize%2A> beim aktuellen <xref:System.Threading.ReaderWriterLock> Objekt wird finalisiert werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-238">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="554b6-239">Ruft einen Wert ab, der angibt, ob der aktuelle Thread eine Lesesperre besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-239">Gets a value indicating whether the current thread holds a reader lock.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="554b6-240">
            <see langword="true" />, wenn der aktuelle Thread eine Lesesperre aufweist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-240">
              <see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="554b6-241">Im folgenden Codebeispiel wird veranschaulicht, wie mit `IsReaderLockHeld` Deadlocks zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="554b6-241">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="554b6-242">Ruft einen Wert ab, der angibt, ob der aktuelle Thread die Schreibsperre enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-242">Gets a value indicating whether the current thread holds the writer lock.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="554b6-243">
            <see langword="true" />, wenn der aktuelle Thread die Schreibsperre enthält, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-243">
              <see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="554b6-244">Im folgenden Codebeispiel wird veranschaulicht, dass beim Versuch, eine Sperre des Lesers in einem Thread abzurufen, die eine Sperre des Schreibers `ReaderWriterLock` verleiht nicht die Sperre des Lesers, sondern stattdessen inkrementiert die Anzahl der Sperren für die Schreibsperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-244">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="554b6-245">Hebt die Sperre unabhängig davon auf, wie oft dem Thread die Sperre zugewiesen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-245">Releases the lock, regardless of the number of times the thread acquired the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="554b6-246">Ein <see cref="T:System.Threading.LockCookie" />-Wert, der die aufgehobene Sperre darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-246">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-247"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Hebt die Sperre des Lesers oder die Sperre des Schreibers, unabhängig von der rekursiven Sperrenanzahl.</span><span class="sxs-lookup"><span data-stu-id="554b6-247"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="554b6-248">Übergeben Sie zum Wiederherstellen des Zustands der Sperre, die Anzahl der Sperren, einschließlich der <xref:System.Threading.LockCookie> auf <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-248">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-249">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Methode, um die Sperre unabhängig davon, wie oft durch den Thread und zum Wiederherstellen des Zustands der die Sperre angefordert wurde.</span><span class="sxs-lookup"><span data-stu-id="554b6-249">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="554b6-250">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-250">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="554b6-251">Verringert die Sperrenanzahl.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-251">Decrements the lock count.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-252"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> verringert die Sperrenanzahl.</span><span class="sxs-lookup"><span data-stu-id="554b6-252"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="554b6-253">Wenn die Anzahl 0 (null) erreicht, wird die Sperre aufgehoben.</span><span class="sxs-lookup"><span data-stu-id="554b6-253">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="554b6-254">Wenn der Thread die Schreibsperre enthält, der Aufruf von `ReleaseReaderLock` hat dieselbe Wirkung wie das Aufrufen <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-254">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="554b6-255">Wenn ein Thread keine Sperren enthält, Aufrufen `ReleaseReaderLock` löst eine <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="554b6-255">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-256">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Lesers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</span><span class="sxs-lookup"><span data-stu-id="554b6-256">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="554b6-257">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-257">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-258">Der Thread verfügt weder über Lese- noch über Schreibsperren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-258">The thread does not have any reader or writer locks.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="554b6-259">Verringert die Sperrenanzahl für die Schreibsperre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-259">Decrements the lock count on the writer lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-260"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> verringert die Sperrenanzahl für der Schreibsperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-260"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="554b6-261">Wenn die Anzahl 0 (null) erreicht, wird die Sperre des Schreibers freigegeben.</span><span class="sxs-lookup"><span data-stu-id="554b6-261">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="554b6-262">Weist ein Thread eine Lesesperre oder keine Sperren, Aufrufen `ReleaseWriterLock` löst eine <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="554b6-262">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-263">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Schreibers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</span><span class="sxs-lookup"><span data-stu-id="554b6-263">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="554b6-264">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-264">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-265">Der Thread verfügt nicht über die Schreibsperre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-265">The thread does not have the writer lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie">
          <span data-ttu-id="554b6-266">Ein von <see cref="T:System.Threading.LockCookie" /> zurückgegebenes <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-266">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-267">Stellt den Sperrstatus des Threads mit dem Status vor dem Aufruf von <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /> wieder her.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-267">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-268">Der Status wiederhergestellt, indem `RestoreLock` schließt die rekursive Sperrenanzahl.</span><span class="sxs-lookup"><span data-stu-id="554b6-268">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="554b6-269">Ein Thread blockiert, wenn versucht wird, eine Sperre des Lesers Wiederherstellen nach einem anderen Thread die Schreibsperre abgerufen wurden, oder wenn versucht wird, die Sperre des Schreibers Wiederherstellen nach einem anderen Thread eine Lesesperre oder Lese-/Schreibsperre abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="554b6-269">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="554b6-270">Da `RestoreLock` akzeptiert kein Timeout muss darauf geachtet, um mögliche Deadlocks zu vermeiden.</span><span class="sxs-lookup"><span data-stu-id="554b6-270">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="554b6-271">Vor dem Aufruf `RestoreLock`, stellen Sie sicher, Sie haben alle Sperren, die seit dem Aufruf von veröffentlicht <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-271">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="554b6-272">Angenommen, ein Thread Deadlocks, wenn er erhält eine Lesesperre, und klicken Sie dann versucht, eine frühere Schreibsperre wiederherzustellen.</span><span class="sxs-lookup"><span data-stu-id="554b6-272">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="554b6-273">Verwendung <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> und <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> solche zusätzlichen Sperren zu erkennen.</span><span class="sxs-lookup"><span data-stu-id="554b6-273">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="554b6-274">Verwenden Sie keine <xref:System.Threading.LockCookie> Merry <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-274">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-275">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Methode, um die Sperre unabhängig davon, wie oft durch den Thread und zum Wiederherstellen des Zustands der die Sperre angefordert wurde.</span><span class="sxs-lookup"><span data-stu-id="554b6-275">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="554b6-276">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-276">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="554b6-277">Die Adresse von <paramref name="lockCookie" /> ist ein NULL-Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-277">The address of <paramref name="lockCookie" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="554b6-278">Wandelt eine Lesesperre in eine Schreibsperre um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-278">Upgrades a reader lock to the writer lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="554b6-279">Das Timeout in Millisekunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-279">The time-out in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-280">Wandelt eine Lesesperre unter Verwendung eines <see langword="Int32" />-Werts für das Timeout in eine Schreibsperre um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-280">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="554b6-281">Ein <see cref="T:System.Threading.LockCookie" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-281">A <see cref="T:System.Threading.LockCookie" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-282">Wenn ein Thread aufruft, `UpgradeToWriterLock` die Sperre des Lesers freigegeben wird, unabhängig von der Anzahl der Sperren und der Thread wird am Ende der Warteschlange für die Schreibsperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-282">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="554b6-283">Daher können andere Threads auf die Ressource, bevor der Thread schreiben, die angefordert, dass das Upgrade auf die Schreibsperre erteilt wird.</span><span class="sxs-lookup"><span data-stu-id="554b6-283">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="554b6-284">Die Timeout-Ausnahme wird nicht ausgelöst, bis der Thread, der aufgerufen die <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> Methode kann Lesesperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-284">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="554b6-285">Wenn keine anderen Threads, die die Sperre des Schreibers wartet vorhanden sind, dies sofort geschieht.</span><span class="sxs-lookup"><span data-stu-id="554b6-285">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="554b6-286">Wenn jedoch ein anderer Thread die Schreibsperre Warteschlange, den Thread, die aufgerufen die <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> Methode kann nicht die Sperre des Lesers zurückzuerhalten, bis alle aktuellen Reader ihre Sperren freigegeben haben, und ein Thread abgerufen und die Writersperre aufgehoben hat.</span><span class="sxs-lookup"><span data-stu-id="554b6-286">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="554b6-287">Dies gilt auch, wenn der andere Thread, der die Sperre des Schreibers angefordert hat nach dem Aufruf des aktuellen Threads angefordert die <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="554b6-287">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="554b6-288">Rufen Sie zum Wiederherstellen der Zustand der remotesperre <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> mithilfe der <xref:System.Threading.LockCookie> zurückgegebenes `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-288">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="554b6-289">Verwenden Sie dies nicht `LockCookie` mit <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-289">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="554b6-290">Wenn ein Thread keine Lesesperre aufweist, verwenden Sie nicht `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-290">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="554b6-291">Verwenden Sie stattdessen <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-291">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="554b6-292">Gültige Timeoutwerte finden Sie unter <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-292">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-293">Im folgenden Codebeispiel wird veranschaulicht, wie eine Sperre des Lesers anfordern, aktualisieren die Sperre des Lesers auf eine Sperre des Schreibers und ein downgrade auf eine Sperre des Lesers erneut aus.</span><span class="sxs-lookup"><span data-stu-id="554b6-293">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="554b6-294">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-294">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-295">
            <paramref name="millisecondsTimeout" /> läuft ab, bevor die Sperranforderung erteilt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-295">
              <paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="554b6-296">Die <see langword="TimeSpan" />, die den Timeoutzeitraum angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-296">The <see langword="TimeSpan" /> specifying the time-out period.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="554b6-297">Wandelt eine Lesesperre unter Verwendung eines <see langword="TimeSpan" />-Werts für das Timeout in eine Schreibsperre um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-297">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="554b6-298">Ein <see cref="T:System.Threading.LockCookie" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-298">A <see cref="T:System.Threading.LockCookie" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-299">Wenn ein Thread aufruft, `UpgradeToWriterLock` die Sperre des Lesers freigegeben wird, unabhängig von der Anzahl der Sperren und der Thread wird am Ende der Warteschlange für die Schreibsperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-299">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="554b6-300">Daher können andere Threads auf die Ressource, bevor der Thread schreiben, die angefordert, dass das Upgrade auf die Schreibsperre erteilt wird.</span><span class="sxs-lookup"><span data-stu-id="554b6-300">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="554b6-301">Die Timeout-Ausnahme wird nicht ausgelöst, bis der Thread, der aufgerufen die <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> Methode kann Lesesperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-301">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="554b6-302">Wenn keine anderen Threads, die die Sperre des Schreibers wartet vorhanden sind, dies sofort geschieht.</span><span class="sxs-lookup"><span data-stu-id="554b6-302">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="554b6-303">Wenn jedoch ein anderer Thread die Schreibsperre Warteschlange, den Thread, die aufgerufen die <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> Methode kann nicht die Sperre des Lesers zurückzuerhalten, bis alle aktuellen Reader ihre Sperren freigegeben haben, und ein Thread abgerufen und die Writersperre aufgehoben hat.</span><span class="sxs-lookup"><span data-stu-id="554b6-303">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="554b6-304">Dies gilt auch, wenn der andere Thread, der die Sperre des Schreibers angefordert hat nach dem Aufruf des aktuellen Threads angefordert die <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="554b6-304">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="554b6-305">Rufen Sie zum Wiederherstellen der Zustand der remotesperre <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> mithilfe der <xref:System.Threading.LockCookie> zurückgegebenes `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-305">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="554b6-306">Verwenden Sie dies nicht `LockCookie` mit <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-306">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="554b6-307">Wenn ein Thread keine Lesesperre aufweist, verwenden Sie nicht `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="554b6-307">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="554b6-308">Verwenden Sie stattdessen <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="554b6-308">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="554b6-309">Gültige Timeoutwerte finden Sie unter <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="554b6-309">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="554b6-310">
            <paramref name="timeout" /> läuft ab, bevor die Sperranforderung erteilt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-310">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="554b6-311">
            <paramref name="timeout" /> gibt einen negativen Wert ungleich -1 Millisekunden an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-311">
              <paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="554b6-312">Ruft die aktuelle Sequenznummer ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-312">Gets the current sequence number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="554b6-313">Die aktuelle Sequenznummer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="554b6-313">The current sequence number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="554b6-314">Der Sequenz erhöht sich, wenn ein Thread die Schreibsperre abruft.</span><span class="sxs-lookup"><span data-stu-id="554b6-314">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="554b6-315">Sie können die Sequenznummer speichern und übergeben Sie sie an <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> zu einem späteren Zeitpunkt, wenn Sie bestimmen, ob die Sperre des Schreibers von anderen Threads in der Zwischenzeit abgerufen haben möchten.</span><span class="sxs-lookup"><span data-stu-id="554b6-315">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="554b6-316">Sie können `WriterSeqNum` zur Verbesserung der Leistung der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="554b6-316">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="554b6-317">Ein Thread kann z. B. die Informationen zwischenzuspeichern, wenn, die er erhält, halten Sie eine Sperre des Lesers.</span><span class="sxs-lookup"><span data-stu-id="554b6-317">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="554b6-318">Nach dem aufheben und späteren erneuten die Sperre erhalten, der Thread kann zu bestimmen, ob andere Threads auf die Ressource, durch den Aufruf geschrieben haben `AnyWritersSince`; Wenn nicht, die zwischengespeicherte Informationen verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="554b6-318">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="554b6-319">Diese Technik ist nützlich, wenn beim Lesen der Informationen, die durch die Sperre geschützt aufwändig ist; z. B. Ausführen einer Datenbankabfrage ein.</span><span class="sxs-lookup"><span data-stu-id="554b6-319">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="554b6-320">Der Aufrufer muss eine Sperre des Lesers oder eine Sperre des Schreibers in Reihenfolge für die Sequenznummer um nützlich zu sein gehalten werden.</span><span class="sxs-lookup"><span data-stu-id="554b6-320">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="554b6-321">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> Eigenschaft und die <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> Methode, um zu bestimmen, ob ein anderer Thread die Schreibsperre für die geschützte Ressource seit den aktuellen Thread übernommen zuletzt Schreibsperre.</span><span class="sxs-lookup"><span data-stu-id="554b6-321">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="554b6-322">Dieser Code ist Teil eines umfangreicheren Beispiels für die <xref:System.Threading.ReaderWriterLock> Klasse.</span><span class="sxs-lookup"><span data-stu-id="554b6-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReaderWriterLock.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fc1a0c88765040869d8ad919aeb575e304c71bde.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc1a0c88765040869d8ad919aeb575e304c71bde</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Defines a lock that supports single writers and multiple readers.</source>
          <target state="translated">Definiert eine Sperre, die einen Writer und mehrere Reader unterstützt.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> has two reader-writer locks, <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> verfügt über zwei Lese-/Schreibsperren, <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> und <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is recommended for all new development.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> wird für alle Neuentwicklungen empfohlen.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> ähnelt <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>, verfügt aber über vereinfachte Regeln für Rekursion sowie für Upgrade und Downgrade des Sperrstatus.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> avoids many cases of potential deadlock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> vermeidet viele potenzielle Deadlocks.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In addition, the performance of <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is significantly better than <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Darüber hinaus ist die Leistung von <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> wesentlich besser als die von <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is used to synchronize access to a resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> wird zum Synchronisieren des Zugriffs auf eine Ressource verwendet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</source>
          <target state="translated">Einem bestimmten Zeitpunkt können sie entweder gleichzeitige Lesezugriff für mehrere Threads oder Schreibzugriff für einen einzelnen Thread.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In a situation where a resource is changed infrequently, a <ph id="ph1">`ReaderWriterLock`</ph> provides better throughput than a simple one-at-a-time lock, such as <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
          <target state="translated">In einer Situation, in dem eine Ressource unregelmäßig geändert wird, eine <ph id="ph1">`ReaderWriterLock`</ph> erhalten Sie einen besseren Durchsatz als eine einfache One-am-Time-Sperre, wie z. B. <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">`ReaderWriterLock`</ph> works best where most accesses are reads, while writes are infrequent and of short duration.</source>
          <target state="translated"><ph id="ph1">`ReaderWriterLock`</ph> funktioniert am besten, wo die meisten Zugriffe Lesevorgänge, während Schreibvorgänge selten sind und von kurzer Dauer.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</source>
          <target state="translated">Mehrere Reader Alternative mit einen Writer, sodass weder Leser noch Schreiber für längere Zeit blockiert werden.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Holding reader locks or writer locks for long periods will starve other threads.</source>
          <target state="translated">Speichern von Lesesperren oder Schreibsperren für lange Zeiträume wird anderen Threads blockieren.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For best performance, consider restructuring your application to minimize the duration of writes.</source>
          <target state="translated">Sollten Sie für optimale Leistung in der Umstrukturierung der anwendungskennworts, die Dauer der Schreibvorgänge zu minimieren.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can hold a reader lock or a writer lock, but not both at the same time.</source>
          <target state="translated">Ein Thread kann einen Reader Sperre oder eine Sperre des Schreibers jedoch nicht beides gleichzeitig enthalten.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Instead of releasing a reader lock in order to acquire the writer lock, you can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>.</source>
          <target state="translated">Anstatt eine Sperre des Lesers um die Sperre des Schreibers erwerben, können Sie <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Recursive lock requests increase the lock count on a lock.</source>
          <target state="translated">Rekursive sperranforderungen Erhöhen der Anzahl der Sperren auf eine Sperre.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Readers and writers are queued separately.</source>
          <target state="translated">Reader und Writer werden separat in die Warteschlange eingereiht.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</source>
          <target state="translated">Wenn ein Thread die Schreibsperre freigibt, sind alle Threads des einreihens in die Warteschlange Reader zu diesem Zeitpunkt gerade ausgeführt Lesesperren erteilt. Wenn all diese Lesesperren veröffentlicht wurden, der nächste Thread warten im Writer Warteschlange, falls vorhanden, wird die Schreibsperre erteilt, usw.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In other words, <ph id="ph1">`ReaderWriterLock`</ph> alternates between a collection of readers, and one writer.</source>
          <target state="translated">Das heißt, <ph id="ph1">`ReaderWriterLock`</ph> wechselt zwischen einer Auflistung von Lesern und einen Writer.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</source>
          <target state="translated">Während des Wartens der eines Threads in der protokollwriter-Warteschlange aktiven Leser Sperren freigegeben werden, sammeln Threads fordern neue Lesesperren in der Warteschlange Reader.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</source>
          <target state="translated">Ihre Anforderungen werden nicht erteilt, obwohl sie vorhandene Sperre des Lesers Inhaber gleichzeitigen Zugriff freigeben konnte. Dies schützt gegen unbestimmtes Blockierung von Lesern Writer.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Most methods for acquiring locks on a <ph id="ph1">`ReaderWriterLock`</ph> accept time-out values.</source>
          <target state="translated">Die meisten Methoden zum Abrufen von Sperren auf einer <ph id="ph1">`ReaderWriterLock`</ph> akzeptieren Timeoutwerte.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Use time-outs to avoid deadlocks in your application.</source>
          <target state="translated">Verwenden Sie Timeouts, um Deadlocks in der Anwendung zu vermeiden.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</source>
          <target state="translated">Ein Thread kann z. B. der Writer-Sperre auf eine Ressource und fordern dann eine Sperre des Lesers für eine zweite Ressource; ein anderer Thread möglicherweise in der Zwischenzeit können die Writersperre für die zweite Ressource abrufen und eine Sperre des Lesers auf der ersten anfordert.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Unless time-outs are used, the threads deadlock.</source>
          <target state="translated">Wenn keine Timeouts verwendet werden, die Threads Deadlock.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">Wenn das Timeoutintervall abläuft, und die Anforderung zur sperrenfreigabe nicht erteilt wurde wurde, gibt die Methode Steuerelement an den aufrufenden Thread durch Auslösen einer <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can catch this exception and determine what action to take next.</source>
          <target state="translated">Ein Thread kann diese Ausnahme abfangen und bestimmen, welche Maßnahme als nächste ergriffen werden.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Time-outs are expressed in milliseconds.</source>
          <target state="translated">Timeouts werden in Millisekunden angegeben.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you use a <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> to specify the time-out, the value used is the total number of whole milliseconds represented by the <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Bei Verwendung einer <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> zum Angeben des Timeouts verwendete Wert ist die Gesamtanzahl von ganzen Millisekunden, dargestellt durch die <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following table shows the valid time-out values in milliseconds.</source>
          <target state="translated">Die folgende Tabelle zeigt die gültige Timeoutwerte in Millisekunden an.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Value</source>
          <target state="translated">Wert</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Description</source>
          <target state="translated">Beschreibung </target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>-1</source>
          <target state="translated">-1</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread waits until the lock is acquired, regardless of how long it takes.</source>
          <target state="translated">Der Thread wartet, bis die Sperre abgerufen wurde, unabhängig davon, wie lange es dauert.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For methods that specify integer time-outs, the constant <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> can be used.</source>
          <target state="translated">Für Methoden, die ganzzahlige Timeouts, die Konstante angeben <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> kann verwendet werden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread does not wait to acquire the lock.</source>
          <target state="translated">Der Thread wartet nicht, die Sperre abzurufen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the lock cannot be acquired immediately, the method returns.</source>
          <target state="translated">Wenn die Sperre sofort kann nicht abgerufen werden, erfolgt die Methodenrückgabe.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>&gt;0</source>
          <target state="translated">&gt;0</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The number of milliseconds to wait.</source>
          <target state="translated">Die Anzahl der Millisekunden, die gewartet werden soll.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>With the exception of -1, negative time-out values are not allowed.</source>
          <target state="translated">Mit Ausnahme von-1 ist werden negative Timeoutwerte nicht zulässig.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you specify a negative integer other than -1, a time-out value of zero is used instead.</source>
          <target state="translated">Wenn Sie eine negative ganze Zahl ungleich-1 angeben, wird stattdessen ein Timeoutwert von 0 (null) verwendet.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> that represents a negative number of milliseconds other than -1, <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is thrown.</source>
          <target state="translated">(D. h. die Methodenrückgabe ohne warten, wenn die Sperre kann nicht direkt abgerufen werden.) Bei Angabe einer <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> , die eine negative Anzahl von Millisekunden, jedoch nicht-1, stellt <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> ausgelöst.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> to protect a shared resource, an integer value named <ph id="ph2">`resource`</ph>, that is read concurrently and written exclusively by multiple threads.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie eine <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> um eine freigegebene Ressource zu schützen, ein ganzzahligen Wert mit dem Namen <ph id="ph2">`resource`</ph>, d. h. ausschließlich von mehreren Threads gleichzeitig gelesen und geschrieben.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Note that the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is declared at the class level so that it is visible to all threads.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> auf Klassenebene deklariert, sodass es für alle Threads angezeigt wird.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>This type is thread safe.</source>
          <target state="translated">Dieser Typ ist threadsicher.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>The following code example demonstrates how to create a new instance of the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Im folgenden Codebeispiel wird gezeigt, wie eine neue Instanz der <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>-Klasse erstellt wird.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires a reader lock.</source>
          <target state="translated">Erhält eine Lesesperre.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Das Timeout in Millisekunden.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Acquires a reader lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Erhält eine Lesesperre unter Verwendung eines <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werts für das Timeout.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blockiert, wenn ein anderen Thread die Schreibsperre verfügt oder mindestens einen Thread die Sperre des Schreibers wartet.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">Wenn der aktuelle Thread bereits die Schreibsperre enthält, ist keine Lesesperre.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">Stattdessen wird die Anzahl der Sperren für die Schreibsperre erhöht.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">Dadurch wird verhindert, dass einen Thread einen eigenen Lese-/Schreibsperre blockieren.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">Das Ergebnis ist das gleiche wie das Aufrufen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, und ein zusätzlicher Aufruf <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> ist erforderlich, wenn die Sperre des Schreibers freigeben.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> Rekursive Sperre des Lesers-Anforderungen unterstützt.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">D. h. ein Thread kann m: System.Threading.ReaderWriterLock.ReleaseReaderLock mehrmals aufrufen der erhöht sich der Anzahl der Sperren jedes Mal.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> einmal für jeden Aufruf <ph id="ph2">`AcquireReaderLock`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">Sie können alternativ Aufrufen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> reduziert die Anzahl der Sperren sofort auf 0 (null).</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">Rekursive sperranforderungen werden immer sofort gewährt, ohne anfordernden Threads in der Warteschlange Leser platzieren.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">Verwenden Sie rekursive Sperren mit Vorsicht, um blockierende Sperre des Schreibers Anforderungen für längere Zeiträume zu vermeiden.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Gültige Timeoutwerte finden Sie unter <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Lesers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> läuft ab, bevor die Sperranforderung erteilt wird.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>, die den Timeoutzeitraum angibt.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Acquires a reader lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Erhält eine Lesesperre unter Verwendung eines <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>-Werts für das Timeout.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blockiert, wenn ein anderen Thread die Schreibsperre verfügt oder mindestens einen Thread die Sperre des Schreibers wartet.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">Wenn der aktuelle Thread bereits die Schreibsperre enthält, ist keine Lesesperre.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">Stattdessen wird die Anzahl der Sperren für die Schreibsperre erhöht.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">Dadurch wird verhindert, dass einen Thread einen eigenen Lese-/Schreibsperre blockieren.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">Das Ergebnis ist das gleiche wie das Aufrufen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, und ein zusätzlicher Aufruf <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> ist erforderlich, wenn die Sperre des Schreibers freigeben.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> Rekursive Sperre des Lesers-Anforderungen unterstützt.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">D. h. ein Thread kann m: System.Threading.ReaderWriterLock.ReleaseReaderLock mehrmals aufrufen der erhöht sich der Anzahl der Sperren jedes Mal.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> einmal für jeden Aufruf <ph id="ph2">`AcquireReaderLock`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">Sie können alternativ Aufrufen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> reduziert die Anzahl der Sperren sofort auf 0 (null).</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">Rekursive sperranforderungen werden immer sofort gewährt, ohne anfordernden Threads in der Warteschlange Leser platzieren.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">Verwenden Sie rekursive Sperren mit Vorsicht, um blockierende Sperre des Schreibers Anforderungen für längere Zeiträume zu vermeiden.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Gültige Timeoutwerte finden Sie unter <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> läuft ab, bevor die Sperranforderung erteilt wird.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> gibt einen negativen Wert ungleich -1 Millisekunden an.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires the writer lock.</source>
          <target state="translated">Erhält die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Das Timeout in Millisekunden.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Acquires the writer lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Erhält die Schreibsperre unter Verwendung eines <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werts für das Timeout.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">Diese Methode blockiert, wenn ein anderer Thread eine Lesesperre oder Lese-/Schreibsperre verfügt.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Eine Beschreibung der Art und Weise, in die Sperre des Schreibers mit mehreren gleichzeitigen Lesesperren wechselt, finden Sie unter der <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">Ein Thread, der bereits eine Sperre des Lesers kann die Schreibsperre auf zwei Arten abgerufen werden: durch das Aufheben der Sperre des Lesers vor dem Aufruf <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, oder durch Aufrufen von <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">Wenn ein Thread aufruft, <ph id="ph1">`AcquireWriterLock`</ph> während sie weiterhin eine Sperre des Lesers verfügt, seine eigene Lesesperre blockiert, wenn ein unendliches Timeout angegeben wird, wird es zu einem deadlock.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">Verwenden Sie zum Vermeiden solcher Deadlocks <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> zu bestimmen, ob der aktuelle Thread eine Lesesperre bereits hat.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> Rekursive Sperre des Schreibers-Anforderungen unterstützt.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">Das bedeutet, dass ein Thread aufrufen kann <ph id="ph1">`AcquireWriterLock`</ph> mehrere Male die erhöht sich der Anzahl der Sperren jedes Mal.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> einmal für jeden Aufruf <ph id="ph2">`AcquireWriterLock`</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">Sie können alternativ Aufrufen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> reduziert die Anzahl der Sperren sofort auf 0 (null).</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">Rekursive sperranforderungen sind immer nicht sofort erteilt anfordernden Threads in der protokollwriter-Warteschlange platziert.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Gültige Timeoutwerte finden Sie unter <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Schreibers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> läuft ab, bevor die Sperranforderung erteilt wird.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">Die <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>, die den Timeoutzeitraum angibt.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Acquires the writer lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Erhält die Schreibsperre unter Verwendung eines <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>-Werts für das Timeout.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">Diese Methode blockiert, wenn ein anderer Thread eine Lesesperre oder Lese-/Schreibsperre verfügt.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Eine Beschreibung der Art und Weise, in die Sperre des Schreibers mit mehreren gleichzeitigen Lesesperren wechselt, finden Sie unter der <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">Ein Thread, der bereits eine Sperre des Lesers kann die Schreibsperre auf zwei Arten abgerufen werden: durch das Aufheben der Sperre des Lesers vor dem Aufruf <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, oder durch Aufrufen von <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">Wenn ein Thread aufruft, <ph id="ph1">`AcquireWriterLock`</ph> während sie weiterhin eine Sperre des Lesers verfügt, seine eigene Lesesperre blockiert, wenn ein unendliches Timeout angegeben wird, wird es zu einem deadlock.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">Verwenden Sie zum Vermeiden solcher Deadlocks <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> zu bestimmen, ob der aktuelle Thread eine Lesesperre bereits hat.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> Rekursive Sperre des Schreibers-Anforderungen unterstützt.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">Das bedeutet, dass ein Thread aufrufen kann <ph id="ph1">`AcquireWriterLock`</ph> mehrere Male die erhöht sich der Anzahl der Sperren jedes Mal.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> einmal für jeden Aufruf <ph id="ph2">`AcquireWriterLock`</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">Sie können alternativ Aufrufen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> reduziert die Anzahl der Sperren sofort auf 0 (null).</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">Rekursive sperranforderungen sind immer nicht sofort erteilt anfordernden Threads in der protokollwriter-Warteschlange platziert.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Gültige Timeoutwerte finden Sie unter <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> läuft ab, bevor die Sperranforderung erteilt wird.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> gibt einen negativen Wert ungleich -1 Millisekunden an.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The sequence number.</source>
          <target state="translated">Die Sequenznummer.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</source>
          <target state="translated">Gibt an, ob einem Thread die Schreibsperre erteilt wurde, seitdem die Sequenznummer erhalten wurde.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn einem Thread die Schreibsperre erteilt wurde, seitdem die Sequenznummer erhalten wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>You can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> and <ph id="ph2">`AnyWritersSince`</ph> to improve application performance.</source>
          <target state="translated">Sie können <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> und <ph id="ph2">`AnyWritersSince`</ph> zur Verbesserung der Leistung der Anwendung.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">Ein Thread kann z. B. die Informationen zwischenzuspeichern, wenn, die er erhält, halten Sie eine Sperre des Lesers.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>After releasing and later reacquiring the lock, the thread can use <ph id="ph1">`AnyWritersSince`</ph> to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</source>
          <target state="translated">Nach dem aufheben und späteren erneuten die Sperre erhalten, können Sie der Thread <ph id="ph1">`AnyWritersSince`</ph> zu bestimmen, ob andere Threads auf die Ressource geschrieben haben, in der Zwischenzeit; Wenn nicht, kann die zwischengespeicherte Informationen verwendet werden.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">Diese Technik ist nützlich, in denen Lesen der Informationen, die durch die Sperre geschützt aufwändig ist; z. B. Ausführen einer Datenbankabfrage ein.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">Der Aufrufer muss eine Sperre des Lesers oder eine Sperre des Schreibers in Reihenfolge für die Sequenznummer um nützlich zu sein gehalten werden.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> Methode und die <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> Eigenschaft, um zu bestimmen, ob ein anderer Thread die Schreibsperre für die geschützte Ressource seit den aktuellen Thread übernommen zuletzt Schreibsperre.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>.</source>
          <target state="translated">Ein von <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> zurückgegebenes <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> was called.</source>
          <target state="translated">Stellt den Sperrstatus des Threads mit dem Status vor dem Aufruf von <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> wieder her.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> Hebt die Sperre des Schreibers, unabhängig von der rekursiven Sperrenanzahl auf und die Sperre des Lesers, die vom Thread vor dem Upgrade auf die Sperre des Schreibers gehalten wurde wiederhergestellt.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The lock count on the reader lock is restored.</source>
          <target state="translated">Die Anzahl der Sperren für die Sperre des Lesers wird wiederhergestellt.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">`DowngradeFromWriterLock`</ph> accepts a <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> obtained by calling <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`DowngradeFromWriterLock`</ph> akzeptiert eine <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> durch den Aufruf von <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">`LockCookie`</ph> returned by <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">Verwenden Sie keine <ph id="ph1">`LockCookie`</ph> zurückgegebenes <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</source>
          <target state="translated">Ein Thread blockiert, wenn ein Downgrade von der Sperre des Schreibers durchführen, auch wenn andere Threads auf die Schreibsperre warten, da alle Sperre des Lesers Anforderungen gewährt werden, wenn die Sperre des Schreibers losgelassen wird, nicht zu.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie eine Sperre des Lesers anfordern, aktualisieren die Sperre des Lesers auf eine Sperre des Schreibers und ein downgrade auf eine Sperre des Lesers erneut aus.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">Der Thread verfügt nicht über die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Die Adresse von <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> ist ein NULL-Zeiger.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> object.</source>
          <target state="translated">Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph>-Objekt verarbeitet.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph> when the current <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> object is ready to be finalized.</source>
          <target state="translated">Der Garbage Collector ruft <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph> beim aktuellen <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Objekt wird finalisiert werden.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>Gets a value indicating whether the current thread holds a reader lock.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob der aktuelle Thread eine Lesesperre besitzt.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds a reader lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der aktuelle Thread eine Lesesperre aufweist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>The following code example demonstrates how to use <ph id="ph1">`IsReaderLockHeld`</ph> to avoid deadlocks.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">`IsReaderLockHeld`</ph> Deadlocks zu vermeiden.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>Gets a value indicating whether the current thread holds the writer lock.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob der aktuelle Thread die Schreibsperre enthält.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds the writer lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der aktuelle Thread die Schreibsperre enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, <ph id="ph1">`ReaderWriterLock`</ph> does not grant the reader lock but instead increments the lock count on the writer lock.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, dass beim Versuch, eine Sperre des Lesers in einem Thread abzurufen, die eine Sperre des Schreibers <ph id="ph1">`ReaderWriterLock`</ph> verleiht nicht die Sperre des Lesers, sondern stattdessen inkrementiert die Anzahl der Sperren für die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>Releases the lock, regardless of the number of times the thread acquired the lock.</source>
          <target state="translated">Hebt die Sperre unabhängig davon auf, wie oft dem Thread die Sperre zugewiesen wurde.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value representing the released lock.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>-Wert, der die aufgehobene Sperre darstellt.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> releases the reader lock or writer lock, regardless of the recursive lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> Hebt die Sperre des Lesers oder die Sperre des Schreibers, unabhängig von der rekursiven Sperrenanzahl.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>To restore the state of the lock, including the lock count, pass the <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">Übergeben Sie zum Wiederherstellen des Zustands der Sperre, die Anzahl der Sperren, einschließlich der <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> auf <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> Methode, um die Sperre unabhängig davon, wie oft durch den Thread und zum Wiederherstellen des Zustands der die Sperre angefordert wurde.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>Decrements the lock count.</source>
          <target state="translated">Verringert die Sperrenanzahl.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> decrements the lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> verringert die Sperrenanzahl.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>When the count reaches zero, the lock is released.</source>
          <target state="translated">Wenn die Anzahl 0 (null) erreicht, wird die Sperre aufgehoben.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has the writer lock, calling <ph id="ph1">`ReleaseReaderLock`</ph> has the same effect as calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>.</source>
          <target state="translated">Wenn der Thread die Schreibsperre enthält, der Aufruf von <ph id="ph1">`ReleaseReaderLock`</ph> hat dieselbe Wirkung wie das Aufrufen <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has no locks, calling <ph id="ph1">`ReleaseReaderLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">Wenn ein Thread keine Sperren enthält, Aufrufen <ph id="ph1">`ReleaseReaderLock`</ph> löst eine <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Lesers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The thread does not have any reader or writer locks.</source>
          <target state="translated">Der Thread verfügt weder über Lese- noch über Schreibsperren.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>Decrements the lock count on the writer lock.</source>
          <target state="translated">Verringert die Sperrenanzahl für die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> decrements the writer lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> verringert die Sperrenanzahl für der Schreibsperre.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>When the count reaches zero, the writer lock is released.</source>
          <target state="translated">Wenn die Anzahl 0 (null) erreicht, wird die Sperre des Schreibers freigegeben.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>If a thread has a reader lock, or no locks, calling <ph id="ph1">`ReleaseWriterLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">Weist ein Thread eine Lesesperre oder keine Sperren, Aufrufen <ph id="ph1">`ReleaseWriterLock`</ph> löst eine <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">Im folgenden Codebeispiel wird gezeigt, zum Abrufen und Freigeben einer Sperre des Schreibers sowie zum Behandeln der Ausnahme wird ausgelöst, wenn eine Anforderung ein Timeout eintritt.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">Der Thread verfügt nicht über die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated">Ein von <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> zurückgegebenes <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before calling <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated">Stellt den Sperrstatus des Threads mit dem Status vor dem Aufruf von <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph> wieder her.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The state restored by <ph id="ph1">`RestoreLock`</ph> includes the recursive lock count.</source>
          <target state="translated">Der Status wiederhergestellt, indem <ph id="ph1">`RestoreLock`</ph> schließt die rekursive Sperrenanzahl.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</source>
          <target state="translated">Ein Thread blockiert, wenn versucht wird, eine Sperre des Lesers Wiederherstellen nach einem anderen Thread die Schreibsperre abgerufen wurden, oder wenn versucht wird, die Sperre des Schreibers Wiederherstellen nach einem anderen Thread eine Lesesperre oder Lese-/Schreibsperre abgerufen wurden.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Because <ph id="ph1">`RestoreLock`</ph> does not accept a time-out, you should take care to avoid possible deadlocks.</source>
          <target state="translated">Da <ph id="ph1">`RestoreLock`</ph> akzeptiert kein Timeout muss darauf geachtet, um mögliche Deadlocks zu vermeiden.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Before calling <ph id="ph1">`RestoreLock`</ph>, make sure you have released all locks acquired since the call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">Vor dem Aufruf <ph id="ph1">`RestoreLock`</ph>, stellen Sie sicher, Sie haben alle Sperren, die seit dem Aufruf von veröffentlicht <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</source>
          <target state="translated">Angenommen, ein Thread Deadlocks, wenn er erhält eine Lesesperre, und klicken Sie dann versucht, eine frühere Schreibsperre wiederherzustellen.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph> to detect such additional locks.</source>
          <target state="translated">Verwendung <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph> solche zusätzlichen Sperren zu erkennen.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> returned from <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">Verwenden Sie keine <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> Merry <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> Methode, um die Sperre unabhängig davon, wie oft durch den Thread und zum Wiederherstellen des Zustands der die Sperre angefordert wurde.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Die Adresse von <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> ist ein NULL-Zeiger.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Upgrades a reader lock to the writer lock.</source>
          <target state="translated">Wandelt eine Lesesperre in eine Schreibsperre um.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Das Timeout in Millisekunden.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Upgrades a reader lock to the writer lock, using an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Wandelt eine Lesesperre unter Verwendung eines <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>-Werts für das Timeout in eine Schreibsperre um.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>-Wert.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">Wenn ein Thread aufruft, <ph id="ph1">`UpgradeToWriterLock`</ph> die Sperre des Lesers freigegeben wird, unabhängig von der Anzahl der Sperren und der Thread wird am Ende der Warteschlange für die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">Daher können andere Threads auf die Ressource, bevor der Thread schreiben, die angefordert, dass das Upgrade auf die Schreibsperre erteilt wird.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">Die Timeout-Ausnahme wird nicht ausgelöst, bis der Thread, der aufgerufen die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> Methode kann Lesesperre.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">Wenn keine anderen Threads, die die Sperre des Schreibers wartet vorhanden sind, dies sofort geschieht.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">Wenn jedoch ein anderer Thread die Schreibsperre Warteschlange, den Thread, die aufgerufen die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> Methode kann nicht die Sperre des Lesers zurückzuerhalten, bis alle aktuellen Reader ihre Sperren freigegeben haben, und ein Thread abgerufen und die Writersperre aufgehoben hat.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">Dies gilt auch, wenn der andere Thread, der die Sperre des Schreibers angefordert hat nach dem Aufruf des aktuellen Threads angefordert die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">Rufen Sie zum Wiederherstellen der Zustand der remotesperre <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> mithilfe der <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> zurückgegebenes <ph id="ph3">`UpgradeToWriterLock`</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">Verwenden Sie dies nicht <ph id="ph1">`LockCookie`</ph> mit <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">Wenn ein Thread keine Lesesperre aufweist, verwenden Sie nicht <ph id="ph1">`UpgradeToWriterLock`</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">Verwenden Sie stattdessen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Gültige Timeoutwerte finden Sie unter <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie eine Sperre des Lesers anfordern, aktualisieren die Sperre des Lesers auf eine Sperre des Schreibers und ein downgrade auf eine Sperre des Lesers erneut aus.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> läuft ab, bevor die Sperranforderung erteilt wird.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">Die <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>, die den Timeoutzeitraum angibt.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Upgrades a reader lock to the writer lock, using a <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Wandelt eine Lesesperre unter Verwendung eines <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>-Werts für das Timeout in eine Schreibsperre um.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>-Wert.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">Wenn ein Thread aufruft, <ph id="ph1">`UpgradeToWriterLock`</ph> die Sperre des Lesers freigegeben wird, unabhängig von der Anzahl der Sperren und der Thread wird am Ende der Warteschlange für die Schreibsperre.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">Daher können andere Threads auf die Ressource, bevor der Thread schreiben, die angefordert, dass das Upgrade auf die Schreibsperre erteilt wird.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">Die Timeout-Ausnahme wird nicht ausgelöst, bis der Thread, der aufgerufen die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> Methode kann Lesesperre.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">Wenn keine anderen Threads, die die Sperre des Schreibers wartet vorhanden sind, dies sofort geschieht.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">Wenn jedoch ein anderer Thread die Schreibsperre Warteschlange, den Thread, die aufgerufen die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> Methode kann nicht die Sperre des Lesers zurückzuerhalten, bis alle aktuellen Reader ihre Sperren freigegeben haben, und ein Thread abgerufen und die Writersperre aufgehoben hat.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">Dies gilt auch, wenn der andere Thread, der die Sperre des Schreibers angefordert hat nach dem Aufruf des aktuellen Threads angefordert die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">Rufen Sie zum Wiederherstellen der Zustand der remotesperre <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> mithilfe der <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> zurückgegebenes <ph id="ph3">`UpgradeToWriterLock`</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">Verwenden Sie dies nicht <ph id="ph1">`LockCookie`</ph> mit <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">Wenn ein Thread keine Lesesperre aufweist, verwenden Sie nicht <ph id="ph1">`UpgradeToWriterLock`</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">Verwenden Sie stattdessen <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">Gültige Timeoutwerte finden Sie unter <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> läuft ab, bevor die Sperranforderung erteilt wird.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> gibt einen negativen Wert ungleich -1 Millisekunden an.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>Gets the current sequence number.</source>
          <target state="translated">Ruft die aktuelle Sequenznummer ab.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The current sequence number.</source>
          <target state="translated">Die aktuelle Sequenznummer.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The sequence number increases whenever a thread acquires the writer lock.</source>
          <target state="translated">Der Sequenz erhöht sich, wenn ein Thread die Schreibsperre abruft.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can save the sequence number and pass it to <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</source>
          <target state="translated">Sie können die Sequenznummer speichern und übergeben Sie sie an <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> zu einem späteren Zeitpunkt, wenn Sie bestimmen, ob die Sperre des Schreibers von anderen Threads in der Zwischenzeit abgerufen haben möchten.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can use <ph id="ph1">`WriterSeqNum`</ph> to improve application performance.</source>
          <target state="translated">Sie können <ph id="ph1">`WriterSeqNum`</ph> zur Verbesserung der Leistung der Anwendung.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">Ein Thread kann z. B. die Informationen zwischenzuspeichern, wenn, die er erhält, halten Sie eine Sperre des Lesers.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling <ph id="ph1">`AnyWritersSince`</ph>; if not, the cached information can be used.</source>
          <target state="translated">Nach dem aufheben und späteren erneuten die Sperre erhalten, der Thread kann zu bestimmen, ob andere Threads auf die Ressource, durch den Aufruf geschrieben haben <ph id="ph1">`AnyWritersSince`</ph>; Wenn nicht, die zwischengespeicherte Informationen verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">Diese Technik ist nützlich, wenn beim Lesen der Informationen, die durch die Sperre geschützt aufwändig ist; z. B. Ausführen einer Datenbankabfrage ein.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">Der Aufrufer muss eine Sperre des Lesers oder eine Sperre des Schreibers in Reihenfolge für die Sequenznummer um nützlich zu sein gehalten werden.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> Eigenschaft und die <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> Methode, um zu bestimmen, ob ein anderer Thread die Schreibsperre für die geschützte Ressource seit den aktuellen Thread übernommen zuletzt Schreibsperre.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">Dieser Code ist Teil eines umfangreicheren Beispiels für die <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> Klasse.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="_Type" FullName="System.Runtime.InteropServices._Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9641773d43fbed2f01575be9521f133bea011738" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52239545" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface _Type" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Type" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._Type" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Type" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Type" />
  <TypeSignature Language="F#" Value="type _Type = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e4574-101">Macht die öffentlichen Member der <see cref="T:System.Type" />-Klasse für den nicht verwalteten Code verfügbar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e4574-101">Exposes the public members of the <see cref="T:System.Type" /> class to the unmanaged code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-102">Diese Schnittstelle ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-102">This interface is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-103">Diese Schnittstelle behält die Vtable-Reihenfolge von der <xref:System.Type?displayProperty=nameWithType> Klassenmember, die von nicht verwalteten COM-Objekte zugegriffen werden kann.</span><span class="sxs-lookup"><span data-stu-id="e4574-103">This interface preserves the vtable order of the <xref:System.Type?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Runtime.InteropServices._Type.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-104">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.Assembly" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-104">Provides COM objects with version-independent access to the <see cref="P:System.Type.Assembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-105">Eine <see cref="T:System.Reflection.Assembly" />-Instanz, die die Assembly mit dem aktuellen Typ beschreibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-105">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-106">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-106">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-107">Die <xref:System.Type.Assembly%2A?displayProperty=nameWithType> -Eigenschaft ruft die <xref:System.Reflection.Assembly> in dem der Typ deklariert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-107">The <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property gets the <xref:System.Reflection.Assembly> in which the type is declared.</span></span> <span data-ttu-id="e4574-108">Bei generischen Typen, die diese Eigenschaft ruft die <xref:System.Reflection.Assembly> in der der generische Typ definiert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-108">For generic types, this property gets the <xref:System.Reflection.Assembly> in which the generic type is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-109">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.AssemblyQualifiedName" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-109">Provides COM objects with version-independent access to the <see cref="P:System.Type.AssemblyQualifiedName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-110">Der durch die Assembly gekennzeichnete Name von <see cref="T:System.Type" /> einschließlich des Namens der Assembly, aus der der <see cref="T:System.Type" /> geladen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-110">The assembly-qualified name of the <see cref="T:System.Type" />, including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-111">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-111">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-112">Die <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> Eigenschaft ruft den Namen mit assemblyqualifikation, der die <xref:System.Type>, einschließlich des Namens der Assembly, aus der die <xref:System.Type> geladen wurde.</span><span class="sxs-lookup"><span data-stu-id="e4574-112">The <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property gets the assembly-qualified name of the <xref:System.Type>, including the name of the assembly from which the <xref:System.Type> was loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Runtime.InteropServices._Type.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-113">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.Attributes" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-113">Provides COM objects with version-independent access to the <see cref="P:System.Type.Attributes" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-114">Ein <see cref="T:System.Reflection.TypeAttributes" />-Objekt, das die Attributgruppe von <see cref="T:System.Type" /> darstellt. Falls <see cref="T:System.Type" /> jedoch einen generischen Typparameter darstellt, ist der Wert nicht festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-114">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-115">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-115">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-116">Die <xref:System.Type.Attributes%2A?displayProperty=nameWithType> Eigenschaft ruft die zugeordneten Attribute ab, der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-116">The <xref:System.Type.Attributes%2A?displayProperty=nameWithType> property gets the attributes associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Runtime.InteropServices._Type.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-117">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.BaseType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-117">Provides COM objects with version-independent access to the <see cref="P:System.Type.BaseType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-118">Der <see cref="T:System.Type" />, von dem der aktuelle <see cref="T:System.Type" /> direkt erbt, oder <see langword="null" />, wenn der aktuelle <see langword="Type" /> die <see cref="T:System.Object" />-Klasse darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-118">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-119">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-119">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-120">Die <xref:System.Type.BaseType%2A?displayProperty=nameWithType> Eigenschaft ruft den Typ ab, aus dem aktuellen <xref:System.Type> direkt erbt.</span><span class="sxs-lookup"><span data-stu-id="e4574-120">The <xref:System.Type.BaseType%2A?displayProperty=nameWithType> property gets the type from which the current <xref:System.Type> directly inherits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-121">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.DeclaringType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-121">Provides COM objects with version-independent access to the <see cref="P:System.Type.DeclaringType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-122">Das <see cref="T:System.Type" />-Objekt für die Klasse, in der dieser Member deklariert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-122">The <see cref="T:System.Type" /> object for the class that declares this member.</span>
          </span>
          <span data-ttu-id="e4574-123">Wenn der Typ ein geschachtelter Typ ist, gibt diese Eigenschaft den einschließenden Typ zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-123">If the type is a nested type, this property returns the enclosing type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-124">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-124">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-125">Die <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> -Eigenschaft ruft die Klasse, die diesen Member deklariert.</span><span class="sxs-lookup"><span data-stu-id="e4574-125">The <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-126">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.Equals" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-126">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.Equals" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-127">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-127">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-128">Die <xref:System.Type.Equals%2A?displayProperty=nameWithType> Methode bestimmt, ob der zugrunde liegende des aktuellen Systemtyp <xref:System.Type> ist identisch mit dem zugrunde liegenden Systemtyp des angegebenen <xref:System.Object> oder <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-128">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object> or <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="e4574-129">sein.</span><span class="sxs-lookup"><span data-stu-id="e4574-129">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_Type.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="e4574-130">Das <see cref="T:System.Object" />, dessen zugrunde liegender Systemtyp mit dem zugrunde liegenden Systemtyp des aktuellen <see cref="T:System.Type" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-130">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-131">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.Equals(System.Object)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-131">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-132">
            <see langword="true" />, wenn der zugrunde liegende Systemtyp von <paramref name="o" /> mit dem zugrunde liegenden Systemtyp des aktuellen <see cref="T:System.Type" /> übereinstimmt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-132">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-133">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-133">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-134">Die <xref:System.Type.Equals%2A?displayProperty=nameWithType> Methode bestimmt, ob der zugrunde liegende des aktuellen Systemtyp <xref:System.Type> ist identisch mit dem zugrunde liegenden Systemtyp des angegebenen <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="e4574-134">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="abstract member Equals : Type -&gt; bool" Usage="_Type.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="e4574-135">Das <see cref="T:System.Type" />, dessen zugrunde liegender Systemtyp mit dem zugrunde liegenden Systemtyp des aktuellen <see cref="T:System.Type" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-135">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-136">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.Equals(System.Type)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-136">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-137">
            <see langword="true" />, wenn der zugrunde liegende Systemtyp von <paramref name="o" /> mit dem zugrunde liegenden Systemtyp des aktuellen <see cref="T:System.Type" /> übereinstimmt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-137">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-138">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-138">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-139">Die <xref:System.Type.Equals%2A?displayProperty=nameWithType> Methode bestimmt, ob der zugrunde liegende des aktuellen Systemtyp <xref:System.Type> ist identisch mit dem zugrunde liegenden Systemtyp des angegebenen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-139">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="_Type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="e4574-140">Der <see cref="T:System.Reflection.TypeFilter" />-Delegat, der die Schnittstellen mit <paramref name="filterCriteria" /> vergleicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-140">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <paramref name="filterCriteria" />.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="e4574-141">Die Suchkriterien, die bestimmen, ob eine Schnittstelle in das zurückgegebene Array aufgenommen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-141">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-142">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-142">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-143">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die eine gefilterte Liste von Schnittstellen darstellen, die vom aktuellen <see cref="T:System.Type" /> implementiert oder geerbt wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-143">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-144">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-144">-or-</span>
          </span>
          <span data-ttu-id="e4574-145">Ein leeres Array vom Typ <see cref="T:System.Type" />, wenn der aktuelle <see cref="T:System.Type" /> keine dem Filter entsprechende Schnittstellen implementiert oder geerbt hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-145">An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-146">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-146">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-147">Die <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> Methode gibt ein Array von <xref:System.Type> implementiert, die eine gefilterte Liste von Schnittstellen darstellt, oder der aktuelle Objekte <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-147">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects representing a filtered list of interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="_Type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="e4574-148">Ein <see langword="MemberTypes" />-Objekt, das den Typ der gesuchten Member angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-148">A <see langword="MemberTypes" /> object indicating the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-149">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-149">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-150">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-150">-or-</span>
          </span>
          <span data-ttu-id="e4574-151">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-151">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="e4574-152">Der Delegat, der die Vergleiche durchführt. Der Rückgabewert ist <see langword="true" />, wenn der gerade betrachtete Member den <paramref name="filterCriteria" /> entspricht, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-152">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="e4574-153">Sie können die Delegaten <see langword="FilterAttribute" />, <see langword="FilterName" /> und <see langword="FilterNameIgnoreCase" /> dieser Klasse verwenden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-153">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="e4574-154">Der erste Delegat verwendet als Suchkriterien die Felder von <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> und <see langword="MethodImplAttributes" />, die anderen beiden Delegaten verwenden <see langword="String" />-Objekte als Suchkriterien.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-154">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="e4574-155">Die Suchkriterien, die bestimmen, ob ein Member im Array von <see langword="MemberInfo" />-Objekten zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-155">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="e4574-156">Die Felder von <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> und <see langword="MethodImplAttributes" /> können zusammen mit dem <see langword="FilterAttribute" />-Delegaten dieser Klasse verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-156">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-157">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-157">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-158">Ein gefiltertes Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten vom angegebenen Membertyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-158">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="e4574-159">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-159">-or-</span>
          </span>
          <span data-ttu-id="e4574-160">Ein leeres Array vom <see cref="T:System.Reflection.MemberInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine den Filterkriterien entsprechenden Member vom <paramref name="memberType" />-Typ besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-160">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-161">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-161">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-162">Die <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> Methode gibt ein gefiltertes Array von <xref:System.Reflection.MemberInfo> Objekte mit dem angegebenen Membertyp.</span><span class="sxs-lookup"><span data-stu-id="e4574-162">The <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> method returns a filtered array of <xref:System.Reflection.MemberInfo> objects of the specified member type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Runtime.InteropServices._Type.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-163">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.FullName" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-163">Provides COM objects with version-independent access to the <see cref="P:System.Type.FullName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-164">Eine Zeichenfolge mit dem vollqualifizierten Namen von <see cref="T:System.Type" />. Dies schließt den Namespace von <see cref="T:System.Type" />, nicht jedoch die Assembly ein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-164">A string containing the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-165">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-165">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-166">Die <xref:System.Type.FullName%2A?displayProperty=nameWithType> -Eigenschaft ruft den vollqualifizierten Namen des der <xref:System.Type>, einschließlich des Namespace des der <xref:System.Type> jedoch ausschließlich der Assembly.</span><span class="sxs-lookup"><span data-stu-id="e4574-166">The <xref:System.Type.FullName%2A?displayProperty=nameWithType> property gets the fully qualified name of the <xref:System.Type>, including the namespace of the <xref:System.Type> but not the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int" Usage="_Type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-167">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetArrayRank" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-167">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetArrayRank" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-168">Ein <see cref="T:System.Int32" /> mit der Anzahl der Dimensionen im aktuellen <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-168">An <see cref="T:System.Int32" /> containing the number of dimensions in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-169">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-169">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-170">Die <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> Methode ruft die Anzahl der Dimensionen in einem <xref:System.Array>.</span><span class="sxs-lookup"><span data-stu-id="e4574-170">The <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> method gets the number of dimensions in an <xref:System.Array>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-171">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetConstructor" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-171">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructor" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-172">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-172">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-173">Die <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Methode ruft einen bestimmten Konstruktor des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-173">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method gets a specific constructor of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="e4574-174">Ein Array von <see cref="T:System.Type" />-Objekten, das die Anzahl, die Reihenfolge und den Typ der Parameter des abzurufenden Konstruktors darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-174">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="e4574-175">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-175">-or-</span>
          </span>
          <span data-ttu-id="e4574-176">Ein leeres Array von <see cref="T:System.Type" />-Objekten zum Abrufen eines Konstruktors ohne Parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-176">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="e4574-177">Das <see langword="static" />-Feld <see cref="F:System.Type.EmptyTypes" /> stellt ein entsprechendes leeres Array bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-177">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-178">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetConstructor(System.Type[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-178">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-179">Ein <see cref="T:System.Reflection.ConstructorInfo" />-Objekt, das den öffentlichen Konstruktor für Instanzen darstellt, dessen Parameter den Typen im Parametertyparray entsprechen, oder <see langword="null" />, wenn ein solcher Konstruktor nicht gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-179">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-180">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-180">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-181">Die <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Methode sucht einen öffentlichen Instanzkonstruktor, dessen Parameter den Typen im angegebenen Array entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-181">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a public instance constructor whose parameters match the types in the specified array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-182">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-182">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-183">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-183">-or-</span>
          </span>
          <span data-ttu-id="e4574-184">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-184">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-185">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-185">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-186">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-186">-or-</span>
          </span>
          <span data-ttu-id="e4574-187">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-187">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-188">Ein Array von <see cref="T:System.Type" />-Objekten, das Anzahl, Reihenfolge und Typ der Parameter des abzurufenden Konstruktors darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-188">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="e4574-189">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-189">-or-</span>
          </span>
          <span data-ttu-id="e4574-190">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen eines Konstruktors, der keine Parameter akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-190">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="e4574-191">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-191">-or-</span>
          </span>
          <span data-ttu-id="e4574-192">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-192">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-193">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im Parametertyparray zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-193">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="e4574-194">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-194">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-195">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-195">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-196">Ein <see cref="T:System.Reflection.ConstructorInfo" />-Objekt, das den Konstruktor darstellt, der den angegebenen Anforderungen entspricht, oder <see langword="null" />, wenn kein entsprechender Konstruktor gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-196">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-197">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-197">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-198">Die <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Methode sucht einen Konstruktor, dessen Parameter entsprechen den angegebenen Argumenttypen und -Modifizierern unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-198">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-199">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-199">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-200">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-200">-or-</span>
          </span>
          <span data-ttu-id="e4574-201">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-201">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-202">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-202">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-203">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-203">-or-</span>
          </span>
          <span data-ttu-id="e4574-204">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-204">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="e4574-205">Das <see cref="T:System.Reflection.CallingConventions" />-Objekt, das die Regeln für die Reihenfolge und das Layout von Argumenten, die Art der Übergabe des Rückgabewerts, die für Argumente zu verwendenden Register und die Art der Bereinigung des Stapels angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-205">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-206">Ein Array von <see cref="T:System.Type" />-Objekten, das Anzahl, Reihenfolge und Typ der Parameter des abzurufenden Konstruktors darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-206">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="e4574-207">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-207">-or-</span>
          </span>
          <span data-ttu-id="e4574-208">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen eines Konstruktors, der keine Parameter akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-208">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-209">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="types" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-209">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span>
          </span>
          <span data-ttu-id="e4574-210">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-210">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-211">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-211">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-212">Ein <see cref="T:System.Reflection.ConstructorInfo" />-Objekt, das den Konstruktor darstellt, der den angegebenen Anforderungen entspricht, oder <see langword="null" />, wenn kein entsprechender Konstruktor gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-212">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-213">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-213">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-214">Die <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Methode sucht einen Konstruktor, dessen Parameter entsprechen den angegebenen Argumenttypen und -Modifizierern mithilfe der angegebenen bindungseinschränkungen und der angegebenen Aufrufkonvention.</span><span class="sxs-lookup"><span data-stu-id="e4574-214">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-215">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetConstructors" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-215">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructors" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-216">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-216">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-217">Die <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> Methode ruft die Konstruktoren des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-217">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method gets the constructors of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-218">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetConstructors" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-218">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-219">Ein Array von <see cref="T:System.Reflection.ConstructorInfo" /> -Objekten, die alle für den aktuellen <see cref="T:System.Type" /> definierten öffentlichen Instanzkonstruktoren mit Ausnahme des Typinitialisierers (statischer Konstruktor) darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-219">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="e4574-220">Wenn für den aktuellen <see cref="T:System.Type" /> keine öffentlichen Instanzkonstruktoren definiert sind oder der aktuelle <see cref="T:System.Type" /> einen Typparameter einer generischen Typ- oder Methodendefinition darstellt, wird ein leeres Array vom Typ <see cref="T:System.Reflection.ConstructorInfo" /> zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-220">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-221">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-221">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-222">Die <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> Methode gibt alle öffentlichen Konstruktoren definiert, die für die aktuelle <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-222">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method returns all the public constructors defined for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-223">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-223">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-224">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-224">-or-</span>
          </span>
          <span data-ttu-id="e4574-225">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-225">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-226">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-226">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-227">Ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten, die sämtliche für den aktuellen <see cref="T:System.Type" /> definierten Konstruktoren, einschließlich eines ggf. definierten Typinitialisierers, darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-227">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="e4574-228">Gibt ein leeres Array vom Typ <see cref="T:System.Reflection.ConstructorInfo" /> zurück, wenn für den aktuellen <see cref="T:System.Type" /> keine Konstruktoren definiert sind, keiner der definierten Konstruktoren den Bindungseinschränkungen entspricht oder der aktuelle <see cref="T:System.Type" /> einen Typparameter einer generischen Typ- oder Methodendefinition darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-228">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-229">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-229">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-230">Die <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> Methode sucht die Konstruktoren für die aktuelle definiert <xref:System.Type>, mit dem angegebenen <xref:System.Reflection.BindingFlags>.</span><span class="sxs-lookup"><span data-stu-id="e4574-230">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method searches for the constructors defined for the current <xref:System.Type>, using the specified <xref:System.Reflection.BindingFlags>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-231">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-231">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-232">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-232">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-233">Die <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> Methode gibt alle auf diesen Member angewendeten Attribute zurück.</span><span class="sxs-lookup"><span data-stu-id="e4574-233">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_Type.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="e4574-234">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-234">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-235">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-235">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-236">Ein Array von benutzerdefinierten Attributen, die auf diesen Member angewendet werden, oder ein Array mit 0 (null) Elementen, wenn keine Attribute angewendet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-236">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-237">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-237">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-238">Die <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> Methode gibt alle auf diesen Member angewendeten Attribute zurück.</span><span class="sxs-lookup"><span data-stu-id="e4574-238">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_Type.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="e4574-239">Der Typ des zu suchenden Attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-239">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="e4574-240">Nur Attribute, die diesem Typ zugeordnet werden können, werden zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-240">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="e4574-241">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-241">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-242">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-242">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-243">Ein Array von benutzerdefinierten Attributen, die auf diesen Member angewendet werden, oder ein Array mit 0 (null) Elementen, wenn keine Attribute angewendet wurden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-243">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-244">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-244">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-245">Die <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> Methode gibt alle auf diesen Member angewendeten Attribute zurück.</span><span class="sxs-lookup"><span data-stu-id="e4574-245">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-246">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetDefaultMembers" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-246">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetDefaultMembers" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-247">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die alle Standardmember des aktuellen <see cref="T:System.Type" /> darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-247">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-248">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-248">-or-</span>
          </span>
          <span data-ttu-id="e4574-249">Ein leeres Array vom <see cref="T:System.Reflection.MemberInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine Standardmember besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-249">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-250">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-250">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-251">Die <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> Methode sucht die Elemente definiert, die für die aktuelle <xref:System.Type> , deren <xref:System.Reflection.DefaultMemberAttribute> festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-251">The <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type> whose <xref:System.Reflection.DefaultMemberAttribute> is set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="_Type.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-252">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetElementType" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-252">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetElementType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-253">Der <see cref="T:System.Type" /> des Objekts, das der aktuelle Array-, Zeiger- oder Verweistyp einschließt bzw. auf das er verweist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-253">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
          <span data-ttu-id="e4574-254">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-254">-or-</span>
          </span>
          <span data-ttu-id="e4574-255">
            <see langword="null" />, wenn der aktuelle <see cref="T:System.Type" /> weder ein Array noch ein Zeiger ist, nicht als Verweis übergeben wird oder einen generischen Typ bzw. einen Typparameter einer generischen Typ- oder Methodendefinition darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-255">
              <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-256">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-256">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-257">Die <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> Methode gibt die <xref:System.Type> des Objekts umfasst oder auf das durch den aktuellen Array-, Zeiger- oder Verweistyp-Typ bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e4574-257">The <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> method returns the <xref:System.Type> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-258">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetEvent" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-258">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvent" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-259">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-260">Die <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Methode ruft ein bestimmtes Ereignis deklariert oder geerbt vom aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-260">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method gets a specific event declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-261">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-261">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-262">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-262">-or-</span>
          </span>
          <span data-ttu-id="e4574-263">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-263">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-264">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetEvent(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-264">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-265">Ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten, die sämtliche vom aktuellen <see cref="T:System.Type" /> deklarierten oder geerbten Ereignisse darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-265">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-266">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-266">-or-</span>
          </span>
          <span data-ttu-id="e4574-267">Ein leeres Array vom <see cref="T:System.Reflection.EventInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine Ereignisse besitzt oder keines der Ereignisse den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-267">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-268">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-268">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-269">Die <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Methode die Suche nach Ereignissen, die deklariert oder geerbt vom aktuellen <xref:System.Type>, mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-269">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-270">Der <see cref="T:System.String" />, der den Namen eines vom aktuellen <see cref="T:System.Type" /> deklarierten oder geerbten Ereignisses enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-270">The <see cref="T:System.String" /> containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-271">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-271">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-272">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-272">-or-</span>
          </span>
          <span data-ttu-id="e4574-273">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-273">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-274">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-274">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-275">Das <see cref="T:System.Reflection.EventInfo" />-Objekt, das das angegebene, vom aktuellen <see cref="T:System.Type" /> deklarierte oder geerbte Ereignis darstellt (sofern ein solches gefunden wird), andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-275">The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-276">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-276">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-277">Die <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Methode gibt die <xref:System.Reflection.EventInfo> Objekt, das das angegebene Ereignis unter Verwendung der angegebenen bindungseinschränkungen darstellt.</span><span class="sxs-lookup"><span data-stu-id="e4574-277">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method returns the <xref:System.Reflection.EventInfo> object representing the specified event, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-278">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetEvents" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-278">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvents" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-279">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-279">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-280">Die <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> Methode ruft die Ereignisse, die deklariert oder geerbt vom aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-280">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method gets the events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-281">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetEvents" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-281">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-282">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten zurück, die sämtliche vom aktuellen <see cref="T:System.Type" /> deklarierten oder geerbten öffentlichen Ereignisse darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-282">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-283">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-283">-or-</span>
          </span>
          <span data-ttu-id="e4574-284">Ein leeres Array vom <see cref="T:System.Reflection.EventInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine öffentlichen Ereignisse besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-284">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-285">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-285">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-286">Die <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> Methode gibt alle öffentlichen Ereignisse, die deklariert oder geerbt vom aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-286">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method returns all the public events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-287">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-287">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-288">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-288">-or-</span>
          </span>
          <span data-ttu-id="e4574-289">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-289">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-290">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-290">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-291">Ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten, die sämtliche vom aktuellen <see cref="T:System.Type" /> deklarierten oder geerbten Ereignisse darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-291">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-292">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-292">-or-</span>
          </span>
          <span data-ttu-id="e4574-293">Ein leeres Array vom <see cref="T:System.Reflection.EventInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine Ereignisse besitzt oder keines der Ereignisse den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-293">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-294">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-295">Die <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> Methode die Suche nach Ereignissen, die deklariert oder geerbt vom aktuellen <xref:System.Type>, mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-295">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-296">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetField" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-296">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetField" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-297">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-298">Die <xref:System.Type.GetField%2A?displayProperty=nameWithType> Methode ruft ein bestimmtes Feld des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-298">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-299">Der <see cref="T:System.String" />, der den Namen des abzurufenden Datenfelds enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-299">The <see cref="T:System.String" /> containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-300">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetField(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-300">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-301">Ein <see cref="T:System.Reflection.FieldInfo" />-Objekt, das das öffentliche Feld mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-301">A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-302">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-303">Die <xref:System.Type.GetField%2A?displayProperty=nameWithType> Methode sucht das öffentliche Feld mit dem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="e4574-303">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the public field with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-304">Der <see cref="T:System.String" />, der den Namen des abzurufenden Datenfelds enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-304">The <see cref="T:System.String" /> containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-305">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-305">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-306">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-306">-or-</span>
          </span>
          <span data-ttu-id="e4574-307">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-307">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-308">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-308">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-309">Ein <see cref="T:System.Reflection.FieldInfo" />-Objekt, das das Feld darstellt, das den angegebenen Anforderungen entspricht, oder <see langword="null" />, wenn das Feld nicht gefunden wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-309">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-310">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-311">Die <xref:System.Type.GetField%2A?displayProperty=nameWithType> Methode sucht das angegebene Feld mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-311">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the specified field, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-312">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetFields" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-312">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetFields" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-313">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-313">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-314">Die <xref:System.Type.GetFields%2A?displayProperty=nameWithType> Methode ruft ein bestimmtes Feld des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-314">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-315">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetFields" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-315">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-316">Ein Array von <see cref="T:System.Reflection.FieldInfo" />-Objekten, die alle für den aktuellen <see cref="T:System.Type" /> definierten öffentlichen Felder darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-316">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-317">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-317">-or-</span>
          </span>
          <span data-ttu-id="e4574-318">Ein leeres Array vom <see cref="T:System.Reflection.FieldInfo" />-Typ, wenn für den aktuellen <see cref="T:System.Type" /> keine öffentlichen Felder definiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-318">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-319">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-319">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-320">Die <xref:System.Type.GetFields%2A?displayProperty=nameWithType> Methode gibt sämtliche öffentlichen Felder des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-320">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method returns all the public fields of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-321">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-321">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-322">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-322">-or-</span>
          </span>
          <span data-ttu-id="e4574-323">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-323">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-324">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-324">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-325">Ein Array von <see cref="T:System.Reflection.FieldInfo" />-Objekten, die sämtliche für den aktuellen <see cref="T:System.Type" /> definierten öffentlichen Felder darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-325">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-326">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-326">-or-</span>
          </span>
          <span data-ttu-id="e4574-327">Ein leeres Array vom <see cref="T:System.Reflection.FieldInfo" />-Typ, wenn für den aktuellen <see cref="T:System.Type" /> keine Felder definiert sind oder keines der definierten Felder den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-327">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-328">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-328">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-329">Die <xref:System.Type.GetFields%2A?displayProperty=nameWithType> Methode sucht die Felder definiert, die für die aktuelle <xref:System.Type>, mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-329">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method searches for the fields defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_Type.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-330">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetHashCode" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-330">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetHashCode" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-331">Ein <see cref="T:System.Int32" /> mit dem Hashcode für diese Instanz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-331">An <see cref="T:System.Int32" /> containing the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-332">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-332">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-333">Die <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> -Methode.</span><span class="sxs-lookup"><span data-stu-id="e4574-333">The <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames :  * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="e4574-334">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-334">Reserved for future use.</span>
          </span>
          <span data-ttu-id="e4574-335">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-335">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="e4574-336">Das übergebene Array von zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-336">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="e4574-337">Die Anzahl der zuzuordnenden Namen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-337">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="e4574-338">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-338">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="e4574-339">Das vom Aufrufer zugeordnete Array, das die IDs entsprechend den Namen empfängt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-339">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-340">Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-340">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-341">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-341">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e4574-342">Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e4574-342">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-343">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetInterface" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-343">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetInterface" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-344">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-344">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-345">Die <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> Methode ruft eine bestimmte Schnittstelle implementiert oder geerbt vom aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-345">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method gets a specific interface implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type" Usage="_Type.GetInterface name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-346">Der <see cref="T:System.String" />, der den Namen der abzurufenden Schnittstelle enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-346">The <see cref="T:System.String" /> containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="e4574-347">Bei generischen Schnittstellen ist dies der ergänzte Name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-347">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-348">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetInterface(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-348">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-349">Ein <see cref="T:System.Type" />-Objekt, das die vom aktuellen <see cref="T:System.Type" /> implementierte oder geerbte Schnittstelle mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-349">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-350">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-350">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-351">Die <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> Methode sucht die Schnittstelle mit dem angegebenen Namen...</span><span class="sxs-lookup"><span data-stu-id="e4574-351">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the interface with the specified name..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="_Type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-352">Der <see cref="T:System.String" />, der den Namen der abzurufenden Schnittstelle enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-352">The <see cref="T:System.String" /> containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="e4574-353">Bei generischen Schnittstellen ist dies der ergänzte Name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-353">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="e4574-354">
            <see langword="true" />, wenn nach <paramref name="name" /> ohne Berücksichtigung der Groß- und Kleinschreibung gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-354">
              <see langword="true" /> to perform a case-insensitive search for <paramref name="name" />.</span>
          </span>
          <span data-ttu-id="e4574-355">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-355">-or-</span>
          </span>
          <span data-ttu-id="e4574-356">
            <see langword="false" />, wenn nach <paramref name="name" /> mit Berücksichtigung der Groß- und Kleinschreibung gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-356">
              <see langword="false" /> to perform a case-sensitive search for <paramref name="name" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-357">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-357">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-358">Ein <see cref="T:System.Type" />-Objekt, das die vom aktuellen <see cref="T:System.Type" /> implementierte oder geerbte Schnittstelle mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-358">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-359">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-359">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-360">Die <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> Methode sucht die angegebene Schnittstelle, die angibt, ob Groß-/Kleinschreibung zu suchen.</span><span class="sxs-lookup"><span data-stu-id="e4574-360">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the specified interface, specifying whether to do a case-sensitive search.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="_Type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="e4574-361">Der <see cref="T:System.Type" /> der Schnittstelle, deren Zuordnung abgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-361">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-362">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetInterfaceMap(System.Type)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-362">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-363">Ein <see cref="T:System.Reflection.InterfaceMapping" />-Objekt, das die Schnittstellenzuordnung für den <paramref name="interfaceType" /> darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-363">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-364">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-364">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-365">Die <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> Methode gibt eine schnittstellenzuordnung für den angegebenen Schnittstellentyp zurück.</span><span class="sxs-lookup"><span data-stu-id="e4574-365">The <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> method returns an interface mapping for the specified interface type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="_Type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-366">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetInterfaces" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-366">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaces" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-367">Ein Array von <see cref="T:System.Type" />-Objekten, die sämtliche vom aktuellen <see cref="T:System.Type" /> implementierten oder geerbten Schnittstellen darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-367">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-368">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-368">-or-</span>
          </span>
          <span data-ttu-id="e4574-369">Ein leeres Array vom <see cref="T:System.Type" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine Schnittstellen implementiert oder geerbt hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-369">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-370">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-370">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-371">Die <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> Methode ruft alle Schnittstellen implementiert oder geerbt vom aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-371">The <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> method gets all the interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-372">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetMember" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-372">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMember" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-373">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-373">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-374">Die <xref:System.Type.GetMember%2A?displayProperty=nameWithType> Methode ruft die angegebenen Member des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-374">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method gets the specified members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-375">Der <see cref="T:System.String" />, der den Namen des abzurufenden öffentlichen Members enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-375">The <see cref="T:System.String" /> containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-376">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMember(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-376">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-377">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die die öffentlichen Member mit dem angegebenen Namen darstellen, sofern gefunden, andernfalls ein leeres Array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-377">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-378">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-378">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-379">Die <xref:System.Type.GetMember%2A?displayProperty=nameWithType> Methode sucht die öffentlichen Member mit dem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="e4574-379">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the public members with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-380">Der <see cref="T:System.String" />, der den Namen der abzurufenden Member enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-380">The <see cref="T:System.String" /> containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-381">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-381">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-382">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-382">-or-</span>
          </span>
          <span data-ttu-id="e4574-383">0 (null), um ein leeres Array zurückzugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-383">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-384">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-384">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-385">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die die öffentlichen Member mit dem angegebenen Namen darstellen, sofern gefunden, andernfalls ein leeres Array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-385">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-386">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-386">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-387">Die <xref:System.Type.GetMember%2A?displayProperty=nameWithType> Methode sucht die angegebenen Member unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-387">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-388">Der <see cref="T:System.String" />, der den Namen der abzurufenden Member enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-388">The <see cref="T:System.String" /> containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="e4574-389">Der zu suchende <see cref="T:System.Reflection.MemberTypes" />-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-389">The <see cref="T:System.Reflection.MemberTypes" /> value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-390">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-390">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-391">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-391">-or-</span>
          </span>
          <span data-ttu-id="e4574-392">0 (null), um ein leeres Array zurückzugeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-392">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-393">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-393">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-394">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die die öffentlichen Member mit dem angegebenen Namen darstellen, sofern gefunden, andernfalls ein leeres Array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-394">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-395">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-395">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-396">Die <xref:System.Type.GetMember%2A?displayProperty=nameWithType> Methode sucht die angegebenen Member des angegebenen Membertyps unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-396">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members of the specified member type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-397">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetMembers" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-397">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMembers" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-398">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-398">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-399">Die <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> Methode ruft die Member (Eigenschaften, Methoden, Felder, Ereignisse usw.) des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-399">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method gets the members (properties, methods, fields, events, and so on) of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-400">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMembers" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-400">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-401">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die sämtliche öffentlichen Member des aktuellen <see cref="T:System.Type" /> darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-401">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-402">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-402">-or-</span>
          </span>
          <span data-ttu-id="e4574-403">Ein leeres Array vom <see cref="T:System.Reflection.MemberInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine Standardmember besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-403">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-404">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-404">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-405">Die <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> Methode gibt sämtliche öffentlichen Member des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-405">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method returns all the public members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-406">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-406">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-407">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-407">-or-</span>
          </span>
          <span data-ttu-id="e4574-408">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-408">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-409">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-409">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-410">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, die sämtliche für den aktuellen <see cref="T:System.Type" /> definierten öffentlichen Member darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-410">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-411">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-411">-or-</span>
          </span>
          <span data-ttu-id="e4574-412">Ein leeres Array vom <see cref="T:System.Reflection.MemberInfo" />-Typ, wenn für den aktuellen <see cref="T:System.Type" /> keine Member definiert sind oder keiner der definierten Member den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-412">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-413">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-413">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-414">Die <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> Methode sucht die Elemente definiert, die für die aktuelle <xref:System.Type>, mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-414">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-415">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetMethod" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-415">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethod" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-416">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-416">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-417">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> -Methode.</span><span class="sxs-lookup"><span data-stu-id="e4574-417">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-418">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-418">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-419">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethod(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-419">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-420">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die öffentliche Methode mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-420">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-421">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-421">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-422">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Methode sucht die öffentliche Methode mit dem angegebenen Namen...</span><span class="sxs-lookup"><span data-stu-id="e4574-422">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the public method with the specified name..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-423">Der <see cref="T:System.String" />, der den Namen der abzurufenden Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-423">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-424">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-424">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-425">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-425">-or-</span>
          </span>
          <span data-ttu-id="e4574-426">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-426">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-427">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-427">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-428">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode darstellt, die den angegebenen Anforderungen entspricht, sofern diese gefunden wird. Andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-428">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-429">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-429">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-430">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Methode sucht die angegebene Methode unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-430">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-431">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-431">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-432">Ein Array von <see cref="T:System.Type" />-Objekten, das die Anzahl, die Reihenfolge und den Typ der Parameter der abzurufenden Methode darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-432">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="e4574-433">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-433">-or-</span>
          </span>
          <span data-ttu-id="e4574-434">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer Methode, die keine Parameter akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-434">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-435">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethod(System.String,System.Type[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-435">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-436">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die öffentliche Methode darstellt, deren Parameter den angegebenen Argumenttypen entsprechen, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-436">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-437">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-437">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-438">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Methode sucht die angegebene öffentliche Methode, deren Parameter den angegebenen Argumenttypen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-438">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-439">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-439">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-440">Ein Array von <see cref="T:System.Type" />-Objekten, das die Anzahl, die Reihenfolge und den Typ der Parameter der abzurufenden Methode darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-440">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="e4574-441">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-441">-or-</span>
          </span>
          <span data-ttu-id="e4574-442">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer Methode, die keine Parameter akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-442">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-443">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="types" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-443">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span>
          </span>
          <span data-ttu-id="e4574-444">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-444">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-445">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-445">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-446">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die öffentliche Methode darstellt, die den angegebenen Anforderungen entspricht, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-446">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-447">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-447">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-448">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Methode sucht die angegebene öffentliche Methode, deren Parameter den angegebenen Argumenttypen und -Modifizierern zu entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-448">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-449">Der <see cref="T:System.String" />, der den Namen der abzurufenden Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-449">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-450">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-450">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-451">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-451">-or-</span>
          </span>
          <span data-ttu-id="e4574-452">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-452">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-453">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-453">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-454">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-454">-or-</span>
          </span>
          <span data-ttu-id="e4574-455">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-455">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-456">Ein Array von <see cref="T:System.Type" />-Objekten, das die Anzahl, die Reihenfolge und den Typ der Parameter der abzurufenden Methode darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-456">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="e4574-457">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-457">-or-</span>
          </span>
          <span data-ttu-id="e4574-458">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer Methode, die keine Parameter akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-458">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-459">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="types" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-459">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span>
          </span>
          <span data-ttu-id="e4574-460">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-460">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-461">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-461">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-462">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode darstellt, die den angegebenen Anforderungen entspricht, sofern diese gefunden wird. Andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-462">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-463">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-463">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-464">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Methode sucht die angegebene Methode, deren Parameter entsprechen den angegebenen Argumenttypen und -Modifizierern unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-464">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-465">Der <see cref="T:System.String" />, der den Namen der abzurufenden Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-465">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-466">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-466">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-467">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-467">-or-</span>
          </span>
          <span data-ttu-id="e4574-468">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-468">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-469">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-469">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-470">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-470">-or-</span>
          </span>
          <span data-ttu-id="e4574-471">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-471">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="e4574-472">Das <see cref="T:System.Reflection.CallingConventions" />-Objekt, das die Regeln für Reihenfolge und Layout der Argumente, die Art der Übergabe des Rückgabewerts, die für Argumente zu verwendenden Register und die Art der Bereinigung des Stapels angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-472">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-473">Ein Array von <see cref="T:System.Type" />-Objekten, das die Anzahl, die Reihenfolge und den Typ der Parameter der abzurufenden Methode darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-473">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="e4574-474">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-474">-or-</span>
          </span>
          <span data-ttu-id="e4574-475">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer Methode, die keine Parameter akzeptiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-475">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-476">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="types" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-476">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span>
          </span>
          <span data-ttu-id="e4574-477">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-477">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-478">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-478">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-479">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode darstellt, die den angegebenen Anforderungen entspricht, sofern diese gefunden wird. Andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-479">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-480">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-480">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-481">Die <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Methode sucht die angegebene Methode, deren Parameter den angegebenen Argumenttypen und -Modifizierern mithilfe der angegebenen bindungseinschränkungen und der angegebenen Aufrufkonvention zu entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-481">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-482">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetMethods" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-482">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethods" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-483">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-483">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-484">Die <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> Methode ruft die Methoden des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-484">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method gets the methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-485">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethods" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-485">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-486">Ein Array von <see cref="T:System.Reflection.MethodInfo" />-Objekten, die alle für den aktuellen <see cref="T:System.Type" /> definierten öffentlichen Member darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-486">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-487">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-487">-or-</span>
          </span>
          <span data-ttu-id="e4574-488">Ein leeres Array vom <see cref="T:System.Reflection.MethodInfo" />-Typ, wenn für den aktuellen <see cref="T:System.Type" /> keine öffentlichen Methoden definiert sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-488">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-489">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-489">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-490">Die <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> Methode gibt sämtliche öffentlichen Methoden des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-490">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method returns all the public methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-491">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-491">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-492">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-492">-or-</span>
          </span>
          <span data-ttu-id="e4574-493">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-493">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-494">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-494">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-495">Ein Array von <see cref="T:System.Reflection.MethodInfo" />-Objekten, die sämtliche für den aktuellen <see cref="T:System.Type" /> definierten öffentlichen Methoden darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-495">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-496">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-496">-or-</span>
          </span>
          <span data-ttu-id="e4574-497">Ein leeres Array vom <see cref="T:System.Reflection.MethodInfo" />-Typ, wenn für den aktuellen <see cref="T:System.Type" /> keine Methoden definiert sind oder keine der definierten Methoden den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-497">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-498">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-498">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-499">Die <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> Methode sucht die für den aktuellen definierten Methoden <xref:System.Type>, mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-499">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method searches for the methods defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-500">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetNestedType" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-500">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedType" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-501">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-501">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-502">Die <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> Methode ruft einen bestimmten Typ in der aktuellen geschachtelten <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-502">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method gets a specific type nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type" Usage="_Type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-503">Die Zeichenfolge, die den Namen des abzurufenden geschachtelten Typs enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-503">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-504">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetNestedType(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-504">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-505">Ein <see cref="T:System.Type" />-Objekt, das den öffentlichen geschachtelten Typ mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-505">A <see cref="T:System.Type" /> object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-506">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-506">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-507">Die <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> Methode sucht den öffentlichen geschachtelten Typ mit dem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="e4574-507">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the public nested type with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="_Type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-508">Die Zeichenfolge, die den Namen des abzurufenden geschachtelten Typs enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-508">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-509">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-509">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-510">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-510">-or-</span>
          </span>
          <span data-ttu-id="e4574-511">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-511">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-512">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-512">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-513">Ein <see cref="T:System.Type" />-Objekt, das den geschachtelten Typ darstellt, der den angegebenen Anforderungen entspricht, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-513">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-514">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-514">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-515">Die <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> Methode sucht den angegebenen geschachtelten Typ unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-515">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the specified nested type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-516">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetNestedTypes" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-516">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedTypes" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-517">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-517">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-518">Die <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> Methode ruft ab, die in der aktuellen geschachtelten Typen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-518">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method gets the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]" Usage="_Type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-519">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetNestedTypes" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-519">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-520">Ein Array von <see cref="T:System.Type" />-Objekten, die sämtliche im aktuellen <see cref="T:System.Type" /> geschachtelten Typen darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-520">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-521">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-521">-or-</span>
          </span>
          <span data-ttu-id="e4574-522">Ein leeres Array vom Typ <see cref="T:System.Type" />, wenn im aktuellen <see cref="T:System.Type" /> keine Typen geschachtelt sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-522">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-523">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-523">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-524">Die <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> Methodenrückgabe alle Typen in der aktuellen geschachtelten <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-524">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method returns all the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="_Type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-525">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-525">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-526">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-526">-or-</span>
          </span>
          <span data-ttu-id="e4574-527">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-527">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-528">Ermöglicht für COM-Objekte den versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />-Methode und sucht die im aktuellen <see cref="T:System.Type" /> geschachtelten Typen unter Verwendung der angegebenen Bindungseinschränkungen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-528">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> method, and searches for the types nested within the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-529">Ein Array von <see cref="T:System.Type" />-Objekten, die sämtliche im aktuellen <see cref="T:System.Type" /> geschachtelten Typen darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-529">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-530">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-530">-or-</span>
          </span>
          <span data-ttu-id="e4574-531">Ein leeres Array vom Typ <see cref="T:System.Type" />, wenn im aktuellen <see cref="T:System.Type" /> keine Typen geschachtelt sind oder keiner der geschachtelten Typen den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-531">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-532">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-532">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-533">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetProperties" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-533">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperties" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-534">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-534">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-535">Die <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> Methode ruft die Eigenschaften des aktuellen <xref:System.Type>...</span><span class="sxs-lookup"><span data-stu-id="e4574-535">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method gets the properties of the current <xref:System.Type>..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-536">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperties" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-536">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-537">Ein Array von <see cref="T:System.Reflection.PropertyInfo" />-Objekten, die alle öffentlichen Eigenschaften des aktuellen <see cref="T:System.Type" /> darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-537">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="e4574-538">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-538">-or-</span>
          </span>
          <span data-ttu-id="e4574-539">Ein leeres Array vom <see cref="T:System.Reflection.PropertyInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine öffentlichen Eigenschaften besitzt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-539">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-540">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-540">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-541">Die <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> Methode gibt alle öffentlichen Eigenschaften des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-541">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method returns all the public properties of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-542">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-542">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-543">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-543">-or-</span>
          </span>
          <span data-ttu-id="e4574-544">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-544">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-545">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-545">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-546">Ein Array von <see cref="T:System.Reflection.PropertyInfo" />-Objekten, die sämtliche Eigenschaften des aktuellen <see cref="T:System.Type" /> darstellen, die den angegebenen Bindungseinschränkungen entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-546">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="e4574-547">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-547">-or-</span>
          </span>
          <span data-ttu-id="e4574-548">Ein leeres Array vom <see cref="T:System.Reflection.PropertyInfo" />-Typ, wenn der aktuelle <see cref="T:System.Type" /> keine Eigenschaften besitzt oder keine der Eigenschaften den Bindungseinschränkungen entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-548">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-549">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-549">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-550">Die <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> Methode sucht die Eigenschaften des aktuellen <xref:System.Type>, mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-550">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method searches for the properties of the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-551">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.GetProperty" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-551">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperty" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-552">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-552">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-553">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode ruft eine bestimmte Eigenschaft des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-553">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method gets a specific property of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-554">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-554">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-555">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-555">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-556">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die öffentliche Eigenschaft mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-556">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-557">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-557">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-558">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die öffentliche Eigenschaft mit dem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="e4574-558">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-559">Der <see cref="T:System.String" />, der den Namen der abzurufenden Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-559">The <see cref="T:System.String" /> containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-560">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-560">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-561">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-561">-or-</span>
          </span>
          <span data-ttu-id="e4574-562">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-562">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-563">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-563">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-564">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die Eigenschaft darstellt, die den angegebenen Anforderungen entspricht, sofern diese gefunden wird. Andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-564">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-565">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-565">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-566">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die angegebene Eigenschaft, die mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-566">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-567">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-567">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="e4574-568">Der Rückgabetyp der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-568">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-569">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String,System.Type)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-569">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-570">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die öffentliche Eigenschaft mit dem angegebenen Namen darstellt, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-570">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-571">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-571">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-572">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die öffentliche Eigenschaft mit dem angegebenen Namen und Rückgabetyp.</span><span class="sxs-lookup"><span data-stu-id="e4574-572">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name and return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-573">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-573">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-574">Ein Array von <see cref="T:System.Type" />-Objekten, die Anzahl, Reihenfolge und Typ der Parameter der abzurufenden indizierten Eigenschaft darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="e4574-575">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-575">-or-</span>
          </span>
          <span data-ttu-id="e4574-576">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer nicht indizierten Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-577">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String,System.Type[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-577">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-578">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die öffentliche Eigenschaft darstellt, deren Parameter den angegebenen Argumenttypen entsprechen, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-578">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-579">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-579">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-580">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die angegebene öffentliche Eigenschaft, deren Parameter den angegebenen Argumenttypen entsprechen...</span><span class="sxs-lookup"><span data-stu-id="e4574-580">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-581">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-581">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="e4574-582">Der Rückgabetyp der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-582">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-583">Ein Array von <see cref="T:System.Type" />-Objekten, die Anzahl, Reihenfolge und Typ der Parameter der abzurufenden indizierten Eigenschaft darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-583">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="e4574-584">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-584">-or-</span>
          </span>
          <span data-ttu-id="e4574-585">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer nicht indizierten Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-585">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-586">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-586">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-587">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die öffentliche Eigenschaft darstellt, deren Parameter den angegebenen Argumenttypen entsprechen, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-587">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-588">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-588">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-589">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die angegebene öffentliche Eigenschaft, deren Parameter den angegebenen Argumenttypen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-589">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-590">Der <see cref="T:System.String" />, der den Namen der abzurufenden öffentlichen Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-590">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="e4574-591">Der Rückgabetyp der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-591">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-592">Ein Array von <see cref="T:System.Type" />-Objekten, die Anzahl, Reihenfolge und Typ der Parameter der abzurufenden indizierten Eigenschaft darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-592">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="e4574-593">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-593">-or-</span>
          </span>
          <span data-ttu-id="e4574-594">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer nicht indizierten Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-594">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-595">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="types" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-595">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span>
          </span>
          <span data-ttu-id="e4574-596">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-596">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-597">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-597">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-598">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die öffentliche Eigenschaft darstellt, die den angegebenen Anforderungen entspricht, sofern gefunden, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-598">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-599">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-599">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-600">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die angegebene öffentliche Eigenschaft, deren Parameter den angegebenen Argumenttypen und -Modifizierern zu entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-600">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-601">Der <see cref="T:System.String" />, der den Namen der abzurufenden Eigenschaft enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-601">The <see cref="T:System.String" /> containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="e4574-602">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-602">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-603">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-603">-or-</span>
          </span>
          <span data-ttu-id="e4574-604">0 (null), damit <see langword="null" /> zurückgegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-604">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-605">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-605">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-606">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-606">-or-</span>
          </span>
          <span data-ttu-id="e4574-607">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-607">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="e4574-608">Der Rückgabetyp der Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-608">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e4574-609">Ein Array von <see cref="T:System.Type" />-Objekten, die Anzahl, Reihenfolge und Typ der Parameter der abzurufenden indizierten Eigenschaft darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-609">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="e4574-610">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-610">-or-</span>
          </span>
          <span data-ttu-id="e4574-611">Ein leeres Array vom <see cref="T:System.Type" />-Typ, d. h. Type[] types = new Type[0], zum Abrufen einer nicht indizierten Eigenschaft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-611">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-612">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="types" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-612">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span>
          </span>
          <span data-ttu-id="e4574-613">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-613">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-614">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-614">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-615">Ein <see cref="T:System.Reflection.PropertyInfo" />-Objekt, das die Eigenschaft darstellt, die den angegebenen Anforderungen entspricht, sofern diese gefunden wird. Andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-615">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-616">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-616">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-617">Die <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Methode sucht die angegebene Eigenschaft, deren Parameter entsprechen den angegebenen Argumenttypen und -Modifizierern unter Verwendung der angegebenen bindungseinschränkungen.</span><span class="sxs-lookup"><span data-stu-id="e4574-617">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_Type.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-618">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.GetType" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-618">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-619">Der aktuelle <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-619">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-620">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-620">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-621">Die <xref:System.Type.GetType%2A?displayProperty=nameWithType> Methode ruft die aktuelle <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-621">The <xref:System.Type.GetType%2A?displayProperty=nameWithType> method gets the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="e4574-622">Die zurückzugebenden Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-622">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="e4574-623">Der Gebietsschemabezeichner für die Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-623">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="e4574-624">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-624">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-625">Ruft die Typinformationen für ein Objekt ab, die dann zum Abrufen der Typinformationen für eine Schnittstelle verwendet werden können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-625">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-626">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-626">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e4574-627">Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e4574-627">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount :  -&gt; unit" Usage="_Type.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="e4574-628">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-628">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-629">Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-629">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-630">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-630">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e4574-631">Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e4574-631">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Runtime.InteropServices._Type.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-632">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.GUID" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-632">Provides COM objects with version-independent access to the <see cref="P:System.Type.GUID" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-633">Die dem <see cref="T:System.Type" /> zugeordnete GUID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-633">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-634">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-634">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-635">Die <xref:System.Type.GUID%2A?displayProperty=nameWithType> -Eigenschaft ruft die zugeordnete GUID ab, der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-635">The <xref:System.Type.GUID%2A?displayProperty=nameWithType> property gets the GUID associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Runtime.InteropServices._Type.HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-636">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.HasElementType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-636">Provides COM objects with version-independent access to the <see cref="P:System.Type.HasElementType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-637">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Array oder ein Zeiger ist oder als Verweis übergeben wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-637">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-638">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-638">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-639">Die <xref:System.Type.HasElementType%2A?displayProperty=nameWithType>-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="e4574-639">The <xref:System.Type.HasElementType%2A?displayProperty=nameWithType> property</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 *  * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_Type.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="e4574-640">Bezeichnet den Member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-640">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="e4574-641">Für zukünftige Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-641">Reserved for future use.</span>
          </span>
          <span data-ttu-id="e4574-642">Muss IID_NULL sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-642">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="e4574-643">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-643">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="e4574-644">Flags, die den Kontext des Aufrufs beschreiben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-644">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="e4574-645">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-645">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="e4574-646">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-646">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="e4574-647">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-647">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="e4574-648">Der Index des ersten Arguments mit einem Fehler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-648">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-649">Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-649">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-650">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-650">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e4574-651">Weitere Informationen zu `IDispatch::Invoke`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e4574-651">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-652">Stellt einen versionsunabhängigen Zugriff auf die <see cref="Overload:System.Type.InvokeMember" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-652">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.InvokeMember" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-653">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-653">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-654">Die <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Methode ruft einen bestimmten Member des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-654">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes a specific member of the current <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="e4574-655">sein.</span><span class="sxs-lookup"><span data-stu-id="e4574-655">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-656">Der <see cref="T:System.String" />, der den Namen des aufzurufenden Konstruktors, der Methode, der Eigenschaft oder des Feldmembers enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-656">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="e4574-657">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-657">-or-</span>
          </span>
          <span data-ttu-id="e4574-658">Eine leere Zeichenfolge ("") zum Aufrufen des Standardmembers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-658">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="e4574-659">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-659">-or-</span>
          </span>
          <span data-ttu-id="e4574-660">Für IDispatch-Member eine Zeichenfolge, die die DispID darstellt, z. B. "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-660">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="e4574-661">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-661">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-662">Der Zugriff kann aus einem der <see langword="BindingFlags" /> wie <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> usw. bestehen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-662">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="e4574-663">Die Art der Suche muss nicht angegeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-663">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="e4574-664">Wenn die Art der Suche nicht angegeben ist, werden <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-664">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-665">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-665">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-666">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-666">-or-</span>
          </span>
          <span data-ttu-id="e4574-667">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-667">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e4574-668">Das <see cref="T:System.Object" />, für das der angegebene Member aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-668">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e4574-669">Ein Array mit den Argumenten, die dem aufzurufenden Member übergeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-669">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-670">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-670">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-671">Ein <see cref="T:System.Object" />, das den Rückgabewert des aufgerufenen Members darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-671">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-672">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-672">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-673">Die <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Methode aufruft, das angegebene Element mit dem angegebenen Einschränkungen Bindung und die angegebenen Argumentliste entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4574-673">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-674">Der <see cref="T:System.String" />, der den Namen des aufzurufenden Konstruktors, der Methode, der Eigenschaft oder des Feldmembers enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-674">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="e4574-675">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-675">-or-</span>
          </span>
          <span data-ttu-id="e4574-676">Eine leere Zeichenfolge ("") zum Aufrufen des Standardmembers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-676">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="e4574-677">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-677">-or-</span>
          </span>
          <span data-ttu-id="e4574-678">Für IDispatch-Member eine Zeichenfolge, die die DispID darstellt, z. B. "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-678">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="e4574-679">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-679">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-680">Der Zugriff kann aus einem der <see langword="BindingFlags" /> wie <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> usw. bestehen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-680">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="e4574-681">Die Art der Suche muss nicht angegeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-681">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="e4574-682">Wenn die Art der Suche nicht angegeben ist, werden <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-682">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-683">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-683">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-684">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-684">-or-</span>
          </span>
          <span data-ttu-id="e4574-685">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-685">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e4574-686">Das <see cref="T:System.Object" />, für das der angegebene Member aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-686">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e4574-687">Ein Array mit den Argumenten, die dem aufzurufenden Member übergeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-687">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="e4574-688">Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, das das zu verwendende Globalisierungsgebietsschema darstellt, das für gebietsspezifische Konvertierungen wie die Konvertierung einer numerischen Zeichenfolge in einen Double erforderlich sein kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-688">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="e4574-689">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-689">-or-</span>
          </span>
          <span data-ttu-id="e4574-690">
            <see langword="null" />, wenn die <see cref="T:System.Globalization.CultureInfo" /> des aktuellen Threads verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-690">
              <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-691">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-691">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-692">Ein <see cref="T:System.Object" />, das den Rückgabewert des aufgerufenen Members darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-692">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-693">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-693">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-694">Die <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Methode aufruft, das angegebene Element mit dem angegebenen Einschränkungen binden und mit dem angegebenen Argumentliste und Kultur übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e4574-694">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e4574-695">Der <see cref="T:System.String" />, der den Namen des aufzurufenden Konstruktors, der Methode, der Eigenschaft oder des Feldmembers enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-695">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="e4574-696">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-696">-or-</span>
          </span>
          <span data-ttu-id="e4574-697">Eine leere Zeichenfolge ("") zum Aufrufen des Standardmembers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-697">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="e4574-698">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-698">-or-</span>
          </span>
          <span data-ttu-id="e4574-699">Für IDispatch-Member eine Zeichenfolge, die die DispID darstellt, z. B. "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-699">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="e4574-700">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-700">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="e4574-701">Der Zugriff kann aus einem der <see langword="BindingFlags" /> wie <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> usw. bestehen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-701">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="e4574-702">Die Art der Suche muss nicht angegeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-702">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="e4574-703">Wenn die Art der Suche nicht angegeben ist, werden <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-703">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e4574-704">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das eine Gruppe von Eigenschaften definiert und eine Bindung ermöglicht. Dazu kann die Auswahl einer überladenen Methode, die Umwandlung von Argumenttypen und der Aufruf eines Members durch Reflektion gehören.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-704">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="e4574-705">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-705">-or-</span>
          </span>
          <span data-ttu-id="e4574-706">
            <see langword="null" />, wenn der <see cref="P:System.Type.DefaultBinder" /> verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-706">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e4574-707">Das <see cref="T:System.Object" />, für das der angegebene Member aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-707">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e4574-708">Ein Array mit den Argumenten, die dem aufzurufenden Member übergeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-708">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="e4574-709">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten, die die Attribute darstellen, die dem entsprechenden Element im <paramref name="args" />-Array zugeordnet sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-709">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array.</span>
          </span>
          <span data-ttu-id="e4574-710">Die einem Parameter zugeordneten Attribute werden in der Signatur des Members gespeichert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-710">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="e4574-711">Der Standardbinder verarbeitet diesen Parameter nicht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-711">The default binder does not process this parameter.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="e4574-712">Das <see cref="T:System.Globalization.CultureInfo" />-Objekt, das das zu verwendende Globalisierungsgebietsschema darstellt, das für gebietsspezifische Konvertierungen wie die Konvertierung einer numerischen Zeichenfolge in einen Double erforderlich sein kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-712">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="e4574-713">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-713">-or-</span>
          </span>
          <span data-ttu-id="e4574-714">
            <see langword="null" />, wenn die <see cref="T:System.Globalization.CultureInfo" /> des aktuellen Threads verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-714">
              <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="e4574-715">Ein Array mit den Namen der Parameter, an die die Elemente des <paramref name="args" />-Arrays übergeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-715">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-716">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-716">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-717">Ein <see cref="T:System.Object" />, das den Rückgabewert des aufgerufenen Members darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-717">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-718">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-718">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-719">Die <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Methode aufruft, das angegebene Element mit dem angegebenen Einschränkungen binden und Abgleich der angegebenen Argumentliste, Modifizierer und Kultur.</span><span class="sxs-lookup"><span data-stu-id="e4574-719">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers, and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-720">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsAbstract" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-720">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAbstract" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-721">
            <see langword="true" />, wenn <see cref="T:System.Type" /> abstrakt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-721">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-722">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-722">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-723">Die <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> ist abstrakt und überschrieben werden muss.</span><span class="sxs-lookup"><span data-stu-id="e4574-723">The <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is abstract and must be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-724">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsAnsiClass" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-724">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAnsiClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-725">
            <see langword="true" />, wenn für <see langword="AnsiClass" /> das Zeichenfolgenformatattribut <see cref="T:System.Type" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-725">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-726">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-726">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-727">Die <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob das Zeichenfolgenformatattribut `AnsiClass` ausgewählt ist die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-727">The <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Runtime.InteropServices._Type.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-728">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsArray" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-728">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsArray" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-729">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Array ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-729">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-730">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-730">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-731">Die <xref:System.Type.IsArray%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="e4574-731">The <xref:System.Type.IsArray%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool" Usage="_Type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="e4574-732">Das <see cref="T:System.Type" />, das mit dem aktuellen <see cref="T:System.Type" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-732">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-733">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.IsAssignableFrom(System.Type)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-733">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-734">
            <see langword="true" /> unter den folgenden Bedingungen: <paramref name="c" /> und der aktuelle <see cref="T:System.Type" /> stellen denselben Typ dar, oder der aktuelle <see cref="T:System.Type" /> befindet sich in der Vererbungshierarchie von <paramref name="c" />, oder der aktuelle <see cref="T:System.Type" /> ist eine von <paramref name="c" /> implementierte Schnittstelle, oder <paramref name="c" /> ist ein generischer Typparameter, und der aktuelle <see cref="T:System.Type" /> stellt eine der Einschränkungen von <paramref name="c" /> dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-734">
              <see langword="true" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same type, or if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current <see cref="T:System.Type" /> represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="e4574-735">
            <see langword="false" />, wenn keine dieser Bedingungen zutrifft, oder wenn <paramref name="c" /><see langword="null" /> ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-735">
              <see langword="false" /> if none of these conditions are the case, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-736">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-736">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-737">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsAutoClass" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-737">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-738">
            <see langword="true" />, wenn für <see langword="AutoClass" /> das Zeichenfolgenformatattribut <see cref="T:System.Type" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-738">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-739">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-739">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-740">Die <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob das Zeichenfolgenformatattribut `AutoClass` ausgewählt ist die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-740">The <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-741">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsAutoLayout" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-741">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoLayout" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-742">
            <see langword="true" />, wenn für <see cref="T:System.Type" /> das Klassenlayoutattribut <see langword="AutoLayout" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-742">
              <see langword="true" /> if the class layout attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-743">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-743">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-744">Die <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob das Klassenlayoutattribut `AutoLayout` ausgewählt ist die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-744">The <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `AutoLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Runtime.InteropServices._Type.IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-745">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsByRef" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-745">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsByRef" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-746">
            <see langword="true" />, wenn <see cref="T:System.Type" /> als Verweis übergeben wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-746">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-747">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-747">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-748">Die <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> als Verweis übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="e4574-748">The <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is passed by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Runtime.InteropServices._Type.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-749">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsClass" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-749">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-750">
            <see langword="true" />, wenn <see cref="T:System.Type" /> eine Klasse ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-750">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-751">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-751">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-752">Die <xref:System.Type.IsClass%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> ist eine Klasse, d. h. keine Werttyp oder Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="e4574-752">The <xref:System.Type.IsClass%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a class; that is, not a value type or interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-753">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsCOMObject" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-753">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsCOMObject" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-754">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein COM-Objekt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-754">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-755">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-755">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-756">Die <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> ein COM-Objekt.</span><span class="sxs-lookup"><span data-stu-id="e4574-756">The <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a COM object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Runtime.InteropServices._Type.IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-757">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsContextful" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-757">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsContextful" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-758">
            <see langword="true" />, wenn <see cref="T:System.Type" /> in einen Kontext aufgenommen werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-758">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-759">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-759">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-760">Die <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> in einen Kontext aufgenommen werden kann.</span><span class="sxs-lookup"><span data-stu-id="e4574-760">The <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> can be hosted in a context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_Type.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="e4574-761">Das <see langword="Type" />-Objekt, auf das die benutzerdefinierten Attribute angewendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-761">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="e4574-762">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-762">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-763">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-763">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-764">
            <see langword="true" />, wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> auf diesen Member angewendet werden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-764">
              <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-765">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-765">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-766">Die <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> angibt, ob ein oder mehrere Instanzen von `attributeType` auf diesen Member angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="e4574-766">The <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> method indicates whether one or more instance of `attributeType` is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Runtime.InteropServices._Type.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-767">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsEnum" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-767">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsEnum" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-768">
            <see langword="true" />, wenn der aktuelle <see cref="T:System.Type" /> eine Enumeration darstellt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-768">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-769">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-769">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-770">Die <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die aktuelle <xref:System.Type> stellt eine Enumeration dar.</span><span class="sxs-lookup"><span data-stu-id="e4574-770">The <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> property gets a value indicating whether the current <xref:System.Type> represents an enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-771">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsExplicitLayout" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-771">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsExplicitLayout" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-772">
            <see langword="true" />, wenn für <see cref="T:System.Type" /> das Klassenlayoutattribut <see langword="ExplicitLayout" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-772">
              <see langword="true" /> if the class layout attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-773">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-773">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-774">Die <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob das Klassenlayoutattribut `ExplicitLayout` ausgewählt ist die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-774">The <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `ExplicitLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Runtime.InteropServices._Type.IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-775">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsImport" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-775">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsImport" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-776">
            <see langword="true" />, wenn der <see cref="T:System.Type" /><see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> hat, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-776">
              <see langword="true" /> if the <see cref="T:System.Type" /> has <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-777">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-777">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-778">Die <xref:System.Type.IsImport%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> hat <xref:System.Runtime.InteropServices.ComImportAttribute>, der angibt, dass er aus einer COM-Typbibliothek importiert wurde.</span><span class="sxs-lookup"><span data-stu-id="e4574-778">The <xref:System.Type.IsImport%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has <xref:System.Runtime.InteropServices.ComImportAttribute>, indicating that it was imported from a COM type library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool" Usage="_Type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="e4574-779">Das Objekt, das mit der aktuellen <see cref="T:System.Type" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-779">The object to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-780">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.IsInstanceOfType(System.Object)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-780">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-781">
            <see langword="true" />, wenn der aktuelle <see cref="T:System.Type" /> in der Vererbungshierarchie des Objekts vorhanden ist, das von <paramref name="o" /> dargestellt wird, oder wenn der aktuelle <see cref="T:System.Type" /> eine Schnittstelle ist, die von <paramref name="o" /> unterstützt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-781">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="o" /> supports.</span>
          </span>
          <span data-ttu-id="e4574-782">
            <see langword="false" />, wenn keine dieser Bedingungen zutrifft oder wenn <paramref name="o" /> den Wert <see langword="null" /> hat oder wenn der aktuelle <see cref="T:System.Type" /> ein offener generischer Typ ist (d. h., <see cref="P:System.Type.ContainsGenericParameters" /> gibt <see langword="true" /> zurück).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-782">
              <see langword="false" /> if neither of these conditions is the case, or if <paramref name="o" /> is <see langword="null" />, or if the current <see cref="T:System.Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-783">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-783">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-784">Die <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> Methode bestimmt, ob das angegebene Objekt eine Instanz des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-784">The <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> method determines whether the specified object is an instance of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Runtime.InteropServices._Type.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-785">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsInterface" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-785">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsInterface" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-786">
            <see langword="true" />, wenn <see cref="T:System.Type" /> eine Schnittstelle ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-786">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-787">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-787">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-788">Die <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> eine Schnittstelle, die weder eine Klasse noch ein Werttyp.</span><span class="sxs-lookup"><span data-stu-id="e4574-788">The <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an interface; that is, not a class or a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-789">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsLayoutSequential" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-789">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsLayoutSequential" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-790">
            <see langword="true" />, wenn für <see cref="T:System.Type" /> das Klassenlayoutattribut <see langword="SequentialLayout" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-790">
              <see langword="true" /> if the class layout attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-791">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-791">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-792">Die <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob das Klassenlayoutattribut `SequentialLayout` ausgewählt ist die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-792">The <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `SequentialLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-793">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsMarshalByRef" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-793">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsMarshalByRef" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-794">
            <see langword="true" />, wenn <see cref="T:System.Type" /> als Verweis gemarshallt wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-794">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-795">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-795">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-796">Die <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> Eigenschaft ruft einen Wert, der angibt, ob der Typ als Verweis gemarshallt wird.</span><span class="sxs-lookup"><span data-stu-id="e4574-796">The <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the Type is marshaled by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-797">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNestedAssembly" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-797">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedAssembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-798">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und nur innerhalb der eigenen Assembly sichtbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-798">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-799">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-799">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-800">Die <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> geschachtelt und nur innerhalb der eigenen Assembly sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-800">The <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-801">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNestedFamANDAssem" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-801">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamANDAssem" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-802">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und ausschließlich für Klassen sichtbar ist, die sowohl zur eigenen Familie als auch zur eigenen Assembly gehören, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-802">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-803">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-803">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-804">Die <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> wird geschachtelte und nur für Klassen sichtbare, die sowohl zur eigenen Familie als auch der eigenen Assembly gehören.</span><span class="sxs-lookup"><span data-stu-id="e4574-804">The <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-805">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNestedFamily" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-805">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamily" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-806">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und nur innerhalb der eigenen Familie sichtbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-806">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-807">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-807">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-808">Die <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> geschachtelt und nur innerhalb der eigenen Familie sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-808">The <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own family.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-809">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNestedFamORAssem" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-809">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamORAssem" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-810">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und ausschließlich für Klassen sichtbar ist, die zur eigenen Familie oder zur eigenen Assembly gehören, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-810">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-811">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-811">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-812">Die <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> geschachtelt und ausschließlich für Klassen, die entweder zur eigenen Familie gehören oder zur eigenen Assembly sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-812">The <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-813">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNestedPrivate" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-813">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPrivate" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-814">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und als privat deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-814">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-815">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-815">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-816">Die <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> geschachtelt und als privat deklariert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-816">The <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and declared private.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-817">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNestedPublic" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-817">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-818">
            <see langword="true" />, wenn die Klasse geschachtelt und als öffentlich deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-818">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-819">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-819">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-820">Die <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> Eigenschaft ruft einen Wert, der angibt, ob eine Klasse geschachtelt und als öffentlich deklariert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-820">The <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> property gets a value indicating whether a class is nested and declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-821">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsNotPublic" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-821">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNotPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-822">
            <see langword="true" />, wenn <see cref="T:System.Type" /> auf oberster Ebene nicht als öffentlich deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-822">
              <see langword="true" /> if the top-level <see cref="T:System.Type" /> is not declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-823">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-823">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-824">Die <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob der obersten Ebene <xref:System.Type> nicht als öffentlich deklariert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-824">The <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is not declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Runtime.InteropServices._Type.IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-825">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsPointer" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-825">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPointer" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-826">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Zeiger ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-826">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-827">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-827">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-828">Die <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> ist ein Zeiger.</span><span class="sxs-lookup"><span data-stu-id="e4574-828">The <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a pointer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-829">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsPrimitive" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-829">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPrimitive" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-830">
            <see langword="true" />, wenn <see cref="T:System.Type" /> zu den primitiven Typen gehört, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-830">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-831">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-831">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-832">Der <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> zu den primitiven Typen ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-832">The <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is one of the primitive types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Runtime.InteropServices._Type.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-833">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsPublic" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-833">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-834">
            <see langword="true" />, wenn <see cref="T:System.Type" /> auf oberster Ebene als öffentlich deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-834">
              <see langword="true" /> if the top-level <see cref="T:System.Type" /> is declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-835">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-835">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-836">Die <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob der obersten Ebene <xref:System.Type> als öffentlich deklariert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-836">The <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Runtime.InteropServices._Type.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-837">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsSealed" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-837">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSealed" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-838">
            <see langword="true" />, wenn <see cref="T:System.Type" /> als versiegelt deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-838">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-839">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-839">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-840">Die <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> als versiegelt deklariert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-840">The <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is declared sealed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-841">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsSerializable" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-841">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSerializable" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-842">
            <see langword="true" />, wenn <see cref="T:System.Type" /> serialisierbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-842">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-843">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-843">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-844">Die <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> serialisierbar ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-844">The <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is serializable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-845">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsSpecialName" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-845">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSpecialName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-846">
            <see langword="true" />, wenn <see cref="T:System.Type" /> einen Namen besitzt, der eine Sonderbehandlung erfordert, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-846">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-847">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-847">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-848">Die <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> verfügt über einen Namen, die besondere Verarbeitung erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-848">The <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has a name that requires special handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool" Usage="_Type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="e4574-849">Das <see cref="T:System.Type" />, das mit dem aktuellen <see cref="T:System.Type" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-849">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e4574-850">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.IsSubclassOf(System.Type)" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-850">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsSubclassOf(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-851">
            <see langword="true" />, wenn der durch den <paramref name="c" />-Parameter dargestellte <see cref="T:System.Type" /> und der aktuelle <see cref="T:System.Type" /> Klassen darstellen und die durch den aktuellen <see cref="T:System.Type" /> dargestellte Klasse von der durch <paramref name="c" /> dargestellten Klasse abgeleitet ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-851">
              <see langword="true" /> if the <see cref="T:System.Type" /> represented by the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent classes, and the class represented by the current <see cref="T:System.Type" /> derives from the class represented by <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e4574-852">Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="c" /> und der aktuelle <see cref="T:System.Type" /> dieselbe Klasse darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-852">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-853">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-853">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-854">Die <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> Methode bestimmt, ob die Klasse von der aktuellen <xref:System.Type> durch das angegebene dargestellten Klasse abgeleitet <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-854">The <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> method determines whether the class represented by the current <xref:System.Type> derives from the class represented by the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-855">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsUnicodeClass" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-855">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsUnicodeClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-856">
            <see langword="true" />, wenn für <see langword="UnicodeClass" /> das Zeichenfolgenformatattribut <see cref="T:System.Type" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-856">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-857">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-857">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-858">Die <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob das Zeichenfolgenformatattribut `UnicodeClass` ausgewählt ist die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-858">The <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Runtime.InteropServices._Type.IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-859">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.IsValueType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-859">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsValueType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-860">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Werttyp ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-860">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-861">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-861">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-862">Die <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> -Eigenschaft ruft einen Wert, der angibt, ob die <xref:System.Type> ein Werttyp ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-862">The <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._Type.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-863">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.MemberType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-863">Provides COM objects with version-independent access to the <see cref="P:System.Type.MemberType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-864">Ein <see cref="T:System.Reflection.MemberTypes" />-Wert, der angibt, dass dieser Member ein Typ oder ein geschachtelter Typ ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-864">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-865">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-865">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-866">Die <xref:System.Type.MemberType%2A?displayProperty=nameWithType> Eigenschaft ruft eine <xref:System.Reflection.MemberTypes> Wert, der angibt, dass dieser Member ein Typ oder ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-866">The <xref:System.Type.MemberType%2A?displayProperty=nameWithType> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a type or a nested type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Runtime.InteropServices._Type.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-867">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.Module" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-867">Provides COM objects with version-independent access to the <see cref="P:System.Type.Module" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-868">Der Name des Moduls, in dem der aktuelle <see cref="T:System.Type" /> definiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-868">The name of the module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-869">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-869">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-870">Die <xref:System.Type.Module%2A?displayProperty=nameWithType> -Eigenschaft ruft das Modul (die DLL) ab, in dem die aktuelle <xref:System.Type> definiert ist.</span><span class="sxs-lookup"><span data-stu-id="e4574-870">The <xref:System.Type.Module%2A?displayProperty=nameWithType> property gets the module (the DLL) in which the current <xref:System.Type> is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-871">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Reflection.MemberInfo.Name" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-871">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-872">Der Name des <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-872">The name of the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-873">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-873">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-874">Die <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> Eigenschaft ruft den Namen des der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-874">The <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> property gets the name of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Runtime.InteropServices._Type.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-875">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.Namespace" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-875">Provides COM objects with version-independent access to the <see cref="P:System.Type.Namespace" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-876">Der Namespace von <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-876">The namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-877">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-877">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-878">Die <xref:System.Type.Namespace%2A?displayProperty=nameWithType> Eigenschaft ruft den Namespace ab dem <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-878">The <xref:System.Type.Namespace%2A?displayProperty=nameWithType> property gets the namespace of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-879">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.ReflectedType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-879">Provides COM objects with version-independent access to the <see cref="P:System.Type.ReflectedType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-880">Das <see cref="T:System.Type" />-Objekt, über das dieses <see cref="T:System.Reflection.MemberInfo" />-Objekt abgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-880">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-881">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-881">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-882">Die <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> Eigenschaft ruft das Klassenobjekt, das mit dieser Member abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="e4574-882">The <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> property gets the class object that was used to obtain this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_Type.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e4574-883">Stellt einen versionsunabhängigen Zugriff auf die <see cref="M:System.Type.ToString" />-Methode für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-883">Provides COM objects with version-independent access to the <see cref="M:System.Type.ToString" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e4574-884">Ein <see cref="T:System.String" />, der den Namen des aktuellen <see cref="T:System.Type" /> darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-884">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-885">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-885">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-886">Die <xref:System.Type.ToString%2A?displayProperty=nameWithType> -Methode gibt den Namen des aktuellen <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-886">The <xref:System.Type.ToString%2A?displayProperty=nameWithType> method returns the name of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-887">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.TypeHandle" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-887">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeHandle" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-888">Das Handle für den aktuellen <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-888">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-889">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-889">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-890">Die <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> -Eigenschaft ruft das Handle für das aktuelle <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-890">The <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property gets the handle for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-891">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.TypeInitializer" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-891">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeInitializer" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-892">Ein <see cref="T:System.Reflection.ConstructorInfo" />, das den Namen des Klassenkonstruktors von <see cref="T:System.Type" /> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-892">A <see cref="T:System.Reflection.ConstructorInfo" /> containing the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-893">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-893">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-894">Die <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> -Eigenschaft ruft den Initialisierer für die <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="e4574-894">The <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> property gets the initializer for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e4574-895">Stellt einen versionsunabhängigen Zugriff auf die <see cref="P:System.Type.UnderlyingSystemType" />-Eigenschaft für COM-Objekte bereit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-895">Provides COM objects with version-independent access to the <see cref="P:System.Type.UnderlyingSystemType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e4574-896">Der Systemtyp, der <see cref="T:System.Type" />zugrunde liegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e4574-896">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4574-897">Diese Eigenschaft ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="e4574-897">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="e4574-898">Die <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> -Eigenschaft gibt den Typ, der von der common Language Runtime, die dieser Typ stellt bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="e4574-898">The <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> property indicates the type provided by the common language runtime that represents this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
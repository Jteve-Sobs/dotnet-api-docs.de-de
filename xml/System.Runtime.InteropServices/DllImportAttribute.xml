<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DllImportAttribute.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac523e3cd02f7b0f8ccc396f11c5abc9af18628f6b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</source>
          <target state="translated">Gibt an, dass die attributierte Methode durch eine nicht verwaltete Dynamic Link Library (DLL) als statischer Einstiegspunkt verfügbar gemacht wird.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can apply this attribute to methods.</source>
          <target state="translated">Sie können dieses Attribut auf Methoden anwenden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Attribut stellt die benötigten Informationen zum Aufrufen einer Funktion, die aus einer nicht verwalteten DLL exportiert.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>As a minimum requirement, you must supply the name of the DLL containing the entry point.</source>
          <target state="translated">Als Mindestanforderung müssen Sie den Namen der DLL, die den Einstiegspunkt enthält angeben.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id="ph1">`Declare`</ph> statement.</source>
          <target state="translated">Sie können dieses Attribut anwenden, direkt in c# und C++-Methodendefinitionen; Visual Basic-Compiler gibt jedoch dieses Attribut, bei der Verwendung der <ph id="ph1">`Declare`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For complex method definitions that include <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.</source>
          <target state="translated">Bei komplexen Methodendefinitionen, die implizit enthalten <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, oder <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Felder, Sie direkt in Visual Basic-Methodendefinitionen dieses Attribut anwenden.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> JScript does not support this attribute.</source>
          <target state="translated"><bpt id="p1">**</bpt>Hinweis<ept id="p1">**</ept> JScript bietet keine Unterstützung für dieses Attribut.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</source>
          <target state="translated">Sie können c# oder Visual Basic-Wrapperklassen verwenden, auf nicht verwaltete API-Methoden aus JScript-Programmen zugreifen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">Weitere Informationen zur Verwendung der Plattformaufrufs Dienst zugreifen auf Funktionen in nicht verwaltete DLLs aufrufen, finden Sie unter <bpt id="p1">[</bpt>nicht verwaltete DLL-Funktionen nutzen<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> unterstützt kein Marshalling von generischen Typen.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Attribut zum Importieren der Win32- <ph id="ph2">`MessageBox`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The code example then calls the imported method.</source>
          <target state="translated">Das Codebeispiel ruft dann die importierte Methode.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The name of the DLL that contains the unmanaged method.</source>
          <target state="translated">Der Name der DLL, die die nicht verwaltete Methode enthält.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>This can include an assembly display name, if the DLL is included in an assembly.</source>
          <target state="translated">Dieser kann einen Assemblyanzeigenamen einschließen, wenn die DLL in einer Assembly enthalten ist.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> class with the name of the DLL containing the method to import.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph>-Klasse mit dem Namen der DLL, die die zu importierende Methode enthält.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id="ph1">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id="ph2">`dllName`</ph>.</source>
          <target state="translated">Wenn eine nicht verwaltete DLL-Datei in eine Assembly, z. B. aufgenommen wird mithilfe des Linkers oder <ph id="ph1">`/linkresource`</ph> -Compileroption verwenden, können Sie den Anzeigenamen der Assembly angeben, im Rahmen des <ph id="ph2">`dllName`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>For example, if an unmanaged DLL named <ph id="ph1">`unmanaged.dll`</ph> is included in a managed assembly named <ph id="ph2">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.</source>
          <target state="translated">Angenommen, eine nicht verwaltete DLL, die mit dem Namen <ph id="ph1">`unmanaged.dll`</ph> dient in eine verwaltete Assembly mit dem Namen <ph id="ph2">`MyAssembly`</ph>, das Attribut kann angegeben werden, wie im folgenden Code gezeigt.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Attribut zum Importieren der Win32- <ph id="ph2">`MessageBox`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The code example then calls the imported method.</source>
          <target state="translated">Das Codebeispiel ruft dann die importierte Methode.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</source>
          <target state="translated">Aktiviert bzw. deaktiviert das Verhalten der optimalen Zuordnung bei der Konvertierung von Unicode-Zeichen in ANSI-Zeichen.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>If <ph id="ph1">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</source>
          <target state="translated">Wenn <ph id="ph1">`true`</ph>, ähnlichen Zuordnungsverhalten aktiviert ist; andernfalls Zuordnung mit ähnlichen Zeichen ist deaktiviert.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id="ph2">`true`</ph> by default.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> Feld ist <ph id="ph2">`true`</ph> standardmäßig.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Settings for this field override the any level settings for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">Überschreiben der Einstellungen für dieses Feld die Ebenen Einstellungen für die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> Attribut.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">Die common Language Runtime konvertiert in ANSI-Zeichen, die alle Unicode-Zeichen, die verwalteten an eine nicht verwaltete Methode ausführen unter Windows 98 oder WindowsMe übergeben</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">Zuordnung mit ähnlichen Zeichen ermöglicht den Interop-Marshaller eine schließen-Zeichen angeben, wenn keine genaue Übereinstimmung vorhanden ist.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">Beispielsweise konvertiert der Marshaller das copyright Unicode-Zeichen 'c' nicht verwaltete Methoden, die ANSI-Zeichen zu akzeptieren.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">Einige Zeichen verfügen nicht über eine Darstellung mit ähnlichen Zeichen; Diese Zeichen werden als zuzuordnenden bezeichnet.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">Zuzuordnenden Zeichen konvertiert werden in der Regel auf den Standardwert "?" ANSI-Zeichen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">Bestimmte Unicode-Zeichen werden in gefährliche Zeichen, z. B. den umgekehrten Schrägstrich konvertiert "<ph id="ph1">\\</ph>' Zeichen, die versehentlich auf einen Pfad ändern können.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">Durch Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Feld <ph id="ph2">`true`</ph>, Sie können das Vorhandensein eines zuzuordnenden Zeichens an den Aufrufer durch Auslösen einer Ausnahme zu signalisieren.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">Sie können nicht vom bereitgestellten Standardwerte ändern die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> und <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Felder, wenn einem verwalteten Array, dessen Elemente ANSI-Zeichen oder LPSTRs sind an eine nicht verwaltete sicheren Array übergeben wird.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">Zuordnung mit ähnlichen Zeichen ist immer aktiviert und wird keine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">Denken Sie daran, dass diese Kombination Ihrer Sicherheitsmodell gefährden kann.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">In einigen Fällen Visual Basic-Entwickler verwenden die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, statt die <ph id="ph2">`Declare`</ph> Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is one of those cases.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> Feld ist ein solcher Fall.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">Im folgende Beispiel wird gezeigt, wie die strengste anzuwendende Zeichen Zuordnung Sicherheit plattformspezifische aufrufen Methodendefinitionen durch Angeben des ANSI-Zeichensatzes, bewährte Zuordnungsverhalten deaktivieren und eine Ausnahme auszulösen, auf dem nicht zugeordneten Unicode-Zeichen.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Indicates the calling convention of an entry point.</source>
          <target state="translated">Gibt die Aufrufkonvention eines Einstiegspunkts an.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>You set this field to one of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.</source>
          <target state="translated">Legen Sie dieses Feld in eines der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> Enumerationsmember.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>The default value for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.</source>
          <target state="translated">Der Standardwert für die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> Feld <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, die wiederum standardmäßig <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> Konvention.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>For more information, see Calling Convention in the MSDN library.</source>
          <target state="translated">Weitere Informationen finden Sie auf der Aufrufkonvention, in der MSDN Library.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">In einigen Fällen Visual Basic-Entwickler verwenden die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, statt die <ph id="ph2">`Declare`</ph> Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is one of those cases.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> Feld ist ein solcher Fall.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>System.Runtime.InteropServices.DllImportAttribute#1</source>
          <target state="translated">System.Runtime.InteropServices.DllImportAttribute#1</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Indicates how to marshal string parameters to the method and controls name mangling.</source>
          <target state="translated">Gibt an, wie Zeichenfolgenparameter an die Methode gemarshallt werden, und steuert die Namenszerlegung.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Use this field with a member of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</source>
          <target state="translated">Verwenden Sie dieses Feld mit einem Mitglied der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> Enumeration, die Marshalling-Verhalten der String-Parameter angeben und die Einstiegspunktfunktion mit dem Namen aufgerufen werden soll (der exakte Name angegeben oder einen Namen mit "A" oder "W" enden) an.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The default enumeration member for C# and Visual Basic is <ph id="ph1">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id="ph2">`CharSet.None`</ph>, which is equivalent to <ph id="ph3">`CharSet.Ansi`</ph>.</source>
          <target state="translated">Das Standardelement für die Enumeration für c# und Visual Basic ist <ph id="ph1">`CharSet.Ansi`</ph> und ist das Standardelement für die Enumeration für C++ <ph id="ph2">`CharSet.None`</ph>, dies entspricht dem <ph id="ph3">`CharSet.Ansi`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>In Visual Basic, you use the <ph id="ph1">`Declare`</ph> statement to specify the <ph id="ph2">`CharSet`</ph> field.</source>
          <target state="translated">Verwenden Sie in Visual Basic die <ph id="ph1">`Declare`</ph> -Anweisung zum Angeben der <ph id="ph2">`CharSet`</ph> Feld.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id="ph2">`CharSet`</ph> field in determining which entry-point name to invoke.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> Feld beeinflusst das Verhalten der <ph id="ph2">`CharSet`</ph> feststellen, welche Einstiegspunktfunktion mit dem Namen aufzurufenden Feld.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id="ph1">`CharSet`</ph> field, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
          <target state="translated">Für eine ausführliche Beschreibung und Beispiele für das Marshallen von Zeichenfolgen und Vergleichsverhalten zugeordnete Name der <ph id="ph1">`CharSet`</ph> Feld, finden Sie unter <bpt id="p1">[</bpt>angeben eines Zeichensatzes<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Attribut zum Importieren der Win32- <ph id="ph2">`MessageBox`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The code example then calls the imported method.</source>
          <target state="translated">Das Codebeispiel ruft dann die importierte Methode.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Indicates the name or ordinal of the DLL entry point to be called.</source>
          <target state="translated">Gibt den Namen oder die Ordnungszahl des aufzurufenden DLL-Einstiegspunkts an.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</source>
          <target state="translated">Geben Sie den Einstiegspunkt-Namen, indem Sie eine Zeichenfolge, die den Namen der DLL, die den Einstiegspunkt enthält, oder Sie können den Einstiegspunkt nach seiner Ordinalzahl identifizieren.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Ordinals are prefixed with the # sign, for example, #1.</source>
          <target state="translated">Das #-Zeichen, z. B. #1 werden Ordinalzahlen vorangestellt.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</source>
          <target state="translated">Wenn Sie dieses Feld nicht angeben, verwendet die common Language Runtime den Namen des mit markierte.NET-Methode der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For additional information, see <bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Identifizieren von Funktionen in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For examples showing how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id="p1">[</bpt>Specifying an Entry Point<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</source>
          <target state="translated">Beispiele zur Verwendung der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> Feld, finden Sie unter <bpt id="p1">[</bpt>angeben eines Einstiegspunktes<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Attribut zum Importieren der Win32- <ph id="ph2">`MessageBox`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> property to specify the function to import and then changes the name to <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</source>
          <target state="translated">Das Codebeispiel verwendet die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> -Eigenschaft an die Funktion zum Importieren und ändert dann den Namen in <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Controls whether the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</source>
          <target state="translated">Steuert, ob das <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph>-Feld die Common Language Runtime anweist, eine nicht verwaltete DLL nach anderen Einstiegspunktnamen als dem angegebenen zu durchsuchen.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>If <ph id="ph1">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to <ph id="ph3">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to the <ph id="ph5">`CharSet.Unicode`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">`false`</ph>, Einstiegspunktname, die mit dem Buchstaben A wird aufgerufen, beim der <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> Feld auf festgelegt ist <ph id="ph3">`CharSet.Ansi`</ph>, und der Einstiegspunkt Name mit dem Buchstaben W angefügt wird aufgerufen, wenn der <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> Feld auf festgelegt ist der <ph id="ph5">`CharSet.Unicode`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Typically, managed compilers set this field.</source>
          <target state="translated">Normalerweise legen die verwalteten Compiler dieses Feld fest.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.</source>
          <target state="translated">Die folgende Tabelle zeigt die Beziehung zwischen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> und <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> Feldern basierend auf Standardwerte, die durch die zu verwendende Programmiersprache auferlegt werden.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>You can override the default setting, but do so with caution.</source>
          <target state="translated">Die Standardeinstellung überschreiben, können dies mit Vorsicht tun.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Language</source>
          <target state="translated">Sprache</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ANSI</source>
          <target state="translated">ANSI</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Auto</source>
          <target state="translated">Auto</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling: = "true"</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling: = "true"</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=False</source>
          <target state="translated">ExactSpelling: = "false"</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C++</source>
          <target state="translated">C++</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">In einigen Fällen Visual Basic-Entwickler verwenden die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, anstatt die <ph id="ph2">`Declare`</ph> Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field is one of those cases.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> Feld ist ein solcher Fall.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Indicates whether unmanaged methods that have <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph2">&lt;see langword="retval" /&gt;</ph> return values are directly translated or whether <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph4">&lt;see langword="retval" /&gt;</ph> return values are automatically converted to exceptions.</source>
          <target state="translated">Gibt an, ob nicht verwaltete Methoden, die über <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph>-Rückgabewerte oder <ph id="ph2">&lt;see langword="retval" /&gt;</ph>-Rückgabewerte verfügen, direkt übersetzt werden oder ob <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph>-Rückgabewerte oder <ph id="ph4">&lt;see langword="retval" /&gt;</ph>-Rückgabewerte automatisch in Ausnahmen konvertiert werden.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`true`</ph> to directly translate unmanaged signatures with <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> values; set it to <ph id="ph5">`false`</ph> to automatically convert <ph id="ph6">`HRESULT`</ph> or <ph id="ph7">`retval`</ph> values to exceptions.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> Feld <ph id="ph2">`true`</ph> um nicht verwaltete Signaturen mit direkt zu übersetzen <ph id="ph3">`HRESULT`</ph> oder <ph id="ph4">`retval`</ph> Werte; legen Sie es auf <ph id="ph5">`false`</ph> automatisch konvertiert <ph id="ph6">`HRESULT`</ph> oder <ph id="ph7">`retval`</ph> Werte für Ausnahmen.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>By default, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Wird standardmäßig die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> Feld ist <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When <ph id="ph1">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id="ph2">`HRESULT`</ph> value.</source>
          <target state="translated">Wenn <ph id="ph1">`true`</ph>, die daraus resultierende Methodensignatur gibt einen Integer-Wert, enthält die <ph id="ph2">`HRESULT`</ph> Wert.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In this case, you must manually inspect the return value and respond accordingly in your application.</source>
          <target state="translated">In diesem Fall müssen Sie manuell den Rückgabewert überprüfen und entsprechend reagieren in Ihrer Anwendung.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When you set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id="ph3">`HRESULT`</ph>) return type.</source>
          <target state="translated">Beim Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> Feld <ph id="ph2">`false`</ph>, die sich ergebende Methodensignatur enthält einen void-Rückgabetyp kein ganze Zahl (<ph id="ph3">`HRESULT`</ph>) Rückgabetyp.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When the unmanaged method produces an <ph id="ph1">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id="ph2">`S_OK`</ph> (or 0) and does not throw an exception.</source>
          <target state="translated">Wenn die nicht verwaltete Methode erzeugt eine <ph id="ph1">`HRESULT`</ph>, ignoriert die Laufzeit automatisch einen Rückgabewert von <ph id="ph2">`S_OK`</ph> (oder 0) und löst keine Ausnahme.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>For <ph id="ph1">`HRESULT`</ph>s other than <ph id="ph2">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id="ph3">`HRESULT`</ph>.</source>
          <target state="translated">Für <ph id="ph1">`HRESULT`</ph>s außer <ph id="ph2">`S_OK`</ph>, löst die Laufzeit automatisch eine Ausnahme, die entspricht der <ph id="ph3">`HRESULT`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id="ph2">`HRESULT`</ph>.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> Attribut führt nur die Konvertierung in Methoden, mit denen ein <ph id="ph2">`HRESULT`</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>You might decide to change the default error reporting behavior from <ph id="ph1">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</source>
          <target state="translated">Sie können ggf. so ändern Sie das Verhalten unterscheidet sich von der standardmäßigen Fehlerberichtsfunktion <ph id="ph1">`HRESULT`</ph>s, um Ausnahmen in Fällen, in denen Ausnahmen den Fehlerbericht Struktur Ihrer Anwendung besser gerecht.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This field is similar to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Dieses Feld ist ähnlich wie die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; jedoch im Gegensatz zu den <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> Feld, den Standardwert für das Attribut ist <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">In einigen Fällen Visual Basic-Entwickler verwenden die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, anstatt die <ph id="ph2">`Declare`</ph> Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> Feld ist ein solcher Fall.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to import the unmanaged <ph id="ph2">`SHAutoComplete`</ph> function once with the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph4">`true`</ph> and again with the <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird mit der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> So importieren Sie die nicht verwaltete <ph id="ph2">`SHAutoComplete`</ph> Funktion einmal mit der <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> -Feld festgelegt, sodass <ph id="ph4">`true`</ph> und erneut mit der <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> -Feld festgelegt, sodass <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This code example causes the <ph id="ph1">`SHAutoComplete`</ph> function to generate any errors with an exception one time and an <ph id="ph2">`HRESULT`</ph> the next.</source>
          <target state="translated">Bewirkt, dass in diesem Codebeispiel wird die <ph id="ph1">`SHAutoComplete`</ph> Funktion Fehler mit einer Ausnahme einmal generiert und ein <ph id="ph2">`HRESULT`</ph> nächsten.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Indicates whether the callee calls the <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 API function before returning from the attributed method.</source>
          <target state="translated">Gibt an, ob der Aufgerufene vor dem Zurückgeben aus der attributierten Methode die Win32-API <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> aufruft.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source><ph id="ph1">`true`</ph> to indicate that the callee will call <ph id="ph2">`SetLastError`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`true`</ph> um anzugeben, dass der aufgerufene angerufen <ph id="ph2">`SetLastError`</ph>ist, andernfalls <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The runtime marshaler calls <ph id="ph1">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.</source>
          <target state="translated">Ruft die Laufzeit-Marshaller <ph id="ph1">`GetLastError`</ph> sowie den Wert zurückgegeben wird, um zu verhindern, die durch andere API-Aufrufe überschrieben wird.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>You can retrieve the error code by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</source>
          <target state="translated">Sie können den Fehlercode abrufen, durch den Aufruf <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">In einigen Fällen Visual Basic-Entwickler verwenden die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, anstatt die <ph id="ph2">`Declare`</ph> Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> field is one of those cases.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> Feld ist ein solcher Fall.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</source>
          <target state="translated">Aktiviert bzw. deaktiviert das Auslösen einer Ausnahme bei einem nicht zuzuordnenden Unicode-Zeichen, das in das ANSI-Zeichen „?“ konvertiert wird.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source><ph id="ph1">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id="ph2">`false`</ph> to indicate that the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.</source>
          <target state="translated"><ph id="ph1">`true`</ph> um anzugeben, dass jedes Mal eine Ausnahme ausgelöst wird, wenn der Interop-Marshaller ein zuzuordnendes Zeichen konvertiert. <ph id="ph2">`false`</ph> gibt an, dass die <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Feld ist deaktiviert.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>This field is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">Dieses Feld ist <ph id="ph1">`false`</ph> standardmäßig.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">Die common Language Runtime konvertiert in ANSI-Zeichen, die alle Unicode-Zeichen, die verwalteten an eine nicht verwaltete Methode ausführen unter Windows 98 oder WindowsMe übergeben</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">Zuordnung mit ähnlichen Zeichen ermöglicht den Interop-Marshaller eine schließen-Zeichen angeben, wenn keine genaue Übereinstimmung vorhanden ist.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">Beispielsweise konvertiert der Marshaller das copyright Unicode-Zeichen 'c' nicht verwaltete Methoden, die ANSI-Zeichen zu akzeptieren.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">Einige Zeichen verfügen nicht über eine Darstellung mit ähnlichen Zeichen; Diese Zeichen werden als zuzuordnenden bezeichnet.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">Zuzuordnenden Zeichen konvertiert werden in der Regel auf den Standardwert "?" ANSI-Zeichen.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">Bestimmte Unicode-Zeichen werden in gefährliche Zeichen, z. B. den umgekehrten Schrägstrich konvertiert "<ph id="ph1">\\</ph>' Zeichen, die versehentlich auf einen Pfad ändern können.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">Durch Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Feld <ph id="ph2">`true`</ph>, Sie können das Vorhandensein eines zuzuordnenden Zeichens an den Aufrufer durch Auslösen einer Ausnahme zu signalisieren.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">Sie können nicht vom bereitgestellten Standardwerte ändern die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> und <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Felder, wenn einem verwalteten Array, dessen Elemente ANSI-Zeichen oder LPSTRs sind an eine nicht verwaltete sicheren Array übergeben wird.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">Zuordnung mit ähnlichen Zeichen ist immer aktiviert und wird keine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">Denken Sie daran, dass diese Kombination Ihrer Sicherheitsmodell gefährden kann.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to define a DLL function in managed code, instead of using the <ph id="ph2">`Declare`</ph> statement.</source>
          <target state="translated">In einigen Fällen Visual Basic-Entwickler verwenden die <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> zum Definieren einer DLL-Funktion in verwaltetem Code, anstatt die <ph id="ph2">`Declare`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is one of those cases.</source>
          <target state="translated">Festlegen der <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> Feld ist ein solcher Fall.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">Im folgende Beispiel wird gezeigt, wie die strengste anzuwendende Zeichen Zuordnung Sicherheit plattformspezifische aufrufen Methodendefinitionen durch Angeben des ANSI-Zeichensatzes, bewährte Zuordnungsverhalten deaktivieren und eine Ausnahme auszulösen, auf dem nicht zugeordneten Unicode-Zeichen.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Gets the name of the DLL file that contains the entry point.</source>
          <target state="translated">Ruft den Namen der DLL-Datei ab, die den Einstiegspunkt enthält.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>The name of the DLL file that contains the entry point.</source>
          <target state="translated">Der Name der DLL-Datei, die den Einstiegspunkt enthält.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>You can provide a full or relative path.</source>
          <target state="translated">Sie können einen vollständigen oder relativen Pfad angeben.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</source>
          <target state="translated">Wenn Sie keinen Pfad angeben, muss die DLL im aktuellen Pfad zur Laufzeit sein, wenn die DLL anderweitig geladen wird.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</source>
          <target state="translated">Denken Sie jedoch, dass mit einem vollqualifizierten Pfad Ungenauigkeit führen kann, falls die DLL verschoben wird.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
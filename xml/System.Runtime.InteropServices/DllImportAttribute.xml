<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480304" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2986c-101">Gibt an, dass die attributierte Methode durch eine nicht verwaltete Dynamic Link Library (DLL) als statischer Einstiegspunkt verfügbar gemacht wird.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2986c-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-102">Sie können dieses Attribut auf Methoden anwenden.</span><span class="sxs-lookup"><span data-stu-id="2986c-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="2986c-103">Die <xref:System.Runtime.InteropServices.DllImportAttribute> Attribut stellt die benötigten Informationen zum Aufrufen einer Funktion, die aus einer nicht verwalteten DLL exportiert.</span><span class="sxs-lookup"><span data-stu-id="2986c-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="2986c-104">Als Mindestanforderung müssen Sie den Namen der DLL, die den Einstiegspunkt enthält angeben.</span><span class="sxs-lookup"><span data-stu-id="2986c-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="2986c-105">Sie können dieses Attribut anwenden, direkt in c# und C++-Methodendefinitionen; Visual Basic-Compiler gibt jedoch dieses Attribut, bei der Verwendung der `Declare` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="2986c-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="2986c-106">Bei komplexen Methodendefinitionen, die implizit enthalten <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, oder <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Felder, Sie direkt in Visual Basic-Methodendefinitionen dieses Attribut anwenden.</span><span class="sxs-lookup"><span data-stu-id="2986c-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="2986c-107">**Hinweis** JScript bietet keine Unterstützung für dieses Attribut.</span><span class="sxs-lookup"><span data-stu-id="2986c-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="2986c-108">Sie können c# oder Visual Basic-Wrapperklassen verwenden, auf nicht verwaltete API-Methoden aus JScript-Programmen zugreifen.</span><span class="sxs-lookup"><span data-stu-id="2986c-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="2986c-109">Weitere Informationen zur Verwendung der Plattformaufrufs Dienst zugreifen auf Funktionen in nicht verwaltete DLLs aufrufen, finden Sie unter [nicht verwaltete DLL-Funktionen nutzen](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span><span class="sxs-lookup"><span data-stu-id="2986c-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2986c-110">Die <xref:System.Runtime.InteropServices.DllImportAttribute> unterstützt kein Marshalling von generischen Typen.</span><span class="sxs-lookup"><span data-stu-id="2986c-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-111">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Runtime.InteropServices.DllImportAttribute> Attribut zum Importieren der Win32- `MessageBox` Funktion.</span><span class="sxs-lookup"><span data-stu-id="2986c-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2986c-112">Das Codebeispiel ruft dann die importierte Methode.</span><span class="sxs-lookup"><span data-stu-id="2986c-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName">
          <span data-ttu-id="2986c-113">Der Name der DLL, die die nicht verwaltete Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-113">The name of the DLL that contains the unmanaged method.</span>
          </span>
          <span data-ttu-id="2986c-114">Dieser kann einen Assemblyanzeigenamen einschließen, wenn die DLL in einer Assembly enthalten ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-114">This can include an assembly display name, if the DLL is included in an assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2986c-115">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />-Klasse mit dem Namen der DLL, die die zu importierende Methode enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-116">Wenn eine nicht verwaltete DLL-Datei in eine Assembly, z. B. aufgenommen wird mithilfe des Linkers oder `/linkresource` -Compileroption verwenden, können Sie den Anzeigenamen der Assembly angeben, im Rahmen des `dllName`.</span><span class="sxs-lookup"><span data-stu-id="2986c-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="2986c-117">Angenommen, eine nicht verwaltete DLL, die mit dem Namen `unmanaged.dll` dient in eine verwaltete Assembly mit dem Namen `MyAssembly`, das Attribut kann angegeben werden, wie im folgenden Code gezeigt.</span><span class="sxs-lookup"><span data-stu-id="2986c-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="2986c-118">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Runtime.InteropServices.DllImportAttribute> Attribut zum Importieren der Win32- `MessageBox` Funktion.</span><span class="sxs-lookup"><span data-stu-id="2986c-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2986c-119">Das Codebeispiel ruft dann die importierte Methode.</span><span class="sxs-lookup"><span data-stu-id="2986c-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-120">Aktiviert bzw. deaktiviert das Verhalten der optimalen Zuordnung bei der Konvertierung von Unicode-Zeichen in ANSI-Zeichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-121">Wenn `true`, ähnlichen Zuordnungsverhalten aktiviert ist; andernfalls Zuordnung mit ähnlichen Zeichen ist deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="2986c-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="2986c-122">Die <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> Feld ist `true` standardmäßig.</span><span class="sxs-lookup"><span data-stu-id="2986c-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="2986c-123">Überschreiben der Einstellungen für dieses Feld die Ebenen Einstellungen für die <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> Attribut.</span><span class="sxs-lookup"><span data-stu-id="2986c-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="2986c-124">Die common Language Runtime konvertiert in ANSI-Zeichen, die alle Unicode-Zeichen, die verwalteten an eine nicht verwaltete Methode ausführen unter Windows 98 oder WindowsMe übergeben</span><span class="sxs-lookup"><span data-stu-id="2986c-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="2986c-125">Zuordnung mit ähnlichen Zeichen ermöglicht den Interop-Marshaller eine schließen-Zeichen angeben, wenn keine genaue Übereinstimmung vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="2986c-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="2986c-126">Beispielsweise konvertiert der Marshaller das copyright Unicode-Zeichen 'c' nicht verwaltete Methoden, die ANSI-Zeichen zu akzeptieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="2986c-127">Einige Zeichen verfügen nicht über eine Darstellung mit ähnlichen Zeichen; Diese Zeichen werden als zuzuordnenden bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="2986c-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="2986c-128">Zuzuordnenden Zeichen konvertiert werden in der Regel auf den Standardwert "?" ANSI-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="2986c-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2986c-129">Bestimmte Unicode-Zeichen werden in gefährliche Zeichen, z. B. den umgekehrten Schrägstrich konvertiert "\\' Zeichen, die versehentlich auf einen Pfad ändern können.</span><span class="sxs-lookup"><span data-stu-id="2986c-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="2986c-130">Durch Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Feld `true`, Sie können das Vorhandensein eines zuzuordnenden Zeichens an den Aufrufer durch Auslösen einer Ausnahme zu signalisieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2986c-131">Sie können nicht vom bereitgestellten Standardwerte ändern die <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> und <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Felder, wenn einem verwalteten Array, dessen Elemente ANSI-Zeichen oder LPSTRs sind an eine nicht verwaltete sicheren Array übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="2986c-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="2986c-132">Zuordnung mit ähnlichen Zeichen ist immer aktiviert und wird keine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2986c-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="2986c-133">Denken Sie daran, dass diese Kombination Ihrer Sicherheitsmodell gefährden kann.</span><span class="sxs-lookup"><span data-stu-id="2986c-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-134">In einigen Fällen Visual Basic-Entwickler verwenden die <xref:System.Runtime.InteropServices.DllImportAttribute>, statt die `Declare` Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2986c-135">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> Feld ist ein solcher Fall.</span><span class="sxs-lookup"><span data-stu-id="2986c-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="2986c-136">Im folgende Beispiel wird gezeigt, wie die strengste anzuwendende Zeichen Zuordnung Sicherheit plattformspezifische aufrufen Methodendefinitionen durch Angeben des ANSI-Zeichensatzes, bewährte Zuordnungsverhalten deaktivieren und eine Ausnahme auszulösen, auf dem nicht zugeordneten Unicode-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="2986c-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-137">Gibt die Aufrufkonvention eines Einstiegspunkts an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-137">Indicates the calling convention of an entry point.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-138">Legen Sie dieses Feld in eines der <xref:System.Runtime.InteropServices.CallingConvention> Enumerationsmember.</span><span class="sxs-lookup"><span data-stu-id="2986c-138">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="2986c-139">Der Standardwert für die <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> Feld <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, die wiederum standardmäßig <xref:System.Runtime.InteropServices.CallingConvention.StdCall> Konvention.</span><span class="sxs-lookup"><span data-stu-id="2986c-139">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
 <span data-ttu-id="2986c-140">Weitere Informationen finden Sie auf der Aufrufkonvention, in der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="2986c-140">For more information, see Calling Convention in the MSDN library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-141">In einigen Fällen Visual Basic-Entwickler verwenden die <xref:System.Runtime.InteropServices.DllImportAttribute>, statt die `Declare` Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2986c-142">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> Feld ist ein solcher Fall.</span><span class="sxs-lookup"><span data-stu-id="2986c-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 <span data-ttu-id="2986c-143">System.Runtime.InteropServices.DllImportAttribute#1</span><span class="sxs-lookup"><span data-stu-id="2986c-143">System.Runtime.InteropServices.DllImportAttribute#1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-144">Gibt an, wie Zeichenfolgenparameter an die Methode gemarshallt werden, und steuert die Namenszerlegung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-144">Indicates how to marshal string parameters to the method and controls name mangling.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-145">Verwenden Sie dieses Feld mit einem Mitglied der <xref:System.Runtime.InteropServices.CharSet> Enumeration, die Marshalling-Verhalten der String-Parameter angeben und die Einstiegspunktfunktion mit dem Namen aufgerufen werden soll (der exakte Name angegeben oder einen Namen mit "A" oder "W" enden) an.</span><span class="sxs-lookup"><span data-stu-id="2986c-145">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="2986c-146">Das Standardelement für die Enumeration für c# und Visual Basic ist `CharSet.Ansi` und ist das Standardelement für die Enumeration für C++ `CharSet.None`, dies entspricht dem `CharSet.Ansi`.</span><span class="sxs-lookup"><span data-stu-id="2986c-146">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="2986c-147">Verwenden Sie in Visual Basic die `Declare` -Anweisung zum Angeben der `CharSet` Feld.</span><span class="sxs-lookup"><span data-stu-id="2986c-147">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="2986c-148">Die <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> Feld beeinflusst das Verhalten der `CharSet` feststellen, welche Einstiegspunktfunktion mit dem Namen aufzurufenden Feld.</span><span class="sxs-lookup"><span data-stu-id="2986c-148">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="2986c-149">Für eine ausführliche Beschreibung und Beispiele für das Marshallen von Zeichenfolgen und Vergleichsverhalten zugeordnete Name der `CharSet` Feld, finden Sie unter [angeben eines Zeichensatzes](~/docs/framework/interop/specifying-a-character-set.md).</span><span class="sxs-lookup"><span data-stu-id="2986c-149">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-150">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Runtime.InteropServices.DllImportAttribute> Attribut zum Importieren der Win32- `MessageBox` Funktion.</span><span class="sxs-lookup"><span data-stu-id="2986c-150">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2986c-151">Das Codebeispiel ruft dann die importierte Methode.</span><span class="sxs-lookup"><span data-stu-id="2986c-151">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-152">Gibt den Namen oder die Ordnungszahl des aufzurufenden DLL-Einstiegspunkts an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-152">Indicates the name or ordinal of the DLL entry point to be called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-153">Geben Sie den Einstiegspunkt-Namen, indem Sie eine Zeichenfolge, die den Namen der DLL, die den Einstiegspunkt enthält, oder Sie können den Einstiegspunkt nach seiner Ordinalzahl identifizieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-153">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="2986c-154">Das #-Zeichen, z. B. #1 werden Ordinalzahlen vorangestellt.</span><span class="sxs-lookup"><span data-stu-id="2986c-154">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="2986c-155">Wenn Sie dieses Feld nicht angeben, verwendet die common Language Runtime den Namen des mit markierte.NET-Methode der <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="2986c-155">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="2986c-156">Weitere Informationen finden Sie unter [Identifizieren von Funktionen in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span><span class="sxs-lookup"><span data-stu-id="2986c-156">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="2986c-157">Beispiele zur Verwendung der <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> Feld, finden Sie unter [angeben eines Einstiegspunktes](~/docs/framework/interop/specifying-an-entry-point.md).</span><span class="sxs-lookup"><span data-stu-id="2986c-157">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-158">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Runtime.InteropServices.DllImportAttribute> Attribut zum Importieren der Win32- `MessageBox` Funktion.</span><span class="sxs-lookup"><span data-stu-id="2986c-158">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2986c-159">Das Codebeispiel verwendet die <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> -Eigenschaft an die Funktion zum Importieren und ändert dann den Namen in `MyNewMessageBoxMethod`.</span><span class="sxs-lookup"><span data-stu-id="2986c-159">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-160">Steuert, ob das <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />-Feld die Common Language Runtime anweist, eine nicht verwaltete DLL nach anderen Einstiegspunktnamen als dem angegebenen zu durchsuchen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-160">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-161">Wenn `false`, Einstiegspunktname, die mit dem Buchstaben A wird aufgerufen, beim der <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> Feld auf festgelegt ist `CharSet.Ansi`, und der Einstiegspunkt Name mit dem Buchstaben W angefügt wird aufgerufen, wenn der <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> Feld auf festgelegt ist der `CharSet.Unicode`.</span><span class="sxs-lookup"><span data-stu-id="2986c-161">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="2986c-162">Normalerweise legen die verwalteten Compiler dieses Feld fest.</span><span class="sxs-lookup"><span data-stu-id="2986c-162">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="2986c-163">Die folgende Tabelle zeigt die Beziehung zwischen der <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> und <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> Feldern basierend auf Standardwerte, die durch die zu verwendende Programmiersprache auferlegt werden.</span><span class="sxs-lookup"><span data-stu-id="2986c-163">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="2986c-164">Die Standardeinstellung überschreiben, können dies mit Vorsicht tun.</span><span class="sxs-lookup"><span data-stu-id="2986c-164">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="2986c-165">Sprache</span><span class="sxs-lookup"><span data-stu-id="2986c-165">Language</span></span>|<span data-ttu-id="2986c-166">ANSI</span><span class="sxs-lookup"><span data-stu-id="2986c-166">ANSI</span></span>|<span data-ttu-id="2986c-167">Unicode</span><span class="sxs-lookup"><span data-stu-id="2986c-167">Unicode</span></span>|<span data-ttu-id="2986c-168">Auto</span><span class="sxs-lookup"><span data-stu-id="2986c-168">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="2986c-169">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="2986c-169">Visual Basic</span></span>|<span data-ttu-id="2986c-170">ExactSpelling: = "true"</span><span class="sxs-lookup"><span data-stu-id="2986c-170">ExactSpelling:=True</span></span>|<span data-ttu-id="2986c-171">ExactSpelling: = "true"</span><span class="sxs-lookup"><span data-stu-id="2986c-171">ExactSpelling:=True</span></span>|<span data-ttu-id="2986c-172">ExactSpelling: = "false"</span><span class="sxs-lookup"><span data-stu-id="2986c-172">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="2986c-173">C#</span><span class="sxs-lookup"><span data-stu-id="2986c-173">C#</span></span>|<span data-ttu-id="2986c-174">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2986c-174">ExactSpelling=false</span></span>|<span data-ttu-id="2986c-175">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2986c-175">ExactSpelling=false</span></span>|<span data-ttu-id="2986c-176">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2986c-176">ExactSpelling=false</span></span>|  
|<span data-ttu-id="2986c-177">C++</span><span class="sxs-lookup"><span data-stu-id="2986c-177">C++</span></span>|<span data-ttu-id="2986c-178">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2986c-178">ExactSpelling=false</span></span>|<span data-ttu-id="2986c-179">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2986c-179">ExactSpelling=false</span></span>|<span data-ttu-id="2986c-180">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2986c-180">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2986c-181">In einigen Fällen Visual Basic-Entwickler verwenden die <xref:System.Runtime.InteropServices.DllImportAttribute>, anstatt die `Declare` Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-181">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2986c-182">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> Feld ist ein solcher Fall.</span><span class="sxs-lookup"><span data-stu-id="2986c-182">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-183">Gibt an, ob nicht verwaltete Methoden, die über <see langword="HRESULT" />-Rückgabewerte oder <see langword="retval" />-Rückgabewerte verfügen, direkt übersetzt werden oder ob <see langword="HRESULT" />-Rückgabewerte oder <see langword="retval" />-Rückgabewerte automatisch in Ausnahmen konvertiert werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-183">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-184">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> Feld `true` um nicht verwaltete Signaturen mit direkt zu übersetzen `HRESULT` oder `retval` Werte; legen Sie es auf `false` automatisch konvertiert `HRESULT` oder `retval` Werte für Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="2986c-184">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="2986c-185">Wird standardmäßig die <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> Feld ist `true`.</span><span class="sxs-lookup"><span data-stu-id="2986c-185">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="2986c-186">Wenn `true`, die daraus resultierende Methodensignatur gibt einen Integer-Wert, enthält die `HRESULT` Wert.</span><span class="sxs-lookup"><span data-stu-id="2986c-186">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="2986c-187">In diesem Fall müssen Sie manuell den Rückgabewert überprüfen und entsprechend reagieren in Ihrer Anwendung.</span><span class="sxs-lookup"><span data-stu-id="2986c-187">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="2986c-188">Beim Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> Feld `false`, die sich ergebende Methodensignatur enthält einen void-Rückgabetyp kein ganze Zahl (`HRESULT`) Rückgabetyp.</span><span class="sxs-lookup"><span data-stu-id="2986c-188">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="2986c-189">Wenn die nicht verwaltete Methode erzeugt eine `HRESULT`, ignoriert die Laufzeit automatisch einen Rückgabewert von `S_OK` (oder 0) und löst keine Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="2986c-189">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="2986c-190">Für `HRESULT`s außer `S_OK`, löst die Laufzeit automatisch eine Ausnahme, die entspricht der `HRESULT`.</span><span class="sxs-lookup"><span data-stu-id="2986c-190">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="2986c-191">Beachten Sie, dass die <xref:System.Runtime.InteropServices.DllImportAttribute> Attribut führt nur die Konvertierung in Methoden, mit denen ein `HRESULT`.</span><span class="sxs-lookup"><span data-stu-id="2986c-191">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="2986c-192">Sie können ggf. so ändern Sie das Verhalten unterscheidet sich von der standardmäßigen Fehlerberichtsfunktion `HRESULT`s, um Ausnahmen in Fällen, in denen Ausnahmen den Fehlerbericht Struktur Ihrer Anwendung besser gerecht.</span><span class="sxs-lookup"><span data-stu-id="2986c-192">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="2986c-193">Dieses Feld ist ähnlich wie die <xref:System.Runtime.InteropServices.PreserveSigAttribute>; jedoch im Gegensatz zu den <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> Feld, den Standardwert für das Attribut ist `false`.</span><span class="sxs-lookup"><span data-stu-id="2986c-193">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="2986c-194">In einigen Fällen Visual Basic-Entwickler verwenden die <xref:System.Runtime.InteropServices.DllImportAttribute>, anstatt die `Declare` Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-194">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2986c-195">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> Feld ist ein solcher Fall.</span><span class="sxs-lookup"><span data-stu-id="2986c-195">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-196">Im folgenden Codebeispiel wird mit der <xref:System.Runtime.InteropServices.DllImportAttribute> So importieren Sie die nicht verwaltete `SHAutoComplete` Funktion einmal mit der <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> -Feld festgelegt, sodass `true` und erneut mit der <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> -Feld festgelegt, sodass `false`.</span><span class="sxs-lookup"><span data-stu-id="2986c-196">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="2986c-197">Bewirkt, dass in diesem Codebeispiel wird die `SHAutoComplete` Funktion Fehler mit einer Ausnahme einmal generiert und ein `HRESULT` nächsten.</span><span class="sxs-lookup"><span data-stu-id="2986c-197">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-198">Gibt an, ob der Aufgerufene vor dem Zurückgeben aus der attributierten Methode die Win32-API <see langword="SetLastError" /> aufruft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-198">Indicates whether the callee calls the <see langword="SetLastError" /> Win32 API function before returning from the attributed method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-199">`true` um anzugeben, dass der aufgerufene angerufen `SetLastError`ist, andernfalls `false`.</span><span class="sxs-lookup"><span data-stu-id="2986c-199">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="2986c-200">Der Standardwert ist `false`.</span><span class="sxs-lookup"><span data-stu-id="2986c-200">The default is `false`.</span></span>  
  
 <span data-ttu-id="2986c-201">Ruft die Laufzeit-Marshaller `GetLastError` sowie den Wert zurückgegeben wird, um zu verhindern, die durch andere API-Aufrufe überschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="2986c-201">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="2986c-202">Sie können den Fehlercode abrufen, durch den Aufruf <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span><span class="sxs-lookup"><span data-stu-id="2986c-202">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-203">In einigen Fällen Visual Basic-Entwickler verwenden die <xref:System.Runtime.InteropServices.DllImportAttribute>, anstatt die `Declare` Anweisung ein, um eine DLL-Funktion in verwaltetem Code zu definieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-203">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2986c-204">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> Feld ist ein solcher Fall.</span><span class="sxs-lookup"><span data-stu-id="2986c-204">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-205">Aktiviert bzw. deaktiviert das Auslösen einer Ausnahme bei einem nicht zuzuordnenden Unicode-Zeichen, das in das ANSI-Zeichen „?“ konvertiert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-205">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-206">`true` um anzugeben, dass jedes Mal eine Ausnahme ausgelöst wird, wenn der Interop-Marshaller ein zuzuordnendes Zeichen konvertiert. `false` gibt an, dass die <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Feld ist deaktiviert.</span><span class="sxs-lookup"><span data-stu-id="2986c-206">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="2986c-207">Dieses Feld ist `false` standardmäßig.</span><span class="sxs-lookup"><span data-stu-id="2986c-207">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="2986c-208">Die common Language Runtime konvertiert in ANSI-Zeichen, die alle Unicode-Zeichen, die verwalteten an eine nicht verwaltete Methode ausführen unter Windows 98 oder WindowsMe übergeben</span><span class="sxs-lookup"><span data-stu-id="2986c-208">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="2986c-209">Zuordnung mit ähnlichen Zeichen ermöglicht den Interop-Marshaller eine schließen-Zeichen angeben, wenn keine genaue Übereinstimmung vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="2986c-209">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="2986c-210">Beispielsweise konvertiert der Marshaller das copyright Unicode-Zeichen 'c' nicht verwaltete Methoden, die ANSI-Zeichen zu akzeptieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-210">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="2986c-211">Einige Zeichen verfügen nicht über eine Darstellung mit ähnlichen Zeichen; Diese Zeichen werden als zuzuordnenden bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="2986c-211">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="2986c-212">Zuzuordnenden Zeichen konvertiert werden in der Regel auf den Standardwert "?" ANSI-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="2986c-212">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2986c-213">Bestimmte Unicode-Zeichen werden in gefährliche Zeichen, z. B. den umgekehrten Schrägstrich konvertiert "\\' Zeichen, die versehentlich auf einen Pfad ändern können.</span><span class="sxs-lookup"><span data-stu-id="2986c-213">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="2986c-214">Durch Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Feld `true`, Sie können das Vorhandensein eines zuzuordnenden Zeichens an den Aufrufer durch Auslösen einer Ausnahme zu signalisieren.</span><span class="sxs-lookup"><span data-stu-id="2986c-214">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2986c-215">Sie können nicht vom bereitgestellten Standardwerte ändern die <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> und <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Felder, wenn einem verwalteten Array, dessen Elemente ANSI-Zeichen oder LPSTRs sind an eine nicht verwaltete sicheren Array übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="2986c-215">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="2986c-216">Zuordnung mit ähnlichen Zeichen ist immer aktiviert und wird keine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="2986c-216">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="2986c-217">Denken Sie daran, dass diese Kombination Ihrer Sicherheitsmodell gefährden kann.</span><span class="sxs-lookup"><span data-stu-id="2986c-217">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2986c-218">In einigen Fällen Visual Basic-Entwickler verwenden die <xref:System.Runtime.InteropServices.DllImportAttribute> zum Definieren einer DLL-Funktion in verwaltetem Code, anstatt die `Declare` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="2986c-218">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="2986c-219">Festlegen der <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> Feld ist ein solcher Fall.</span><span class="sxs-lookup"><span data-stu-id="2986c-219">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="2986c-220">Im folgende Beispiel wird gezeigt, wie die strengste anzuwendende Zeichen Zuordnung Sicherheit plattformspezifische aufrufen Methodendefinitionen durch Angeben des ANSI-Zeichensatzes, bewährte Zuordnungsverhalten deaktivieren und eine Ausnahme auszulösen, auf dem nicht zugeordneten Unicode-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="2986c-220">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2986c-221">Ruft den Namen der DLL-Datei ab, die den Einstiegspunkt enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-221">Gets the name of the DLL file that contains the entry point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2986c-222">Der Name der DLL-Datei, die den Einstiegspunkt enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2986c-222">The name of the DLL file that contains the entry point.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2986c-223">Sie können einen vollständigen oder relativen Pfad angeben.</span><span class="sxs-lookup"><span data-stu-id="2986c-223">You can provide a full or relative path.</span></span> <span data-ttu-id="2986c-224">Wenn Sie keinen Pfad angeben, muss die DLL im aktuellen Pfad zur Laufzeit sein, wenn die DLL anderweitig geladen wird.</span><span class="sxs-lookup"><span data-stu-id="2986c-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="2986c-225">Denken Sie jedoch, dass mit einem vollqualifizierten Pfad Ungenauigkeit führen kann, falls die DLL verschoben wird.</span><span class="sxs-lookup"><span data-stu-id="2986c-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
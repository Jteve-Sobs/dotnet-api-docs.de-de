<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0500a6c0b16519278b21516985c9641cfd8c5ba4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58701378" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Hiermit können Sie das physikalische Layout der Datenfelder einer Klasse oder Struktur im Speicher steuern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können dieses Attribut auf Klassen oder Strukturen anwenden.  
  
 Die common Language Runtime steuert das physische Layout der Datenfelder einer Klasse oder Struktur im verwalteten Speicher. Wenn Sie den Typ von nicht verwaltetem Code übergeben möchten, Sie können jedoch die <xref:System.Runtime.InteropServices.StructLayoutAttribute> Attribut, das nicht verwaltete Layout des Typs steuern. Das Attribut mit <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> müssen dadurch die Member sequenziell in der Reihenfolge angeordnet werden, sie angezeigt werden. Für blitfähigen Typen <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> steuert des Layouts im verwalteten Speicher und das Layout in nicht verwalteten Speicher. Für nicht blitfähige Typen steuert er das Layout, wenn die Klasse oder Struktur von nicht verwaltetem Code gemarshallt wird, aber das Layout im verwalteten Speicher nicht steuert. Das Attribut mit <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> um die genaue Position der einzelnen Datenmember zu steuern. Dies wirkt sich sowohl verwaltete als auch nicht verwaltete Layout für blitfähige und nicht blitfähige Typen. Mithilfe von <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> erfordert die Verwendung der <xref:System.Runtime.InteropServices.FieldOffsetAttribute> Attribut, um die Position jedes Felds innerhalb des Typs anzugeben.  
  
 Anwenden von c#, Visual Basic und C++-Compiler die <xref:System.Runtime.InteropServices.LayoutKind.Sequential> Layoutwert standardmäßig auf Strukturen. Für Klassen, Sie müssen anwenden, die <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> explizit. Die [Tlbimp.exe (Type Library Importer-Tool)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) gilt auch für die <xref:System.Runtime.InteropServices.StructLayoutAttribute> -Attribut; es gilt immer der <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> Wert, wenn es sich um eine Typbibliothek importiert.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine verwaltete Deklaration der `GetSystemTime` funktionieren und definiert `MySystemTime` Klasse mit <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> Layout. `GetSystemTime` Ruft die Systemzeit, und gibt in der Konsole aus.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Type Library Importer-Tool)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Eine 16-Bit-Ganzzahl, die einen der <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Werte darstellt, der angibt, wie die Klasse oder Struktur angeordnet werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Enumerationsmember.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor nimmt eine zugrunde liegende 16-Bit-Ganzzahl, die jeder darstellt <xref:System.Runtime.InteropServices.LayoutKind> -Enumerationsmember. Die [Tlbimp.exe (Type Library Importer-Tool)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) wird dieser Konstruktor verwendet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Type Library Importer-Tool)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Einer der Enumerationswerte, der angibt, wie die Klasse oder Struktur angeordnet werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Enumerationsmember.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie für lesbaren Code, der weniger fehleranfällig ist diesen Konstruktor immer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob Zeichenfolgendatenfelder in der Klasse standardmäßig als <see langword="LPWSTR" /> oder als <see langword="LPSTR" /> gemarshallt werden müssen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `CharSet` Feld nastaven NA hodnotu <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, alle Argumente in Unicode-Zeichen konvertiert werden (`LPWSTR`), bevor sie an die nicht verwaltete Implementierung übergeben werden. Wenn das Feld, um festgelegt ist <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, die Zeichenfolgen werden in ANSI-Zeichenfolgen konvertiert (`LPSTR`). Wenn die `CharSet` Feld nastaven NA hodnotu <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, die Konvertierung ist plattformabhängig (ANSI unter Windows 98 und Windows Me und Unicode in höheren Versionen).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Steuert die Ausrichtung der Datenfelder einer Klasse oder Struktur im Speicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Feld steuert die Ausrichtung eines Typs Felder im Arbeitsspeicher.  Sie wirkt sich auf beide <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> und <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>. Standardmäßig ist der Wert 0 (null), der angibt, der Standardkomprimierungsgröße für die aktuelle Plattform. Der Wert des <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> muss 0, 1, 2, 4, 8, 16, 32, 64 oder 128 sein:  
  
 Die Felder einer Typinstanz werden ausgerichtet, mithilfe der folgenden Regeln:  
  
-   Die Ausrichtung des Typs ist die Größe des größten Elements (1, 2, 4, 8, usw., Byte) oder die angegebenen Packen Größe, welcher Wert kleiner ist.  
  
-   Jedes Feld muss mit Feldern vom seine eigene Größe ausgerichtet sind (1, 2, 4, 8, usw., Byte) oder die Ausrichtung des Typs, welcher Wert kleiner ist.  Da die standardausrichtung des Typs, die Größe des größten Elements, die größer als oder gleich allen anderen Feldlängen ist ist, bedeutet dies normalerweise, dass die Felder nach ihrer Größe ausgerichtet sind. Z. B. auch wenn das größte Feld eines Typs eine 64-Bit-Ganzzahl (8 Byte) oder das Feld Pack ist auf 8 festgelegt ist <xref:System.Byte> Felder an 1-Byte-Grenzen ausgerichtet <xref:System.Int16> Felder auf 2-Byte-Begrenzungen ausgerichtet und <xref:System.Int32> Felder auf 4-Byte-Grenzen ausgerichtet.  
  
-   Auffüllung wird zwischen den Feldern, um die ausrichtungsanforderungen erfüllen, hinzugefügt.  
  
 Betrachten Sie beispielsweise die folgende Struktur besteht aus zwei <xref:System.Byte> -Felder und ein <xref:System.Int32> Feld bei einer Verwendung mit verschiedenen Werten für die <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Feld.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Um die C#-Beispiele erfolgreich zu kompilieren, geben Sie die `/unsafe` Compilerschalter.  
  
 Wenn Sie die Standardkomprimierungsgröße angeben, wird die Größe der Struktur 8 Bytes. Die zwei Bytes belegen die ersten zwei Bytes an Arbeitsspeicher, da Bytes an ein-Byte-Begrenzungen ausgerichtet werden müssen. Da die standardausrichtung des Typs 4 Bytes, also die Größe des größten Felder ist, `i3`, es gibt zwei Byte-Auffüllung, gefolgt von dem Ganzzahlfeld.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> festgelegt ist, 2, beträgt die Größe der Struktur 6 Bytes. Belegen, die zwei Bytes die ersten zwei Bytes an Arbeitsspeicher. Da Felder jetzt an 2-Byte-Grenzen ausgerichtet sind, wird keine Auffüllung zwischen dem zweiten Byte und die ganze Zahl.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> festgelegt ist, 4, die Größe der Struktur ist der gleiche wie in der Standardfall, in den Typ der Ausrichtung von der Größe der dem größten Feld definiert wurde, `i3`, dies ist 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> festgelegt ist auf 8 fest, die Größe der Struktur ist immer noch in der Standardeinstellung identisch Fall, da die `i3` Feld ausgerichtet, auf eine 4-Byte-Grenze, die kleiner als die 8-Byte-Grenze, die das Feld "Pack" angegeben ist.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Um ein weiteres Beispiel nutzen zu können, sollten Sie in der folgenden Struktur besteht aus zwei Byte-Feldern, eine 32-Bit-Ganzzahl mit Vorzeichen-Feld, einen einzelnen Elementen bestehendes Bytearray und ein decimal-Wert. Mit die Standardkomprimierungsgröße ist die Größe der Struktur 28 Bytes. Die zwei Bytes belegen die ersten zwei Bytes an Arbeitsspeicher, gefolgt von zwei Byte-Auffüllung, gefolgt von der ganzen Zahl. Als Nächstes wird das 1-Byte-Array, gefolgt von drei Bytes Abstand. Zum Schluss die <xref:System.Decimal> d5, Feld, die von der 4-Byte-Begrenzung ausgerichtet werden, da ein decimal-Wert von vier besteht aus <xref:System.Int32> Felder, damit die Ausrichtung auf der Größe des größten basierend ihrer Felder und nicht auf die Größe des der <xref:System.Decimal> Struktur als Ganzes.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> festgelegt ist, 2, ist die Größe der Struktur 24 Bytes. Im Vergleich mit die standardausrichtung wurden die beiden Bytes der Auffüllung zwischen den beiden Bytes und die ganze Zahl entfernt, da des Typs Ausrichtung jetzt 4 statt 2 ist. Und die drei Bytes Abstand nach dem `a4` ersetzt wurden um ein Byte der Auffüllung, da `d5` jetzt auf einen 2-Byte-Begrenzung statt 4-Byte-Begrenzung ausgerichtet.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> festgelegt ist auf 8 fest, die Größe der Struktur ist der gleiche wie in der Standardfall, da alle ausrichtungsanforderungen in dieser Struktur kleiner als 8 sind.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 Die <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Feld wird häufig verwendet, wenn Schreibvorgänge im Netzwerk und Strukturen, die während der Datenträger exportiert werden. Das Feld wird auch häufig verwendet, während der Plattformaufrufe aufrufen und Interop-Operationen.  
  
 In einigen Fällen wird das Feld verwendet, um arbeitsspeicheranforderungen zu reduzieren, indem Sie eine strengere Komprimierungsgröße erzeugen. Diese Verwendung erfordert allerdings sorgfältigen Einhaltung der tatsächlichen Hardware-Einschränkungen, und möglicherweise sogar verringert die Leistung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die absolute Größe der Klasse oder Struktur an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Feld muss gleich oder größer als die Gesamtgröße in Bytes, der die Member der Klasse oder Struktur sein. Dieses Feld ist in erster Linie für Compiler-Autoren, die den durch eine Struktur für den direkten, nicht verwalteten Zugriff belegten Arbeitsspeicher erweitern möchten. Beispielsweise können Sie dieses Feld verwenden, bei der Verwendung von Unions, die nicht in den Metadaten direkt dargestellt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Wert ab, der angibt, wie die Klasse oder Struktur angeordnet ist.</summary>
        <value>Einer der Enumerationswerte, der angibt, wie die Klasse oder Struktur angeordnet wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
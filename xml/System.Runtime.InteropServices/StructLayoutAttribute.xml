<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a69017acc61a1f164de80fe34260c026352aaa43" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86762990" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Hiermit können Sie das physikalische Layout der Datenfelder einer Klasse oder Struktur im Speicher steuern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können dieses Attribut auf Klassen oder Strukturen anwenden.  
  
 Der Common Language Runtime steuert das physische Layout der Datenfelder einer Klasse oder Struktur im verwalteten Arbeitsspeicher. Wenn Sie den-Typ jedoch an nicht verwalteten Code übergeben möchten, können Sie das-Attribut verwenden, <xref:System.Runtime.InteropServices.StructLayoutAttribute> um das nicht verwaltete Layout des Typs zu steuern. Verwenden Sie das-Attribut mit <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> , um zu erzwingen, dass die Member nacheinander in der Reihenfolge angeordnet werden, in der Sie angezeigt werden. <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>Steuert für blitfähige Typen sowohl das Layout im verwalteten Speicher als auch das Layout im nicht verwalteten Speicher. Bei nicht blitfähigen Typen steuert das Layout das Layout, wenn die Klasse oder Struktur an nicht verwalteten Code gemarshallt wird, aber das Layout im verwalteten Speicher nicht steuert. Verwenden Sie das-Attribut mit <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> , um die genaue Position der einzelnen Datenmember zu steuern. Dies wirkt sich sowohl auf das verwaltete als auch auf das nicht verwaltete Layout für blitfähige und nicht blitfähige Typen aus. Die Verwendung <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> von erfordert, dass Sie das- <xref:System.Runtime.InteropServices.FieldOffsetAttribute> Attribut verwenden, um die Position jedes Felds innerhalb des Typs anzugeben.  
  
 C#-, Visual Basic-und C++-Compiler wenden den <xref:System.Runtime.InteropServices.LayoutKind.Sequential> Layoutwert standardmäßig auf Strukturen an. Für Klassen müssen Sie den <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> Wert explizit anwenden. Der [Tlbimp.exe (Typbibliotheks Import)](/dotnet/framework/tools/tlbimp-exe-type-library-importer) wendet auch das- <xref:System.Runtime.InteropServices.StructLayoutAttribute> Attribut an <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> . der Wert wird beim Importieren einer Typbibliothek immer angewendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine verwaltete Deklaration der `GetSystemTime` -Funktion veranschaulicht und die- `MySystemTime` Klasse mit <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> Layout definiert. `GetSystemTime` Ruft die Systemzeit ab und druckt Sie in der Konsole.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/tools/tlbimp-exe-type-library-importer">Tlbimp.exe (Type Library Importer-Tool)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Eine 16-Bit-Ganzzahl, die einen der <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Werte darstellt, der angibt, wie die Klasse oder Struktur angeordnet werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Enumerationsmember.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor nimmt eine zugrunde liegende 16-Bit-Ganzzahl an, die jedes <xref:System.Runtime.InteropServices.LayoutKind> Enumerationsmember darstellt. Der [Tlbimp.exe (Typbibliotheks Import)](/dotnet/framework/tools/tlbimp-exe-type-library-importer) verwendet diesen Konstruktor.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="/dotnet/framework/tools/tlbimp-exe-type-library-importer">Tlbimp.exe (Type Library Importer-Tool)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Einer der Enumerationswerte, der angibt, wie die Klasse oder Struktur angeordnet werden soll.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Enumerationsmember.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie für lesbaren Code, der weniger fehleranfällig ist, immer diesen Konstruktor.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, ob Zeichenfolgendatenfelder in der Klasse standardmäßig als <see langword="LPWSTR" /> oder als <see langword="LPSTR" /> gemarshallt werden müssen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das `CharSet` Feld auf festgelegt ist <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType> , werden alle Zeichen folgen Argumente in Unicode-Zeichen () konvertiert, `LPWSTR` bevor Sie an die nicht verwaltete Implementierung übermittelt werden. Wenn das Feld auf festgelegt ist <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType> , werden die Zeichen folgen in ANSI-Zeichen folgen ( `LPSTR` ) konvertiert. Wenn das `CharSet` Feld auf festgelegt ist <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType> , ist die Konvertierung plattformabhängig (ANSI unter Windows 98 und Windows Me und Unicode in späteren Versionen).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Steuert die Ausrichtung der Datenfelder einer Klasse oder Struktur im Speicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> -Feld steuert die Ausrichtung der Felder eines Typs im Arbeitsspeicher.  Dies wirkt sich auf <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> und aus <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> . Standardmäßig ist der Wert 0 (null), der die Standard Komprimierungs Größe für die aktuelle Plattform angibt. Der Wert von <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> muss 0, 1, 2, 4, 8, 16, 32, 64 oder 128 lauten:  
  
 Die Felder einer Typinstanz werden mithilfe der folgenden Regeln ausgerichtet:  
  
-   Die Ausrichtung des Typs entspricht der Größe des größten Elements (1, 2, 4, 8 usw., Bytes) oder der angegebenen Komprimierungs Größe, je nachdem, welcher Wert kleiner ist.  
  
-   Jedes Feld muss sich an Feldern seiner eigenen Größe (1, 2, 4, 8 usw., Bytes) oder der Ausrichtung des Typs ausrichten, je nachdem, welcher Wert kleiner ist.  Da die Standardausrichtung des Typs die Größe des größten Elements ist, das größer als oder gleich allen anderen Feldlängen ist, bedeutet dies in der Regel, dass die Felder nach ihrer Größe ausgerichtet werden. Wenn das größte Feld in einem Typ z. b. eine 64-Bit-Ganzzahl (8 Byte) oder das Feld "Pack" auf 8 festgelegt ist, werden <xref:System.Byte> Felder an 1-Byte-Begrenzungen ausgerichtet, <xref:System.Int16> Felder an 2-Byte-Begrenzungen und <xref:System.Int32> Felder werden an 4-Byte-Grenzen ausgerichtet.  
  
-   Die Auffüll Zeichen werden zwischen Feldern hinzugefügt, um die Ausrichtungs Anforderungen zu erfüllen.  
  
 Sehen Sie sich beispielsweise die folgende Struktur an, die aus zwei <xref:System.Byte> Feldern und einem <xref:System.Int32> Feld besteht, wenn Sie mit verschiedenen Werten für das <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Feld verwendet wird.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Wenn Sie die c#-Beispiele erfolgreich kompilieren möchten, müssen Sie den- `/unsafe` Compilerschalter angeben.  
  
 Wenn Sie die Standard Packgröße angeben, beträgt die Größe der Struktur 8 Bytes. Die zwei Bytes belegen die ersten zwei Bytes des Arbeitsspeichers, da Bytes an den einzelnen Byte Grenzen ausgerichtet werden müssen. Da die Standardausrichtung des Typs 4 Bytes ist, d. h. die Größe der größten Felder, `i3` gibt es zwei Byte Auffüll Zeichen, gefolgt vom ganzzahligen Feld.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> auf 2 festgelegt ist, beträgt die Größe der-Struktur 6 Bytes. Wie zuvor belegen die beiden Bytes die ersten zwei Bytes im Arbeitsspeicher. Da Felder nun an 2-Byte-Begrenzungen ausgerichtet sind, gibt es keine Auffüll Zeichen zwischen dem zweiten Byte und der ganzen Zahl.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> auf 4 festgelegt ist, ist die Größe der Struktur identisch mit der im Standardfall, wobei die Ausrichtung des Typs durch die Größe des größten Felds definiert wurde, `i3` das 4 ist.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> auf 8 festgelegt ist, ist die Größe der-Struktur gleich wie im Standardfall, da das `i3` Feld an einer 4-Byte-Begrenzung ausgerichtet ist, die kleiner als die durch das Pack-Feld angegebene 8-Byte-Grenze ist.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Wenn Sie ein weiteres Beispiel verwenden möchten, betrachten Sie die folgende Struktur, die aus zwei Byte Feldern, einem 1 32-Bit-Ganzzahl-Feld mit Vorzeichen, einem Einzelelement-Bytearray und einem Dezimalwert besteht. Bei der Standard Komprimierungs Größe beträgt die Größe der Struktur 28 bytes. Die zwei Bytes belegen die ersten zwei Bytes des Arbeitsspeichers, gefolgt von zwei Byte Auffüll Zeichen, gefolgt von der ganzen Zahl. Der nächste Schritt ist das 1-Byte-Array, gefolgt von drei Byte Auffüll Zeichen. Schließlich richtet sich das <xref:System.Decimal> Feld "D5" an einer 4-Byte-Grenze aus, da ein Dezimalwert aus vier <xref:System.Int32> Feldern besteht. seine Ausrichtung basiert also auf der Größe der größten der Felder, nicht auf der Größe der <xref:System.Decimal> Struktur als Ganzes.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> auf 2 festgelegt ist, beträgt die Größe der-Struktur 24 Bytes. Im Vergleich zur Standardausrichtung wurden die zwei Bytes der Auffüll Zeichen zwischen den beiden Bytes und der ganzen Zahl entfernt, da die Ausrichtung des Typs jetzt 4 anstelle von 2 ist. Und die drei Byte der Auffüll Zeichen nach wurden `a4` durch ein Byte von Auffüll Zeichen ersetzt, da sich `d5` nun an einer 2-Byte-Grenze und nicht an einer 4-Byte-Begrenzung richtet.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Wenn <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> auf 8 festgelegt ist, entspricht die Größe der Struktur dem Standardfall, da alle Ausrichtungs Anforderungen in dieser Struktur kleiner als 8 sind.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 Das <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Feld wird häufig verwendet, wenn Strukturen bei Datenträger-und Netzwerk Schreibvorgängen exportiert werden. Das Feld wird auch häufig bei Platt Form aufrufen und Interop-Vorgängen verwendet.  
  
 Gelegentlich wird das-Feld verwendet, um die Arbeitsspeicher Anforderungen zu reduzieren, indem eine strengere Verpackungsgröße erzeugt wird. Diese Verwendung erfordert jedoch eine sorgfältige Überlegung tatsächlicher Hardware Einschränkungen und beeinträchtigt möglicherweise die Leistung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die absolute Größe der Klasse oder Struktur an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Feld muss gleich oder größer als die Gesamtgröße (in Bytes) der Member der Klasse oder Struktur sein. Dieses Feld ist in erster Linie für Compilerwriter gedacht, die den von einer Struktur belegten Arbeitsspeicher für direkten, nicht verwalteten Zugriff erweitern möchten. Beispielsweise können Sie dieses Feld verwenden, wenn Sie mit Unions arbeiten, die nicht direkt in den Metadaten dargestellt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Runtime.InteropServices.LayoutKind" />-Wert ab, der angibt, wie die Klasse oder Struktur angeordnet ist.</summary>
        <value>Einer der Enumerationswerte, der angibt, wie die Klasse oder Struktur angeordnet wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

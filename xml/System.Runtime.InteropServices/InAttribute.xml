<Type Name="InAttribute" FullName="System.Runtime.InteropServices.InAttribute">
  <TypeSignature Language="C#" Value="public sealed class InAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.InAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ccda9-101">Gibt an, dass Daten vom Aufrufer an den Aufgerufenen, aber nicht wieder an den Aufrufer gemarshallt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ccda9-101">Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda9-102">Sie können dieses Attribut auf Parameter anwenden.</span><span class="sxs-lookup"><span data-stu-id="ccda9-102">You can apply this attribute to parameters.</span></span>  
  
 <span data-ttu-id="ccda9-103">Die <xref:System.Runtime.InteropServices.InAttribute> ist optional.</span><span class="sxs-lookup"><span data-stu-id="ccda9-103">The <xref:System.Runtime.InteropServices.InAttribute> is optional.</span></span> <span data-ttu-id="ccda9-104">Das Attribut wird unterstützt, für COM-Interop und Plattformaufrufe nur.</span><span class="sxs-lookup"><span data-stu-id="ccda9-104">The attribute is supported for COM interop and platform invoke only.</span></span> <span data-ttu-id="ccda9-105">In Ermangelung explizite Einstellungen vorausgesetzt der Interop-Marshaller Regeln basiert auf dem Parameter, Typ gibt an, ob der Parameter als Verweis oder als Wert übergeben wird, und gibt an, ob der Typ für Blitvorgänge geeigneter oder blitfähige ist.</span><span class="sxs-lookup"><span data-stu-id="ccda9-105">In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable.</span></span> <span data-ttu-id="ccda9-106">Z. B. die <xref:System.Text.StringBuilder> Klasse ist immer werden als In/Out und wird davon ausgegangen, dass ein Array von Zeichenfolgen nach Wert übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="ccda9-106">For example, the <xref:System.Text.StringBuilder> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</span></span>  
  
 <span data-ttu-id="ccda9-107">Sie können nicht angewendet werden die <xref:System.Runtime.InteropServices.InAttribute> auf einen Parameter mit dem C#-geändert-formatiert `out` Schlüsselwort.</span><span class="sxs-lookup"><span data-stu-id="ccda9-107">You cannot apply the <xref:System.Runtime.InteropServices.InAttribute> to a parameter modified with the C#-styled `out` keyword.</span></span> <span data-ttu-id="ccda9-108">Zur Vermeidung verwirrend erscheinen die `In` -Schlüsselwort in Visual Basic mit der <xref:System.Runtime.InteropServices.InAttribute>, minus-Attribut, verwenden die `<[In]>` Formular mit Klammern um das Attribut.</span><span class="sxs-lookup"><span data-stu-id="ccda9-108">To avoid confusing the `In` keyword in Visual Basic with the <xref:System.Runtime.InteropServices.InAttribute>, minus Attribute, use the `<[In]>` form with brackets around the attribute.</span></span>  
  
 <span data-ttu-id="ccda9-109">Kombiniert die <xref:System.Runtime.InteropServices.InAttribute> und <xref:System.Runtime.InteropServices.OutAttribute> ist besonders nützlich, wenn auf Arrays angewendet und formatiert, nicht blitfähige Typen.</span><span class="sxs-lookup"><span data-stu-id="ccda9-109">Combining the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> is particularly useful when applied to arrays and formatted, non-blittable types.</span></span> <span data-ttu-id="ccda9-110">Aufrufer finden Sie in der Änderungen, die eine aufrufende Instanz auf diese Typen vornimmt, nur, wenn Sie beide Attribute anwenden.</span><span class="sxs-lookup"><span data-stu-id="ccda9-110">Callers see the changes a callee makes to these types only when you apply both attributes.</span></span> <span data-ttu-id="ccda9-111">Da diese Typen erforderlich sind, während des Marshallens kopieren, können Sie <xref:System.Runtime.InteropServices.InAttribute> und <xref:System.Runtime.InteropServices.OutAttribute> um unnötige Kopien zu reduzieren.</span><span class="sxs-lookup"><span data-stu-id="ccda9-111">Since these types require copying during marshaling, you can use <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to reduce unnecessary copies.</span></span>  
  
 <span data-ttu-id="ccda9-112">Weitere Informationen zu den Auswirkungen der <xref:System.Runtime.InteropServices.InAttribute> zum Marshallen von Verhalten, finden Sie unter [direktionale Attribute](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span><span class="sxs-lookup"><span data-stu-id="ccda9-112">For more information on the effect of <xref:System.Runtime.InteropServices.InAttribute> on marshaling behavior, see [Directional Attributes](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccda9-113">Im folgende Beispiel wird gezeigt, wie zum Anwenden der <xref:System.Runtime.InteropServices.InAttribute> und <xref:System.Runtime.InteropServices.OutAttribute> in einem Plattformaufrufe Prototyp, den ein Array als Parameter übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="ccda9-113">The following example shows how to apply the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to a platform invoke prototype that passes an array as a parameter.</span></span> <span data-ttu-id="ccda9-114">Die Kombination der direktionalen Attribute ermöglicht den Aufrufer, die von der aufgerufenen Instanz vorgenommenen Änderungen finden Sie unter.</span><span class="sxs-lookup"><span data-stu-id="ccda9-114">The combination of directional attributes allows the caller to see the changes made by the callee.</span></span>  
  
 [!code-cpp[Interop InOutParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR/Interop InOutParameters/CPP/inout.cpp#1)]
 [!code-csharp[Interop InOutParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR/Interop InOutParameters/CS/inout.cs#1)]
 [!code-vb[Interop InOutParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Interop InOutParameters/VB/inout.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.OutAttribute" />
    <altmember cref="T:System.Text.StringBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.InAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ccda9-115">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.InAttribute" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="ccda9-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="081c61ea90612c8fde40af8e49e7e3af04bca95a" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52733901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b0354-101">Stellt Methoden für die Interoperabilität mit <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> und <see cref="T:System.ReadOnlySpan`1" /> bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0354-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-102">Der Typ der Elemente in der Spanne schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-102">The type of items in the read-only span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="b0354-103">Der zu konvertierende Quellslice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-103">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-104">Wandelt ein <see cref="T:System.ReadOnlySpan`1" /> eines primitiven Typs, <paramref name="T" />, in ein <see langword="ReadOnlySpan&lt;Byte&gt;" /> um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-105">Der schreibgeschützte Span des Typs <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-105">A read-only span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-106">`T` darf keine Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="b0354-107">`T` wird zur Laufzeit überprüft, um die typsicherheit beibehalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-108">
            <paramref name="T" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-108">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="b0354-109">Die <see cref="P:System.ReadOnlySpan`1.Length" />-Eigenschaft des neuen <see cref="T:System.ReadOnlySpan`1" /> würde <see cref="F:System.Int32.MaxValue" /> überschreiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-110">Der Typ der Elemente in der Spanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-110">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="b0354-111">Der zu konvertierende Quellslice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-111">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-112">Wandelt ein <see cref="T:System.Span`1" /> eines primitiven Typs, <paramref name="T" />, in ein <see langword="Span&lt;Byte&gt;" /> um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-113">Ein Span des Typs <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-113">A span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-114">`T` darf keine Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="b0354-115">`T` wird zur Laufzeit überprüft, um die typsicherheit beibehalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-116">
            <paramref name="T" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-116">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="b0354-117">Die <see cref="P:System.Span`1.Length" />-Eigenschaft des neuen <see cref="T:System.Span`1" /> würde <see cref="F:System.Int32.MaxValue" /> überschreiten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-118">Der Typ der Elemente in der schreibgeschützten Speicher-Puffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-118">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="b0354-119">Der schreibgeschützte Speicherpuffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-119">The read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-120">Erstellt eine <see cref="T:System.Memory`1" />-Instanz aus einem <see cref="T:System.ReadOnlyMemory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-121">Ein Speicherblock, der denselben Speicher darstellt wie <see cref="T:System.ReadOnlyMemory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-122">Diese Methode muss mit äußerster Vorsicht verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b0354-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="b0354-123"><xref:System.ReadOnlyMemory%601> wird verwendet, um darzustellen, unveränderliche Daten und andere Speicher, der nicht geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="b0354-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="b0354-124"><xref:System.Memory%601> von dieser Methode erstellte Instanzen sollte, nicht geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="b0354-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="b0354-125">Der Zweck dieser Methode ist, können Variablen mit <xref:System.Memory%601> jedoch nur für Lesevorgänge verwendet, zum Speichern einer <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="b0354-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="b0354-126">Der Typ, der die Quellspanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-126">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="b0354-127">Der Typ, der die zielspanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-127">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="b0354-128">Der zu konvertierende Quellslice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-128">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-129">Wandelt einen schreibgeschützten Span eines primitiven Typs in einen schreibgeschützten Span eines anderen primitiven Typs um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-130">Die konvertierte schreibgeschützte Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-130">The converted read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-131">Weder `TFrom` noch `TTo` können Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="b0354-132">`TFrom` und `TTo` werden zur Laufzeit überprüft, um die typsicherheit beibehalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="b0354-133">Diese Methode wird nur auf Plattformen, die falsch ausgerichtete Speicherzugriff unterstützen unterstützt, oder wenn der Speicher blockieren mithilfe anderer Methoden ausgerichtet ist.</span><span class="sxs-lookup"><span data-stu-id="b0354-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-134">
            <paramref name="TFrom" /> oder <paramref name="TTo" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-134">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="b0354-135">Der Typ, der die Quellspanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-135">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="b0354-136">Der Typ, der die zielspanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-136">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="b0354-137">Der zu konvertierende Quellslice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-137">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-138">Wandelt einen Span eines primitiven Typs in einen Span eines anderen primitiven Typs um.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-138">Casts a span of one primitive type to a span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-139">Der konvertierte Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-139">The converted span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-140">Weder `TFrom` noch `TTo` können Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="b0354-141">`TFrom` und `TTo` werden zur Laufzeit überprüft, um die typsicherheit beibehalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="b0354-142">Die Umwandlung erfolgt in einem nicht geprüften Kontext.</span><span class="sxs-lookup"><span data-stu-id="b0354-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="b0354-143">Wenn der Bereich von `TTo` ist kleiner als der Bereich von `TFrom`, können Datenverluste auftreten.</span><span class="sxs-lookup"><span data-stu-id="b0354-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="b0354-144">Z. B. wenn `TFrom` ist <xref:System.Int64>möglich von der `ReadOnlySpan<Int32>` ist 0x100001111110F0F, und `TTo` ist <xref:System.Int32>, der resultierende Wert wird 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="b0354-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="b0354-145">Diese Methode wird nur auf Plattformen, die falsch ausgerichtete Speicherzugriff unterstützen unterstützt, oder wenn der Speicher blockieren mithilfe anderer Methoden ausgerichtet ist.</span><span class="sxs-lookup"><span data-stu-id="b0354-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-146">
            <paramref name="TFrom" /> oder <paramref name="TTo" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-146">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-147">Der Typ des Arrays.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-147">The type of the array.</span>
          </span>
        </typeparam>
        <param name="array">
          <span data-ttu-id="b0354-148">Das bereits angeheftete Quellarray.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-148">The pre-pinned source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="b0354-149">Der Index von <paramref name="array" />, bei dem der Speicherblock begonnen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-149">The index of <paramref name="array" /> at which to begin the memory block.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="b0354-150">Die Anzahl der Elemente, die in den Speicherblock eingeschlossen werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-150">The number of items to include in the memory block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-151">Erstellt einen neuen Speicherpuffer über dem Abschnitt des bereits angehefteten Zielarrays, der beim Index <paramref name="start" /> beginnt und aus <paramref name="length" />-Elementen besteht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-152">Ein Speicherblock über die angegebenen Elemente von <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-152">A block of memory over the specified elements of <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="b0354-153">Wenn <paramref name="array" /><see langword="null" /> ist, oder wenn <paramref name="start" /> und <paramref name="length" /> 0 sind, gibt die Methode eine <see cref="T:System.Memory`1" /> Instanz von <see cref="System.Memory`1.Length" /> Null wieder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-154">Das Array muss bereits angeheftet werden, bevor diese Methode wird aufgerufen, und dieses Array muss nicht gelöst, während die <xref:System.Memory%601> Puffer, die zurückgegeben wird, nach wie vor.</span><span class="sxs-lookup"><span data-stu-id="b0354-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="b0354-155">Aufrufen dieser Methode für nicht fixierte Bytearray könnte Speicherschäden führen.</span><span class="sxs-lookup"><span data-stu-id="b0354-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="b0354-156">
            <paramref name="array" /> ist kovariant, und den Typ von <paramref name="array" /> ist nicht genau <paramref name="T[]" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-156">
              <paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0354-157">Der <paramref name="start" />- oder der Endindex liegt nicht im Bereich von 0 bis <see cref="P:System.Array.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-158">Der Typ der Datenelemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-158">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="b0354-159">Ein Verweis auf Daten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-159">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="b0354-160">Die Anzahl der <paramref name="T" />-Elemente, die in <paramref name="reference" /> enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-161">Erstellt ein neues schreibgeschützten Span über einen Teil eines regulären verwalteten Objekts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-161">Creates a new read-only span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-162">Ein schreibgeschützter Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-162">A read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-163">Diese Methode kann nützlich sein, wenn Teil eines verwalteten Objekts ein Array fester Größe darstellt.</span><span class="sxs-lookup"><span data-stu-id="b0354-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="b0354-164">Diese Methode sollte mit Vorsicht verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b0354-164">This method should be used with caution.</span></span> <span data-ttu-id="b0354-165">Ist kritisch, da die `length` Argument nicht überprüft.</span><span class="sxs-lookup"><span data-stu-id="b0354-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="b0354-166">Darüber hinaus wird die Lebensdauer der zurückgegebene Spanne nicht für die Sicherheit von Span-fähige Sprachen überprüft.</span><span class="sxs-lookup"><span data-stu-id="b0354-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-167">Der Typ der Datenelemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-167">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="b0354-168">Ein Verweis auf Daten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-168">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="b0354-169">Die Anzahl der <paramref name="T" />-Elemente, die in <paramref name="reference" /> enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-170">Erstellt einen neuen Span über einen Teil eines regulären verwalteten Objekts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-170">Creates a new span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-171">Ein Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-171">A span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-172">Diese Methode kann nützlich sein, wenn Teil eines verwalteten Objekts ein Array fester Größe darstellt.</span><span class="sxs-lookup"><span data-stu-id="b0354-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="b0354-173">Diese Methode sollte mit Vorsicht verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b0354-173">This method should be used with caution.</span></span> <span data-ttu-id="b0354-174">Ist kritisch, da die `length` Argument nicht überprüft.</span><span class="sxs-lookup"><span data-stu-id="b0354-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="b0354-175">Darüber hinaus wird die Lebensdauer der zurückgegebene Spanne nicht für die Sicherheit von Span-fähige Sprachen überprüft.</span><span class="sxs-lookup"><span data-stu-id="b0354-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-176">Der Typ der Elemente in der Spanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-176">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="b0354-177">Der schreibgeschützte Span, aus dem der Verweis abgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-177">The read-only span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-178">Gibt einen Verweis auf das Element des schreibgeschützten Span bei Index 0 zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-178">Returns a reference to the element of the read-only span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-179">Ein Verweis auf das Element bei Index 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-179">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-180">Wenn die schreibgeschützte Spanne leer ist, gibt diese Methode einen Verweis auf den Speicherort, in dem das Element am Index 0 gespeichert worden wären.</span><span class="sxs-lookup"><span data-stu-id="b0354-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="b0354-181">Ein solchen Verweis kann oder möglicherweise nicht `null`.</span><span class="sxs-lookup"><span data-stu-id="b0354-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="b0354-182">Der zurückgegebene Verweis für das Fixieren von verwendet werden kann, aber es muss nicht dereferenziert werden.</span><span class="sxs-lookup"><span data-stu-id="b0354-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-183">Der Typ der Elemente in der Spanne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-183">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="b0354-184">Der Span, aus dem der Verweis abgerufen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-184">The span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-185">Gibt einen Verweis auf das Element des Span bei Index 0 zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-185">Returns a reference to the element of the span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-186">Ein Verweis auf das Element bei Index 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-186">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-187">Wenn die Spanne leer ist, gibt diese Methode einen Verweis auf den Speicherort, in dem das Element am Index 0 gespeichert worden wären.</span><span class="sxs-lookup"><span data-stu-id="b0354-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="b0354-188">Ein solchen Verweis kann oder möglicherweise nicht `null`.</span><span class="sxs-lookup"><span data-stu-id="b0354-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="b0354-189">Der zurückgegebene Verweis für das Fixieren von verwendet werden kann, aber es muss nicht dereferenziert werden.</span><span class="sxs-lookup"><span data-stu-id="b0354-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-190">Der Typ des Elements, das aus der schreibgeschützten Spanne abzurufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-190">The type of the item to retrieve from the read-only span.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="b0354-191">Ein schreibgeschützter Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-191">A read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-192">Liest eine Struktur des Typ</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-192">Reads a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="b0354-193">aus dem schreibgeschützten Bytes-Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-193">out of a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-194">Die aus dem schreibgeschützten Span abgerufene Struktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-194">The structure retrieved from the read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-195">`T` darf keine Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="b0354-196">"Es wird zur Laufzeit überprüft, um typsicherheit zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-197">
            <paramref name="T" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-197">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0354-198">
            <paramref name="source" /> ist kleiner als <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-198">
              <paramref name="source" /> is smaller than <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-199">Der Typ der Elemente in der schreibgeschützten Speicher-Puffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-199">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="b0354-200">Ein schreibgeschützter Speicherpuffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-200">A read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-201">Erstellt eine <see cref="T:System.Collections.Generic.IEnumerable`1" />-Ansicht des angegebenen schreibgeschützten Speicherpuffers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-202">Eine aufzählbare Ansicht von <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-202">An enumerable view of <paramref name="memory" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-203">Mit dieser Methode können Sie einen schreibgeschützten Speicherpuffer in vorhandenen APIs verwendet werden, die einen Parameter vom Typ erfordern <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="b0354-203">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-204">Der Typ der Elemente in der schreibgeschützten Speicher-Puffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-204">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="b0354-205">Ein schreibgeschützter Speicherpuffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-205">A read-only memory buffer.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="b0354-206">Wenn diese Methode ein Ergebnis zurückgibt, enthält sie das Arraysegment, das aus dem zugrunde liegenden schreibgeschützten Speicherpuffer abgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-206">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span>
          </span>
          <span data-ttu-id="b0354-207">Wenn die Methode fehlschlägt, gibt die Methode ein Standardarraysegment zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-207">If the method fails, the method returns a default array segment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-208">Versucht, ein Arraysegment aus dem zugrunde liegenden Speicherpuffer abzurufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-208">Tries to get an array segment from the underlying memory buffer.</span>
          </span>
          <span data-ttu-id="b0354-209">Der Rückgabewert gibt den Erfolg des Vorgangs an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-209">The return value indicates the success of the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-210">
            <see langword="true" />, wenn der Aufruf der Methode erfolgreich ist; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-210">
              <see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-211">Der Typ der Elemente in der schreibgeschützten Speicher-Puffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-211">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="b0354-212">Der Typ des der <see cref="T:System.Buffers.MemoryManager`1" /> abrufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-212">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="b0354-213">Der schreibgeschützten Speicherpuffer, für den der Speicher-Manager abgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-213">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="b0354-214">Wenn die Methode ein Ergebnis zurückgibt, der Manager von <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-214">When the method returns, the manager of <paramref name="memory" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-215">Versucht, den <see cref="T:System.Buffers.MemoryManager`1" /> aus dem zugrunde liegenden schreibgeschützten Speicherpuffer abzurufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-215">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-216">
            <see langword="true" />, wenn die Methode den Speicher-Manager abruft, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-216">
              <see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-217">Der Typ der Elemente in der schreibgeschützten Speicher-Puffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-217">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="b0354-218">Der Typ des der <see cref="T:System.Buffers.MemoryManager`1" /> abrufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-218">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="b0354-219">Der schreibgeschützten Speicherpuffer, für den der Speicher-Manager abgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-219">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="b0354-220">Wenn die Methode ein Ergebnis zurückgibt, der Manager von <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-220">When the method returns, the manager of <paramref name="memory" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="b0354-221">Wenn die Methode ein Ergebnis zurückgibt, der Offset ab dem Beginn des <paramref name="manager" />, den der <paramref name="memory" /> darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-221">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="b0354-222">Wenn die Methode ein Ergebnis zurückgibt, der Länge des <paramref name="manager" />, den der <paramref name="memory" /> darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-222">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-223">Versucht, den <see cref="T:System.Buffers.MemoryManager`1" />, den Startindex und die Länge aus dem zugrunde liegenden schreibgeschützten Speicherpuffer abzurufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-223">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-224">
            <see langword="true" />, wenn die Methode erfolgreich ausgeführt wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-224">
              <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory">
          <span data-ttu-id="b0354-225">Schreibgeschützter Speicher mit einem Block an Zeichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-225">Read-only memory containing a block of characters.</span>
          </span>
        </param>
        <param name="text">
          <span data-ttu-id="b0354-226">Wenn die Methode ein Ergebnis zurückgibt, die Zeichenfolge im Speicherpuffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-226">When the method returns, the string contained in the memory buffer.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="b0354-227">Die Anfangsposition in <paramref name="text" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-227">The starting location in <paramref name="text" />.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="b0354-228">Die Anzahl von Zeichen in <paramref name="text" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-228">The number of characters in <paramref name="text" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-229">Versucht, die zugrunde liegenden Zeichenfolge aus einem <see langword="System.ReadOnlyMemory&lt;Char&gt;" /> abzurufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-229">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-230">
            <see langword="true" />, wenn die Methode die zugrunde liegende Zeichenfolge erfolgreich abruft, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-230">
              <see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-231">Der Typ der Struktur abrufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-231">The type of the structure to retrieve.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="b0354-232">Ein schreibgeschützter Bytes-Span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-232">A read-only span of bytes.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="b0354-233">Wenn die Methode ein Ergebnis zurückgibt, eine Instanz von <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-233">When the method returns, an instance of <paramref name="T" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-234">Versucht, eine Struktur vom Typ <paramref name="T" /> aus einem schreibgeschützten Bereich von Bytes zu lesen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-234">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-235">
            <see langword="true" />, wenn die Methode erfolgreich eine Instanz der Struktur abruft, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-235">
              <see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-236">`T` darf keine Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-236">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="b0354-237">"Es wird zur Laufzeit überprüft, um typsicherheit zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-237">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-238">
            <paramref name="T" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-238">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-239">Der Typ der Struktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-239">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="b0354-240">Der Bytes-Span, der die Struktur enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-240">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="b0354-241">Die Struktur, die in den Span geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-241">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-242">Versucht, eine Struktur vom Typ <paramref name="T" /> in einen Bereich von Bytes zu schreiben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-242">Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0354-243">
            <see langword="true" />, wenn der Schreibvorgang erfolgreich ausgeführt wurde, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-243">
              <see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b0354-244">Die Methode gibt <see langword="false" /> zurück, wenn der Bereich zu klein ist für den <paramref name="T" /> ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-244">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-245">`T` darf keine Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-245">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="b0354-246">"Es wird zur Laufzeit überprüft, um typsicherheit zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-246">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-247">
            <paramref name="TFrom" /> oder <paramref name="TTo" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-247">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0354-248">Der Typ der Struktur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-248">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="b0354-249">Der Bytes-Span, der die Struktur enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-249">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="b0354-250">Die Struktur, die in den Span geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-250">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0354-251">Schreibt eine Struktur vom Typ <paramref name="T" /> in einen Bereich von Bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-251">Writes a structure of type <paramref name="T" /> into a span of bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0354-252">`T` darf keine Zeiger oder Verweise enthalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="b0354-253">"Es wird zur Laufzeit überprüft, um typsicherheit zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="b0354-253">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0354-254">
            <paramref name="T" /> enthält Verweise oder Zeiger.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-254">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0354-255">
            <paramref name="destination" /> ist zu klein für <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0354-255">
              <paramref name="destination" /> is too small to contain <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13c83388836e7692ce136d212905f87ecc88668b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70700895" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt benutzerdefinierte Wrapper für die Behandlung von Methodenaufrufen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Mars Haller stellt eine Brücke zwischen der Funktionalität von alten und neuen Schnittstellen bereit. Das benutzerdefinierte Marshalling bietet die folgenden Vorteile:  
  
-   Client Anwendungen, die für die Arbeit mit einer alten Schnittstelle entworfen wurden, können auch mit Servern arbeiten, die eine neue Schnittstelle implementieren.  
  
-   Dadurch können Client Anwendungen, die mit einer neuen Schnittstelle erstellt wurden, mit Servern arbeiten, die eine alte Schnittstelle implementieren.  
  
 Wenn Sie über eine Schnittstelle verfügen, die unterschiedliche Marshallingverhalten einführt oder die für die Component Object Model (com) verfügbar gemacht wird, können Sie einen benutzerdefinierten Mars Haller entwerfen, anstatt den Interop-Mars Haller zu verwenden. Mithilfe eines benutzerdefinierten Mars Haller können Sie den Unterschied zwischen neuen .NET Framework Komponenten und vorhandenen COM-Komponenten minimieren.  
  
 Angenommen, Sie entwickeln eine verwaltete Schnittstelle mit dem Namen `INew`. Wenn diese Schnittstelle für com über einen Standard COM Callable Wrapper (CCW) verfügbar gemacht wird, verfügt sie über dieselben Methoden wie die verwaltete Schnittstelle und verwendet die marshallingregeln, die in den Interop-Mars Haller integriert sind. Angenommen, eine bekannte com-Schnittstelle mit dem `IOld` Namen bietet bereits die gleiche Funktionalität wie `INew` die-Schnittstelle. Durch Entwerfen eines benutzerdefinierten Mars Haller können Sie eine nicht verwaltete Implementierung von `IOld` bereitstellen, die einfach die Aufrufe an die verwaltete Implementierung `INew` der-Schnittstelle delegiert. Der benutzerdefinierte Mars Haller fungiert daher als Brücke zwischen den verwalteten und nicht verwalteten Schnittstellen.  
  
> [!NOTE]
>  Benutzerdefinierte Mars Haller werden nicht aufgerufen, wenn von verwaltetem Code an nicht verwalteten Code auf einer reinen Dispatch-Schnittstelle aufgerufen wird.  
  
## <a name="defining-the-marshaling-type"></a>Definieren des Marshallingtyps  
 Bevor Sie einen benutzerdefinierten Mars Haller erstellen können, müssen Sie die verwalteten und nicht verwalteten Schnittstellen definieren, die gemarshallt werden. Diese Schnittstellen führen in der Regel dieselbe Funktion aus, werden jedoch unterschiedlich für verwaltete und nicht verwaltete Objekte verfügbar gemacht.  
  
 Ein verwalteter Compiler erzeugt eine verwaltete Schnittstelle aus Metadaten, und die resultierende Schnittstelle sieht wie jede andere verwaltete Schnittstelle aus. Das folgende Beispiel zeigt eine typische-Schnittstelle.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Sie definieren den nicht verwalteten Typ in der Interface Definition Language (IDL) und kompilieren ihn mit dem Microsoft Interface Definition Language (mittlerer l)-Compiler. Sie definieren die Schnittstelle innerhalb einer Bibliotheks Anweisung und weisen ihr eine Schnittstellen-ID mit dem Attribut Universal Unique Identifier (UUID) zu, wie im folgenden Beispiel veranschaulicht.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Der mittlerer l-Compiler erzeugt mehrere Ausgabedateien. Wenn die Schnittstelle in Alter. idl definiert ist, definiert die Ausgabedatei Old_i. c `const` eine Variable mit dem Schnittstellen Bezeichner (Interface Identifier, IID) der Schnittstelle, wie im folgenden Beispiel veranschaulicht.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Die alte h-Datei wird auch von "Mittel l" erstellt. Sie enthält eine C++ Definition der-Schnittstelle, die in den C++ Quellcode aufgenommen werden kann.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementieren der ICustomMarshaler-Schnittstelle  
 Der benutzerdefinierte Mars Haller muss die <xref:System.Runtime.InteropServices.ICustomMarshaler> -Schnittstelle implementieren, um die entsprechenden Wrapper zur Laufzeit bereitzustellen.  
  
 Im folgenden C# Code wird die Basisschnittstelle angezeigt, die von allen benutzerdefinierten Mars Haller implementiert werden muss.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 Die <xref:System.Runtime.InteropServices.ICustomMarshaler> -Schnittstelle enthält Methoden, die Konvertierungs Unterstützung, cleanupunterstützung und Informationen zu den zu marshallten Daten bereitstellen.  
  
|Typ des Vorgangs|ICustomMarshaler-Methode|Beschreibung|  
|-----------------------|-----------------------------|-----------------|  
|Konvertierung (von nativem in verwalteten Code)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Marshalls einen Zeiger auf systemeigene Daten in ein verwaltetes-Objekt. Diese Methode gibt eine benutzerdefinierte Runtime Callable Wrapper (RCW) zurück, die die nicht verwaltete Schnittstelle Mars Hallen kann, die als Argument übermittelt wird. Der Mars Haller sollte eine Instanz des benutzerdefinierten RCW für diesen Typ zurückgeben.|  
|Konvertierung (von verwaltetem zu nativem Code)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Marshalls ein verwaltetes Objekt in einen Zeiger auf systemeigene Daten. Diese Methode gibt eine benutzerdefinierte COM Callable Wrapper (CCW) zurück, die die als Argument übergebenen verwaltete Schnittstelle Mars Hallen kann. Der Mars Haller sollte eine Instanz des benutzerdefinierten CCW für diesen Typ zurückgeben.|  
|Cleanup (von nativem Code)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Ermöglicht dem Mars Haller das Bereinigen der systemeigenen Daten (der CCW), die von der <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> -Methode zurückgegeben werden.|  
|Cleanup (verwalteter Code)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Ermöglicht dem Mars Haller das Bereinigen der verwalteten Daten (RCW), die von der <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> -Methode zurückgegeben werden.|  
|Informationen (Informationen zu nativem Code)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Gibt die Größe der nicht verwalteten Daten zurück, die gemarshallt werden sollen.|  
  
### <a name="conversion"></a>Umwandeln  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Marshalls einen Zeiger auf systemeigene Daten in ein verwaltetes-Objekt. Diese Methode gibt eine benutzerdefinierte Runtime Callable Wrapper (RCW) zurück, die die nicht verwaltete Schnittstelle Mars Hallen kann, die als Argument übermittelt wird. Der Mars Haller sollte eine Instanz des benutzerdefinierten RCW für diesen Typ zurückgeben.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Marshalls ein verwaltetes Objekt in einen Zeiger auf systemeigene Daten. Diese Methode gibt eine benutzerdefinierte COM Callable Wrapper (CCW) zurück, die die als Argument übergebenen verwaltete Schnittstelle Mars Hallen kann. Der Mars Haller sollte eine Instanz des benutzerdefinierten CCW für diesen Typ zurückgeben.  
  
### <a name="cleanup"></a>Bereinigung  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Ermöglicht dem Mars Haller das Bereinigen der systemeigenen Daten (der CCW), die von der <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> -Methode zurückgegeben werden.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Ermöglicht dem Mars Haller das Bereinigen der verwalteten Daten (RCW), die von der <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> -Methode zurückgegeben werden.  
  
### <a name="size-information"></a>Größen Informationen  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Gibt die Größe der nicht verwalteten Daten zurück, die gemarshallt werden sollen.  
  
## <a name="implementing-the-getinstance-method"></a>Implementieren der GetInstance-Methode  
 Neben der Implementierung der- <xref:System.Runtime.InteropServices.ICustomMarshaler> Schnittstelle müssen benutzerdefinierte Marshalling eine `static` Methode mit dem `GetInstance` Namen implementieren, <xref:System.String> die einen als Parameter akzeptiert und den Rückgabetyp <xref:System.Runtime.InteropServices.ICustomMarshaler>aufweist. Diese `static` Methode wird von der COM-Interop-Ebene des Common Language Runtime aufgerufen, um eine Instanz des benutzerdefinierten Mars Haller zu instanziieren. Die an `GetInstance` übergebene Zeichenfolge ist ein Cookie, das von der-Methode zum Anpassen des zurückgegebenen benutzerdefinierten Mars Haller verwendet werden kann.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Anwenden von MarshalAsAttribute  
 Wenn Sie einen benutzerdefinierten Mars Haller verwenden möchten, müssen Sie <xref:System.Runtime.InteropServices.MarshalAsAttribute> das-Attribut auf den Parameter oder das Feld anwenden, das gemarshallt wird.  
  
 Außerdem müssen Sie den <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> -Enumerationswert an den <xref:System.Runtime.InteropServices.MarshalAsAttribute> -Konstruktor übergeben. Außerdem müssen Sie das <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> Feld mit einem der folgenden benannten Parameter angeben:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>(erforderlich): der durch die Assembly qualifizierte Name des benutzerdefinierten Mars Haller. Der Name muss den Namespace und die Klasse des benutzerdefinierten Mars Haller enthalten. Wenn der benutzerdefinierte Mars Haller nicht in der Assembly definiert ist, in der er verwendet wird, müssen Sie den Namen der Assembly angeben, in der er definiert ist.  
  
    > [!NOTE]
    >  Sie können das <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> -Feld anstelle <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> des-Felds verwenden. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>nimmt einen Typ an, der einfacher angegeben werden kann.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>(optional): ein Cookie, das an den benutzerdefinierten Mars Haller übergebenen wird. Sie können das Cookie verwenden, um dem Mars Haller zusätzliche Informationen bereitzustellen. Wenn z. b. derselbe Mars Haller verwendet wird, um eine Reihe von Wrappern bereitzustellen, identifiziert das Cookie einen bestimmten Wrapper. Das Cookie wird an die `GetInstance` -Methode des Mars Haller-Diensts übermittelt.  
  
 Das <xref:System.Runtime.InteropServices.MarshalAsAttribute> -Attribut identifiziert den benutzerdefinierten Mars Haller, sodass er den passenden Wrapper aktivieren kann. Der Interop-Dienst des Common Language Runtime überprüft dann das Attribut und erstellt den benutzerdefinierten Mars Haller, wenn das Argument (Parameter oder Feld) zum ersten Mal gemarshallt werden muss.  
  
 Die Runtime ruft dann die <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> - <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> Methode und die-Methode für den benutzerdefinierten Mars Haller auf, um den korrekten Wrapper zur Behandlung des Aufrufs zu aktivieren.  
  
## <a name="using-a-custom-marshaler"></a>Verwenden eines benutzerdefinierten Mars Haller  
 Wenn der benutzerdefinierte Mars Haller vollständig ist, können Sie ihn als benutzerdefinierten Wrapper für einen bestimmten Typ verwenden. Das folgende Beispiel zeigt die Definition `IUserData` der verwalteten Schnittstelle:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 Im folgenden Beispiel verwendet `IUserData` die-Schnittstelle den `NewOldMarshaler` benutzerdefinierten Mars Haller, um zu ermöglichen, dass nicht verwaltete Client Anwendungen eine `IOld` Schnitt `DoSomeStuff` Stelle an die-Methode übergeben. `DoSomeStuff` Die verwaltete Beschreibung der Methode übernimmt eine `INew` Schnittstelle, wie im vorherigen Beispiel gezeigt, wohingegen die nicht verwaltete Version von `DoSomeStuff` einen `IOld` Schnittstellen Zeiger annimmt, wie im folgenden Beispiel gezeigt.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 Die Typbibliothek, die durch Exportieren der verwalteten Definition von `IUserData` generiert wird, ergibt die nicht verwaltete Definition, die in diesem Beispiel anstelle der Standard Definition angezeigt wird. Das <xref:System.Runtime.InteropServices.MarshalAsAttribute> -Attribut, das `INew` auf das-Argument in `DoSomeStuff` der verwalteten Definition der-Methode angewendet wird, gibt an, dass das-Argument einen benutzerdefinierten Mars Haller verwendet, wie im folgenden Beispiel gezeigt.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 In den vorherigen Beispielen ist der erste Parameter, der für <xref:System.Runtime.InteropServices.MarshalAsAttribute> das-Attribut <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> bereitgestellt wird `UnmanagedType.CustomMarshaler`, der-Enumerationswert.  
  
 Der zweite Parameter ist das <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> Feld, das den durch die Assembly qualifizierten Namen des benutzerdefinierten Mars Haller bereitstellt. Dieser Name besteht aus dem-Namespace und der-Klasse des benutzerdefinierten Mars`MarshalType="MyCompany.NewOldMarshaler"`Haller ().  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Das verwaltete Objekt, das zerstört werden soll.</param>
        <summary>Führt die notwendigen Bereinigungsvorgänge für verwaltete Daten durch, wenn diesen nicht mehr benötigt werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Ein Zeiger auf nicht verwaltete Daten, die zerstört werden sollen.</param>
        <summary>Führt die notwendigen Bereinigungsvorgänge für nicht verwaltete Daten durch, wenn diesen nicht mehr benötigt werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Größe der systemeigenen Daten zurück, die gemarshallt werden sollen.</summary>
        <returns>Die Größe der systemeigenen Daten in Bytes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Das verwaltete Objekt, das konvertiert werden soll.</param>
        <summary>Konvertiert verwaltete in nicht verwaltete Daten.</summary>
        <returns>Ein Zeiger auf die COM-Ansicht des verwalteten Objekts.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Ein Zeiger auf nicht verwaltete Daten, die umschlossen werden sollen.</param>
        <summary>Konvertiert verwaltete in nicht verwaltete Daten.</summary>
        <returns>Ein Objekt, das die verwaltete Ansicht der COM-Daten darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

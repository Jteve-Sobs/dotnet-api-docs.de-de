<Type Name="NativeLibrary" FullName="System.Runtime.InteropServices.NativeLibrary">
  <Metadata><Meta Name="ms.openlocfilehash" Value="981a48e3ee7c89eb1044a1dd8572d6a4c86f6d75" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73394203" /></Metadata><TypeSignature Language="C#" Value="public static class NativeLibrary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NativeLibrary extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.NativeLibrary" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeLibrary" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeLibrary abstract sealed" />
  <TypeSignature Language="F#" Value="type NativeLibrary = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt APIs für die Verwaltung nativer Bibliotheken bereit.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public static void Free (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Free(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Free (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Free(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member Free : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.NativeLibrary.Free handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Das Betriebssystemhandle der nativen Bibliothek, die freigegeben werden soll.</param>
        <summary>Gibt eine geladene Bibliothek mit dem angegebenen Betriebssystemhandle frei, oder führt keine Aktion durch, wenn das Eingabehandle <see cref="F:System.IntPtr.Zero" /> ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public static IntPtr GetExport (IntPtr handle, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetExport(native int handle, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExport (handle As IntPtr, name As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetExport(IntPtr handle, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetExport : nativeint * string -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.GetExport (handle, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">Das Betriebssystemhandle der nativen Bibliothek.</param>
        <param name="name">Der Name des exportierten Symbols.</param>
        <summary>Ruft die Adresse eines exportierten Symbols ab.</summary>
        <returns>Die Adresse des Symbols.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Dabei handelt es sich um einen einfachen Wrapper um Betriebssystem Aufrufe, der keine namens Verwaltung ausführt.

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handle" /> oder <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.EntryPointNotFoundException">Das Symbol wurde nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static IntPtr Load (string libraryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Load(string libraryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (libraryPath As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Load(System::String ^ libraryPath);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.Load libraryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libraryPath">Der Name der zu ladenden nativen Bibliothek.</param>
        <summary>Bietet eine einfache API zum Laden einer nativen Bibliothek, die das Betriebssystem-Ladeprogramm umschließt und Standardflags verwendet.</summary>
        <returns>Das Betriebssystemhandle für die geladene native Bibliothek.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryPath" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.DllNotFoundException">Die Bibliothek wurde nicht gefunden.</exception>
        <exception cref="T:System.BadImageFormatException">Die Bibliothek ist nicht gültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static IntPtr Load (string libraryName, System.Reflection.Assembly assembly, Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Load(string libraryName, class System.Reflection.Assembly assembly, valuetype System.Nullable`1&lt;valuetype System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Load(System::String ^ libraryName, System::Reflection::Assembly ^ assembly, Nullable&lt;System::Runtime::InteropServices::DllImportSearchPath&gt; searchPath);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Reflection.Assembly * Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.Load (libraryName, assembly, searchPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="searchPath" Type="System.Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt;" />
      </Parameters>
      <Docs>
        <param name="libraryName">Der Name der zu ladenden nativen Bibliothek.</param>
        <param name="assembly">Die Assembly, die die native Bibliothek lädt.</param>
        <param name="searchPath">Der Suchpfad.</param>
        <summary>Bietet eine API auf höchster Stufe zum Laden einer nativen Bibliothek.</summary>
        <returns>Das Betriebssystemhandle für die geladene Bibliothek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Bei einem Bibliotheksnamen durchsucht diese Methode bestimmte Pfade basierend auf der Laufzeitkonfiguration, den Eingabe Parametern und den Attributen der aufrufenden Assembly. Wenn der `searchPath`-Parameter nicht NULL ist, werden die Flags in dieser Enumeration verwendet. Andernfalls werden die Flags verwendet, die von der <xref:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute> in der aufrufenden Assembly angegeben werden, sofern vorhanden. Diese Methode ruft nicht die folgenden verwalteten Rückrufe für die native Bibliotheks Auflösung auf: 

- Der pro Assembly registrierte Rückruf.
- Die <xref:System.Runtime.Loader.AssemblyLoadContext.LoadUnmanagedDll%2A?displayProperty=nameWithType> -Methode.
- Das <xref:System.Runtime.Loader.AssemblyLoadContext.ResolvingUnmanagedDll?displayProperty=nameWithType>-Ereignis.

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryName" /> oder <paramref name="assembly" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" /> ist keine <see langword="RuntimeAssembly" />.</exception>
        <exception cref="T:System.DllNotFoundException">Die Bibliothek wurde nicht gefunden.</exception>
        <exception cref="T:System.BadImageFormatException">Die Bibliothek ist nicht gültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDllImportResolver">
      <MemberSignature Language="C#" Value="public static void SetDllImportResolver (System.Reflection.Assembly assembly, System.Runtime.InteropServices.DllImportResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDllImportResolver(class System.Reflection.Assembly assembly, class System.Runtime.InteropServices.DllImportResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetDllImportResolver(System::Reflection::Assembly ^ assembly, System::Runtime::InteropServices::DllImportResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="static member SetDllImportResolver : System.Reflection.Assembly * System.Runtime.InteropServices.DllImportResolver -&gt; unit" Usage="System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver (assembly, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="resolver" Type="System.Runtime.InteropServices.DllImportResolver" />
      </Parameters>
      <Docs>
        <param name="assembly">Die Assembly, für die der Resolver registriert ist.</param>
        <param name="resolver">Der zu registrierende Resolverrückruf.</param>
        <summary>Legt einen Rückruf für die Auflösung von Importen nativer Bibliotheken aus einer Assembly fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Dieser Assemblyresolver ist der erste Versuch, Native Bibliotheks Ladungen aufzulösen, die von dieser Assembly initiiert werden. 

Pro Assembly kann nur ein Konflikt Löser registriert werden. Der Versuch, einen zweiten Konflikt Löser zu registrieren, schlägt mit einem <xref:System.InvalidOperationException> fehl.

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> or paramref name="resolver" /&gt; ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Ein Resolver ist bereits für diese Assembly festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public static bool TryGetExport (IntPtr handle, string name, out IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetExport(native int handle, string name, [out] native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetExport (handle As IntPtr, name As String, ByRef address As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetExport(IntPtr handle, System::String ^ name, [Runtime::InteropServices::Out] IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member TryGetExport : nativeint * string * nativeint -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryGetExport (handle, name, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="address" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="handle">Das Betriebssystemhandle der nativen Bibliothek.</param>
        <param name="name">Der Name des exportierten Symbols.</param>
        <param name="address">Enthält bei Rückgabe der Methode die Symboladresse, sofern vorhanden.</param>
        <summary>Ruft die Adresse eines exportierten Symbols ab und gibt einen Wert zurück, der angibt, ob der Methodenaufruf erfolgreich war.</summary>
        <returns><see langword="true" />, wenn die Rückgabe durch die Methode erfolgreich war; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handle" /> oder <paramref name="name" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLoad">
      <MemberSignature Language="C#" Value="public static bool TryLoad (string libraryPath, out IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryLoad(string libraryPath, [out] native int&amp; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryLoad (libraryPath As String, ByRef handle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryLoad(System::String ^ libraryPath, [Runtime::InteropServices::Out] IntPtr % handle);" />
      <MemberSignature Language="F#" Value="static member TryLoad : string * nativeint -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryLoad (libraryPath, handle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryPath" Type="System.String" />
        <Parameter Name="handle" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="libraryPath">Der Name der zu ladenden nativen Bibliothek.</param>
        <param name="handle">Das Betriebssystemhandle der geladenen nativen Bibliothek bei Rückgabe der Methode.</param>
        <summary>Bietet eine einfache API zum Laden einer nativen Bibliothek und gibt einen Wert zurück, der angibt, ob der Vorgang erfolgreich war.</summary>
        <returns><see langword="true" />, wenn die native Bibliothek erfolgreich geladen wurde; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryPath" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLoad">
      <MemberSignature Language="C#" Value="public static bool TryLoad (string libraryName, System.Reflection.Assembly assembly, Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath, out IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryLoad(string libraryName, class System.Reflection.Assembly assembly, valuetype System.Nullable`1&lt;valuetype System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath, [out] native int&amp; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryLoad(System::String ^ libraryName, System::Reflection::Assembly ^ assembly, Nullable&lt;System::Runtime::InteropServices::DllImportSearchPath&gt; searchPath, [Runtime::InteropServices::Out] IntPtr % handle);" />
      <MemberSignature Language="F#" Value="static member TryLoad : string * System.Reflection.Assembly * Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; * nativeint -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryLoad (libraryName, assembly, searchPath, handle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="searchPath" Type="System.Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt;" />
        <Parameter Name="handle" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="libraryName">Der Name der zu ladenden nativen Bibliothek.</param>
        <param name="assembly">Die Assembly, die die native Bibliothek lädt.</param>
        <param name="searchPath">Der Suchpfad.</param>
        <param name="handle">Das Betriebssystemhandle der geladenen nativen Bibliothek bei Rückgabe der Methode.</param>
        <summary>Bietet eine API auf höchster Stufe zum Laden einer nativen Bibliothek und gibt einen Wert zurück, der angibt, ob der Vorgang erfolgreich war.</summary>
        <returns><see langword="true" />, wenn der Ladevorgang erfolgreich war; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryPath" /> oder <paramref name="assembly" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" /> ist keine <see langword="RuntimeAssembly" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

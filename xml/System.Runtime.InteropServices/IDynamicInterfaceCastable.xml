<Type Name="IDynamicInterfaceCastable" FullName="System.Runtime.InteropServices.IDynamicInterfaceCastable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9314c57351d9a95637ff30629f63745b0e1f6b02" /><Meta Name="ms.sourcegitcommit" Value="6fca7f55940a389853cc2d183619073ce0d69092" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/26/2020" /><Meta Name="ms.locfileid" Value="88868146" /></Metadata><TypeSignature Language="C#" Value="public interface IDynamicInterfaceCastable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicInterfaceCastable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.IDynamicInterfaceCastable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicInterfaceCastable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDynamicInterfaceCastable" />
  <TypeSignature Language="F#" Value="type IDynamicInterfaceCastable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Schnittstelle, die zur Beteiligung an einem Typumwandlungsfehler verwendet wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Die Implementierung dieser Schnittstelle für einen Werttyp wird ignoriert. Nur nicht-Werttypen dürfen über diese Schnittstelle an einem Typumwandlungs Fehler teilnehmen.

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetInterfaceImplementation">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle GetInterfaceImplementation (RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.RuntimeTypeHandle GetInterfaceImplementation(valuetype System.RuntimeTypeHandle interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceImplementation (interfaceType As RuntimeTypeHandle) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeTypeHandle GetInterfaceImplementation(RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceImplementation : RuntimeTypeHandle -&gt; RuntimeTypeHandle" Usage="iDynamicInterfaceCastable.GetInterfaceImplementation interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="interfaceType">Der Schnittstellentyp.</param>
        <summary>Wird während des Schnittstellendispatchings aufgerufen, wenn der angegebene Schnittstellentyp in den Metadaten der Klasse nicht gefunden werden kann.</summary>
        <returns>Der Typ, der verwendet werden soll, um <paramref name="interfaceType" /> für das aktuelle Objekt zu dispatchen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Wenn diese Funktion aufgerufen wird, sollte die Umwandlung dieses Objekts in die angegebene Schnittstelle bereits durch die Anweisungen überprüft worden sein `castclass/isinst` .
Der zurückgegebene Typ muss ein Schnittstellentyp sein und mit markiert werden <xref:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute> . Andernfalls <xref:System.InvalidOperationException> wird ausgelöst.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der zurückgegebene Typ ist kein Schnittstellentyp, oder er wurde nicht mit <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> gekennzeichnet.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInterfaceImplemented">
      <MemberSignature Language="C#" Value="public bool IsInterfaceImplemented (RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInterfaceImplemented(valuetype System.RuntimeTypeHandle interfaceType, bool throwIfNotImplemented) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInterfaceImplemented (interfaceType As RuntimeTypeHandle, throwIfNotImplemented As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInterfaceImplemented(RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="F#" Value="abstract member IsInterfaceImplemented : RuntimeTypeHandle * bool -&gt; bool" Usage="iDynamicInterfaceCastable.IsInterfaceImplemented (interfaceType, throwIfNotImplemented)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
        <Parameter Name="throwIfNotImplemented" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="interfaceType">Der Schnittstellentyp.</param>
        <param name="throwIfNotImplemented">Gibt an, ob die Funktion eine Ausnahme auslösen soll, anstatt <see langword="false" /> zurückzugeben.</param>
        <summary>Wird aufgerufen, wenn eine implementierende Klasseninstanz in einen Schnittstellentyp umgewandelt wird, der nicht in den Metadaten der Klasse enthalten ist.</summary>
        <returns><see langword="true" />, wenn dieses Objekt in die angegebene Schnittstelle umgewandelt werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Dies wird aufgerufen, wenn das Umwandeln dieses Objekts in den angegebenen Schnittstellentyp andernfalls fehlschlagen würde. Die Umwandlung bedeutet, dass Il `isinst` und `castclass` Anweisungen in dem Fall sind, in dem Sie einen Schnittstellentyp als Zieltyp erhalten.
Wenn den Wert `throwIfNotImplemented` `false` hat, sollte diese Funktion das Auslösen von Ausnahmen vermeiden. Wenn `throwIfNotImplemented` `true` den Wert hat und diese Funktion zurückgibt `false` , wird ausgelöst, <xref:System.InvalidCastException> es sei denn, von der-Implementierung wird eine Ausnahme ausgelöst.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

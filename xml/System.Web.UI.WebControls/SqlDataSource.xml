<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34dff01451d4ba6258731af2ba7a9443d91cb876" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30601084" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSource : System::Web::UI::DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine SQL-Datenbank für datengebundene Steuerelemente dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Datenverbindungen](#data_connections)  
  
-   [Vorgänge für Daten](#performing_data_operations)  
  
-   [Datenanbieter](#data_provider)  
  
-   [Zwischenspeichern](#caching)  
  
-   [Zusätzliche Funktionen](#additional_features)  
  
-   [Datenquellensicht](#data_source_view)  
  
-   [Deklarationssyntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Datenquellen-Steuerelement stellt Daten in einer relationalen SQL-Datenbank für datengebundene Steuerelemente dar. Sie können die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement in Verbindung mit einem datengebundenen Steuerelement zum Abrufen von Daten aus einer relationalen Datenbank und zum Anzeigen, bearbeiten und Sortieren von Daten auf einer Webseite mit wenigen oder gar keinen Code.  
  
<a name="data_connections"></a>   
## <a name="data-connections"></a>Datenverbindungen  
 Um eine Verbindung mit einer Datenbank herstellen, müssen Sie festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft, um eine gültige Verbindungszeichenfolge. Die <xref:System.Web.UI.WebControls.SqlDataSource> können einer beliebigen relationalen SQL-Datenbank, die verbunden werden kann, wie z. B. mit einem ADO.NET-Anbieter unterstützt das `SqlClient`, `OleDb`, `Odbc`, oder `OracleClient` Anbieter. Informationen zum Sichern von Verbindungszeichenfolgen finden Sie unter [How To: Secure Connection Strings when Using Data Source Controls](http://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62).  
  
 Legen Sie zum Abrufen von Daten aus einer zugrunde liegenden Datenbank die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft mit einer SQL-Abfrage. Wenn die Datenbank, die die <xref:System.Web.UI.WebControls.SqlDataSource> verknüpft ist mit gespeicherte Prozeduren unterstützt, können Sie festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> -Eigenschaft auf den Namen einer gespeicherten Prozedur. Die SQL-Abfrage, die Sie angeben kann auch eine parametrisierte Abfrage handeln. Können Sie hinzufügen <xref:System.Web.UI.WebControls.Parameter> verknüpften Objekte durch eine parametrisierte Abfrage an die <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> Auflistung. Weitere Informationen zu parametrisierten SQL-Abfragen und deren Syntax finden Sie unter [Verwenden von Parametern mit Steuerelementen für Datenquellen für das Filtern](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement ruft Daten ab. wenn die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode wird aufgerufen. Diese Methode ermöglicht programmgesteuerten Zugriff auf die Methode für die angegebenen <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> wird automatisch aufgerufen von Steuerelementen, die gebunden sind die <xref:System.Web.UI.WebControls.SqlDataSource> Wenn ihre <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> Methode wird aufgerufen. Wenn Sie festlegen, die <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> Eigenschaft eines datengebundenen Steuerelements, das Steuerelement automatisch bindet Daten aus der Datenquelle nach Bedarf. Festlegen der `DataSourceID` Eigenschaft ist die empfohlene Methode für die Bindung ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement zu einem datengebundenen Steuerelement. Alternativ können Sie die `DataSource` -Eigenschaft, doch Sie müssen explizit aufrufen, die <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> Methode des datengebundenen Steuerelements. Einige Beispiele für datengebundene Steuerelemente zur Verfügung <xref:System.Web.UI.WebControls.SqlDataSource> sind <xref:System.Web.UI.WebControls.DataGrid>, <xref:System.Web.UI.WebControls.DetailsView>, <xref:System.Web.UI.WebControls.DataList>, und <xref:System.Web.UI.WebControls.DropDownList>. Sie erreichen die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> -Methode programmgesteuert zu einem beliebigen Zeitpunkt zum Abrufen von Daten aus der zugrunde liegenden Datenbank.  
  
 In deklarativen und programmgesteuerten ASP.NET-Szenarien, legen Sie die <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> Eigenschaft des datengebundenen Steuerelements auf die ID des der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement. Sie können auch eine Instanz von Zuweisen der <xref:System.Web.UI.WebControls.SqlDataSource> Klasse, um die <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> Eigenschaft des datengebundenen Steuerelements. Weitere Informationen zum Binden von datengebundenen Steuerelementen an Datenquellensteuerelemente finden Sie unter [ASP.NET Datenzugriffsoptionen](http://msdn.microsoft.com/library/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d).  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>Vorgänge für Daten  
 Abhängig von den Funktionen des zugrunde liegenden Datenbankprodukts und der Konfiguration der Instanz von der <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, können Sie Datenvorgänge, z. B. aktualisieren, einfügen und löscht ausführen. Legen Sie diese Vorgänge mit der Daten, der entsprechende Befehlstext und alle zugeordneten Parameter für den Vorgang, den Sie ausführen möchten. Legen Sie für einen Aktualisierungsvorgang z. B. die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft, um eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur und fügen Sie alle erforderlichen Parameter an die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Auflistung. Das Update wird ausgeführt. wenn die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> -Methode aufgerufen wird, entweder explizit durch Code oder automatisch von einem datengebundenen Steuerelement. Das gleiche allgemeine Muster folgt für <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Vorgänge.  
  
 Die SQL-Abfragen und Befehle, mit denen Sie in der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>, und <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Eigenschaften können parametrisiert sein. Dies bedeutet, dass die Abfrage oder einen Befehl kann Platzhalter, anstatt literale Werte verwenden und die Platzhalter-Anwendung oder eine benutzerdefinierte Variablen zu binden. Sie können Parameter in SQL-Abfragen an Sitzungsvariablen, Werte, die in der Abfragezeichenfolge für eine Web Forms-Seite übergeben werden, die von den anderen Serversteuerelementen und vieles mehr Eigenschaftswerte binden. Weitere Informationen zum Verwenden von Parametern im SQL-Abfragen mit der <xref:System.Web.UI.WebControls.SqlDataSource>, finden Sie unter [Verwenden von Parametern mit Steuerelementen für Datenquellen für das Filtern](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f) und [mithilfe von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
> [!NOTE]
>  Wenn einer der Parameter ist standardmäßig `null` beim Ausführen einer `Select` Befehl keine Daten zurückgegeben werden, und es wird keine Ausnahme ausgelöst. Sie können dieses Verhalten ändern, durch Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> Eigenschaft `false`.  
  
<a name="data_provider"></a>   
## <a name="data-provider"></a>Datenanbieter  
 Wird standardmäßig die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement funktioniert mit dem .NET Framework-Datenanbieter für SQL Server, aber <xref:System.Web.UI.WebControls.SqlDataSource> ist nicht Microsoft SQL Server-spezifische. Sie können eine Verbindung herstellen die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement bei anderen Produkten auch Datenbank für die ein verwalteter ADO.NET-Anbieter vorhanden ist. Bei Verwendung mit der <xref:System.Data.OleDb?displayProperty=nameWithType> Anbieter, die <xref:System.Web.UI.WebControls.SqlDataSource> können mit einer beliebigen OLE DB-kompatiblen Datenbank arbeiten. Bei Verwendung mit der <xref:System.Data.Odbc?displayProperty=nameWithType> Anbieter, die <xref:System.Web.UI.WebControls.SqlDataSource> mit allen ODBC-Treiber und einschließlich IBM DB2, MySQL, PostgreSQL-Datenbank verwendet werden kann. Bei Verwendung mit der <xref:System.Data.OracleClient?displayProperty=nameWithType> Anbieter, die <xref:System.Web.UI.WebControls.SqlDataSource> können mit Datenbanken, Oracle 8.1.7 oder höher arbeiten. Die Liste der zulässigen Anbieter wird registriert, der `DbProviderFactories` Abschnitt der Konfigurationsdatei, entweder in der Datei "Machine.config" oder "Web.config". Weitere Informationen finden Sie unter [auswählen-Daten mit SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb).  
  
<a name="caching"></a>   
## <a name="caching"></a>Zwischenspeicherung  
 Wenn Sie Daten anzeigen, die sich auf der Seite mit einer <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement, können Sie die Leistung der Seite erhöhen, indem Sie mit den Daten, die caching-Funktionen des Datenquellen-Steuerelements. Zwischenspeichern verringert die Verarbeitungslast auf den Datenbankservern zu Lasten der Arbeitsspeicher auf dem Webserver; in den meisten Fällen ist dies ein guter Kompromiss. Die <xref:System.Web.UI.WebControls.SqlDataSource> automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Eigenschaft wird festgelegt, um die Anzahl der Sekunden, die der Cache Daten speichert, bevor der Cacheeintrag verworfen wird. Sie können auch angeben, ein <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> und eine optionale <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> Wert.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Zusätzliche Funktionen  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> bietet zusätzliche Funktionen, wie in der folgenden Tabelle aufgeführt.  
  
|Funktion|Anforderungen|  
|----------------|------------------|  
|Zwischenspeicherung|Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Wert, der <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> Eigenschaft, um `true`, und die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> Eigenschaften gemäß den für Ihre zwischengespeicherten Daten sollen das Verhalten beim Zwischenspeichern.|  
|Wird gelöscht|Legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Eigenschaft, um eine SQL-Anweisung verwendet, um Daten zu löschen. Diese Anweisung wird in der Regel parametrisiert.|  
|Filtern|Legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Wert. Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft, um einen Filterausdruck, der zum Filtern der Daten verwendet bei der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode wird aufgerufen.|  
|Einfügen|Legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> Eigenschaft, um eine SQL-Anweisung zum Einfügen von Daten verwendet. Diese Anweisung wird in der Regel parametrisiert.|  
|Paging|Nicht unterstützt derzeit von der <xref:System.Web.UI.WebControls.SqlDataSource>, jedoch einige datengebundene Steuerelemente, z. B. <xref:System.Web.UI.WebControls.GridView>, Unterstützung paging, beim Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Wert.|  
|Auswählen|Legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft, um eine SQL-Anweisung verwendet, um Daten abzurufen.|  
|Sortieren|Legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>-Eigenschaft auf <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> fest.|  
|Wird aktualisiert|Legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft, um eine SQL-Anweisung verwendet, um Daten zu aktualisieren. Diese Anweisung wird in der Regel parametrisiert.|  
  
<a name="data_source_view"></a>   
## <a name="data-source-view"></a>Datenquellensicht  
 Wie bei allen Datenquellen-Steuerelementen, die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement eine Ansicht der Datenquellenklasse zugeordnet ist. Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement besitzt nur eine zugeordnete <xref:System.Web.UI.WebControls.SqlDataSourceView>, und es wird stets der Name `Table`.  
  
 Es ist keine visuelle Darstellung von der <xref:System.Web.UI.WebControls.SqlDataSource> steuern; er als ein Steuerelement implementiert wird, damit Sie es deklarativ und (optional) erstellen können so, dass die Zustandsverwaltung teilnehmen können. Daher die <xref:System.Web.UI.WebControls.SqlDataSource> visual-Funktionen, z. B. diejenigen, die von bereitgestellt werden nicht unterstützt die <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> oder <xref:System.Web.UI.DataSourceControl.SkinID%2A> Eigenschaft.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:SqlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    CancelSelectOnNullParameter="True|False"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConnectionString="string"  
    DataSourceMode="DataReader|DataSet"  
    DeleteCommand="string"  
    DeleteCommandType="Text|StoredProcedure"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertCommand="string"  
    InsertCommandType="Text|StoredProcedure"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    ProviderName="string|System.Data.Odbc|System.Data.OleDb|  
        System.Data.OracleClient|System.Data.SqlClient|  
        Microsoft.SqlServerCe.Client"  
    runat="server"  
    SelectCommand="string"  
    SelectCommandType="Text|StoredProcedure"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    UpdateCommand="string"  
    UpdateCommandType="Text|StoredProcedure"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:SqlDataSource>  
```  
  
   
  
## Examples  
 Ist ein Visual Studio Web Site-Projekt mit Quellcode zu diesem Thema steht verfügbar: [herunterladen](http://go.microsoft.com/fwlink/?LinkId=192424).  
  
 Dieser Abschnitt enthält vier Codebeispiele:  
  
-   Im ersten Codebeispiel wird veranschaulicht, wie zum Anzeigen von Daten aus SQL Server in einer <xref:System.Web.UI.WebControls.GridView> steuern, verwenden deklarativen Syntax.  
  
-   Im zweiten Codebeispiel wird veranschaulicht, wie zum Anzeigen von Daten aus einer ODBC-kompatiblen Datenbank in einem <xref:System.Web.UI.WebControls.GridView> steuern, verwenden deklarativen Syntax.  
  
-   Im dritten Codebeispiel wird veranschaulicht, wie zum Anzeigen und Aktualisieren von Daten in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement.  
  
-   Im vierten Codebeispiel wird veranschaulicht, wie Sie anzeigen und Aktualisieren von Daten in einem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement.  
  
    > [!NOTE]
    >  Diese Beispiele zeigen, wie deklarativen Syntax für den Datenzugriff verwendet wird. Informationen zum Zugreifen auf Daten mithilfe von Code anstelle von Markup, finden Sie unter [Datenzugriff in Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement deklarativ zum Abrufen von Daten aus SQL Server, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement deklarativ zum Abrufen von Daten aus einer ODBC-kompatiblen Datenbank, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement. Die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> Eigenschaft ist der Name von der .NET Framework-Datenanbieter für ODBC, also <xref:System.Data.Odbc?displayProperty=nameWithType>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/CS/odbc3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/VB/odbc3vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, ein allgemeines Anzeige- und Aktualisierungsszenario mit der <xref:System.Web.UI.WebControls.GridView> Steuerelement. Mit den vorherigen Beispielen angezeigte Daten aus der Northwind-Datenbank in der <xref:System.Web.UI.WebControls.GridView> Steuerelement. Darüber hinaus da ein <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> -Eigenschaft angegeben wird und die <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> -Eigenschaftensatz auf `true`, können Sie bearbeiten und aktualisieren Sie die Datensätze ohne zusätzlichen Code. Die <xref:System.Web.UI.WebControls.GridView> Steuerelement übernimmt automatisch das Hinzufügen von Parametern zur der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> -Auflistung und ruft die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode bei der **Update** Schaltfläche der <xref:System.Web.UI.WebControls.GridView> Steuerelement geklickt wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/CS/sql5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/VB/sql5vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, ein allgemeines Anzeige- und Aktualisierungsszenario mit der <xref:System.Web.UI.WebControls.DropDownList> und <xref:System.Web.UI.WebControls.TextBox> Steuerelemente. Die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement nicht automatisch zum Aktualisieren von Parametern hinzu der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Auflistung noch Aufruf der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode, sodass Sie dies tun müssen. Die Update-Parameter deklarativ angegeben werden, und Sie können einen Ereignishandler auszuführenden Hinzufügen der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Vorgang, wenn ein Ereignis ausgelöst wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles darstellen Sicherheitsrisiko. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Klasse.</summary>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Die Verbindungszeichenfolge, mit der die Verbindung zur zugrunde liegenden Datenbank hergestellt wird.</param>
        <param name="selectCommand">Die SQL-Abfrage, mit der Daten aus der zugrunde liegenden Datenbank abgerufen werden. Wenn es sich bei der SQL-Abfrage um eine parametrisierte SQL-Zeichenfolge handelt, ist unter Umständen das Hinzufügen von <see cref="T:System.Web.UI.WebControls.Parameter" />-Objekten zur <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />-Auflistung erforderlich.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Klasse mit der angegebenen Verbindungszeichenfolge und dem Select-Befehl.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da verschiedene Datenbankprodukte Datenbankprodukte verschiedene SQL "oder" die Syntax für das verwenden `selectCommand` hängt von der aktuellen verwendeten ADO.NET-Anbieter ab, der durch identifiziert wird die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> Eigenschaft. Wenn die SQL-Zeichenfolge eine parametrisierte Abfrage oder ein parametrisierter Befehl ist, hängt der Platzhalter des Parameters ebenfalls vom verwendeten ADO.NET-Anbieter ab. Angenommen, wenn der Anbieter ist die <xref:System.Data.SqlClient?displayProperty=nameWithType>, also der Standardanbieter für die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, die der Platzhalter des Parameters ist `'@parameterName'`. Jedoch wenn der Anbieter, um festgelegt ist die <xref:System.Data.Odbc?displayProperty=nameWithType> oder die <xref:System.Data.OleDb?displayProperty=nameWithType>, wird der Platzhalter des Parameters `'?'`. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Wert kann eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur sein, wenn die Datenquelle gespeicherte Prozeduren unterstützt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer <xref:System.Web.UI.WebControls.SqlDataSource> steuern Sie mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource.%23ctor%2A> Konstruktor. Das Beispiel ist ungewöhnlich, dass die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement verwendet wird nicht in einer Web Forms-Seite, sondern in der Implementierung eines Objekts der mittleren Ebene als eine einfache Möglichkeit für ein Geschäftsobjekt mit einer Datenbank interagieren. Im Beispiel wird eine Verbindungszeichenfolge, die in der Datei "Web.config" gespeichert ist.  
  
 Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.WebControls.ObjectDataSource> Klasse.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ providerName, System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName">Der Name des Datenanbieters, der von der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> verwendet wird. Wenn kein Anbieter festgelegt ist, verwendet die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> standardmäßig den ADO.NET-Anbieter für Microsoft SQL Server.</param>
        <param name="connectionString">Die Verbindungszeichenfolge, mit der die Verbindung zur zugrunde liegenden Datenbank hergestellt wird.</param>
        <param name="selectCommand">Die SQL-Abfrage, mit der Daten aus der zugrunde liegenden Datenbank abgerufen werden. Wenn es sich bei der SQL-Abfrage um eine parametrisierte SQL-Zeichenfolge handelt, ist unter Umständen das Hinzufügen von <see cref="T:System.Web.UI.WebControls.Parameter" />-Objekten zur <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />-Auflistung erforderlich.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Klasse mit der angegebenen Verbindungszeichenfolge und dem Select-Befehl.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da verschiedene Datenbankprodukte Datenbankprodukte verschiedene SQL "oder" die Syntax der verwenden `selectCommand` hängt von der aktuellen verwendeten ADO.NET-Anbieter ab, der durch identifiziert wird die `providerName` Parameter. Wenn die SQL-Zeichenfolge eine parametrisierte Abfrage oder ein parametrisierter Befehl ist, hängt der Platzhalter des Parameters ebenfalls vom verwendeten ADO.NET-Anbieter ab. Angenommen, wenn der Anbieter ist <xref:System.Data.SqlClient?displayProperty=nameWithType>, also der Standardanbieter für die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, die der Platzhalter des Parameters ist `'@parameterName'`. Jedoch wenn der Anbieter, um festgelegt ist die <xref:System.Data.Odbc?displayProperty=nameWithType> oder die <xref:System.Data.OleDb?displayProperty=nameWithType>, wird der Platzhalter des Parameters `'?'`. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft kann eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur sein, wenn die Datenquelle gespeicherte Prozeduren unterstützt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne in Sekunden ab, die das Datenquellen-Steuerelement zum Zwischenspeichern der von der <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />-Methode abgerufenen Daten benötigt, oder legt diese fest.</summary>
        <value>Die Anzahl von Sekunden, die die Ergebnisse eines <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Vorgangs von der <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> zwischengespeichert bleiben. Der Standard ist 0. Der Wert kann nicht negativ sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten ab, aus dem Cache und nicht aus der zugrunde liegenden Datenbank. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten aus der zugrunde liegenden Datenbank ab und speichert die Daten erneut.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Eigenschaft auf einen Wert größer als 0, der die Anzahl der Sekunden angibt, dass der Cache speichert die Daten vor den Cacheeintrag festgelegt ist wird verworfen. Der Wert 0 gibt eine unendlich lange Cache an.  
  
 Das Verhalten des Caches wird bestimmt durch eine Kombination der Dauer und die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> Eigenschaft. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> Wert, der <xref:System.Web.UI.WebControls.SqlDataSource> Daten auf den ersten Vorgang zum Abrufen von Daten im Cache gespeichert, speichert es im Arbeitsspeicher für höchstens die Zeitspanne, die von angegeben wird <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Eigenschaft. Die Daten möglicherweise vor der Dauer und freigegeben werden, wenn der Arbeitsspeicher erforderlich ist. Der Cache wird dann während des nächsten Vorgangs aktualisiert. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> Wert, Datenquellen-Steuerelements speichert Daten auf den ersten Vorgang zum Abrufen von Daten, setzt aber das Zeitfenster für den Cache bei jedem nachfolgenden Vorgang. Der Cache abläuft, wenn es keine Aktivität für eine Zeit, die gleich der <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Wert seit dem letzten <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Vorgang.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement kann Daten nur zwischenspeichern, wenn darauf <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Modus. Ein <xref:System.NotSupportedException> -Ausnahme wird ausgelöst durch den <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> -Methode, wenn die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement auf festgelegt ist die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> Wert und das Zwischenspeichern ist ebenfalls aktiviert.  
  
> [!IMPORTANT]
>  Wenn Sie Clientidentitätswechsel unter Microsoft Windows-Authentifizierung verwenden, werden die Daten zwischengespeichert, wenn der erste Benutzer die Daten zugreift. Wenn ein anderer Benutzer die gleichen Daten anfordert, werden die Daten aus dem Cache abgerufen. Die Daten werden nicht von einem anderen Aufruf an die Datenbank, überprüfen Sie, ob der Benutzer Zugriff auf die Daten abgerufen. Wenn Sie erwarten, dass mehrere Benutzer Zugriff auf die Daten, und jeder Abruf auf Daten, die von den Sicherheitskonfigurationen für die Datenbank überprüft werden soll, verwenden Sie kein Zwischenspeichern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus der Northwind-Datenbank in Microsoft SQL Server abgerufen, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement mit Daten Zwischenspeichern aktiviert. Die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> auf 20 Sekunden festgelegt ist und aufgrund der <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> Wert wird standardmäßig Benutzern dieser Seite sehen frische Daten alle 20 Sekunden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Cacheablaufverhalten ab, das in Kombination mit der Dauer das Verhalten des vom Datenquellen-Steuerelement verwendeten Caches beschreibt.</summary>
        <value>Einer der <see cref="T:System.Web.UI.DataSourceCacheExpiry" />-Werte. Der Standardwert ist der <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten ab, aus dem Cache und nicht aus der zugrunde liegenden Datenbank. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten aus der zugrunde liegenden Datenbank ab und speichert die Daten erneut.  
  
 Das Verhalten des Caches wird durch eine Kombination von bestimmt die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> Einstellungen. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> Wert, der <xref:System.Web.UI.WebControls.SqlDataSource> Daten auf den ersten Vorgang zum Abrufen von Daten im Cache gespeichert, enthält es im Arbeitsspeicher für den Zeitraum, der angegeben wird die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> -Eigenschaft, und verwirft Sie es nach dem die Zeit hat Timeoutperiode abgelaufen ist. Der Cache wird dann während des nächsten Vorgangs aktualisiert. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> Wert, Datenquellen-Steuerelements speichert Daten auf den ersten Vorgang zum Abrufen von Daten, setzt aber das Zeitfenster für den Cache bei jedem nachfolgenden Vorgang. Der Cache abläuft, wenn es keine Aktivität für eine Zeit, die gleich der <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Wert seit dem letzten <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Vorgang.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement Zwischenspeichern von Daten kann nur, wenn in der <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Modus. Ein <xref:System.NotSupportedException> -Ausnahme wird ausgelöst durch den <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> -Methode, wenn die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement auf festgelegt ist die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> Wert und das Zwischenspeichern ist ebenfalls aktiviert.  
  
> [!IMPORTANT]
>  Wenn Sie Clientidentitätswechsel unter Microsoft Windows-Authentifizierung verwenden, werden die Daten zwischengespeichert, wenn der erste Benutzer die Daten zugreift. Wenn ein anderer Benutzer die gleichen Daten anfordert, werden die Daten aus dem Cache abgerufen. Die Daten werden nicht von einem anderen Aufruf an die Datenbank, überprüfen Sie, ob der Benutzer Zugriff auf die Daten abgerufen. Wenn Sie erwarten, dass mehrere Benutzer Zugriff auf die Daten, und jeder Abruf auf Daten, die von den Sicherheitskonfigurationen für die Datenbank überprüft werden soll, verwenden Sie kein Zwischenspeichern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus der Northwind-Datenbank in Microsoft SQL Server abgerufen, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement mit Daten Zwischenspeichern aktiviert. Da die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> Wert Benutzer sehen keine neue Daten, obwohl die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Wert ist 20 Sekunden. Nur, wenn keine Aktivität auf der Seite länger als 20 Sekunden seit dem letzten Laden der Seite vorhanden ist, werden die zwischengespeicherten Daten aktualisiert.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/CS/sql19cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/VB/sql19vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine benutzerdefinierte Schlüsselabhängigkeit ab, die mit sämtlichen vom Datenquellen-Steuerelement erstellten Datencacheobjekten verknüpft ist, oder legt diese fest. Alle Cacheobjekte laufen explizit ab, wenn der Schlüssel abläuft.</summary>
        <value>Ein Schlüssel, der alle von der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> erstellten Cacheobjekte angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten ab, aus dem Cache und nicht aus der zugrunde liegenden Datenbank. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten aus der zugrunde liegenden Datenbank ab und speichert die Daten erneut.  
  
 Sie können festlegen, die <xref:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency%2A> Eigenschaft zum Erstellen einer Abhängigkeit zwischen alle Einträge im Cache durch die erstellte der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement und den Schlüssel. Sie können alle Cacheeinträge programmgesteuert zu einem beliebigen Zeitpunkt ablaufen, durch den Schlüssel abläuft.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement Zwischenspeichern von Daten kann nur, wenn in der <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Modus. Ein <xref:System.NotSupportedException> -Ausnahme wird ausgelöst durch den <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> -Methode, wenn die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement auf festgelegt ist die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> Wert und das Zwischenspeichern ist ebenfalls aktiviert.  
  
 Ein eindeutiger Cacheeintragsschlüssel wird erstellt für jede Kombination der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>, und <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> Eigenschaften. Mehrere <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelemente können die gleichen Cacheeinträge in Szenarien, in denen das Steuerelemente dieselben Daten aus der gleichen zugrunde liegenden Datenbank laden.  
  
> [!IMPORTANT]
>  Wenn Sie Clientidentitätswechsel unter Microsoft Windows-Authentifizierung verwenden, werden die Daten zwischengespeichert, wenn der erste Benutzer die Daten zugreift. Wenn ein anderer Benutzer die gleichen Daten anfordert, werden die Daten aus dem Cache abgerufen. Die Daten werden nicht von einem anderen Aufruf an die Datenbank, überprüfen Sie, ob der Benutzer Zugriff auf die Daten abgerufen. Wenn Sie erwarten, dass mehrere Benutzer Zugriff auf die Daten, und jeder Abruf auf Daten, die von den Sicherheitskonfigurationen für die Datenbank überprüft werden soll, verwenden Sie kein Zwischenspeichern.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Datenabrufvorgang abgebrochen werden soll, wenn einer der in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />-Auflistung enthaltenen Parameter mit <see langword="null" /> ausgewertet wird, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn ein Datenabrufvorgang abgebrochen werden soll, wenn ein in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />-Auflistung enthaltener Parameter mit <see langword="null" /> ausgewertet wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> Eigenschaft im Ansichtszustand gespeichert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, wie das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement Aktualisierungs- und Löschvorgänge ausführt, wenn die Daten einer Zeile in der zugrunde liegenden Datenbank während der Vorgangsausführung geändert werden, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.ConflictOptions" />-Werte. Der Standardwert ist der <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> -Eigenschaft bestimmt, ob der Parameter für die alten und neuen Werte angewendet werden, um die `Update` Methode. Z. B., wenn der Befehl ist, die gemäß der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft gibt eine <xref:System.Data.DataTable> Objekt mit den Spalten `Name` und `Number` und die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.OverwriteChanges> Wert Parameter werden für erstellt `Name` und `Number` für die `Update` Methode. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert Parameter werden für erstellt `Name`, `Number`, `original_Name`, und `original_Number`. (Hängt von der genaue Namen der Parameter für die ursprünglichen Werte der <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> Eigenschaft.) Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement dann bestimmt, ob die `Update` -Methode, die im angegebenen die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft verfügt über Parameter, die mit übereinstimmen.  
  
 Parallelitätssteuerung ist ein Verfahren, das Verwenden von Datenspeichern zu steuern, wie Daten gelesen und im Speicher geändert werden, wenn mehrere Clients den Zugriff auf und bearbeiten die gleichen Daten. Beispielsweise ein Client liest Daten und stellt für einen Benutzer dar, während ein anderer Client die gleichen Daten liest und sie an einen anderen Benutzer zeigt. Wenn beide Benutzer die Daten aktualisieren und an den Datenspeicher zu übermitteln, kann unerwartete Ergebnisse auftreten, da beide Clients u. unterschiedliche Werte für die gleichen Daten aktualisieren können. Dies wird als Konflikt betrachtet. Durch Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> Eigenschaft, um die <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert Ihrer `Update` abwägen können dann die alten und neuen Werte mit der ursprünglichen Datenquelle Konflikte erkennen und behandeln sie nach Bedarf.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die für den ADO.NET-Anbieter spezifische Zeichenfolge ab, die das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement für die Verbindung zu einer zugrunde liegenden Datenbank verwendet, oder legt diese Zeichenfolge fest.</summary>
        <value>Eine für den .NET Framework-Datenanbieter spezifische Zeichenfolge, mit der die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> eine Verbindung zu der SQL-Datenbank herstellt, die es darstellt. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement mit einer Vielzahl von ADO.NET-Anbietern verwendet werden kann und die Syntax der Verbindungszeichenfolge, die verwendet wird, für die Verbindung mit einer zugrunde liegenden Datenquelle bezieht sich auf den Anbieter.  
  
 Beim Konfigurieren einer <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelements legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> Eigenschaft, um den Typ der Datenbank (die Standardeinstellung ist <xref:System.Data.SqlClient?displayProperty=nameWithType>), und legen Sie die <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft, um eine Verbindungszeichenfolge, die Informationen, die erforderlich sind enthält, um eine Verbindung herstellen mit der Datenbank. Der Inhalt einer Verbindungszeichenfolge unterscheidet sich je nach Typ der Datenbank, die Datenquellen-Steuerelements zugreift. Z. B. die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement erfordert ein Servername, Datenbankname (Katalog) und Informationen zur Authentifizierung des Benutzers beim Verbinden mit einem SQL Server. Informationen zum Inhalt von Verbindungszeichenfolgen finden Sie unter der <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> -Eigenschaft für die <xref:System.Data.SqlClient.SqlConnection> -Klasse, <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> -Eigenschaft für die <xref:System.Data.OracleClient.OracleConnection> -Klasse, <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> -Eigenschaft für die <xref:System.Data.OleDb.OleDbConnection> -Klasse, oder die <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> -Eigenschaft für die <xref:System.Data.Odbc.OdbcConnection> Klasse.  
  
 Wenn Sie ändern die <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst, und alle Steuerelemente, die gebunden sind die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement zu binden.  
  
> [!IMPORTANT]
>  Informationen über das Speichern einer Verbindungszeichenfolge finden Sie unter [How To: Secure Connection Strings when Using Data Source Controls](http://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft zum Herstellen einer Verbindung mit einer Microsoft SQL Server-Datenbank, und zeigen die Ergebnisse der der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft in einer <xref:System.Web.UI.WebControls.GridView> Steuerelement. Im zweiten Codebeispiel wird veranschaulicht, eine komplexere Szenarios, in denen ein <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement wird zum Anzeigen und Aktualisieren von Daten in einer Microsoft Access-Datenbank ein Kennwort geschützt. In jedem Fall die `connectionStrings` -Element der Datei "Web.config" zuerst angezeigt, gefolgt von der ASP.NET-Seite enthält, die die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft zum Herstellen einer Verbindung mit einer SQL Server-Datenbank, und zeigen die Ergebnisse der der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft in einer <xref:System.Web.UI.WebControls.GridView> Steuerelement.  
  
  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, ein komplexeres Szenario als im vorangehenden Codebeispiel, in dem ein <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement wird zum Anzeigen und Aktualisieren von Daten in einer Access-Datenbank ein Kennwort geschützt. Da die <xref:System.Web.UI.WebControls.SqlDataSource> wird verwendet, mit Zugriff auf die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> -Eigenschaftensatz auf die <xref:System.Data.OleDb> Anbieter, und die <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft auf eine geeignete Verbindungszeichenfolge für eine UNC-shared Access-Datenbank festgelegt ist. Ein <xref:System.Web.UI.WebControls.GridView> -Steuerelement zeigt die Aufträge mit Lieferdaten an. Sie können eine Bestellung aktualisieren, indem das entsprechende Kontrollkästchen, und klicken Sie dann auf die **aktualisieren** Schaltfläche.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Kennwort als nur-Text nur zur Veranschaulichung. In einer produktionsanwendung sollte Verbindungszeichenfolgen, die Kennwörter enthalten, verschlüsselt werden. Weitere Informationen finden Sie unter [Protecting Connection Information (Schützen von Verbindungsinformationen)](~/docs/framework/data/adonet/protecting-connection-information.md).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDataSourceView (viewName As String) As SqlDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::SqlDataSourceView ^ CreateDataSourceView(System::String ^ viewName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Der Name der Datenquellenansicht.</param>
        <summary>Erstellt ein Objekt für die Datenquellenansicht, das dem Datenquellen-Steuerelement zugeordnet ist.</summary>
        <returns>Eine <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />, die der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abgeleitete Klassen die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse überschreiben die <xref:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView%2A> Methode zurückzugebenden stark typisierte Datenquellensicht-Objekte.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceMode As SqlDataSourceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceMode DataSourceMode { System::Web::UI::WebControls::SqlDataSourceMode get(); void set(System::Web::UI::WebControls::SqlDataSourceMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Datenabrufmodus ab, mit dem das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement Daten abruft, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />-Werte. Die Standardeinstellung ist die <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" /> Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Datenabrufmodus identifiziert wie ein <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement ruft Daten aus der zugrunde liegenden Datenbank ab.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Wert laden Daten in eine <xref:System.Data.DataSet> Objekt und in gespeicherte Arbeitsspeichers auf dem Server. Dies ermöglicht Szenarien, in denen Steuerelemente der Benutzeroberfläche, z. B. <xref:System.Web.UI.WebControls.GridView>, sortieren, Filtern und Pagingfunktionen bieten.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> Wert Daten werden abgerufen, ein <xref:System.Data.IDataReader> Objekt, das einen Vorwärtscursor, schreibgeschützte Cursor ist. Den konkreten Typ des der <xref:System.Data.IDataReader> Objekt abhängig ist, auf die NET-Datenanbieter, die die <xref:System.Web.UI.WebControls.SqlDataSource> verwendet, der durch identifiziert wird die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> Eigenschaft. Wird standardmäßig die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement verwendet der Anbieter für Microsoft SQL Server, die <xref:System.Data.SqlClient?displayProperty=nameWithType>, und der Datenleser ist ein <xref:System.Data.SqlClient.SqlDataReader> Objekt.  
  
 Wenn Sie ändern die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst, und alle Steuerelemente, die gebunden sind die <xref:System.Web.UI.WebControls.SqlDataSource> erneut binden.  
  
 Der Wert, der die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> Eigenschaft im Ansichtszustand gespeichert wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> Eigenschaft der <xref:System.Web.UI.WebControls.SqlDataSource> die Steuerung an die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> Wert für ein Szenario mit eine <xref:System.Web.UI.WebControls.ListBox> Steuerelement, das keine Sortierung erforderlich ist, Paging und filtern.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />-Eigenschaft entspricht keinem der im <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> angegebenen Werte.</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt mithilfe der <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />-SQL-Zeichenfolge und allen Parametern, die in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />-Auflistung vorhanden sind, einen Löschvorgang aus.</summary>
        <returns>Ein Wert, der die Anzahl der Zeilen darstellt, die aus der zugrunde liegenden Datenbank gelöscht wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor der Löschvorgang ausgeführt wird, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> Ereignis. Sie können dieses Ereignis, um die Werte der Parameter zu untersuchen und ausführen, eine Verarbeitung vor einem Löschvorgang behandeln.  
  
 Nach Abschluss des Vorgangs die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> Ereignis. Sie können dieses Ereignis, um alle Fehlercodes und Rückgabewerte zu untersuchen und die Nachbearbeitung durchführen behandeln.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode wird bereitgestellt, für den programmgesteuerten Zugriff auf die `Delete` Methode. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement ein datengebundenes Steuerelement zugeordnet ist, ruft das datengebundene Steuerelement automatisch den **löschen** Methode.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> Methode der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement. Zum Ausführen des Vorgangs die <xref:System.Web.UI.WebControls.SqlDataSourceView> erstellt eine <xref:System.Data.Common.DbCommand> -Objekt unter Verwendung der <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Text und alle zugeordneten <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> Werte und führt dann die <xref:System.Data.Common.DbCommand> für die zugrunde liegenden Datenbank.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Text um eine Bestellung aus der Northwind-Datenbank zu löschen. Zu Beginn Daten aus der Orders-Tabelle abgerufen und angezeigt, die einem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Müssen Sie explizit deklarieren die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> -Eigenschaft, und rufen die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode, wenn Sie datengebundene Steuerelemente, z. B. mit der <xref:System.Web.UI.WebControls.DropDownList> (im Gegensatz zu anderen Steuerelementen wie z. B. <xref:System.Web.UI.WebControls.GridView> und <xref:System.Web.UI.WebControls.DetailsView>, die automatisch aufgefüllt der Parameter, und rufen die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> -Methode für ein Datenquellen-Steuerelement). In diesem Beispiel wird die <xref:System.Web.UI.WebControls.Button.OnClick%2A> Ereignis delegiert an die Private `OnDelete` -Ereignishandler, der explizit aufgerufen wird, die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> kann keine Verbindung mit der zugrunde liegenden Datenquelle herstellen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die SQL-Zeichenfolge ab, die vom <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement zum Löschen von Daten aus der zugrunde liegenden Datenbank verwendet wird, oder legt diese Zeichenfolge fest.</summary>
        <value>Eine SQL-Zeichenfolge, die von der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> zum Löschen von Daten verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> einer SQL-Abfrage oder den Namen einer gespeicherten Prozedur darstellt, und wird verwendet, durch die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode.  
  
 Da die jeweiligen Datenbankprodukte verschiedene SQL-Varianten verwenden, hängt die Syntax der SQL-Zeichenfolge vom derzeit verwendeten ADO.NET-Anbieter ab, der durch die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>-Eigenschaft identifiziert wird. Wenn die SQL-Zeichenfolge eine parametrisierte Abfrage oder einen Befehl ist, hängt die Syntax des Parameters ebenfalls vom verwendeten ADO.NET-Anbieter. Z. B., wenn der Anbieter ist die <xref:System.Data.SqlClient?displayProperty=nameWithType>, also der Standardanbieter für die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, die Syntax des Parameters lautet `'@parameterName'`. Jedoch, wenn der Anbieter, um festgelegt ist die <xref:System.Data.Odbc?displayProperty=nameWithType> oder <xref:System.Data.OleDb?displayProperty=nameWithType>, der Platzhalter des Parameters ist `'?'`. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Eigenschaft kann eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur sein, wenn die Datenbank gespeicherte Prozeduren unterstützt.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Aus Gründen der Sicherheit der <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Eigenschaft wird nicht im Ansichtszustand gespeichert. Es ist möglich, den Inhalt der Ansichtszustand auf dem Client zu decodieren, kann das Speichern vertraulicher Informationen über die Datenbankstruktur in der Sicht Status eine Schwachstelle der Offenlegung von Informationen führen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Text um eine Bestellung aus der Northwind-Datenbank Orders-Tabelle zu löschen. Daten aus der Orders-Tabelle abgerufen und angezeigt, die einem <xref:System.Web.UI.WebControls.GridView> Steuerelement. Die <xref:System.Web.UI.WebControls.GridView> rendert eine **löschen** Schaltfläche automatisch bei der <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> -Eigenschaftensatz auf `true`. Darüber hinaus, wenn die **löschen** Schaltfläche geklickt wird, die <xref:System.Web.UI.WebControls.GridView> -Steuerelement füllt automatisch die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> -Auflistung und ruft die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode. Schließlich, da dieses Codebeispiel Daten gelöscht werden, ein Ereignishandler wird hinzugefügt versucht, die Datenbank auf dem Datenträger vor dem Sichern der <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Vorgang ausgeführt wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />-Eigenschaft eine SQL-Anweisung oder der Name einer gespeicherten Prozedur ist, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />-Werte. Der Standardwert ist der <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Löschvorgang abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> Ereignis untersuchen Sie die Werte der Ausgabeparameter enthalten, nachdem ein Delete-Vorgang abgeschlossen wurde. Die Output-Parameter stehen über die <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> -Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung mit den Parametern ab, die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />-Eigenschaft des dem <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />-Steuerelement zugeordneten <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Objekts verwendet werden.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" />, die die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />-Eigenschaft verwendeten Parameter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Eigenschaft enthält eine parametrisierte SQL-Abfrage, die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> Auflistung enthält alle <xref:System.Web.UI.WebControls.Parameter> Objekte, die den Parameterplatzhaltern in der SQL-Zeichenfolge entsprechen.  
  
> [!NOTE]
>  Stellen Sie sicher, dass keine <xref:System.Web.UI.WebControls.BoundField> Steuerelemente in das datengebundene Steuerelement, das Binden an die <xref:System.Web.UI.WebControls.SqlDataSource> Kontrolle haben Namen, die in beliebige Parameternamen entsprechen den <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> Auflistung. Unter Umständen Parameter, die den gleichen Namen haben wie gebundene Felder aus der SQL-Befehl, und ein Fehler "-Parameter wurde nicht angegeben" ausgeschlossen sind.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert, werden die Parameter für die alten und neuen Werte der Daten erstellt. Die Parameter für die alten Werte werden entsprechend dem mit dem Namen der <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> Eigenschaft.  
  
 Je nach den ADO.NET-Anbieter, die Reihenfolge der Parameter in der <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> -Auflistung möglicherweise wichtig. Die <xref:System.Data.OleDb?displayProperty=nameWithType> und <xref:System.Data.Odbc?displayProperty=nameWithType> Anbieter ordnen die Parameter in der Auflistung nach der Reihenfolge, in der die Parameter in der parametrisierten SQL-Abfrage angezeigt werden. Die <xref:System.Data.SqlClient?displayProperty=nameWithType> Anbieter, der den Standard-ADO.NET-Anbieter ist für die <xref:System.Web.UI.WebControls.SqlDataSource> steuern, ordnet die Parameter in der Auflistung durch den Namen des Parameters mit dem Platzhalter in der SQL-Abfrage entsprechen. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Text um eine Bestellung aus der Northwind-Datenbank zu löschen. Zu Beginn Daten aus der Orders-Tabelle abgerufen und angezeigt, die einem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Müssen Sie explizit deklarieren <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> -Eigenschaft, und rufen die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode, wenn Sie datengebundene Steuerelemente, z. B. mit <xref:System.Web.UI.WebControls.DropDownList> (im Gegensatz zu anderen Steuerelementen wie z. B. <xref:System.Web.UI.WebControls.GridView> und <xref:System.Web.UI.WebControls.DetailsView>, die automatisch aufgefüllt, die Parameter und Rufen Sie <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> auf ein Datenquellen-Steuerelement). In diesem Beispiel wird die <xref:System.Web.UI.WebControls.Button.OnClick%2A> Ereignis delegiert an die Private `OnDelete` -Ereignishandler, der explizit aufgerufen wird, die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Methode der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Löschvorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> Ereignis, um weitere Initialisierungsvorgänge auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement den Löschvorgang ausführt.  
  
 Die Verbindung mit der zugrunde liegenden Datenquelle ist noch nicht geöffnet, wenn der Handler Ereignisdelegat aufgerufen wird. Aus diesem Grund können Sie den Vorgang abbrechen, direkt durch Aufrufen der <xref:System.Data.Common.DbCommand.Cancel%2A> Methode für die <xref:System.Data.Common.DbCommand> -Objekt, das vom verfügbar gemacht wird die <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> Objekt. Sie können jedoch den Datenbankvorgang abbrechen, indem der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> -Objekt `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie behandelt die <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> Ereignis, das ausgelöst wird, bevor Sie eine <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Vorgang auftritt. Da in diesem Beispiel die Daten aus der Datenbank Northwind gelöscht ein <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> Handler wird versucht, auf den Datenträger vor dem Sichern der Datenbank hinzugefügt. die <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> Vorgang ausgeführt wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement die Zwischenspeicherung von Daten aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Zwischenspeicherung von Daten für das Datenquellen-Steuerelement aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten ab, aus dem Cache und nicht aus der zugrunde liegenden Datenbank. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode ruft Daten aus der zugrunde liegenden Datenbank ab und speichert die Daten erneut.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> Eigenschaft auf einen Wert größer als 0, der die Anzahl der Sekunden angibt, dass der Cache speichert die Daten vor dem Abruf festgelegt ist ein neue Gruppe.  
  
> [!IMPORTANT]
>  Wenn Sie Clientidentitätswechsel unter Microsoft Windows-Authentifizierung verwenden, werden die Daten zwischengespeichert, wenn der erste Benutzer die Daten zugreift. Wenn ein anderer Benutzer die gleichen Daten anfordert, werden die Daten aus dem Cache abgerufen. Die Daten werden nicht von einem anderen Aufruf an die Datenbank, überprüfen Sie, ob der Benutzer Zugriff auf die Daten abgerufen. Wenn Sie erwarten, dass mehrere Benutzer Zugriff auf die Daten, und jeder Abruf auf Daten, die von den Sicherheitskonfigurationen für die Datenbank überprüft werden soll, verwenden Sie kein Zwischenspeichern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus der Northwind-Datenbank in Microsoft SQL Server abgerufen, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement mit Daten Zwischenspeichern aktiviert. Die <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> auf 20 Sekunden festgelegt ist. Da die <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> Feld wird standardmäßig Benutzern dieser Seite sehen frische Daten alle 20 Sekunden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Die <see cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />-Eigenschaft wird auf <see langword="true" /> festgelegt, wenn die Zwischenspeicherung nicht von <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> unterstützt wird.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Filterausdruck ab, der angewendet wird, wenn die <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />-Methode aufgerufen wird, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die einen Filterausdruck darstellt, der angewendet wird, wenn Daten mithilfe der <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />-Methode abgerufen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaftswert ist ein Formatzeichenfolgenausdruck (eine Zeichenfolge, die Verarbeitung durch die <xref:System.String.Format%2A?displayProperty=nameWithType> Methode), verwendet die Werte in der <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Auflistung für Ersetzungsparameter in der Zeichenfolge enthalten. Die Ausdruckssyntax Filter wird die gleiche Syntax, die vom akzeptiert wird die <xref:System.Data.DataView.RowFilter%2A> -Eigenschaft, da der Filterausdruck angewendet wird die <xref:System.Data.DataView.RowFilter%2A> Eigenschaft von der <xref:System.Data.DataView> Ausführung zurückgegebene Objekt der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode. Weitere Informationen finden Sie unter <xref:System.Data.DataColumn.Expression%2A>.  
  
 Wenn Sie Parameter hinzufügen der <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Sammlung, Sie können auch Platzhalter für Formatzeichenfolgen einschließen (z. B. `"{0}")` im Ausdruck als Ersatz für Parameterwerte. Die Platzhalter werden entsprechend dem Index des Parameters im ersetzt die <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung. Wenn ein Objekt in der <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung `null`, das Objekt durch eine leere Zeichenfolge ersetzt werden.  
  
 Sie können Parameter in einschließen der <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft. Wenn der Parameter einen Zeichenfolgen- oder Typ ist, schließen Sie den Parameter in einfache Anführungszeichen ein. Anführungszeichen sind nicht erforderlich, wenn der Parameter einen numerischen Typ handelt. Die <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung enthält die Parameter, die für den Platzhalter, die im gefunden ausgewertet werden die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement unterstützt das Filtern von Daten nur, wenn in der <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Modus.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus der Northwind-Datenbank abgerufen und Filtern mithilfe einer <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Zeichenfolge und der <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung. Die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> -Eigenschaft angewendet wird jedes Mal die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode wird ausgeführt, um Daten abzurufen. In diesem Beispiel wird die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> enthält einen Platzhalter für einen Filterparameter, der in enthalten ist das <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung. Darüber hinaus die Filter-Parameter ist ein <xref:System.Web.UI.WebControls.ControlParameter> -Objekt, das gebunden ist die <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Da die <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement seine <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> -Eigenschaftensatz auf `true`, jede Änderung in der Auswahl für die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement bewirkt, dass die Seite Informationen an den Server und die <xref:System.Web.UI.WebControls.GridView> Steuerelement erneut an die Datenquelle binden Steuern Sie mit den neuen Filter.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Die <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />-Eigenschaft wurde festgelegt und <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> befindet sich im <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" />-Modus.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Filtervorgang auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis Überprüfungsvorgänge für Filterparameterwerte vor dem Ausführen der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement einem Filter durchgeführt. Können Sie Abbrechen der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode durch Festlegen der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> -Objekt `true`. Dieses Ereignis wird ausgelöst, wenn nur die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> festgelegt wird.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Filtering?displayProperty=nameWithType> Ereignis delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=nameWithType> -Ereignis für die <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von Parametern ab, die beliebigen Parameterplatzhaltern in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />-Zeichenfolge zugeordnet sind.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> mit einer Reihe von Parametern, die beliebigen Parameterplatzhaltern in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />-Eigenschaft zugeordnet sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameter in der <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung aller Parameter, die im angegebenen zugeordnet sind die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft. Die Parameterplatzhalter die im angegebenen der <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> -Eigenschaft mit der Reihenfolge Parameterobjekte in abgeglichen werden die <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung bei der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode wird aufgerufen.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus der Northwind-Datenbank abgerufen und Filtern sie mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Eigenschaften. Die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement angewendet wird, können Sie jederzeit die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode wird ausgeführt, um Daten abzurufen. In diesem Beispiel wird die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft enthält einen Platzhalter für einen Filterparameter, der in enthalten ist das <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Auflistung. Darüber hinaus die Filter-Parameter ist ein <xref:System.Web.UI.WebControls.ControlParameter> -Objekt, das gebunden ist die <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Da die <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement seine <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> -Eigenschaftensatz auf `true`, jede Änderung in der <xref:System.Web.UI.WebControls.DropDownList> Auswahl bewirkt, dass die Seite Informationen an den Server und die <xref:System.Web.UI.WebControls.GridView> Steuerelement zu binden, Datenquellen-Steuerelements mit der neue Filter.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDbProviderFactory () As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DbProviderFactory ^ GetDbProviderFactory();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt das <see cref="T:System.Data.Common.DbProviderFactory" />-Objekt zurück, das dem von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />-Eigenschaft bezeichneten ADO.NET-Anbieter zugeordnet ist.</summary>
        <returns>Eine <see cref="T:System.Data.Common.DbProviderFactory" />, die den bezeichneten ADO.NET-Anbieter bezeichnet, andernfalls eine Instanz von <see cref="N:System.Data.SqlClient" /> (wenn kein Anbieter festgelegt wurde).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.Common.DbProviderFactory> Eigenschaft wird verwendet, durch die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement, um die richtigen ADO.NET Connection, Installationsbefehl und Parametersatz Objekte zu erstellen, bei der Interaktion mit einer Datenbank.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.Common.DbProviderFactory" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Der Name der abzurufenden Ansicht. Da die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> nur eine Ansicht unterstützt, wird <c>viewName</c> ignoriert.</param>
        <summary>Ruft die benannte Datenquellenansicht ab, die dem Datenquellen-Steuerelement zugeordnet ist.</summary>
        <returns>Die <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> mit dem Namen "Tabelle", die der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement unterstützt nur eine Datenquellensicht an. Wie bei allen Datenquellensicht-Objekte, die <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das die Datenquellen-Steuerelement zugeordnet ist seine Funktionen definiert, alle Aufgaben ausführt, die zum Abrufen von Daten aus der zugrunde liegenden Datenbank und führt Vorgänge, z. B. sortieren Einfügen, löschen und aktualisieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> ist <see langword="null" /> oder hat einen anderen Wert als <c>Table</c>.</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Auflistung von Namen ab, die die Liste der Ansichtsobjekte darstellt, die dem <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement zugeordnet sind.</summary>
        <returns>Eine <see cref="T:System.Collections.ICollection" />, die die Namen der Ansichten enthält, die der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> zugeordnet sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement unterstützt nur eine Ansicht der zugrunde liegenden Daten, die mit dem Namen `"Table"`. Die <xref:System.Web.UI.WebControls.SqlDataSource.GetViewNames%2A> -Methode gibt eine Auflistung Einzelelement-mit diesem Namen einer Ansicht.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt mithilfe der <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />-SQL-Zeichenfolge und allen Parametern, die in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />-Auflistung vorhanden sind, einen Einfügevorgang aus.</summary>
        <returns>Ein Wert, der die Anzahl der in die zugrunde liegenden Datenbank eingefügten Zeilen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor der Insert-Vorgang ausgeführt wird, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> Ereignis. Sie können dieses Ereignis, um die Werte der Parameter zu untersuchen und ausführen, eine Verarbeitung vor verarbeiten die <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Vorgang. Einen Insert-Vorgang ausführen der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt Builds ein <xref:System.Data.Common.DbCommand> -Objekt unter Verwendung der <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> Text und alle zugeordneten <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> Eigenschaften, und führt dann die <xref:System.Data.Common.DbCommand> Objekt für die zugrunde liegenden Datenbank.  
  
 Nach Abschluss des Vorgangs die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> Ereignis. Sie können dieses Ereignis, um alle Fehlercodes und Rückgabewerte zu untersuchen und die Nachbearbeitung durchführen behandeln.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Methode wird bereitgestellt, für den programmgesteuerten Zugriff auf die `Insert` Methode. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement ein datengebundenes Steuerelement zugeordnet ist, ruft das datengebundene Steuerelement automatisch den `Insert` Methode.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> Methode der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Einfügen von Daten in einer Datenbank mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement und einer einfachen Web Forms-Seite. Die aktuellen Daten in der Tabelle werden angezeigt, der <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Sie können neue Datensätze hinzufügen, indem das Eingeben von Werten in der <xref:System.Web.UI.WebControls.TextBox> Steuerelemente, und klicken Sie dann auf die **einfügen** Schaltfläche. Wenn die **einfügen** geklickt wird, werden die angegebenen Werte in die Datenbank eingefügt und dann die <xref:System.Web.UI.WebControls.DropDownList> aktualisiert wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko und Einfügen von Werten in Parameter ohne Validierung, die auch ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
> [!NOTE]
>  In diesem Beispiel wird gezeigt, wie deklarativen Syntax für den Datenzugriff verwendet wird. Informationen zum Zugreifen auf Daten mithilfe von Code anstelle von Markup, finden Sie unter [Datenzugriff in Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> kann keine Verbindung mit der zugrunde liegenden Datenquelle herstellen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die SQL-Zeichenfolge ab, die vom <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement zum Einfügen von Daten in die zugrunde liegende Datenbank verwendet wird, oder legt diese Zeichenfolge fest.</summary>
        <value>Eine SQL-Zeichenfolge, die von der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> zum Einfügen von Daten verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> stellt eine SQL-Abfrage oder den Namen einer gespeicherten Prozedur dar und dient der <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Methode.  
  
 Da die jeweiligen Datenbankprodukte verschiedene SQL-Varianten verwenden, hängt die Syntax der SQL-Zeichenfolge vom derzeit verwendeten ADO.NET-Anbieter ab, der durch die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>-Eigenschaft identifiziert wird. Wenn die SQL-Zeichenfolge eine parametrisierte Abfrage oder ein parametrisierter Befehl ist, hängt der Platzhalter des Parameters ebenfalls vom verwendeten ADO.NET-Anbieter ab. Angenommen, wenn der Anbieter ist die <xref:System.Data.SqlClient?displayProperty=nameWithType>, also der Standardanbieter für die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, die der Platzhalter des Parameters ist `'@parameterName'`. Jedoch, wenn der Anbieter, um festgelegt ist die <xref:System.Data.Odbc?displayProperty=nameWithType> oder <xref:System.Data.OleDb?displayProperty=nameWithType>, der Platzhalter des Parameters ist `'?'`. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> kann sein, eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur, wenn die Datenquelle gespeicherte Prozeduren unterstützt.  
  
 Diese Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> Eigenschaft der <xref:System.Web.UI.WebControls.SqlDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Aus Gründen der Sicherheit der <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> -Eigenschaft wird nicht gespeichert und Ansichtszustand. Es ist möglich, den Inhalt der Ansichtszustand auf dem Client zu decodieren, kann das Speichern vertraulicher Informationen über die Datenbankstruktur in der Sicht Status eine Schwachstelle der Offenlegung von Informationen führen.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie zum Einfügen von Daten in einer Datenbank mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement und einer einfachen Web Forms-Seite. Im zweiten Codebeispiel wird veranschaulicht, wie Daten aus Microsoft SQL Server abgerufen, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.GridView> Steuerelement sowie zum Verwenden einer <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zusätzliche Details Abrufen einer ausgewählten Zeile in der <xref:System.Web.UI.WebControls.GridView> Steuerelement und als Formular zum Einfügen neuer Datensätze.  
  
> [!NOTE]
>  Diese Beispiele zeigen, wie deklarativen Syntax für den Datenzugriff verwendet wird. Informationen zum Zugreifen auf Daten mithilfe von Code anstelle von Markup, finden Sie unter [Datenzugriff in Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Einfügen von Daten in einer Datenbank mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement und einer einfachen Web Forms-Seite. Die aktuellen Daten in der Tabelle werden angezeigt, der <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Sie können neue Datensätze hinzufügen, indem das Eingeben von Werten in der <xref:System.Web.UI.WebControls.TextBox> Steuerelemente, und klicken Sie dann auf die **einfügen** Schaltfläche. Wenn die **einfügen** geklickt wird, werden die angegebenen Werte in die Datenbank eingefügt und die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement aktualisiert wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben, die ein potenzielles darstellen akzeptiert Sicherheitsrisiko, und Einfügen von Werten in Parameter ohne Validierung, die auch ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus SQL Server abgerufen, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.GridView> Steuerelement sowie zum Verwenden einer <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zusätzliche Details Abrufen einer ausgewählten Zeile in der <xref:System.Web.UI.WebControls.GridView> Steuerelement und als Formular zum Einfügen neuer Datensätze.  
  
 Zu Beginn wird der Daten angezeigt, der <xref:System.Web.UI.WebControls.GridView> -Steuerelement, und der ausgewählten Zeile der <xref:System.Web.UI.WebControls.GridView> wird auch angezeigt, der <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die <xref:System.Web.UI.WebControls.GridView> und <xref:System.Web.UI.WebControls.DetailsView> Steuerelemente verwenden unterschiedliche Daten Datenquellensteuerelemente; das Projekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.DetailsView> hat die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Eigenschaften, die die ausgewählten Zeile wird sichergestellt, dass die <xref:System.Web.UI.WebControls.GridView> ist angezeigt.  
  
 Wenn Sie den automatisch generierten auf **einfügen** Schaltfläche der <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, das <xref:System.Web.UI.WebControls.DetailsView> zeigt eine andere Benutzeroberfläche, die zum Einfügen eines neuen Datensatzes verwendet wird. Im Beispiel wird eine gespeicherte Prozedur zum Einfügen von Datensätzen verwendet und gibt den primären Schlüssel der eingefügten Zeile zurück. Wenn Sie einen Datensatz einfügen der <xref:System.Web.UI.WebControls.DetailsView> füllt automatisch die <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> Auflistung mit Werten aus den gebundenen Spalten und ruft die <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Methode. Die <xref:System.Web.UI.WebControls.DetailsView> kann ableiten, die richtigen Parameter aus allen <xref:System.Web.UI.WebControls.BoundField> -Objekt und einen Parameter für die <xref:System.Web.UI.WebControls.TemplateField> Objekt, wenn die bidirektionale Datenbindung ASP.NET-Syntax verwendet wird. In diesem Beispiel wird ein zusätzlicher Parameter hinzugefügt, der <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> -Ereignishandler, um den primären Schlüssel zu behandeln, die von der gespeicherten Prozedur zurückgegeben wird.  
  
 Schließlich nachdem Daten in die Datenbank eingefügt werden die <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> -Ereignishandler wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> Ereignis den Wert des Primärschlüssels der eingefügten Zeile wird angezeigt, und die <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> Methode von der <xref:System.Web.UI.WebControls.GridView> Steuerelement explizit aufgerufen, um die Daten zu aktualisieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />-Eigenschaft eine SQL-Anweisung oder der Name einer gespeicherten Prozedur ist, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />-Werte. Der Standardwert ist der <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus einer Microsoft SQL Server-Datenbank abgerufen, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement. Außerdem wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.DetailsView> Steuerelement in den Details einer ausgewählten Zeile in finden Sie unter der <xref:System.Web.UI.WebControls.GridView> und als Formular zum Einfügen neuer Datensätze.  
  
 Die <xref:System.Web.UI.WebControls.GridView> -Steuerelement zeigt einen Satz von Daten und die <xref:System.Web.UI.WebControls.DetailsView> zeigt die Details für eine bestimmte Zeile. Wenn Sie den automatisch generierten auf **einfügen** Schaltfläche der <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, das <xref:System.Web.UI.WebControls.DetailsView> zeigt eine andere Benutzeroberfläche, die zum Einfügen eines neuen Datensatzes verwendet wird. Im Beispiel wird eine gespeicherte Prozedur zum Einfügen von Datensätzen verwendet und gibt den primären Schlüssel der eingefügten Zeile zurück. Namen der gespeicherten Prozedur wird festgelegt, der <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> Eigenschaft und identifiziert als gespeicherte Prozedur durch Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> Wert.  
  
 Nachdem Daten in die Datenbank eingefügt werden der <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> -Ereignishandler wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> Ereignis den Wert des Primärschlüssels der eingefügten Zeile wird angezeigt, und die <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> Methode der <xref:System.Web.UI.WebControls.GridView> Steuerelement wird explizit aufgerufen, um Daten zu aktualisieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Einfügevorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> Ereignis untersuchen Sie die Werte der Ausgabeparameter enthalten, nachdem ein Insert-Vorgang abgeschlossen wurde. Die Output-Parameter stehen über die <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> -Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus Microsoft SQL Server abgerufen, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.GridView> Steuerelement sowie zum Verwenden einer <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zusätzliche Details Abrufen einer ausgewählten Zeile in der <xref:System.Web.UI.WebControls.GridView> und als Formular zum Einfügen neuer Datensätze.  
  
> [!NOTE]
>  In diesem Beispiel wird gezeigt, wie deklarativen Syntax für den Datenzugriff verwendet wird. Informationen zum Zugreifen auf Daten mithilfe von Code anstelle von Markup, finden Sie unter [Datenzugriff in Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 Zu Beginn wird der Daten angezeigt, der <xref:System.Web.UI.WebControls.GridView> -Steuerelement, und der ausgewählten Zeile der <xref:System.Web.UI.WebControls.GridView> wird auch angezeigt, der <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die <xref:System.Web.UI.WebControls.GridView> und <xref:System.Web.UI.WebControls.DetailsView> Steuerelemente verwenden unterschiedliche Daten Datenquellensteuerelemente; das Projekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.DetailsView> hat die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Eigenschaften, die die ausgewählten Zeile wird sichergestellt, dass die <xref:System.Web.UI.WebControls.GridView> ist angezeigt.  
  
 Wenn Sie den automatisch generierten auf **einfügen** Schaltfläche der <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, das <xref:System.Web.UI.WebControls.DetailsView> zeigt eine andere Benutzeroberfläche, die zum Einfügen eines neuen Datensatzes verwendet wird. Im Beispiel wird eine gespeicherte Prozedur zum Einfügen von Datensätzen verwendet und gibt den primären Schlüssel der eingefügten Zeile zurück. Wenn Sie einen Datensatz einfügen der <xref:System.Web.UI.WebControls.DetailsView> füllt automatisch die <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> Auflistung mit Werten aus den gebundenen Spalten und ruft die <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Methode. Die <xref:System.Web.UI.WebControls.DetailsView> kann ableiten, die richtigen Parameter aus allen <xref:System.Web.UI.WebControls.BoundField> -Objekt und einen Parameter für die <xref:System.Web.UI.WebControls.TemplateField> Objekt, wenn die bidirektionale Datenbindung ASP.NET-Syntax verwendet wird. In diesem Beispiel wird ein zusätzlicher Parameter hinzugefügt, der <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> -Ereignishandler, um den primären Schlüssel zu behandeln, die von der gespeicherten Prozedur zurückgegeben wird.  
  
 Schließlich nachdem Daten in die Datenbank eingefügt werden die <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> -Ereignishandler wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> Ereignis den Wert des Primärschlüssels der eingefügten Zeile wird angezeigt, und die <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> Methode von der <xref:System.Web.UI.WebControls.GridView> Steuerelement explizit aufgerufen, um die Daten zu aktualisieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Einfügevorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> Ereignis, um weitere Initialisierungsvorgänge auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement den Einfügevorgang ausführt. Die Verbindung mit der zugrunde liegenden Datenquelle ist noch nicht geöffnet, wenn der Handler Ereignisdelegat aufgerufen wird. Aus diesem Grund können Sie den Vorgang abbrechen, direkt durch Aufrufen der <xref:System.Data.Common.DbCommand.Cancel%2A> Methode für die <xref:System.Data.Common.DbCommand> -Objekt, das vom verfügbar gemacht wird die <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> Eigenschaft. Sie können jedoch den Datenbankvorgang abbrechen, indem der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> -Objekt `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten aus Microsoft SQL Server abgerufen, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.GridView> Steuerelement sowie zum Verwenden einer <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zusätzliche Details Abrufen einer ausgewählten Zeile in der <xref:System.Web.UI.WebControls.GridView> und als Formular zum Einfügen neuer Datensätze.  
  
> [!NOTE]
>  In diesem Beispiel wird gezeigt, wie deklarativen Syntax für den Datenzugriff verwendet wird. Informationen zum Zugreifen auf Daten mithilfe von Code anstelle von Markup, finden Sie unter [Datenzugriff in Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 Zu Beginn wird der Daten angezeigt, der <xref:System.Web.UI.WebControls.GridView> -Steuerelement, und der ausgewählten Zeile der <xref:System.Web.UI.WebControls.GridView> wird auch angezeigt, der <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die <xref:System.Web.UI.WebControls.GridView> und <xref:System.Web.UI.WebControls.DetailsView> Steuerelemente verwenden unterschiedliche Daten Datenquellensteuerelemente; das Projekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.DetailsView> hat die <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Eigenschaften, die die ausgewählten Zeile wird sichergestellt, dass die <xref:System.Web.UI.WebControls.GridView> ist angezeigt.  
  
 Wenn Sie den automatisch generierten auf **einfügen** Schaltfläche der <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, das <xref:System.Web.UI.WebControls.DetailsView> zeigt eine andere Benutzeroberfläche, die zum Einfügen eines neuen Datensatzes verwendet wird. Im Beispiel wird eine gespeicherte Prozedur zum Einfügen von Datensätzen verwendet und gibt den primären Schlüssel der eingefügten Zeile zurück. Wenn Sie einen Datensatz einfügen der <xref:System.Web.UI.WebControls.DetailsView> füllt automatisch die <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> Auflistung mit Werten aus den gebundenen Spalten und ruft die <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> Methode. Die <xref:System.Web.UI.WebControls.DetailsView> kann ableiten, die richtigen Parameter von einem beliebigen <xref:System.Web.UI.WebControls.BoundField> -Objekt und einen Parameter für die <xref:System.Web.UI.WebControls.TemplateField> bei die bidirektionale Datenbindung ASP.NET-Syntax Verendung. In diesem Beispiel wird ein zusätzlicher Parameter hinzugefügt, der <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> -Ereignishandler, um den primären Schlüssel zu behandeln, die von der gespeicherten Prozedur zurückgegeben wird.  
  
 Schließlich nachdem Daten in die Datenbank eingefügt werden die <xref:System.Web.UI.WebControls.DetailsView> -Steuerelement, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> -Ereignishandler wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> Ereignis den Wert des Primärschlüssels der eingefügten Zeile wird angezeigt, und die `DataBind` Methode von der <xref:System.Web.UI.WebControls.GridView> Steuerelement explizit aufgerufen, um die Daten zu aktualisieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung mit den Parametern ab, die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />-Eigenschaft des dem <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />-Steuerelement zugeordneten <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Objekts verwendet werden.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" />, die die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />-Eigenschaft verwendeten Parameter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> Eigenschaft enthält eine parametrisierte SQL-Abfrage, die <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> Auflistung enthält alle <xref:System.Web.UI.WebControls.Parameter> Objekte, die den Parameterplatzhaltern in der SQL-Zeichenfolge entsprechen.  
  
 Je nach den ADO.NET-Anbieter, die Reihenfolge der Parameter in der <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> -Auflistung möglicherweise wichtig. Die <xref:System.Data.OleDb?displayProperty=nameWithType> und <xref:System.Data.Odbc?displayProperty=nameWithType> Anbieter ordnen die Parameter in der Auflistung nach der Reihenfolge, die die Parameter in der parametrisierten SQL-Abfrage angezeigt werden. Die <xref:System.Data.SqlClient?displayProperty=nameWithType> Anbieter, der den Standard-ADO.NET-Anbieter ist für die <xref:System.Web.UI.WebControls.SqlDataSource> steuern, ordnet die Parameter in der Auflistung durch den Namen des Parameters mit einem Platzhalteralias in der SQL-Abfrage übereinstimmt. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Einfügen von Daten in einer Datenbank mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement und einer einfachen Web Forms-Seite. Die aktuellen Daten in der Tabelle werden angezeigt, der <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Sie können neue Datensätze hinzufügen, indem das Eingeben von Werten in der <xref:System.Web.UI.WebControls.TextBox> Steuerelemente, und klicken Sie dann auf die **einfügen** Schaltfläche. Wenn die **einfügen** geklickt wird, werden die angegebenen Werte in die Datenbank eingefügt und die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement aktualisiert wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben, die ein potenzielles darstellen akzeptiert Sicherheitsrisiko, und Einfügen von Werten in Parameter ohne Validierung, die auch ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
> [!NOTE]
>  In diesem Beispiel wird gezeigt, wie deklarativen Syntax für den Datenzugriff verwendet wird. Informationen zum Zugreifen auf Daten mithilfe von Code anstelle von Markup, finden Sie unter [Datenzugriff in Visual Studio](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein Objekt, das den Zustand von <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> darstellt.</param>
        <summary>Lädt den Zustand der beizubehaltenden Eigenschaften im <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.LoadViewState%2A> Methode wird verwendet, um den zuvor gespeicherten Ansichtszustand des laden die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Formatzeichenfolge ab, die auf die Namen aller Parameter angewendet wird, die an die <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />-Methode oder an die <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />-Methode übergeben werden, oder legt diese Formatzeichenfolge fest.</summary>
        <value>Eine Zeichenfolge, die eine Formatzeichenfolge darstellt, die auf die Namen aller an die <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />-Methode oder die <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />-Methode übergebenen <paramref name="oldValues" />-Parameter angewendet wird. Der Standardwert ist "{0}" (null).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> Formatzeichenfolge wird nur auf primären Tasten, z. B. von identifiziert werden angewendet der `DataKeyNames` -Eigenschaft des zugeordneten datengebundenen Steuerelements oder in DELETE- und update-Szenarien, in dem der <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> Eigenschaft festgelegt ist, um die <xref:System.Web.UI.ConflictOptions.CompareAllValues>Wert und einen Satz von `oldValues` an die entsprechenden Datenmethode übergeben werden. In diesem Fall wird die Formatzeichenfolge angewendet, um jeder Parametername in der `oldValues` Auflistung.  
  
 Zwei gängige Szenarien, in dem Sie ändern, die <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> Eigenschaft lauten wie folgt:  
  
-   Um zwischen der alten und neuen Werte in Updates zu unterscheiden. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> -Wertparameter, für die ursprünglichen und die neuen Werte hinzugefügt werden die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung. Ohne die Formatierungszeichenfolge würde zwei Parameter mit dem gleichen Namen für jedes Datenfeld erstellt werden. Ändern Sie den Namen des ursprünglichen Wertparameters, können Sie die Daten an die ursprüngliche Datenquelle Konflikte erkennen und Vergleichen von Schlüsselwerten vergleichen.  
  
-   Einige visuelle Designer Implementieren einer bestimmten Benennungsschema für den ursprünglichen Werten und Schlüsseln.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Fügt einen <see cref="E:System.Web.UI.Page.LoadComplete" />-Ereignishandler zum <see cref="T:System.Web.UI.Page" />-Steuerelement hinzu, das das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ereignishandler, der hinzugefügt wird die <xref:System.Web.UI.WebControls.SqlDataSource> -Objekt Updates der <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Werte. Wenn die Werte aktualisiert werden, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst, und alle Steuerelemente, die gebunden sind die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement zu binden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des .NET Framework-Datenanbieters ab, mit dem das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement eine Bindung zu einer zugrunde liegenden Datenquelle herstellt, oder legt diesen Namen fest.</summary>
        <value>Der Name des von der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> verwendeten Datenanbieters, andernfalls der ADO.NET-Anbieter für Microsoft SQL Server (wenn kein Anbieter festgelegt wurde). Standardmäßig wird der ADO.NET-Anbieter für Microsoft SQL Server verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework enthält die folgenden Datenanbieter:  
  
-   Die <xref:System.Data.SqlClient?displayProperty=nameWithType> -Anbieter ist der standardmäßige .NET Framework-Datenanbieter für SQL Server.  
  
-   Die <xref:System.Data.OleDb?displayProperty=nameWithType> -Anbieter ist der .NET Framework-Datenanbieter für OLE DB.  
  
-   Die <xref:System.Data.Odbc?displayProperty=nameWithType> -Anbieter ist der .NET Framework-Datenanbieter für ODBC.  
  
-   Die <xref:System.Data.OracleClient?displayProperty=nameWithType> -Anbieter ist der .NET Framework-Datenanbieter für Oracle.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> ist nie-Eigenschaftensatz auf den Namen des nicht verwalteten ADO.NET-Anbieters, z. B. `MSDAORA`. Weitere Informationen finden Sie unter [auswählen-Daten mit SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb).  
  
 Wenn Sie ändern die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst, und alle Steuerelemente, die gebunden sind die <xref:System.Web.UI.WebControls.SqlDataSource> erneut binden.  
  
 Eine Liste der verfügbaren Anbieter ist angegeben, der `DbProviderFactories` -Unterabschnitt des der `system.data` Abschnitt der Datei "Machine.config".  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie für die Verbindung eine SQL Server-Datenbank mithilfe des standardmäßigen .NET Framework-Datenanbieter für SQL Server für die <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement, das <xref:System.Data.SqlClient?displayProperty=nameWithType>. Im zweiten Codebeispiel wird veranschaulicht, wie die Verbindung mit einer ODBC-Datenbank mithilfe der .NET Framework-Datenanbieter für ODBC, der <xref:System.Data.Odbc?displayProperty=nameWithType>.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie zur Verbindung mit der Standard-Datenanbieter für SQL Server-Datenbank die <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement, das <xref:System.Data.SqlClient?displayProperty=nameWithType>. Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> Eigenschaft nicht ausdrücklich festgelegt ist, wird der Standardanbieter verwendet. Die <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft ist anbieterspezifisch.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird, die funktionell dem vorherigen Beispiel identisch ist, veranschaulicht, wie die Verbindung mit einer ODBC-Datenbank mithilfe der .NET Framework-Datenanbieter für ODBC, der <xref:System.Data.Odbc?displayProperty=nameWithType>. Die <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft wird festgelegt, auf den Namen des einen ODBC-Datenquellennamen (DSN), die für die Verbindung mit der ODBC-Datenbank verwendet wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/CS/odbc1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/VB/odbc1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert den aktuellen Ansichtszustand des <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelements.</summary>
        <returns>Ein Objekt, das den gespeicherten Zustand von <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">Ein <see cref="T:System.Web.UI.DataSourceSelectArguments" />-Objekt, das zum Anfordern von Datenvorgängen verwendet wird, die über allgemeine Vorgänge zum Datenabruf hinausgehen.</param>
        <summary>Ruft Daten aus der zugrunde liegenden Datenbank mithilfe der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />-SQL-Zeichenfolge und aller Parameter in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />-Auflistung ab.</summary>
        <returns>Eine <see cref="T:System.Collections.IEnumerable" />-Liste mit Datenzeilen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode wird automatisch aufgerufen, während die <xref:System.Web.UI.Control.PreRender> Phase des Lebenszyklus der Seite. Wird aufgerufen, durch die datengebundenen Steuerelemente, die an angehängt wurden eine <xref:System.Web.UI.WebControls.SqlDataSource> steuern Sie über ihre <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> Eigenschaft.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> Methode gibt ein <xref:System.Data.DataView> Objekt, wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> Wert. Die <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> Methode gibt ein <xref:System.Data.IDataReader> Objekt, wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> Wert. Schließen der <xref:System.Data.IDataReader> Objekt, wenn Sie die Daten gelesen haben.  
  
 Vor der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Vorgang wird ausgeführt, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> Ereignis. Sie können dieses Ereignis, um die Werte der Parameter zu untersuchen und eine Verarbeitung vor Durchführung behandeln die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Vorgang.  
  
 Nach der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Vorgang abgeschlossen wurde, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Selected> Ereignis. Sie können dieses Ereignis, um alle Fehlercodes und Rückgabewerte zu untersuchen und die Nachbearbeitung durchführen behandeln.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaftensatz auf <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> und das Zwischenspeichern aktiviert ist, wird die <xref:System.Web.UI.WebControls.SqlDataSource> Objekt ruft Daten ab und speichert Daten im Cache während der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Vorgang. Der Cache wird erstellt, verworfen oder aktualisiert basierend auf das Verhalten beim Zwischenspeichern, die durch die Kombination von angegeben wird die <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> Eigenschaften.  
  
> [!IMPORTANT]
>  Wenn Sie Clientidentitätswechsel unter Microsoft Windows-Authentifizierung verwenden, werden die Daten zwischengespeichert, wenn der erste Benutzer die Daten zugreift. Wenn ein anderer Benutzer die gleichen Daten anfordert, werden die Daten aus dem Cache abgerufen. Die Daten werden nicht von einem anderen Aufruf an die Datenbank, überprüfen Sie, ob der Benutzer Zugriff auf die Daten abgerufen. Wenn Sie erwarten, dass mehrere Benutzer Zugriff auf die Daten, und jede Abrufen von Daten durch die Sicherheitskonfigurationen für die Datenbank überprüft werden soll, verwenden Sie kein Zwischenspeichern.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> -Eigenschaftensatz auf <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> und ein <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> Eigenschaft angegeben wurde, der Filterausdruck wird ausgewertet, mit allen bereitgestellten <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Eigenschaften und der resultierende Filter wird der Liste der Daten angewendet, während die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>Vorgang.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> Methode der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement. Beim Ausführen eines Vorgangs Daten abrufen, die <xref:System.Web.UI.WebControls.SqlDataSourceView> erstellt eine <xref:System.Data.Common.DbCommand> Objekt mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Text und alle zugeordneten <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> Werte und führt dann die <xref:System.Data.Common.DbCommand> für die zugrunde liegenden Datenbank.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Den folgenden Beispielen wird veranschaulicht, wie Sie programmgesteuert Aufrufen der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode und Festlegen von Werten basierend auf dem Ergebnis der Abfrage. Im folgende Beispiel wird gezeigt, der deklarativen Code für die Web-Steuerelemente.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx#1)]  
  
 Das folgende Beispiel zeigt, wie Sie programmgesteuert Aufrufen der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode. Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement gibt eine ganze Zahl zurück. Der Wert der Ganzzahl dient zum Festlegen des Texts der eine <xref:System.Web.UI.WebControls.Label> Steuerelement und bestimmt, ob zum Anzeigen einer <xref:System.Web.UI.WebControls.HyperLink> Steuerelement.  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Objekt kann keine Verbindung mit der zugrunde liegenden Datenquelle herstellen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die SQL-Zeichenfolge ab, die vom <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement zum Abrufen von Daten aus der zugrunde liegenden Datenbank verwendet wird, oder legt diese Zeichenfolge fest.</summary>
        <value>Eine SQL-Zeichenfolge oder der Name einer gespeicherten Prozedur mit der die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> Daten abruft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft einer SQL-Abfrage oder den Namen einer gespeicherten Prozedur darstellt, und wird verwendet, durch die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode zum Abrufen von Daten aus einer SQL Server-Datenbank. Wenn Sie ein Sternchen (*) in der Select-Befehl verwenden, um alle Spalten auszuwählen, und wenn Sie die automatische codegenerierung verwenden, um Ausführen von Update oder delete-Operationen, sicher, dass Stellen enthalten keine Spalten Leerzeichen in ihren Namen.  
  
 Da die jeweiligen Datenbankprodukte verschiedene SQL-Varianten verwenden, hängt die Syntax der SQL-Zeichenfolge vom derzeit verwendeten ADO.NET-Anbieter ab, der durch die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>-Eigenschaft identifiziert wird. Wenn die SQL-Zeichenfolge eine parametrisierte Abfrage oder ein parametrisierter Befehl ist, hängt der Platzhalter des Parameters ebenfalls vom verwendeten ADO.NET-Anbieter ab. Angenommen, wenn der Anbieter ist die <xref:System.Data.SqlClient?displayProperty=nameWithType>, also der Standardanbieter für die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, die der Platzhalter des Parameters ist `'@parameterName'`. Jedoch, wenn der Anbieter, um festgelegt ist die <xref:System.Data.Odbc?displayProperty=nameWithType> oder <xref:System.Data.OleDb?displayProperty=nameWithType>, der Platzhalter des Parameters ist `'?'`. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft kann eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur sein, wenn die Datenquelle gespeicherte Prozeduren unterstützt.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Aus Gründen der Sicherheit der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> -Eigenschaft wird nicht gespeichert und Ansichtszustand. Es ist möglich, den Inhalt der Ansichtszustand auf dem Client zu decodieren, kann das Speichern vertraulicher Informationen über die Datenbankstruktur in der Sicht Status eine Schwachstelle der Offenlegung von Informationen führen.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Text, der eine einfache SQL-Abfrage zum Abrufen von Daten aus einer ODBC-kompatiblen Datenbank, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.GridView> Steuerelement. Das zweite Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Text, der den Namen einer gespeicherten Prozedur und die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> Wert zum Abrufen von Daten aus einer Microsoft SQL Server-Datenbank, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.DropDownList> Steuerelement.  
  
 In beiden Beispielen ist es nicht erforderlich, explizit aufzurufen der <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode da steuern, die von datengebundenen Steuerelementen, die an die Datenquelle angefügt werden über die <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> Eigenschaft wird automatisch aufrufen, die <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> Methode während der <xref:System.Web.UI.Control.PreRender> Phase.  
  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Text, der eine einfache SQL-Abfrage zum Abrufen von Daten aus einer ODBC-kompatiblen Datenbank, und zeigen Sie es in einem <xref:System.Web.UI.WebControls.GridView> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/CS/odbc4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/VB/odbc4vb.aspx#1)]  
  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Text, der den Namen einer gespeicherten Prozedur und die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> Wert zum Abrufen von Daten aus einer SQL Server-Datenbank, und zeigen Sie es in ein <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft kann eine SQL-Abfrage oder den Namen einer gespeicherten Prozedur sein, wenn die Datenquelle gespeicherte Prozeduren unterstützt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />-Eigenschaft eine SQL-Abfrage oder der Name einer gespeicherten Prozedur ist, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />-Werte. Der Standardwert ist der <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Text, der den Namen einer gespeicherten Prozedur und die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> Eigenschaft, um die <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> -Wert, um Daten aus einer Microsoft SQL Server-Datenbank abgerufen und in eine <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Datenabrufvorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Selected> Ereignis untersuchen Sie die Werte der Ausgabeparameter enthalten, nachdem ein Vorgang zum Abrufen von Daten abgeschlossen wurde. Die Output-Parameter stehen über die <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> -Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Datenabrufvorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> Ereignis, um weitere Initialisierungsvorgänge auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement führt die select-Vorgang. Der select-Argumente stehen über die <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs> -Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung mit den Parametern ab, die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />-Eigenschaft des dem <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />-Steuerelement zugeordneten <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Objekts verwendet werden.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" />, die die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />-Eigenschaft verwendeten Parameter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft enthält eine parametrisierte SQL-Abfrage, die <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> Auflistung enthält alle <xref:System.Web.UI.WebControls.Parameter> Objekte, die den Parameterplatzhaltern in der SQL-Zeichenfolge entsprechen.  
  
 Je nach den ADO.NET-Anbieter, die Reihenfolge der Parameter in der <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> -Auflistung möglicherweise wichtig. Die <xref:System.Data.OleDb?displayProperty=nameWithType> und <xref:System.Data.Odbc?displayProperty=nameWithType> Anbieter ordnen die Parameter in der Auflistung nach der Reihenfolge, die die Parameter in der parametrisierten SQL-Abfrage angezeigt werden. Die <xref:System.Data.SqlClient?displayProperty=nameWithType> Anbieter, der den Standard-ADO.NET-Anbieter ist für die <xref:System.Web.UI.WebControls.SqlDataSource> steuern, ordnet die Parameter in der Auflistung durch den Namen des Parameters mit einem Platzhalteralias in der SQL-Abfrage übereinstimmt. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Abrufen von Daten aus der Northwind-Datenbank in Microsoft SQL Server durch Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> Eigenschaft, um eine SQL-Abfrage. Die SQL-Abfrage ist parametrisiert und der Platzhalter in der <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> -Eigenschaft wird abgeglichen, um die <xref:System.Web.UI.WebControls.ControlParameter> -Objekt, das hinzugefügt wird die <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> Auflistung. Die <xref:System.Web.UI.WebControls.DropDownList> steuern, welche die <xref:System.Web.UI.WebControls.ControlParameter> gebunden ist, fungiert als Filter für die angezeigt wird, in der <xref:System.Web.UI.WebControls.ListBox> Steuerelement.  
  
 Weitere Informationen zu anderen Arten von Parametern, die Sie verwenden können, finden Sie unter der <xref:System.Web.UI.WebControls.Parameter> -Klassenübersicht.  
  
> [!NOTE]
>  Da der Parameter in einer WHERE-Klausel, die Verwendung von verwendet wird die <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> Eigenschaft im Codebeispiel ist funktionell gleichwertig mit der <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> und <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> Eigenschaften.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen eines Parameters für eine gespeicherte Prozedur ab, mit der abgerufene Daten sortiert werden, sofern der Abruf mit einer gespeicherten Prozedur erfolgt ist, oder legt diesen Namen fest.</summary>
        <value>Der Name eines Parameters für eine gespeicherte Prozedur, mit der abgerufene Daten sortiert werden, sofern der Abruf mit einer gespeicherten Prozedur erfolgt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> Eigenschaft ausgewertet wird nur bei der SQL-Befehl enthalten die <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> Eigenschaft ist der Name einer gespeicherten Prozedur. In diesem Fall, wenn die <xref:System.Web.UI.WebControls.SqlDataSource.SortParameterName%2A> Eigenschaft festgelegt ist, enthält den Namen eines Parameters, der zum Sortieren der Ergebnisse der gespeicherten Prozedur verwendet wird.  
  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> Eigenschaft festgelegt ist, wird es vorangestellt ist die <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine durch Semikolons getrennte Zeichenfolge ab, die die für die Microsoft SQL Server-Cacheabhängigkeit zu verwendenden Datenbanken und Tabellen angibt, oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die die für die SQL Server-Cacheabhängigkeit zu verwendenden Datenbanken und Tabellen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement unterstützt eine optionale Ablaufrichtlinie basierend auf den <xref:System.Web.Caching.SqlCacheDependency> Objekt für den Datencache (der Dienst muss für den Datenbankserver konfiguriert werden).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> Zeichenfolge identifiziert, Datenbanken und Tabellen entsprechend dem gleichen Format, mit dem die `@ Page` Richtlinie, wobei der erste Teil der Zeichenfolge eine Verbindungszeichenfolge zu einer Microsoft SQL Server-Datenbank ist, gefolgt von einem Doppelpunkt als Trennzeichen und Schließlich wird der Name der Datenbanktabelle (z. B. `"connectionstring1:table1"`). Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> Eigenschaft hängt von mehreren Tabellen, die Zeichenfolge und Tabellennamen-Paare für Verbindungszeichenfolgen werden durch Semikolons getrennt (z. B. `"connectionstring1:table1";connectionstring2:table2"`).  
  
> [!IMPORTANT]
>  Wenn Sie Clientidentitätswechsel unter Microsoft Windows-Authentifizierung verwenden, werden die Daten zwischengespeichert, wenn der erste Benutzer die Daten zugreift. Wenn ein anderer Benutzer die gleichen Daten anfordert, werden die Daten aus dem Cache abgerufen. Die Daten werden nicht von einem anderen Aufruf an die Datenbank, überprüfen Sie, ob der Benutzer Zugriff auf die Daten abgerufen. Wenn Sie erwarten, dass mehrere Benutzer Zugriff auf die Daten, und jeder Abruf auf Daten, die von den Sicherheitskonfigurationen für die Datenbank überprüft werden soll, verwenden Sie kein Zwischenspeichern.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine SQL Server-Cacheabhängigkeit erstellen und Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> Eigenschaft von einem <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement. In diesem Beispiel wird die Datenbank alle 120 Sekunden abgerufen. Wenn die Daten in der Northwind Traders Employees-Tabelle geändert wird, die während der Zeit, alle Daten, die von zwischengespeichert werden die <xref:System.Web.UI.WebControls.SqlDataSource> steuern und vom angezeigt der <xref:System.Web.UI.WebControls.GridView> Steuerelement wird aktualisiert, indem die <xref:System.Web.UI.WebControls.SqlDataSource> steuern Sie das nächste Mal wird die Datenbank abgerufen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/CS/sql23cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/VB/sql23vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verfolgt Änderungen des Ansichtszustands für das <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement, sodass die Änderungen im <see cref="T:System.Web.UI.StateBag" />-Objekt für das Steuerelement gespeichert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.TrackViewState%2A> Methode wird überschrieben, um den Ausgangspunkt beginnen nachzuverfolgen und zu speichern von Änderungen an das Steuerelement im Rahmen des Ansichtszustands für das Steuerelement zu kennzeichnen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt mithilfe der <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />-SQL-Zeichenfolge und allen Parametern, die in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />-Auflistung vorhanden sind, einen Aktualisierungsvorgang aus.</summary>
        <returns>Ein Wert, der die Anzahl der aktualisierten Zeilen in der zugrunde liegenden Datenbank darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode wird automatisch aufgerufen, indem Sie die <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, und <xref:System.Web.UI.WebControls.FormView> während Postbacks gesteuert werden, wenn die Daten geändert wurden. Für Daten, die in anderen Steuerelementen geändert wurde die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode kann explizit aufgerufen werden, beim Postback während der <xref:System.Windows.Forms.Form.Load> Ereignis.  
  
 Vor der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Vorgang wird ausgeführt, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Updating> Ereignis. Sie können dieses Ereignis, um die Werte der Parameter zu untersuchen und ausführen, eine Verarbeitung vor Verarbeiten einer <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Vorgang.  
  
 Nach der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Vorgang abgeschlossen wurde, die <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.SqlDataSource.Updated> Ereignis. Sie können dieses Ereignis, um alle Fehlercodes und Rückgabewerte zu untersuchen und die Nachbearbeitung durchführen behandeln.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> Methode der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement. Einen Aktualisierungsvorgang Ausführen der <xref:System.Web.UI.WebControls.SqlDataSourceView> erstellt eine <xref:System.Data.Common.DbCommand> -Objekt unter Verwendung der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Text und alle zugeordneten <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Eigenschaften, und führt dann die <xref:System.Data.Common.DbCommand> Objekt für die zugrunde liegenden Datenbank.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Updating> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement zum Anzeigen von Daten in eine <xref:System.Web.UI.WebControls.DropDownList> steuern und Aktualisieren von Daten bei der **Absenden** geklickt wird. Im zweiten Codebeispiel wird veranschaulicht, wie Daten angezeigt, die aus einer Microsoft SQL Server-Datenbank abgerufen wird eine <xref:System.Web.UI.WebControls.DropDownList> steuern und aktualisieren Sie den Datensatz mit einem <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement zum Anzeigen von Daten in eine <xref:System.Web.UI.WebControls.DropDownList> steuern und Aktualisieren von Daten bei der **Absenden** geklickt wird. Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft wird festgelegt, mit der eine parametrisierte SQL­Anweisung und zwei <xref:System.Web.UI.WebControls.ControlParameter> Parameter hinzugefügt werden die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Auflistung. Wenn die **Absenden** Schaltfläche geklickt wird, die <xref:System.Web.UI.WebControls.Button.OnClick%2A> Ereignis behandelt wird, zum Aufrufen der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode explizit.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten angezeigt, die aus einer SQL Server-Datenbank abgerufen wird eine <xref:System.Web.UI.WebControls.DropDownList> steuern und aktualisieren Sie den Datensatz mit einem <xref:System.Web.UI.WebControls.TextBox> Steuerelement. Im Beispiel wird gezeigt, wie Sie verwenden können eine <xref:System.Data.Common.DbTransaction> Objekt bereits verwendeten Transaktionskontext hinzugefügt werden, wenn mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement, um Daten zu aktualisieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> kann keine Verbindung mit der zugrunde liegenden Datenquelle herstellen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die SQL-Zeichenfolge ab, die vom <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelement zum Aktualisieren von Daten in der zugrunde liegenden Datenbank verwendet wird, oder legt diese Zeichenfolge fest.</summary>
        <value>Eine SQL-Zeichenfolge, die von der <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> zum Aktualisieren von Daten verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> einer SQL-Abfrage oder den Namen einer gespeicherten Prozedur darstellt, und wird verwendet, durch die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode.  
  
 Da die jeweiligen Datenbankprodukte verschiedene SQL-Varianten verwenden, hängt die Syntax der SQL-Zeichenfolge vom derzeit verwendeten ADO.NET-Anbieter ab, der durch die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>-Eigenschaft identifiziert wird. Wenn die SQL-Zeichenfolge eine parametrisierte Abfrage oder ein parametrisierter Befehl ist, hängt der Platzhalter des Parameters ebenfalls vom verwendeten ADO.NET-Anbieter ab. Angenommen, wenn der Anbieter ist die <xref:System.Data.SqlClient?displayProperty=nameWithType>, also der Standardanbieter für die <xref:System.Web.UI.WebControls.SqlDataSource> -Klasse, die der Platzhalter des Parameters ist `'@parameterName'`. Jedoch, wenn der Anbieter, um festgelegt ist die <xref:System.Data.Odbc?displayProperty=nameWithType> oder <xref:System.Data.OleDb?displayProperty=nameWithType>, der Platzhalter des Parameters ist `'?'`. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft kann eine SQL-Zeichenfolge oder den Namen einer gespeicherten Prozedur sein, wenn die Datenquelle gespeicherte Prozeduren unterstützt.  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Aus Gründen der Sicherheit der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> -Eigenschaft wird nicht gespeichert und Ansichtszustand. Es ist möglich, den Inhalt der Ansichtszustand auf dem Client zu decodieren, kann das Speichern vertraulicher Informationen über die Datenbankstruktur in der Sicht Status eine Schwachstelle der Offenlegung von Informationen führen.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft der <xref:System.Web.UI.WebControls.SqlDataSource> steuern und Aktualisieren von Daten in einer Microsoft SQL Server-Datenbank mithilfe der <xref:System.Web.UI.WebControls.GridView> Steuerelement. Im zweiten Codebeispiel wird veranschaulicht, wie zum Aktualisieren von Daten in einer ODBC-Datenbank mithilfe der <xref:System.Web.UI.WebControls.GridView> Steuerelement.  
  
 Das folgende Codebeispiel veranschaulicht das Festlegen der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSource> steuern und Aktualisieren von Daten in einer SQL Server-Datenbank mithilfe der <xref:System.Web.UI.WebControls.GridView> Steuerelement. Die <xref:System.Web.UI.WebControls.GridView> füllt automatisch die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> -Auflistung, ableiten von den Parametern aus der <xref:System.Web.UI.WebControls.BoundField> Objekten und ruft die <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode beim der **Update** Link auf die bearbeitbaren <xref:System.Web.UI.WebControls.GridView>ausgewählt ist. Dieses Beispiel umfasst auch die Nachbearbeitung: Nachdem ein Datensatz aktualisiert wurde, wird eine e-Mail-Benachrichtigung gesendet.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird, die funktionell identisch zum vorherigen Codebeispiel wird veranschaulicht, wie zum Aktualisieren von Daten in einer ODBC-Datenbank mithilfe der <xref:System.Web.UI.WebControls.GridView> Steuerelement. Die <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> festgelegt ist, um den ADO.NET-Anbieter für ODBC, der <xref:System.Data.Odbc?displayProperty=nameWithType>, und die <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Eigenschaft auf den Namen des einen ODBC-Datenquellennamen (DSN) festgelegt ist.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Text in der <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />-Eigenschaft eine SQL-Anweisung oder der Name einer gespeicherten Prozedur ist, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />-Werte. Der Standardwert ist der <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" />-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein Aktualisierungsvorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Updated> Ereignis untersuchen Sie die Werte der Ausgabeparameter enthalten, nachdem ein Updatevorgang abgeschlossen wurde. Die Output-Parameter stehen über die <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> -Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie anzeigen und Aktualisieren von Daten, die aus einer ODBC-Datenbank im abgerufen werden ein <xref:System.Web.UI.WebControls.GridView> Steuerelement. Nachdem ein Datensatz wurde erfolgreich aktualisiert wurde, die <xref:System.Web.UI.WebControls.SqlDataSource.Updated> Ereignis erfolgt durch einen Ereignishandler an einen Nachverarbeitungsschritt ausführen, in denen eine e-Mail-Benachrichtigung gesendet wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung mit den Parametern ab, die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />-Eigenschaft des dem <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />-Steuerelement zugeordneten <see cref="T:System.Web.UI.WebControls.SqlDataSource" />-Steuerelements verwendet werden.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" />, die die von der <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />-Eigenschaft verwendeten Parameter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> Eigenschaft enthält eine parametrisierte SQL-Abfrage, die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Auflistung enthält alle <xref:System.Web.UI.WebControls.Parameter> Objekte, die den Parameterplatzhaltern in der SQL-Zeichenfolge entsprechen.  
  
 Parameternamen beeinträchtigt werden könnte, indem Sie die <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> Eigenschaft, insbesondere, wenn der Name einen Primärschlüssel, z. B. einen Schlüssel mit angegeben bezeichnet der `DataKeyNames` -Eigenschaft des datengebundenen Steuerelements oder in DELETE- und update-Szenarien, in denen die <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> Eigenschaftensatz der <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert und einen Satz von `oldValues` an die entsprechenden Datenmethode übergeben werden. In diesem Fall wird die Formatzeichenfolge angewendet, um jeder Parametername in der `oldValues` Auflistung.  
  
 Die Reihenfolge der Parameter in der <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Auflistung möglicherweise wichtig ist, abhängig von der Anbieter ADO.NET. Die <xref:System.Data.OleDb?displayProperty=nameWithType> und <xref:System.Data.Odbc?displayProperty=nameWithType> Anbieter ordnen die Parameter in der Auflistung nach der Reihenfolge, die die Parameter in der parametrisierten SQL-Abfrage angezeigt werden. Die <xref:System.Data.SqlClient?displayProperty=nameWithType> Anbieter, der den Standard-ADO.NET-Anbieter ist für die <xref:System.Web.UI.WebControls.SqlDataSource> steuern, ordnet die Parameter in der Auflistung durch den Namen des Parameters mit einem Platzhalteralias in der SQL-Abfrage übereinstimmt. Weitere Informationen zu parametrisierten SQL-Abfragen und Befehlen finden Sie unter [Verwenden von Parametern mit dem SqlDataSource-Steuerelement](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
 Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.SqlDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement zum Anzeigen von Daten in eine <xref:System.Web.UI.WebControls.DropDownList> steuern und Aktualisieren von Daten bei der **Absenden** geklickt wird. Die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> festgelegt ist, mit der eine parametrisierte SQL­Anweisung und zwei <xref:System.Web.UI.WebControls.ControlParameter> Parameter hinzugefügt werden die <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> Auflistung. Wenn die **Absenden** Schaltfläche geklickt wird, die <xref:System.Web.UI.WebControls.Button.OnClick%2A> Ereignis behandelt wird, zum Aufrufen der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Methode explizit.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben, die ein potenzielles darstellen akzeptiert Sicherheitsrisiko, und Einfügen von Werten in Parameter ohne Validierung, die auch ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Aktualisierungsvorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.SqlDataSource.Updating> Ereignis, um weitere Initialisierungsvorgänge auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement führt die Update-Vorgang. Die Verbindung mit der zugrunde liegenden Datenquelle ist noch nicht geöffnet, wenn der Handler Ereignisdelegat aufgerufen wird. Aus diesem Grund kann nicht direkt abgebrochen der <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> Datenbankvorgang durch Aufrufen der <xref:System.Data.Common.DbCommand.Cancel%2A> Methode für die <xref:System.Data.Common.DbCommand> -Objekt, das vom verfügbar gemacht wird die <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> Objekt. Sie können jedoch den Datenbankvorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> auf `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!IMPORTANT]
>  Werte werden in Parameter ohne Validierung, eingefügt, die ein potenzielles darstellen Sicherheitsrisiko. Verwenden der <xref:System.Web.UI.WebControls.SqlDataSource.Updating> Ereignis, um Parameterwerte zu überprüfen, bevor Sie die Abfrage ausführen. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Daten angezeigt, die aus einer Microsoft SQL Server-Datenbank abgerufen wird eine <xref:System.Web.UI.WebControls.DropDownList> steuern und aktualisieren Sie den Datensatz mit einem <xref:System.Web.UI.WebControls.TextBox> Steuerelement. Im Beispiel wird gezeigt, wie Sie verwenden können eine <xref:System.Data.Common.DbTransaction> Objekt bereits verwendeten Transaktionskontext hinzugefügt werden, wenn mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> Steuerelement, um Daten zu aktualisieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>
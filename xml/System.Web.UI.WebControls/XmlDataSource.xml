<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e80040e0b6f88a7b20d337228c83fb1384c6a83f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69399197" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine XML-Datenquelle für datengebundene Steuerelemente dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Quellen von XML-Daten](#source_of_xml_data)  
  
-   [Aktualisieren von XML-Daten](#updating_xml_data)  
  
-   [Angeben einer XSL-Transformation](#specifying_an_xsl_transformation)  
  
-   [Filtern mithilfe eines XPath-Ausdrucks](#filtering_using_an_xpath_expression)  
  
-   [Zwischenspeichern](#caching)  
  
-   [Zusätzliche Features](#additional_features)  
  
-   [Daten Ansichts Objekt](#data_view_object)  
  
-   [Deklarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement ist ein Datenquellen-Steuerelement, das XML-Daten für Daten gebundene Steuerelemente darstellt. Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement kann von Daten gebundenen Steuerelementen verwendet werden, um sowohl hierarchische als auch tabellarische Daten anzuzeigen. Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement wird in der Regel zum Anzeigen hierarchischer XML-Daten in schreibgeschützten Szenarien verwendet. Da das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement <xref:System.Web.UI.HierarchicalDataSourceControl> die-Klasse erweitert, funktioniert es mit hierarchischen Daten. Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement implementiert <xref:System.Web.UI.IDataSource> auch die-Schnittstelle und funktioniert mit Tabellen-oder Listenformat Daten.  
  
> [!NOTE]
>  Aus Sicherheitsgründen wird keine <xref:System.Web.UI.WebControls.XmlDataSource> der Steuerelement Eigenschaften im Ansichts Zustand gespeichert. Da es technisch möglich ist, den Inhalt des Ansichts Zustands auf dem Client zu decodieren, kann das Speichern vertraulicher Informationen über die Datenstruktur oder ihren Inhalt Ihnen die Gefahr einer Offenlegung von Informationen offenlegen. Beachten Sie Folgendes: Wenn Sie Informationen wie eine <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Eigenschaft im Ansichts Zustand speichern müssen, können Sie die Verschlüsselung aktivieren, um den Inhalt zu schützen, indem Sie die `@ Page` -Direktive festlegen <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> .  
  
 Seiten Entwickler verwenden das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement, um XML-Daten mithilfe Daten gebundener Steuerelemente anzuzeigen.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>Quellen von XML-Daten  
 Der <xref:System.Web.UI.WebControls.XmlDataSource> lädt XML-Daten in der Regel aus einer XML-Datei, die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> durch die-Eigenschaft angegeben wird. XML-Daten können auch direkt vom Datenquellen-Steuerelement in Form einer Zeichenfolge <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> mithilfe der-Eigenschaft gespeichert werden. Wenn Sie die XML-Daten transformieren möchten, bevor Sie von einem Daten gebundenen Steuerelement angezeigt werden, können Sie ein Extensible Stylesheet Language-Stylesheet (XSL) für die Transformation bereitstellen. Wie bei den XML-Daten laden Sie das Stylesheet in der Regel aus einer Datei, die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> durch die-Eigenschaft angegeben wird, aber Sie können es auch direkt mithilfe <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> der-Eigenschaft in Form einer Zeichenfolge speichern.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>Aktualisieren von XML-Daten  
 Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement wird häufig in schreibgeschützten Daten Szenarien verwendet, in denen ein Daten gebundenes Steuerelement XML-Daten anzeigt. Sie können jedoch auch das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement verwenden, um XML-Daten zu bearbeiten. Um die XML-Daten zu bearbeiten, <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> rufen Sie die- <xref:System.Xml.XmlDataDocument> Methode auf, um ein Objekt abzurufen, das eine Speicher interne Darstellung der XML-Daten darstellt. Sie können das Objektmodell verwenden, das von <xref:System.Xml.XmlDataDocument> dem <xref:System.Xml.XmlNode> -Objekt und dem-Objekt verfügbar gemacht wird, oder einen XPath-Filter Ausdruck verwenden, um Daten im Dokument zu bearbeiten. Wenn Sie Änderungen an der Speicher internen Darstellung der XML-Daten vorgenommen haben, können Sie Sie auf dem Datenträger speichern, indem <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Sie die-Methode aufrufen.  
  
 Es gibt einige Einschränkungen für die Bearbeitungsfunktionen des <xref:System.Web.UI.WebControls.XmlDataSource> -Steuer Elements:  
  
-   Die XML-Daten müssen aus einer XML-Datei geladen werden, die von <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> der-Eigenschaft angegeben wird, nicht aus Inline <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> -XML, das in der-Eigenschaft angegeben ist.  
  
-   In der-Eigenschaft oder <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> der-Eigenschaft kann keine XSLT-Transformation angegeben werden.  
  
-   Die <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> -Methode verarbeitet keine gleichzeitigen Speichervorgänge durch unterschiedliche Anforderungen. Wenn mehr als ein Benutzer eine XML-Datei über den <xref:System.Web.UI.WebControls.XmlDataSource>bearbeitet, gibt es keine Garantie dafür, dass alle Benutzer mit denselben Daten arbeiten. Es ist auch möglich, dass <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> ein-Vorgang aufgrund derselben Parallelitäts Probleme fehlschlägt.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Angeben einer XSL-Transformation  
 Ein allgemeiner Vorgang, der mit XML-Daten ausgeführt wird, wandelt ihn von einem XML-DataSet in einen anderen um. Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement unterstützt XML <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> -Transformationen mit der-Eigenschaft und der-Eigenschaft, die ein XSL-Stylesheet angeben, das auf XML-Daten angewendet werden soll <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> , bevor es an ein Daten gebundenes Steuerelement übermittelt wird. die- <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft ermöglicht Ihnen Geben Sie dynamische XSLT-Stylesheet-Argumente an, die von einem XSL-Stylesheet während der Transformation verwendet werden sollen. Wenn Sie einen XPath-Filter Ausdruck mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft angeben, wird er nach der Transformation angewendet.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.XmlDataSource> -Klasse verwendet die veraltet <xref:System.Xml.Xsl.XslTransform> -Klasse, um XSL-Transformationen auszuführen. Wenn Sie Stylesheet-Funktionen verwenden möchten, die nach der <xref:System.Xml.Xsl.XslTransform> veralteten-Klasse eingeführt wurden, wenden Sie die Transformationen manuell mithilfe der <xref:System.Xml.Xsl.XslCompiledTransform> -Klasse an.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>Filtern mithilfe eines XPath-Ausdrucks  
 Standardmäßig lädt das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement alle XML-Daten in der XML-Datei, <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> die durch die-Eigenschaft identifiziert <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> wird, oder es wurde Inline in der-Eigenschaft gefunden. Sie können die Daten jedoch mithilfe eines XPath-Ausdrucks filtern. Die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft unterstützt einen XPath-Syntax Filter, der angewendet wird, nachdem XML-Daten geladen und transformiert wurden.  
  
<a name="caching"></a>   
## <a name="caching"></a>Zwischenspeicherung  
 Aus Leistungsgründen ist das Caching standardmäßig für <xref:System.Web.UI.WebControls.XmlDataSource> das-Steuerelement aktiviert. Das Öffnen und Lesen einer XML-Datei auf dem Server jedes Mal, wenn eine Seite angefordert wird, kann die Leistung der Anwendung reduzieren. Durch das Caching können Sie die Verarbeitungs Last auf dem Server auf Kosten des Arbeitsspeichers auf dem Webserver verringern; in den meisten Fällen ist dies ein guter Kompromiss. Speichert Daten <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> `true` <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> automatisch zwischen, wenn die-Eigenschaft auf festgelegt ist, und die-Eigenschaft wird auf die Anzahl der Sekunden festgelegt, in denen der Cache Daten speichert, bevor der Cache für ungültig erklärt wird. <xref:System.Web.UI.WebControls.XmlDataSource> Mit dem <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> können Sie das Cachingverhalten des Datenquellen-Steuer Elements weiter optimieren.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Zusätzliche Funktionen  
 In der folgenden Tabelle werden zusätzliche Funktionen aufgelistet, die vom <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement unterstützt werden.  
  
|Funktion|Beschreibung|  
|----------------|-----------------|  
|Sortieren|Wird vom <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement nicht unterstützt.|  
|Filtern|Die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft kann verwendet werden, um die XML-Daten mit einem entsprechenden XPath-Ausdruck zu filtern.|  
|Paging|Wird vom <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement nicht unterstützt.|  
|Wird aktualisiert|Wird unterstützt, <xref:System.Xml.XmlDataDocument> indem direkt bearbeitet und dann <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> die-Methode aufgerufen wird.|  
|Wird gelöscht|Wird unterstützt, <xref:System.Xml.XmlDataDocument> indem direkt bearbeitet und dann <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> die-Methode aufgerufen wird.|  
|Einfügen|Wird unterstützt, <xref:System.Xml.XmlDataDocument> indem direkt bearbeitet und dann <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> die-Methode aufgerufen wird.|  
|Zwischenspeicherung|Standardmäßig aktiviert, wobei die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft auf 0 (unendlich) und die <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> -Eigenschaft auf <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>festgelegt ist.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>Daten Ansichts Objekt  
 Da das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement Daten gebundene Steuerelemente unterstützt, die hierarchische Daten und Steuerelemente anzeigen, die tabellarische Daten anzeigen, unterstützt das Datenquellen-Steuerelement mehrere Typen von Datenquellen Sicht-Objekten in den zugrunde liegenden XML-Daten. Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement ruft ein einzelnes <xref:System.Web.UI.WebControls.XmlDataSourceView> benanntes Objekt ab, wenn es mit einem Daten gebundenen Steuerelement verwendet wird, das Tabellendaten anzeigt. Die <xref:System.Web.UI.IDataSource.GetViewNames%2A> -Methode identifiziert diese einzelne benannte Sicht. Bei Verwendung mit einem Daten gebundenen Steuerelement, das hierarchische Daten anzeigt <xref:System.Web.UI.WebControls.XmlDataSource> , ruft das- <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> Steuerelement einen für jeden eindeutigen hierarchischen <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> Pfad ab, der an die-Methode übermittelt wird.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement <xref:System.Web.UI.WebControls.TreeView> mit einem-Steuerelement verwendet wird, um XML-Daten aus der XML-Beispieldatei anzuzeigen. Im zweiten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Steuerelement mit Vorlagen zum Anzeigen von XML-Daten verwendet wird.  
  
 Das folgende Codebeispiel veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement verwendet wird, um XML-Daten anzuzeigen. Das <xref:System.Web.UI.WebControls.XmlDataSource> lädt XML-Daten aus der XML-Datei, <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> die von der-Eigenschaft identifiziert wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> auf Vorlagen basierenden Steuerelement verwendet wird, um XML-Daten anzuzeigen. Das <xref:System.Web.UI.WebControls.Repeater> -Steuerelement verwendet einen XPath-Daten Bindungs Ausdruck zum Binden an Datenelemente innerhalb des XML- <xref:System.Web.UI.WebControls.XmlDataSource> Dokuments, das das darstellt. Weitere Informationen zu `XPath` und zur `XPathSelect` Daten Bindungs Syntax finden Sie in der <xref:System.Web.UI.XPathBinder> -Klasse.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne in Sekunden ab, in der das Datenquellen-Steuerelement abgerufene Daten zwischenspeichert, oder legt diese fest.</summary>
        <value>Die Anzahl von Sekunden, für die das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement die Ergebnisse eines Datenabrufvorgangs zwischenspeichert. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement speichert Daten automatisch zwischen, wenn Folgendes zutrifft:  
  
-   Die <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>-Eigenschaft ist auf `true` festgelegt.  
  
-   Die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft wird auf einen Wert größer als 0 festgelegt, der angibt, wie viele Sekunden der Cache Daten speichert, bevor der Cache für ungültig erklärt wird.  
  
 Jede Änderung <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> der-Eigenschaft oder der Inhalt der Datei, die die XML-Daten enthält, bewirkt, dass der Cache ungültig wird.  
  
 Standardmäßig ist die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft auf 0 festgelegt, was auf einen unbegrenzten Cache hinweist, und die Datenquelle speichert Daten, bis die XML-Datei, von der Sie abhängt, geändert wird.  
  
 Das Verhalten des Caches wird durch eine Kombination aus Dauer und <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Einstellung geregelt. Wenn <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> <xref:System.Web.UI.WebControls.XmlDataSource> <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>auf <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>festgelegt ist, speichert das-Steuerelement die Daten beim ersten Datenabruf Vorgang, speichert es im Arbeitsspeicher für die Zeit, die von angegeben wird, und gibt es für ungültig, nachdem die Zeitspanne abgelaufen ist. Der Cache wird dann beim nächsten Vorgang aktualisiert. Wenn <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> auf<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>festgelegt ist, speichert das Datenquellen-Steuerelement Daten beim ersten Datenabruf Vorgang zwischen, setzt jedoch das Zeitfenster, für das es den Cache enthält, bei jedem nachfolgenden Vorgang zurück. Der Cache läuft nur <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ab, wenn keine Aktivität für eine Zeit vorhanden ist, die seit dem letzten Datenabruf gleich ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die Zwischenspeicherung aktiviert <xref:System.Web.UI.WebControls.XmlDataSource> wird, wenn das-Steuerelement zum Anzeigen von Daten in einer XML-Datei verwendet wird Caching wird aktiviert, wenn <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> die-Eigenschaft auf `true` festgelegt <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ist und die auf die Anzahl der Sekunden festgelegt ist, die die Daten vom Datenquellen-Steuerelement zwischengespeichert werden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Cacheablaufrichtlinie ab, die in Kombination mit der Cachedauer das Verhalten des vom Datenquellen-Steuerelement verwendeten Caches bei der Zwischenspeicherung beschreibt, oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.DataSourceCacheExpiry" />-Werte. Die Standardeinstellung in der Richtlinie für den Cacheablauf ist <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten des Caches wird durch eine Kombination der <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -und- <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Einstellungen gesteuert. <xref:System.Web.UI.WebControls.XmlDataSource> <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>Wenn auf <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>festgelegt ist,speichertdieDatenbeimerstenDatenabrufVorgangzwischen,speichertSiefürdenvonangegebenenZeitraumimArbeitsspeicherundmachtSieungültig,nachdemdieZeitspanneabgelaufenist.<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Der Cache wird dann beim nächsten Vorgang aktualisiert. Wenn auf<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>festgelegt ist,speichertdasDatenquellen-SteuerelementDatenbeimerstenDatenabrufVorgangzwischen,setztjedochdasZeitfenster,fürdasesdenCacheenthält,beijedemnachfolgendenVorgangzurück.<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Der Cache läuft nur <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ab, wenn keine Aktivität für eine Zeit vorhanden ist, die seit dem letzten Datenabruf gleich ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die Zwischenspeicherung aktiviert <xref:System.Web.UI.WebControls.XmlDataSource> wird, wenn das-Steuerelement zum Anzeigen von Daten in einer XML-Datei verwendet wird Caching wird aktiviert, wenn <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> die-Eigenschaft auf `true` festgelegt <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ist und die auf die Anzahl der Sekunden festgelegt ist, die die Daten vom Datenquellen-Steuerelement zwischengespeichert werden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert des Cacheschlüssels für das Datenquellensteuerelement vom Ansichtszustand ab bzw. legt diesen fest oder fügt dem Ansichtszustand den Cacheschlüssel hinzu.</summary>
        <value>Der Wert des Cacheschlüssels oder eine leere Zeichenfolge, wenn sich der Cacheschlüssel nicht im Ansichtszustand befindet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> der-Eigenschaft können Sie manuell einen Cache Schlüssel für das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement erstellen. Dies ist nur erforderlich, wenn Sie dem Steuerelement ein Objekt zuweisen, das XML-oder XSLT-Daten enthält, anstatt eine Datei anzugeben, die die Daten enthält. Wenn Sie dem Steuerelement Daten zuweisen, werden die Daten nicht verwendet, um den Cache Schlüssel zu generieren. Stattdessen müssen Sie manuell einen eindeutigen Cache Schlüssel generieren, wenn Sie das Datenobjekt aktualisieren möchten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine benutzerdefinierte Schlüsselabhängigkeit ab, die mit sämtlichen vom Datenquellen-Steuerelement erstellten Datencacheobjekten verknüpft ist, oder legt diese Schlüsselabhängigkeit fest. Alle Cacheobjekte laufen explizit ab, wenn der Schlüssel abläuft.</summary>
        <value>Ein Schlüssel, der alle vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement erstellten Cacheobjekte angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement unterstützt das Zwischenspeichern von Daten Während die Daten zwischengespeichert werden <xref:System.Web.UI.WebControls.XmlDataSource> , ruft die Daten aus dem Cache und nicht aus der zugrunde liegenden Datendatei ab. Wenn der Cache abläuft, ruft er Daten aus der zugrunde liegenden Datei ab und speichert die Daten erneut zwischen.  
  
 Sie können die <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> -Eigenschaft festlegen, um eine Abhängigkeit zwischen allen Cache Einträgen zu erstellen <xref:System.Web.UI.WebControls.XmlDataSource> , die vom-Steuerelement und dem-Schlüssel erstellt werden. Sie können alle Cache Einträge jederzeit Programm gesteuert für ungültig erklären, indem Sie den Schlüssel ablaufen.  
  
 Aufgrund der Eigenschaften, die zum Erstellen <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>von verwendet werden, kann es vorkommen, dass mehrere <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelemente denselben Cache in Szenarios verwenden können, in denen dieselben Daten aus derselben XML-Datei und Transformations Datei geladen <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> werden und die gleichen und <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>legen Sie fest.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen XML-Datenblock ab, an den das Datenquellen-Steuerelement gebunden ist, oder legt ihn fest.</summary>
        <value>Eine Zeichenfolge von Inline-XML-Daten, an die das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement gebunden ist. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In deklarativen Szenarien wird die <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> -Eigenschaft als mehrzeilige innere Eigenschaft <xref:System.Web.UI.WebControls.XmlDataSource> des-Objekts angegeben. Eine innere Eigenschaft ist kompatibel mit XML-Daten, da Sie Ihnen ermöglicht, die XML-Daten in beliebiger Weise zu formatieren und Probleme beim Auffüllen von Zeichen, z. b. Auffüll Zeichen, zu ignorieren.  
  
 Wenn sowohl die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> -Eigenschaft als auch die- <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft festgelegt sind, hat die- <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft Vorrang, und die Daten in der XML-Datei werden <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> anstelle der in der-Eigenschaft angegebenen XML-Daten verwendet.  
  
 Wenn Sie den Wert <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> der-Eigenschaft ändern, wird das <xref:System.Web.UI.IDataSource.DataSourceChanged> -Ereignis ausgelöst. Wenn das Caching aktiviert ist und Sie den Wert von <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>ändern, wird der Cache für ungültig erklärt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement verwendet wird, um Inline- <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> XML-Daten <xref:System.Web.UI.WebControls.TreeView> in der-Eigenschaft mit einem-Steuerelement anzuzeigen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Dateinamen einer XML-Datei an, an die die Datenquelle gebunden ist.</summary>
        <value>Der absolute physische Pfad oder der relative Pfad der XML-Datei, die die vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement dargestellten Daten enthält. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn sowohl die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> -Eigenschaft als auch die- <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft festgelegt sind, hat die- <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft Vorrang, und die Daten in der XML-Datei werden <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> anstelle der in der-Eigenschaft angegebenen XML-Daten verwendet.  
  
 Wenn Sie den Wert <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> der-Eigenschaft ändern, wird das <xref:System.Web.UI.IDataSource.DataSourceChanged> -Ereignis ausgelöst. Wenn das Caching aktiviert ist und Sie den Wert von <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>ändern, wird der Cache für ungültig erklärt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement verwendet wird, um in einer Datei enthaltene <xref:System.Web.UI.WebControls.TreeView> XML-Daten mit einem-Steuerelement anzuzeigen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement die Zwischenspeicherung von Daten aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Zwischenspeicherung von Daten für das Datenquellen-Steuerelement aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement speichert Daten automatisch <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> zwischen, wenn die `true`-Eigenschaft auf festgelegt ist. Standardmäßig ist die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft auf 0 festgelegt, was auf einen unbegrenzten Cache hinweist, und die Datenquelle speichert Daten, bis die XML-Datei, von der Sie abhängt, geändert wird. Wenn Sie die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft auf einen Wert größer als 0 festlegen, speichert der Cache Daten für diese Anzahl von Sekunden, bevor ein neuer Satz abgerufen wird.  
  
 Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaft auf `true` festgelegt ist <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> und die-Eigenschaft festgelegt ist, werden die Cache Einträge nicht automatisch für ungültig erklärt, wenn sich die Parameter in der Transformationen-Argumentliste ändern. In diesem Fall müssen Sie Code schreiben, um den Cache für ungültig zu erklären, <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> indem Sie die-Eigenschaft festlegen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die Zwischenspeicherung aktiviert <xref:System.Web.UI.WebControls.XmlDataSource> wird, wenn das-Steuerelement zum Anzeigen von Daten in einer XML-Datei verwendet wird Caching wird aktiviert, wenn <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> die-Eigenschaft auf `true` festgelegt <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ist und die auf die Anzahl der Sekunden festgelegt ist, die die Daten vom Datenquellen-Steuerelement zwischengespeichert werden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">Ein XPath-Ausdruck, der einen Knoten identifiziert, von dem die aktuelle hierarchische Ansicht erstellt wird.</param>
        <summary>Ruft das Datenquellen-Ansichtsobjekt für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement ab. Der <paramref name="viewPath" />-Parameter kann ein XPath-Ausdruck sein.</summary>
        <returns>Gibt ein <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" />-Objekt zurück, das eine Einzelansicht der Daten darstellt, beginnend mit dem durch <paramref name="viewPath" /> identifizierten Datenknoten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> -Methode aufrufen, um <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> ein-Objekt abzurufen <xref:System.Web.UI.WebControls.XmlDataSource> , das dem Steuerelement zugeordnet ist. Wenn Sie einen `viewPath` Wert angeben, <xref:System.Web.UI.WebControls.XmlDataSource> gibt das Steuerelement ein Datenquellen Sicht-Objekt zurück, das die Sicht auf `viewPath`dem durch identifizierten Knoten darstellt, sowie alle untergeordneten Knoten. Wenn Sie auf `viewPath` <xref:System.String.Empty?displayProperty=nameWithType> <xref:System.Web.UI.WebControls.XmlDataSource> festlegen<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> , prüft das-Steuerelement die-Eigenschaft, um den Stamm Knoten zu bestimmen, von dem die Datenquellen Sicht erstellt werden soll. Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft festgelegt ist <xref:System.Web.UI.WebControls.XmlDataSource> , wird Sie vom-Steuerelement verwendet, um eine Datenquellen Sicht `viewPath` auf die gleiche Weise wie der Ausdruck zu verwenden. Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft nicht festgelegt ist <xref:System.Web.UI.WebControls.XmlDataSource> , gibt das-Steuerelement eine Ansicht aller Datenknoten in den XML-Daten zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lädt die XML-Daten in den Speicher – entweder direkt aus dem zugrunde liegenden Datenspeicher oder aus dem Cache – und gibt sie als <see cref="T:System.Xml.XmlDataDocument" />-Objekt zurück.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlDataDocument" />-Objekt, das das XML darstellt, das in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft identifizierten Datei angegeben ist. Dabei werden alle Transformationen und <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" />-Abfragen angewendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> die-Methode für den direkten Zugriff auf eine Speicher interne Darstellung der zugrunde liegenden XML-Daten.  
  
 Sie können das zurückgegebene <xref:System.Xml.XmlDataDocument> Objekt bearbeiten und dann <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> aufzurufen, um die Änderungen an der XML-Datei <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> beizubehalten, die von der-Eigenschaft angegeben wird. Bevor das <xref:System.Xml.XmlDataDocument> Objekt erfolgreich gespeichert werden kann, müssen mehrere Anforderungen erfüllt werden. Weitere Informationen finden Sie unter der Methode <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Das erste Beispiel veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten. Im zweiten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Steuerelement mit Vorlagen verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten.  
  
 Das folgende Codebeispiel veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten. Die Daten werden im Arbeitsspeicher mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> -Methode manipuliert, wenn Sie <xref:System.Web.UI.WebControls.TreeView> einen Knoten auswählen, und werden dann in der XML-Datei gespeichert. Schließlich wird für das <xref:System.Web.UI.WebControls.TreeView> -Steuerelement aufgerufen, um die angezeigten Daten zu aktualisieren. <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Steuerelement mit Vorlagen verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten. Wie im vorherigen Beispiel werden die Daten im Arbeitsspeicher mithilfe der <xref:System.Xml.XmlDataDocument> von der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> -Methode abgerufenen manipuliert. Schließlich wird für das <xref:System.Web.UI.WebControls.TreeView> -Steuerelement aufgerufen, um die angezeigten Daten zu aktualisieren. <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Die XML-Datei in den Codebeispielen weist die folgenden Daten auf:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft wird eine URL angegeben. Das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verfügt jedoch nicht über die entsprechenden Berechtigungen für die Webressource.</exception>
        <exception cref="T:System.NotSupportedException">Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft ist eine URL angegeben, jedoch keine HTTP-basierte URL.  
  
- oder - 
Vor dem Verwenden des <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelements wurde ein relativer Pfad zur Entwurfszeit vom Designer nicht ordnungsgemäß zugeordnet.  
  
- oder - 
Sowohl Zwischenspeicherung als auch Clientidentitätswechsel sind aktiviert. Das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement unterstützt keine Zwischenspeicherung, wenn der Clientidentitätswechsel aktiviert ist.</exception>
        <exception cref="T:System.Web.HttpException">Der Zugriff auf den für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen Pfad wird verweigert.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />-Ereignis aus, bevor das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement eine XSLT-Transformation für die XML-Daten ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen zum Behandeln von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement <xref:System.Web.UI.WebControls.TreeView> mit einem-Steuerelement zum Anzeigen transformierten XML-Daten verwendet wird. Die XML-Transformation wird mit dem durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft gekennzeichneten Stylesheet ausgeführt. Außerdem verwendet das Stylesheet Transformations Argumente, die zur Laufzeit an das Datenquellen-Steuerelement <xref:System.Xml.Xsl.XsltArgumentList> in einem-Objekt übermittelt werden. Das Codebeispiel veranschaulicht, wie das <xref:System.Xml.Xsl.XsltArgumentList> -Objekt an das Datenquellen-Steuerelement übergeben wird, indem das <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> -Ereignis mit einem benutzerdefinierten Ereignishandler behandelt wird, der durch den <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> Namen der für die Methode festgelegten Methode identifiziert wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Die XML-Transformation wird mithilfe des folgenden Stylesheets ausgeführt.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Stellen Sie beim Überschreiben <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> ineinerabgeleitetenKlassesicher,dassdie-MethodederBasisklasseaufgerufenwird,damitregistrierteDelegatendasEreignisempfangen.<see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /></para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert die für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement gegenwärtig im Speicher reservierten XML-Daten auf einem Datenträger, wenn die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft festgelegt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement wird in der Regel in schreibgeschützten Daten Bindungs Szenarien verwendet, Sie können jedoch <xref:System.Web.UI.WebControls.XmlDataSource> das-Steuerelement verwenden, um XML-Daten in der zugrunde liegenden XML-Datendatei zu bearbeiten. In diesen Szenarien werden XML-Daten vom- <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement aus einer XML-Datei geladen. Mithilfe der <xref:System.Xml.XmlDataDocument> <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> -Methode ändern Sie den im Speicher, und speichern Sie dann in der XML-Datendatei <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> , indem Sie die-Methode aufrufen. Dieses bearbeitbare XML-Szenario ist möglich, wenn die folgenden Bedingungen erfüllt sind:  
  
-   Die XML-Daten werden aus einer XML-Datei geladen, <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> die von der-Eigenschaft angegeben wird, nicht aus <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Inline-XML-Daten, die in der-Eigenschaft  
  
-   In der-Eigenschaft oder <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> der-Eigenschaft ist keine XSLT-Transformation angegeben.  
  
 Die <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> -Methode verarbeitet keine gleichzeitigen Speichervorgänge durch unterschiedliche Anforderungen. Wenn mehr als ein Benutzer eine XML-Datei über das <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement bearbeitet, gibt es keine Garantie dafür, dass alle Benutzer mit denselben Daten arbeiten. Es ist auch möglich, dass <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> ein-Vorgang aufgrund derselben Parallelitäts Probleme fehlschlägt.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Das erste Codebeispiel veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten. Im zweiten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Steuerelement mit Vorlagen verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten.  
  
 Das folgende Codebeispiel veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten. Die Daten werden im Arbeitsspeicher mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> -Methode manipuliert, wenn Sie <xref:System.Web.UI.WebControls.TreeView> einen Knoten auswählen, und werden dann in der XML-Datei gespeichert. Schließlich wird für das <xref:System.Web.UI.WebControls.TreeView> -Steuerelement aufgerufen, um die angezeigten Daten zu aktualisieren. <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Steuerelement mit Vorlagen verwendet wird, um in einer XML-Datei enthaltene XML-Daten anzuzeigen und zu bearbeiten. Wie im vorherigen Beispiel werden die Daten im Arbeitsspeicher mithilfe des <xref:System.Xml.XmlDataDocument> -Objekts manipuliert, das von der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> -Methode abgerufen wurde. Schließlich wird für das <xref:System.Web.UI.WebControls.TreeView> -Steuerelement aufgerufen, um die angezeigten Daten zu aktualisieren. <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Die XML-Datei in den Codebeispielen weist die folgenden Daten auf:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML-Daten wurden mit der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft statt der <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft geladen.  
  
- oder - 
Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft wird eine URL angegeben. Das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verfügt jedoch nicht über die entsprechenden Berechtigungen für die Webressource.</exception>
        <exception cref="T:System.NotSupportedException">Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft ist eine URL angegeben, jedoch keine HTTP-basierte URL.  
  
- oder - 
Vor dem Verwenden des <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelements wurde ein relativer Pfad zur Entwurfszeit vom Designer nicht ordnungsgemäß zugeordnet.</exception>
        <exception cref="T:System.Web.HttpException">Der Zugriff auf den für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen Pfad wird verweigert.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value><see langword="true" />, wenn die Auflistung eine Auflistung von <see cref="T:System.Collections.IList" />-Objekten ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Sie kann nur verwendet werden, wenn <xref:System.Web.UI.WebControls.XmlDataSource> die-Instanz in die <xref:System.ComponentModel.IListSource> -Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>Ein Objekt, das die <see cref="T:System.Collections.IList" /> implementiert, die an eine Datenquelle gebunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Sie kann nur verwendet werden, wenn <xref:System.Web.UI.WebControls.XmlDataSource> die-Instanz in die <xref:System.ComponentModel.IListSource> -Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Sie kann nur verwendet werden, wenn <xref:System.Web.UI.WebControls.XmlDataSource> die-Instanz in die <xref:System.Web.UI.IDataSource> -Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Der Name der abzurufenden Ansicht. Wenn <see cref="F:System.String.Empty" /> angegeben ist, wird die Standardansicht für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement abgerufen.</param>
        <summary>Ruft die benannte Datenquellenansicht ab, die dem Datenquellensteuerelement zugeordnet ist.</summary>
        <returns>Gibt das benannte <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" />-Objekt zurück, das dem <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement zugeordnet ist.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Web.UI.IDataSource.GetViewNames" />.</summary>
        <returns>Ein Objekt, das die <see cref="T:System.Collections.ICollection" /> mit Namen implementiert, die die Liste von Ansichtsobjekten darstellen, die dem <see cref="T:System.Web.UI.IDataSource" />-Objekt zugeordnet sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Sie kann nur verwendet werden, wenn <xref:System.Web.UI.WebControls.XmlDataSource> die-Instanz in die <xref:System.Web.UI.IDataSource> -Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Block von XSL-Daten (Extensible Stylesheet Language) ab, der eine XSLT-Transformation definiert, die für die vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verwalteten XML-Daten durchgeführt werden soll, bzw. legt diesen Block fest.</summary>
        <value>Eine Zeichenfolge mit Inline-XSL, das eine XML-Transformation definiert, die für die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft enthaltenen Daten ausgeführt werden soll. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In deklarativen Szenarien wird die <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> -Eigenschaft als mehrzeilige innere Eigenschaft <xref:System.Web.UI.WebControls.XmlDataSource> des-Objekts angegeben. Eine innere Eigenschaft ist mit XSL-Stylesheet-Daten kompatibel, da Sie das Stylesheet in beliebiger Weise formatieren und Probleme beim Auffüllen von Zeichen, z. b. Auffüll Zeichen, ignorieren kann.  
  
 Wenn sowohl die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft als auch die- <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft festgelegt sind, hat die- <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaft Vorrang, und die Daten in der XSL-Stylesheet-Datei (. Xsl) werden <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> anstelle der in der-Eigenschaft angegebenen Stylesheet-Elemente verwendet. Wenn ein XPath-Ausdruck mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft festgelegt wird, wird er nach dem Transformieren der XML-Daten angewendet.  
  
 Wenn Sie den Wert <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> der-Eigenschaft ändern, wird das <xref:System.Web.UI.IDataSource.DataSourceChanged> -Ereignis ausgelöst. Wenn das Caching aktiviert ist und Sie den Wert von <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>ändern, wird der Cache für ungültig erklärt.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.XmlDataSource> -Klasse verwendet die veraltet <xref:System.Xml.Xsl.XslTransform> -Klasse, um XSL-Transformationen auszuführen. Wenn Sie Stylesheet-Funktionen verwenden möchten, die nach der <xref:System.Xml.Xsl.XslTransform> veralteten-Klasse eingeführt wurden, wenden Sie die Transformationen manuell mithilfe der <xref:System.Xml.Xsl.XslCompiledTransform> -Klasse an.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Vorlagen Steuerelement verwendet wird, um transformierte XML-Daten anzuzeigen. Das Stylesheet, das die Transformation ausführt, wird Inline durch <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> die-Eigenschaft des Datenquellen-Steuer Elements definiert.  
  
  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt eine Liste von XSLT-Argumenten bereit, die mit dem durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />-Eigenschaft oder die <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />-Eigenschaft definierten Stylesheet verwendet werden, um eine Transformation der XML-Daten durchzuführen.</summary>
        <value>Ein <see cref="T:System.Xml.Xsl.XsltArgumentList" />-Objekt mit XSLT-Parametern und Objekten, die auf die XML-Daten angewendet werden sollen, wenn diese durch das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement geladen werden. Der Standardwert ist <see langword="null" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> die-Eigenschaft <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> fest, wenn das-Ereignis ausgelöst wird, um sicherzustellen, dass die XSLT-Parameter zum Zeitpunkt der Anwendung der XSLT-Transformation auf die XML-Daten verfügbar sind.  
  
 Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaft auf `true` festgelegt ist <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> und die-Eigenschaft festgelegt ist, werden die Cache Einträge nicht automatisch für ungültig erklärt, wenn sich die Parameter in der Transformationen-Argumentliste ändern. In diesem Fall müssen Sie Code schreiben, um den Cache für ungültig zu erklären, <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> indem Sie die-Eigenschaft festlegen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement verwendet wird, um transformierte XML-Daten anzuzeigen. Die XML-Transformation wird mit dem durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft gekennzeichneten Stylesheet ausgeführt. Außerdem verwendet das Stylesheet Transformations Argumente, die zur Laufzeit an das Datenquellen-Steuerelement <xref:System.Xml.Xsl.XsltArgumentList> in einem-Objekt übermittelt werden. Das Codebeispiel veranschaulicht, wie das <xref:System.Xml.Xsl.XsltArgumentList> an das Datenquellen-Steuerelement übergeben wird, indem das <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> -Ereignis mit einem benutzerdefinierten Ereignishandler behandelt wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Die Transformation der XML-Daten erfolgt mit dem folgenden Stylesheet.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Dateinamen einer XSL-Datei (Extensible Stylesheet Language) an, die eine XSLT-Transformation definiert, die für die vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verwalteten XML-Daten durchgeführt werden soll.</summary>
        <value>Der absolute physische Pfad oder der relative Pfad der XSL-Stylesheetdatei, die eine XML-Transformation definiert, die für die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft enthaltenen Daten ausgeführt werden soll. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn sowohl die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft als auch die- <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft festgelegt sind, hat die- <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaft Vorrang, und die Daten in der XSL-Stylesheet-Datei (. Xsl) werden <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> anstelle der in der-Eigenschaft angegebenen Stylesheet-Elemente verwendet. Wenn ein XPath-Ausdruck mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft festgelegt wird, wird er nach dem Transformieren der XML-Daten angewendet.  
  
 Wenn Sie den Wert <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> der-Eigenschaft ändern, wird das <xref:System.Web.UI.IDataSource.DataSourceChanged> -Ereignis ausgelöst. Wenn das Caching aktiviert ist und Sie den Wert von <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>ändern, wird der Cache für ungültig erklärt.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.XmlDataSource> -Klasse verwendet die veraltet <xref:System.Xml.Xsl.XslTransform> -Klasse, um XSL-Transformationen auszuführen. Wenn Sie Stylesheet-Funktionen verwenden möchten, die nach der <xref:System.Xml.Xsl.XslTransform> veralteten-Klasse eingeführt wurden, wenden Sie die Transformationen manuell mithilfe der <xref:System.Xml.Xsl.XslCompiledTransform> -Klasse an.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement <xref:System.Web.UI.WebControls.TreeView> und ein-Steuerelement verwendet werden, um transformierte XML-Daten in einem Web Form anzuzeigen. Die Transformation wird mit dem durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft gekennzeichneten Stylesheet ausgeführt. Sie können optional Transformations Argumente für das Stylesheet mithilfe <xref:System.Xml.Xsl.XsltArgumentList>von angeben. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>-Eigenschaft.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Das XSL-Stylesheet, mit dem die XML-Transformation durchführt wird, hat die folgende Struktur:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, bevor das Stylesheet, das durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />-Eigenschaft definiert wird oder durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />-Eigenschaft identifiziert wird, auf XML-Daten angewendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln Sie <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> das-Ereignis, <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> um die Eigenschaft <xref:System.Xml.Xsl.XsltArgumentList> mit einem Objekt <xref:System.Web.UI.WebControls.XmlDataSource> festzulegen, bevor das Steuerelement eine XML-Transformation ausführt.  
  
 Weitere Informationen zum Behandeln von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement <xref:System.Web.UI.WebControls.TreeView> mit einem-Steuerelement zum Anzeigen transformierten XML-Daten verwendet wird. Die XML-Transformation wird mit dem durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft gekennzeichneten Stylesheet ausgeführt. Außerdem verwendet das Stylesheet Transformations Argumente, die zur Laufzeit an das Datenquellen-Steuerelement <xref:System.Xml.Xsl.XsltArgumentList> in einem-Element übermittelt werden. Das Codebeispiel veranschaulicht, wie das <xref:System.Xml.Xsl.XsltArgumentList> -Objekt an das Datenquellen-Steuerelement übergeben wird, indem das <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> -Ereignis mit einem benutzerdefinierten Ereignishandler behandelt wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Die Transformation der XML-Daten wird mit dem folgenden Stylesheet durchgeführt:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen XPath-Ausdruck an, der auf die XML-Daten angewendet werden soll, die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen XML-Datei enthalten sind.</summary>
        <value>Eine Zeichenfolge, die einen XPath-Ausdruck darstellt, der zum Filtern der Daten verwendet werden kann, die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen XML-Datei enthalten sind. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu XPath-Daten Bindungs Ausdrücken finden Sie unter [Binden eines tabellarischen Steuer Elements an das XmlDataSource-Steuer](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8)Element.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem <xref:System.Web.UI.WebControls.Repeater> Vorlagen Steuerelement verwendet wird, um XML-Daten anzuzeigen, die mit einem XPath-Ausdruck gefiltert wurden. In diesem Beispiel wird die XPath-Syntax verwendet, um die XML-Daten <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> zu filtern, wenn die-Eigenschaft des Datenquellen-Steuer Elements festgelegt <xref:System.Web.UI.WebControls.Repeater> ist. Außerdem werden die Elemente der Steuerelement Vorlage an die XML-Daten gebunden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80a8abd56617d8c6d6e4f6c130871ad90ce06595" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55343079" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine XML-Datenquelle für datengebundene Steuerelemente dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [XML-Datenquellen](#source_of_xml_data)  
  
-   [Aktualisieren von XML-Daten](#updating_xml_data)  
  
-   [Angeben einer XSL-Transformations](#specifying_an_xsl_transformation)  
  
-   [Filtern mithilfe einer XPath-Ausdruck](#filtering_using_an_xpath_expression)  
  
-   [Zwischenspeichern](#caching)  
  
-   [Zusätzliche Funktionen](#additional_features)  
  
-   [Anzeigen des Datenobjekts](#data_view_object)  
  
-   [Deklarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement ist ein Datenquellen-Steuerelement, das XML-Daten von datengebundenen Steuerelementen bereitstellt. Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement kann von datengebundenen Steuerelementen verwendet werden, um sowohl tabellarische als auch hierarchische Daten anzuzeigen. Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement wird normalerweise zum Anzeigen hierarchischer XML-Daten in schreibgeschützten Szenarien verwendet. Da die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement erweitert die <xref:System.Web.UI.HierarchicalDataSourceControl> -Klasse, die es mit hierarchischen Daten funktioniert. Die <xref:System.Web.UI.WebControls.XmlDataSource> steuern außerdem implementiert die <xref:System.Web.UI.IDataSource> -Schnittstelle auf und arbeitet mit tabellarischen oder Listendaten, Daten.  
  
> [!NOTE]
>  Aus Sicherheitsgründen keines der <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelementeigenschaften im Ansichtszustand gespeichert werden. Da es den Inhalt des Ansichtszustands auf dem Client decodiert es technisch möglich ist, kann das Speichern vertraulicher Informationen über die Datenstruktur oder dessen Inhalt Sie für eine Bedrohung der Offenlegung von Informationen verfügbar machen. Beachten Sie, dass, wenn Sie zum Speichern von Informationen wie z. B. müssen <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft im Ansichtszustand, Sie können die Verschlüsselung zum Schutz des Inhalts durch Festlegen von <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> auf die `@ Page` Richtlinie.  
  
 Auf der Seite Entwickler die <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement zum Anzeigen von XML-Daten mithilfe von datengebundenen Steuerelementen.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>XML-Datenquellen  
 Die <xref:System.Web.UI.WebControls.XmlDataSource> lädt Sie in der Regel XML-Daten aus einer XML-Datendatei, die von angegeben wird die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft. XML-Daten können auch gespeichert werden, direkt von den Datenquellen-Steuerelement im Formular mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft. Sollten Sie die XML-Daten zu transformieren, bevor er von einem datengebundenen Steuerelement angezeigt wird, können Sie eine Extensible Stylesheet Language (XSL)-Stylesheet für die Transformation bereitstellen. Wie bei den XML-Daten Sie in der Regel das Stylesheet aus einer Datei laden, angegeben durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> -Eigenschaft, aber Sie können auch speichern es in Form einer Zeichenfolge direkt über die <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaft.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>Aktualisieren von XML-Daten  
 Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement wird häufig verwendet in nur-Lese Data-Szenarien, in einem datengebundenen Steuerelement XML-Daten angezeigt. Allerdings können Sie auch verwenden die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement zum Bearbeiten von XML-Daten. Rufen Sie zum Bearbeiten der XML-Daten der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode zum Abrufen einer <xref:System.Xml.XmlDataDocument> -Objekt, das eine in-Memory-Darstellung des XML-Daten handelt. Können Sie das Objektmodell verfügbar gemacht werden, indem die <xref:System.Xml.XmlDataDocument> und <xref:System.Xml.XmlNode> Objekte, er enthält, oder verwenden einen XPath-Filterausdruck zum Bearbeiten von Daten im Dokument. Wenn Sie Änderungen an der in-Memory-Darstellung der XML-Daten vorgenommen haben, können Sie es auf den Datenträger durch den Aufruf speichern die <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode.  
  
 Es gibt einige Einschränkungen auf die Funktionen des die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement:  
  
-   Die XML-Daten geladen werden müssen, aus einer XML-Datei, die von angegeben wird die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft, die nicht von Inline-XML angegeben wird, in der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft.  
  
-   Keine XSLT-Transformation kann angegeben werden, der <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> oder <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaften.  
  
-   Die <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode behandelt nicht gleichzeitige Speichervorgänge durch unterschiedliche Anforderungen. Wenn mehr als ein Benutzer eine XML-Datei durch Bearbeiten der <xref:System.Web.UI.WebControls.XmlDataSource>, es gibt keine Garantie, die alle Benutzer mit denselben Daten ausgeführt werden. Es ist auch möglich, dass eine <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> aufgrund dieser Parallelitätsprobleme fehlgeschlagen.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Angeben einer XSL-Transformations  
 Ein allgemeiner Vorgang ausgeführt wird, mit XML-Daten transformiert sie aus einem Satz von XML-Daten in eine andere. Die <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement unterstützt XML-Transformationen mit der <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaften, die angeben einer XSL-Stylesheet auf XML-Daten angewendet werden soll, bevor sie zu einem datengebundenen Steuerelement übergeben wird, und die <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> -Eigenschaft, die Ihnen ermöglicht, Geben Sie die dynamische XSLT-Stylesheet stilargumente, während die Transformation von einer XSL-Stylesheet verwendet werden. Wenn Sie einen Filterausdruck mit XPath angeben der <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft, es wird angewendet, nachdem die Transformation erfolgt.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.XmlDataSource> Klasse verwendet die veraltete <xref:System.Xml.Xsl.XslTransform> Klasse, um XSL-Transformationen auszuführen. Wenn Stylesheet-Features, die nach eingeführt wurden, verwendet werden sollen die <xref:System.Xml.Xsl.XslTransform> Klasse wurde als veraltet markiert, die Transformationen manuell anwenden, indem die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>Filtern mithilfe einer XPath-Ausdruck  
 In der Standardeinstellung die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement lädt die XML-Daten in der XML-Datei identifizierte die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft oder gefunden in die <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> -Eigenschaft, aber Sie können die Daten mithilfe eines XPath-Ausdrucks filtern. Die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft unterstützt einen XPath-Syntax-Filter, der angewendet wird, nachdem die XML-Daten geladen und transformiert werden.  
  
<a name="caching"></a>   
## <a name="caching"></a>Zwischenspeicherung  
 Aus Leistungsgründen Zwischenspeichern ist aktiviert für die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement standardmäßig. Öffnen und lesen eine XML-Datei auf dem Server, jedes Mal, wenn eine Seite angefordert, können die Leistung Ihrer Anwendung verringern. Durch das Zwischenspeichern können reduzieren Sie die Verarbeitungslast auf dem Server, auf Kosten der Arbeitsspeicher auf dem Webserver; in den meisten Fällen ist dies ein guter Kompromiss. Die <xref:System.Web.UI.WebControls.XmlDataSource> enthält Automatisches Caching von Daten bei der <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true`, und die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaftensatz auf die Anzahl der Sekunden, die der Cache Daten speichert, bevor der Cache ungültig wird. Sie können die <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> zur weiteren Feinabstimmung von das Cachingverhalten des Datenquellen-Steuerelement.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Zusätzliche Funktionen  
 Die folgende Tabelle enthält weitere Funktionen, die von Microsoft Intune die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement.  
  
|Funktion|Beschreibung |  
|----------------|-----------------|  
|Sortieren|Nicht unterstützt, indem die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement.|  
|Filtern|Die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Eigenschaft kann verwendet werden, um die XML-Daten mithilfe eines entsprechenden XPath-Ausdrucks filtern.|  
|Paging|Nicht unterstützt, indem die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement.|  
|Wird aktualisiert|Unterstützt durch Bearbeiten der <xref:System.Xml.XmlDataDocument> direkt und dem anschließenden Aufrufen der <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode.|  
|Wird gelöscht|Unterstützt durch Bearbeiten der <xref:System.Xml.XmlDataDocument> direkt und dem anschließenden Aufrufen der <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode.|  
|Einfügen|Unterstützt durch Bearbeiten der <xref:System.Xml.XmlDataDocument> direkt und dem anschließenden Aufrufen der <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode.|  
|Zwischenspeicherung|Standardmäßig aktiviert, mit der <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft auf 0 (unbegrenzt) und die <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>Anzeigen des Datenobjekts  
 Da die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement unterstützt die von datengebundenen Steuerelementen, die hierarchische Daten anzeigen sowie Steuerelemente, die Tabellendaten anzeigen, das Datenquellen-Steuerelement unterstützt mehrere Typen von Datenquellen-Ansichtsobjekte der zugrunde liegenden XML-Daten. Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement abruft, eine einzelne benannte <xref:System.Web.UI.WebControls.XmlDataSourceView> Objekt bei der Verwendung mit einem datengebundenen Steuerelement, das tabellarische Daten anzeigt. Die <xref:System.Web.UI.IDataSource.GetViewNames%2A> Methode identifiziert diese mit dem Namen anzeigen. Wenn mit einem datengebundenen Steuerelement verwendet wird, die hierarchische Daten anzeigt der <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement abgerufen ein <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> für jeden eindeutiger hierarchischer Pfad zum Übergeben der <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> Methode.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement zum Anzeigen von XML-Daten aus der XML-Beispieldatei. Im zweiten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> -Steuerelement zum Anzeigen von XML-Daten.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement zum Anzeigen von XML-Daten. Die <xref:System.Web.UI.WebControls.XmlDataSource> lädt XML-Daten aus der XML-Datei, die von identifiziert die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> -Steuerelement zum Anzeigen von XML-Daten. Die <xref:System.Web.UI.WebControls.Repeater> Steuerelement verwendet, die ein XPath-Datenbindungsausdruck zum Binden an Daten im XML-Elemente zu dokumentieren, der die <xref:System.Web.UI.WebControls.XmlDataSource> darstellt. Weitere Informationen zu `XPath` und `XPathSelect` Datenbindungssyntax, finden Sie unter den <xref:System.Web.UI.XPathBinder> Klasse.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne in Sekunden ab, in der das Datenquellen-Steuerelement abgerufene Daten zwischenspeichert, oder legt diese fest.</summary>
        <value>Die Anzahl von Sekunden, für die das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement die Ergebnisse eines Datenabrufvorgangs zwischenspeichert. Der Standardwert ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement automatisch Daten zwischengespeichert, wenn Folgendes zutrifft:  
  
-   Die <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>-Eigenschaft ist auf `true` festgelegt.  
  
-   Die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaftensatz auf einen Wert größer als 0 (null) und die Anzahl der Sekunden angibt, die der Cache Daten speichert, bevor der Cache ungültig wird.  
  
 Änderungen an der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft oder den Inhalt der Datei, die die XML-Daten enthält, wird der Cache für ungültig erklärt werden.  
  
 In der Standardeinstellung die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaftensatz auf 0 (null) und einem unbegrenzten Cache gibt an, und die Datenquelle werden die Daten zwischengespeichert, bis die XML-Datei, von denen er abhängt geändert wird.  
  
 Das Verhalten des Caches unterliegt einer Kombination aus der Dauer und die <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> festlegen. Wenn <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> nastaven NA hodnotu <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement Daten werden auf der ersten Datenabrufvorgang zwischengespeichert, behält diese im Speicher angegebenen Wartezeitraums <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>, und macht es ungültig, nachdem die Zeit abgelaufen ist. Der Cache wird dann beim nächsten Vorgang aktualisiert. Wenn <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> nastaven NA hodnotu <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, das Datenquellen-Steuerelement speichert Daten auf den ersten Datenabrufvorgang startet, setzt aber das Zeitfenster, das sie den Cache bei jedem nachfolgenden Vorgang enthält. Der Cache wird nur ablaufen, wenn es keine Aktivität für einen Zeitraum entspricht die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> seit dem letzten Datenabruf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aktivieren der Zwischenspeicherung bei Verwendung der <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement zum Anzeigen von Daten in eine XML-Datei. Zwischenspeicherung aktiviert ist bei der <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> auf die Anzahl der Sekunden an, die die Daten, mit dem Datenquellen-Steuerelement zwischengespeichert werden festgelegt ist.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Cacheablaufrichtlinie ab, die in Kombination mit der Cachedauer das Verhalten des vom Datenquellen-Steuerelement verwendeten Caches bei der Zwischenspeicherung beschreibt, oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.DataSourceCacheExpiry" />-Werte. Die Standardeinstellung in der Richtlinie für den Cacheablauf ist <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten des Caches durch eine Kombination von unterliegt der <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Einstellungen. Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> nastaven NA hodnotu <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> speichert die Daten auf dem ersten Datenabrufvorgang, behält diese im Speicher angegebenen Wartezeitraums <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>, und macht es ungültig, nachdem die Zeit abgelaufen ist. Der Cache wird dann beim nächsten Vorgang aktualisiert. Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> nastaven NA hodnotu <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, das Datenquellen-Steuerelement speichert Daten auf den ersten Datenabrufvorgang startet, setzt aber das Zeitfenster, das sie den Cache bei jedem nachfolgenden Vorgang enthält. Der Cache ablaufen wird, nur dann, wenn keine Aktivität für einen Zeitraum entspricht die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> seit dem letzten Datenabruf.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aktivieren der Zwischenspeicherung bei Verwendung der <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement zum Anzeigen von Daten in eine XML-Datei. Zwischenspeicherung aktiviert ist bei der <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> auf die Anzahl der Sekunden an, die die Daten, mit dem Datenquellen-Steuerelement zwischengespeichert werden festgelegt ist.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert des Cacheschlüssels für das Datenquellensteuerelement vom Ansichtszustand ab bzw. legt diesen fest oder fügt dem Ansichtszustand den Cacheschlüssel hinzu.</summary>
        <value>Der Wert des Cacheschlüssels oder eine leere Zeichenfolge, wenn sich der Cacheschlüssel nicht im Ansichtszustand befindet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> Eigenschaft können Sie manuell erstellen, einen Cacheschlüssel für den <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement. Dies ist erforderlich, nur dann, wenn Sie ein Objekt, die XML- oder XSLT-Daten für das Steuerelement zuweisen anstelle einer Datei mit den Daten enthält. Wenn Sie Daten an das Steuerelement zuweisen, werden die Daten zum Generieren des Cacheschlüssels nicht verwendet. Stattdessen müssen Sie manuell einen eindeutiger Cacheschlüssel generieren, wenn das Datenobjekt, das aktualisiert werden sollen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine benutzerdefinierte Schlüsselabhängigkeit ab, die mit sämtlichen vom Datenquellen-Steuerelement erstellten Datencacheobjekten verknüpft ist, oder legt diese Schlüsselabhängigkeit fest. Alle Cacheobjekte laufen explizit ab, wenn der Schlüssel abläuft.</summary>
        <value>Ein Schlüssel, der alle vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement erstellten Cacheobjekte angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, die <xref:System.Web.UI.WebControls.XmlDataSource> Ruft Daten ab, aus dem Cache und nicht von der zugrunde liegenden-Datendatei. Wenn der Cache abläuft, ruft Daten aus der zugrunde liegenden Datei ab und erneut zwischengespeichert.  
  
 Sie können festlegen, die <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> Eigenschaft zum Erstellen einer Abhängigkeit zwischen alle Einträge im Cache erstellt die <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement und dem Schlüssel. Sie können alle Cacheeinträge programmgesteuert zu einem beliebigen Zeitpunkt ungültig werden, wenn der Schlüssel abläuft.  
  
 Aufgrund der Eigenschaften, die zum Erstellen der <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, es ist möglich, dass mehrere <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelemente können den gleichen Cache in Szenarien, wo sie die gleichen Daten aus der gleichen XML-Datei laden und Transformieren der Datei und weist den gleichen <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>festgelegt.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen XML-Datenblock ab, an den das Datenquellen-Steuerelement gebunden ist, oder legt ihn fest.</summary>
        <value>Eine Zeichenfolge von Inline-XML-Daten, an die das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement gebunden ist. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In deklarativen Szenarios der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> -Eigenschaft angegeben wird, als mehrzeiliges interne Eigenschaft von der <xref:System.Web.UI.WebControls.XmlDataSource> Objekt. Eine interne Eigenschaft ist kompatibel mit XML-Daten, weil dadurch, dass Sie die XML-Daten in irgendeiner Weise zu formatieren und Probleme durch Füllzeichen, wie z. B. das Auffüllen von Anführungszeichen ignorieren.  
  
 Wenn beide die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaften festgelegt werden, die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft austauschverarbeitungsmodi Vorrang vor, und die Daten in der XML-Datei verwendet, anstatt die im angegebenen XML-Daten der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft.  
  
 Wenn Sie den Wert der Ändern der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst. Wenn das Zwischenspeichern aktiviert ist, und Sie den Wert der ändern <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, wird der Cache für ungültig erklärt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement zum Anzeigen von Inline-XML-Daten enthalten die <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft mit dem eine <xref:System.Web.UI.WebControls.TreeView> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Dateinamen einer XML-Datei an, an die die Datenquelle gebunden ist.</summary>
        <value>Der absolute physische Pfad oder der relative Pfad der XML-Datei, die die vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement dargestellten Daten enthält. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn beide die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaften festgelegt werden, die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft austauschverarbeitungsmodi Vorrang vor, und die Daten in der XML-Datei verwendet, anstatt die im angegebenen XML-Daten der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft.  
  
 Wenn Sie den Wert der Ändern der <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst. Wenn das Zwischenspeichern aktiviert ist, und Sie den Wert der ändern <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, wird der Cache für ungültig erklärt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement zum Anzeigen von XML-Daten in eine Datei mit einer <xref:System.Web.UI.WebControls.TreeView> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement die Zwischenspeicherung von Daten aktiviert ist, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Zwischenspeicherung von Daten für das Datenquellen-Steuerelement aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement enthält Automatisches Caching von Daten bei der <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true`. In der Standardeinstellung die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaftensatz auf 0 (null) und einem unbegrenzten Cache gibt an, und die Datenquelle werden die Daten zwischengespeichert, bis die XML-Datei, von denen er abhängt geändert wird. Setzen Sie die <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> -Eigenschaft auf einen Wert größer als 0, der Cache speichert Daten für diese Anzahl von Sekunden vor dem ein neuer Datensatz abgerufen.  
  
 Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> Eigenschaft festgelegt ist, wird die Cacheeinträge werden nicht automatisch ungültig, wenn die Parameter in der Argumentliste Transformationen ändern. In diesem Fall müssen Sie Code aus, um den Cache durch Festlegen von für ungültig erklären schreiben die <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aktivieren der Zwischenspeicherung bei Verwendung der <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement zum Anzeigen von Daten in eine XML-Datei. Zwischenspeicherung aktiviert ist bei der <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> auf die Anzahl der Sekunden an, die die Daten, mit dem Datenquellen-Steuerelement zwischengespeichert werden festgelegt ist.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">Ein XPath-Ausdruck, der einen Knoten identifiziert, von dem die aktuelle hierarchische Ansicht erstellt wird.</param>
        <summary>Ruft das Datenquellen-Ansichtsobjekt für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement ab. Der <paramref name="viewPath" />-Parameter kann ein XPath-Ausdruck sein.</summary>
        <returns>Gibt ein <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" />-Objekt zurück, das eine Einzelansicht der Daten darstellt, beginnend mit dem durch <paramref name="viewPath" /> identifizierten Datenknoten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie die <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> Methode zum Abrufen einer <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> zugeordnete Objekt der <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement. Bei Angabe von `viewPath` Wert, der <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement gibt einen Datenquellen-Ansichtsobjekt, das die Ansicht auf dem Knoten identifizierte darstellt `viewPath`, sowie alle seine untergeordneten Knoten. Setzen Sie `viewPath` zu <xref:System.String.Empty?displayProperty=nameWithType>, <xref:System.Web.UI.WebControls.XmlDataSource> Überprüfungen steuern die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Eigenschaft, um zu bestimmen, den Stammknoten aus, die die Datenquellensicht zu erstellen. Wenn der <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Eigenschaft festgelegt ist, die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement verwendet es zum Zurückgeben einer Datenquellensicht in der gleichen Weise `viewPath` Ausdruck wird verwendet. Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Eigenschaft nicht festgelegt ist, die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement gibt einen Überblick über alle Datenknoten in der XML-Daten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lädt die XML-Daten in den Speicher – entweder direkt aus dem zugrunde liegenden Datenspeicher oder aus dem Cache – und gibt sie als <see cref="T:System.Xml.XmlDataDocument" />-Objekt zurück.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlDataDocument" />-Objekt, das das XML darstellt, das in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft identifizierten Datei angegeben ist. Dabei werden alle Transformationen und <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" />-Abfragen angewendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode für den direkten Zugriff auf eine in-Memory-Darstellung der zugrunde liegenden XML-Daten.  
  
 Können Sie das zurückgegebene ändern <xref:System.Xml.XmlDataDocument> Objekt aus, und rufen dann <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> , bleiben Ihre Änderungen in der XML-Datei, die gemäß der <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft. Mehrere Anforderungen müssen erfüllt sein, damit die <xref:System.Xml.XmlDataDocument> Objekt erfolgreich gespeichert werden kann. Weitere Informationen finden Sie unter der Methode <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einem <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind. Im zweiten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einer <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind. Die Daten werden im Arbeitsspeicher geändert, dass die <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode jedes Mal, wenn Sie auswählen, eine <xref:System.Web.UI.WebControls.TreeView> Knoten, und klicken Sie dann in der XML-Datei gespeichert wird. Zum Schluss <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> aufgerufen wird, auf die <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Aktualisieren der Daten, das es anzeigt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind. Wie im vorherigen Beispiel, die Daten im Arbeitsspeicher bearbeitet werden die <xref:System.Xml.XmlDataDocument> abgerufen, indem die <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode. Zum Schluss <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> aufgerufen wird, auf die <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Aktualisieren der Daten, das es anzeigt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Die XML-Datei in den Codebeispielen enthält die folgenden Daten:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft wird eine URL angegeben. Das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verfügt jedoch nicht über die entsprechenden Berechtigungen für die Webressource.</exception>
        <exception cref="T:System.NotSupportedException">Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft ist eine URL angegeben, jedoch keine HTTP-basierte URL.  
  
- oder - 
Vor dem Verwenden des <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelements wurde ein relativer Pfad zur Entwurfszeit vom Designer nicht ordnungsgemäß zugeordnet.  
  
- oder - 
Sowohl Zwischenspeicherung als auch Clientidentitätswechsel sind aktiviert. Das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement unterstützt keine Zwischenspeicherung, wenn der Clientidentitätswechsel aktiviert ist.</exception>
        <exception cref="T:System.Web.HttpException">Der Zugriff auf den für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen Pfad wird verweigert.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />-Ereignis aus, bevor das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement eine XSLT-Transformation für die XML-Daten ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen zum Behandeln von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement zum Anzeigen von transformierten XML-Daten. Die XML-Transformation erfolgt mit dem Stylesheet, angegeben durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft. Darüber hinaus das Stylesheet verwendet, die an das Datenquellen-Steuerelement in übergeben werden ein <xref:System.Xml.Xsl.XsltArgumentList> Objekts zur Laufzeit. Im Codebeispiel wird veranschaulicht, wie Sie übergeben die <xref:System.Xml.Xsl.XsltArgumentList> Objekt, das Datenquellen-Steuerelement durch Behandeln der <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> Ereignissatz mit einem benutzerdefinierten Ereignishandler, der durch den Namen der Methode identifiziert wird, für die <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> Methode.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Die XML-Transformation erfolgt mit dem folgenden Stylesheet.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Beim Überschreiben von <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> werden Sie in einer abgeleiteten Klasse rufen die <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> Methode der Basisklasse, damit Delegaten registrierte das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert die für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement gegenwärtig im Speicher reservierten XML-Daten auf einem Datenträger, wenn die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft festgelegt ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Während der <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement in der Regel im Nur-Lese Datenbindungsszenarien verwendet wird, können Sie die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement zum Bearbeiten von XML-Daten in der zugrunde liegenden XML-Datendatei. In diesen Szenarios erfolgt, XML-Daten aus einer XML-Datei durch die <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement. Ändern Sie die <xref:System.Xml.XmlDataDocument> im Arbeitsspeicher mithilfe der <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode, und klicken Sie dann speichern, um die XML-Datendatei durch Aufrufen der <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode. Dieses bearbeitbare XML-Szenario ist möglich, wenn die folgenden Bedingungen erfüllt sind:  
  
-   Die XML-Daten aus einer XML-Datendatei erkennbar geladen ist die <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> Eigenschaft, nicht im angegebenen Inline-XML-Daten der <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Eigenschaft.  
  
-   Keine XSLT-Transformation wird angegeben, der <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> oder <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaften.  
  
 Die <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Methode behandelt nicht gleichzeitige Speichervorgänge durch unterschiedliche Anforderungen. Wenn mehr als ein Benutzer eine XML-Datei durch Bearbeiten der <xref:System.Web.UI.WebControls.XmlDataSource> steuern, es gibt keine Garantie, die alle Benutzer mit denselben Daten ausgeführt werden. Es ist auch möglich, dass eine <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> aufgrund dieser Parallelitätsprobleme fehlgeschlagen.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einer <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind. Im zweiten Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einer <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind. Die Daten werden im Arbeitsspeicher geändert, dass die <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode jedes Mal, wenn Sie auswählen, eine <xref:System.Web.UI.WebControls.TreeView> Knoten, und klicken Sie dann in der XML-Datei gespeichert wird. Zum Schluss <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> aufgerufen wird, auf die <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Aktualisieren der Daten, das es anzeigt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> Steuerelement zum Anzeigen und Bearbeiten von XML-Daten in eine XML-Datei enthalten sind. Wie im vorherigen Beispiel, die Daten im Arbeitsspeicher bearbeitet werden die <xref:System.Xml.XmlDataDocument> Objekt abgerufen, indem die <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Methode. Zum Schluss <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> aufgerufen wird, auf die <xref:System.Web.UI.WebControls.TreeView> Steuerelement zum Aktualisieren der Daten, das es anzeigt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Die XML-Datei in den Codebeispielen enthält die folgenden Daten:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML-Daten wurden mit der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft statt der <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft geladen.  
  
- oder - 
Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft wird eine URL angegeben. Das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verfügt jedoch nicht über die entsprechenden Berechtigungen für die Webressource.</exception>
        <exception cref="T:System.NotSupportedException">Für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft ist eine URL angegeben, jedoch keine HTTP-basierte URL.  
  
- oder - 
Vor dem Verwenden des <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelements wurde ein relativer Pfad zur Entwurfszeit vom Designer nicht ordnungsgemäß zugeordnet.</exception>
        <exception cref="T:System.Web.HttpException">Der Zugriff auf den für die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen Pfad wird verweigert.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value><see langword="true" />, wenn die Auflistung eine Auflistung von <see cref="T:System.Collections.IList" />-Objekten ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Kann verwendet werden nur dann, wenn die <xref:System.Web.UI.WebControls.XmlDataSource> Instanz der Umwandlung in den <xref:System.ComponentModel.IListSource> Schnittstelle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>Ein Objekt, das die <see cref="T:System.Collections.IList" /> implementiert, die an eine Datenquelle gebunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Kann verwendet werden nur dann, wenn die <xref:System.Web.UI.WebControls.XmlDataSource> Instanz der Umwandlung in den <xref:System.ComponentModel.IListSource> Schnittstelle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Kann verwendet werden nur dann, wenn die <xref:System.Web.UI.WebControls.XmlDataSource> Instanz der Umwandlung in den <xref:System.Web.UI.IDataSource> Schnittstelle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Der Name der abzurufenden Ansicht. Wenn <see cref="F:System.String.Empty" /> angegeben ist, wird die Standardansicht für das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement abgerufen.</param>
        <summary>Ruft die benannte Datenquellenansicht ab, die dem Datenquellensteuerelement zugeordnet ist.</summary>
        <returns>Gibt das benannte <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" />-Objekt zurück, das dem <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement zugeordnet ist.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.Web.UI.IDataSource.GetViewNames" />.</summary>
        <returns>Ein Objekt, das die <see cref="T:System.Collections.ICollection" /> mit Namen implementiert, die die Liste von Ansichtsobjekten darstellen, die dem <see cref="T:System.Web.UI.IDataSource" />-Objekt zugeordnet sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Kann verwendet werden nur dann, wenn die <xref:System.Web.UI.WebControls.XmlDataSource> Instanz der Umwandlung in den <xref:System.Web.UI.IDataSource> Schnittstelle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Block von XSL-Daten (Extensible Stylesheet Language) ab, der eine XSLT-Transformation definiert, die für die vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verwalteten XML-Daten durchgeführt werden soll, bzw. legt diesen Block fest.</summary>
        <value>Eine Zeichenfolge mit Inline-XSL, das eine XML-Transformation definiert, die für die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft enthaltenen Daten ausgeführt werden soll. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In deklarativen Szenarios der <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> -Eigenschaft angegeben wird, als mehrzeiliges interne Eigenschaft von der <xref:System.Web.UI.WebControls.XmlDataSource> Objekt. Eine interne Eigenschaft ist mit XSL-Stylesheet-Daten, kompatibel, weil dadurch, dass Sie das Stylesheet in keiner Weise formatieren und Auffüllung Probleme wie z. B. das Auffüllen von Anführungszeichen ignorieren.  
  
 Wenn beide die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaften festgelegt sind, die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft austauschverarbeitungsmodi Vorrang vor, und die Daten in der XSL-Stylesheetdatei (XSL) werden anstelle der im angegebenen Stylesheet-Elemente verwendet die <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaft. Wenn ein XPath-Ausdruck festgelegt wird, wobei die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft, es wird angewendet, nachdem die XML-Daten transformiert werden.  
  
 Wenn Sie den Wert der Ändern der <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst. Wenn das Zwischenspeichern aktiviert ist, und Sie den Wert der ändern <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, wird der Cache für ungültig erklärt.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.XmlDataSource> Klasse verwendet die veraltete <xref:System.Xml.Xsl.XslTransform> Klasse, um XSL-Transformationen auszuführen. Wenn Stylesheet-Features, die nach eingeführt wurden, verwendet werden sollen die <xref:System.Xml.Xsl.XslTransform> Klasse wurde als veraltet markiert, die Transformationen manuell anwenden, indem die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> -Steuerelement zum Anzeigen von transformierten XML-Daten. Das Stylesheet die Transformation für ist Inline definiert, durch die <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> -Eigenschaft des Datenquellen-Steuerelement.  
  
  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt eine Liste von XSLT-Argumenten bereit, die mit dem durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />-Eigenschaft oder die <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />-Eigenschaft definierten Stylesheet verwendet werden, um eine Transformation der XML-Daten durchzuführen.</summary>
        <value>Ein <see cref="T:System.Xml.Xsl.XsltArgumentList" />-Objekt mit XSLT-Parametern und Objekten, die auf die XML-Daten angewendet werden sollen, wenn diese durch das <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement geladen werden. Der Standardwert ist <see langword="null" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie die <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> Eigenschaft bei der <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> Ereignis wird ausgelöst, um sicherzustellen, dass die XSLT-Parameter verfügbar sind, auf die Zeit, die die XSLT-Transformation auf die XML-Daten angewendet wird.  
  
 Wenn die <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> Eigenschaft festgelegt ist, wird die Cacheeinträge werden nicht automatisch ungültig, wenn die Parameter in der Argumentliste Transformationen ändern. In diesem Fall müssen Sie Code aus, um den Cache durch Festlegen von für ungültig erklären schreiben die <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement zum Anzeigen von transformierten XML-Daten. Die XML-Transformation erfolgt mit dem Stylesheet, angegeben durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft. Darüber hinaus das Stylesheet verwendet, die an das Datenquellen-Steuerelement in übergeben werden ein <xref:System.Xml.Xsl.XsltArgumentList> Objekt zur Laufzeit. Im Codebeispiel wird veranschaulicht, wie Sie übergeben die <xref:System.Xml.Xsl.XsltArgumentList> an den Datenquellen-Steuerelement durch Behandeln der <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> -Ereignis mit einem benutzerdefinierten Ereignishandler.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Die Transformation der XML-Daten wird mit dem folgenden Stylesheet ausgeführt.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Dateinamen einer XSL-Datei (Extensible Stylesheet Language) an, die eine XSLT-Transformation definiert, die für die vom <see cref="T:System.Web.UI.WebControls.XmlDataSource" />-Steuerelement verwalteten XML-Daten durchgeführt werden soll.</summary>
        <value>Der absolute physische Pfad oder der relative Pfad der XSL-Stylesheetdatei, die eine XML-Transformation definiert, die für die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft enthaltenen Daten ausgeführt werden soll. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn beide die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> und <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaften festgelegt sind, die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft austauschverarbeitungsmodi Vorrang vor, und die Daten in der XSL-Stylesheetdatei (XSL) werden anstelle der im angegebenen Stylesheet-Elemente verwendet die <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Eigenschaft. Wenn ein XPath-Ausdruck festgelegt wird, wobei die <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft, es wird angewendet, nachdem die XML-Daten transformiert werden.  
  
 Wenn Sie den Wert der Ändern der <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> -Eigenschaft, die <xref:System.Web.UI.IDataSource.DataSourceChanged> Ereignis wird ausgelöst. Wenn das Zwischenspeichern aktiviert ist, und Sie den Wert der ändern <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, wird der Cache für ungültig erklärt.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.XmlDataSource> Klasse verwendet die veraltete <xref:System.Xml.Xsl.XslTransform> Klasse, um XSL-Transformationen auszuführen. Wenn Stylesheet-Features, die nach eingeführt wurden, verwendet werden sollen die <xref:System.Xml.Xsl.XslTransform> Klasse wurde als veraltet markiert, die Transformationen manuell anwenden, indem die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement und ein <xref:System.Web.UI.WebControls.TreeView> -Steuerelement zum Anzeigen von transformiert die XML-Daten in einem Web Form. Die Transformation wird ausgeführt, mit dem Stylesheet, angegeben durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft. Geben Sie optional Transformationsargumente für das Stylesheet mithilfe einer <xref:System.Xml.Xsl.XsltArgumentList>. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>-Eigenschaft.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XSL-Stylesheet, das die XML-Transformation ausführt, hat die folgende Struktur:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, bevor das Stylesheet, das durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />-Eigenschaft definiert wird oder durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />-Eigenschaft identifiziert wird, auf XML-Daten angewendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> Ereignis festgelegt der <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> Eigenschaft mit einer <xref:System.Xml.Xsl.XsltArgumentList> Objekt, vor der <xref:System.Web.UI.WebControls.XmlDataSource> Steuerelement führt eine XML-Transformation.  
  
 Weitere Informationen zum Behandeln von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einer <xref:System.Web.UI.WebControls.XmlDataSource> steuern Sie mit einem <xref:System.Web.UI.WebControls.TreeView> -Steuerelement zum Anzeigen von transformierten XML-Daten. Die XML-Transformation erfolgt mit dem Stylesheet, angegeben durch die <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Eigenschaft. Darüber hinaus das Stylesheet verwendet, die an das Datenquellen-Steuerelement in übergeben werden ein <xref:System.Xml.Xsl.XsltArgumentList> zur Laufzeit. Im Codebeispiel wird veranschaulicht, wie Sie übergeben die <xref:System.Xml.Xsl.XsltArgumentList> Objekt, das Datenquellen-Steuerelement durch Behandeln der <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> -Ereignis mit einem benutzerdefinierten Ereignishandler.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Die Transformation der XML-Daten wird mit dem folgenden Stylesheet ausgeführt:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen XPath-Ausdruck an, der auf die XML-Daten angewendet werden soll, die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen XML-Datei enthalten sind.</summary>
        <value>Eine Zeichenfolge, die einen XPath-Ausdruck darstellt, der zum Filtern der Daten verwendet werden kann, die in der <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />-Eigenschaft oder in der durch die <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />-Eigenschaft angegebenen XML-Datei enthalten sind. Der Standardwert ist <see cref="F:System.String.Empty" />sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu XPath-Datenbindungsausdrücke, finden Sie unter [ein Tabellensteuerelement für das XmlDataSource-Steuerelement binden](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit einem <xref:System.Web.UI.WebControls.XmlDataSource> -Steuerelement mit einem auf Vorlagen basierenden <xref:System.Web.UI.WebControls.Repeater> -Steuerelement zum Anzeigen von XML-Daten, die mithilfe eines XPath-Ausdrucks gefiltert wurde. In diesem Beispiel-XPath-Syntax wird verwendet, um die XML-Daten zu filtern bei der <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> -Eigenschaft des Datenquellen-Steuerelement festgelegt ist, und bindet auch Elemente der <xref:System.Web.UI.WebControls.Repeater> Steuerelementvorlage, die den XML-Daten.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 Die XML-Datei im Codebeispiel enthält die folgenden Daten:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Dokument wird geladen.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
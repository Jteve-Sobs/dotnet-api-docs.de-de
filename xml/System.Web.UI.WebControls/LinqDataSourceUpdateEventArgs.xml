<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad4de834753cb8cf7c08131b0ca92f63c49de8d7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30598314" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Objekt übergeben wird, um einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Sie können die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Objekt, das die Daten zu überprüfen, bevor der Update-Vorgang in der Datenquelle ausgeführt wird. Sie können dann überprüfen Sie die Daten, zu überprüfen Validierungsausnahmen vom Datenklasse ausgelöst wird, oder ändern Sie einen Wert vor dem Update. Sie können auch den Updatevorgang "Abbrechen".  
  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Objekt enthält die Daten, die ursprünglich aus der Datenquelle abgerufen wurden. Die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> Objekt enthält die Daten, die während des Updatevorgangs in der Datenquelle gespeichert werden.  
  
 Wenn das Objekt, das die Datenquelle repräsentiert, eine Validierungsausnahme vor dem Aktualisieren der Daten auslöst, die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> Eigenschaft enthält eine Instanz von der <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> Klasse. Sie können alle Validierungsausnahmen durch Abrufen der <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> Eigenschaft. Wenn keine Validierungsausnahme ausgelöst wird, die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> Eigenschaft enthält `null`. Wenn Sie die Validierungsausnahmen behandeln und nicht die Ausnahme erneut ausgelöst werden soll, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> Eigenschaft `true`.  
  
 Wird standardmäßig die <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement speichert die ursprünglichen aus der Datenquelle im Werte Anzeigezustand auf der Webseite, mit Ausnahme derjenigen, deren <xref:System.Data.Linq.Mapping.ColumnAttribute> Attribut markiert ist, als `UpdateCheck.Never`. LINQ to SQL überprüft die Integrität der Daten automatisch vor dem Aktualisieren der Daten. Dies geschieht durch Vergleichen der aktuellen Werte in der Datenquelle mit den ursprünglichen Werten im Ansichtszustand gespeichert. LINQ to SQL wird eine Ausnahme auslöst, wenn die Werte in der Datenquelle geändert haben. Sie können zusätzliche Validierung ausführen, erstellen Sie einen Handler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Im Beispiel wird gezeigt, wie Eigenschaften von Vergleichen die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> -Eigenschaft können Sie bestimmen, ob der Wert in der `Category` -Eigenschaft geändert hat. Wenn dies der Fall ist, die `CategoryChanged` -Eigenschaft des Objekts in der <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> -Eigenschaftensatz auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Es zeigt ausnahmemeldungen für die Validierung mithilfe einer <xref:System.Web.UI.WebControls.Label> Steuerelement.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">Die Ausnahme, die beim Validieren der zu aktualisierenden Daten aufgetreten ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />-Klasse mit der angegebenen Ausnahme.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">Ein Objekt des in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" />-Eigenschaft angegebenen Typs, das die Werte enthält, die ursprünglich von der Datenquelle abgerufen wurden.</param>
        <param name="newObject">Ein Objekt des in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" />-Eigenschaft angegebenen Typs, das die Werte enthält, die in der Datenquelle gespeichert werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Ausnahme ab, die ausgelöst wurde, während die Daten vor dem Aktualisierungsvorgang validiert wurden.</summary>
        <value>Die Ausnahme, wenn ein Fehler aufgetreten ist, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Validierungsausnahme ausgelöst wird, bevor der Aktualisierungsvorgang ausgeführt wird, wird die Ausnahme gespeichert, der <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> Eigenschaft. In einem Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> -Ereignis können Sie die Ausnahme durch Abrufen der <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Es zeigt ausnahmemeldungen für die Validierung mithilfe einer <xref:System.Web.UI.WebControls.Label> Steuerelement.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Ausnahme behandelt wurde und dass diese nicht erneut ausgelöst werden soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Ausnahme behandelt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können, erstellen Sie einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis Validierungsausnahmen untersuchen, die vor dem Updatevorgang aufgetreten sind. Wenn Sie die Ausnahme behandeln und nicht erneut ausgelöst werden soll möchten, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> Eigenschaft `true`. Wenn Sie nicht festlegen, die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> Eigenschaft `true`, wird die Ausnahme an den nächsten Ereignishandler in der Aufrufliste weitergegeben werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Es zeigt ausnahmemeldungen für die Validierung mithilfe einer <xref:System.Web.UI.WebControls.Label> Steuerelement.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das die Werte enthält, die in der Datenquelle gespeichert werden.</summary>
        <value>Ein Objekt des in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" />-Eigenschaft angegebenen Typs, das die zu speichernden Daten enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellen Sie einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis, und rufen die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> Eigenschaft zum Überprüfen der Daten. Sie können auch die Daten ändern oder brechen Sie den Updatevorgang.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Im Beispiel wird gezeigt, wie Eigenschaften von Vergleichen die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> -Eigenschaft können Sie bestimmen, ob der Wert in der `Category` -Eigenschaft geändert hat. Wenn dies der Fall ist, die `CategoryChanged` -Eigenschaft des Objekts in der <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> -Eigenschaftensatz auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt mit den Werten ab, die ursprünglich von der Datenquelle abgerufen wurden.</summary>
        <value>Ein Objekt des in der <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" />-Eigenschaft angegebenen Typs, das die von der Datenquelle abgerufenen Daten enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Eigenschaft, um die ursprünglichen Werte mit den aktuellen Werten in der Datenquelle zu überprüfen und zu den Updatevorgang abbrechen oder andere Aktionen ausführen.  
  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> -Eigenschaft enthält die Werte für Status nur die Eigenschaften, die in einer Ansicht beibehalten werden auf der Webseite. Unter diesen Umständen wird eine Eigenschaft beibehalten:  
  
-   Wenn es in einem datengebundenen Steuerelement angezeigt wird.  
  
-   Wenn die <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> Eigenschaft von der <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> -Attributsatz zur `Always` oder `WhenChanged`.  
  
 Wenn die <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> -Eigenschaftensatz auf `Never` und der Wert nicht in einem datengebundenen Steuerelement angezeigt wird, der Wert wird auf der Webseite nicht gespeichert. Er kann nicht in diesem Fall zugewiesen werden, um die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Updating> Ereignis. Im Beispiel wird gezeigt, wie Eigenschaften von Vergleichen die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> -Eigenschaft können Sie bestimmen, ob der Wert in der `Category` -Eigenschaft geändert hat. Wenn dies der Fall ist, die `CategoryChanged` -Eigenschaft des Objekts in der <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> -Eigenschaftensatz auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
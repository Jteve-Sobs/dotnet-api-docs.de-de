<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata><Meta Name="ms.openlocfilehash" Value="44357fd90a953a9836dfc1a4cac5e75db04f03a4" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77247618" /></Metadata><TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zeigt ein Textfeldsteuerelement und eine Schaltfläche zum Durchsuchen an, mit denen Benutzer eine Datei zum Hochladen auf den Server auswählen können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inhalte dieses Themas:  
  
-   [Einführung](#introduction)  
  
-   [Hochgeladene Dateien werden gespeichert](#saving_uploaded_files)  
  
-   [Sicherheitshinweise](#security_considerations)  
  
-   [Arbeitsspeicher Einschränkungen](#memory_limitations)  
  
-   [Verwenden des FileUpload-Steuer Elements mit dem Update Panel-Steuerelement](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [Deklarative Syntax](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.UI.WebControls.FileUpload>-Klasse zeigt ein Textfeld-Steuerelement und eine Schaltfläche zum Durchsuchen an, mit der Benutzer eine Datei auf dem Client auswählen und auf den Webserver hochladen können. Der Benutzer gibt die hoch zuladende Datei an, indem Sie den vollständigen Pfad der Datei auf dem lokalen Computer (z. b. **c:\MyFiles\TestFile.txt**) in das Textfeld des Steuer Elements eingeben. Alternativ können Benutzer die Datei auswählen, indem Sie auf die Schaltfläche **Durchsuchen** klicken und Sie dann im Dialogfeld **Datei auswählen** suchen.  
  
 Verwenden Sie die <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>-Eigenschaft, um den Namen einer Datei auf einem Client zu erhalten, der mithilfe des <xref:System.Web.UI.WebControls.FileUpload>-Steuer Elements hochgeladen werden soll. Der Dateiname, der von dieser Eigenschaft zurückgegeben wird, enthält nicht den Pfad der Datei auf dem Client.  
  
 Die <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft ruft ein <xref:System.IO.Stream> Objekt ab, das auf eine hoch zuladende Datei zeigt. Verwenden Sie diese Eigenschaft, um auf den Inhalt der Datei als Bytes zuzugreifen. Beispielsweise können Sie das <xref:System.IO.Stream>-Objekt verwenden, das von der <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft zurückgegeben wird, um den Inhalt der Datei als Bytes zu lesen und in einem Bytearray zu speichern. Alternativ können Sie die <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A>-Eigenschaft verwenden, um alle Bytes in der Datei abzurufen.  
  
 Mit der <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft wird das zugrunde liegende <xref:System.Web.HttpPostedFile> Objekt für die hoch zuladende Datei abgerufen. Sie können diese Eigenschaft verwenden, um auf zusätzliche Eigenschaften in der Datei zuzugreifen. Mit der <xref:System.Web.HttpPostedFile.ContentLength%2A>-Eigenschaft wird die Länge der Datei abgerufen. Die <xref:System.Web.HttpPostedFile.ContentType%2A>-Eigenschaft ruft den MIME-Inhaltstyp der Datei ab. Außerdem können Sie die <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft verwenden, um auf die <xref:System.Web.HttpPostedFile.FileName%2A>-Eigenschaft, die <xref:System.Web.HttpPostedFile.InputStream%2A>-Eigenschaft und die <xref:System.Web.HttpPostedFile.SaveAs%2A>-Methode zuzugreifen. Allerdings wird die gleiche Funktionalität durch die <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>-Eigenschaft, die <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft und die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode bereitgestellt.  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>Hochgeladene Dateien werden gespeichert  
 Das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement speichert eine Datei nicht automatisch auf dem Server, nachdem der Benutzer die hoch zuladende Datei ausgewählt hat. Sie müssen explizit ein Steuerelement oder einen Mechanismus bereitstellen, damit der Benutzer die angegebene Datei übermitteln kann. Beispielsweise können Sie eine Schaltfläche angeben, auf die der Benutzer klickt, um die Datei hochzuladen. Der Code, den Sie zum Speichern der angegebenen Datei schreiben, sollte die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode abrufen, die den Inhalt einer Datei in einem angegebenen Pfad auf dem Server speichert. In der Regel wird die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode in einer Ereignis Behandlungsmethode für ein Ereignis aufgerufen, das ein Postback an den Server auslöst. Wenn Sie z. b. eine Schaltfläche zum Übermitteln einer Datei angeben, können Sie den Code einschließen, um die Datei in der Ereignis Behandlungsmethode für das Click-Ereignis zu speichern.  
  
 Bevor Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufrufen, um die Datei auf dem Server zu speichern, verwenden Sie die Eigenschaft <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>, um sicherzustellen, dass das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement eine Datei enthält Wenn die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> `true`zurückgibt, müssen Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufzurufen. Wenn `false`zurückgegeben wird, wird dem Benutzer eine Meldung angezeigt, die besagt, dass das Steuerelement keine Datei enthält. Überprüfen Sie die <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft nicht, um zu bestimmen, ob eine hoch zuladende Datei vorhanden ist, da diese Eigenschaft standardmäßig 0 Bytes enthält. Dies hat zur Folge, dass die Eigenschaft <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> einen nicht-NULL-Wert zurückgibt, auch wenn das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement leer ist.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>Überlegungen zur Sicherheit  
 Wenn Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufgerufen haben, müssen Sie den vollständigen Pfad des Verzeichnisses angeben, in dem die hochgeladene Datei gespeichert werden soll. Wenn Sie im Anwendungscode nicht explizit einen Pfad angeben, wird eine Ausnahme ausgelöst, wenn ein Benutzer versucht, eine Datei hochzuladen. Dieses Verhalten trägt dazu bei, die Dateien auf dem Server zu schützen, indem verhindert wird, dass Benutzer in beliebige Positionen in der Verzeichnisstruktur Ihrer Anwendung schreiben können, und der Zugriff auf sensible Stamm Verzeichnisse wird verhindert.  
  
 Die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode schreibt die hochgeladene Datei in das angegebene Verzeichnis. Daher muss die ASP.NET-Anwendung über Schreibzugriff auf das Verzeichnis auf dem Server verfügen. Es gibt zwei Möglichkeiten, wie die Anwendung Schreibzugriff erhalten kann. Sie können explizit Schreibzugriff auf das Konto gewähren, unter dem die Anwendung ausgeführt wird, und zwar in dem Verzeichnis, in dem die hochgeladenen Dateien gespeichert werden. Alternativ können Sie die Vertrauens Ebene erhöhen, die der ASP.NET-Anwendung gewährt wird. Um Schreibzugriff auf das ausführende Verzeichnis für die Anwendung zu erhalten, muss der Anwendung das <xref:System.Web.AspNetHostingPermission>-Objekt mit der auf den <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> Wert festgelegten Vertrauens Ebene erteilt werden. Das Erhöhen der Vertrauens Ebene erhöht den Anwendungs Zugriff auf Ressourcen auf dem Server. Beachten Sie, dass dies kein sicherer Ansatz ist, da ein böswilliger Benutzer, der die Kontrolle über Ihre Anwendung erlangt, auch unter dieser höheren Vertrauens Ebene ausgeführt werden kann. Es ist eine bewährte Vorgehensweise, eine ASP.NET-Anwendung im Kontext eines Benutzers mit den minimalen Berechtigungen auszuführen, die für die Anwendung erforderlich sind. Weitere Informationen zur Sicherheit in ASP.NET-Anwendungen finden Sie unter [grundlegende Sicherheitsmethoden für Webanwendungen](https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)) und [ASP.net-Vertrauens Ebenen und-Richtlinien Dateien](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>Arbeitsspeicher Einschränkungen  
 Eine Möglichkeit zum Schutz vor Denial-of-Service-Angriffen besteht darin, die Größe der Dateien einzuschränken, die mithilfe des <xref:System.Web.UI.WebControls.FileUpload>-Steuer Elements hochgeladen werden können. Sie sollten eine Größenbeschränkung festlegen, die für die Typen von Dateien geeignet ist, die hochgeladen werden sollen. Der Standardwert für die Größenbeschränkung beträgt 4096 Kilobyte (KB) oder 4 Megabyte (MB). Sie können zulassen, dass größere Dateien hochgeladen werden, indem Sie das `maxRequestLength`-Attribut des [HttpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) -Elements festlegen. Um die maximal zulässige Dateigröße für die gesamte Anwendung zu erhöhen, legen Sie das `maxRequestLength`-Attribut in der Datei "Web. config" fest. Um die maximal zulässige Dateigröße für eine angegebene Seite zu vergrößern, legen Sie das `maxRequestLength`-Attribut innerhalb des `location`-Elements in der Datei Web. config fest. Ein Beispiel finden Sie unter [Location-Element (ASP.NET Settings Schema)](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/b6x6shw7(v=vs.100)).  
  
 Beim Hochladen großer Dateien erhält der Benutzer möglicherweise auch die folgende Fehlermeldung:  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 Wenn die Benutzer diese Fehlermeldung erhalten, erhöhen Sie den Wert des `memoryLimit` Attributs im [processModel](https://msdn.microsoft.com/library/4b8fe20e-74c8-4566-b72c-ce5f83c8e32d) -Element der Datei "Web. config" für die Anwendung. Das `memoryLimit`-Attribut gibt die maximale Arbeitsspeicher Menge an, die von einem Arbeitsprozess verwendet werden kann. Wenn der Arbeitsprozess den `memoryLimit` Betrag überschreitet, wird ein neuer Prozess erstellt, um ihn zu ersetzen, und alle aktuellen Anforderungen werden dem neuen Prozess erneut zugewiesen.  
  
 Um zu steuern, ob die hoch zuladende Datei temporär im Arbeitsspeicher oder auf dem Server gespeichert wird, während die Anforderung verarbeitet wird, legen Sie das `requestLengthDiskThreshold`-Attribut des [HttpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) -Elements fest. Mit diesem Attribut können Sie die Größe des Eingabestreampuffers verwalten. Der Standardwert ist 256 Bytes. Der von Ihnen angegebene Wert sollte nicht den Wert überschreiten, den Sie für das `maxRequestLength`-Attribut angeben.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>Verwenden des FileUpload-Steuer Elements mit dem Update Panel-Steuerelement  
 Das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement ist nur für die Verwendung in Post Back Szenarien und nicht für asynchrone Post Back Szenarien während des partiellen Seiten Rendering vorgesehen. Wenn Sie ein <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement in einem <xref:System.Web.UI.UpdatePanel>-Steuerelement verwenden, muss die Datei mithilfe eines Steuer Elements hochgeladen werden, das ein <xref:System.Web.UI.PostBackTrigger> Objekt für den Bereich ist. <xref:System.Web.UI.UpdatePanel> Steuerelemente werden verwendet, um die ausgewählten Bereiche einer Seite zu aktualisieren, anstatt die gesamte Seite mit einem Postback zu aktualisieren. Weitere Informationen finden Sie unter Übersicht über das [Update Panel-Steuer](https://docs.microsoft.com/previous-versions/aspnet/bb386454(v=vs.100)) Element und [Übersicht über das Seiten Rendering](https://docs.microsoft.com/previous-versions/aspnet/bb386573(v=vs.100)).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Für dieses Thema steht ein Visual Studio-Website Projekt mit Quellcode zur Verfügung: [herunterladen](https://go.microsoft.com/fwlink/?LinkId=191897).  
  
 Dieser Abschnitt enthält die folgenden vier Beispiele:  
  
-   Im ersten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem Pfad speichert, der im Code angegeben ist.  
  
-   Im zweiten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem angegebenen Verzeichnis im Dateisystem für die Anwendung speichert.  
  
-   Das dritte Beispiel zeigt, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem angegebenen Pfad speichert und die Größe der Datei einschränkt, die hochgeladen werden kann.  
  
-   Im vierten Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem angegebenen Pfad speichert und nur Dateien zulässt, die die Dateinamen Erweiterungen ". doc" oder ". xls" hochladen.  
  
> [!CAUTION]
>  In diesen Beispielen wird die grundlegende Syntax für das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement veranschaulicht, aber Sie zeigen nicht alle erforderlichen Fehlerprüfungen an, die vor dem Speichern der Datei abgeschlossen werden sollten. Ein ausführlicheres Beispiel finden Sie unter <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem Pfad speichert, der im Code angegeben ist. Die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode wird aufgerufen, um die Datei im angegebenen Pfad auf dem Server zu speichern.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem angegebenen Verzeichnis im Dateisystem für die Anwendung speichert. Die <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType>-Eigenschaft wird verwendet, um den physischen Dateisystempfad des Stamm Verzeichnisses für die aktuell ausgeführte Serveranwendung zu erhalten. Die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode wird aufgerufen, um die Datei im angegebenen Pfad auf dem Server zu speichern.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem Pfad speichert, der im Code angegeben ist. Das-Steuerelement schränkt die Größe der Datei ein, die auf 2 MB hochgeladen werden kann. Die <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft wird verwendet, um auf die zugrunde liegende <xref:System.Web.HttpPostedFile.ContentLength%2A> Eigenschaft zuzugreifen und die Größe der Datei zurückzugeben. Wenn die Größe der hoch zuladenden Datei kleiner als 2 MB ist, wird die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufgerufen, um die Datei im angegebenen Pfad auf dem Server zu speichern. Zusätzlich zur Überprüfung der Einstellung für die maximale Dateigröße im Anwendungscode können Sie das `maxRequestLength`-Attribut des [HttpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) -Elements auf eine maximal zulässige Größe in der Konfigurationsdatei für die Anwendung festlegen.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem Pfad speichert, der im Code angegeben ist. In diesem Beispiel können nur Dateien mit den Dateinamen Erweiterungen ". doc" oder ". xls" hochgeladen werden. Die <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType>-Methode wird aufgerufen, um die Erweiterung der hoch zuladenden Datei zurückzugeben. Wenn die Datei die Dateinamenerweiterung ". doc" oder ". xls" aufweist, wird die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufgerufen, um die Datei im angegebenen Pfad auf dem Server zu speichern.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie den <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A>-Konstruktor, um eine neue Instanz der <xref:System.Web.UI.WebControls.FileUpload>-Klasse zu initialisieren. Das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement speichert eine Datei nicht automatisch auf dem Server, nachdem der Benutzer die hoch zuladende Datei ausgewählt hat. Sie müssen explizit ein Steuerelement oder einen Mechanismus bereitstellen, damit der Benutzer die angegebene Datei übermitteln kann. Beispielsweise können Sie eine Schaltfläche angeben, auf die der Benutzer klickt, um die Datei hochzuladen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine neue Instanz der <xref:System.Web.UI.WebControls.FileUpload>-Klasse initialisiert wird. Beachten Sie, dass in diesem Beispiel die Konstruktorsyntax veranschaulicht wird, aber dem Steuerelement keine Funktionen hinzugefügt werden, nachdem es erstellt wurde.  
  
 Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.Web.UI.WebControls.FileUpload>-Klasse bereitgestellt wird.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream für das Rendering von HTML-Inhalten auf dem Client darstellt.</param>
        <summary>Fügt die HTML-Attribute und -Stile eines <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelements hinzu, die in dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt gerendert werden sollen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A>-Methode wird hauptsächlich von Steuerelement Entwicklern verwendet, um die entsprechenden Attribute und Stile in den <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> Ausgabestream für ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement einzufügen. Die <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A>-Methode überschreibt die <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType>-Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob mehrere Dateien zum Hochladen ausgewählt werden können.</summary>
        <value><see langword="true" />, wenn mehrere Dateien ausgewählt werden können, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Array von Bytes in einer durch das <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelement angegebenen Datei ab.</summary>
        <value>Ein <see cref="T:System.Byte" />-Array mit dem Inhalt der angegebenen Datei.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement liest die Datei nicht automatisch vom Client. Sie müssen explizit ein Steuerelement oder einen Mechanismus bereitstellen, damit der Benutzer die angegebene Datei übermitteln kann. Beispielsweise können Sie eine Schaltfläche angeben, auf die der Benutzer klicken kann, um die Datei hochzuladen. Der Code, den Sie zum Speichern der angegebenen Datei schreiben, könnte die <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A>-Eigenschaft, die den Inhalt der Datei zurückgibt, aufgerufen werden.  
  
 Vor dem Aufrufen der <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A>-Eigenschaft sollten Sie die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>-Eigenschaft verwenden, um sicherzustellen, dass das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement eine hoch zuladende Datei enthält. Wenn die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> `true`zurückgibt, müssen Sie die <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A>-Eigenschaft aufzurufen. Wenn `false`zurückgegeben wird, wird dem Benutzer eine Meldung angezeigt, die besagt, dass das Steuerelement keine Datei enthält. Wenn Sie keinen Fehler Behandlungs Code bereitstellen, um zu überprüfen, ob eine Datei vorhanden ist, wird beim Versuch, eine nicht vorhandene Datei zu speichern, eine <xref:System.Web.HttpException> Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement erstellt wird. Wenn der Benutzer auf die Schaltfläche **Datei hochladen** klickt, wird der Inhalt der Datei als Bytes in einem Textfeld auf der Seite angezeigt. In diesem Beispiel wird die <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A>-Eigenschaft verwendet, um die gesamte Datei hochzuladen.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Es wurde nicht die gesamte Datei gelesen.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.IO.Stream" />-Objekt ab, das auf eine Datei verweist, die mithilfe des <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelements hochgeladen werden soll.</summary>
        <value>Ein <see cref="T:System.IO.Stream" />, der auf eine Datei verweist, die mit dem <see cref="T:System.Web.UI.WebControls.FileUpload" /> hochgeladen werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft ruft ein <xref:System.IO.Stream> Objekt ab, das auf eine Datei verweist, die mithilfe des <xref:System.Web.UI.WebControls.FileUpload>-Steuer Elements hochgeladen werden soll. Verwenden Sie die <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft, um auf den Inhalt der Datei zuzugreifen. Beispielsweise können Sie das <xref:System.IO.Stream>-Objekt verwenden, das von dieser Eigenschaft zurückgegeben wird, um den Inhalt der Datei als Bytes zu lesen und in einem Bytearray zu speichern.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement erstellt wird. Die <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft wird verwendet, um den Inhalt der Datei in ein Bytearray zu lesen. Wenn der Benutzer auf die Schaltfläche **Datei hochladen** klickt, wird der Inhalt der Datei als Bytes in einem Textfeld auf der Seite angezeigt.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen einer Datei auf einem Client ab, die mithilfe des <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelements hochgeladen werden soll.</summary>
        <value>Eine Zeichenfolge, die den Namen einer Datei auf einem Client angibt, die mit <see cref="T:System.Web.UI.WebControls.FileUpload" /> hochgeladen werden soll.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft den Namen einer Datei auf einem Client ab, die mithilfe des <xref:System.Web.UI.WebControls.FileUpload>-Steuerelements hochgeladen werden soll. Der Dateiname, der von der <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>-Eigenschaft zurückgegeben wird, enthält nicht den Pfad der Datei auf dem Client.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das Dateien in einem Pfad speichert, der im Code angegeben ist. Die <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>-Eigenschaft wird verwendet, um den Namen der hoch zuladenden Datei zu erhalten. Die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode wird aufgerufen, um die Datei im angegebenen Pfad auf dem Server zu speichern, wobei der Name der Datei auf dem Client verwendet wird. Beachten Sie, dass in diesem Beispiel die grundlegende Syntax für dieses Steuerelement veranschaulicht wird. es wird jedoch nicht die erforderliche Fehlerüberprüfung veranschaulicht, die vor dem Speichern der Datei durchgeführt werden sollte. Ein ausführlicheres Beispiel finden Sie unter <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelement eine Datei enthält.</summary>
        <value><see langword="true" />, wenn der <see cref="T:System.Web.UI.WebControls.FileUpload" /> eine Datei enthält, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>-Eigenschaft ruft einen Wert ab, der angibt, ob das <xref:System.Web.UI.WebControls.FileUpload> Steuerelement eine Datei zum Hochladen enthält. Verwenden Sie diese Eigenschaft, um zu überprüfen, ob eine hoch zuladende Datei vorhanden ist. Bevor Sie beispielsweise die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufrufen, um die Datei auf dem Datenträger zu speichern, verwenden Sie die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>-Eigenschaft, um zu überprüfen, ob die Datei Wenn <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> `true`zurückgibt, müssen Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufzurufen. Wenn `false`zurückgegeben wird, wird dem Benutzer eine Meldung angezeigt, die besagt, dass das Steuerelement keine Datei enthält.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das die Fehlerüberprüfung ausführt. Vor dem Speichern der Datei wird die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>-Methode aufgerufen, um zu überprüfen, ob das Steuerelement eine hoch zuladende Datei enthält. Außerdem wird die <xref:System.IO.File.Exists%2A?displayProperty=nameWithType>-Methode aufgerufen, um zu überprüfen, ob eine Datei mit dem gleichen Namen bereits im Pfad vorhanden ist. Wenn dies der Fall ist, wird dem Namen der Datei, die hochgeladen werden soll, ein Unterstrich vorangestellt, bevor die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufgerufen wird. Dadurch wird verhindert, dass die vorhandene Datei überschrieben wird.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Dateien hochgeladen wurden.</summary>
        <value><see langword="true" />, wenn beliebige Dateien hochgeladen wurden; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt auch `false` zurück, wenn eine leere Datei (0 Bytes) hochgeladen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />-Objekt, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.PreRender" />-Ereignis für das <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelement aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A>-Methode benachrichtigt das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement, vor dem Speichern des Ansichts Zustands und des Renderings von Inhalten alle notwendigen Schritte vor dem Rendering auszuführen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das zugrunde liegende <see cref="T:System.Web.HttpPostedFile" />-Objekt für eine Datei ab, die mit dem <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelement hochgeladen wird.</summary>
        <value>Ein <see cref="T:System.Web.HttpPostedFile" /> für eine mit <see cref="T:System.Web.UI.WebControls.FileUpload" /> hochgeladene Datei.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft ruft das zugrunde liegende <xref:System.Web.HttpPostedFile> Objekt für eine Datei ab, die mit dem <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement hochgeladen wird. Verwenden Sie diese Eigenschaft, um auf zusätzliche Eigenschaften der hochgeladenen Datei zuzugreifen.  
  
 Sie können die <xref:System.Web.HttpPostedFile.ContentLength%2A>-Eigenschaft verwenden, um die Länge der Datei zu erhalten. Sie können die <xref:System.Web.HttpPostedFile.ContentType%2A>-Eigenschaft verwenden, um den MIME-Inhaltstyp der Datei zu erhalten. Außerdem können Sie die <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft verwenden, um auf die <xref:System.Web.HttpPostedFile.FileName%2A>-Eigenschaft, die <xref:System.Web.HttpPostedFile.InputStream%2A>-Eigenschaft und die <xref:System.Web.HttpPostedFile.SaveAs%2A>-Methode zuzugreifen. Allerdings wird die gleiche Funktionalität durch die <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>-Eigenschaft, die <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>-Eigenschaft und die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode bereitgestellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement erstellt wird. Wenn der Benutzer auf die Schaltfläche **Datei hochladen** klickt, wird der Inhalt der Datei als Bytes in einem Textfeld auf der Seite angezeigt. In diesem Beispiel wird die <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>-Eigenschaft verwendet, um auf die <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType>-Eigenschaft zuzugreifen. Die <xref:System.Web.HttpPostedFile.ContentLength%2A>-Eigenschaft wird verwendet, um die Länge der Datei zu bestimmen, bevor der Dateiinhalt in ein Bytearray kopiert wird.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Auflistung von hochgeladenen Dateien ab.</summary>
        <value>Die Auflistung von hochgeladenen Dateien.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt, das den Inhalt des <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelements empfängt.</param>
        <summary>Sendet den Inhalt des <see cref="T:System.Web.UI.WebControls.FileUpload" />-Steuerelements an das angegebene <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt, das den auf dem Client zu rendernden Inhalt schreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.Render%2A>-Methode sendet den Inhalt des <xref:System.Web.UI.WebControls.FileUpload>-Steuer Elements an das angegebene <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> Objekt, das den auf dem Client zu Rendering-Inhalt schreibt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Eine Zeichenfolge, die den vollständigen Pfad des Speicherorts auf dem Server angibt, an dem die hochgeladene Datei gespeichert werden soll.</param>
        <summary>Speichert den Inhalt einer hochgeladenen Datei auf dem Webserver unter einem angegebenen Pfad.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode speichert den Inhalt einer hochgeladenen Datei in einem angegebenen Pfad auf dem Webserver.  
  
 Das <xref:System.Web.UI.WebControls.FileUpload>-Steuerelement speichert eine Datei nicht automatisch auf dem Server, nachdem der Benutzer die hoch zuladende Datei ausgewählt hat. Sie müssen explizit ein Steuerelement oder einen Mechanismus bereitstellen, damit der Benutzer die angegebene Datei übermitteln kann. Beispielsweise können Sie eine Schaltfläche angeben, auf die der Benutzer klickt, um die Datei hochzuladen. Der Code, den Sie zum Speichern der angegebenen Datei schreiben, sollte die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode abrufen, die den Inhalt einer Datei in einem angegebenen Pfad auf dem Server speichert. In der Regel wird die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode in einer Ereignis Behandlungsmethode für ein Ereignis aufgerufen, das ein Postback an den Server auslöst. Wenn Sie z. b. eine Schaltfläche zum Übermitteln einer Datei angeben, kann der Code zum Speichern der Datei auf dem Server in die Ereignis Behandlungsmethode für das Click-Ereignis eingefügt werden.  
  
 Wenn Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufgerufen haben, müssen Sie den vollständigen Pfad des Verzeichnisses auf dem Server angeben, in dem die hochgeladene Datei gespeichert werden soll. Wenn Sie im Anwendungscode nicht explizit einen Pfad angeben, wird eine <xref:System.Web.HttpException> Ausnahme ausgelöst, wenn ein Benutzer versucht, eine Datei hochzuladen. Dieses Verhalten trägt dazu bei, die Dateien auf dem Server sicher zu halten, indem Benutzern nicht gestattet wird, einen Pfad anzugeben, in dem die hochgeladenen Dateien gespeichert werden sollen.  
  
 Bevor Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufrufen, sollten Sie die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>-Eigenschaft verwenden, um sicherzustellen, dass das <xref:System.Web.UI.WebControls.FileUpload> Steuerelement eine hoch zuladende Datei enthält. Wenn die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> `true`zurückgibt, müssen Sie die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufzurufen. Wenn `false`zurückgegeben wird, wird dem Benutzer eine Meldung angezeigt, die besagt, dass das Steuerelement keine Datei enthält. Wenn Sie keinen Fehler Behandlungs Code bereitstellen, um zu überprüfen, ob eine Datei vorhanden ist, wird beim Versuch, eine nicht vorhandene Datei zu speichern, eine <xref:System.Web.HttpException> Ausnahme ausgelöst.  
  
 Damit der <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> funktioniert, muss die ASP.NET-Anwendung über Schreibzugriff auf das Verzeichnis auf dem Server verfügen. Es gibt zwei Möglichkeiten, wie die Anwendung Schreibzugriff erhalten kann. Sie können explizit Schreibzugriff auf das Konto gewähren, unter dem die Anwendung ausgeführt wird, und zwar in dem Verzeichnis, in dem die hochgeladenen Dateien gespeichert werden. Alternativ können Sie die Vertrauens Ebene erhöhen, die der ASP.NET-Anwendung gewährt wird. Um Schreibzugriff auf das ausführende Verzeichnis für die Anwendung zu erhalten, muss der Anwendung das <xref:System.Web.AspNetHostingPermission>-Objekt mit der auf den <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> Wert festgelegten Vertrauens Ebene erteilt werden. Das Erhöhen der Vertrauens Ebene erhöht den Anwendungs Zugriff auf Ressourcen auf dem Server. Beachten Sie, dass dies kein sicherer Ansatz ist, da ein böswilliger Benutzer, der die Kontrolle über Ihre Anwendung erlangt, auch unter dieser höheren Vertrauens Ebene ausgeführt werden kann. Es ist eine bewährte Vorgehensweise, eine ASP.NET-Anwendung im Kontext eines Benutzers auszuführen, der über die minimalen Berechtigungen verfügt, die für die Anwendung erforderlich sind. Weitere Informationen zur Sicherheit in ASP.NET-Anwendungen finden Sie unter [grundlegende Sicherheitsmethoden für Webanwendungen](https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)) und [ASP.net-Vertrauens Ebenen und-Richtlinien Dateien](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.FileUpload> Steuerelement erstellt wird, das die Fehlerüberprüfung ausführt. Bevor die Datei gespeichert wird, wird die <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>-Methode aufgerufen, um zu überprüfen, ob eine hoch zuladende Datei vorhanden ist. Außerdem wird die <xref:System.IO.File.Exists%2A?displayProperty=nameWithType>-Methode aufgerufen, um zu überprüfen, ob eine Datei mit demselben Namen bereits im Pfad vorhanden ist. Wenn dies der Fall ist, wird dem Namen der Datei, die hochgeladen werden soll, eine Zahl vorangestellt, bevor die <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>-Methode aufgerufen wird. Dadurch wird verhindert, dass die vorhandene Datei überschrieben wird.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><paramref name="filename" /> ist kein vollständiger Pfad.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)">Grundlegende Sicherheitsmaßnahmen für Webanwendungen</related>
      </Docs>
    </Member>
  </Members>
</Type>

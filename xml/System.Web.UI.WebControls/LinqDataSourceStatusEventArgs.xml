<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cefc2397b5ca87d16ecf9354b50038dfeabc13d2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30598804" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für die Ereignisse <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" /> und <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> -Klasse ermöglicht es Ihnen, die Ergebnisse von Datenvorgängen untersuchen, die von ausgeführten ein <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement. Ein <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Objekt übergeben wird, an die Ereignishandler für die <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, und <xref:System.Web.UI.WebControls.LinqDataSource.Updated> Ereignisse der <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement.  
  
 Wenn der Datenvorgang wurde erfolgreich abgeschlossen, das resultierende Objekt in gespeichert ist die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft ist `null`. Wenn der Datenvorgang fehlgeschlagen ist, wird die Ausnahme, die während der Datenvorgang aufgetreten sind gespeichert der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft ist `null`. Wenn Sie die Ausnahme, die durch dargestellt behandelt die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaftensatz, der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft `true` , damit die Ausnahme wird nicht ausgelöst werden.  
  
 Sie die Gesamtanzahl von Datensätzen zurückgegeben, die aus einer Abfrage durch Abrufen der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignis. Im Ereignishandler Wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft `null`, das Produkt-ID, aus dem Objekt in abgerufen wird der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und der Datenbank festgelegt ist, ist der Wert daher nicht bekannt, bis der Einfügevorgang abgeschlossen wurde. Die Ausnahmemeldung wird protokolliert, wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft ist nicht gleich `null`. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft legen Sie dann auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Der während der Datenoperation aufgetretene Fehler.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse mit einer Ausnahme, die als Ergebnis der Datenoperation aufgetreten ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird verwendet, wenn eine Ausnahme während des Datenvorgangs ausgelöst wird. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaftensatz wird automatisch auf `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">Ein Objekt, das die aus einer Datenoperation resultierenden Daten enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse mit einem Objekt, das die Daten aus der Datenoperation enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird verwendet, wenn der Datenvorgang ohne Fehler abgeschlossen ist. Die `result` Parameter enthält ein Objekt, das Ergebnis des Datenvorgangs darstellt. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> -Eigenschaftensatz wird automatisch auf `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">Ein Objekt, das die aus einer Datenoperation resultierenden Daten enthält.</param>
        <param name="totalRowCount">Die Anzahl der Zeilen, die von einem Datenabrufvorgang zurückgegeben wurden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse mit einem Objekt, das die Daten aus der Datenoperation sowie die Anzahl der zurückgegebenen Zeilen enthält.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die während der Datenoperation ausgelöste Ausnahme ab.</summary>
        <value>Ein <see cref="T:System.Exception" />-Objekt, das die Ausnahme darstellt, wenn ein Fehler aufgetreten ist, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Ausnahme während des Datenvorgangs ausgelöst wird, wird die Ausnahme gespeichert, der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft. Sie können Ereignishandler für erstellen die <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, und <xref:System.Web.UI.WebControls.LinqDataSource.Updated> Ereignisse und rufen Sie die Ausnahme, sofern vorhanden, über die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignis. Im Ereignishandler Wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft `null`, das Produkt-ID, aus dem Objekt in abgerufen wird der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und der Datenbank festgelegt ist, damit der Wert nicht bekannt ist, bis der Einfügevorgang abgeschlossen wurde. Die Ausnahmemeldung wird protokolliert, wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft ist nicht gleich `null`. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft legen Sie dann auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Ausnahme behandelt wurde und dass diese nicht erneut ausgelöst werden soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Ausnahme behandelt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können Ereignishandler für erstellen die <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, und <xref:System.Web.UI.WebControls.LinqDataSource.Updated> Ereignisse Ausnahmen zu untersuchen, die während dieser Vorgänge aufgetreten sind. Wenn Sie die Ausnahme behandeln und nicht erneut ausgelöst werden soll möchten, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft `true`. Wenn Sie nicht festlegen, die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft `true`, wird die Ausnahme an den nächsten Ereignishandler in der Aufrufliste weitergegeben werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignis. Im Ereignishandler Wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft `null`, das Produkt-ID, aus dem Objekt in abgerufen wird der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und der Datenbank festgelegt ist, ist der Wert daher nicht bekannt, bis der Einfügevorgang abgeschlossen wurde. Die Ausnahmemeldung wird protokolliert, wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft ist nicht gleich `null`. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft legen Sie dann auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das das Ergebnis einer Datenoperation darstellt.</summary>
        <value>Ein Objekt, das Daten aus der Datenoperation enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft, um Werte zu überprüfen, die von einem Datenvorgang zurückgegeben. Sie können aus einem Datenvorgang Ausgabeparameter abzurufen oder ändern Sie die Werte aus einer Abfrage zurückgegebene.  
  
 Die Daten aus der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft hängt von den Typ des Datenvorgangs, die ausgeführt wurden. Beim Löschen von Daten, die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft enthält ein Objekt des Typs im angegebenen die <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft, mit dem die ursprünglichen Werte, die aus der Datenquelle gelöscht wurden. Wenn Sie Daten einfügen oder aktualisieren, die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft enthält ein Objekt des Typs im angegebenen die <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft mit den neuen Werten, die mit der Datenquelle gespeichert wurden. Bei Auswahl von Daten, die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft enthält die Ergebnisse der Abfrage.  
  
 Wenn die select-Abfrage umfasst die Daten gruppiert werden, oder wählen Sie eine Teilmenge der Eigenschaften aus dem im angegebenen Typ der <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> -Eigenschaft, die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft ein Objekt von einem dynamisch erstellten Typ enthält. Andernfalls die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft enthält ein Objekt des Typs im angegebenen die <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Ereignis. Im Ereignishandler Wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft `null`, das Produkt-ID, aus dem Objekt in abgerufen wird der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und der Datenbank festgelegt ist, ist der Wert daher nicht bekannt, bis der Einfügevorgang abgeschlossen wurde. Die Ausnahmemeldung wird protokolliert, wenn die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Eigenschaft ist nicht gleich `null`. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Eigenschaft legen Sie dann auf `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamtanzahl der Zeilen in einem Dataset für einen Datenabrufvorgang ab.</summary>
        <value>Die Gesamtanzahl der Zeilen in einem Dataset für einen Datenabrufvorgang: -1, wenn das <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Objekt während eines Datenänderungsvorgangs erstellt wurde; -1, wenn Sie benutzerdefiniertes Paging durch Festlegen von <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> auf <see langword="true" /> und <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> auf <see langword="false" /> aktiviert haben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft, um die Anzahl der Datensätze im Dataset bei einem Vorgang zum Abrufen von Daten abzurufen. In der Regel wird diese Eigenschaft abrufen, wenn Datenseiten angezeigt werden und die Gesamtzahl der Datensätze angezeigt werden sollen.  
  
 Wenn Daten ausgelagert werden, wird der Wert in der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft von der tatsächlichen Anzahl der Zeilen, die von der Abfrage zurückgegeben werden, unterschiedlich sein. Dies ist, da die Abfrage gibt nur die Anzahl der Zeilen zurück, die für diese Seite der Daten erforderlich sind.  
  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft enthält die Anzahl der Datensätze aus einer Abfrage nur, wenn darauf in einem Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selected> Ereignis. Wenn die Eigenschaft zugegriffen wird, von einem Ereignishandler für die <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, oder <xref:System.Web.UI.WebControls.LinqDataSource.Updated> -Ereignis der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft enthält, -1.  
  
 Der Wert des der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft hängt die <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Eigenschaft der <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement, und klicken Sie auf die `AllowPaging` Eigenschaft des datengebundenen Steuerelements. Die folgende Tabelle enthält die möglichen Werte für die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft.  
  
|AutoPage-Eigenschaft des LinqDataSource-Steuerelement|AllowPaging-Eigenschaft des datengebundenen Steuerelements|TotalRowCount-Eigenschaft|Ergebnis|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|Anzahl der Datensätze für eine Abfrage.|Daten werden automatisch ausgelagert.|  
|`false`|`false`|Anzahl der Datensätze für eine Abfrage.|Daten werden nicht ausgelagert.|  
|`true`|`false`|-1|Daten werden nicht ausgelagert.|  
|`false`|`true`|Der Wert, der Sie zugewiesen der <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> Eigenschaft im Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Ereignis.|Daten werden gemäß den Werten ausgelagert, die Sie angegeben, wenn Paging angepasst.|  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine Webseite mit einem <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement, ein <xref:System.Web.UI.WebControls.GridView> -Steuerelement, und ein <xref:System.Web.UI.WebControls.Literal> Steuerelement. Die <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement definiert einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selected> Ereignis.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 Das folgende Beispiel zeigt den Code für den Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selected> Ereignis. Der Wert der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Eigenschaft zugewiesen ist der <xref:System.Web.UI.WebControls.Literal> Steuerelement.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
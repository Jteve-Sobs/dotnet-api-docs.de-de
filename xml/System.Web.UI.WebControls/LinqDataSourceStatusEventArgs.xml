<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1eaa7efb46dc1e004579fef514fcd8db71c9ed26" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70447386" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für die Ereignisse <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" /> und <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> der-Klasse können Sie die Ergebnisse von Daten Vorgängen untersuchen, die von <xref:System.Web.UI.WebControls.LinqDataSource> einem-Steuerelement ausgeführt wurden. Ein <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> -Objekt wird an Ereignishandler für die <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>Ereignisse, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>und des <xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSource> -Steuer Elements übermittelt.  
  
 Wenn der Daten Vorgang erfolgreich abgeschlossen wurde, wird das resultierende Datenobjekt in der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft gespeichert <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> , und `null`die-Eigenschaft ist. Wenn der Daten Vorgang fehlgeschlagen ist, wird die Ausnahme, die während des Daten Vorgangs aufgetreten <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> ist, in <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> der- `null`Eigenschaft gespeichert, und die-Eigenschaft ist. Wenn Sie die durch die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> -Eigenschaft dargestellte Ausnahme behandelt haben, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> -Eigenschaft auf `true` fest, sodass die Ausnahme nicht ausgelöst wird.  
  
 Die Gesamtanzahl der Datensätze, die von einer Abfrage zurückgegeben werden <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> , wird durch die-Eigenschaft abgerufen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> -Ereignis. Wenn im-Ereignishandler die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`Eigenschaft den Wert hat, wird die Produkt-ID aus dem- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Objekt in der-Eigenschaft abgerufen. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und wird von der Datenbank festgelegt. Daher ist der Wert erst bekannt, wenn der Einfügevorgang abgeschlossen wurde. Die Ausnahme Meldung wird protokolliert, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`wenn die-Eigenschaft nicht gleich ist. Anschließend <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> wird die-Eigenschaft auf `true`festgelegt.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Der während der Datenoperation aufgetretene Fehler.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse mit einer Ausnahme, die als Ergebnis der Datenoperation aufgetreten ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird verwendet, wenn während des Daten Vorgangs eine Ausnahme ausgelöst wird. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft wird automatisch auf `null`festgelegt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">Ein Objekt, das die aus einer Datenoperation resultierenden Daten enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse mit einem Objekt, das die Daten aus der Datenoperation enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird verwendet, wenn der Daten Vorgang ohne Fehler abgeschlossen wurde. Der `result` -Parameter enthält ein Objekt, das das Ergebnis des Daten Vorgangs darstellt. Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> -Eigenschaft wird automatisch auf `null`festgelegt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">Ein Objekt, das die aus einer Datenoperation resultierenden Daten enthält.</param>
        <param name="totalRowCount">Die Anzahl der Zeilen, die von einem Datenabrufvorgang zurückgegeben wurden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Klasse mit einem Objekt, das die Daten aus der Datenoperation sowie die Anzahl der zurückgegebenen Zeilen enthält.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die während der Datenoperation ausgelöste Ausnahme ab.</summary>
        <value>Ein <see cref="T:System.Exception" />-Objekt, das die Ausnahme darstellt, wenn ein Fehler aufgetreten ist, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn während des Daten Vorgangs eine Ausnahme ausgelöst wird, wird die Ausnahme in der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> -Eigenschaft gespeichert. Sie können <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>Ereignishandler für die Ereignisse, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>,, und <xref:System.Web.UI.WebControls.LinqDataSource.Updated> erstellen und die Ausnahme, sofern vorhanden, über die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> -Eigenschaft abrufen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> -Ereignis. Wenn im-Ereignishandler die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`Eigenschaft den Wert hat, wird die Produkt-ID aus dem- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Objekt in der-Eigenschaft abgerufen. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und wird von der Datenbank festgelegt, sodass der Wert erst bekannt ist, wenn der Einfügevorgang abgeschlossen ist. Die Ausnahme Meldung wird protokolliert, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`wenn die-Eigenschaft nicht gleich ist. Anschließend <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> wird die-Eigenschaft auf `true`festgelegt.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Ausnahme behandelt wurde und dass diese nicht erneut ausgelöst werden soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Ausnahme behandelt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>Ereignishandler für die Ereignisse, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, und <xref:System.Web.UI.WebControls.LinqDataSource.Updated> erstellen, um alle Ausnahmen zu überprüfen, die während dieser Vorgänge aufgetreten sind. Wenn Sie die Ausnahme behandeln und nicht erneut ausgelöst werden sollen, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> -Eigenschaft auf `true`fest. Wenn Sie die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> -Eigenschaft nicht auf `true`festlegen, wird die Ausnahme an den nächsten Ereignishandler in der-aufrufsstapel weitergegeben.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> -Ereignis. Wenn im-Ereignishandler die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`Eigenschaft den Wert hat, wird die Produkt-ID aus dem- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Objekt in der-Eigenschaft abgerufen. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und wird von der Datenbank festgelegt. Daher ist der Wert erst bekannt, wenn der Einfügevorgang abgeschlossen wurde. Die Ausnahme Meldung wird protokolliert, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`wenn die-Eigenschaft nicht gleich ist. Anschließend <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> wird die-Eigenschaft auf `true`festgelegt.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das das Ergebnis einer Datenoperation darstellt.</summary>
        <value>Ein Objekt, das Daten aus der Datenoperation enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Eigenschaft können Sie Werte untersuchen, die von einem Daten Vorgang zurückgegeben wurden. Sie können Ausgabeparameter aus einem Daten Vorgang abrufen oder die Werte ändern, die von einer Abfrage zurückgegeben werden.  
  
 Die in der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft gespeicherten Daten sind abhängig vom Typ des Daten Vorgangs, der ausgeführt wurde. Wenn Sie Daten löschen, enthält <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> die-Eigenschaft ein Objekt des in der <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> -Eigenschaft angegebenen Typs mit den ursprünglichen Werten, die aus der Datenquelle gelöscht wurden. Wenn Sie Daten einfügen oder aktualisieren, enthält <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> die-Eigenschaft ein Objekt des in der <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> -Eigenschaft angegebenen Typs mit den neuen Werten, die in der Datenquelle gespeichert wurden. Wenn Sie Daten auswählen, enthält <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> die-Eigenschaft die Ergebnisse der Abfrage.  
  
 Wenn die SELECT-Abfrage das Gruppieren der Daten oder das Auswählen einer Teilmenge von Eigenschaften aus dem in der <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> -Eigenschaft angegebenen <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Typ einschließt, enthält die-Eigenschaft ein Objekt eines dynamisch erstellten Typs. Andernfalls enthält die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> -Eigenschaft ein-Objekt des Typs, der in <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> der-Eigenschaft angegeben ist.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> -Ereignis. Wenn im-Ereignishandler die- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`Eigenschaft den Wert hat, wird die Produkt-ID aus dem- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Objekt in der-Eigenschaft abgerufen. Die Produkt-ID ist ein Primärschlüssel für die Tabelle und wird von der Datenbank festgelegt. Daher ist der Wert erst bekannt, wenn der Einfügevorgang abgeschlossen wurde. Die Ausnahme Meldung wird protokolliert, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null`wenn die-Eigenschaft nicht gleich ist. Anschließend <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> wird die-Eigenschaft auf `true`festgelegt.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamtanzahl der Zeilen in einem Dataset für einen Datenabrufvorgang ab.</summary>
        <value>Die Gesamtanzahl der Zeilen in einem Dataset für einen Datenabrufvorgang: -1, wenn das <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />-Objekt während eines Datenänderungsvorgangs erstellt wurde; -1, wenn Sie benutzerdefiniertes Paging durch Festlegen von <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> auf <see langword="true" /> und <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> auf <see langword="false" /> aktiviert haben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> -Eigenschaft können Sie die Anzahl der Datensätze im DataSet während eines Datenabruf Vorgangs abrufen. In der Regel rufen Sie diese Eigenschaft ab, wenn Sie Datenseiten anzeigen und die Gesamtzahl der Datensätze anzeigen möchten.  
  
 Beim Pager von Daten unterscheidet sich der Wert in <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> der-Eigenschaft möglicherweise von der tatsächlichen Anzahl von Zeilen, die von der Abfrage zurückgegeben werden. Dies liegt daran, dass die Abfrage nur die Anzahl der Zeilen zurückgibt, die für diese Datenseite benötigt werden.  
  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> -Eigenschaft enthält die Anzahl der Datensätze aus einer Abfrage nur dann, wenn in einem Ereignishandler für <xref:System.Web.UI.WebControls.LinqDataSource.Selected> das-Ereignis auf Sie zugegriffen wird. Wenn der Zugriff auf die-Eigenschaft von einem Ereignishandler <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>für <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>das <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>-Ereignis <xref:System.Web.UI.WebControls.LinqDataSource.Updated> , das- <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Ereignis oder das-Ereignis erfolgt, enthält die-Eigenschaft-1.  
  
 Der Wert <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> der-Eigenschaft hängt von der <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> -Eigenschaft des <xref:System.Web.UI.WebControls.LinqDataSource> -Steuer Elements und der `AllowPaging` -Eigenschaft des Daten gebundenen Steuer Elements ab. In der folgenden Tabelle sind die möglichen Werte für <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> die-Eigenschaft zusammengefasst.  
  
|AutoPage-Eigenschaft des LinqDataSource-Steuer Elements|AllowPaging-Eigenschaft des Daten gebundenen Steuer Elements|TotalRowCount (Eigenschaft)|Ergebnis|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|Anzahl von Datensätzen für eine Abfrage.|Die Daten werden automatisch ausgelagert.|  
|`false`|`false`|Anzahl von Datensätzen für eine Abfrage.|Die Daten werden nicht ausgelagert.|  
|`true`|`false`|-1|Die Daten werden nicht ausgelagert.|  
|`false`|`true`|Der Wert, den Sie der <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> -Eigenschaft im-Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> -Ereignis zugewiesen haben.|Die Daten werden entsprechend den Werten, die Sie beim angepassten Paging angegeben haben, ausgelagert.|  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine Webseite mit einem <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement, einem <xref:System.Web.UI.WebControls.GridView> -Steuerelement <xref:System.Web.UI.WebControls.Literal> und einem-Steuerelement. Das <xref:System.Web.UI.WebControls.LinqDataSource> -Steuerelement definiert einen Ereignishandler <xref:System.Web.UI.WebControls.LinqDataSource.Selected> für das-Ereignis.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 Das folgende Beispiel zeigt den Code für den Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Selected> -Ereignis. Der Wert <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> der Eigenschaft wird dem <xref:System.Web.UI.WebControls.Literal> Steuerelement zugewiesen.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e3019cacd3e8fbc2a88c59d90da8398cd3a5b23" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69401581" /></Metadata><TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type CustomValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat=server ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Führt eine benutzerdefinierte Validierung eines Eingabesteuerelements aus.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Web.UI.WebControls.CustomValidator> das-Steuerelement, um eine benutzerdefinierte Validierungsfunktion für ein Eingabe Steuerelement bereitzustellen. Das <xref:System.Web.UI.WebControls.CustomValidator> -Steuerelement ist ein separates Steuerelement des Eingabe Steuer Elements, das es überprüft, sodass Sie steuern können, wo die Validierungs Meldung angezeigt wird.  
  
 Validierungs Steuerelemente führen immer eine Überprüfung auf dem Server durch. Außerdem verfügen Sie über eine vollständige Client seitige Implementierung, die es Skript fähigen Browsern (z. b. Microsoft Internet Explorer 4,0 und höher) ermöglicht, eine Validierung auf dem Client auszuführen. Die Client seitige Validierung verbessert den Validierungsprozess, indem die Benutzereingaben überprüft werden, bevor Sie an den Server gesendet werden. Dies ermöglicht das Erkennen von Fehlern auf dem Client, bevor das Formular gesendet wird. Dadurch wird der Roundtrip von Informationen vermieden, die für die serverseitige Validierung erforderlich sind.  
  
 Stellen Sie zum Erstellen einer serverseitigen Validierungsfunktion einen Handler für das <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> -Ereignis bereit, das die Validierung ausführt. Der Zugriff auf die Zeichenfolge aus dem zu validierenden Eingabe Steuer <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> Element kann mithilfe <xref:System.Web.UI.WebControls.ServerValidateEventArgs> der-Eigenschaft des-Objekts erfolgen, das als Parameter an den Ereignishandler übergeben wird. Das Ergebnis der Validierung wird dann in der <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> -Eigenschaft <xref:System.Web.UI.WebControls.ServerValidateEventArgs> des-Objekts gespeichert.  
  
 Fügen Sie zum Erstellen einer Client seitigen Validierungsfunktion zuerst die zuvor beschriebene serverseitige Validierungsfunktion hinzu. Fügen Sie anschließend die Client seitige Validierungs Skriptfunktion der ASP.net (. aspx)-Seite hinzu.  
  
 Wenn Sie Visual Basic Scripting Edition (VBScript) verwenden, muss die Funktion in der folgenden Form vorliegen:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Wenn Sie JScript verwenden, muss die Funktion in der folgenden Form vorliegen:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 Der `source` -Parameter ist ein Verweis auf \<das Spannen > Element, das <xref:System.Web.UI.WebControls.CustomValidator> für das Steuerelement gerendert wird. Dies ermöglicht es Ihnen, das \<span >-Tag Programm gesteuert zu steuern, z. b. das Ändern des <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> Attributs. Der `arguments` -Parameter ist ein Objekt mit zwei Eigenschaften: Wert und IsValid. Dieser Parameter ermöglicht es Ihnen, den Wert des Steuer Elements zu validieren und anzugeben, ob der Wert basierend auf Ihrer benutzerdefinierten Validierungs Routine gültig ist.  
  
 Verwenden Sie <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> die-Eigenschaft, um den Namen der Client seitigen Validierungs Skriptfunktion anzugeben, die <xref:System.Web.UI.WebControls.CustomValidator> dem Steuerelement zugeordnet ist. Da die Skriptfunktion auf dem Client ausgeführt wird, muss die Funktion in einer Sprache vorliegen, die der Ziel Browser unterstützt, z. b. VBScript oder JScript.  
  
> [!NOTE]
>  Wenn Sie das <xref:System.Web.UI.WebControls.CustomValidator> -Steuerelement in <xref:System.Web.UI.UpdatePanel> einem-Steuerelement verwenden, stellen Sie sicher, dass sich das Validierungs Steuerelement und das Steuerelement, dem es zugeordnet ist, im gleichen Bereich befinden. Weitere Informationen zum Verwenden des <xref:System.Web.UI.UpdatePanel> -Steuer Elements für Teil Aktualisierungen von Seiten finden Sie unter [Übersicht über partielle Seiten Rendering](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Wie bei der serverseitigen Validierung erfolgt der Zugriff auf die Zeichenfolge aus dem zu validierenden <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> Eingabe Steuerelement `arguments` mithilfe der-Eigenschaft des-Parameters. Gibt das Ergebnis der Validierung zurück, indem die <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> -Eigenschaft `arguments` des-Parameters festgelegt wird.  
  
> [!CAUTION]
>  Wenn Sie Validierungs Steuerelement-Steuerelemente verwenden, sollten Sie immer die Ergebnisse der serverseitigen Validierung überprüfen, bevor Sie die Verarbeitung durchführen. Nach einem Postback, aber bevor die Ereignis Methoden aufgerufen werden, ruft die Seite die Prüfungs-Steuerelemente auf und aggregiert ihre Ergebnisse in der <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> Eigenschaft. (Sie können auch die Prüfungs-Steuerelemente explizit mit `Validate` der-Methode aufzurufen.) In Ihrem eigenen Code sollten Sie überprüfen, ob <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> die- `true` Eigenschaft vor der Verarbeitung von Eingaben zurückgibt. Obwohl Skript aktivierte Browser möglicherweise verhindern, dass ein Postback auf dem Client ausgeführt wird, wenn bei der Überprüfung ein Fehler aufgetreten ist <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> , sollten Sie vor der Verarbeitung validierter Daten immer auch den Servercode einchecken.  
  
 Mehrere Validierungs Steuerelemente können mit einem einzelnen Eingabe Steuerelement verwendet werden, um verschiedene Kriterien zu überprüfen. Beispielsweise können Sie mehrere Validierungs Steuerelemente auf ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement anwenden, das es dem Benutzer ermöglicht, die Anzahl der Elemente einzugeben, die einem Warenkorb hinzugefügt werden sollen. Sie können ein <xref:System.Web.UI.WebControls.CustomValidator> -Steuerelement verwenden, um sicherzustellen, dass der angegebene Wert kleiner als der Betrag <xref:System.Web.UI.WebControls.RequiredFieldValidator> im Inventar und ein Steuerelement ist, um sicherzustellen <xref:System.Web.UI.WebControls.TextBox> , dass der Benutzer einen Wert in das Steuerelement eingibt.  
  
> [!NOTE]
>  Wenn das Eingabe Steuerelement leer ist, werden keine Validierungs Funktionen aufgerufen und die Überprüfung ist erfolgreich. Verwenden Sie <xref:System.Web.UI.WebControls.RequiredFieldValidator> ein-Steuerelement, um den Benutzer zur Eingabe von Daten in das Eingabe Steuerelement aufzufordern.  
  
 Es ist möglich, ein <xref:System.Web.UI.WebControls.CustomValidator> -Steuerelement zu verwenden, ohne die <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> -Eigenschaft festzulegen. Dies geschieht häufig, wenn Sie mehrere Eingabe Steuerelemente überprüfen oder Eingabe Steuerelemente validieren, die nicht mit Validierungs Steuerelementen verwendet werden können <xref:System.Web.UI.WebControls.CheckBox> , wie z. b. das-Steuerelement. In diesem Fall enthält die <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> -Eigenschaft `arguments` des-Parameters, die an den- <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Ereignishandler für das-Ereignis übergeben wird, und an die Client seitige Validierungsfunktion immer eine leere Zeichenfolge (""). Diese Validierungs Funktionen werden jedoch nach wie vor aufgerufen, um die Gültigkeit sowohl auf dem Server als auch auf dem Client zu bestimmen. Wenn Sie auf den zu überprüfenden Wert zugreifen möchten, müssen Sie Programm gesteuert auf das Eingabe Steuerelement verweisen, das Sie überprüfen möchten, und dann den Wert aus der entsprechenden Eigenschaft abrufen. Um z. b. ein <xref:System.Web.UI.WebControls.CheckBox> -Steuerelement auf dem Server zu validieren <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> , legen Sie die-Eigenschaft des Validierungs Steuer Elements nicht fest, und verwenden <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Sie den folgenden Code für den Handler für das-Ereignis.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Weitere Informationen zu Validierungs Steuerelementen finden <xref:System.Web.UI.WebControls.BaseValidator>Sie unter.  
  
## <a name="accessibility"></a>Zugriff  
 Weitere Informationen zur Verwendung dieses Steuerelement so konfigurieren, dass sie Markup generiert, das Accessibility Standards entspricht, finden Sie unter [Barrierefreiheit in Visual Studio und ASP.NET](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) und [ASP.NET-Steuerelemente und Barrierefreiheit](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein serverseitiges <xref:System.Web.UI.WebControls.CustomValidator> Steuerelement erstellt wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Client seitiges <xref:System.Web.UI.WebControls.CustomValidator> Steuerelement erstellt wird.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.CustomValidator" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="customValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream für das Rendering auf dem Client enthält.</param>
        <summary>Fügt die Eigenschaften eines <see cref="T:System.Web.UI.WebControls.CustomValidator" />-Steuerelements dem Ausgabestream hinzu, der auf dem Client gerendert werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> -Methode in einem benutzerdefinierten Server Steuerelement <xref:System.Web.UI.WebControls.CustomValidator> überschrieben wird, sodass die Fehlermeldung immer fett angezeigt wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientValidationFunction : string with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der benutzerdefinierten Clientskriptfunktion für die Validierung ab oder legt diesen fest.</summary>
        <value>Der Name der benutzerdefinierten Clientskriptfunktion für die Validierung. Der Standardwert ist <see cref="F:System.String.Empty" /> und gibt an, dass diese Eigenschaft nicht festgelegt ist.  
  
 <block subset="none" type="note"><para>  
 Der Funktionsname darf keine Klammern oder Parameter enthalten.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft auf den Namen der Funktion fest, die die Client seitige Validierung ausführt.  
  
 Da die Client Validierungsfunktion im Ziel Browser ausgeführt wird, muss die Funktion mit einer Skriptsprache geschrieben werden, die vom Browser unterstützt wird, z. b. JScript oder VBScript.  
  
 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> -Eigenschaft verwendet wird, um den Namen der Funktion anzugeben, die die Client seitige Validierung ausführt. Die Validierungsfunktion prüft auf gerade Zahlen. Eine Beschreibung der Funktionsparameter finden Sie im Abschnitt <xref:System.Web.UI.WebControls.CustomValidator>"Hinweise" unter.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="customValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Überprüft die Eigenschaften des Steuerelements auf gültige Werte.</summary>
        <returns><see langword="true" />, wenn die Steuerelementeigenschaften gültig sind, anderenfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> -Methode in einem benutzerdefinierten Server Steuerelement überschrieben wird, damit immer der Wert der Visible-Eigenschaft zurück <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> gegeben wird, <xref:System.Web.UI.WebControls.CustomValidator> sofern sich die-Eigenschaft des-Steuer Elements auf der Seite befindet und enthält. Validierungs Eigenschaften.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="customValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" />-Methode außer Kraft.</summary>
        <returns><see langword="true" />, wenn der Wert im Eingabesteuerelement gültig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> -Methode in einem benutzerdefinierten Server Steuerelement überschrieben wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnServerValidate : string -&gt; bool&#xA;override this.OnServerValidate : string -&gt; bool" Usage="customValidator.OnServerValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der zu überprüfende Wert.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />-Ereignis für das <see cref="T:System.Web.UI.WebControls.CustomValidator" />-Steuerelement aus.</summary>
        <returns><see langword="true" />, wenn der durch den <paramref name="value" />-Parameter angegebene Wert die Überprüfung bestanden hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> -Ereignis wird ausgelöst, wenn die Validierung auf dem Server ausgeführt wird.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Mit der <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie einen Handler für ein serverseitiges <xref:System.Web.UI.WebControls.CustomValidator> Steuerelement angeben und codieren.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberSignature Language="F#" Value="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " Usage="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die Validierung auf dem Server durchgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> -Ereignis wird ausgelöst, wenn die Validierung auf dem Server ausgeführt wird. Dieses Ereignis wird verwendet, um eine benutzerdefinierte Validierungs Routine für ein Eingabe Steuerelement bereitzustellen <xref:System.Web.UI.WebControls.TextBox> , z. b. ein-Steuerelement.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie einen Handler für ein serverseitiges <xref:System.Web.UI.WebControls.CustomValidator> Steuerelement angeben und codieren. Es erstellt eine benutzerdefinierte Validierungs Routine, überprüft den Wert eines <xref:System.Web.UI.WebControls.TextBox> Steuer Elements für eine gerade Zahl und zeigt dann das Ergebnis der Überprüfung an.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateEmptyText : bool with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen booleschen Wert ab, der angibt, ob leerer Text überprüft werden soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn leerer Text validiert werden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Validierungs Steuerelement kann einem Ziel Steuerelement zugeordnet werden. Wenn das Ziel Steuerelement in früheren Versionen des .NET Framework einen leeren Zeichen folgen Wert enthielt (z. b <xref:System.Web.UI.WebControls.TextBox.Text%2A> . eine Eigenschaft mit dem <xref:System.String.Empty?displayProperty=nameWithType>Wert), würde das Validierungs Steuerelement <xref:System.Web.UI.WebControls.RequiredFieldValidator> (außer dem Validierungs Steuerelement) das Ziel Steuerelement nicht auswerten und gibt einfach zurück, dass die Überprüfung bestanden wurde.  
  
 Die <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> -Eigenschaft ist für die .NET Framework Version 2,0 neu.  Wenn <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> <xref:System.Web.UI.WebControls.CustomValidator> auf `true`festgelegt ist, wertet das Validierungs Steuerelement den Wert des Steuer Elements aus (unter Verwendung der für das-Steuerelement angegebenen Kriterien) und gibt die Überprüfungs Ergebnisse zurück. Diese Eigenschaft ermöglicht Entwicklern das Auswerten der Ergebnisse eines <xref:System.Web.UI.WebControls.CustomValidator> Steuer Elements, unabhängig vom Wert des Ziel Steuer Elements.  
  
 Diese Eigenschaft kann nicht durch Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="LinqDataSourceInsertEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03dde201787915871f172fcc2ce3ad97564f89ad" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36581137" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceInsertEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceInsertEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceInsertEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceInsertEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceInsertEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Daten für das <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />-Ereignis bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Objekt übergeben wird, um einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis. Die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft enthält die Daten, die eingefügt werden.  
  
 Sie können die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Objekt, das die Daten zu überprüfen, bevor der Einfügevorgang in der Datenquelle ausgeführt wird. Sie können dann überprüfen Sie die Daten, zu überprüfen Validierungsfehler von der Datenklasse fest oder ändern Sie einen Wert vor dem Update. Sie können auch die Insert-Vorgang "Abbrechen".  
  
 Wenn das Objekt, das die Datenquelle repräsentiert, eine Validierungsausnahme ausgelöst, bevor die Daten eingefügt die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> Eigenschaft enthält eine Instanz von der <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> Klasse. Sie können alle Validierungsausnahmen durch Abrufen der <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> Eigenschaft. Wenn keine Validierungsausnahme ausgelöst wird, die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> Eigenschaft enthält `null`. Wenn Sie die Validierungsausnahmen behandeln und nicht die Ausnahme erneut ausgelöst werden soll, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> Eigenschaft `true`.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis. Das Objekt aus der <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft umgewandelt wird, auf einen Typ mit dem Namen `Product`. Die `DateModified` Eigenschaft von der `Product` -Objekts auf das aktuelle Datum und die Uhrzeit festgelegt wird.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis. Es zeigt ausnahmemeldungen für die Validierung mithilfe einer <xref:System.Web.UI.WebControls.Label> Steuerelement.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message + "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceInsertEventArgs (object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceInsertEventArgs(System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs newObject" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="newObject">Ein Objekt, das die einzufügenden Daten enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceInsertEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceInsertEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">Die Ausnahme, die beim Validieren der einzufügenden Daten aufgetreten ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" />-Klasse und gibt die bereitgestellte Ausnahme an.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Ausnahme ab, die ausgelöst wurde, während die Daten vor dem Einfügevorgang validiert wurden.</summary>
        <value>Die Ausnahme, wenn ein Fehler aufgetreten ist, andernfalls <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine Validierungsausnahme ausgelöst wird, bevor der Einfügevorgang ausgeführt wird, wird die Ausnahme gespeichert, der <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> Eigenschaft. In einem Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> -Ereignis können Sie die Ausnahme durch Abrufen der <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis. Es zeigt ausnahmemeldungen für die Validierung mithilfe einer <xref:System.Web.UI.WebControls.Label> Steuerelement.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message + "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Ausnahme behandelt wurde und dass diese nicht erneut ausgelöst werden soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Ausnahme behandelt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ereignishandler für erstellen Sie die <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis Validierungsausnahmen untersucht, die vor der Insert-Vorgang aufgetreten ist. Wenn Sie die Ausnahme behandeln und nicht erneut ausgelöst werden soll möchten, legen Sie die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> Eigenschaft `true`. Wenn Sie nicht festlegen, die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> Eigenschaft `true`, wird die Ausnahme an den nächsten Ereignishandler in der Aufrufliste weitergegeben werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis. Es zeigt ausnahmemeldungen für die Validierung mithilfe einer <xref:System.Web.UI.WebControls.Label> Steuerelement.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message + "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das die einzufügenden Daten enthält.</summary>
        <value>Ein Objekt, das die einzufügenden Daten enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft enthält die Daten, die in der Datenquelle eingefügt werden. Erstellen Sie einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis, und rufen die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft zum Überprüfen der Daten, die Daten ändern oder den Insert-Vorgang "Abbrechen", bevor die Datenvorgang ausgeführt wird.  
  
 Die <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft gibt ein Objekt vom Typ <xref:System.Object>. Sie können dieses Objekt in den Typ der Klasse umgewandelt, die das Daten darstellt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Ereignis. Das Objekt aus der <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> Eigenschaft umgewandelt wird, auf einen Typ mit dem Namen `Product`. Die `DateModified` Eigenschaft von der `Product` -Objekts auf das aktuelle Datum und die Uhrzeit festgelegt wird.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
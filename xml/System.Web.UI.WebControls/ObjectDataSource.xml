<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15236dc6073fb19c95955afb8e0d9d895643e546" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36381746" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type ObjectDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Geschäftsobjekt dar, das Daten zu datengebundenen Steuerelementen in Webanwendungsarchitekturen mit mehreren Ebenen bereitstellt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Zweck](#purpose)  
  
-   [Abrufen von Daten](#retrieving_data)  
  
-   [Vorgänge für Daten](#performing_data_operations)  
  
-   [Filtern von Daten](#filtering_data)  
  
-   [Zwischenspeichern](#caching)  
  
-   [Features](#features)  
  
-   [Datensicht](#data_view)  
  
-   [Mit LINQ to SQL](#using_linq_to_sql)  
  
-   [Deklarationssyntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement funktioniert mit einer Klasse, die Sie erstellen. Sie erstellen die Methoden, mit denen Daten abgerufen und aktualisiert, und Sie die Namen dieser Methoden zum Bereitstellen der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement im Markup. Beim Rendern oder postback Verarbeitung der <xref:System.Web.UI.WebControls.ObjectDataSource> Ruft die Methoden, die Sie angegeben haben.  
  
 Es ist keine visuelle Darstellung von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Daher die <xref:System.Web.UI.WebControls.ObjectDataSource> unterstützt keine visuellen Features wie z. B. die <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> oder <xref:System.Web.UI.DataSourceControl.SkinID%2A> Eigenschaft.  
  
<a name="purpose"></a>   
## <a name="purpose"></a>Zweck  
 Ein sehr häufiges Anwendungsdesign besteht darin die Darstellungsschicht von Geschäftslogik zu trennen und zum Kapseln der Geschäftslogik in Geschäftsobjekten. Diese Geschäftsobjekte bilden eine eigene Schicht zwischen der Präsentationsschicht und der Datenebene, was zu einer Anwendung mit drei Ebenen-Architektur. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement ermöglicht Entwicklern, eine ASP.NET-Datenquellensteuerelement Beibehaltung der ihre Anwendung mit drei Ebenen-Architektur verwenden.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement verwendet Reflektion, um Instanzen von Geschäftsobjekten erstellen und Aufrufen von Methoden auf abrufen kann, aktualisieren, einfügen und Löschen von Daten. Die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft identifiziert den Namen der Klasse, die die <xref:System.Web.UI.WebControls.ObjectDataSource> arbeitet mit. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement erstellt und zerstört eine Instanz der Klasse für jeden Methodenaufruf; sie hält nicht das Objekt im Arbeitsspeicher für die Lebensdauer der webanforderung. Dies ist eine ernsthaft in Betracht ziehen, wenn das Geschäftsobjekt, mit denen Sie viele Ressourcen benötigt oder oder aufwendig zu erstellender und zu zerstören. Verwenden ein teures Objekt möglicherweise keine optimale Entwurfsoption, aber Sie können den Lebenszyklus des Objekts steuern, indem Sie mit der <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignisse.  
  
> [!NOTE]
>  Die Methoden, die vom identifiziert werden die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, und <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaften können Instanzmethoden sein oder `static` (`Shared` in Visual Basic) Methoden. Wenn die Methoden sind `static` (`Shared` in Visual Basic), eine Instanz des Objekts Business wird nicht erstellt, und die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> -Ereignisse nicht ausgelöst.  
  
<a name="retrieving_data"></a>   
## <a name="retrieving-data"></a>Abrufen von Daten  
 Legen Sie zum Abrufen von Daten aus einem Geschäftsobjekt der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft auf den Namen der Methode, die Daten abruft. Wenn der Methodenrückgabewert kein <xref:System.Collections.IEnumerable> oder <xref:System.Data.DataSet> -Objekt, das Objekt wird von der Laufzeit in umschlossen eine <xref:System.Collections.IEnumerable> Auflistung. Wenn die Signatur der Methode über Parameter verfügt, können Sie hinzufügen <xref:System.Web.UI.WebControls.Parameter> -Objekte und die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> -Auflistung, und binden Sie diese auf die Werte, die an die Methode übergeben, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. In der Reihenfolge für die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, um die Parameter zu verwenden, die Parameter müssen die Namen und Typen der Parameter in der Signatur der Methode übereinstimmen. Weitere Informationen finden Sie unter [Verwenden von Parametern mit dem ObjectDataSource-Steuerelement](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement ruft Daten ab. wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode wird aufgerufen. Diese Methode ermöglicht programmgesteuerten Zugriff auf die Methode für die angegebenen <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Die Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft wird automatisch aufgerufen, Steuerelemente, die gebunden sind die <xref:System.Web.UI.WebControls.ObjectDataSource> beim ihre `DataBind` Methode wird aufgerufen. Wenn Sie festlegen, die `DataSourceID` Eigenschaft eines datengebundenen Steuerelements, das Steuerelement automatisch bindet Daten aus der Datenquelle nach Bedarf. Festlegen der `DataSourceID` Eigenschaft ist die empfohlene Methode für die Bindung ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement zu einem datengebundenen Steuerelement. Sie können alternativ Festlegen der `DataSource` -Eigenschaft, doch Sie müssen explizit aufrufen, die `DataBind` Methode des datengebundenen Steuerelements. Sie erreichen die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode programmgesteuert zu einem beliebigen Zeitpunkt zum Abrufen von Daten.  
  
 Weitere Informationen zum Binden von datengebundenen Steuerelementen an Datenquellen-Steuerelementen finden Sie unter [Binden an Daten mithilfe einer Datenquellen-Steuerelements](http://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7).  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>Vorgänge für Daten  
 Abhängig von den Funktionen des Unternehmens Objekt, mit dem <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement funktioniert mit können Sie Datenvorgänge, z. B. Updates, einfügungen und Löschvorgänge ausführen. Um diese Datenvorgänge auszuführen, legen Sie den entsprechenden Methodennamen und alle zugeordneten Parameter für den Vorgang, den Sie ausführen möchten. Legen Sie für einen Aktualisierungsvorgang z. B. die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> -Eigenschaft auf den Namen der Business-Objekt-Methode, die Updates führt und alle erforderlichen Parameter an die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, das ein datengebundenes Steuerelement zugeordnet ist, werden die Parameter durch das datengebundene Steuerelement hinzugefügt. In diesem Fall müssen Sie sicherstellen, dass die Namen der Parameter der Methode die Feldnamen in das datengebundene Steuerelement übereinstimmen. Das Update wird ausgeführt. wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> -Methode aufgerufen wird, entweder explizit durch Code oder automatisch von einem datengebundenen Steuerelement. Das gleiche allgemeine Muster folgt für <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgänge. Geschäftsobjekte sind davon ausgegangen, dass diese Typen von Datenvorgängen gleichzeitig auszuführen, anstatt in einem Batch verarbeitet.  
  
<a name="filtering_data"></a>   
## <a name="filtering-data"></a>Filtern von Daten  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement durch abgerufene Daten können gefiltert werden die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft, wenn die Daten, als zurückgegeben werden ein <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> Objekt. Sie können festlegen, die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> -Eigenschaft auf einen Filterausdruck ein Format mit string-Syntax und Werte in den Ausdruck im angegebenen Parameter binden der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung.  
  
<a name="caching"></a>   
## <a name="caching"></a>Zwischenspeicherung  
 Obwohl die <xref:System.Web.UI.WebControls.ObjectDataSource> behält sich nicht auf die Instanz des Geschäftsobjekts in mehreren Anforderungen, können sie das Ergebnis des Aufrufs der Methode identifizierte Zwischenspeichern der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Während die Daten zwischengespeichert, geben nachfolgende Aufrufe werden die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode zurück, die zwischengespeicherten Daten, anstatt das Geschäftsobjekt erstellen und Aufrufen der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> über Reflektion ermöglicht. Durch das Zwischenspeichern können vermeiden Sie beim Erstellen des Objekts und dem Aufrufen der Datenmethode auf Kosten der Arbeitsspeicher auf dem Webserver. Die <xref:System.Web.UI.WebControls.ObjectDataSource> automatisch speichert Daten beim der <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true`, und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft wird festgelegt, um die Anzahl der Sekunden, die der Cache Daten speichert, bevor der Cache verworfen wird. Sie können auch angeben, ein <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Eigenschaft und eine optionale <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> Eigenschaft. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement ermöglicht es Ihnen, alle Arten von Daten zwischengespeichert, aber Sie sollten nicht zwischenspeichern, Objekte, die beibehalten werden sollen, Ressourcen oder Status, die gemeinsam genutzt werden kann, um mehrere Anforderungen zu bedienen (z. B. ein offenes <xref:System.Data.SqlClient.SqlDataReader> Objekt), da der gleichen Instanz des Objekts wird verwendet werden, um mehrere Anforderungen zu bedienen.  
  
<a name="features"></a>   
## <a name="features"></a>Features  
 Die folgende Tabelle beschreibt die Funktionen von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
|Funktion|Anforderungen|  
|----------------|------------------|  
|Auswählen|Legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft auf den Namen des Geschäfts-Methode, die Daten ausgewählt, und schließen Sie alle erforderlichen Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung entweder programmgesteuert oder mithilfe eines datengebundenen Steuerelements.|  
|Sortieren|Legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> -Eigenschaft auf den Namen des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Methode, die den Sortierungskriterien fest.|  
|Filtern|Festlegen der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> -Eigenschaft auf einen Filterausdruck und optional Parameter hinzufügen der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung zum Filtern der Daten beim die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode wird aufgerufen. Die Methode angegeben werden, die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft zurückgeben muss eine <xref:System.Data.DataSet> oder <xref:System.Data.DataTable>.|  
|Paging|Paging von Datenquellen unterstützt, wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Methode enthält die Parameter für die maximale Anzahl der abzurufenden Datensätze und den Index des ersten Datensatzes abgerufen. Die Namen dieser Parameter müssen festgelegt werden, der <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaften bzw. Ein datengebundenes Steuerelement möglicherweise zum Ausführen von paging selbst, selbst wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt keine Auslagerung direkt in der Methode angegeben werden, die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Gilt für das datengebundene Steuerelement zu diesem Zweck können, dass die Methode, durch angegeben die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft ein Objekt zurück, implementiert die <xref:System.Collections.ICollection> Schnittstelle.|  
|Wird aktualisiert|Legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> -Eigenschaft auf den Namen des Geschäfts Methode, die Daten aktualisiert, und schließen Sie alle erforderlichen Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung.|  
|Wird gelöscht|Legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> -Eigenschaft auf den Namen des Geschäfts Methode oder Funktion, die Daten löscht, und schließen Sie alle erforderlichen Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung.|  
|Einfügen|Legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> -Eigenschaft auf den Namen des Geschäfts-Methode oder Funktion, die Daten einfügt, und schließen Sie alle erforderlichen Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung.|  
|Zwischenspeicherung|Legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> Eigenschaft `true`, und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Eigenschaften gemäß den für Ihre zwischengespeicherten Daten sollen das Verhalten beim Zwischenspeichern.|  
  
> [!NOTE]
>  Bei Verwendung der <xref:System.Web.UI.WebControls.ObjectDataSource> Klasse zu aktualisieren oder Einfügen von Daten, Zeichenfolgen, die auf dem Client eingegeben werden werden auf der Kultur Serverformat nicht automatisch vom Client Kulturformat konvertiert. Z. B. die Clientkultur möglicherweise TT/MM/JJJJ als Datumsformat angeben, und das Datumsformat auf dem Server möglicherweise MM/TT/JJJJ. In diesem Fall würde 5. Oktober 2009 eingegeben werden, einem <xref:System.Web.UI.WebControls.TextBox> als 5/10/2009 steuern, jedoch als 10. Mai 2009 interpretiert werden. 15. Oktober 2009 würde als 15/10/2009 eingegeben werden, und als ungültiges Datum abgelehnt werden.  
  
<a name="data_view"></a>   
## <a name="data-view"></a>Datensicht  
 Wie bei allen Datenquellen-Steuerelementen, die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement eine Ansicht der Datenquellenklasse zugeordnet ist. Während der <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement ist die Schnittstelle, die der Entwickler der Seite zur Arbeit mit Daten, verwendet die <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Klasse ist die Schnittstelle, die datengebundene Steuerelemente mit zu arbeiten. Darüber hinaus die <xref:System.Web.UI.WebControls.ObjectDataSourceView> Klasse beschreibt die Funktionen des Datenquellen-Steuerelements, und führt den eigentlichen. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement besitzt nur eine zugeordnete <xref:System.Web.UI.WebControls.ObjectDataSourceView>, und es wird stets der Name `DefaultView`. Während der <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt verfügbar gemacht wird, indem Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> -Methode, viele der Eigenschaften und Methoden umschlossen und verfügbar gemacht werden direkt von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Im Hintergrund der <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt führt Datenvorgänge für alle, einschließlich abrufen, einfügen, aktualisieren, löschen, Filtern und Sortieren der Daten. Weitere Informationen finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSourceView>.  
  
<a name="using_linq_to_sql"></a>   
## <a name="using-linq-to-sql"></a>Mit LINQ to SQL  
 Sie können die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit einer LINQ to SQL-Klasse. Zu diesem Zweck legen Sie die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> -Eigenschaft auf den Namen der Datenkontext Klasse. Legen Sie Sie auch die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, und <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> auf die Methoden in der Datenkontext Klasse, die die entsprechenden Vorgänge ausführen. Sie müssen einen Ereignishandler für erstellen die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis um Abbrechen, Verwerfen der Datenkontext Klasse. Dieser Schritt ist erforderlich, da LINQ to SQL die verzögerten Ausführung unterstützt während der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement versucht, den Datenkontext nach dem Select-Vorgang zu verwerfen. Weitere Informationen über das Erstellen von LINQ to SQL-Klassen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081). Ein Beispiel zum Abbrechen der Freigabe einer neue Datenkontextklasse finden Sie unter der <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis.  
  
## <a name="using-the-entity-framework"></a>Mithilfe von Entity Framework  
 Sie können auch die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit dem Entity Framework. Weitere Informationen finden Sie unter [mit dem Entity Framework und das ObjectDataSource-Steuerelement](http://go.microsoft.com/fwlink/?LinkId=209117).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## Examples  
 Ist ein Visual Studio Web Site-Projekt mit Quellcode zu diesem Thema steht verfügbar: [herunterladen](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  
  
 In diesem Abschnitt wird ein <xref:System.Web.UI.WebControls.ObjectDataSource> im Markup in einer ASPX-Seite, das die Business-Objekte, die sich anzeigt. Im Beispiel ist die ASPX‑Seite. Er enthält eine <xref:System.Web.UI.WebControls.GridView> Steuerelement, das gebunden ist ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelementmarkup gibt den Namen des Objekts Business und den Namen der Business-Object-Methode aufrufen, um Daten abzurufen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 Das folgende Beispiel zeigt dem Geschäftsobjekt an, die die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement in der ASPX-Seite verwendet. (Viele weitere <xref:System.Web.UI.WebControls.ObjectDataSource> Codebeispiele das Geschäftsobjekt auch verwenden.) Das Beispiel besteht aus den folgenden zwei grundlegenden Klassen:  
  
-   Die `EmployeeLogic` Klasse ist die Klasse, die der Geschäftslogik der <xref:System.Web.UI.WebControls.ObjectDataSource> verwendet.  
  
-   Die `NorthwindEmployee` Klasse definiert das Datenobjekt, das von zurückgegebene der `GetAllEmployees` Methode der `EmployeeLogic` Klasse.  
  
 Ein zusätzliches `NorthwindDataException` Klasse wird als Annehmlichkeit bereitgestellt.  
  
 Dieser Satz von Beispielklassen arbeitet mit der Datenbank Northwind Traders, die mit Microsoft SQL Server und Microsoft Access verfügbar ist. Ein vollständiges Beispiel arbeiten müssen Sie kompilieren und verwenden Sie diese Klassen mit ASPX-Seite-Beispiels, das bereitgestellt wird. Informationen zum Installieren der Datenbank Northwind Traders finden Sie unter [Vorgehensweise: Installieren von Beispieldatenbanken](http://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSource : string * string -&gt; System.Web.UI.WebControls.ObjectDataSource" Usage="new System.Web.UI.WebControls.ObjectDataSource (typeName, selectMethod)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">Der Name der Klasse, mit der die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> arbeitet.</param>
        <param name="selectMethod">Der Name der Methode oder Funktion, die die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> aufruft, um Daten abzurufen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Klasse unter Verwendung des angegebenen Typnamens und des angegebenen Datenabrufmethoden-Namens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die `typeName` Parameter kann sein, einen teilweise qualifizierten Typ für Code, der in das Verzeichnis ' bin "oder ' App_Code ' befindet oder einen vollqualifizierten Typnamen für Code, der im globalen Assemblycache registriert ist. Wenn Sie im globalen Assemblycache verwenden, müssen Sie den entsprechenden Verweis hinzufügen der `assemblies` Abschnitt der Konfigurationsdatei "Machine.config" oder "Web.config".  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeitspanne in Sekunden ab, die das Datenquellensteuerelement die von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft abgerufenen Daten zwischenspeichert, oder legt diese fest.</summary>
        <value>Die Anzahl von Sekunden, die die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> benötigt, um die Ergebnisse eines Aufrufs der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft zwischenzuspeichern. Der Standard ist 0. Der Wert kann nicht negativ sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, Aufrufe von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode rufen Sie Daten aus dem Cache und nicht aus der Business-Objekt, das die <xref:System.Web.UI.WebControls.ObjectDataSource> arbeitet mit. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode ruft Daten aus dem Geschäftsobjekt ab und speichert die Daten erneut.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft auf einen Wert größer als 0, der die Anzahl der Sekunden angibt, dass der Cache speichert die Daten vor den Cacheeintrag festgelegt ist wird verworfen. Der Wert 0 gibt eine unendlich lange Cache an.  
  
 Der Cache wird durch eine Kombination der Dauer reguliert und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Einstellung. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> Wert, der <xref:System.Web.UI.WebControls.ObjectDataSource> speichert Daten beim ersten Aufruf von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode und speichert es im Arbeitsspeicher für höchstens die Zeitspanne, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft. Die Daten möglicherweise vor der Dauer und freigegeben werden, wenn der Arbeitsspeicher benötigt wird. Der Cache wird dann beim nächsten Aufruf aktualisiert die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> Wert, Datenquellen-Steuerelements speichert Daten beim ersten Aufruf von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode, setzt aber das Zeitfenster für die sie den Cache bei jedem nachfolgenden Aufruf der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Der Cache abläuft, wenn es keine Aktivität für eine Zeit, die gleich der <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft seit dem letzten Aufruf der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt das Zwischenspeichern unterstützt. Im zweiten Codebeispiel wird veranschaulicht, wie eine Wrappermethode zu implementieren, die zurückgibt eine <xref:System.Data.DataSet> Objekt so aktivieren Sie zwischenspeichern, wenn ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement unterstützt das Zwischenspeichern. Um das Zwischenspeichern zu aktivieren, müssen Sie die Methode, die Daten abruft, der durch identifiziert wird implementieren die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft, um die Daten als zurückzugeben eine <xref:System.Data.DataSet> Objekt. In diesem Beispiel wird die <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true`, und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Eigenschaften werden festgelegt. Die <xref:System.Web.UI.WebControls.ObjectDataSource> speichert Daten, die von zurückgegeben werden die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft für 30 Sekunden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Wrappermethode zu implementieren, die zurückgibt eine <xref:System.Data.DataSet> Objekt so aktivieren Sie zwischenspeichern, wenn ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. In der basisimplementierung von der `EmployeeLogic` -Klasse, die `GetAllEmployees` Methode gibt ein <xref:System.Collections.ArrayList> Objekt. Statt das Objekt vollständig zum Arbeiten mit der <xref:System.Web.UI.WebControls.ObjectDataSource> auf einer Web Forms-Seite eine Wrappermethode mit dem Namen `GetAllEmployeesAsDataSet` wird hinzugefügt, die einen Satz von zurückgibt `NorthwindEmployee` Daten als ein <xref:System.Data.DataSet>.  
  
 Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.WebControls.ObjectDataSource> Klasse.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Cacheablaufverhalten ab, das in Kombination mit der Dauer das Verhalten des vom Datenquellen-Steuerelement verwendeten Caches beschreibt.</summary>
        <value>Einer der <see cref="T:System.Web.UI.DataSourceCacheExpiry" />-Werte. Der Standardwert ist <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, Aufrufe von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode rufen Sie Daten aus dem Cache und nicht aus der Business-Objekt, das die <xref:System.Web.UI.WebControls.ObjectDataSource> arbeitet mit. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode ruft Daten aus dem Geschäftsobjekt ab und speichert die Daten erneut.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft auf einen Wert größer als 0, der die Anzahl der Sekunden angibt, dass der Cache speichert die Daten vor den Cacheeintrag festgelegt ist wird verworfen. Der Wert 0 gibt eine unendlich lange Cachedauer an.  
  
 Der Cache wird durch eine Kombination der Dauer reguliert und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Einstellung. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> Wert, der <xref:System.Web.UI.WebControls.ObjectDataSource> speichert Daten beim ersten Aufruf von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode und speichert es im Arbeitsspeicher für höchstens die Zeitspanne, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft. Die Daten möglicherweise vor der Dauer und freigegeben werden, wenn der Arbeitsspeicher benötigt wird. Der Cache wird dann beim nächsten Aufruf aktualisiert die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> Wert, Datenquellen-Steuerelements speichert Daten beim ersten Aufruf von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode, setzt aber das Zeitfenster für die sie den Cache bei jedem nachfolgenden Aufruf der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Der Cache abläuft, wenn es keine Aktivität für eine Zeit, die gleich der <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft seit dem letzten Aufruf der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt unterstützt wird, Filtern und Zwischenspeichern. Im zweiten Codebeispiel wird veranschaulicht, wie eine Wrappermethode zu implementieren, die zurückgibt eine <xref:System.Data.DataSet> Objekt so aktivieren Sie zwischenspeichern und Filtern mit einem <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt wird, Filtern und Zwischenspeichern. Zum Filtern und Zwischenspeichern zu aktivieren, müssen Sie die Methode für die Daten, ruft die identifizierte implementieren die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft, um die Daten als zurückzugeben eine <xref:System.Data.DataSet> Objekt. In diesem Beispiel Zwischenspeichern aktiviert, da die `EmployeeLogic` Objekt zurückgibt, Daten als ein <xref:System.Data.DataSet>, die <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true`, und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Eigenschaften werden festgelegt. Die <xref:System.Web.UI.WebControls.ObjectDataSource> speichert Daten, die von zurückgegeben werden die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft für 30 Sekunden.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Wrappermethode zu implementieren, die zurückgibt eine <xref:System.Data.DataSet> Objekt so aktivieren Sie zwischenspeichern und Filtern mit einem <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. In der basisimplementierung von der `EmployeeLogic` -Klasse, die `GetAllEmployees` Methode gibt ein <xref:System.Collections.ArrayList>. Statt das Objekt vollständig zum Arbeiten mit der <xref:System.Web.UI.WebControls.ObjectDataSource> auf einer Web Forms-Seite eine Wrappermethode mit dem Namen `GetAllEmployeesAsDataSet` wird hinzugefügt, die einen Satz von zurückgibt `NorthwindEmployee` Daten als ein <xref:System.Data.DataSet>. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Web.UI.WebControls.ObjectDataSource> Klasse.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine benutzerdefinierte Schlüsselabhängigkeit ab, die mit sämtlichen vom Datenquellen-Steuerelement erstellten Datencacheobjekten verknüpft ist, oder legt diese fest.</summary>
        <value>Ein Schlüssel, der alle von der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> erstellten Cacheobjekte angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Eigenschaft kann auf einen beliebigen Zeichenfolgenwert festgelegt werden.  
  
 Alle Cacheobjekte laufen explizit ab, wenn der Schlüssel abläuft. Dadurch können Sie die Einträge im Cache für ungültig zu erklären durch die erstellte der <xref:System.Web.UI.WebControls.ObjectDataSource> aus Ihrem eigenen code programmgesteuert.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, Aufrufe von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode rufen Sie Daten aus dem Cache und nicht aus der Business-Objekt, das die <xref:System.Web.UI.WebControls.ObjectDataSource> arbeitet mit. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode ruft Daten aus dem Geschäftsobjekt ab und speichert die Daten erneut.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft auf einen Wert größer als 0, der die Anzahl der Sekunden angibt, dass der Cache speichert die Daten vor den Cacheeintrag festgelegt ist wird verworfen. Der Wert 0 gibt eine unendlich lange Cache an.  
  
 Sie können festlegen, die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Eigenschaft zum Erstellen einer Abhängigkeit zwischen alle Einträge im Cache durch die erstellte der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und den Schlüssel. Sie können alle Cacheeinträge programmgesteuert zu einem beliebigen Zeitpunkt ablaufen sollen, indem der Schlüssel abläuft. Ablauf des Schlüssels mit der <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> Methode mit dem aktuellen <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Wert als Parameter.  
  
 Ein eindeutiger Cacheeintragsschlüssel wird erstellt für jede Kombination der <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, und <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Eigenschaften. Mehrere <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelemente können die gleichen Cacheeinträge in Szenarien, in denen sie Daten mit den gleichen Typ, Methode und Parameter laden.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs--Klasse, die Datensätze aus der Tabelle Employees in der Northwind-Datenbank abrufen.  
  
 Das erste Beispiel zeigt eine Webseite, die zwei <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelemente, einen <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die erste <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement abrufen und Anzeigen der Namen der Mitarbeiter aus der Datenbank verwendet werden. Die zweite <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement dienen zum Abrufen und Anzeigen der Mitarbeiterdatensatz, die vom Benutzer ausgewählt wird.  
  
 Zwischenspeichern aktiviert ist, für die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Deshalb wird jeder Datensatz nur einmal aus der Datenbank abgerufen. Die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Eigenschaft auf "EmployeeDetails" festgelegt ist, aber einen beliebigen Zeichenfolgenwert als Schlüssel arbeiten kann. Die Webseite enthält auch eine <xref:System.Web.UI.WebControls.Button> Steuerelement, das der Benutzer klicken kann, um die zwischengespeicherten Daten laufen ab.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 Das zweite Beispiel zeigt einen Handler für die <xref:System.Web.UI.Control.Load> Ereignis und einen Handler für das <xref:System.Web.UI.WebControls.Button.Click> -Ereignis für die <xref:System.Web.UI.WebControls.Button> Steuerelement. Die <xref:System.Web.UI.Control.Load> -Ereignishandler erstellt ein Cacheelement mit einem Schlüssel, der zum Festlegen der <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Wert. Die <xref:System.Web.UI.WebControls.Button.Click> Ereignishandler entfernt das Cacheelement, dessen Schlüssel gleich, dem <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Wert. Wenn das Element im Cache entfernt wird, werden alle zwischengespeicherten Daten, die abhängig von der Schlüssel ist abgelaufen.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 Das dritte Beispiel zeigt die Access-Klasse, die mit der Northwind-Datenbank interagiert. Die Klasse verwendet LINQ zum Abfragen der Employees-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die die Northwind-Datenbank und der Employees-Tabelle darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, ob nur die neuen Werte an die <see langword="Update" />-Methode oder aber die alten und die neuen Werte an die <see langword="Update" />-Methode übergeben werden, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Web.UI.ConflictOptions" />-Werte. Der Standardwert ist <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft bestimmt, ob der Parameter für die alten und neuen Werte für die Methode angegeben werden, gelten die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft. Z. B., wenn die Methode, die gemäß der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft gibt eine <xref:System.Data.DataTable> Steuerelement mit den Spalten `Name` und `Number`, und die <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.OverwriteChanges> Feld Parameter sind für erstellt `Name` und `Number` für die `Update` Methode. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert Parameter werden für erstellt `Name`, `Number`, `original_Name`, und `original_Number`. (Hängt von der genaue Namen der Parameter für die ursprünglichen Werte der <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Eigenschaft.) Die <xref:System.Web.UI.WebControls.ObjectDataSource> dann bestimmt, ob die Methode, die im angegebenen die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft verfügt über Parameter, die mit übereinstimmen.  
  
 Parallelitätssteuerung ist ein Verfahren, das Verwenden von Datenspeichern zu steuern, wie Daten gelesen und im Speicher geändert werden, wenn mehrere Clients den Zugriff auf und bearbeiten die gleichen Daten. Beispielsweise ein Client liest Daten und für einen Benutzer präsentiert, während ein anderer Client dieselben Daten liest und einem anderen Benutzer darstellen. Wenn beide Benutzer die Daten aktualisieren und an den Datenspeicher zu übermitteln, kann ein unerwartetes Ergebnis auftreten, da beide Clients möglicherweise die gleichen Daten mit unterschiedlichen Werten bereitstellen können. Dies wird als Konflikt betrachtet. Durch Festlegen der <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> Eigenschaft, um die <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert, der `Update` abwägen können dann die alten und neuen Werte mit der ursprünglichen Datenquelle Konflikte erkennen und ggf. zu behandeln.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertNullToDBNull : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die an einen Aktualisierungs-, Einfüge- oder Löschvorgang übergebenen <see cref="T:System.Web.UI.WebControls.Parameter" />-Werte vom <see cref="F:System.DBNull.Value" />-Steuerelement automatisch von <see langword="null" /> in den <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Wert konvertiert werden, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn an das <see cref="T:System.Web.UI.WebControls.Parameter" />-Steuerelement übergebene <see langword="null" />-Werte in <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekten automatisch in <see cref="F:System.DBNull.Value" />-Werte konvertiert werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Konvertierung von `null` auf der <xref:System.DBNull.Value> Wert kann zur Laufzeit zu Fehlern führen. Verwenden der <xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A> Eigenschaft, um anzugeben, ob <xref:System.Web.UI.WebControls.Parameter> Werte, die ein Update, Insert oder Delete-Vorgang übergeben werden, automatisch von konvertiert `null` auf die <xref:System.DBNull.Value> vom Wert der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataObjectTypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen einer Klasse ab, die vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement als Parameter bei Datenvorgängen vom Typ Aktualisieren, Einfügen oder Löschen verwendet wird, anstatt einzelne Werte aus dem datengebundenen Steuerelement zu übergeben, oder legt diesen fest.</summary>
        <value>Ein teilweise oder vollqualifizierter Klassenname, der den Typ des Objekts angibt, das die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> als Parameter für einen der Vorgänge <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />, <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> oder <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> verwenden kann. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Angeben von mehreren Parametern, die übergeben werden, statt die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, und <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Methoden, erstellen Sie ein Objekt, das mehrere Datenfeldwerte aggregiert. Dieses Objekt wird an die Methoden, anstatt mehrere Parameter übergeben.  
  
 Das Standardverhalten des ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, die an ein datengebundenes Steuerelement gebunden ist, ist, dass das datengebundene Steuerelement erstellt eine <xref:System.Web.UI.WebControls.Parameter> Objekt für jeden Parameter in der Datenquelle. Wenn das Geschäftsobjekt viele Felder verfügt, hat die resultierende Methode auch viele Felder an. Die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft ermöglicht Ihnen die Angabe ein Typs, die über eine Eigenschaft für jedes Datenfeld verfügt. Anschließend, anstatt mehrere Parameter an die Methode übergeben, die Common Language Runtime erstellt ein Objekt und alle zugehörigen Eigenschaften. Dieses Objekt wird in die Parameterauflistung für den Methodenaufruf hinzugefügt.  
  
 Die vom angegebenen Typ der <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft muss einen Standardkonstruktor, der keine Parameter hat verfügen daher die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement kann eine Instanz des Typs erstellen. Muss auch aufweisen, da festlegbare Eigenschaften, mit denen die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, das Objekt mit Werten aufzufüllen, die aus dem datengebundenen Steuerelement übergeben werden. Die Eigenschaft auf den Namen der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement wird erwartet, dass Sie genau die Parameternamen von Werten entsprechen, die durch das datengebundene Steuerelement übergeben werden.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> festgelegt wird und die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement bezieht sich auf einem datengebundenen Steuerelement, die Methoden, die vom angegebenen der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaften müssen einen Parameter des Typs, der in der angegebenist<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.OverwriteChanges> -Wert, der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft muss einen Parameter des Typs, der im angegebenen haben die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> -Wert, der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft benötigen zwei Parameter des Typs, der im angegebenen die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. Der erste Parameter enthält die ursprünglichen Werte. der zweite Parameter enthält die neuen Werte.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
   
  
## Examples  
 Der Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie einen Typ implementiert, die alle Parameterwerte in ein Objekt, kombiniert mit dem <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. Das zweite Codebeispiel zeigt die Webseite, die die beiden Klassen verwendet, die im ersten Codebeispiel verwendet werden.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie einen Typ implementiert, die alle Parameterwerte in ein Objekt, kombiniert mit dem <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. Die select-Methode von der `AggregateData` -Klasse zurückgegeben wird ein <xref:System.Data.DataTable> Objekt mit zwei Spalten, die mit dem Namen `Name` und `Number`. Auf ähnliche Weise die `NewData` Klasse definiert zwei Lese-/Schreibeigenschaften, `Name` und `Number`. Die `Insert` Methode der `AggregateData` Klasse übernimmt einen Parameter des Typs `NewData`. Die `TypeName` Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> auf festgelegt ist `AggregateData` und <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> -Eigenschaftensatz auf `NewData`.  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 Das folgende Codebeispiel zeigt die Webseite, die die beiden Klassen verwendet, die im vorherigen Codebeispiel verwendet werden.  
  
 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="objectDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Löschvorgang durch Aufrufen der von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />-Eigenschaft angegebenen Methode mit sämtlichen Parametern in der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />-Auflistung aus.</summary>
        <returns>Ein Wert, der die Anzahl der aus dem zugrunde liegenden Datenspeicher gelöschten Zeilen darstellt, wenn die <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" />-Eigenschaft der Instanz von <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> im <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />-Ereignis festgelegt wurde, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Vorgang wird ausgeführt, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis, um die Werte der Parameter zu untersuchen und alle vorverarbeitung vor dem Ausführen einer <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Vorgang. Zum Ausführen eines Delete-Vorgangs, der <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt Reflektion zum Erstellen einer Instanz des Objekts, das durch gekennzeichnet ist, die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft. Er ruft dann die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft unter Verwendung aller zugeordneten <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Eigenschaften. Wenn der Parameter für das Löschen aus einem zugeordneten datengebundenen Steuerelement stammen, wird der Name der Parameter erstellt, gemäß der <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Eigenschaft. Nach der <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Vorgang abgeschlossen wurde, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> Ereignis. Sie können behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> Ereignis, um alle Werte zurückgeben, Ausgabeparameter und Ausnahmen zu untersuchen und nach der Verarbeitung ausführen.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> Methode der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
## <a name="data-bound-controls"></a>Datengebundene Steuerelemente  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit einem datengebundenen Steuerelement verknüpft ist, z. B. die <xref:System.Web.UI.WebControls.GridView> -Steuerelement, es ist nicht notwendig, die <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Methode Seitencode. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Methode wird stattdessen direkt vom datengebundenen Steuerelement aufgerufen.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />-Vorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> Ereignis, um die Werte der Rückgabewert oder Ausgabeparameter zu untersuchen oder um zu bestimmen, ob eine Ausnahme ausgelöst wurde, nachdem ein <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Vorgang abgeschlossen wurde. Der Rückgabewert Output-Parameter und Eigenschaften für die Ausnahmebehandlung stehen aus der <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> Objekt, das dem Ereignis zugeordnet ist.  
  
 Können Sie die <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> Objekts, das die Anzahl der Zeilen zurückgegeben, die aus gelöscht wurden die <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Methode. Legen Sie hierzu die <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> Eigenschaft. Wenn Sie die Anzahl der gelöschten Zeilen von der Methode zurückgegeben, die von angegeben wird der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> -Eigenschaft der Wert von verfügbar ist die <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> Eigenschaft der <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> Objekt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Im zweiten Beispiel wird für Code die `EmployeeLogic` -Klasse, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Zu Beginn der <xref:System.Web.UI.WebControls.GridView> -Steuerelement zeigt einen Satz aller Mitarbeiter, die mit der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft zum Abrufen der Daten aus der `EmployeeLogic` Objekt. Da die <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.WebControls.GridView> -Steuerelement automatisch zeigt eine **löschen** Schaltfläche.  
  
 Wenn Sie auf die **löschen** Schaltfläche, den Löschvorgang erfolgt mithilfe der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> -Eigenschaft und die im angegebenen Parameter der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung. In diesem Codebeispiel werden einige Schritte vorab und nachträglich verarbeitete auch ausgeführt werden. Die `NorthwindEmployeeDeleting` Delegat wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis aus, bevor der Vorgang ausgeführt wird und die `NorthwindEmployeeDeleted` Delegat wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> Ereignis aus, nachdem der Vorgang abgeschlossen wurde, um die Behandlung von Ausnahmen führen. In diesem Codebeispiel Wenn eine `NorthwindDataException` ist ausgelöst wird, wird er vom verarbeitet die `NorthwindEmployeeDeleted` Methode.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 Das folgende Codebeispiel zeigt die `EmployeeLogic` -Klasse, die im vorherigen Codebeispiel verwendet wird.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode oder Funktion ab, die vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement zum Löschen von Daten aufgerufen wird, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Namen der Methode oder der Funktion darstellt, mit deren Hilfe die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> Daten löscht. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Geschäftsobjekt wird davon ausgegangen, dass einen Datensatz zu einem Zeitpunkt, anstatt in einem Batch löschen.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Stellen Sie sicher, dass die Parameternamen für konfiguriert die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung übereinstimmen, die Spaltennamen, die von der select-Methode zurückgegeben werden.  
  
## <a name="object-lifetime"></a>Lebensdauer eines Objekts  
 Die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft kann eine Instanzmethode sein oder ein `static` (`Shared` in Visual Basic) Methode. Wenn sie eine Instanzmethode ist, wird das Geschäftsobjekt erstellt und zerstört jedes Mal die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft wird aufgerufen. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignisse an das Geschäftsobjekt vor der Bearbeitung der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft wird aufgerufen. Sie können auch behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis, das ausgelöst wird, nachdem die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft wird aufgerufen. Wenn das Geschäftsobjekt implementiert die <xref:System.IDisposable> -Schnittstelle, die <xref:System.IDisposable.Dispose%2A> Methode wird aufgerufen, bevor das Objekt zerstört wird. Wenn die Methode ist ein `static` (`Shared` in Visual Basic) Methode, das Geschäftsobjekt nie erstellt, und Sie nicht behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignisse.  
  
## <a name="parameter-merging"></a>Zusammenführen von Parametern  
 Parameter hinzugefügt werden, um die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung aus drei Quellen:  
  
-   Aus dem datengebundenen Steuerelement zur Laufzeit.  
  
-   Aus der `DeleteParameters` -Element, deklarativ.  
  
-   Aus der `Deleting` -Methode, deklarativ.  
  
 Zunächst alle Parameter, die von datengebundenen Steuerelementen generiert werden hinzugefügt werden die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung. Z. B. wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> gebunden ist eine <xref:System.Web.UI.WebControls.GridView> Steuerelement, das die Spalten `Name` und `Number`, Parameter für `Name` und `Number` der Auflistung hinzugefügt werden. Der genaue Name des Parameters hängt von der <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Eigenschaft. Der Datentyp dieser Parameter ist `string`. Anschließend wird die Parameter, die in aufgeführt sind die `DeleteParameters` Element hinzugefügt werden. Wenn ein Parameter in der `DeleteParameters` Element gefunden wird, mit dem gleichen Namen wie ein Parameter, der bereits in der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> vorhandenen Parameters-Auflistung wurde geändert, um die Parameter entsprechen, die im angegebenen der `DeleteParameters` Element. Dies wird in der Regel verwendet, so ändern Sie den Typ der Daten im Parameters. Schließlich können Sie programmgesteuert hinzufügen und entfernen Sie die Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> -Ereignis, das vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> -Methode ausgeführt wird. Die Methode wird aufgelöst, nachdem die Parameter zusammengeführt werden. Methode Auflösung wird im nächsten Abschnitt erläutert.  
  
## <a name="method-resolution"></a>Methode Auflösung  
 Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> -Methode aufgerufen wird, wird die Datenfelder aus dem datengebundenen Steuerelement, die Parameter, die deklarativ in erstellt wurden die `DeleteParameters` Element und die Parameter, die in hinzugefügt wurden die <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> -Ereignishandler werden zusammengeführt. (Weitere Informationen finden Sie im vorherigen Abschnitt.) Die <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt versucht dann, eine aufzurufende Methode zu suchen. Sucht zuerst für eine oder mehrere Methoden mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft. Wenn keine Übereinstimmung gefunden wird, eine <xref:System.InvalidOperationException> Ausnahme wird ausgelöst. Wenn eine Übereinstimmung gefunden wird, sucht er nach übereinstimmende Parameternamen. Nehmen wir beispielsweise an der vom angegebenen Typ der <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft verfügt über zwei Methoden namens `DeleteARecord`. Eine `DeleteARecord` verfügt über einen Parameter `ID`, und die andere `DeleteARecord` verfügt über zwei Parameter `Name` und `Number`. Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung hat nur einen Parameter mit dem Namen `ID`, die `DeleteARecord` -Methode mit nur den `ID` Parameter aufgerufen wird. Der Typ des Parameters wird beim Auflösen der Methoden nicht überprüft. Die Reihenfolge der Parameter spielt keine Rolle.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft festgelegt ist, wird die Methode auf eine andere Weise aufgelöst. Die <xref:System.Web.UI.WebControls.ObjectDataSource> sucht nach einer Methode mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> -Eigenschaft, die einen Parameter des Typs, akzeptiert wird angegeben, der <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. In diesem Fall spielt der Namen des Parameters keine Rolle.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Im zweiten Beispiel wird für Code die `EmployeeLogic` -Klasse, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Zu Beginn der <xref:System.Web.UI.WebControls.GridView> -Steuerelement zeigt einen Satz aller Mitarbeiter, die mit der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft zum Abrufen der Daten aus der `EmployeeLogic` Objekt. Da die <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.WebControls.GridView> -Steuerelement automatisch zeigt eine **löschen** Schaltfläche.  
  
 Wenn Sie auf die **löschen** Schaltfläche, den Löschvorgang erfolgt mithilfe der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> -Eigenschaft und die im angegebenen Parameter der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung. In diesem Codebeispiel werden einige Schritte vorab und nachträglich verarbeitete auch ausgeführt werden. Die `NorthwindEmployeeDeleting` Delegat wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis aus, bevor der Vorgang ausgeführt wird, und die `NorthwindEmployeeDeleted` Delegat wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> Ereignis aus, nachdem der Vorgang abgeschlossen wurde, um die Behandlung von Ausnahmen führen. In diesem Beispiel wenn eine `NorthwindDataException` wird ausgelöst, wird er vom verarbeitet die `NorthwindDataException` delegieren.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 Das folgende Codebeispiel zeigt die `EmployeeLogic` -Klasse, die im vorherigen Codebeispiel verwendet wird.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung ab, die die von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />-Methode verwendeten Parameter enthält.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" />, die die von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />-Methode verwendeten Parameter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Namen und Typen der Parameter, die in enthaltenen der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung übereinstimmen, die Namen und Typen der Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Methodensignatur. Die Parameternamen betroffen sind der <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> -Eigenschaft und die Groß-/Kleinschreibung beachtet werden. Die Parameter in der Auflistung richten sich nach den Daten, die in das datengebundene Steuerelement, die Parameter, die deklarativ angegeben werden und die Parameter, die programmgesteuert hinzugefügt werden. Weitere Informationen finden Sie unter "Das Zusammenführen von" in <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> und [Verwenden von Parametern mit dem ObjectDataSource-Steuerelement](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Im zweiten Beispiel wird für Code die `EmployeeLogic` -Klasse, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement zum Löschen von Daten. Zu Beginn der <xref:System.Web.UI.WebControls.GridView> -Steuerelement zeigt einen Satz aller Mitarbeiter, die mit der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft zum Abrufen der Daten aus der `EmployeeLogic` Objekt. Da die <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.WebControls.GridView> -Steuerelement automatisch zeigt eine **löschen** Schaltfläche.  
  
 Wenn Sie auf die **löschen** Schaltfläche, die <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis wird mit zwei Parametern aufgerufen. Ein Parameter `EmpID`, ergibt sich aus der <xref:System.Web.UI.WebControls.DataGrid> gesteuert und basiert auf der <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> Eigenschaft. Der andere Parameter stammt aus der deklarativen <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Eigenschaft. Die `EmployeeLogic` -Klasse überlädt die `DeleteEmployee` Methode. Eine Überladung nimmt eine `NorthwindEmployee` Parameter und die andere akzeptiert einen <xref:System.Int32> Parameter mit dem Namen `anID`. In der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis, das die Einträge in der <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> Eigenschaft werden angepasst, um nur einen Parameter mit dem Namen enthalten `anID` mit dem Wert von `original_EmpID`. Wenn der Ereignishandler vorhanden ist, den entsprechenden `DeleteEmployee` -Methode aufgerufen wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, die Webseite, die zeigt die <xref:System.Web.UI.WebControls.DataGrid> Steuerelement und behandelt die <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 Das folgende Codebeispiel zeigt die `EmployeeLogic` -Klasse, die im vorherigen Codebeispiel verwendet wird.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />-Vorgang auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis, um zusätzliche Initialisierung auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement den Löschvorgang ausführt. Die Parameter sind verfügbar, als ein <xref:System.Collections.IDictionary> -Auflistung, die durch zugegriffen wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> -Eigenschaft, die von verfügbar gemacht wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> Objekt.  
  
 Können Sie den Löschvorgang abbrechen, indem die <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> auf `true`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Im zweiten Beispiel wird für Code die `EmployeeLogic` -Klasse, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und ein <xref:System.Web.UI.WebControls.GridView> Steuerelement, um Daten zu löschen. Zu Beginn der <xref:System.Web.UI.WebControls.GridView> -Steuerelement zeigt einen Satz aller Mitarbeiter, die mit der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft zum Abrufen der Daten aus der `EmployeeLogic` Objekt. Da die <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.WebControls.GridView> -Steuerelement automatisch zeigt eine **löschen** Schaltfläche.  
  
 Wenn Sie auf die **löschen** Schaltfläche, den Löschvorgang erfolgt mithilfe der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> -Eigenschaft und die im angegebenen Parameter der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung. In diesem Codebeispiel werden einige Schritte vorab und nachträglich verarbeitete auch ausgeführt werden. Die `NorthwindEmployeeDeleting` Delegat wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Ereignis aus, bevor der Vorgang ausgeführt wird, und die `NorthwindEmployeeDeleted` Delegat wird aufgerufen, um die Behandlung der <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> Ereignis aus, nachdem der Vorgang abgeschlossen wurde, um die Behandlung von Ausnahmen führen. In diesem Codebeispiel Wenn eine `NorthwindDataException` ist ausgelöst wird, wird er vom verarbeitet die `NorthwindEmployeeDeleted` Methode.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 Das folgende Codebeispiel zeigt die `EmployeeLogic` -Klasse, die im vorherigen Codebeispiel verwendet wird.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob für das <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement die Zwischenspeicherung von Daten aktiviert ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn die Zwischenspeicherung von Daten für das Datenquellen-Steuerelement aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement unterstützt das Zwischenspeichern von Daten. Während Daten zwischengespeichert werden, Aufrufe von der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode abrufen von Daten aus dem Cache statt über das <xref:System.Web.UI.WebControls.ObjectDataSource> Erstellen einer Instanz des Geschäftsobjekts und seine Daten aufrufen. Wenn der Cache abläuft, die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode ruft Daten aus dem Geschäftsobjekt ab und speichert die Daten erneut.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement automatisch speichert Daten bei der <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> -Eigenschaftensatz auf `true` und die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Eigenschaft auf einen Wert größer als 0, der die Anzahl der Sekunden angibt, dass der Cache speichert die Daten vor den Cacheeintrag festgelegt ist wird verworfen. Der Wert 0 gibt eine unendlich lange Cache an.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs--Klasse, die Datensätze aus der Tabelle Employees in der Northwind-Datenbank abrufen.  
  
 Das erste Beispiel zeigt eine Webseite, die zwei <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelemente, einen <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die erste <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement abrufen und Anzeigen der Namen der Mitarbeiter aus der Datenbank verwendet werden. Die zweite <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement dienen zum Abrufen und Anzeigen der Mitarbeiterdatensatz, die vom Benutzer ausgewählt wird.  
  
 Zwischenspeichern aktiviert ist, für die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Deshalb wird jeder Datensatz nur einmal aus der Datenbank abgerufen. Die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Eigenschaft auf "EmployeeDetails" festgelegt ist, aber einen beliebigen Zeichenfolgenwert als Schlüssel arbeiten kann. Die Webseite enthält auch eine <xref:System.Web.UI.WebControls.Button> Steuerelement, das der Benutzer klicken kann, um die zwischengespeicherten Daten laufen ab.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 Das zweite Beispiel zeigt einen Handler für die <xref:System.Web.UI.Control.Load> Ereignis und einen Handler für das <xref:System.Web.UI.WebControls.Button.Click> -Ereignis für die <xref:System.Web.UI.WebControls.Button> Steuerelement. Die <xref:System.Web.UI.Control.Load> -Ereignishandler erstellt ein Cacheelement mit einem Schlüssel, der zum Festlegen der <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Wert. Die <xref:System.Web.UI.WebControls.Button.Click> Ereignishandler entfernt das Cacheelement, dessen Schlüssel gleich, dem <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> Wert. Wenn das Element im Cache entfernt wird, werden alle zwischengespeicherten Daten, die abhängig von der Schlüssel ist abgelaufen.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 Das dritte Beispiel zeigt die Access-Klasse, die mit der Northwind-Datenbank interagiert. Die Klasse verwendet LINQ zum Abfragen der Employees-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die die Northwind-Datenbank und der Employees-Tabelle darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />-Eigenschaft wird auf <see langword="true" /> festgelegt, wenn die durch die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft angegebene Methode einen <see cref="T:System.Data.Common.DbDataReader" /> zurückgibt.</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePaging : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Datenquellensteuerelement Paging für den von ihm abgerufenen Datensatz unterstützt, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Datenquellen-Steuerelement Paging für die von ihm abgerufenen Daten unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paging durch die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement behandelt, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, und <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaften der <xref:System.Web.UI.WebControls.ObjectDataSource> und Definieren von einer select-Methode in das Geschäftsobjekt mit den richtigen Parametern. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> -Eigenschaftensatz auf `true`, die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung enthält zwei zusätzliche Parameter für die erste Zeile, die angefordert wird und die Anzahl der Zeilen, die angefordert werden. Diese beiden Parameter heißen gemäß der <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaften. Die `Select` Methode sollte die angeforderte Anzahl von Zeilen, die beginnend am angegebenen Index zurück. Da die Daten an die Seitengröße nicht gleichmäßig unterteilt sein kann, kann die letzte Seite weniger Zeilen enthalten. Daher ist die Anzahl der Zeilen, die angefordert werden tatsächlich die maximale Anzahl von Zeilen, die zurückgegeben werden.  
  
 Wenn Paging für das zugeordnete datengebundene Steuerelement aktiviert ist, ruft das datengebundene Steuerelement die `Select` Methode mit den startIndex und die Anzahl der Zeilen, die erforderlich sind. Darüber hinaus, wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft festgelegt ist, das datengebundene Steuerelement ruft die Methode vor dem Rendern der Pager-Steuerelemente. Z. B. wenn ein <xref:System.Web.UI.WebControls.GridView> -Steuerelement Paging mit einer Seitengröße von 5 und die Methode für die angegebenen aktiviert die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft 20 zurückgibt, werden nur 4 Seiten im Pager angezeigt.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen den Benutzer auswählen, wie viele Datensätze auf der Seite angezeigt werden können.  
  
 Die Webseite enthält ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, dessen <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> -Eigenschaftensatz auf `true`. Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft wird festgelegt, auf den Namen einer Methode, die die Gesamtanzahl von Datensätzen in der Abfrage zurückgibt. Die <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaftensatz den Namen der Parameter, die in der Select-Methode verwendet werden. Die Seite enthält außerdem eine <xref:System.Web.UI.WebControls.DropDownList> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Das zweite Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> -Ereignis für die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Der Code in den Handler der <xref:System.Web.UI.WebControls.GridView.PageSize%2A> Eigenschaft, um die Auswahl des Benutzers.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Data Access-Klasse, die Daten aus der Customers-Tabelle abruft. Es enthält eine Methode mit dem Namen `GetSubsetOfEmployees`, zugewiesen an die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Das Beispiel enthält auch eine Methode namens `GetEmployeeCount`, zugewiesen die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Die Klasse verwendet LINQ zum Abfragen der Customers-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Customers" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Filterausdruck ab, der beim Aufruf der von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft angegebenen Methode angewendet wird, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die einen Filterausdruck darstellt, der beim Abrufen von Daten mit der von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft angegebenen Methode oder Funktion angewendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt das Filtern von Daten nur, wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode gibt ein <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> Objekt.  
  
 Die Syntax für die verwendeten die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft ist ein Format-Ausdruck. Die Syntax der Filter-Ausdruck wird die gleiche Syntax, die vom akzeptiert wird die <xref:System.Data.DataColumn.Expression%2A> Eigenschaft. Wenn Sie Parameter zum Hinzufügen der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> -Auflistung, Sie können auch Platzhalter für Formatzeichenfolgen einschließen. Beispielsweise enthalten `"{0}"` im Ausdruck als Ersatz für Parameterwerte. Die Platzhalter werden entsprechend dem Index des Parameters im ersetzt die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung.  
  
 Sie können Parameter in einschließen der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft. Wenn der Typ des Parameters einen Zeichenfolgen- oder Typ ist, schließen Sie den Parameter in einfache Anführungszeichen ein. Anführungszeichen sind nicht erforderlich, wenn der Parameter einen numerischen Typ handelt.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung enthält die Parameter, die für den Platzhalter, die im gefunden ausgewertet werden die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
> [!NOTE]
>  Sie sollten alle Filterparameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime einfach der Wert des Parameters in der Filter-Ausdruck ersetzt, und wendet ihn auf die <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> von zurückgegebene Objekt der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Bei Verwendung der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> -Eigenschaft, wie eine Sicherheitsmaßnahme, um die Anzahl der Elemente, die zurückgegeben werden, müssen Sie die Parameterwerte überprüfen, bevor die Filterung erfolgt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie gefilterte Daten ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement zum Abrufen von Daten aus einem Geschäftsobjekt der mittleren Ebene und einem <xref:System.Web.UI.WebControls.GridView> Steuerelement zum Anzeigen der Ergebnisse. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement kann die Daten filtern, nur, wenn die Methode, die die Daten abruft, die als abruft eine <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> Objekt. Aus diesem Grund die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft identifiziert eine Business-Objekt-Methode, die Daten als abruft eine <xref:System.Data.DataSet>.  
  
 Im Codebeispiel besteht aus einer <xref:System.Web.UI.WebControls.TextBox> -Steuerelement, eine <xref:System.Web.UI.WebControls.GridView> -Steuerelement, die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement, und ein **Absenden** Schaltfläche. Wird standardmäßig der <xref:System.Web.UI.WebControls.TextBox> wird mit den Namen eines Northwind Traders Mitarbeiter aufgefüllt. Die <xref:System.Web.UI.WebControls.GridView> zeigt Informationen über den Mitarbeiter, die im namentlich identifiziert wird die <xref:System.Web.UI.WebControls.TextBox>. Um Daten auf einem anderen Mitarbeiter abzurufen, geben Sie den vollständigen Namen des Mitarbeiters in der <xref:System.Web.UI.WebControls.TextBox>, und klicken Sie dann auf die **Absenden** Schaltfläche.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft gibt einen Ausdruck, der verwendet wird, um die Daten zu filtern, die von der Methode abgerufen werden, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Platzhalter für Parameter, die an die Parameter ausgewertet werden, die in enthaltenen verwendet die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung. In diesem Beispiel wird die Parameterplatzhalter durch einfache Anführungszeichen begrenzt, da der Typ des Parameters einen Zeichenfolgentyp handelt, der Leerzeichen enthalten kann. Wenn der Typ des Parameters einen Typ numerisch oder Datum ist, sind die umgebenden Anführungszeichen nicht erforderlich.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 Das folgende Codebeispiel enthält ein Beispiel für ein Geschäftsobjekt mit mittlerer Ebene, die im vorherigen Codebeispiel verwendet. Das Codebeispiel besteht aus zwei einfachen Klassen:  
  
-   Die `EmployeeLogic` -Klasse, die eine Klasse ist, die Geschäftslogik kapselt.  
  
-   Die `NorthwindEmployee` Klasse, die eine Modellklasse, die nur die grundlegende Funktionen enthält, die zum Laden und Beibehalten von Daten aus der Datenebene erforderlich ist.  
  
 Zur Vereinfachung der `EmployeeLogic` -Klasse erstellt einen statischen Satz von Daten, anstatt Abrufen der Daten aus einer Datenebene. Es ist auch hilfreich, in diesem Beispiel daran, dass Sie den vollständigen Namen eines Mitarbeiters Northwind Traders zur Veranschaulichung der Funktion Filtern Bereitstellen des Beispiels verwendet. Ein vollständiges Beispiel arbeiten müssen Sie kompilieren und verwenden Sie diese Klassen mit Web Forms-Codebeispiele, die bereitgestellt werden.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />-Eigenschaft wurde festgelegt, und die <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />-Methode gibt nicht <see cref="T:System.Data.DataSet" /> oder <see cref="T:System.Data.DataTable" /> zurück.</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem Filtervorgang auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering> Ereignis Überprüfungsvorgänge für Filterparameterwerte vor dem Ausführen der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement einem Filter durchgeführt. Sie können den ausgewählten Vorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> zu `true`. Dieses Ereignis wird ausgelöst, wenn nur die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> festgelegt wird.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType> Ereignis delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType> -Ereignis für die <xref:System.Web.UI.WebControls.ObjectDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
> [!IMPORTANT]
>  Sie sollten alle Filterparameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime einfach der Wert des Parameters in der Filter-Ausdruck ersetzt, und wendet ihn auf die <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> von zurückgegebene Objekt der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Bei Verwendung der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> -Eigenschaft, wie eine Sicherheitsmaßnahme, um die Anzahl der Elemente, die zurückgegeben werden, müssen Sie die Parameterwerte überprüfen, bevor die Filterung erfolgt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von Parametern ab, die beliebigen Parameterplatzhaltern in der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />-Zeichenfolge zugeordnet sind.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> mit einer Reihe von Parametern, die beliebigen Parameterplatzhaltern in der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />-Eigenschaft zugeordnet sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt das Filtern von Daten nur, wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode gibt ein <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> Objekt.  
  
 Die Syntax für die verwendeten die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> ist ein Format-Ausdruck. Die Syntax der Filter-Ausdruck wird die gleiche Syntax, die vom akzeptiert wird die <xref:System.Data.DataColumn.Expression%2A> Eigenschaft. Wenn Sie Parameter zum Hinzufügen der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> -Auflistung, Sie können auch Platzhalter für Formatzeichenfolgen einschließen. Beispielsweise enthalten `"{0}"` im Ausdruck als Ersatz für Parameterwerte. Die Platzhalter werden entsprechend dem Index des Parameters im ersetzt die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung.  
  
 Sie können Parameter in einschließen der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft. Wenn der Parameter einen Zeichenfolgen- oder Typ ist, schließen Sie den Parameter in einfache Anführungszeichen ein. Anführungszeichen sind nicht erforderlich, wenn der Parameter einen numerischen Typ handelt.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie gefilterte Daten ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt zum Abrufen von Daten aus einem Geschäftsobjekt der mittleren Ebene und einem <xref:System.Web.UI.WebControls.GridView> Steuerelement zum Anzeigen der Ergebnisse. Das zweite Codebeispiel enthält ein Beispiel für ein Geschäftsobjekt mit mittlerer Ebene, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie gefilterte Daten ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement zum Abrufen von Daten aus einem Geschäftsobjekt der mittleren Ebene und einem <xref:System.Web.UI.WebControls.GridView> Steuerelement zum Anzeigen der Ergebnisse. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement kann die Daten filtern, nur, wenn die Methode, die die Daten abruft, die als abruft eine <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> Objekt. Aus diesem Grund die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft identifiziert eine Business-Objekt-Methode, die Daten als abruft eine <xref:System.Data.DataSet>.  
  
 Im Codebeispiel besteht aus einer <xref:System.Web.UI.WebControls.TextBox> -Steuerelement, eine <xref:System.Web.UI.WebControls.GridView> -Steuerelement, die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement, und ein **Absenden** Schaltfläche. Wird standardmäßig der <xref:System.Web.UI.WebControls.TextBox> wird mit den Namen eines Northwind Traders Mitarbeiter aufgefüllt. Die <xref:System.Web.UI.WebControls.GridView> zeigt Informationen über den Mitarbeiter, die im namentlich identifiziert wird die <xref:System.Web.UI.WebControls.TextBox>. Zum Abrufen von Daten auf eine andere Mitarbeiter in der <xref:System.Web.UI.WebControls.TextBox>, geben Sie den vollständigen Namen des Mitarbeiters aus, und klicken Sie dann auf die **Absenden** Schaltfläche.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft gibt einen Ausdruck, der verwendet wird, um die Daten zu filtern, die von abgerufen wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Platzhalter für Parameter, die an die Parameter ausgewertet werden, die in enthaltenen verwendet die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung. In diesem Beispiel wird die Parameterplatzhalter durch einfache Anführungszeichen begrenzt, da der Typ des Parameters einen Zeichenfolgentyp handelt, der Leerzeichen enthalten kann. Wenn der Typ des Parameters einen Typ numerisch oder Datum ist, sind die umgebenden Anführungszeichen nicht erforderlich. Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung enthält einen Parameter, ein <xref:System.Web.UI.WebControls.FormParameter> -Objekt, das gebunden ist die <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!IMPORTANT]
>  Sie sollten alle Filterparameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime einfach der Wert des Parameters in der Filter-Ausdruck ersetzt, und wendet ihn auf die <xref:System.Data.DataView> von zurückgegebene Objekt der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode. Bei Verwendung der <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> -Eigenschaft, wie eine Sicherheitsmaßnahme, um die Anzahl der Elemente, die zurückgegeben werden, müssen Sie die Parameterwerte überprüfen, bevor die Filterung erfolgt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 Das folgende Codebeispiel enthält ein Beispiel für ein Geschäftsobjekt mit mittlerer Ebene, die im vorherigen Codebeispiel verwendet. Das Codebeispiel besteht aus zwei einfachen Klassen:  
  
-   Die `EmployeeLogic` -Klasse, die eine Klasse ist, die Geschäftslogik kapselt.  
  
-   Die `NorthwindEmployee` Klasse, die eine Modellklasse, die nur die grundlegende Funktionen enthält, die zum Laden und Beibehalten von Daten aus der Datenebene erforderlich ist.  
  
 Zur Vereinfachung der `EmployeeLogic` -Klasse erstellt einen statischen Satz von Daten, anstatt Abrufen der Daten aus einer Datenebene. Es ist auch hilfreich, in diesem Beispiel daran, dass Sie den vollständigen Namen eines Mitarbeiters Northwind Traders zur Veranschaulichung der Funktion Filtern Bereitstellen des Beispiels verwendet. Ein vollständiges Beispiel arbeiten müssen Sie kompilieren und verwenden Sie diese Klassen mit Web Forms-Codebeispiele, die bereitgestellt werden.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Sie können die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />-Eigenschaft festlegen, sodass die <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />-Methode nicht <see cref="T:System.Data.DataSet" /> oder <see cref="T:System.Data.DataTable" /> zurückgibt.</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="objectDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Der Name der abzurufenden Ansicht. Da die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> nur eine Ansicht unterstützt, wird <c>viewName</c> ignoriert.</param>
        <summary>Ruft die benannte Datenquellenansicht ab, die dem Datenquellen-Steuerelement zugeordnet ist.</summary>
        <returns>Die <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> mit dem Namen <see langword="DefaultView" />, die der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt nur eine Datenquellensicht an. Wie bei allen Datenquellensicht-Objekte, die <xref:System.Web.UI.WebControls.ObjectDataSourceView> , verknüpft ist mit den Daten Datenquellen-Steuerelement seine Funktionen definiert, führt die Aufgaben aus, die zum Abrufen von Daten aus dem zugrunde liegenden Datenspeicher erforderlich ist, und führt Vorgänge wie das Sortieren, Einfügen, löschen und aktualisieren.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> Methode, die von datengebundenen Steuerelementen, aufgerufen werden nicht durch Seitencode vorgesehen ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der angegebene <paramref name="viewName" /> ist <see langword="null" /> oder weicht von <see langword="DefaultView" /> ab.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="objectDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine Auflistung von Namen ab, die die Liste der dem <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt zugeordneten Ansichtsobjekte darstellt.</summary>
        <returns>Eine <see cref="T:System.Collections.ICollection" />, die die Namen der Ansichten enthält, die der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> zugeordnet sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt nur die Ansicht mit dem Namen `DefaultView`, auf die zugrunde liegenden Daten. Die <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> -Methode gibt eine Auflistung Einzelelement-mit diesem Namen einer Ansicht.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> Methode, die von datengebundenen Steuerelementen, aufgerufen werden nicht durch Seitencode vorgesehen ist.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="objectDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Einfügevorgang durch Aufrufen der von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />-Eigenschaft angegebenen Methode mit sämtlichen Parametern in der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />-Auflistung aus.</summary>
        <returns>Ein Wert, der die Anzahl der im zugrunde liegenden Datenspeicher eingefügten Zeilen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang wird ausgeführt, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Ereignis. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Ereignis, um die Werte der Parameter zu untersuchen und alle vorverarbeitung vor dem Ausführen einer <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang. Zum Ausführen eines Insert-Vorgangs der <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt Reflektion zum Erstellen einer Instanz des Objekts, das durch gekennzeichnet ist, die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft. Er ruft dann die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft unter Verwendung aller zugeordneten <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Eigenschaften. Nach der <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang abgeschlossen wurde, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> Ereignis. Sie können behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> Ereignis, um alle Werte zurückgeben, Ausgabeparameter und Ausnahmen zu untersuchen und nach der Verarbeitung ausführen.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> Methode der <xref:System.Web.UI.WebControls.ObjectDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  
  
## <a name="data-bound-controls"></a>Datengebundene Steuerelemente  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit einem datengebundenen Steuerelement verknüpft ist, z. B. die <xref:System.Web.UI.WebControls.GridView> -Steuerelement, es ist nicht notwendig, die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Methode Seitencode. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Methode wird stattdessen direkt vom datengebundenen Steuerelement aufgerufen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />-Vorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> Ereignis, um die Werte der Rückgabewert oder Ausgabeparameter zu untersuchen oder um zu bestimmen, ob eine Ausnahme ausgelöst wurde, nachdem ein <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang abgeschlossen wurde. Der Rückgabewert Output-Parameter und Eigenschaften für die Ausnahmebehandlung stehen aus der <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />-Vorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Ereignis, um zusätzliche Initialisierung auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement den Einfügevorgang ausführt. Die Parameter sind verfügbar, als ein <xref:System.Collections.IDictionary> -Auflistung, die durch zugegriffen wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> -Eigenschaft, die von verfügbar gemacht wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> Objekt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zum Einfügen von Daten. Das zweite Codebeispiel enthält ein Beispiel für das Geschäftsobjekt mit mittlerer Ebene, das im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zum Einfügen von Daten. Zu Beginn der <xref:System.Web.UI.WebControls.DetailsView> zeigt ein neues `NorthwindEmployee` aufzuzeichnen, zusammen mit einer automatisch generierten **einfügen** Schaltfläche. Nach dem Eingeben von Daten in die Felder von der <xref:System.Web.UI.WebControls.DetailsView> steuern, und klicken Sie auf die **einfügen** Schaltfläche. Die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft gibt die Methode den Einfügevorgang ausführt.  
  
 In diesem Beispiel wird die `UpdateEmployeeInfo` Methode wird verwendet, um eine Einfügung ausführen; es benötigt jedoch ein `NorthwindEmployee` Parameter zum Einfügen der Daten. Aus diesem Grund die Auflistung von Zeichenfolgen, die die <xref:System.Web.UI.WebControls.DetailsView> Steuerelement übergibt automatisch reicht nicht aus. Die `NorthwindEmployeeInserting` Delegat ist ein <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> -Objekt, das verarbeitet die <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Ereignis und ermöglicht es Ihnen, die Eingabeparameter vor dem Bearbeiten der <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang wird fortgesetzt. Da die `UpdateEmployeeInfo` Methode erfordert eine `NorthwindEmployee` -Objekt als Parameter verwendet, eine wird unter Verwendung der Auflistung von Zeichenfolgen erstellt und hinzugefügt wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> Auflistung mit einem Parameternamen (`ne`), die die Methode erwartet. Sie können die obigen Schritte ausführen, bei Verwendung von einem vorhandenen Objekt der mittleren Ebene als eine Datenquelle mit Typen und Methoden, die keine für die Verwendung mit der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang wird ausgeführt, die Methode für die identifizierte die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft wird aufgerufen. Wenn die `Insert` -Methode des Objekts wurde die Signatur einer Methode, die Parameter, enthält die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung muss einen Parameter mit Namen, die die Methodenparameter für die Signatur für entsprechen enthalten die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Methode erfolgreich abgeschlossen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 Das folgende Codebeispiel enthält ein Beispiel für ein Geschäftsobjekt mit mittlerer Ebene, die im vorherigen Codebeispiel verwendet. Das Codebeispiel besteht aus zwei einfachen Klassen:  
  
-   Die `EmployeeLogic` -Klasse, die eine zustandslose Klasse ist, die Geschäftslogik kapselt.  
  
-   Die `NorthwindEmployee` Klasse, die eine Modellklasse, die nur die grundlegende Funktionen enthält, die zum Laden und Beibehalten von Daten aus der Datenebene erforderlich ist.  
  
 Ein zusätzliches `NorthwindDataException` Klasse wird als Annehmlichkeit bereitgestellt. Ein vollständiges Beispiel arbeiten müssen Sie kompilieren und verwenden Sie diese Klassen. Die `UpdateEmployeeInfo` Methode ist nicht vollständig implementiert, sodass keine Daten in der Datenbank Northwind Traders eingefügt werden, wenn Sie mit diesem Beispiel experimentieren.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode oder Funktion ab, die vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement zum Einfügen von Daten aufgerufen wird, oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die den Namen der Methode oder der Funktion darstellt, mit deren Hilfe die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> Daten einfügt. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Geschäftsobjekt wird davon ausgegangen, dass einen Datensatz zu einem Zeitpunkt, anstatt in einem Batch eingefügt.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt.  
  
## <a name="object-lifetime"></a>Lebensdauer eines Objekts  
 Die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft kann eine Instanzmethode sein oder ein `static` (`Shared` in Visual Basic) Methode. Wenn es sich um eine Instanzmethode handelt, wird das Geschäftsobjekt wird erstellt und zerstört jedes Mal der Methode angegeben werden, die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft wird aufgerufen. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignisse an das Geschäftsobjekt vor der Bearbeitung der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft wird aufgerufen. Sie können auch behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis, das nach der Methode ausgelöst, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Eigenschaft wird aufgerufen. Wenn das Geschäftsobjekt implementiert die <xref:System.IDisposable> -Schnittstelle, die <xref:System.IDisposable.Dispose%2A> Methode wird aufgerufen, bevor das Objekt zerstört wird. Wenn die Methode `static` (`Shared` in Visual Basic), wird das Geschäftsobjekt nie erstellt, und Sie nicht behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignisse.  
  
## <a name="parameter-merging"></a>Zusammenführen von Parametern  
 Parameter hinzugefügt werden, um die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung aus drei Quellen:  
  
-   Aus dem datengebundenen Steuerelement zur Laufzeit.  
  
-   Aus der `InsertParameters` -Element, deklarativ.  
  
-   Von der `Inserting` -Methode programmgesteuert.  
  
 Zunächst alle Parameter, die von datengebundenen Steuerelementen generiert werden hinzugefügt werden die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung. Z. B. wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> gebunden ist eine <xref:System.Web.UI.WebControls.GridView> Steuerelement, das die Spalten `Name` und `Number`, die Parameter für `Name` und `Number` der Auflistung hinzugefügt werden. Der Datentyp dieser Parameter ist `string`. Anschließend wird die Parameter, die in aufgeführt sind die `InsertParameters` Element hinzugefügt werden. Wenn ein Parameter in der `InsertParameters` Element gefunden wird, mit dem gleichen Namen wie ein Parameter, der bereits in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> vorhandenen Parameters-Auflistung wurde geändert, um die Parameter entsprechen, die im angegebenen der `InsertParameters` Element. Dies wird in der Regel verwendet, so ändern Sie den Typ der Daten im Parameters. Schließlich können Sie programmgesteuert hinzufügen und entfernen Sie die Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> -Ereignis, das vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> -Methode ausgeführt wird. Die Methode wird aufgelöst, nachdem die Parameter zusammengeführt werden. Methode Auflösung wird im nächsten Abschnitt erläutert.  
  
> [!IMPORTANT]
>  Sie sollten alle Parameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime ersetzt lediglich den Wert des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft.  
  
## <a name="method-resolution"></a>Methode Auflösung  
 Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> -Methode aufgerufen wird, wird die Datenfelder aus dem datengebundenen Steuerelement, die Parameter, die deklarativ in erstellt wurden die `InsertParameters` Element und die Parameter, die in hinzugefügt wurden die <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> -Ereignishandler werden zusammengeführt. (Weitere Informationen finden Sie im vorherigen Abschnitt.) Die <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt versucht dann, eine aufzurufende Methode zu suchen. Sucht zuerst für eine oder mehrere Methoden mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft. Wenn keine Übereinstimmung gefunden wird, eine <xref:System.InvalidOperationException> Ausnahme wird ausgelöst. Wenn eine Übereinstimmung gefunden wird, sucht er nach übereinstimmende Parameternamen. Nehmen wir beispielsweise an ein vom angegebenen Typ der <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft verfügt über zwei Methoden namens `InsertARecord`. Eine `InsertARecord` verfügt über einen Parameter `ID`, und die andere `InsertARecord` verfügt über zwei Parameter `Name` und `Number`. Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung hat nur einen Parameter mit dem Namen `ID`, die `InsertARecord` -Methode mit nur den `ID` Parameter aufgerufen wird. Der Typ des Parameters wird beim Auflösen der Methoden nicht überprüft. Die Reihenfolge der Parameter spielt keine Rolle.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft festgelegt ist, wird die Methode auf eine andere Weise aufgelöst. Die <xref:System.Web.UI.WebControls.ObjectDataSource> sucht nach einer Methode mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> -Eigenschaft, die einen Parameter des Typs, akzeptiert wird angegeben, der <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. In diesem Fall spielt der Namen des Parameters keine Rolle.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zum Einfügen von Daten. Das zweite Codebeispiel enthält ein Beispiel für das Geschäftsobjekt mit mittlerer Ebene, das im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zum Einfügen von Daten. Zu Beginn der <xref:System.Web.UI.WebControls.DetailsView> zeigt ein neues `NorthwindEmployee` aufzuzeichnen, zusammen mit einer automatisch generierten **einfügen** Schaltfläche. Nach dem Eingeben von Daten in die Felder von der <xref:System.Web.UI.WebControls.DetailsView> steuern, und klicken Sie auf die **einfügen** Schaltfläche. Die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft gibt die Methode den Einfügevorgang ausführt.  
  
 In diesem Beispiel wird die `UpdateEmployeeInfo` Methode wird verwendet, um eine Einfügung ausführen; es benötigt jedoch ein `NorthwindEmployee` Parameter zum Einfügen der Daten. Aus diesem Grund die Auflistung von Zeichenfolgen, die die <xref:System.Web.UI.WebControls.DetailsView> Steuerelement übergibt automatisch reicht nicht aus. Die `NorthwindEmployeeInserting` Delegat ist ein <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> -Objekt, das verarbeitet die <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Ereignis und ermöglicht es Ihnen, die Eingabeparameter vor dem Bearbeiten der <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang wird fortgesetzt. Da die `UpdateEmployeeInfo` Methode erfordert eine `NorthwindEmployee` -Objekt als Parameter verwendet, eine wird unter Verwendung der Auflistung von Zeichenfolgen erstellt und hinzugefügt wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> Auflistung mit einem Parameternamen (`ne`), die die Methode erwartet. Sie können die obigen Schritte ausführen, bei Verwendung von einem vorhandenen Objekt der mittleren Ebene als eine Datenquelle mit Typen und Methoden, die keine für die Verwendung mit der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang wird ausgeführt, die Methode für die identifizierte die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft wird aufgerufen. Wenn die `Insert` -Methode des Objekts wurde die Signatur einer Methode, die Parameter, enthält die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung muss einen Parameter mit Namen, die die Methodenparameter für die Signatur für entsprechen enthalten die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Methode erfolgreich abgeschlossen.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 Das folgende Codebeispiel enthält ein Beispiel für ein Geschäftsobjekt mit mittlerer Ebene, die im vorherigen Codebeispiel verwendet. Das Codebeispiel besteht aus zwei einfachen Klassen:  
  
-   Die `EmployeeLogic` -Klasse, die eine zustandslose Klasse ist, die Geschäftslogik kapselt.  
  
-   Die `NorthwindEmployee` Klasse, die eine Modellklasse, die nur die grundlegende Funktionen enthält, die zum Laden und Beibehalten von Daten aus der Datenebene erforderlich ist.  
  
 Ein zusätzliches `NorthwindDataException` Klasse wird als Annehmlichkeit bereitgestellt. Ein vollständiges Beispiel arbeiten müssen Sie kompilieren und verwenden Sie diese Klassen. Die `UpdateEmployeeInfo` Methode ist nicht vollständig implementiert, sodass keine Daten in der Datenbank Northwind Traders eingefügt werden, wenn Sie mit diesem Beispiel experimentieren.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung ab, die die von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />-Eigenschaft verwendeten Parameter enthält.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" />, die die Parameter enthält, die von der durch die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />-Eigenschaft angegebenen Methode verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Namen und Typen der Parameter, die in enthaltenen der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung übereinstimmen, die Namen und Typen der Parameter, die in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaftensignatur. Die Parameternamen wird die Groß-/Kleinschreibung beachtet. Bei der Arbeit mit datengebundenen Steuerelemente, die Parameter, wie z. B. Angeben der <xref:System.Web.UI.WebControls.GridView> und <xref:System.Web.UI.WebControls.DetailsView> -Steuerelemente, die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement führt automatisch alle Parameter, die explizit in der Auflistung mit den Parametern angegeben werden, die zusammen durch das datengebundene Steuerelement bereitgestellt. Dies ist wichtig, da von datengebundenen Steuerelementen immer ihre Parameter als geben <xref:System.String> Datentypen, und wenn die Methodensignatur numerische enthält oder Date-Datentypen Sie explizit müssen enthalten einen Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> -Auflistung mit den richtigen Typ. Andernfalls die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement versucht, die Parameter entsprechend dem Typ umzuwandeln, die von den Parametern in der Auflistung definiert ist. Weitere Informationen finden Sie unter [Verwenden von Parametern mit dem ObjectDataSource-Steuerelement](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> -Eigenschaft, die enthalten ist die <xref:System.Web.UI.WebControls.ObjectDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit dem Business-Objekt und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zum Einfügen von Daten. Das zweite Codebeispiel stellt eine beispielimplementierung der `Insert` -Methode, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement zum Einfügen von Daten. Zu Beginn der <xref:System.Web.UI.WebControls.DetailsView> Textfeldern in dem Sie Daten für einen neuen eingeben können `NorthwindEmployee` aufzuzeichnen, zusammen mit einer automatisch generierten **einfügen** Schaltfläche. Nach dem Eingeben von Daten in die Felder von der <xref:System.Web.UI.WebControls.DetailsView> steuern, und klicken Sie auf die **einfügen** Schaltfläche. Die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft gibt die Methode den Einfügevorgang ausführt.  
  
 Wenn Sie auf die **einfügen** Schaltfläche, den Vorgang erfolgt mithilfe der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> -Eigenschaft und die im angegebenen Parameter der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung. In diesem Codebeispiel wird ein Parameter angegeben, der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> -Auflistung, die der Supervisor-ID entspricht. Ist, obwohl die ID angezeigt, in der <xref:System.Web.UI.WebControls.GridView.Rows%2A> Auflistung für die <xref:System.Web.UI.WebControls.DetailsView> steuern, wie eine <xref:System.Web.UI.WebControls.BoundField> übergeben, es wird als Zeichenfolge an die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Indem sie explizit hinzufügen der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung mit einer <xref:System.Web.UI.WebControls.Parameter.Type%2A> -Eigenschaftensatz auf der <xref:System.TypeCode.Int32> Wert, es wird übergeben werden ordnungsgemäß durch die <xref:System.Web.UI.WebControls.ObjectDataSource> an die Methode als ein <xref:System.Int32>und nicht als eine Zeichenfolge.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Vorgang wird ausgeführt, die Methode für die identifizierte die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft wird aufgerufen. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> -Methode des Objekts wurde die Signatur einer Methode, die Parameter, enthält die <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Auflistung muss enthalten Parameter, deren Namen, die die Methodenparameter für die Signatur für entsprechen den <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> Methode erfolgreich abgeschlossen.  
  
> [!IMPORTANT]
>  Sie sollten alle Parameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime ersetzt lediglich den Wert des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Eigenschaft.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 Das folgende Codebeispiel stellt eine beispielimplementierung der `Insert` -Methode, die im vorherigen Codebeispiel verwendet. Die `InsertNewEmployeeWrapper` -Methode hinzugefügt wird die `EmployeeLogic` Middle-Tier-Objekt, das bereitgestellt wird die <xref:System.Web.UI.WebControls.ObjectDataSource> Übersicht über die Klasse so aktivieren Sie das Objekt, das einfacher verwendet werden die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement-Szenarien, ohne eine erhebliche Neufassung mit dem tatsächlichen Geschäftslogik.  
  
 Zum Ausführen des Beispiels benötigen Sie die `NorthwindEmployee` -Klasse, die bereitgestellt wird die <xref:System.Web.UI.WebControls.ObjectDataSource> -Klassenübersicht. In diesem Beispiel wird veranschaulicht, wie nur Verbinden der <xref:System.Web.UI.WebControls.ObjectDataSource> an eine Methode der Business-Objekt, das Daten für einen neuen Datenbankdatensatz abruft, indem Sie Parameter. Im Beispiel wird Datensätze nicht mit der Datenbank hinzugefügt werden, da die `Save` Methode der `NorthwindEmployee` Klasse enthält keinen Code aus, um die Datenbank zu aktualisieren.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="objectDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein Objekt, das die gespeicherten Ansichtszustandswerte für das Steuerelement enthält.</param>
        <summary>Lädt den zuvor gespeicherten Ansichtszustand des <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode dient in erster Linie durch die .NET Framework-Infrastruktur und sollte nicht direkt aus Ihrem Code verwendet werden. Allerdings können Entwickler von Steuerelementen überschreiben Sie diese Methode, um anzugeben, wie ein benutzerdefiniertes Serversteuerelement seinen Ansichtszustand wiederherstellt. Weitere Informationen finden Sie unter [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A> Methode wird verwendet, um den zuvor gespeicherten Ansichtszustand des laden die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" /> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, wenn die Erweiterung der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> Steuerelement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRowsParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Datenabruf-Methodenparameters für Geschäftsobjekte ab, mit dem die Anzahl der Datensätze angegeben wird, die für die Unterstützung des Datenquellen-Paging abgerufen werden, oder legt diesen fest.</summary>
        <value>Der Name des <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Parameters, mit dem die Anzahl der abzurufenden Datensätze angegeben wird. Die Standardeinstellung ist <c>"MaximumRows"</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaft dient zur Unterstützung von Paging von Datenquellen. Informationen über die Unterstützung von Paging durch die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen den Benutzer auswählen, wie viele Datensätze auf der Seite angezeigt werden können.  
  
 Die Webseite enthält ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, dessen <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> -Eigenschaftensatz auf `true`. Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft wird festgelegt, auf den Namen einer Methode, die die Gesamtanzahl von Datensätzen in der Abfrage zurückgibt. Die <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaftensatz den Namen der Parameter, die in der Select-Methode verwendet werden. Die Seite enthält außerdem eine <xref:System.Web.UI.WebControls.DropDownList> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Das zweite Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> -Ereignis für die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Der Code in den Handler der <xref:System.Web.UI.WebControls.GridView.PageSize%2A> Eigenschaft, um die Auswahl des Benutzers.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Data Access-Klasse, die Daten aus der Customers-Tabelle abruft. Es enthält eine Methode mit dem Namen `GetSubsetOfEmployees`, zugewiesen an die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Das Beispiel enthält auch eine Methode namens `GetEmployeeCount`, zugewiesen die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Die Klasse verwendet LINQ zum Abfragen der Customers-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Customers" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, nachdem das von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />-Eigenschaft angegebene Objekt erstellt wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> Ereignis, um andere Methoden für das Geschäftsobjekt aufzurufen, Eigenschaften festlegen oder andere Initialisierung ausführen, die für das Geschäftsobjekt vor spezifisch ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt ruft die Datenmethode Objekt um einen Datenvorgang auszuführen . Ein Verweis auf das Objekt erfolgt durch die <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> -Eigenschaft, die von verfügbar gemacht wird die <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> Objekt.  
  
 Wenn die Methode, die zum Ausführen von Datenvorgängen `static` (`Shared` in Visual Basic), die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> nie Ereignisse ausgelöst werden.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, bevor das von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />-Eigenschaft angegebene Objekt erstellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Methode, die zum Ausführen von Datenvorgängen `static` (`Shared` in Visual Basic), die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> nie Ereignisse ausgelöst werden.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement ruft automatisch den Standardkonstruktor eines Geschäftsobjekts zum Erstellen einer Instanz des Zertifikats über Reflektion ermöglicht. Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignis, um explizit einen anderen Konstruktor, und legen die Instanz des Objekts, das so die Ergebnisse der <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> Eigenschaft der zugeordneten <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> Objekt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.GridView> -Steuerelement zum Anzeigen von Informationen. Das zweite Codebeispiel stellt der mittleren Ebene Geschäftsobjekt, das im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.GridView> -Steuerelement zum Anzeigen von Informationen. Sie möglicherweise mit einem Geschäftsobjekt arbeiten, die ist sehr teuer (als Zeit oder Ressourcen) für jeden Datenvorgang zu erstellen, die Ihre Webseite ausführt. Eine Möglichkeit zum Arbeiten mit ein teures Objekt möglicherweise eine Instanz einmal erstellen und es dann für nachfolgende Operationen anstatt zu erstellen und zerstören für jeden Datenvorgang zwischengespeichert.  
  
> [!NOTE]
>  In einer produktionsanwendung möglicherweise mehrere Anforderungen gleichzeitig mithilfe der gleichen Instanz enden. Aus diesem Grund muss das Objekt auf threadsichere Weise implementiert werden.  
  
 Dieses Codebeispiel zeigt dieses Muster. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignis prüfen Sie zunächst den Cache für ein Objekt, und nur eine Instanz des Objekts, zu erstellen, ist noch nicht zwischengespeichert wird. Behandeln Sie dann die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis für die zukünftige Verwendung, statt zu zerstören sie das Geschäftsobjekt zwischengespeichert. In diesem Codebeispiel die <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> -Objekts festgelegt wird, um `true` zur Weiterleitung der <xref:System.Web.UI.WebControls.ObjectDataSource> nicht aufrufen <xref:System.IDisposable.Dispose%2A> Methode für das Objekt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird der mittleren Ebene Beispielgeschäftsobjekt bereitgestellt, das im vorherigen Codebeispiel verwendet. Im Codebeispiel besteht aus einer grundlegenden Geschäftsobjekts sein, definiert durch die `EmployeeLogic` Klasse, die eine zustandsbehaftete, die Geschäftslogik kapselt. Ein vollständiges Beispiel arbeiten müssen Sie diesen Code als Bibliothek kompiliert und verwenden Sie diese Klassen aus einer ASP.NET-Seite (ASPX-Datei).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberSignature Language="F#" Value="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " Usage="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, bevor das von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />-Eigenschaft angegebene Objekt verworfen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis wird immer ausgelöst werden, bevor die Instanz des Geschäftsobjekts verworfen wird. Wenn das Geschäftsobjekt implementiert die <xref:System.IDisposable> -Schnittstelle, die <xref:System.IDisposable.Dispose%2A> Methode wird aufgerufen, nachdem dieses Ereignis ausgelöst wird.  
  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis, um andere Methoden für das Objekt aufrufen, Eigenschaften festlegen oder leeren von Volltextkatalogen, die speziell für das Objekt ist, bevor das Objekt zerstört wird ausgeführt. Ein Verweis auf das Objekt erfolgt durch die <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> -Eigenschaft, die von verfügbar gemacht wird die <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> Objekt.  
  
 Bei Verwendung einer <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit einer LINQ to SQL-Klasse, müssen Sie Abbrechen, das Freigeben der Datenkontextklasse in einem Ereignishandler für das <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis. Dieser Schritt ist erforderlich, da LINQ to SQL die verzögerten Ausführung unterstützt während der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement versucht, den Datenkontext nach dem Select-Vorgang zu verwerfen.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.GridView> -Steuerelement zum Anzeigen von Informationen. Das zweite Codebeispiel stellt der mittleren Ebene Geschäftsobjekt, das im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement mit einem Geschäftsobjekt und einem <xref:System.Web.UI.WebControls.GridView> -Steuerelement zum Anzeigen von Informationen. Sie möglicherweise mit einem Geschäftsobjekt arbeiten, die ist sehr teuer (als Zeit oder Ressourcen) für jeden Datenvorgang zu erstellen, die Ihre Webseite ausführt. Eine Möglichkeit zum Arbeiten mit ein teures Objekt möglicherweise eine Instanz einmal erstellen und es dann für nachfolgende Operationen anstatt zu erstellen und zerstören für jeden Datenvorgang zwischengespeichert. Dieses Beispiel zeigt dieses Muster. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignis prüfen Sie zunächst den Cache für ein Objekt, und nur eine Instanz davon erstellen, ist noch nicht zwischengespeichert wird. Behandeln Sie dann die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis für die zukünftige Verwendung, statt zu zerstören sie das Geschäftsobjekt zwischengespeichert. In diesem Codebeispiel die <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> -Objekts festgelegt wird, um `true` zur Weiterleitung der <xref:System.Web.UI.WebControls.ObjectDataSource> nicht aufrufen, die <xref:System.IDisposable.Dispose%2A> Methode für das Objekt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird der mittleren Ebene Beispielgeschäftsobjekt bereitgestellt, das im vorherigen Codebeispiel verwendet. Im Codebeispiel besteht aus einer grundlegenden Geschäftsobjekts sein, definiert durch die `EmployeeLogic` Klasse, die eine zustandsbehaftete, die Geschäftslogik kapselt. Ein vollständiges Beispiel arbeiten müssen Sie diesen Code als Bibliothek kompiliert und verwenden Sie diese Klassen aus einer ASP.NET-Seite (ASPX-Datei).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 Das folgende Beispiel zeigt, wie behandelt die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis bei Verwendung einer <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit einer LINQ to SQL-Klasse.  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Formatzeichenfolge ab, die auf die Namen der Parameter für ursprüngliche Werte angewendet wird, die an die <see langword="Delete" />-Methode oder an die <see langword="Update" />-Methode übergeben werden, oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die eine Formatzeichenfolge darstellt, die auf die Namen beliebiger, an die <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />-Methode oder die <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />-Methode übergebener <paramref name="oldValues" />-Parameter oder Schlüsselparameter angewendet werden. Die Standardeinstellung ist <c>"{0}"</c>, was bedeutet, dass der Name des Parameters ist der Name des Felds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Wert des der <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> -Eigenschaft ist auf nur Primärschlüssel angewendet, z. B. solche, die mit identifiziert werden die `DataKeyNames` Eigenschaft eines datengebundenen Steuerelements, oder löschen und aktualisieren Sie die Szenarien, in dem die <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> Wert und den Satz von ursprünglichen Werten werden an die entsprechenden Datenmethode übergeben.  
  
 Im folgenden sind zwei gängige Szenarien, in dem Sie ändern, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> Eigenschaft:  
  
-   Möglicherweise möchten die Eigenschaft zur Unterscheidung zwischen den alten und neuen Werte in Updates zu ändern. Wenn die <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> -Eigenschaftensatz auf die <xref:System.Web.UI.ConflictOptions.CompareAllValues> -Wertparameter, für die ursprünglichen und die neuen Werte hinzugefügt werden die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung. Ohne die Formatierungszeichenfolge würde zwei Parameter mit dem gleichen Namen für jedes Datenfeld erstellt werden. Ändern Sie den Namen des ursprünglichen Wertparameters, können Sie die Daten an die ursprüngliche Datenquelle Konflikte erkennen und Vergleichen von Schlüsselwerten vergleichen.  
  
-   Einige visuelle Designer Implementieren einer bestimmten Benennungsschema für den ursprünglichen Werten und Schlüsseln.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="objectDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das Ereignisdaten enthält.</param>
        <summary>Fügt der Seite mit dem <see cref="E:System.Web.UI.Page.LoadComplete" />-Steuerelement einen <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Ereignishandler hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 Mit der <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben der <see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" /> Methode in einer abgeleiteten Klasse aufrufen werden die <see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" /> Methode für die Basisklasse, damit Delegaten registrierte das Ereignis empfangen.</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberSignature Language="F#" Value="member this.ParsingCulture : System.Web.UI.WebControls.ParsingCulture with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, welche Kulturinformationen verwendet werden, wenn Zeichenfolgenwerte in tatsächliche Eigenschaftentypen konvertiert werden, um ein Objekt des Typs zu erstellen, der von <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" /> angegeben wird.</summary>
        <value>Die Kulturinformationen. Der Standardwert ist <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="objectDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert den Zustand des <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelements.</summary>
        <returns>Gibt den aktuellen Ansichtszustand des Serversteuerelements zurück, andernfalls wird <see langword="null" /> zurückgegeben, wenn dem Steuerelement kein Ansichtszustand zugeordnet ist.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Collections.IEnumerable" Usage="objectDataSource.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft Daten aus dem zugrunde liegenden Datenspeicher ab, indem die von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft angegebene Methode mit den Parametern in der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />-Auflistung aufgerufen wird.</summary>
        <returns>Eine <see cref="T:System.Collections.IEnumerable" />-Liste mit Datenzeilen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die angegebene Methode kann eine beliebige Methodensignatur besitzen, jedoch muss zurückgeben oder von einer der in der folgenden Tabelle aufgeführten Typen abgeleitet werden die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement erfolgreich aufgerufen werden.  
  
|Rückgabetyp|Aktion|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|Die <xref:System.Collections.IEnumerable> wird zurückgegeben, durch die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Data.DataTable>|Ein <xref:System.Data.DataView> wird erstellt, indem Sie mit der <xref:System.Data.DataTable> und zurückgegeben, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Data.DataView>|Die <xref:System.Data.DataView> wird zurückgegeben, durch die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Data.DataSet>|Die erste <xref:System.Data.DataTable> von der <xref:System.Data.DataSet> extrahiert und ein <xref:System.Data.DataView> wird erstellt und zurückgegeben, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Object>|Das Objekt wird in einem Element umschlossen <xref:System.Collections.IEnumerable> Auflistung und zurückgegeben, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
  
 Die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft kann eine Instanzmethode sein oder ein `static` (`Shared` in Visual Basic) Methode. Wenn es sich um eine Instanzmethode handelt, wird das Geschäftsobjekt wird erstellt und zerstört jedes Mal die Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft aufgerufen wird, mit dem Unterschied, dass dieselbe Instanz verwendet wird, zum Aufrufen der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft und die durch angegebene Methode der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode gibt ein <xref:System.Collections.IEnumerable> Schnittstelle. Allerdings um Zwischenspeichern und Filtern von Szenarien zu aktivieren, der Rückgabewert muss ein <xref:System.Data.DataSet> Objekt. Während der <xref:System.Data.DataSet> Klasse nicht implementiert die <xref:System.Collections.IEnumerable> -Schnittstelle, die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement extrahiert automatisch den Standardwert <xref:System.Data.DataView> zu steuern, welche implementiert die <xref:System.Collections.IEnumerable>.  
  
 Vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Vorgang wird ausgeführt, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignis. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignis, um die Werte der Parameter zu untersuchen und alle vorverarbeitung vor dem Ausführen einer <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Vorgang. Beim Ausführen eines Vorgangs Daten abrufen, die <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt Reflektion zum Erstellen einer Instanz des Objekts, das durch gekennzeichnet ist, die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft. Er ruft dann die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft unter Verwendung aller zugeordneten <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Eigenschaften. Nach der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Vorgang abgeschlossen wurde, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Ereignis. Sie können behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Ereignis, um alle Werte zurückgeben, Ausgabeparameter und Ausnahmen zu untersuchen und nach der Verarbeitung ausführen.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft gibt eine <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, oder <xref:System.Data.DataView> Objekt und das Zwischenspeichern aktiviert ist, die <xref:System.Web.UI.WebControls.ObjectDataSource> Daten abruft und speichert Daten im Cache während der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Vorgang. Der Cache wird erstellt, verworfen oder aktualisiert basierend auf das Verhalten beim Zwischenspeichern, die durch die Kombination von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> und <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Eigenschaften.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft gibt eine <xref:System.Data.DataSet> oder <xref:System.Data.DataTable> -Objekt, und ein <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Eigenschaft angegeben wurde, wird er mit allen bereitgestellten ausgewertet <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Eigenschaften und der resultierende Filter wird angewendet, um die Liste der Daten während der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Vorgang.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> Methode der <xref:System.Web.UI.WebControls.ObjectDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.  
  
## <a name="data-bound-controls"></a>Datengebundene Steuerelemente  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit einem datengebundenen Steuerelement verknüpft ist, z. B. die <xref:System.Web.UI.WebControls.GridView> -Steuerelement, es ist nicht notwendig, die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode Seitencode. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode wird stattdessen direkt vom datengebundenen Steuerelement aufgerufen.  
  
   
  
## Examples  
 Ein Codebeispiel finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCountMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode oder der Funktion auf, die vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement zum Abrufen der Zeilenanzahl aufgerufen wird, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Namen der Methode oder der Funktion darstellt, mit deren Hilfe die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> die Zeilenanzahl abruft. Die Methode muss eine ganze Zahl (<see cref="T:System.Int32" />) zurückgeben. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft identifiziert eine Business-Objektmethoden, der zum Abrufen einer Gesamtzeilenanzahl zur Unterstützung von Paging von Datenquellen verwendet wird. Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> -Eigenschaft nur ausgewertet, wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> -Eigenschaftensatz auf `true`.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Informationen über die Unterstützung von Paging durch die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen den Benutzer auswählen, wie viele Datensätze auf der Seite angezeigt werden können.  
  
 Die Webseite enthält ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, dessen <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> -Eigenschaftensatz auf `true`. Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft wird festgelegt, auf den Namen einer Methode, die die Gesamtanzahl von Datensätzen in der Abfrage zurückgibt. Die <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaftensatz den Namen der Parameter, die in der Select-Methode verwendet werden. Die Seite enthält außerdem eine <xref:System.Web.UI.WebControls.DropDownList> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Das zweite Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> -Ereignis für die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Der Code in den Handler der <xref:System.Web.UI.WebControls.GridView.PageSize%2A> Eigenschaft, um die Auswahl des Benutzers.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Data Access-Klasse, die Daten aus der Customers-Tabelle abruft. Es enthält eine Methode mit dem Namen `GetSubsetOfEmployees`, zugewiesen an die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Das Beispiel enthält auch eine Methode namens `GetEmployeeCount`, zugewiesen die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Die Klasse verwendet LINQ zum Abfragen der Customers-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Customers" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />-Vorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Ereignis, um die Werte der Rückgabewert oder Ausgabeparameter zu untersuchen oder um zu bestimmen, ob eine Ausnahme ausgelöst wurde, nachdem ein <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Vorgang abgeschlossen wurde. Der Rückgabewert Output-Parameter und Eigenschaften für die Ausnahmebehandlung stehen aus der <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen Benutzer abrufen und Aktualisieren von Datensätzen in der Employees-Tabelle in der Northwind-Datenbank.  
  
 Das erste Beispiel zeigt eine Webseite, die zwei <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelemente, einen <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die erste <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement abrufen und Anzeigen der Namen der Mitarbeiter aus der Datenbank verwendet werden. Die zweite <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement dienen zum Abrufen, anzeigen und ändern Sie die Daten aus dem Mitarbeiterdatensatz, der vom Benutzer ausgewählt wurde.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 Im zweiten Beispiel wird der Handler für das <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> und <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignisse. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Ereignishandler serialisiert das Objekt, das Daten enthält, die aus der Employee-Tabelle abgerufen wurde. Das serialisierte Objekt wird im Ansichtszustand gespeichert. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignishandler deserialisiert das Objekt im Ansichtszustand, der die ursprünglichen Daten für den Datensatz enthält, die aktualisiert wird. Das Objekt, das die ursprünglichen Daten enthält, wird als Parameter an die Update-Methode übergeben. Die ursprünglichen Daten müssen mit der Datenbank übergeben werden, damit es verwendet werden kann, um zu überprüfen, ob die Daten von einem anderen Prozess geändert wurde.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Access-Klasse, die mit der Northwind-Datenbank interagiert. Die Klasse verwendet LINQ Abfragen und Aktualisieren der Employees-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Employees" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />-Vorgang auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignis, um zusätzliche Initialisierung auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement führt den Vorgang zum Abrufen von Daten. Die Parameter sind verfügbar, als ein <xref:System.Collections.IDictionary> -Auflistung, die durch zugegriffen wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> -Eigenschaft, die von verfügbar gemacht wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> Objekt.  
  
 Dieses Ereignis kann für einen einzelnen Aufruf zweimal ausgelöst werden, die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode, wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> festgelegt wird. Die <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> Objekt wird verwendet, um zu bestimmen, ob Select zum Abrufen von Daten oder zum Abrufen der Anzahl aufgerufen wurde.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode oder der Funktion auf, die vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement zum Abrufen von Daten aufgerufen wird, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Namen der Methode oder der Funktion darstellt, mit deren Hilfe die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> Daten abruft. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die angegebene Methode kann eine beliebige Methodensignatur besitzen, aber sie muss einen der Typen in der folgenden Tabelle gezeigt Zurückgeben der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement erfolgreich aufgerufen werden.  
  
|Rückgabetyp|Aktion|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|Die <xref:System.Collections.IEnumerable> wird zurückgegeben, durch die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Data.DataTable>|Ein <xref:System.Data.DataView> erstellt, wobei die <xref:System.Data.DataTable> und zurückgegeben, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Data.DataView>|Ein <xref:System.Data.DataView> wird zurückgegeben, durch die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Data.DataSet>|Die erste <xref:System.Data.DataTable> von der <xref:System.Data.DataSet> extrahiert, und ein <xref:System.Data.DataView> wird erstellt und zurückgegeben, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
|<xref:System.Object>|Das Objekt wird in einem Element umschlossen <xref:System.Collections.IEnumerable> Auflistung und zurückgegeben, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode.|  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Bei Verwendung der <xref:System.Web.UI.WebControls.ObjectDataSource> Klasse zu löschen oder Aktualisieren von Daten, stellen Sie sicher, dass die Parameternamen für konfiguriert die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, der <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Auflistung oder <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung übereinstimmen, die Spaltennamen, die von der select-Methode zurückgegeben werden .  
  
## <a name="object-lifetime"></a>Lebensdauer eines Objekts  
 Die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft kann eine Instanzmethode sein oder ein `static` (`Shared` in Visual Basic) Methode. Wenn es sich um eine Instanzmethode handelt, wird das Geschäftsobjekt wird erstellt und zerstört jedes Mal die Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft wird aufgerufen. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignisse zum Arbeiten mit das Geschäftsobjekt vor der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft wird aufgerufen. Sie können auch behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis, das nach der Methode ausgelöst, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft wird aufgerufen. Wenn das Geschäftsobjekt implementiert die <xref:System.IDisposable> -Schnittstelle, die <xref:System.IDisposable.Dispose%2A> Methode wird aufgerufen, bevor das Objekt zerstört wird. Wenn die Methode `static` (`Shared` in Visual Basic), wird das Geschäftsobjekt nie erstellt, und Sie nicht behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignisse.  
  
## <a name="parameter-merging"></a>Zusammenführen von Parametern  
 Parameter hinzugefügt werden, um die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung aus diesen Quellen:  
  
-   Deklarativ aus dem `SelectParameters` Element.  
  
-   Programmgesteuert über die `Selecting` Methode.  
  
 Zuerst die Parameter aufgeführt, der `SelectParameters` Element hinzugefügt werden. Zweitens Parameter programmgesteuert hinzugefügt und entfernt die <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> -Ereignis, das vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode ausgeführt wird. Die Methode wird aufgelöst, nachdem die Parameter zusammengeführt werden. Methode Auflösung wird im nächsten Abschnitt erläutert.  
  
> [!IMPORTANT]
>  Sie sollten alle Parameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime ersetzt lediglich den Wert des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft.  
  
## <a name="method-resolution"></a>Methode Auflösung  
 Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode aufgerufen wird, wird die Datenfelder aus dem datengebundenen Steuerelement, die Parameter, die deklarativ in erstellt wurden die `SelectParameters` Element und die Parameter, die in hinzugefügt wurden die <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> -Ereignishandler werden zusammengeführt. (Weitere Informationen finden Sie im vorherigen Abschnitt.) Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement versucht dann, eine aufzurufende Methode zu suchen. Sucht zuerst für eine oder mehrere Methoden mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Wenn keine Übereinstimmung gefunden wird, eine <xref:System.InvalidOperationException> Ausnahme wird ausgelöst. Wenn eine Übereinstimmung gefunden wird, sucht er nach übereinstimmende Parameternamen. Nehmen wir beispielsweise an ein vom angegebenen Typ der <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft verfügt über zwei Methoden namens `SelectARecord`. Eine `SelectARecord` verfügt über einen Parameter `ID`, und die andere `SelectARecord` verfügt über zwei Parameter `Name` und `Number`. Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung hat nur einen Parameter mit dem Namen `ID`, die `SelectARecord` -Methode mit nur den `ID` Parameter aufgerufen wird. Der Typ des Parameters wird beim Auflösen der Methoden nicht überprüft. Die Reihenfolge der Parameter spielt keine Rolle.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft festgelegt ist, wird die Methode auf eine andere Weise aufgelöst. Die <xref:System.Web.UI.WebControls.ObjectDataSource> sucht nach einer Methode mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft, die einen Parameter des Typs, akzeptiert wird angegeben, der <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. In diesem Fall spielt der Namen des Parameters keine Rolle.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.GridView> Steuerelement anzeigen kann, Daten mithilfe einer <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement auf einer Web Forms-Seite. Die <xref:System.Web.UI.WebControls.ObjectDataSource> identifiziert einen teilweise oder vollständig qualifizierter Klassenname mit seiner <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft und eine Methode, die aufgerufen wird, zum Abrufen von Daten mit seiner <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Zur Laufzeit das Objekt erstellt wird, und die Methode aufgerufen wird, über Reflektion ermöglicht. Die <xref:System.Web.UI.WebControls.GridView> -Steuerelement durchläuft die <xref:System.Collections.IEnumerable> -Auflistung, die von der Methode zurückgegeben wird, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft und die Daten angezeigt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung mit den Parametern ab, die von der mit der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft angegebenen Methode verwendet werden.</summary>
        <value>Eine Auflistung mit den Parametern, die von der mit der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Eigenschaft angegebenen Methode verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Sie Parameter zum Hinzufügen der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung deklarativ mithilfe der `SelectParameters` Element oder programmgesteuert im Handler für die <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignis. Zur Laufzeit Parameter aufgeführt, der `SelectParameters` Element zuerst auf die Auflistung hinzugefügt werden. Klicken Sie dann die Parameter in der Auflistung hinzugefügt oder entfernt werden durch den Handler für das <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignis. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignis wird ausgelöst, bevor die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode ausgeführt wird.  
  
 Vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode ausgeführt wird, die Namen und Typen der Parameter, die in enthaltenen der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung übereinstimmen die Signatur der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Angenommen, eine select-Methode mit dem Namen `GetEmployeesByStateAndAge` nimmt eine `string` und eine ganze Zahl als Parameter, die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Auflistung muss zwei Parameter enthalten. Der erste Parameter muss in eine Zeichenfolge aufgelöst werden, und der zweite Parameter muss in eine ganze Zahl aufgelöst werden. Beide Parameter angegeben werden können, im Markup in der `SelectParameters` Element. Sie können alternativ sein können hinzugefügt werden, der <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignishandler oder einen Parameter im Markup hinzugefügt werden, und der andere Controller programmgesteuert hinzugefügt werden.  
  
 Weitere Informationen finden Sie unter [Verwenden von Parametern mit dem ObjectDataSource-Steuerelement](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4) und <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> Eigenschaft.  
  
> [!IMPORTANT]
>  Im Code für die <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Ereignishandler oder in der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft, stellen Sie sicher, dass Sie jeden Parameterwert überprüfen, die vom Client empfangen wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Datensatz mit Abrufen einer <xref:System.Web.UI.WebControls.ObjectDataSource> steuern und zeigen Sie es in ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement ruft einen bestimmten Mitarbeiterdatensatz ab, durch Aufrufen der `GetEmployee` Methode der `EmployeeLogic` Klasse. Die `GetEmployee` Methode erfordert einen Mitarbeiter-ID-Parameter. Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement verwendet eine `QueryStringParameter` Element im Markup zum Erstellen einer <xref:System.Web.UI.WebControls.QueryStringParameter> -Objekt, das den Wert der angegebenen Abfragezeichenfolge-Parameter von der URL abgerufen wird, und übergeben Sie sie an der `GetEmployee` Methode.  
  
 Andere Parameterklassen können verwendet werden, um Werte aus anderen Quellen, z. B. Steuerelementeigenschaften, Formularfelder, Cookies, ASP.NET-Profildaten oder Sitzungszustand abzurufen. Sie können auch ein Parameterobjekt verwenden, die im Markup definiert ist, um einen hartcodierten Wert an die select-Methode übergeben. Weitere Informationen über Parameter-Klassen, die verfügbar sind, finden Sie unter [Verwenden von Parametern mit Steuerelementen für Datenquellen für das Filtern](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f).  
  
 Um dieses Beispiel auszuführen, benötigen Sie Folgendes:  
  
-   Eine Website, eine Verbindungszeichenfolge mit dem Namen `NorthwindConnection` , mit der Datenbank Northwind Traders verbunden wird. Weitere Informationen finden Sie unter der <xref:System.Web.UI.WebControls.ObjectDataSource> -Klassenübersicht.  
  
-   Die `EmployeeLogic` -Klasse, die als eines der Codebeispiele für angezeigt wird die <xref:System.Web.UI.WebControls.ObjectDataSource> -Klassenübersicht. Die Klassendatei muss sich im Ordner "App_Code" befinden.  
  
-   Der Beispielcode kann als eine ASPX-Seite ausgeführt werden. Wenn Sie die Seite ohne Abfragezeichenfolgen-Parameter anfordern, wird eine Fehlermeldung angezeigt. Wenn Sie die Seite mit einer Abfragezeichenfolge wie anfordern `?empid=1` nach dem Namen der ASPX-Datei, sehen Sie die Details für den angeforderten Mitarbeiter.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Geschäftsobjekts ab, mit dem der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />-Parameter einen Sortierausdruck für die Unterstützung der Datenquellensortierung angegeben hat, oder legt diesen fest.</summary>
        <value>Der Name des Methodenparameters, mit dem der Parameter zum Sortieren der Daten angegeben wird. Der Standardwert ist eine leere Zeichenfolge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> Eigenschaft wird verwendet, um die Quelle Sortieren von Daten zu unterstützen. Wenn eine <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> Eigenschaft auf festgelegt ist die <xref:System.Web.UI.DataSourceSelectArguments> Objekt, und übergeben der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> -Methode, die <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> Wert identifiziert, der Name des Parameters der der <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Business Objektmethode entsprechend denen die Daten sortiert.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> bezieht sich auf einem datengebundenen Steuerelement, die Werte, die zu diesem Parameter übergeben werden, gefolgt von der Form von durch Trennzeichen getrennte Feldwerte `"ASC"` oder `"DESC"`. Beispielsweise den Wert für eine aufsteigende Sortierung auf `Name` wäre `"Name ASC"`.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie einen Typ implementiert, der das Sortieren unterstützt. Im zweiten Codebeispiel wird veranschaulicht, wie einen Sortierungsausdruck implementiert wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie einen Typ implementiert, der das Sortieren unterstützt. Die `SelectMethod` von der `SortingData` Klasse übernimmt einen Parameter `sortExpression`. Die Zeichenfolge, die übergeben wird `SelectMethod` dient für die <xref:System.Data.DataView.Sort%2A> Eigenschaft von der <xref:System.Data.DataView> von zurückgegebene Objekt `SelectMethod`.  
  
 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie einen Sortierungsausdruck implementiert wird. Der Code auf der Webseite erstellt eine Instanz von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> -Eigenschaftensatz auf `SortingData` und <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> -Eigenschaftensatz auf `sortExpression`. Die <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.GridView> Steuerelement festgelegt ist, um `true`. Klickt der Benutzer die **sortieren** Schaltfläche, dem Namen des Felds `Name` oder `Number`, übergeben wird, um `SelectMethod` im Parameters sortieren.  
  
 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine durch Semikolons getrennte Zeichenfolge ab, die die für die Microsoft SQL Server-Cacheabhängigkeit zu verwendenden Datenbanken und Tabellen angibt, oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die die für die SQL Server-Cacheabhängigkeit zu verwendenden Datenbanken und Tabellen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement unterstützt eine optionale Ablaufrichtlinie auf der Grundlage der <xref:System.Web.Caching.SqlCacheDependency> Objekt für den Datencache (der Dienst muss für den Datenbankserver konfiguriert werden).  
  
 SQL Server unterstützt zwei Mechanismen zur cacheinvalidierung: Abruf und Benachrichtigung. Jeder Mechanismus hat eine andere Syntax für die <xref:System.Web.Caching.SqlCacheDependency> Objekt.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> unterstützt nur den Abruf. Die <xref:System.Web.Caching.SqlCacheDependency> Zeichenfolge dient zum Erstellen einer <xref:System.Data.SqlClient.SqlDependency> -Objekt, das übergeben wird die <xref:System.Data.Common.DbCommand> Konstruktor vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Methode ausgeführt wird. Die <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> Zeichenfolge identifiziert, Datenbanken und Tabellen entsprechend dem gleichen Format, mit dem die `@ Page` Richtlinie, wobei der erste Teil der Zeichenfolge eine Verbindungszeichenfolge zu einer SQL Server-Datenbank ist, gefolgt von einem Doppelpunkt als Trennzeichen und schließlich der Name der Datenbanktabelle (z. B. `"connectionstring1:table1"`). Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> Eigenschaft hängt von mehreren Tabellen, die Zeichenfolgen- und Tabelle Paare werden durch Semikolons getrennt (z. B. `"connectionstring1:table1";connectionstring2:table2"`).  
  
 Um die Benachrichtigung zu unterstützen, müssen Sie die Cachelogik schreiben, in der Implementierung von Ihrer <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft und die Erstellung des behandeln die <xref:System.Web.Caching.SqlCacheDependency> Objekts in Ihrem Code.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie eine SQL Server-Cacheabhängigkeit erstellen und Festlegen der <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> Eigenschaft von einem <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt. Im zweiten Codebeispiel wird veranschaulicht, wie eine Wrappermethode zu implementieren, die zurückgibt eine <xref:System.Data.DataSet> Objekt so aktivieren Sie zwischenspeichern und Filtern mit einem <xref:System.Web.UI.WebControls.ObjectDataSource> Objekt.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine SQL Server-Cacheabhängigkeit erstellen und Festlegen der <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> Eigenschaft von einem <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. In diesem Beispiel wird die Datenbank alle 120 Sekunden abgerufen. Wenn die Daten in der Northwind Traders Employees-Tabelle geändert wird, die während der Zeit, alle Daten, die von zwischengespeichert werden die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern und angezeigt werden, indem Sie die <xref:System.Web.UI.WebControls.GridView> Steuerelement ist abgelaufen und ein neuer Satz von Daten bei der nächsten Anforderung für die Seite abgerufen wird.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine Wrappermethode zu implementieren, die zurückgibt eine <xref:System.Data.DataSet> Objekt so aktivieren Sie zwischenspeichern und Filtern mit einem <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. In der basisimplementierung von der `EmployeeLogic` -Klasse, die `GetAllEmployees` Methode gibt ein <xref:System.Collections.ArrayList> Objekt. Statt das Objekt vollständig zum Arbeiten mit der <xref:System.Web.UI.WebControls.ObjectDataSource> auf einer Web Forms-Seite eine Wrappermethode mit dem Namen `GetAllEmployeesAsDataSet` wird hinzugefügt, die einen Satz von zurückgibt `NorthwindEmployee` Daten als ein <xref:System.Data.DataSet>.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartRowIndexParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Parameters der Datenabrufmethode ab, mit dem der Wert des Bezeichners des ersten Datensatzes angegeben wird, der für die Unterstützung des Datenquellen-Paging abgerufen wird, oder legt diesen fest.</summary>
        <value>Der Name des Geschäftsobjekt-Methodenparameters, mit dem der erste abzurufende Datensatz angegeben wird. Der Parameter muss einen Ganzzahlwert zurückgeben. Die Standardeinstellung ist <c>"StartRowIndex"</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaft dient zur Unterstützung von Paging von Datenquellen. Informationen über die Unterstützung von Paging durch die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen den Benutzer auswählen, wie viele Datensätze auf der Seite angezeigt werden können.  
  
 Die Webseite enthält ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement, dessen <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> -Eigenschaftensatz auf `true`. Die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft wird festgelegt, auf den Namen einer Methode, die die Gesamtanzahl von Datensätzen in der Abfrage zurückgibt. Die <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Eigenschaft und die <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> Eigenschaftensatz den Namen der Parameter, die in der Select-Methode verwendet werden. Die Seite enthält außerdem eine <xref:System.Web.UI.WebControls.DropDownList> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 Das zweite Beispiel zeigt einen Handler für das <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> -Ereignis für die <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Der Code in den Handler der <xref:System.Web.UI.WebControls.GridView.PageSize%2A> Eigenschaft, um die Auswahl des Benutzers.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Data Access-Klasse, die Daten aus der Customers-Tabelle abruft. Es enthält eine Methode mit dem Namen `GetSubsetOfEmployees`, zugewiesen an die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Das Beispiel enthält auch eine Methode namens `GetEmployeeCount`, zugewiesen die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement. Die Klasse verwendet LINQ zum Abfragen der Customers-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Customers" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="objectDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verfolgt die am Ansichtszustand des <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelements vorgenommenen Änderungen und speichert diese im <see cref="T:System.Web.UI.StateBag" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A> Methode wird überschrieben, um den Ausgangspunkt beginnen nachzuverfolgen und zu speichern von Änderungen an das Steuerelement im Rahmen des Ansichtszustands für das Objekt zu markieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Objekt dargestellten Klasse ab, oder legt diesen fest.</summary>
        <value>Ein teil- oder vollqualifizierter Klassenname, der den Objekttyp angibt, der von der <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> dargestellt wird. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Erstellen einer Instanz des Objekts, die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement gebunden ist, das Steuerelement verwendet Reflektion, um das Laden des Typs, der zur Laufzeit anhand des Typnamens identifiziert wird. Daher ist der Wert von der <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft kann sein, einen teilweise qualifizierten Typ für Code, der in den Verzeichnissen ' bin "oder ' App_Code ' befindet oder einen vollqualifizierten Typnamen für Code, der im globalen Assemblycache registriert ist. Wenn Sie im globalen Assemblycache verwenden, müssen Sie den entsprechenden Verweis hinzufügen der `assemblies` Abschnitt der Datei "Machine.config" oder "Web.config".  
  
 Der Typ muss über einen Standardkonstruktor verfügen, es sei denn, Sie behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignis eine Instanz selbst erstellen. Eine Instanz des Typs wird bei jedem Aufruf erstellt die <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, und <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Methoden, wenn die Methoden für den Typ Membermethoden sind. Eine Instanz wird nicht erstellt werden, wenn die Methoden sind `static` (`Shared` in Visual Basic). Wenn der Typ implementiert die <xref:System.IDisposable> -Schnittstelle, die <xref:System.IDisposable.Dispose%2A> Methode wird aufgerufen, bevor das Objekt zerstört wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.GridView> Steuerelement kann Daten anzeigen, indem Sie mithilfe einer <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement auf einer Web Forms-Seite. Die <xref:System.Web.UI.WebControls.ObjectDataSource> identifiziert einen teilweise oder vollständig qualifizierter Klassenname mit seiner <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft und eine Methode, die aufgerufen wird, zum Abrufen von Daten mit seiner <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Eigenschaft. Zur Laufzeit das Objekt erstellt wird, und die Methode aufgerufen wird, über Reflektion ermöglicht. Die <xref:System.Web.UI.WebControls.GridView> -Steuerelement durchläuft die <xref:System.Collections.IEnumerable> -Auflistung, die von zurückgegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> -Eigenschaft und die Daten angezeigt.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 Das folgende Beispiel zeigt der Klasse, die die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaftswert bezieht sich auf.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="objectDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Aktualisierungsvorgang durch Aufrufen der von der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />-Eigenschaft angegebenen Methode mit sämtlichen Parametern in der <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />-Auflistung aus.</summary>
        <returns>Ein Wert, der die Anzahl der im zugrunde liegenden Datenspeicher aktualisierten Zeilen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Geschäftsobjekt wird davon ausgegangen, dass um einen Datensatz zu einem Zeitpunkt, anstatt in einem Batch zu aktualisieren.  
  
 Vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Vorgang wird ausgeführt, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignis. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignis, um die Werte der Parameter zu untersuchen und alle vorverarbeitung vor dem Ausführen einer <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Vorgang. Zum Ausführen eines Update-Vorgangs der <xref:System.Web.UI.WebControls.ObjectDataSourceView> Objekt verwendet Reflektion, um eine Instanz des Objekts zu erstellen, die durch identifiziert wird die <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft. Er ruft dann die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft unter Verwendung aller zugeordneten <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Eigenschaften. Nach der <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Vorgang abgeschlossen wurde, die <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> Methode wird aufgerufen, um das Auslösen der <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> Ereignis. Sie können behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> Ereignis, um alle Werte zurückgeben, Ausgabeparameter und Ausnahmen zu untersuchen und nach der Verarbeitung ausführen.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Methode delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> Methode der <xref:System.Web.UI.WebControls.ObjectDataSourceView> zugeordneten der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.  
  
> [!IMPORTANT]
>  Sie sollten alle Parameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime ersetzt lediglich den Wert des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft.  
  
## <a name="data-bound-controls"></a>Datengebundene Steuerelemente  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement mit einem datengebundenen Steuerelement verknüpft ist, z. B. die <xref:System.Web.UI.WebControls.GridView> -Steuerelement, es ist nicht notwendig, die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Methode Seitencode. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Methode wird stattdessen direkt vom datengebundenen Steuerelement aufgerufen.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, <xref:System.Web.UI.WebControls.TextBox> Steuerelemente und mehrere <xref:System.Web.UI.WebControls.ObjectDataSource> Objekte, um Daten zu aktualisieren. Im zweiten Beispiel wird für Code die `EmployeeLogic` -Klasse, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.DropDownList> Steuerelement <xref:System.Web.UI.WebControls.TextBox> -Steuerelemente und einige <xref:System.Web.UI.WebControls.ObjectDataSource> von Steuerelementen an Daten zu aktualisieren. Die <xref:System.Web.UI.WebControls.DropDownList> zeigt den Namen eines Mitarbeiters Northwind während der <xref:System.Web.UI.WebControls.TextBox> Steuerelemente dienen zum eingeben und Aktualisieren der Adressinformationen. Da die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung enthält ein <xref:System.Web.UI.WebControls.ControlParameter> -Objekt, das an den ausgewählten Wert der gebunden ist der <xref:System.Web.UI.WebControls.DropDownList>, Schaltfläche mit den löst die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Vorgang wird erst aktiviert, nachdem ein Mitarbeiter ausgewählt ist.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 Das folgende Codebeispiel zeigt die `EmployeeLogic` -Klasse, die im vorherigen Codebeispiel verwendet wird.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn ein <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />-Vorgang abgeschlossen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> Ereignis, um die Werte der Rückgabewert oder Ausgabeparameter zu untersuchen oder um zu bestimmen, ob eine Ausnahme ausgelöst wurde, nachdem ein <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Vorgang abgeschlossen wurde. Der Rückgabewert Output-Parameter und Eigenschaften für die Ausnahmebehandlung stehen aus der <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> Objekt, das dem Ereignis zugeordnet ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Methode oder der Funktion ab, die vom <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />-Steuerelement zum Aktualisieren von Daten aufgerufen wird, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die den Namen der Methode oder der Funktion darstellt, mit deren Hilfe die <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> Daten aktualisiert. Der Standardwert ist eine leere Zeichenfolge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement setzt voraus, dass die Methode für die identifizierte die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft führt nur zu einem Zeitpunkt, anstatt in einem Batch.  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft delegiert an die <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Stellen Sie sicher, dass die Parameternamen für konfiguriert die <xref:System.Web.UI.WebControls.ObjectDataSource> steuern, der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung übereinstimmen, die Spaltennamen, die von der select-Methode zurückgegeben werden.  
  
## <a name="object-lifetime"></a>Lebensdauer eines Objekts  
 Die Methode für die identifizierte der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft kann eine Instanzmethode sein oder ein `static` (`Shared` in Visual Basic) Methode. Wenn es sich um eine Instanzmethode handelt, wird das Geschäftsobjekt wird erstellt und zerstört jedes Mal die Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft wird aufgerufen. Sie behandeln können die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Ereignisse zum Arbeiten mit das Geschäftsobjekt vor der Methode, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft wird aufgerufen. Sie können auch behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignis, das nach der Methode ausgelöst, die von angegeben wird die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft wird aufgerufen. Wenn das Geschäftsobjekt implementiert die <xref:System.IDisposable> -Schnittstelle, die <xref:System.IDisposable.Dispose%2A> Methode wird aufgerufen, bevor das Objekt zerstört wird. Wenn die Methode `static` (`Shared` in Visual Basic), wird das Geschäftsobjekt nie erstellt, und Sie nicht behandeln die <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, und <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Ereignisse.  
  
## <a name="parameter-merging"></a>Zusammenführen von Parametern  
 Parameter hinzugefügt werden, um die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung aus drei Quellen:  
  
-   Aus dem datengebundenen Steuerelement zur Laufzeit.  
  
-   Aus der `UpdateParameters` -Element, deklarativ.  
  
-   Aus der <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignishandler, d. h. programmgesteuert.  
  
 Zunächst alle Parameter, die von datengebundenen Steuerelementen generiert werden hinzugefügt werden die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung. Z. B. wenn die <xref:System.Web.UI.WebControls.ObjectDataSource> gebunden ist eine <xref:System.Web.UI.WebControls.GridView> Steuerelement, das die Spalten `Name` und `Number`, die Parameter für `Name` und `Number` der Auflistung hinzugefügt werden. Der genaue Name des Parameters hängt von der <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Eigenschaft. Der Datentyp dieser Parameter ist `string`. Anschließend wird die Parameter, die in aufgeführt sind die `UpdateParameters` Element hinzugefügt werden. Wenn ein Parameter in der `UpdateParameters` Element gefunden wird, mit dem gleichen Namen wie ein Parameter, der bereits in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> vorhandenen Parameters-Auflistung wurde geändert, um die Parameter entsprechen, die im angegebenen der `UpdateParameters` Element. Dies wird in der Regel verwendet, so ändern Sie den Typ der Daten im Parameters. Schließlich können Sie programmgesteuert hinzufügen und entfernen Sie die Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> -Ereignis, das vor der <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> -Methode ausgeführt wird. Die Methode wird aufgelöst, nachdem die Parameter zusammengeführt werden. Methode Auflösung wird im nächsten Abschnitt erläutert.  
  
> [!IMPORTANT]
>  Sie sollten alle Parameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime ersetzt lediglich den Wert des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft.  
  
## <a name="method-resolution"></a>Methode Auflösung  
 Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> -Methode aufgerufen wird, wird die Datenfelder aus dem datengebundenen Steuerelement, die Parameter, die deklarativ in erstellt wurden die `UpdateParameters` Element und die Parameter, die in hinzugefügt wurden die <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> -Ereignishandler werden zusammengeführt. (Weitere Informationen finden Sie im vorherigen Abschnitt.) Die <xref:System.Web.UI.WebControls.ObjectDataSource> -Steuerelement versucht dann, eine aufzurufende Methode zu suchen. Sucht zuerst für eine oder mehrere Methoden mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft. Wenn keine Übereinstimmung gefunden wird, eine <xref:System.InvalidOperationException> Ausnahme wird ausgelöst. Wenn eine Übereinstimmung gefunden wird, sucht er nach übereinstimmende Parameternamen. Nehmen wir beispielsweise an ein vom angegebenen Typ der <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Eigenschaft verfügt über zwei Methoden namens `UpdateARecord`. Eine `UpdateARecord` verfügt über einen Parameter `ID`, und die andere `UpdateARecord` verfügt über zwei Parameter `Name` und `Number`. Wenn der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung hat nur einen Parameter mit dem Namen `ID`, die `UpdateARecord` -Methode mit nur den `ID` Parameter aufgerufen wird. Der Typ des Parameters wird beim Auflösen der Methoden nicht überprüft. Die Reihenfolge der Parameter spielt keine Rolle.  
  
 Wenn die <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft festgelegt ist, wird die Methode auf eine andere Weise aufgelöst. Die <xref:System.Web.UI.WebControls.ObjectDataSource> sucht nach einer Methode mit dem angegebenen Namen, in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> -Eigenschaft, die einen Parameter des Typs, akzeptiert wird angegeben, der <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> Eigenschaft. In diesem Fall spielt der Namen des Parameters keine Rolle.  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen Benutzer abrufen und Aktualisieren von Datensätzen in der Employees-Tabelle in der Northwind-Datenbank.  
  
 Das erste Beispiel zeigt eine Webseite, die zwei <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelemente, einen <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die erste <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement abrufen und Anzeigen der Namen der Mitarbeiter aus der Datenbank verwendet werden. Die zweite <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement dienen zum Abrufen, anzeigen und ändern Sie die Daten aus dem Mitarbeiterdatensatz, der vom Benutzer ausgewählt wurde.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 Im zweiten Beispiel wird der Handler für das <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> und <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignisse. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Ereignishandler serialisiert das Objekt, das Daten enthält, die aus der Employee-Tabelle abgerufen wurde. Das serialisierte Objekt wird im Ansichtszustand gespeichert. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignishandler deserialisiert das Objekt im Ansichtszustand, der die ursprünglichen Daten für den Datensatz enthält, die aktualisiert wird. Das Objekt, das die ursprünglichen Daten enthält, wird als Parameter an die Update-Methode übergeben. Die ursprünglichen Daten müssen mit der Datenbank übergeben werden, damit es verwendet werden kann, um zu überprüfen, ob die Daten von einem anderen Prozess geändert wurde.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Access-Klasse, die mit der Northwind-Datenbank interagiert. Die Klasse verwendet LINQ Abfragen und Aktualisieren der Employees-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Employees" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Parameterauflistung mit den Parametern ab, die von der durch die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />-Eigenschaft angegebenen Methode verwendet werden.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> mit den Parametern, die von der durch die <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />-Eigenschaft angegebenen Methode verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Namen und Typen der Parameter, die in enthaltenen der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung übereinstimmen, die Namen und Typen der Parameter in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Methodensignatur. Die Parameternamen betroffen sind der <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> -Eigenschaft und die Groß-/Kleinschreibung beachtet werden. Die Parameter in der Auflistung richten sich nach den Daten in das datengebundene Steuerelement, die Parameter, die deklarativ angegeben werden und die Parameter, die programmgesteuert hinzugefügt werden. Weitere Informationen finden Sie im Abschnitt "Das Zusammenführen von" in <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> und [Verwenden von Parametern mit dem ObjectDataSource-Steuerelement](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4).  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> -Eigenschaft ruft die <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> -Eigenschaft, die enthaltene der <xref:System.Web.UI.WebControls.ObjectDataSourceView> -Objekt, das zugeordnet ist die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement.  
  
 Weitere Informationen zum Zusammenführen von Parametern, Lebensdauer eines Objekts und Methode Auflösung finden Sie unter <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.  
  
> [!IMPORTANT]
>  Sie sollten alle Parameterwert überprüfen, die Sie vom Client empfangen. Die Common Language Runtime ersetzt lediglich den Wert des Parameters in der <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Eigenschaft.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Im ersten Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, <xref:System.Web.UI.WebControls.TextBox> Steuerelemente und mehrere <xref:System.Web.UI.WebControls.ObjectDataSource> Objekte, um Daten zu aktualisieren. Im zweiten Beispiel wird für Code die `EmployeeLogic` -Klasse, die im ersten Codebeispiel verwendet wird.  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.DropDownList> Steuerelement <xref:System.Web.UI.WebControls.TextBox> -Steuerelemente und einige <xref:System.Web.UI.WebControls.ObjectDataSource> von Steuerelementen an Daten zu aktualisieren. Die <xref:System.Web.UI.WebControls.DropDownList> zeigt den Namen eines Mitarbeiters Northwind während der <xref:System.Web.UI.WebControls.TextBox> Steuerelemente dienen zum eingeben und Aktualisieren der Adressinformationen. Da die <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Auflistung enthält ein <xref:System.Web.UI.WebControls.ControlParameter> , gebunden ist, auf den ausgewählten Wert der der <xref:System.Web.UI.WebControls.DropDownList>, Schaltfläche mit den löst die <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Vorgang wird erst aktiviert, nachdem ein Mitarbeiter ausgewählt ist.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 Das folgende Codebeispiel zeigt die `EmployeeLogic` -Klasse, die im vorherigen Codebeispiel verwendet wird.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt vor einem <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />-Vorgang ein.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Behandeln der <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignis, um zusätzliche Initialisierung auszuführen, die spezifisch für Ihre Anwendung zum Überprüfen der Werte von Parametern oder die Werte der Parameter vor dem Ändern der <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement führt die Update-Vorgang. Die Parameter sind verfügbar, als ein <xref:System.Collections.IDictionary> -Auflistung, die durch zugegriffen wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> -Eigenschaft, die von verfügbar gemacht wird die <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> Objekt.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Die folgenden drei Beispiele zeigen eine Webseite, eine Code-Behind-Seite-Klasse und eine Datenzugriffs-Klasse, mit denen Benutzer abrufen und Aktualisieren von Datensätzen in der Employees-Tabelle in der Northwind-Datenbank.  
  
 Das erste Beispiel zeigt eine Webseite, die zwei <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelemente, einen <xref:System.Web.UI.WebControls.DropDownList> -Steuerelement, und ein <xref:System.Web.UI.WebControls.DetailsView> Steuerelement. Die erste <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DropDownList> Steuerelement abrufen und Anzeigen der Namen der Mitarbeiter aus der Datenbank verwendet werden. Die zweite <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und dem <xref:System.Web.UI.WebControls.DetailsView> Steuerelement dienen zum Abrufen, anzeigen und ändern Sie die Daten aus dem Mitarbeiterdatensatz, der vom Benutzer ausgewählt wurde.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 Im zweiten Beispiel wird der Handler für das <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> und <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignisse. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> Ereignishandler serialisiert das Objekt, das Daten enthält, die aus der Employee-Tabelle abgerufen wurde. Das serialisierte Objekt wird im Ansichtszustand gespeichert. Die <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Ereignishandler deserialisiert das Objekt im Ansichtszustand, der die ursprünglichen Daten für den Datensatz enthält, die aktualisiert wird. Das Objekt, das die ursprünglichen Daten enthält, wird als Parameter an die Update-Methode übergeben. Die ursprünglichen Daten müssen mit der Datenbank übergeben werden, damit es verwendet werden kann, um zu überprüfen, ob die Daten von einem anderen Prozess geändert wurde.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 Das dritte Beispiel zeigt die Access-Klasse, die mit der Northwind-Datenbank interagiert. Die Klasse verwendet LINQ Abfragen und Aktualisieren der Employees-Tabelle. Das Beispiel erfordert eine LINQ to SQL-Klasse, die den Northwind-Datenbank und die Tabelle "Employees" darstellt. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von LINQ to SQL-Klassen in einem Webprojekt](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081).  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>